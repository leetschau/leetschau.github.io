{"pages":[{"title":"Web Browser in Console","text":"In recent months Internet is blocked severely in mainland. While GUI browsers like Chrome and Firefox with all kinds of proxy don't work anymore, the console browsers like w3m work well. The workflow of web browsing in conosle is: Install search engine ddgr , console browser w3m and macro register q : sudo apt install w3m w3m - img ddgr git clone https : // github . com / cal2195 / q . git ~/ apps / q echo \". $HOME/apps/q/q.plugin.zsh\" >> ~/ . zshrc Restart shell and add a macro: Qddg https_proxy = http : // 1 . 2 . 3 . 4 : 1234 http_proxy = http : // 1 . 2 . 3 . 4 : 1234 BROWSER = w3m ddgr Now you can search \"big data\" with: qddg \"big data\" . After the search result list has been shown, input o 1 to open the result with index 1 in w3m. Frequently Used Key Shortcuts of w3m Page up/down/top/bottom: b / Space / g / G ; Scroll up/down one line: K / J ; Click a url or input texts: Enter; Jump back to previous page: B ; List buffer (show buffer list window): s , here buffer likes tab in GUI browser; Use D delete buffer (in buffer list window); Execute shell command: ! ; Search text in buffer: / ; Quit with/without confirmation: q / Q ; Show information about current buffer: = ; Save buffer contents to file: S ; Toggle HTML source of web page: v ; Show URL of current buffer: c ; Show URL of a link: u ; Save a image into file: ESC I ; Show image inline: I ; Bookmark current buffer: ESC a ; List bookmarks: ESC b ; See full keymap at w3m manual . Note: Here ddgr is chosen as search engine instead of the more popular googler , because the latter mark the IP of my proxy is \"abused\", while the former won't.","tags":"Tech","url":"http://leetschau.github.io/web-browser-in-console.html","loc":"http://leetschau.github.io/web-browser-in-console.html"},{"title":"Mosh Notes","text":"Verified on Ubuntu 18.04. Install mosh on both server and client hosts and coonect it: sudo apt install mosh # on both server and client host mosh yourname @1.2.3.4 # on client host You could connect to mosh server right after installation with apt , without restarting SSH service or other operations. Use IPv6 as is: mosh yourname@ed00:caf7:bb2a:feb4:0f99:9e5a:6a0e:ea79 . Mosh can read SSH config defined in ~/.ssh/config. So with the following SSH config on client host: Host yourserver Hostname 1 . 2 . 3 . 4 User yourname Or the IPv6 format: Host yourserver Hostname ed00 : caf7 : bb2a : feb4 : 0 f99 : 9 e5a : 6 a0e : ea79 User yourname Now you can connect to server with mosh yourserver .","tags":"Tech","url":"http://leetschau.github.io/mosh-notes.html","loc":"http://leetschau.github.io/mosh-notes.html"},{"title":"IPv6 Notes","text":"测试网站：https://test-ipv6.com/ 命令行 IPv6 测试： ` ping6 www.kame.net ping6 ipv6.google.com ` Ref: https://wiki.ubuntu.com/IPv6 https://askubuntu.com/questions/1092778/ipv6-configuration-issue-in-ubuntu-18-04","tags":"Tech","url":"http://leetschau.github.io/ipv6-notes.html","loc":"http://leetschau.github.io/ipv6-notes.html"},{"title":"Bittorrent Server","text":"Verified on Linux Mint 19.2. Install: sudo add - apt - repository ppa : qbittorrent - team / qbittorrent - stable sudo apt update sudo apt install qbittorrent qbittorrent - nox qbittorrent - nox --webui-port=9293 -d Open localhost:9293 in your browser with default user/pwd: admin/adminadmin . Modify login info in Tools > Options > Web UI > Authentication . Note: Without qbittorrent installed beforehand, you get error Register bittorrent is unset when starting qbittorrent server.","tags":"Tech","url":"http://leetschau.github.io/bittorrent-server.html","loc":"http://leetschau.github.io/bittorrent-server.html"},{"title":"Qtile on Ubuntu 18.04","text":"Qtile 在 Ubuntu 18.04 上可用性显著提高， System tray 能够正常显示图标了， 与 i3wm 相比，优点是提供了丰富的 layout， 尤其是 Monad Tall 比较有吸引力，缺点是稳定性较差， 有些 layout 和 status widget 有 bug 会导致整个 wm 死掉， 只能在其他 console 里 kill Qtile PID。 下面是通过今天的试验总结出比较好的 layouts, keybindings 和 status widgets: $ cat ~/ . config / qtile / config . py ... mod = ' mod1 ' layouts = [ layout . Max ( name = \" Max \" ) , layout . TreeTab ( name = ' Tree Max ' ) , layout . Matrix ( name = ' Matrix ' ) , layout . MonadTall ( name = ' Monad Tail ' , border_focus = ' #00008B ' ) , layout . Columns () , layout . VerticalTile () , ] keys = [ Key ( [ mod ], \" k \" , lazy . layout . down ()) , Key ( [ mod ], \" j \" , lazy . layout . up ()) , Key ( [ mod , \" shift \" ], \" j \" , lazy . layout . shuffle_down ()) , Key ( [ mod , \" shift \" ], \" k \" , lazy . layout . shuffle_up ()) , Key ( [ mod ], \" space \" , lazy . layout . next ()) , Key ( [ mod , \" shift \" ], \" space \" , lazy . layout . swap_left ()) , Key ( [ mod ], \" Tab \" , lazy . next_layout ()) , Key ( [ mod , \" shift \" ], \" q \" , lazy . window . kill ()) , Key ( [ mod , \" shift \" ], \" r \" , lazy . restart ()) , Key ( [ mod , \" shift \" ], \" e \" , lazy . shutdown ()) , Key ( [ mod ], \" d \" , lazy . spawncmd ()) , Key ( [ mod ], \" g \" , lazy . layout . grow ()) , Key ( [ mod ], \" s \" , lazy . layout . shrink ()) , Key ( [ mod ], ' o ' , lazy . layout . maximize ()) , Key ( [ mod ], ' n ' , lazy . layout . normalize ()) , Key ( [ mod , \" shift \" ], \" h \" , lazy . layout . swap_left ()) , Key ( [ mod ], \" Return \" , lazy . spawn ( \" terminator \" )) , Key ( [ mod , \" shift \" ], \" f \" , lazy . spawn ( ' /home/leo/apps/firefox/firefox ' )) , Key ( [ mod , ' control ' ], ' l ' , lazy . spawn ( ' i3lock -c 000000 ' )) , ] screens = [ Screen ( bottom = bar . Bar ( [ widget . GroupBox () , widget . Prompt () , widget . WindowName () , widget . TextBox ( \" Layout: \" ) , widget . CurrentLayout () , widget . TextBox ( \" CPU: \" ) , widget . CPUGraph () , widget . TextBox ( \" Mem: \" ) , widget . MemoryGraph () , widget . TextBox ( \" Net: \" ) , widget . NetGraph () , widget . Systray () , widget . Clock ( format = ' %Y-%m-%d %H:%M %a ' ) , ], 24 , ) , ) , ] Ref: Built-in Layouts","tags":"Tech","url":"http://leetschau.github.io/qtile-on-ubuntu-1804.html","loc":"http://leetschau.github.io/qtile-on-ubuntu-1804.html"},{"title":"Build R Package","text":"实例见 hbasereader 。 开发 R package In RStudio > File > New Project > New Directory > R Package, 勾选 Use packrat， 这样在写代码时如果引用了某个 package，会询问是否安装，同意后自动开始 packrat 的安装过程。 在 Console 中执行 packrat::set_opts(vcs.ignore.src = TRUE) ， 效果是在 .gitignore 添加一条 packrat/src/ ，避免源码压缩包进入 VCS; 安装依赖： install.packages(\"tidyverse\") install.packages(\"devtools\") install.packages(\"roxygen2\") packrat::snapshot() 修改 DESCRIPTION 文件：包括包名、名称、描述、版本号、作者等； Tools > Project Options > Build Tools, check Generate documentation with Roxygen . 在 R/ 下编写模块代码并添加文档和测试： 将光标放在编写的函数名上，快捷键 Ctrl-Shift-Alt-R （或 Code > Insert Roxygen Skeleton ） 为函数添加文档，包括名称（第一行）、描述（第二行）、作者 (@author)、参数、返回值、 是否导出（添加 @export ）、示例（用于文档测试）等。 定义外部函数导入： 函数中用到的所有除 base 包的函数要在 roxygen 文档中添加声明，例如： #' @importFrom magrittr \"%>%\" ; 基于 packrat/packrat.lock 文件中的 dependencies 名称和版本更新 DESCRIPTION 文件的 Imports: 列表，要包含所有代码中使用过的 pkgname ； 更新 man 目录下的 .Rd 文件：其中 examples 部分（可以包含多条语句）将在后续的 Check 步骤中被运行，相当于单元测试； Console 中执行 devtools::document() 更新文档 ( Rd files in man folder, NAMESPACE file, etc); 对包执行检查和测试： devtools::check() ，修复报出的 Warning 和 Error （点击 Build 窗体中的 Check 效果相同）； 打包： devtools::build() （源码包）或者 devtools::build(binary = TRUE) （二进制包， Build 窗体中的 Build Source Package 和 Build Binary Package 效果相同）； 安装包并执行函数验证： devtools::install() （点击 Build 窗体中的 Install and Restart 效果相同）。 至此开发流程就完成了。 打包和分发 二进制发布 在要安装插件的目标主机上安装 R 和 devtools 包: install.packages('devtools') （系统需要已安装 R 及其编译工具和其他依赖库，否则执行： apt install r-base r-base-dev build-essential libssl-dev libcurl4-openssl-dev libgit2-dev ）； 从本地文件安装插件： install.packages('warez/hbasereader_0.1.0_R_x86_64-pc-linux-gnu.tar.gz', repos = NULL, dependencies = TRUE) 从 CRAN 安装此插件的依赖： devtools::install_deps('.RPackages/hbasereader') 源代码发布 Note: 由于 Package 源码中要写全包名， %>% 无法使用； 安装包时使用代理服务器： Sys.setenv(http_proxy=\"http://192.68.166.22:8848\") Sys.setenv(https_proxy=\"http://192.68.166.22:8848\") Ref: Package metadata","tags":"Tech","url":"http://leetschau.github.io/build-r-package.html","loc":"http://leetschau.github.io/build-r-package.html"},{"title":"List System Reboot and Shutdown Time on Linux","text":"List system events with last : $ last -xF leo tty1 Tue Jul 30 09 :47:44 2019 still logged in runlevel ( to lvl 5 ) 4 .15.0-51-generi Tue Jul 30 09 :47:22 2019 still running reboot system boot 4 .15.0-51-generi Tue Jul 30 09 :46:47 2019 still running shutdown system down 4 .15.0-51-generi Tue Jul 30 09 :15:20 2019 - Tue Jul 30 09 :46:47 2019 ( 00 :31 ) reboot system boot 4 .15.0-51-generi Tue Jul 30 09 :13:55 2019 - Tue Jul 30 09 :15:20 2019 ( 00 :01 ) leo tty1 Mon Jul 29 15 :01:14 2019 - crash ( 18 :12 ) runlevel ( to lvl 5 ) 4 .15.0-51-generi Mon Jul 29 15 :01:13 2019 - Tue Jul 30 09 :15:20 2019 ( 18 :14 ) reboot system boot 4 .15.0-51-generi Mon Jul 29 15 :00:36 2019 - Tue Jul 30 09 :15:20 2019 ( 18 :14 ) leo pts/8 tmux ( 4610 ) .%3 Sun Jul 28 12 :26:53 2019 - Sun Jul 28 13 :18:59 2019 ( 00 :52 ) The last column of the output is the duration of the event, with format 'HH:MM'. For example, the 4th line of above output shows during 9:15 to 9:46, the status of the system is shutdown , which means the machine is powered off during the 31 minutes. The 5th line shows the reboot event lasted for 1 minute from 09:13:55 to 09:15:20. This command can't provide information about abnormal shutdown (or crash ). For example, we can see the system is booted at 2019.7.29 15:00:36, and reboot at 2019.7.30 09:13:55. There was a power failure in the office in the night of 2019.7.29. But from the logs, there's only a crash log (the 7th line of above code snippet), which means the user leo is logged in at 2019.7.29 15:01:14, but there isn't the corresponding logout message in database wtmp (stored in binary file /var/log/wtmp). Ref: Linux / Unix: last Command Examples Can't explain \"crash\" entries in output of the 'last' command","tags":"Tech","url":"http://leetschau.github.io/list-system-reboot-and-shutdown-time-on-linux.html","loc":"http://leetschau.github.io/list-system-reboot-and-shutdown-time-on-linux.html"},{"title":"R Developer Training Schedule","text":"R 建模培训计划 基础知识 基础开发环境 主要内容：Linux 系统和 RStudio 安装和使用； 参考资料：https://linuxmint.com/ 检验标准：为开发笔记本安装 Linux 系统，或使用 Mac 系统登录 Linux 服务器， 能够安装和启动 RStudio； 建议时间：1周 R语言基础 主要内容：R 语言编程基础； 参考资料：R in Action by Robert I. Kabacoff 检验标准：能在 R REPL 中运行函数返回结果，编写并运行简单的 R 脚本； 能够安装和导入第三方包； 建议时间：1周 文档编写 主要内容：Rmarkdown 语法，版本控制，项目管理； 参考资料： R for Data Science 第21章：R Markdown； https://git-scm.com/ git - 简明指南 https://rstudio.github.io/packrat/ 检验标准： 能够使用 Rmarkdown 编写包含格式化文本、代码、图片和数学公式的文档； 能够使用 git 做版本控制，如提交版本，浏览版本历史等等； 能够在 RStudio 中创建项目，使用 packrat 管理项目依赖； 建议时间：1周 R 数据建模 数据探索 参考资料：R for Data Science, Part I 建议时间：3周 数据清洗和整理 参考资料：R for Data Science, Part II 建议时间：3周 R高级编程 参考资料：R for Data Science, Part III 建议时间：2周 数据建模 主要内容：建模工作流程，实例分析，大数据并行场景中的模型分析； 参考资料：中能博泰数据建模培训教材： 建议时间：3周 快速原型 主要内容：静态数据面板、交互式数据应用开发技术 参考资料：中能博泰数据建模培训教材：快速原型部分； 建议时间：3周 实例分析 主要内容： 快速原型实践：结合一个具体业务场景，创建快速原型； 数据建模实践：结合一个具体业务场景，完成数据导入、清洗、整理、建模和展示整个过程。 建议时间：2周","tags":"Tech","url":"http://leetschau.github.io/r-developer-training-schedule.html","loc":"http://leetschau.github.io/r-developer-training-schedule.html"},{"title":"Python vs R","text":"整体评估 Python R 代码量 4 5 建模难度 4 5 维护成本 4 5 核心库成熟度 4 5 可视化 4 5 数据展示 3 5 开发环境整合 4 5 社区活跃度 5 5 大数据支持 5 4 工程化支持 5 3 代码规范化 5 3 说明 维护成本：Python 是 OOP 为主的多范式语言，数据分析的主力 packages，包括 pandas, scikit-learn 使用 OOP-FP 混合风格；R 在用户 API 层面基本实现了纯粹的 FP 风格，代码表达能力强，可读性好； 数据可视化：R 的 ggplot2 包基于 Grammar of Graphics 实现了图形语义，极大提升了数据可视化的表达能力；Python 的 matplotlib, seaborn 功能较弱，对标 ggplot 的 ggpy 近3年来没有更新； 数据展示：数据分析结果的展示能力，R 有 killer app RMarkdown 和 shiny dashboard ，可以方便地将数据图表整合为交互式的数据应用（对标 Tableau, PowerBI, 帆软等），Python 的 Jupyter notebook 在展示效果和版本控制友好等方面相比 RMardown 还有一定的距离，dashboard 工具方面，新秀 dash 发展势头不错，但距离 shiny 还有一定距离； 开发环境整合：R 的 开发工具 RStudio (server) 实现了完整的数据探索工具链，包括 editor, REPL, 数据窗口、绘图窗口和帮助文档，以及辅助的命令历史、文件浏览、版本控制等工具窗口；Python 的开发环境选择方案较多，最常用的 PyCharm community edition 对数据分析支持有限，professional edition 价格昂贵，其他还有 Spyder(开发不活跃，维护为主), Rodeo (开发不活跃), Jupyter Lab (最有前途，但目前还处于完善核心功能阶段) 等，目前功能最完整的是 text editor (vim, sublime, VS Code, etc) + REPL (IPython)，有一定的学习成本； 大数据支持：PySpark 2.3 增加的 pandas_udf 大幅降低了 Python 代码向 Spark 迁移的成本，另外 Python 社区的 Dask 也是比较成熟的分布式计算框架；R 的 sparklyr 目标是实现对 dplyr 包的完整支持，从而实现 单点-分布式 程序的统一。SparkR 由于性能问题目前在生产环境中使用较少，另外还有一个比较冷门的 pbdR ； 工程化支持，指开发者能够方便地配置不同项目的开发环境，并将开发环境中通过验证的代码方便地发布到生产环境中。Python 有完善的工具链支持，包括但不限于：pip, pipenv, conda, pyinstaller, pyminifier 等；R 只有 packrat 实现了初步的环境管理； 代码规范化：Python 有 PEP8 规范，在此基础上社区开发了 flake8, autopep8, yapf 等多款格式、语法和语义检查/修正工具，在主流编辑器上都有插件，R 社区尚没有统一的代码风格规范，只有一些命名和格式习惯。 总结 R 适合作为数据探索和展示、沟通工具，代码表达能力强，可以快速构建分析模型、并生成功能丰富的文档、应用。 Python 则适合作为大数据分析工具，在工程化、代码规范度、性能等方面更胜一筹。 模型对比 简单模型和数据处理 下面分别用 R 和 Python 实现了线性回归模型： set.seed ( 100 ) inp <- data.frame ( 'x' = 4 * rnorm ( 100 )) inp $ y <- 4 * inp $ x - 1 + 4 * rnorm ( 100 ) plot ( inp , col = 'blue' ) fit <- lm ( y ~ x , data = inp ) abline ( fit , col = 'red' ) from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt import numpy as np import pandas as pd # Create random data np . random . seed ( 100 ) x = 4 * np . random . rand ( 100 ) y = 4 * x - 1 + 4 * np . random . rand ( 100 ) inp = pd . DataFrame ({ 'x' : x , 'y' : y }) # Create model model = LinearRegression ( fit_intercept = True ) model . fit ( inp . x [:, np . newaxis ], inp . y ) xfit = np . linspace ( 0 , 5 , 50 ) yfit = model . predict ( xfit [:, np . newaxis ]) # plot plt . scatter ( inp . x , inp . y , c = 'b' ) plt . plot ( xfit , yfit , c = 'r' ) plt . show () 不难发现 R 的代码几乎是自解释的，而 Python 代码则需要具备一定的领域知识才能理解。 复杂模型分析 数据可视化 分布式迁移","tags":"Tech","url":"http://leetschau.github.io/python-vs-r.html","loc":"http://leetschau.github.io/python-vs-r.html"},{"title":"R Style Guide","text":"R Style Guide 综述 R 使用了 Java/C 基于大括号的自由编码风格，对不规范的编码格式容忍度较高。 但为了提高代码可读性，开发者仍然应遵守社区的最佳实践规范。 作为一种面向数据分析的编程语言，尽量使用 tidyverse 包实现应用功能， 配合使用 styler 和 lintr 做格式化检查工具。 命名规则 有效的命名风格： lowercase lower_case_with_underscores UPPERCASE UPPER_CASE_WITH_UNDERSCORES CapWords 文件 文件名使用 lower_case_with_underscores 风格，并以 R 作为扩展名： # Good fit_models . R utility_functions . R # Bad fit models . R foo . r stuff . r 语法 变量和函数名称 变量和函数名使用 lower_case_with_underscores 风格， 变量一般为名词，函数一般为动词： # Good day_one day_1 # Bad DayOne dayone 不要使用 . 作为名称内部分隔符。 避免使用常用的函数名作为变量名，例如： mean <- function ( x ) sum ( x ) 空格 逗号前面不要有空格，后面保证有且只有一个空格： # Good x [, 1 ] # Bad x [, 1 ] x [ , 1 ] x [ , 1 ] 函数调用时，括号两侧不要有空格： # Good mean ( x , na . rm = TRUE ) # Bad mean ( x , na . rm = TRUE ) mean ( x , na . rm = TRUE ) if , for , while 语句的括号两侧保留一个空格： if ( debug ) { show ( x ) } # Bad if ( debug ) { show ( x ) } 函数定义时，参数列表和函数体中间保留一个空值： # Good function ( x ) {} # Bad function ( x ) {} function ( x ) {} 二元操作符两侧各保留一个空格： # Good height <- ( feet * 12 ) + inches mean ( x , na.rm = 10 ) # Bad height <- feet * 12 + inches mean ( x , na.rm = 10 ) 行尾不要留有空格。 代码块 R 的代码块书写规则： 左大括号是一行代码的结尾字符，不要单起一行； 每层缩进使用两个空格； 右大括号单起一行，且只有这一个字符； 示例： # Good if ( y < 0 && debug ) { message ( \" y is negative \" ) } if ( y == 0 ) { if ( x > 0 ) { log ( x ) } else { message ( \" x is negative or zero \" ) } } else { y &#94; x } test_that ( \" call1 returns an ordered factor \" , { expect_s3_class ( call1 ( x , y ) , c ( \" factor \" , \" ordered \" )) } ) tryCatch ( { x <- scan () cat ( \" Total: \" , sum ( x ) , \" \\n \" , sep = \"\" ) }, interrupt = function ( e ) { message ( \" Aborted by user \" ) } ) # Bad if ( y < 0 && debug ) { message ( \" Y is negative \" ) } if ( y == 0 ) { if ( x > 0 ) { log ( x ) } else { message ( \" x is negative or zero \" ) } } else { y &#94; x } 折行 每行长度原则不超过80个字符，如果一个函数调用太长，写成每行一个参数的形式： # Good do_something_very_complicated ( something = \"that\" , requires = many , arguments = \"some of which may be long\" ) # Bad do_something_very_complicated ( \"that\" , requires , many , arguments , \"some of which may be long\" ) 赋值 使用 <- 给变量赋值，不要使用 = ： # Good x <- 5 # Bad x = 5 分号 不要在语句之间和语句结尾使用分号。 引号 当文本内没有双引号时，使用双引号引用文本，否则使用单引号： # Good \"Text\" 'Text with \"quotes\"' ' <a href= \"http://style.tidyverse.org\" > A link </a> ' # Bad 'Text' 'Text with \"double\" and \\'single\\' quotes' 注释 在数据分析代码中，使用注释重要的发现和分析结果。 如果需要通过注释表达代码的意图，尝试改写代码，尽量将意图体现在代码中。 如果某些 why 不能很好地以代码的形式表达，可以记录在注释中，但不要在注释中写 what 和 how。 如果注释比代码多，用 Rmarkdown 代替 R 脚本文件。 函数返回 只在提前返回时使用 return() 函数，否则使用 R 的\"返回最后一个表达式\"规则，不显式使用 return() ： # Good find_abs <- function ( x ) { if ( x > 0 ) { return ( x ) } x * - 1 } add_two <- function ( x , y ) { x + y } # Bad add_two <- function ( x , y ) { return ( x + y ) } return() 语句单独写一行： # Good find_abs <- function ( x ) { if ( x > 0 ) { return ( x ) } x * - 1 } # Bad find_abs <- function ( x ) { if ( x > 0 ) return ( x ) x * - 1 } 管道操作符 管道操作符左侧有一个空格，右侧是行尾，不要加空格，原则上每行一个管道操作： # Good iris %>% group_by ( Species ) %>% summarize_if ( is . numeric , mean ) %>% ungroup () %>% gather ( measure , value , - Species ) %>% arrange ( value ) # Bad iris %>% group_by ( Species ) %>% summarize_all ( mean ) %>% ungroup %>% gather ( measure , value , - Species ) %>% arrange ( value ) 如果一个表达式中只有一个管道操作，且后续不存在扩展的可能，改成普通函数形式： # Good arrange ( iris , Species ) # Bad ( when no plan to expand it later on ) iris %>% arrange ( Species ) 参与管道操作的函数如果没有参数， magrittr 允许不写括号，不要使用这一特性： # Good x %>% unique () %>% sort () # Bad x %>% unique %>% sort 通过管道为变量赋值： iris_long <- iris %>% gather ( measure , value , - Species ) %>% arrange ( - value ) 不要使用 %<>% 操作符： # Good x <- x %>% abs () %>% sort () # Bad x %<>% abs () %>% sort () 文档 R 的 roxygen2 类似于 Java 的 JavaDoc， 将代码中符合指定格式的代码注释转换为 HTML 格式文档。 环境和依赖管理 R 的 packrat 大致相当于 Java 的 Maven 和 Python 的 pipenv。 最简工作流程： library ( packrat ) init ( \"~/docs/myproject\" ) # initialize project scaffold install . packages ( 'rmarkdown' ) install . packages ( 'tidyverse' ) status () snapshot () # download package source code into packrat / src packrat/src 目录下保存依赖库的源码压缩包，库版本保存在 packrat/packrat.lock 文件中， 配置信息保存在 packrat/packrat.opts 文件中。 packrat 默认会把压缩的源码包提交到版本控制系统中，当在新环境中 clone 出这个代码库并用 RStudio 打开这个 R Project 时， 会自动在项目私有环境中安装 packrat，在 RStudio 中执行下面的命令重建环境： library ( packrat ) status () # optional restore () 使用 install.packages() 安装新的依赖库后， 执行 snapshot() 会下载这些依赖库的源码压缩包到 packrat/src 目录下。 并更新 packrat/packrat.lock 文件。 如果当前环境中不包含所有被 snapshot 的 package， status() 会报告， 如果新安装的包还没有 snapshot， status() 不会报告。","tags":"Tech","url":"http://leetschau.github.io/r-style-guide.html","loc":"http://leetschau.github.io/r-style-guide.html"},{"title":"Python Developer Training Schedule","text":"算法组 Python 培训计划 第一周 基础开发环境 主要内容：Linux 系统安装和使用； 参考资料：https://linuxmint.com/ 检验标准：为开发笔记本安装 Linux 系统，或使用 Mac 系统登录 Linux 服务器，熟悉基本使用方法 文本编辑器 主要内容：文本编辑器的使用 参考资料：https://neovim.io/ 检验标准：安装 neovim 并进行基本的文本编辑 数据分析框架 主要内容：Anaconda 安装和使用 参考资料：https://www.anaconda.com/distribution/ 检验标准：安装 Anaconda 并正常启动 交互开发环境 主要内容：Python 交互环境使用 参考资料：https://ipython.org/ 检验标准：掌握使用 IPython 进行程序开发的基本流程 第二周 环境管理 Python 包管理，virtualenv 管理 参考资料： https://conda.io/en/latest/ https://pip.pypa.io/en/stable/ 检验标准：使用 conda 和 pip 创建 virtual env 数据分析工具 主要内容：结合离散度算子学习 Pandas 和 Numpy 的基本使用方法，看懂离散度计算流程； 参考资料： http://pandas.pydata.org/ https://www.numpy.org/ 基于集散率的光伏组串故障预警算法文档 检验标准：重现集散率计算结果，说明计算原理和流程 常用数据分析模式 主要内容：Split-apply-combine 模式在 Python 中的实现方法； 参考资料：https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html 检验标准：说明模式原理，使用 Python/R 编写并运行一个基本的 split-apply-combine demo 算法文档编写 主要内容：Rmd语法和工具，使用 RStudio 编写算子定义，按照指定格式输出文档； 参考资料：https://rmarkdown.rstudio.com/ 检验标准：使用 Rmarkdown 格式编写简单的算法说明文档，输出为 Word/HTML 格式 第三周 代码风格检查 主要内容：Python coding style guide，格式检查和修改工具； 参考资料： https://flake8.readthedocs.io/en/latest/ https://github.com/google/yapf https://github.com/w0rp/ale 检验标准：在文本编辑器/IDE中使用格式检查工具发现和修正语法/逻辑错误，保证代码符合代码规范 单元测试 主要内容：Python doctest 和 unit test framework 在数据分析中的应用； 参考资料： https://docs.python.org/3/library/doctest.html https://docs.pytest.org/en/latest/ 检验标准：使用 doctest/pytest 编写简单的单元测试代码并运行测试 版本控制 主要内容：代码、文档和数据的版本控制（git, dvc）； 参考资料： https://git-scm.com/ https://dvc.org/ 检验标准：掌握版本控制的基本原理，使用 git, dvc 实现基本的代码，数据文件的版本控制 第四周 类型标示 主要内容：Python type system 在数据分析中的应用； 参考资料：https://www.python.org/dev/peps/pep-0484/ 检验标准：掌握类型标记的作用和实现方法，能为函数添加简单的 type hints 程序加密和打包 主要内容：Python 算子打包发布实践； 参考资料： https://github.com/pypa/pipenv https://github.com/liftoff/pyminifier https://www.pyinstaller.org/ 检验标准：使用 pipenv 定义算子开发环境，使用 pyminifier 加密算子，使用 pyinstaller 为算子打包 算子开发 主要内容：平台算子开发：在平台上结合CSV输入输出实现计算流程，分析错误日志，实现可运行的平台算子。 参考资料：GICS平台算子开发用户手册 检验标准：在 GICS 平台上结合 CSV input/output 算子创建基本的 自定义Python算子， 掌握通过 Spark/Yarn history server 查看运行日志并排查错误的方法","tags":"Tech","url":"http://leetschau.github.io/python-developer-training-schedule.html","loc":"http://leetschau.github.io/python-developer-training-schedule.html"},{"title":"Python Style Guide","text":"Python Style Guide 综述 Python 语言最明显的特征之一是用缩进量表示从属关系， 没有采用 Java, C 用括号定义作用域的自由书写风格。 所以 Python 对代码格式的要求十分严格，社区发展出了完整的编码规范和丰富的检查和修复工具， 并能够整合到几乎所有主流编辑器中。 编码规范在提升代码质量和可读性、降低维护成本等方面发挥了核心作用，但如果没有相应的工具链帮助其落地， 很难真正产生效果，本文第3、4节专门论述如何搭建可用的工具链。 Python 社区不鼓励对编码规范做人工审查，因为人工审查存在如下问题： 成本高：需要人力和时间做代码审查； 效果差：很难避免主观判断和遗漏； 事后审查：反馈周期长，不能培养开发者良好的编码习惯； 由于上述原因，大多数人工审查最后都会被废弃，或者流于形式，无法产生应有的效果。 所以社区的最佳实践是通过工具链做自动编码审查，解决规范的落地问题。 本规范适用于 Python 3.6 及以上版本。 编码规范 Python 的编码规范由社区官方组织 Python Software Foundation (PSF) 发布的 Python Enhancement Proposal (PEP) 规范文档中的 PEP 8 定义， 适用于所有 Python 开发场景。 Docstring 规范见 PEP 257 。 核心原则： 程序是由一系列函数和类型 (type) 构成的，尽量使用 expression 代替 statement； FP 优于 OOP，尽量不要使用类 (class) 和继承关系； 尽量使用不可变 (immutable) 数据结构，不修改已有变量，而是通过函数调用返回新的变量； 尽量不使用 for/while 循环结构，代之以 FP 风格的 map , reduce , group_by 等； 一个有明确业务含义的动作，尽量使用一行代码实现，如果无法实现，通过定义一个语义明确的函数实现； 变量/函数的命名应具备明确的业务含义，不要使用有误导性的变量名称； 任何名称（包、模块、函数、类、变量）中尽量使用英文及英文缩写命名，不要使用汉语拼音、拼音首字母缩写以及拼音-英文混合命名； 避免魔法数字，将数字定义为常量，常量的命名应具备明确的业务含义； 代码嵌套层次不超过3层； 单行代码长度不超过 80 个字符； 避免使用全局变量； 保证代码可读性：使用 docstring 注释模块和函数； 保证代码正确性：为函数添加 doctest，并保证 doctest 能够通过测试； 命名规则 有效的命名风格： lowercase lower_case_with_underscores UPPERCASE UPPER_CASE_WITH_UNDERSCORES T: 单个大写字母 CapWords 某些语言可能会使用其他命名风格，例如 mixedCase, Variable-Name, Class_Name, b 等， 但这些风格 Python 不推荐使用。 基本命名规则： Package and Module: 尽量使用 lowercase，可以使用 lower_case_with_underscores Variable: lowercase 或者 lower_case_with_underscores Function and method: lowercase 或者 lower_case_with_underscores Constants: UPPERCASE 或者 UPPER_CASE_WITH_UNDERSCORES Type variable: T 或者 CapWords Class: CapWords 空格使用规范 括号两侧不加空格： Right : spam ( ham [ 1 ], { eggs : 2 }) Wrong : spam ( ham [ 1 ], { eggs : 2 } ) Right : dct [ 'key' ] = lst [ index ] Wrong : dct [ 'key' ] = lst [ index ] 冒号、逗号、分号前不加空格： Right : if x == 4 : print x , y ; x , y = y , x Wrong : if x == 4 : print x , y ; x , y = y , x 函数和括号间不加空格： Right : spam ( 1 ) Wrong : spam ( 1 ) 操作符两侧加空格： Right : a = 1 + 2 Wrong : a = 1 + 2 参数赋值的等号两侧不加空格： def complex ( real , imag = 0.0 ): return magic ( r = real , i = imag ) 不要写成 imag = 0.0 . 规范检查和格式化工具 Python 开发者使用 linter 发现编码中的问题，给出错误位置和类型（错误码）， 由于大部分问题都有简单直接的修复方法，为了进一步提高效率，社区开发出了 formatter 自动修复无需人工干预就能修复的问题。 Linter 查找两大类问题： 逻辑问题：例如使用未被赋值的变量； 风格问题：不符合 PEP 8 和 257 的书写方法。 Linter 推荐使用 flake8 ，它能够同时检查上面两类错误， 并给出 错误编码 。 flake8 默认不做命名风格检查，需要安装插件 pep8-naming 实现命名规则检查。 Formatter 推荐使用 Google 的 yapf ，定制性好，能够很好地和 flake8 整合在一起。 编辑器整合 编辑器整合工具在编辑器后台运行 linter 和 formatter，使开发者在编写代码时即时发现和修复问题。 vim 推荐使用 neovim 作为编辑器，使用 vim-plug 作为插件管理工具， 使用 ALE 作为异步 linter 引擎，然后通过如下方式支持 linter 和 formatter: let g : ale_enabled = 1 let b : ale_linters = { 'python' : [ 'flake8' ] } let b : ale_fixers = { 'python' : [ 'yapf' ] } Plug 'w0rp/ale' 编码最佳实践 用 logging.debug 取代用于 debug 和调试的 print 语句； 导入外部文件时尽量使用相对路径，代码任何位置，包括注释中，不允许出现个人开发环境的绝对文件路径； 附录 Q: 为什么 Python 采用缩进语法？ A: 与括号语法相比，用缩进表示作用域符合人类阅读文本时对语义群的划分。体现了 Python 语言重视代码可读性，认为可读性比编译器解析方便更重要的设计思想。","tags":"Tech","url":"http://leetschau.github.io/python-style-guide.html","loc":"http://leetschau.github.io/python-style-guide.html"},{"title":"Code Review Guide","text":"代码评审流程 代码和文档准备 算法流程说明文档，并由需求等相关方验证通过； 模块、类和函数级别的代码内文档（JavaDoc, ScalaDoc, PythonDoc 等）； 类/函数级别的单元测试； 类/函数级别的运行时间分析报告； 类/函数级别的内存使用量分析报告； 评审流程 算法流程讲解和答疑（基于算法流程说明文档）； 代码实现的整体思路和实现方法说明：包括用什么方法实现业务目标， 整体处理流程如何细化，每个环节在代码中对应哪个类/函数； 计算流程是否能达到业务目标，有哪些潜在的问题和风险； 有无其他实现方案以及各自的优缺点； 正确性分析：说明关键函数的实现机制，结合测试用例，说明从输入到输出的详细处理过程， 关键部分可以在 debugger 中展示数据的运行时形态； 性能分析：通过运行时间和内存使用量报告，讨论可能的性能提升方法； 可维护性分析：代码风格、可读性方面的建议； 代码评审输出 待改进问题列表：包括问题所在位置，修改人，审核人； 更新后的算法流程说明文档（如果算法流程有改变）。","tags":"Tech","url":"http://leetschau.github.io/code-review-guide.html","loc":"http://leetschau.github.io/code-review-guide.html"},{"title":"Python Profile","text":"Time profiling Profile in IPython shell Install line_profiler with conda/pip install line_profiler . Profile time usage of function unit_deviation line-by-line: $ ipython > % load_ext line_profiler > % lprun ? > from deviation_pandas import main , unit_deviation , inputFilePath , outputFilePath , isTrain > % lprun - f unit_deviation main ( inputFilePath , outputFilePath , isTrain ) Here main(...) is the caller of the profiled function unit_deviation . You can have multiple -f <func> arguments for profiling multiple functions at the same time. Profile with decorator Firstly add decorator @profile above the target function (such as unit_deviation ). Then profile the function with kernprof -l deviation_pandas.py . Here -v means print result in console instead of save to a file (named deviation_pandas.py.lprof ). -l mean line-by-line . No matter if the -v is used, kernprof always save the profiling results in a file named deviation_pandas.py.lprof . You can view it with python -m line_profiler deviation_pandas.py.lprof Memory profiling Install memory_profiler with conda/pip install memory_profiler . Profile in IPython shell Profile memory useage of function unit_deviation line-by-line: $ ipython > % load_ext memory_profiler > % memit ? > from deviation_pandas import main , unit_deviation , inputFilePath , outputFilePath , isTrain > % memit main ( inputFilePath , outputFilePath , isTrain ) peak memory : 370.30 MiB , increment : 183.06 MiB > % mprun ? > % mprun - f unit_deviation main ( inputFilePath , outputFilePath , isTrain ) Here peak memory means the max amount of memory used. increment means the new memory used by function unit_deviation only. Profile with decorator Add from memory_profiler import profile , and decorator @profile above the target function (for example, unit_deviation or main ), and run python deviation_pandas.py . Time-based memory usage To plot time versus whole memory useage, run: $ mprof run deviation_pandas.py $ mprof plot py-spy Install py-spy with cargo install py-spy (you need install rust with asdf beforehand). An error /usr/bin/ld: cannot find -lunwind occured on Ubuntu 18.04. Fix it with apt install libunwind-dev . Profile script deviation_pandas.py with /home/leo/.asdf/installs/rust/stable/bin/py-spy -- python deviation_pandas.py . Ref: Profiling and Timing Code py-spy","tags":"Tech","url":"http://leetschau.github.io/python-profile.html","loc":"http://leetschau.github.io/python-profile.html"},{"title":"Conda Environment Definition and Restore","text":"A demo conda env definition file created by conda list -e > req.txt : # This file may be used to create an environment using : # $ conda create --name pvop --file req.txt # platform : linux - 64 python = 3 . 6 . 4 numpy = 1 . 14 . 2 pandas = 0 . 23 . 4 matplotlib = 3 . 0 . 3 ipython yapf flake8 pep8 - naming line_profiler memory_profiler Add comments into this file with # . So you know how to create a new env with this file. Verified on conda 4.7.5. Notes: conda is an all-in-one environment manager. You can define Python version directly in the definition file (req.txt). By contrast, pipenv , poetry can't create an env with a Python interpreter not exisitng in OS. For example, if the Python version of your system is 3.7, you can't create an virtualenv with Python 3.6 if Python 3.6 hasn't been installed somewhere in you system. So you have to install pyenv or asdf to management Python interpreter, and use both a interpreter manager (such as pyenv ) and a virutalenv manager (such as poetry). So you can say miniconda = pyenv + poetry. Add version numbers for application dependencies, such as Python, pandas, etc. While version numbers are usually unnecessary for development dependencies, such as ipython, flake8, etc. As for version 4.7.5, exporting environment definition to yml file doesn't work: conda env export > env . yml conda create - n pvop --file env.yml CondaValueError : could not parse 'name: pandas023test' in : env . yml Exporting to plain text file doesn't work, too: conda list - e > req . txt conda create - n newenv --file req.txt PackagesNotFoundError : The following packages are not available from current channels : - attrs == 19 . 1 . 0 = pypi_0 - click == 7 . 0 = pypi_0 The last part of each package (here is pypi_0 ) must be removed. Or conda create --file ... can't parse it successfully.","tags":"Tech","url":"http://leetschau.github.io/conda-environment-definition-and-restore.html","loc":"http://leetschau.github.io/conda-environment-definition-and-restore.html"},{"title":"Packrat Notes","text":"下午在 RStudio 中创建 R for Data Science 代码库，由于这本书的在线版和影印版（纸质）章节结构发生了变化，代码库中的练习按影印版本标记，笔记写在纸质书上。 另外创建的 R project 使用 Packrat 作为依赖管理工具， Packrat 是 R 的一个依赖管理工具， 它把项目依赖包的源代码以压缩包形式保存在版本控制系统中，这样一个 R 项目就可以不依赖系统的 R 包运行了。 创建项目和安装依赖： library ( packrat ) init ( \"~/docs/myproject\" ) # initialize project scaffold install . packages ( 'rmarkdown' ) install . packages ( 'tidyverse' ) status () snapshot () # download package source code into packrat / src 使用 install.packages() 安装新的依赖库到 packrat/lib 目录中， 执行 snapshot() 会下载依赖库的源码压缩包到 packrat/src 目录下。 并更新 packrat/packrat.lock 文件。 依赖库版本保存在 packrat/packrat.lock 文件中， 配置信息保存在 packrat/packrat.opts 文件中。 packrat 默认把源码包提交到版本控制系统中，不提交编译后的包， 当在新环境中 clone 出这个代码库并用 RStudio 打开这个 R Project， 会自动在项目私有环境中安装 packrat，在 RStudio 中执行下面的命令重建环境： library ( packrat ) status () # optional restore () 其中 restore() 将源码编译为二进制包时，需要系统的 develop 库支持， 如果没有安装这些库就会报错。 如果当前环境中不包含所有被 snapshot 的 package， status() 会报告， 如果新安装的包还没有 snapshot， status() 不会报告。","tags":"Tech","url":"http://leetschau.github.io/packrat-notes.html","loc":"http://leetschau.github.io/packrat-notes.html"},{"title":"HBase Notes","text":"HBase can be seen as a key-value database with structure: rowkey -> column family -> column (qualifier) -> value HBase shell Hbase shell is a DSL of JRuby. Start it with hbase shell : help list_namespace list_namespace_tables ' default ' # show all tables in namespace ' default ' help ' list ' list # display all the tables in HBase desc ' SN ' # show column families of table ' SN ' count ' SN ' scan ' SN ' , { COLUMNS => ' 201905 ' , LIMIT => 3 } # list the first row of column family ' 201905 ' scan ' SN ' , { COLUMNS => ' 201905:0568242218 ' } # list all cells of column ' 201905:0568242218 ' ( in all rows ) scan ' SN ' , { COLUMNS => ' 201905:0568242218 ' , LIMIT => 3 } # list only first 3 cells in above results get ' SN ' , ' 201905 ' , { LIMIT => 5 } get ' SN ' , { COLUMNS => ' 201905 ' , LIMIT => 5 } create ' t2 ' , { NAME => ' fa ' }, { NAME => ' fb ' } # create a new table with 2 column families ' fa ' and ' fb ' create ' wlwqx ' , ' 201901 ' , ' 201902 ' , ' 201903 ' # create a table ' wlwqx ' with 3 column families alter ' t2 ' , NAME => ' fc ' # add a new column family ' fc ' alter ' t2 ' , ' delete ' => ' fa ' # delete column family ' fc ' put ' t2 ' , ' row3 ' , ' fc:kk ' , 33 # add a cell with value 33 scan ' t2 ' # you must disable a table before delete it disable ' t2 ' drop ' t2 ' # you can delete multiple tables with regex # the parameter of the following commands use regex syntax instead of shell wildcard # so the dot is mandatory disable_all ' t.* ' drop_all ' t.* ' Note: In a Ruby method call, you should omit the parentheses when the last parameter is a hash , which is equivalent to dict in Python. Convert timestamp to datetime Convert a timestamp 1557935890060 in a HBase cell to normal datetime with: >>> import time >>> time . ctime ( 1557935890060 / 1000 ) 'Wed May 15 23:58:10 2019' Run Script Only run a script: cat << EOF > get_info list_namespace_tables ' default ' desc ' SN ' exit EOF hbase shell get_info Save output to a file: hbase shell <<< \"scan 'SN', {COLUMNS => '201905'}\" > sn201905.txt , or run multi-line script: hbase shell << EOF > res . txt > list_namespace_tables 'default' > desc 'SN' > EOF Export Data to CSV file Export table 111 in CDH HBase on host 220: cd / opt / cloudera / parcels / CDH - 5 . 15 . 1 - 1 . cdh5 . 15 . 1 . p0 . 4 / lib / hbase hbase org . apache . hadoop . hbase . mapreduce . Export 111 dump111 hadoop fs - ls . / dump111 hadoop fs - cat dump111 / part - m - 00000 Dump and Restore $ hbase org . apache . hadoop . hbase . mapreduce . Export wlwqx / tmp / out $ hadoop fs - ls / tmp / out # verify the dumped files $ hbase shell > create ' newwl2 ' , ' 201901 ' > exit $ hbase org . apache . hadoop . hbase . mapreduce . Import newwl2 / tmp / out2 $ hadoop fs - get / tmp / out . Note: The first parameter of Import command ( newwl2 in this case) must already exist, and has the same column family with the origin table ( newwl in this case); The 2nd parameter of Import command ( /tmp/out2 in this case) is a folder on HDFS, not in local FS; The Export command dumps hbase table into HDFS, you need download them to local FS to backup. Ref: Export HBase data to csv Working with the HBase Import and Export Utility","tags":"Tech","url":"http://leetschau.github.io/hbase-notes.html","loc":"http://leetschau.github.io/hbase-notes.html"},{"title":"Remove &#94;M in Text File","text":"Remove &#94;M in a text file in vim with :%s/&#94;M$//g , where input &#94;M with Ctrl-v, Ctrl-m, instead of literally &#94;M .","tags":"Tech","url":"http://leetschau.github.io/remove-m-in-text-file.html","loc":"http://leetschau.github.io/remove-m-in-text-file.html"},{"title":"Manage Multiple Working Environments in Console","text":"desk is a lightweight workspace manager in console. You can define a desk with command desk edit <desk-name> , which create a shell script containing working directory, environment variables, alias, functions, etc. List the activated desk (if any) or all existing desks with desk . Activate a desk with desk . <desk-name> . All elements defined in desk config file will be loaded into the current console. Quit a desk with Ctrl-d. A working flow demo: $ desk edit ucts $ cat ~/ . desk / desks / ucts . sh # ucts . sh # # Description : Workspace for UCTS : UnUnderstanding Computation by Tom Stuart # cd ~/ Documents / books rifle ' Understanding computation_From simple machines to impossible programs-Tom Stuart(2013).pdf ' cd ~/ Documents / temp / UnderstandingComputation nvim chapter2 . rb $ desk . ucts","tags":"Tech","url":"http://leetschau.github.io/manage-multiple-working-environments-in-console.html","loc":"http://leetschau.github.io/manage-multiple-working-environments-in-console.html"},{"title":"Add Comments In R Markdown","text":"There are some options to add comments in R Markdown file: In RStudio, comment/uncomment lines with Ctrl-Shift-c : <! -- Add some comments here --> Option 2: --- Add your comments here : Paragraph 1 Paragraph 2 --- Option 3: Hide text with: r if(FALSE){\" Add your comments here\"} Show text with: r if(TRUE){\" Add your comments here\"} There are 2 options to add small font texts in R Markdown file: With <sub> + <sup> : Normal text <sub><sup> Small text </sup></sub> <sub><sup><sub><sup> Tiny text </sup></sub></sup></sub> <sub><sup><sub><sup><sub><sup><sub><sup><sub><sup><sub><sup><sub><sup><sub><sup> REALLY SMALL TEXT </sup></sub></sup></sub></sup></sub></sup></sub></sup></sub></sup></sub></sup></sub></sup></sub> With <small> : <small>Small text</small> . Ref: Markdown extension for really small tiny text? Conditionally display a block of text in R Markdown","tags":"Tech","url":"http://leetschau.github.io/add-comments-in-r-markdown.html","loc":"http://leetschau.github.io/add-comments-in-r-markdown.html"},{"title":"Idris Notes","text":"Install Install Idris with stack install idris on Ubuntu. Or download Windows binaries idris-1.3.1-win64.exe and run it, which is actually an executable zip file. HelloWorld cat << EOF > hello . idr module Main main : IO () main = putStrLn \"Hello world\" EOF idris hello . idr - o hello . / hello Verified on Ubuntu 16.04 with Idris 1.3.1, 2019/3/11. Workflow In REPL run the script with :exec command: $ idris hello . idr * hello > : exec Hello world You can also use :? to list all command in REPL. For example :l (load script), :r (reload current file), :e (edit current file), :w (watch file changes), :doc (show doc of a function), :q (quit), etc. Define local variable with :let , like :let aa = 3 . Run shell command with :! , like :! pwd . Workflow in Editor neovim First install idris-vim with vim-plug: add Plug 'idris-hackers/idris-vim' into $MYVIMRC. You must have a running Idris REPL to use this plugin. To fulfill this, you have 2 options: neovim terminal: open with :sp|term idris WordLength.idr , or :vsp|term for REPL in a vertical split window, or :tabe|term idris WordLength.idr for REPL in a new tab; An independent Idris REPL: run idris WordLength.idr in another console window; To avoid keyboard shortcuts conflict, modify <LocalLeader>c :call IdrisCaseSplit()<ENTER> to <LocalLeader>ic :call IdrisCaseSplit()<ENTER> in the file $HOME/.config/nvim/plugged/idris-vim/ftplugin/idris.vim, where the added prefix i in shortcut represents Idris . Then add prefix i for the shortcuts of IdrisReload , IdrisEval and other relevant functions in the same way; The work-flow: Open file WordLength.idr with nvim, write allLengths : List String -> List Nat ; Create an Idris REPL: Put the cursor on allLengths and press <leader>id : the second line allLengths xs = ?allLengths_rhs will be created by the plugin. Under the hood, the function IdrisAddClause do the magic; Put the cursor on xs and press <leader>ic in neovim (or C-M-c in VS Code), the second line becomes: allLengths [] = ?allLengths_rhs_1 allLengths (x :: xs) = ?allLengths_rhs_2 which are transformed by IdrisCaseSplit under the hood; Put the cursor on ?allLengths_rhs_1 and press <leader>o , this expression becomes to [] , which is implemented by IdrisProofSearch . Other useful shortcuts: ,h : show doc; ,t : show type; ,ii : open response window; ,ir : reload file; ,ie : evaluate a expression; ,l (C-M-l): IdrisMakeLemma . Create a top-level function definition from a hole (put the curor on the target hole and use this shortcut). Then rename the generated function to what you want. See demo in TDDI, p72, step 5. Note: :h idris-vim.txt for details of the Idris plugin. VS Code Install the Idris extension, and add the following lines into settings.json (open it with Ctrl-Shift-P, then open settings ): { ... \"idris.executablePath\" : \"d:/apps/idris-1.3.1/idris.exe\" , \"idris.hoverMode\" : \"fallback\" , \"idris.suggestMode\" : \"allWords\" , \"idris.warnPartial\" : false , \"idris.showOutputWhenTypechecking\" : false , \"idris.numbersOfContinuousTypechecking\" : 10 } Add the following lines into keybindings.json (open it with Ctrl-Shift-P, then open keyboard shortcuts : { ... { \"key\" : \"alt+ctrl+a\" , \"command\" : \"idris.add-clause\" } , { \"key\" : \"alt+ctrl+t\" , \"command\" : \"idris.type-of\" } , { \"key\" : \"alt+ctrl+c\" , \"command\" : \"idris.case-split\" } , { \"key\" : \"alt+ctrl+r\" , \"command\" : \"idris.start-refresh-repl\" } } Above shortcuts are following the definitions in section 3.1.1 in TDDI.","tags":"Tech","url":"http://leetschau.github.io/idris-notes.html","loc":"http://leetschau.github.io/idris-notes.html"},{"title":"Zathura Notes","text":"Keybindings Show keybindings: man zathura in terminal; The current page number and filename is displayed in the statusbar, which can be toggled with Ctrl-n . View djvu apt install zathura-djvu .","tags":"Tech","url":"http://leetschau.github.io/zathura-notes.html","loc":"http://leetschau.github.io/zathura-notes.html"},{"title":"Data Version Control","text":"Basic Workflow 下面的代码首先安装 dvc 工具，然后为一个 Git 代码库添加数据文件版本控制支持， conda create - n dvcPandas python = 3.6 conda activate dvcPandas pip install pandas numpy ipython ' dvc [ all ] ' take dvcEx git clone git @ github . com : leetschau / pv - current . git cd pv - current dvc init cp ... / comb1122 . csv . # add a data file dvc add comb1122 . csv git add . dvc / config . gitignore git commit - m ' add input file of deviation operator to dvc ' dvc remote add - d algo ssh : //leo@192.168.100.1/opt/dvcrepo git add - A git commit - m ' add a dvc remote ' dvc push dvc unprotect comb1122 . csv echo \"some new data\" >> comb1122 . csv dvc add comb1122 . csv git add comb1122 . csv . dvc git commit - m ' update data file ' dvc push git checkout 0 a0e0b9c50 -- comb1122 . csv . dvc # 0 a0e0b9c50 is the uuid of the old version dvc pull git reset -- hard HEAD # get the newest version of the data file dvc pull DVC 管理的文件发生变化时，需要先 unprotect 再 add ，所以不要用 DVC 管理文件夹，而应该管理一个一个具体的数据文件。 每次数据文件需要更新时，DVC 再次 add 时创建新的 .dvc 文件，加入到版本控制系统中。 需要回溯旧版本时（包括程序和数据文件），先 git checkout <old-version> ，再 dvc checkout ； 如果只回溯数据文件，不回溯程序文件，则先 git checkout <old-version-dvc-file> ，再 dvc checkout <data-file.dvc ， 详见 Data and Model Files Versioning 。 .gitignore 文件中不用写 **/*.csv ，因为 dvc 会自动将被管理文件加进去: pip install dvc[all] 中的 [all] 提供了 DVC remote 对 SSH, Amazon S3 等云服务的支持。 目前云服务中不包含阿里云，Remote 的 HTTP 类型只能读，不支持写操作，暂不考虑。 在现有代码基础上添加一个计算流程 (pipeline): dvc run - d comb1122 . csv - d app . py - o devires . csv python app . py comb1122 . csv devires . csv false git add ... gci - m 'add a dvc pipeline of app.py' dvc push Reproduce Codes and Data 由于 DVC 配置信息已经保存到了 VCS 中，clone 新的代码库时直接 dvc pull 就可以了： git clone git @github . com : leetschau / pv - current . git cd pv - current conda activate dvcPandas dvc pull dvc repro devires . csv . dvc Backup and Restore Backup remote DVC repository to local host: cd ~/ Documents take dvcBackup rsync - av algo : / opt / dvcrepo algo algo is defined in ~/.ssh/config whose IP is 192.168.100.1, the same host specifed in dvc remote add above. Now you can use this backup remote: dvc remote add - d loc1 ~/ Documents / dvcBackup / algo / dvcrepo dvc pull Backgrouds 离散度算子的Python实现有个问题：算法实现严重依赖输入数据，包括数据的格式 (schema of data frame) 和一定的数据量（算法需要做相关性和分布特性分析时， 数据量需要足够大才能计算出有意义的结果，从而对结果的正确性进行评价）， 但这两点都没有办法体现在算法实现代码中，最直接的办法是将数据文件包含在代码库中， 但测试数据经常是几十 MB 到上百 MB，且变化比较频繁， 所以直接放到代码库中不是理想的解决方案（但也不是不可接受）。 只能写在文档里，或者定义在测试用例里。 定义在文档中，没办法保证实现逻辑变化后开发者会同步修改文档。 定义在测试用例里有几个问题： 与文档类似，算法实现逻辑变化后，很难保证开发者同步修改测试用例； 随着数据格式的变化，之前的测试用例需要随之修改，这部分工作量也不小，且比较枯燥； 随着测试用例的增多，需要不断筛选哪些测试用例价值比较大值得保留（有维护成本）； 部分测试用例是否能够完全自己创建数据，不依赖于外部数据仍然是个问题； 解决方案： 为算法实现添加类型定义，例如在 Python 中加类型标注，或者使用强类型语言， 如 Scala(Breeze, Spark), Julia, Haskell, F# 等； 为数据文件添加版本控制，目前打算使用 dvc 和 DADsHub ； 数据版本控制参考了 How should a data scientist handle versioning, both for pipeline code and models? ， 其中提到另外两个解决方案 Pachyderm 和 datmo ， 但都没有 dvc 理想。","tags":"Tech","url":"http://leetschau.github.io/data-version-control.html","loc":"http://leetschau.github.io/data-version-control.html"},{"title":"F# Notes","text":"On Windows 10 Option 1: based on Visual Studio (recommended) Console REPL 安装 Visual Studio Community 2017 后在 [Windows 开始] 中启动 \"Developer Command Prompt for VS 2017\"（或者在开始中输入 dev ）。 在启动的命令行环境里执行 fsi 进入 F# interpreter， 包含语法高亮和 tabcompletion，执行 #help;; 打印帮助文档， #load 加载脚本 (for example: #load \"hellowrold.fsx\";; , note that the double quotes of the script file can't be omitted), #r 加载动态链接库，类似于 Python 的 import 。 执行 fsc <target-file>.fs 运行 F# compiler 编译源码。 Editor-REPL 安装 VS 后，其中的组件 Visual Studio Build Tools 配合 VS Code 的 F# 插件 Ionide-fsharp 可以实现比较好的 editor-repl 工作流， Alt-Enter 执行当前行代码，editor 对代码的自动补全支持做得不错。 Full IDE Visual Studio Community 2017 菜单 [View -> Other Windows -> F# Interactive] 启动 F# REPL， 但没有 autocompletion 和语法高亮，可以创建一个 F# 脚本， 然后通过快捷键 Alt-Enter 发送到 REPL 里执行，但 editor 里没有语法高亮和自动补全。 Note: 貌似不能单独安装 Visual Studio Build Tools 和 Developer Command Prompt for VS 2017， 只能把 3GB+ 的 VS 2017 全装上，IDE, C# 和 VB 都是强行赠送，百度和360估计都是跟 MS 学的。 Option 2: based on .NET SDK 安装体积比 VS 小很多，但功能有限，没有 REPL。 Download and install .NET SDK (dotnet-sdk-2.2.104-win-gs-x64.exe, 147MB) on Windows 10. Run the following commands: > dotnet new console - lang F # - o myApp > cd myApp > cat Program . fs open System [ < EntryPoint > ] let main argv = printfn \" Hello World from F#! \" 0 // return an integer exit code > dotnet run On Ubuntu 16.04 Install and hellowrold: sudo apt - key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF sudo apt install apt - transport - https echo \"deb https://download.mono-project.com/repo/ubuntu stable-xenial main\" | sudo tee / etc / apt / sources . list . d / mono - official - stable . list sudo apt update sudo apt - get update sudo apt - get install fsharp cat << EOF > hw . fsx printfn \"Hello world\" EOF fsharpi hw . fsx # run script fsharpc hw . fsx # compile to binary . / hw . exe # run binary Vim Plugins Add Plug 'fsharp/vim-fsharp', { 'for': 'fsharp', 'do': 'make fsautocomplete' } into $MYVIMRC. See vim-fsharp for details. Namespace and Module Default Module When omitted, the module name is the file name. You can access the variables with or without namespace prefix: $ cat Hw.fsx type Person = {First: string; Last: string} let aPerson = {First=\"Charlie\"; Last=\"Adams\"} let first = aPerson.First let last = aPerson.Last $ fsharpi > #load \"Hw.fsx\";; [Loading /home/leo/Documents/temp/FSharpEx/Hw.fsx] namespace FSI_0002 // this namespace is created by REPL type Person = {First: string; Last: string;} val aPerson : Person val first : string val last : string > FSI_0002.Hw.first;; val it : string = \"Charlie\" > Hw.first;; // namespace name can be omitted val it : string = \"Charlie\" Note that if the initial of the file name is in lower case, the module name will be convert to that with an upper case initial. For example: $ cat mymod.fsx type CustomerId = CustomerId of int let customerId = CustomerId 42 $ fsi > #load \"mymod.fsx\";; > Mymod.customerId;; val it : Chapter5.CustomerId = CustomerId 42 Note here you must to use Mymod instead of mymod to reference the variable. Top-level Module You can specify the name of a top-level module explicitly: $ cat Hw2.fsx module Hwo type Person = {First: string; Last: string} let aPerson = {First=\"Bob\"; Last=\"Betty\"} let first = aPerson.First let last = aPerson.Last $ fsharpi > #load \"Hw2.fsx\";; [Loading /home/leo/Documents/temp/FSharpEx/Hw2.fsx] namespace FSI_0002 type Person = {First: string; Last: string;} val aPerson : Person val first : string val last : string > Hwo.first;; val it : string = \"Bob\" > FSI_0002.Hwo.first;; val it : string = \"Bob\" Named Namespace & Local Module You can defina a namespace explicitly, then some local modules: $ cat Hw3.fsx namespace MyNS module Hwo = type Person = {First: string; Last: string} let aPerson = {First=\"Charlie\"; Last=\"Chad\"} let first = aPerson.First let last = aPerson.Last $ fsharpi > #load \"Hw3.fsx\";; [Loading /home/leo/Documents/temp/FSharpEx/Hw3.fsx] namespace FSI_0002.MyNS // notice the namespace hierarchy type Person = {First: string; Last: string;} val aPerson : Person val first : string val last : string > MyNS.Hwo.first;; val it : string = \"Charlie\" > FSI_0002.MyNS.Hwo.last;; val it : string = \"Chad\" According to Is there any difference between top-level modules and local modules? , Hw3.fsx is equivalent to: module MyNS . Hwo type Person = { First : string ; Last : string } let aPerson = { First=\"Charlie\" ; Last=\"Chad\" } let first = aPerson . First let last = aPerson . Last So you can always use top-level module instead of namespace. Using Other Scripts You can load other F# scripts via #load : $ cat Hw4.fsx namespace MyNS module Hw4 = type Person = {First: string; Last: string} let aPerson = {First=\"Charlie\"; Last=\"Chad\"} let first = aPerson.First let last = aPerson.Last #load \"Hw2.fsx\" module App = let names = [Hw3.first; Hwo.first] $ fsharpi > #load \"Hw4.fsx\";; [Loading /home/leo/Documents/temp/FSharpEx/Hw2.fsx Loading /home/leo/Documents/temp/FSharpEx/Hw4.fsx] namespace FSI_0002 type Person = {First: string; Last: string;} val aPerson : Person val first : string val last : string namespace FSI_0002.MyNS type Person = {First: string; Last: string;} val aPerson : Person val first : string val last : string val names : string list > MyNS.App.names;; val it : string list = [\"Charlie\"; \"Bob\"] See Modules in F# Guide > F# Language Reference for details. By conventions, namespace and module use both PascalCase . See F# code formatting guidelines > Naming conventions for details. Backgrounds and Rationale fsharpc and fsharpi are open source, cross-platform compiler and interpreter for F# . They are developed by F# Software Foundation . and dependent on Mono , a free and open-source project led by Xamarin , a Microsoft-owned San Francisco-based software company. .NET Core (free and open-source) has F# compiler, too. It seems more Visual-Studio style and project oriented (see dotnet run above). However it also provides an interpreter fsi.exe . My plan is using .net platform on Windows and Mono on Linux.","tags":"Tech","url":"http://leetschau.github.io/f-notes.html","loc":"http://leetschau.github.io/f-notes.html"},{"title":"Coconut Notes","text":"Install Conda 使用 Conda 安装 Coconut 无法包含附加组件，例如 --watch , --mypy 等。 $ conda create -n coconda python = 3 .6 $ . activate coconda $ conda install -c conda-forget coconut Pip $ conda create - n coco python = 3.6 $ . activate coco $ pip install 'coconut[all]' 注意安装时 coconut[all] 外面的单引号不能省略，否则中括号会被 zsh 解释从而导致错误。 另外如果安装速度特别慢，可以在早晨7点前安装，这个时段网络速度最快。 REPL Workflow 下面的例子演示了 IPython 中的 Python 和 Coconut 混合编程， 启动 IPython REPL 后加载 Coconut 扩展，其功能包括： 解析 %c 和 %%c 并即时编译为 Python 代码并运行； 执行 import mylib 时，如果只有 mylib.coco 没有 mylib.py ，先编译为 py 再 import ; 转换并执行后，可以通过双问号查看转换后的 Python 代码（例如下面的 myswitch?? ）， 从而实现了与 Python 环境的无缝融合： $ ipython >>> % load_ext coconut >>> % alias_magic c coconut >>> a = 5 >>> % c a |> print 5 >>> % c dubsums = map (( x , y ) -> 2 * ( x + y ) , range ( 0 , 10 ) , range ( 10 , 20 )) |> list >>> print ( dubsums ) [ 20 , 24 , 28 , 32 , 36 , 40 , 44 , 48 , 52 , 56 ] >>> % c dubsums |> print [ 20 , 24 , 28 , 32 , 36 , 40 , 44 , 48 , 52 , 56 ] >>> %% c ..: def myswitch ( inp : float ) -> float : ..: case inp : ..: match d is float if d > 10 : ..: print ( ' d is > 10 ' ) ..: return d ..: match d is int if inp < 5 : ..: print ( ' less than 5 ' ) ..: return d * 2 ..: else : ..: print ( \" nothing found \" ) ..: return inp + 10 ..: return 0 >>> myswitch ?? # the converted Python codes >>> myswitch ( 43 ) nothing found 53 myswitch ( 23 . 3 ) d is > 10 23 . 3 Coconut 有自己的 REPL，但不支持变量名称和对象方法的 tab-completion，可用性比较差。 IPython Autoload Extension 每次使用 IPython console 都要手工输入一堆代码比较麻烦，下面的配置自动化了这个流程： 首先创建新的配置文件： ipython profile create coconut vi ~/ . ipython / profile_coconut / ipython_config . py 然后在此文件中添加如下内容就可以了： c . InteractiveShellApp . exec_lines = [ '%alias_magic c coconut' , 'import pandas as pd' , 'import numpy as np' ] c . InteractiveShellApp . extensions = [ 'coconut' ] 使用 . activate coco; ipython --profile coconut 启动。 Ref: ipython profile --help Code examples: https://ipython.readthedocs.io/en/stable/config/intro.html Module Definition and Loading Coconut 文件扩展名为 coco ，模块定义、 import 方法与 Python 完全一致。 一个 .coco 文件 import 另一个 .coco 文件时， 被导入的模块会先被编译为 Python（ .py 和 .pyc ）文件然后加载。","tags":"Tech","url":"http://leetschau.github.io/coconut-notes.html","loc":"http://leetschau.github.io/coconut-notes.html"},{"title":"Pipe Operator in Functional Programming Languages","text":"Pipe operator ( | in shell) makes codes more concise and easy to read. R Ecosystem Pipe operator for R is %>% defined in package magrittr : library ( dplyr ) probes <- 'probes.csv' %>% read.table ( header = FALSE , sep = ',' , col.names = c ( 'poinitID' , 'fullDesc' , 'remark' ), colClasses = c ( 'integer' , 'character' , 'integer' )) %>% filter ( remark == 0 ) See magrittr: Simplifying R code with pipes for detailed explanations and examples. The rules are simple: the object on the left hand side is passed as the first argument to the function on the right hand side. So: my.data %>% my.function is the same as my.function(my.data) my.data %>% my.function(arg=value) is the same as my.function(my.data, arg=value) For functions with only 1 parameter, there's no need to write parenthesis. Python Family Pipe operator for Coconut is |> : \"hello, world!\" |> print BTW: Elixir use the same operator for pipeline. With Toolz package: from toolz import pipe pipe ( 12 , sqrt , str ) Pandas also has a pipe() method for dataframe object. See Functional pipes in python like %>% from R's dplyr for more details. Lisp Family Pipe operator for Hy and Clojure is -> : => (defn output [ a b ] (print a b)) => (-> (+ 4 6 ) (output 5 )) 10 5 Haskell In Haskell the dot operator . plays the similar role through Function composition : reverse . sort is equivalent to \\x -> reverse (sort x) .","tags":"Tech","url":"http://leetschau.github.io/pipe-operator-in-functional-programming-languages.html","loc":"http://leetschau.github.io/pipe-operator-in-functional-programming-languages.html"},{"title":"Hy Notes","text":"Install Hy 是一个编译为 Python 的 Lisp 方言， 类似于 Clojure 之于 JVM。 目前 conda 4.5.12 上的 Hy 版本为 0.9.12，只支持 Python 2.7， 所以需要用 pip 直接从 github 上安装： $ conda create -n hylang python = 3 .6 $ . activate hylang $ pip install git+https://github.com/hylang/hy.git $ hy hy 0 .15.0+64.ga42e17a using CPython ( default ) 3 .6.8 on Linux = > ( print \"hello world\" ) hello world 升级方法是再次运行 pip install git+https://github.com/hylang/hy.git ， 不需要先卸载已经安装的包，参考 pip: pulling updates from remote git repository . 更好的方法是在 IPython console 中使用 Hy （借助 Jupyter kernel Calysto/calysto_hy ）: conda create - n piphy python = 3 . 6 . activate piphy pip install jupyter pip install git + https : // github . com / ekaschalk / jedhy . git pip install git + https : // github . com / Calysto / calysto_hy . git python - m calysto_hy install --sys-prefix ipython console --kernel calysto_hy >>> ( -> \"abc\" (. split \"b\" ) (. [ 1 ]) ( print )) spy 模式 Hy 的 spy 模式打印出转换后的 Python代码再执行： $ hy --spy = > ( setv result ( - ( / ( + 1 3 88 ) 2 ) 8 )) result = ( 1 + 3 + 88 ) / 2 - 8 None = > ( setv r2 ( - ( / 92 2 ) 8 )) r2 = 92 / 2 - 8 None = > ( + result r2 ) result + r2 76 .0 基本语法 字符串必须使用双引号，但可以包含回车符。 单引号表示 quote，即阻止求值。 常用数据类型写法： $ hy -- spy => ( setv list1 [ 1 2 3 ]) ; this is a list list1 = [ 1 , 2 , 3 ] None => ( setv dict1 {: a 1 : b 2 }) ; this is a dict from hy import HyKeyword dict1 = { HyKeyword ( 'a' ): 1 , HyKeyword ( 'b' ): 2 } None => ( setv set1 #{1 2 3}) ; this is a set set1 = { 1 , 2 , 3 } None 访问对象的属性： => (. df1 shape ) df1 . shape ( 10980 , 3 ) 访问 DataFrame 某列： => (. probes [ \"fullDesc\" ]) probes [ 'fullDesc' ] 0 1000611 - SYGD - 01 - 01 - 01 1 1000612 - SYGD - 01 - 01 - 02 2 1000613 - SYGD - 01 - 01 - 03 3 1000614 - SYGD - 01 - 01 - 04 4 1000615 - SYGD - 01 - 01 - 05 访问复合属性的一个元素： => (. df loc [( > (. df [ 0 ]) 2 )]) df . loc [ df [ 0 ] > 2 ] 管道操作（更多细节可参考 dsnote \"Pipe Operator in Functional Programming Languages\"）： => ( -> probes (. [ \"fullDesc\" ]) (. head )) probes [ 'fullDesc' ]. head () 0 1000611 - SYGD - 01 - 01 - 01 1 1000612 - SYGD - 01 - 01 - 02 2 1000613 - SYGD - 01 - 01 - 03 3 1000614 - SYGD - 01 - 01 - 04 4 1000615 - SYGD - 01 - 01 - 05 编译为 pyc $ cat << EOF > demo.hy (setv people [{ :name \"Alice\" :age 20 } { :name \"Bob\" :age 25 } { :name \"Charlie\" :age 50 } { :name \"Dave\" :age 5 }] ) (defn display-people [ people filter ] (for [ person people ] (if (filter person) (print (:name person))))) (display-people people (fn [ person ] (< (:age person) 25 ))) (defmacro infix [ code ] (quasiquote ((unquote (get code 1 )) (unquote (get code 0 )) (unquote (get code 2 ))))) (print (infix (3 * 5 ))) EOF $ hy demo.hy $ hyc demo.hy 关于上面代码中宏定义相关的函数参考 3.20 Quasiquoting: quasiquote, unquote, and unquote-splicing . 反编译 pyc 文件的方法见 dsnote \"Encrypt Python Source Codes\" 的 \"反编译 pyc\" 一节。 Editor Setup vim 默认配置下 vim 不识别 .hy 类型文件，为了让 vim 插件在 hy 文件中工作，有以下两种方法： 定义新的文件类型，要求插件对其进行渲染：优点是定义准确， 缺点是对某些插件无效； 将新文件类型映射到已有的某种主流文件类型：优点是适用范围广， 缺点是必须要有一种非常类似的主流文件类型，而且渲染是按主流语言的， 对于新语言来说不是特别准确； 新类型方法 在 $MYVIMRC 中添加： \" Rainbow Parenthesis au BufRead , BufNewFile * . hy setfiletype hy let g : rainbow_active = 1 let g : rainbow_conf = { \\ ' ctermfgs ' : [ ' yellow ' , ' red ' , ' white ' , ' green ' , ' lightblue ' , ' lightred ' , ' lightgreen ' ], \\ ' operators ' : ' _,_ ' , \\ ' parentheses ' : [ ' start=/(/ end=/)/ fold ' , ' start=/\\[/ end=/\\]/ fold ' , ' start=/{/ end=/}/ fold ' ], \\ ' separately ' : { \\ ' * ' : {}, \\ ' tex ' : { \\ ' parentheses ' : [ ' start=/(/ end=/)/ ' , ' start=/\\[/ end=/\\]/ ' ], \\ }, \\ ' hy ' : { \\ ' ctermfgs ' : [ ' yellow ' , ' red ' , ' white ' , ' green ' , ' lightblue ' , ' lightred ' , ' darkgreen ' ], \\ }, \\ ' vim ' : { \\ ' parentheses ' : [ ' start=/(/ end=/)/ ' , ' start=/\\[/ end=/\\]/ ' , ' start=/{/ end=/}/ fold ' , ' start=/(/ end=/)/ containedin=vimFuncBody ' , ' start=/\\[/ end=/\\]/ containedin=vimFuncBody ' , ' start=/{/ end=/}/ fold containedin=vimFuncBody ' ], \\ }, \\ ' html ' : { \\ ' parentheses ' : [ ' start=/\\v\\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\\z([-_:a-zA-Z0-9]+)(\\s+[-_:a-zA-Z0-9]+(\\=(\"[&#94;\"]*\"| ' . \" ' \" . ' [&#94; ' . \" ' \" . ' ]* ' . \" ' \" . ' |[&#94; ' . \" ' \" . ' \"><=`]*))?)*\\>/ end=#</\\z1># fold ' ], \\ }, \\ ' css ' : 0 , \\ } \\} Plug ' luochen1990/rainbow ' 其中文件类型定义参考 :h new-filetype . ctermfgs 表示 Console 中 vim 的颜色定义（gvim 的颜色在 guifgs 中定义）， 颜色名称取值来自 :h cterm-colors . Automatic closing brackets 在 $MYVIMRC 中添加： \" automatic closing brackets inoremap \" \"\" < left > inoremap ' ' ' < left > inoremap ( () < left > inoremap [ [] < left > inoremap { {} < left > inoremap { < CR > { < CR > } < ESC > O inoremap { ; < CR > { < CR > } ; < ESC > O 映射类型方法 有些插件（例如 tpope/vim-sexp-mappings-for-regular-people ） 用上面的方法指定类型后依然不生效，可能是插件内部对文件类型做了限制， 这时只能使用文件类型映射，将要处理的类型\"伪装\"成与它类似的另一个类型， 对于 hy 文件来说映射为 clojure 类型比较好，实现方法是在 $MYVIMRC 中添加： autocmd BufRead , BufNewFile * . hy set filetype = clojure Plug ' tpope/vim-repeat ' Plug ' guns/vim-sexp ' Plug ' tpope/vim-surround ' Plug ' tpope/vim-sexp-mappings-for-regular-people ' 这个插件的具体使用方法见 dsnote \"Use vim as Clojure Development Environment\"， 另外由于它已经包含了括号自动补全，所以上面关于自动补全的配置就不需要了。 上面的 rainbow 插件仍然需要安装。 assoc 特性 Hy 的 assoc 与 Lisp, Clojure 中的 assoc 不同， (assoc foo bar baz) 被翻译成 foo[bar] = baz ，直接改变 foo 本身，而不是保持 foo 不变返回一个新值。 造成这种区别的根本原因在于 Python 不坚持数据的 immutable， 关于这个函数行为的讨论见 issue 238 , Consider making Hy models immutable , 以及 API doc 中 assoc 的 note . 目前的实现虽然不够 immutalbe, 但与 Python 的兼容性比较好， 尤其在数据分析中，如果为一个 DataFrame 添加一列，必须重新生成一个新的 DataFrame， 会导致内存消耗大幅增加。 Ref: API 列表 Style Guide Neural Networks using Keras on Rescale with Hy More on Hy and why I think it is a big deal languages-that-compile-to-python A mile Hy - My experience with lispy Python","tags":"Tech","url":"http://leetschau.github.io/hy-notes.html","loc":"http://leetschau.github.io/hy-notes.html"},{"title":"Using User Level Hosts File","text":"Some stupid web apps hard-coded self-defined hostnames, such as cdh001 , instead of IP address \"171.15.106.220\". To open pages on these web sites, you have to modify your /etc/hosts by adding: 172 . 15 . 106 . 220 cdh001 172 . 15 . 106 . 221 cdh002 172 . 15 . 106 . 222 cdh003 172 . 15 . 106 . 223 cdh004 172 . 15 . 106 . 224 cdh005 172 . 15 . 106 . 225 cdh006 But this is far from an ideal solution, because these name resolutions are all temporary. They should be defined without root privileges. The following method works on Ubuntu 16.04: cat << EOF > ~/ . hosts cdh001 172 . 15 . 106 . 220 cdh002 172 . 15 . 106 . 221 cdh003 172 . 15 . 106 . 222 cdh004 172 . 15 . 106 . 223 cdh005 172 . 15 . 106 . 224 cdh006 172 . 15 . 106 . 225 EOF export HOSTALIASES =~/ . hosts firefox Now in the opened Firefox browser, you can use 'http://cdh001' instead of 'http://172.15.106.220'.","tags":"Tech","url":"http://leetschau.github.io/using-user-level-hosts-file.html","loc":"http://leetschau.github.io/using-user-level-hosts-file.html"},{"title":"将繁体汉字转换为简体","text":"繁体汉字转换为简体包含了多种情况，比较简单的情形是源文件采用 BIG5 编码， 只要转换为 GB2312 编码就行了，既可以使用 Windows 上的 Notepad++，也可以用 Linux 上的 cconv 。 如果繁体字采用 UTF-8 编码，Notepad++ 就无能为力了，只能用 cconv . 下面的代码首先分析一个繁体字幕文件 (inp.srt) 采用何种编码， 然后列出所有 cconv 支持的编码字符集，包括繁体字符集 UTF8-TW 和简体字符集 UTF8-CN ，最后转换为简体汉字保存在文件 target.srt 中： $ file inp.srt inp.srt: UTF-8 Unicode ( with BOM ) text, with CRLF line terminators $ sudo apt install cconv $ cconv -l The following encodings are supported: Chinese: GB2312, GBK, GB-HANS, GB-HANT, GB18030, BIG5, UTF8, UTF8-CN, UTF8-TW, UTF8-HK Other: All encoding supported by iconv. $ cconv -f UTF8-TW -t UTF8-CN inp.srt -o target.srt Note: UTF-8 和 GBK 编码都同时包含简体和繁体汉字。","tags":"Tech","url":"http://leetschau.github.io/jiang-fan-ti-yi-zi-zhuan-huan-wei-jian-ti.html","loc":"http://leetschau.github.io/jiang-fan-ti-yi-zi-zhuan-huan-wei-jian-ti.html"},{"title":"Technical Writing Tools","text":"AsciiDoc 编写复杂技术文档时，AsciiDoc 比 Markdown 提供了更完善的功能， 比 LaTeX 安装和使用方便，它的优点包括： 方便的 live preview: 用文本编辑器编写一个扩展名为 adoc 或者 asc 的文本文件， 在浏览器里安装一个插件 asciidoctor-browser-extension ， 然后在浏览器里以打开本地文件方式打开这个文本文件就可以实时预览了， 不需要专门的IDE（插件），也不需要文件监控和定时刷新工具； 内置 nested ordered list 支持: 不需要像 Markdown 那样借助于 pandoc 或者 RMarkdown 这种扩展： . step 1 ... substep 1 ... substep 2 . step 2 内置 MathJax 支持: 加上 [stem] 就可以了； 方便地生成流程图：支持生成 SVG 图，浏览器里可以直接预览； 方便地生成 PDF 文件：在浏览器里打印为 PDF 就可以了； AsciiDoc 目前最活跃的分支是使用 Ruby 实现的 Asciidoctor ， 它实现并拓展了 AsciiDoc 规范（二者区别见 Differences between Asciidoctor and AsciiDoc ）， 另外还有 JavaScript , JRuby, Java 等实现。 Python 社区有官方(?)的 asciidoc-py3 以及个人项目 AsciiDoc3 ， 但整体来说 Python 社区的开发已经非常不活跃了，许多开发者 转向了 Asciidoctor . reSturcturedText Python 社区更多使用 reSturcturedText (RST) 格式， 有人 用 vim, RST 和 Sphinx 写书 ， Google \"restructuredtext write book\" 可以找到一些文章， RST 语法似乎不如 AsciiDoc 简洁，但考虑到 sphinx 包已经被集成到了 Anaconda 里， 且有一个 ReText 编辑器 （使用 apt install retext 安装）可以实现 live preview， 后续实现复杂需求时的成本估计会小于 AsciiDoc. 相关工具见 reStructuredText tool support ， 以及一个简单的 Sphinx 教程： Sphinx Tutorial . 几个在线工具： Try pandoc! Online reStructuredText editor 由于 Markdown, AsciiDoc 和 RST 之间可以通过 Pandoc 或者在线工具互相转换， 对于复杂文档的编写，可以先用 AsciiDoc 上手，如果遇到难以解决的问题再转为RST。 Ref AsciiDoc Writer's Guide AsciiDoc Syntax Quick Reference Asciidoctor User Manual reStructuredText Primer","tags":"Tech","url":"http://leetschau.github.io/technical-writing-tools.html","loc":"http://leetschau.github.io/technical-writing-tools.html"},{"title":"Run Interactive Shell on Multiple Hosts","text":"I want edit the file .bash_profile on multiple hosts. I could edit one of them then scp to others. But I can edit them simultaneously with some fancy tools. This can be done easily with the Grouping and Broadcast function of Terminator . In the terminator window, create a New group (in context menu > Grouping), then split the terminal window and assign these new windows to the group you just created. The current working window has a red title bar. Other windows in the same group have blue title bars. The windows outside the group has no title bars. Now when in mode Broadcast group (keyboard shortcut Alt-g ), every key press will be sent to every terminal in this group, including key combinations such as Ctrl-Shift-v (paste texts) and Ctrl-d . If you want do something different in each window, switch the mode to Broadcast off with keyboard shortcut Alt-o . After it's done, switch back to broadcast mode with Alt-g . After all things are done, you can remove the group . There are some other tools, such as tmux , clusterssh , mussh , but I didn't try them. See How do I run the same linux command in more than one tab/shell simultaneously? for details.","tags":"Tech","url":"http://leetschau.github.io/run-interactive-shell-on-multiple-hosts.html","loc":"http://leetschau.github.io/run-interactive-shell-on-multiple-hosts.html"},{"title":"Python zipapp Notes","text":"From version 3.6, Python provides a zipapp module, which can zip a directory contains multiple Python scripts into a pyz file, then run with python myapp.pyz . The pyz file uses standard zip format. zipapp is no more than a thin wrapper on zipfile module from Python 2.6. See section FAQ of PEP 441 . Demo The following codes create a standalone pyz file add_cols.pyz from a folder contains 2 Python scripts. Run it to to create a new csv file by adding a column huiliuxiang of an existing csv file ycz6502.csv to another column zuchuan . take pyzipappEx head ycz6502 . csv time , station , xiaoshi , huiliuxiang , zuchuan , point , value 20170102 08 : 45 : 00 , YCZ , 65 , 2 , 1 , 59798 , 0.649999976 20170102 09 : 00 : 00 , YCZ , 65 , 2 , 1 , 59798 , 3.539999962 20170102 10 : 15 : 00 , YCZ , 65 , 2 , 1 , 59798 , 5.799999714 20170102 11 : 00 : 00 , YCZ , 65 , 2 , 1 , 59798 , 6.559999943 20170102 11 : 30 : 00 , YCZ , 65 , 2 , 1 , 59798 , 6.819999695 20170102 12 : 00 : 00 , YCZ , 65 , 2 , 1 , 59798 , 7.019999981 20170102 12 : 30 : 00 , YCZ , 65 , 2 , 1 , 59798 , 7.099999905 20170102 13 : 45 : 00 , YCZ , 65 , 2 , 1 , 59798 , 6.319999695 20170102 14 : 00 : 00 , YCZ , 65 , 2 , 1 , 59798 , 6.079999924 mkdir add_cols cat << EOF > add_cols / mylib . py import pandas as pd def add2col ( inpfile : str , outfile : str ): inp = pd . read_csv ( inpfile ) inp [ 'zuchuan' ] = inp [ 'huiliuxiang' ] + inp [ 'zuchuan' ] inp . to_csv ( outfile , index = False ) EOF cat << EOF > add_cols / main . py import sys from mylib import add2col def entry (): inp = sys . argv [ 1 ] out = sys . argv [ 2 ] print ( f 'read file {inp}, and convert to file {out}' ) add2col ( inp , out ) EOF python - m zipapp add_cols - m 'main:entry' python add_cols . pyz ycz6502 . csv res . csv unzip - l add_cols . pyz unzip - c add_cols . pyz __main__ . py","tags":"Tech","url":"http://leetschau.github.io/python-zipapp-notes.html","loc":"http://leetschau.github.io/python-zipapp-notes.html"},{"title":"Build OpenVPN Server and Client","text":"Follow the instructions in How To Set Up an OpenVPN Server on Ubuntu 16.04 to configure OpenVPN server on linode server. Run the following command as user leo on OpenVPN server host: # Step 1 : Install OpenVPN sudo apt update sudo apt install openvpn easy - rsa # Step 2 : Set Up the CA Directory cd ~/ docs make - cadir . / openvpn - ca cd openvpn - ca # Step 3 : Configure the CA Variables vi vars # modify vars # export KEY_NAME = \" linserver \" # Step 4 : Build the Certificate Authority source vars . / clean - all # do NOT run this command when building the 2 nd certificate . / build - ca # Step 5 : Create the Server Certificate , Key , and Encryption Files . / build - key - server linserver # match the name in step 3 . / build - dh sudo openvpn -- genkey -- secret keys / ta . key # Step 6 : Generate a Client Certificate and Key Pair . / build - key linclient ## build the second client certificate , backup all files in * keys * folder . / build - key e7450 # Step 7 : Configure the OpenVPN Service cd keys sudo cp ca . crt linserver . crt linserver . key ta . key dh2048 . pem / etc / openvpn gunzip - c / usr / share / doc / openvpn / examples / sample - config - files / server . conf . gz | sudo tee / etc / openvpn / linserver . conf cd / etc / openvpn sudo vi linserver . conf # modify parameters ## uncomment * client - to - client * and * duplicate - cn * # Step 8 : Adjust the Server Networking Configuration sudo vi / etc / sysctl . conf sudo sysctl - p # Adjust the UFW Rules to Masquerade Client Connections # add the following lines into / etc / ufw / before . rules : # START OPENVPN RULES # NAT table rules * nat :POSTROUTING ACCEPT [ 0 : 0 ] # Allow traffic from OpenVPN client to wlp11s0 ( change to the interface you discovered ! ) - A POSTROUTING - s 10 . 8 . 0 . 0 / 8 - o eth0 - j MASQUERADE COMMIT # END OPENVPN RULES sudo ufw allow 1194 / udp sudo ufw disable sudo ufw enable # Step 9 : Start and Enable the OpenVPN Service sudo systemctl start openvpn @ linserver sudo systemctl status openvpn @ linserver sudo systemctl enable openvpn @ linserver # Step 10 : Create Client Configuration Infrastructure mkdir - p ~/ docs / openvpn - client - configs / files chmod 700 ~/ docs / openvpn - client - configs / files cp / usr / share / doc / openvpn / examples / sample - config - files / client . conf ~/ docs / openvpn - client - configs / base . conf vi ~/ docs / openvpn - client - configs / base . conf cat << EOF > ~/ docs / openvpn - client - configs / make_config . sh # !/ bin / bash # First argument : Client identifier KEY_DIR =~/ docs / openvpn - ca / keys OUTPUT_DIR =~/ docs / openvpn - client - configs / files BASE_CONFIG =~/ docs / openvpn - client - configs / base . conf cat ${ BASE_CONFIG } \\ < ( echo - e ' <ca> ' ) \\ ${ KEY_DIR } / ca . crt \\ < ( echo - e ' </ca> \\n <cert> ' ) \\ ${ KEY_DIR } / ${ 1 }. crt \\ < ( echo - e ' </cert> \\n <key> ' ) \\ ${ KEY_DIR } / ${ 1 }. key \\ < ( echo - e ' </key> \\n <tls-auth> ' ) \\ ${ KEY_DIR } / ta . key \\ < ( echo - e ' </tls-auth> ' ) \\ > ${ OUTPUT_DIR } / ${ 1 }. ovpn EOF chmod 700 ~/ docs / openvpn - client - configs / make_config . sh # Step 11 : Generate Client Configurations cd ~/ docs / openvpn - client - configs sudo chown leo : leo - R / home / leo / docs / openvpn - ca / keys . / make_config . sh linclient # keep the same with the name set in Step 6 . / make_config . sh e7450 # build the 2 nd certificate # transfer file ~/ docs / openvpn - client - configs / files / linclient . ovpn to the client Run the following script on a VPN client. For Linux: sudo apt - get update sudo apt - get install openvpn # Edit file linclient . ovpn with the existence of file / etc / openvpn / update - resolv - conf sudo openvpn --config linclient.ovpn After the connection is verifed, start OpenVPN service on client with sudo openvpn --daemon --config linclient.ovpn . Note: File /etc/openvpn/ipp.txt is the IP address of clients connected to this server. It's created by OpenVPN. When rebuilding a new server certificate, it's safe to delete it. Do NOT building with Set up a Hardened OpenVPN Server on Debian 9 . Its network configuration is unnecessarily complicated and will make you lose connection with your host.","tags":"Tech","url":"http://leetschau.github.io/build-openvpn-server-and-client.html","loc":"http://leetschau.github.io/build-openvpn-server-and-client.html"},{"title":"ufw Notes","text":"ufw是 Ubuntu ,ArchLinux 等发行版使用的防火墙前端， 用来简化用户的防火墙操作。 检查防火墙当前状态： ufw status 第一行（规则列表前面）。 启动防火墙： ufw enable . 关闭防火墙： ufw disable . 添加一条规则：允许某个特定端口访问： ufw allow 3719 . 删除某条规则： ufw delete allow 3719 . 允许 SSH 访问： uwf allow ssh .","tags":"Tech","url":"http://leetschau.github.io/ufw-notes.html","loc":"http://leetschau.github.io/ufw-notes.html"},{"title":"Split Window Freely on i3wm","text":"With the following configurations in ~/.i3/config, you can create a new window (split) at the exact place you want, without moving them after created: bindsym $ mod + i split h bindsym $ mod + v split v bindsym $ mod + a focus parent See section 3. Tree in i3 User's Guide for examples.","tags":"Tech","url":"http://leetschau.github.io/split-window-freely-on-i3wm.html","loc":"http://leetschau.github.io/split-window-freely-on-i3wm.html"},{"title":"Spark Computation on CDH Yarn Cluster","text":"部署环境：3台主机 cdh001（主节点）, cdh002, cdh003，用户名 algo。 配置用户和权限 sudo groupadd supergroup sudo useradd - m - s / bin / bash algo sudo usermod - a - G supergroup algo su - algo hadoop fs - mkdir / user / algo algo用户的HDFS根目录： hdfs://cdh001:8020/user/algo ，所有 hadoop fs 命令中的相对路径都以此为根目录。 过程记录 验证 algo 用户可以正常使用 yarn 平台： yarn node - list yarn application - list hadoop fs - put max_current . py . hadoop fs - ls hdfs : // cdh001 : 8020 / user / algo yarn jar / opt / cloudera / parcels / CDH - 5 . 15 . 1 - 1 . cdh5 . 15 . 1 . p0 . 4 / jars / hadoop - mapreduce - examples - 2 . 6 . 0 - cdh5 . 15 . 1 . jar wordcount max_current . py output hadoop fs - cat output / part -* algo用户的创建和用户组配置可参考 12.7 笔记。 为 algo 配置 Spark 运行环境，将下面的语句加入到 $HOME/.bash_profile 的 export PATH 之前： export HADOOP_CONF_DIR =/ etc / hadoop / conf export SPARK_HOME =/ opt / cloudera / parcels / SPARK2 - 2 . 3 . 0 . cloudera2 - 1 . cdh5 . 13 . 3 . p0 . 316101 / lib / spark2 export LD_LIBRARY_PATH =/ opt / cloudera / parcels / CDH - 5 . 15 . 1 - 1 . cdh5 . 15 . 1 . p0 . 4 / lib / hadoop / lib / native : $ LD_LIBRARY_PATH PATH = $ SPARK_HOME / bin : $ PATH 在集群模式下执行 Spark 实例代码（出现权限问题报错）： spark - submit --deploy-mode client \\ --class org.apache.spark.examples.SparkPi \\ $ SPARK_HOME / examples / jars / spark - examples_2 . 11 - 2 . 3 . 0 . cloudera2 . jar 10 给 algo 用户执行 Spark 任务权限后执行成功： sudo usermod - a - G spark algo sudo chmod 775 / var / log / spark2 / lineage CDH 上常用环境变量配置 HADOOP_CONF_DIR ： /etc/hadoop/conf （一般是一个指向 /etc/hadoop/conf.cloudera.yarn 的链接）； SPARK_HOME for Spark 2.x： /opt/cloudera/parcels/SPARK2-2.3.0.cloudera2-1.cdh5.13.3.p0.316101/lib/spark2 SPARK_HOME for Spark 1.x： /opt/cloudera/parcels/CDH/lib/spark . CDH version: locate '*cdh_version*' cat / opt / cloudera / parcels / CDH - 5 . 15 . 1 - 1 . cdh5 . 15 . 1 . p0 . 4 / lib / bigtop - tomcat / cloudera / cdh_version . properties | grep cloudera . cdh . release 计算流程总结 用户 algo 使用 Spark 在 Yarn 集群上并行计算的整体流程： 1. 创建用户账户，配置 Hadoop 权限； 使用 yarn node -list 和 yarn jar ... 等方法了解 Yarn 集群当前节点数量和位置，确认 Yarn 集群能正常工作； 通过 $SPARK_HOME/conf/spark-defaults.conf 将默认 master 设置为 yarn ； 通过配置环境变量 HADOOP_CONF_DIR 定义 Yarn 配置文件位置（ $HADOOP_CONF_DIR/yarn-site.xml ），从而使 Spark 能够使用 Yarn 集群； 用户提交并行计算任务，其中 client 模式类似于前台执行并行计算， cluster 模式类似于将并行计算设置为 daemon 后台运行。 其他 从 /opt/cloudera/parcels/SPARK2-2.3.0.cloudera2-1.cdh5.13.3.p0.316101/bin/spark2-submit 最后一行 exec $LIB_DIR/spark2/bin/spark-submit \"$@\" 可以看到， 它将所有参数转给了 /opt/cloudera/parcels/SPARK2-2.3.0.cloudera2-1.cdh5.13.3.p0.316101/lib/spark2/bin/spark-submit .","tags":"Tech","url":"http://leetschau.github.io/spark-computation-on-cdh-yarn-cluster.html","loc":"http://leetschau.github.io/spark-computation-on-cdh-yarn-cluster.html"},{"title":"Parallel Processing on Celery Cluster","text":"You have 2 hosts: algo (IP: 192.168.100.1) and boms . boms can ssh to algo with ssh 192.168.100.1 . You want run some tasks (some Python functions) using each core of each CPU on each host. In this demo we use host algo as the server . Hello World First install RabbitMQ on both hosts: sudo apt install rabbitmq-server . Then config RabbitMQ user account on server algo : sudo rabbitmqctl add_user leo zhangjingg sudo rabbitmqctl add_vhost myvhost sudo rabbitmqctl set_permissions - p myvhost leo \".*\" \".*\" \".*\" Install celery and start workers on both hosts: conda create - n celery python = 3.6 ipython . activate celery conda install - c conda - forge celery take celeryEx cat << EOF > tasks . py from celery import Celery app = Celery ( 'tasks' , backend = 'rpc://' , broker = 'pyamqp://leo:zhangjingg@192.168.100.1:5672/myvhost' ) @app.task def add ( x , y ): return x + y EOF celery - A tasks worker -- loglevel = info -- hostname = worker1 @ % h celery - A tasks worker -- loglevel = info -- hostname = worker2 @ % h ipython from tasks import add result = add . delay ( 2 , 3 ) result . get () celery . current_app . control . inspect () . ping () celery . current_app . control . inspect () . stats () . keys () You can see the task is executed by anyone of the 4 workers (we start 2 workers with different names on each host). The key point is the broker parameter of the Celery class, which defines the location of the rabbitmq server . Ref: Using RabbitMQ Monitoring and Management Guide Serial vs Parallel Source codes pdser.py: import numpy as np import pandas as pd def f ( x ): return x * ( x - 1 ) def integrate_f ( a , b , N ): s = 0 dx = ( b - a ) / N for i in range ( N ): s += f ( a + i * dx ) return s * dx def dfsum ( size ): df = pd . DataFrame ({ 'a' : np . random . randn ( size ), 'b' : np . random . randn ( size ), 'N' : np . random . randint ( 100 , 1000 , ( size )), 'x' : 'x' }) return sum ( df . apply ( lambda x : integrate_f ( x [ 'a' ], x [ 'b' ], x [ 'N' ]), axis = 1 )) if __name__ == \"__main__\" : res = [] def serint ( times ): for i in range ( times ): res . append ( dfsum ( 10000 )) return sum ( res ) print ( 'serial sum = %s ' % serint ( 80 )) print ( 'serial list: %s ' % res [ 0 : 5 ]) pdpara.py: from celery import Celery import numpy as np import pandas as pd from pdser import dfsum app = Celery ( 'pdpara' , backend = 'rpc://' , broker = 'pyamqp://leo:zhangjingg@192.168.100.1:5672/myvhost' ) @app.task def paraint (): return dfsum ( 10000 ) pararun.py: from pdpara import paraint times = 80 pack = [] for i in range ( times ): ares = paraint . delay () pack . append ( ares ) print ( 'tasks commit over' ) res = map ( lambda x : x . get (), pack ) print ( 'parallel list: %s ' % res ) print ( 'parallel sum = %s ' % sum ( res )) Commit tasks Copy above source codes to both boms and algo ; Start worker on both hosts: celery -A pdpara worker --loglevel=debug --hostname=worker1@%h Run in parallel: time python pararun.py output: python pararun.py 0.56s user 0.05s system 2% cpu 25.741 total Run in serial: time python pdser.py output: python pdser.py 80.46s user 0.04s system 99% cpu 1:20.51 total You can see the parallel version is much faster than the serial one.","tags":"Tech","url":"http://leetschau.github.io/parallel-processing-on-celery-cluster.html","loc":"http://leetschau.github.io/parallel-processing-on-celery-cluster.html"},{"title":"Read and Write Files on HDFS with Python","text":"安装 HDFS Python package mtth/hdfs : conda install -c conda-forge python-hdfs 读写文件： from hdfs import InsecureClient client = InsecureClient ( 'http://cdh001:50070/' , user = 'cloudera-dev' ) with client . read ( '/user/cloudera-dev/zjkgfalgodata/20170603/YCZ-65-02/part-000000' , encoding = 'utf-8' ) as reader , client . write ( '/user/cloudera-dev/zjkgfalgodata/20170603/YCZ-65-02/test' , encoding = 'utf-8' ) as writer : raw = str ( reader . read ()) lines = raw . split ( ' \\n ' ) fir = ' \\n ' . join ( lines [: 6 ]) writer . write ( fir ) 另外 pyarrow 是 pandas 作者 Wes 的作品， 它是基于列的内存计算 Apache Arrow 的 Python 接口， 统一了 pandas, hbase 和 Spark 的 DataFrame 的内存格式， 未来能使用 pandas dataframe 做分布式计算，非常有吸引力， 试验了一下，总报找不到文件错误，放弃： conda install - c conda - forge pyarrow export ARROW_LIBHDFS_DIR =/ opt / cloudera / parcels / CDH - 5.15 . 1 - 1. cdh5 . 15.1 . p0 . 4 / lib64 ipython import pyarrow as pa","tags":"Tech","url":"http://leetschau.github.io/read-and-write-files-on-hdfs-with-python.html","loc":"http://leetschau.github.io/read-and-write-files-on-hdfs-with-python.html"},{"title":"i3ipc Notes","text":"Install package i3ipc with pip, and run the following script to make current window fullscreen: import i3ipc i3 = i3ipc . Connection () tree = i3 . get_tree () cur = tree . find_focused () cur . command ( 'fullscreen' ) Ref: i3ipc-python's documentation","tags":"Tech","url":"http://leetschau.github.io/i3ipc-notes.html","loc":"http://leetschau.github.io/i3ipc-notes.html"},{"title":"Python Property Test","text":"Hypothesis is a Python package play the role of QuickCheck in Haskell. Install it with conda install -c conda-forge hypothesis . An example from Quick start guide : Save the following codes into hypo_test.py: def encode ( input_string ): # if not input_string: # return [] count = 1 prev = '' lst = [] for character in input_string : if character != prev : if prev : entry = ( prev , count ) lst . append ( entry ) count = 1 prev = character else : count += 1 else : entry = ( character , count ) lst . append ( entry ) return lst def decode ( lst ): q = '' for character , count in lst : q += character * count return q from hypothesis import given , example from hypothesis.strategies import text @given ( s = text ()) def test_decode_inverts_encode ( s ): assert decode ( encode ( s )) == s Run it with python -m pytest hypo_test.py . The output is: ... Falsifying example: test_decode_inverts_encode(s='') ... This means the empty string can't pass the test. Uncomment the 2nd and 3rd line, and run pytest again, the test will pass. To debug the encode function, add the following test case into hypo_test.py : def test_one_input (): res = encode ( '00/000' ) print ( res ) print ( decode ( res )) Then run pytest hypo_test.py::test_one_input --trace . Now you are a pdb REPL.","tags":"Tech","url":"http://leetschau.github.io/python-property-test.html","loc":"http://leetschau.github.io/python-property-test.html"},{"title":"Python Unit Test with pytest","text":"pytest is much flexible than unittest. Install it with conda install -c anaconda pytest . In any Python file whose name matches test_*.py or *_test.py , any test_ prefixed test functions or methods outside of class, or test_ prefixed test functions or methods inside Test prefixed test classes (without an init method), will be collected as a test case and run by pytest. See Conventions for Python test discovery for details. Here is a minimal demo: $ cat << EOF > test_demo . py def func ( x ) : return x + 1 def test_answer () : assert func ( 3 ) == 4 EOF $ python - m pytest $ python - m pytest - k demo $ python - m pytest test_demo . py :: test_answer So run one or a group pytest testcase(s) with: python -m pytest my_test.py python -m pytest my_test.py::TestClass::test_func python -m pytest -k 'the_keyword' The keyword method (the last item of above list) is especially effective. The keyword can be part of the module name, test function or test class name. Debuging a test Go into debugger pdb when a exception raised by adding option --pdb : pytest --pdb test_module.py . Starting the debugging process in the beginning with option --trace . For example: pytest -k 'the_keyword' --trace . Now you're in a pdb shell. Use b to add breakpoint, n or c to proceed, and display to add variable watch. IPython Integration 使用 pytest 结合 IPython console 写测试用例比 unittest 方便， unittest 使用的是类架构，变量要写成 self.var1 ，放到 IPython 里需要改成 var1 ， 从 IPython 里转到测试用例里时，又要为所有变量加上 self. ，反反复复很麻烦， 而 pytest 可以写函数，避免了这个问题。 从 pytest 文件中提取代码到 IPython console 中，避开函数声明即可： load -r10:18,20 test_stations.py Print to console By default pytest captures the std.err. So writing print() in a pytest funcation, you can't see the output in the console. pytest can disable this feature by add the -s option: pytest -s test_app.py . Ref: How can I see normal print output created during pytest run? Setup vs Fixture pytest uses fixtures instead of traditional setup/teardown style. A fixture is a function with arbitrary name returns a object. The test function uses this fixture as parameter, and get data from it.","tags":"Tech","url":"http://leetschau.github.io/python-unit-test-with-pytest.html","loc":"http://leetschau.github.io/python-unit-test-with-pytest.html"},{"title":"Python Mock Notes","text":"Python mock 对象的基本思想是：用一个假对象 ( mock_obj ) 代替参与测试过程的某个 真实对象 tested_module.myobj ，在执行测试 ( test_function() ) 前， 可以调整假对象属性的值 ( myobj.prop1 = 'val1' ) 或者方法的返回值 （ myobj.method1.return_value = 'val2' ）， 然后对测试目标或者假对象在测试过程中的行为进行验证： from tested_module import myobj @mock.patch ( 'myobj' ) def test_target ( self , mock_obj ): myobj . prop1 = 'val1' tested_function () self . assertFalse ( mock_obj . method1 . called , \"Failed to avoid running.\" ) 上面的例子演示了：当假对象的属性 prop1 被设为 val1 时， 测试过程中它的 method1 方法不应该被调用。 下面按照作用域从大到小的顺序分别说明不同级别对象的 mock 方法。 mock 第三方库 通过mock Python 标准库避免副作用： # mymodule.py: import os def rm ( filename ): if os . path . isfile ( filename ): os . remove ( filename ) # mytests.py: from mymodule import rm from unittest import TestCase , mock class RmTestCase ( TestCase ): @mock.patch ( 'mymodule.os' ) def test_rm ( self , mock_os ): rm ( \"any path\" ) mock_os . remove . assert_called_with ( \"any path\" ) 真实的 os.remove() 没有执行，但我们可以验证这个方法被调用过了。 mock 类实例 如果 mock 目标不是模块级对象，而是函数参数： # mymodule . py : class MyOS : def __init__ ( self , path ) : self . path = path def remove ( self , target ) : return ' remove file %s, and %s ' % ( self . path , target ) def rm ( myos , filepath ) : return myos . remove ( filepath ) # mytests . py : class RmTestCase ( TestCase ) : def test_myos ( self ) : mock_os = mock . create_autospec ( MyOS ) mock_os . remove . return_value = \" this is mocked \" print ( rm ( mock_os , ' mno ' )) 这里我们创建了真实 MyOS 类的替代品，然后定义了它的方法的返回值： mock_os.remove.return_value = ... ，然后验证被测试函数在此情况下的执行结果。 mock 函数 如果进一步将上面的 myos 从函数参数变成内部对象，可以通过 mock 对象方法实现替代： # mymodule . py : class MyOS : def __init__ ( self , path ) : self . path = path def remove ( self , target ) : return ' remove file %s, and %s ' % ( self . path , target ) def rm ( filepath ) : myos = MyOS ( ' linux ' ) return myos . remove ( filepath ) # mytests . py : class RmTest ( TestCase ) : def test_rm ( self ) : print ( rm ( ' aabbc ' )) @ mock . patch ( ' mymodule.MyOS.remove ' ) def test_mock_rm ( self , mock_remove ) : mock_remove . return_value = ' this is mocked ' print ( rm ( ' xyz ' )) 第一个测试用例是真实函数的运行结果，第2个测试用例是 mock 之后函数的运行结果。 多个 patch 的顺序 patch多个mock对象时，patch顺序和参数顺序要相反： @mock . patch ( 'mymodule.sys' ) @mock . patch ( 'mymodule.os' ) @mock . patch ( 'mymodule.os.path' ) def test_something ( self , mock_os_path , mock_os , mock_sys ) : pass 这是因为 Python 的 decorator 是按顺序包装函数的： patch_sys(patch_os(patch_os_path(test_something))) ， 导致最外层的 patch_sys 最后执行，所以其参数要放到最后。 Ref: An Introduction to Mocking in Python Mocking Has A Weakness, Speccing Removes It Getting Started with Mocking in Python What the mock? — A cheatsheet for mocking in Python Python Mocks: a gentle introduction - Part 1","tags":"Tech","url":"http://leetschau.github.io/python-mock-notes.html","loc":"http://leetschau.github.io/python-mock-notes.html"},{"title":"Task Management Notes","text":"任务管理工具特征 数据保存为纯文本文件，方便实现数据保存和版本控制； 包含命令行版本和移动设备版本，能方便地在不同设备间同步； 具备PC和移动设备上的提醒功能； Todo.txt todo.txt 使用纯文本作为数据存储， 包含一个命令行工具 todo.txt-cli 和几个安卓客户端，其中 Simpletask 可以在 设置 中与 Dropbox 绑定实现同步，可以打开桌面提醒功能。 安卓版本设置好 Dropbox 同步后，在自动 Dropbox 的 Apps 目录下创建 Simpletask 文件夹； PC上的命令行版本安装过程： 从 Github release 上下载 最新稳定版本的 tar.gz 文件，解压到 ~/apps 文件夹下； 修改 ~/apps/todo.txt_cli-2.11.0/todo.cfg 中的数据目录： export SYNC_BASE=\"$HOME/Documents/Dropbox/Apps/Simpletask\" export TODO_FILE=\"$SYNC_BASE/todo.txt\" export DONE_FILE=\"$SYNC_BASE/done.txt\" export REPORT_FILE=\"$SYNC_BASE/report.txt\" 这里 $HOME/Documents/Dropbox 是 Dropbox 在服务器上的同步文件夹， 可以在配置菜单中修改； 设置命令简写（ to ）：在 ~/.bash_aliases 中添加 alias to=\"$HOME/apps/todo.txt_cli-2.11.0/todo.sh\" 实现命令补全：在 ~/.zshrc 中添加 source $HOME/apps/todo.txt_cli-2.11.0/todo_completion 实现Tab自动补全和可选命令列表； 现在可以用 to ls 列出所有任务了。 常用操作 README of todo.txt 对 todo.txt 的3个核心概念：Project, Context 和 Priority 做了细致的介绍，例如： 学习 Haskell 是一个大目标，所以是一个 project, 阅读和练习 GPH (Get Programming Haskell) 是具体步骤，所以 to a GPH +haskell （这里 a 是 add 的简写）。 设置截止日期和优先级 下面定义一个数值分析任务，然后设置优先级为 B ： $ to add \"max-cur matrix-median 数值不一致问题 @office\" due:2018-11-26 $ to ls 1 2018 -11-25 研究Python测试工具 due:2018-12-5 t:2018-11-25 2 max-cur matrix-median 数值不一致问题 @office due:2018-11-26 -- TODO: 2 of 2 tasks shown $ to p 2 B 这里 p 是 priority 的简写，2是任务编号。 推迟任务 给 due 设置一个很远的日期，实现推迟的效果： to a \"Get Programming Haskell +haskell\" due:2019-03-01 Taskwarrior Install with apt install taskwarrior on Ubuntu. Add a task with task add my sample task . Task sync You can build your own task server (instal with apt install taskd ) and create certificates by yourself. Here I use the public service inthe.am as the sync server. Login to the inthe.am with Google account. Download certificate files into folder ~/.task/certificates and add configurations into ~/.taskrc according to the instructions in Configuration > Synchronization Settings : data . location =~/ . task taskd . certificate =~/ . task / certificates / private . certificate . pem taskd . key =~/ . task / certificates / private . key . pem taskd . ca =~/ . task / certificates / ca . cert . pem taskd . server = taskwarrior . inthe . am : 53589 taskd . credentials = inthe_am / leetschau / 2 ec9db72 - fa7f - 49 c5 - b09c - ef01a699f255 taskd . trust = ignore hostname Then run task sync init and that's all. Problems 安卓版本在 Google Play 上有两个，用户评价不高，评价数量比较少（100+）， 且其中一个有两年没更新了。","tags":"Tech","url":"http://leetschau.github.io/task-management-notes.html","loc":"http://leetschau.github.io/task-management-notes.html"},{"title":"Joplin Notes","text":"笔记软件要求 跨平台：Linux, Winodws, Android； 实时同步； 无设备数限制； 支持 markdown 和 mathjax； 文本编辑器支持 vi-mode，或者外部编辑器保存文件后能实时预览； 实时预览，或至少方便地在预览和编辑状态间切换； 对中文支持好； 有命令行接口：重复性不太强的工作可以用它完成，例如修改tag，创建时间等； 暗色调界面； 对键盘操作支持好； 方便导出纯文本数据文件； 有 Python 或者 REST API（用于批量更新元数据或者自定义功能定制）； Terminal 命令行版本对键盘操作支持好，可以同时开多个实例并实时同步 （GUI版本如果有一个实例运行，再启动时会跳到已有的实例）， 缺点是没有笔记预览功能，无法插入图片（GUI版本中可以直接从剪贴板粘贴）。 Joplin terminal 支持两种风格： Shell 风格一次性执行命令，例如 jop config sync.target 2 . 使用 jop help all 列出所有命令格式，用 jop help config 列出某个命令的帮助； TUI 风格类似于 vi，默认处于 Normal 模式下，执行命令时用分号（默认值是冒号）作为命令前缀， 例如 :config sync.target 2 . 只能在 TUI 模式下进行全文搜索，shell 模式下的 ls 命令支持按文件名匹配， 例如列出所有名字以 2019 开头的笔记： jop ls '2019*' . 用户手册：https://joplinapp.org/terminal/ Install, Update and Basic Usage in Shell Mode 首先用 asdf 安装 node，然后执行 $ NPM_CONFIG_PREFIX =~/ . joplin - bin npm install - g joplin // for both installation and update $ echo ' alias jop=$HOME/.joplin-bin/bin/joplin ' >> ~/ . bash_aliases $ cat << EOF > $ HOME / . config / joplin / keymap . json [ { \" keys \" : [ \" ; \" ], \" type \" : \" function \" , \" command \" : \" enter_command_line_mode \" }, { \" keys \" : [ \" k \" ], \" type \" : \" function \" , \" command \" : \" move_up \" }, { \" keys \" : [ \" j \" ], \" type \" : \" function \" , \" command \" : \" move_down \" }, { \" keys \" : [ \" l \" ], \" type \" : \" function \" , \" command \" : \" focus_next \" }, { \" keys \" : [ \" q \" ], \" type \" : \" function \" , \" command \" : \" exit \" }, { \" keys \" : [ \" h \" ], \" type \" : \" function \" , \" command \" : \" focus_previous \" } ] EOF $ jop config sync . target 2 $ jop config sync . 2 . path / home / leo / Documents / Dropbox / Apps / Joplin $ jop config editor # show current value $ jop config editor nvim $ jop config dateFormat YYYY - MM - DD $ jop mkbook Diary # add a new notebook $ jop ls / # list notebooks , ` jop help ls ` for full docs $ jop use Diary # set the current notebook $ jop mknote 2019 . 5 . 21 # add a new note $ jop edit 2019 . 5 . 21 $ jop sync $ jop cat 2019 . 5 . 21 # only print the contents of the note $ jop cat - v 2019 . 5 . 21 # print note contents and metadata ( creating and updating date , etc ) $ jop tag list # list all tags $ jop tag list training # list all notes with tag ' training ' $ jop ls - l - n 5 - s updated_time # list last updated 5 notes $ jop set fe889 title \" New title \" # modify note title , ' fe889 ' is from ` ls ` command $ jop export -- note < node - id > -- format md < output - dir > $ jop import papers . md Tech # import from file papers . md into notebook ' Tech ' $ jop version # show version You can get the in export command in TUI mode with metadata displayed (use tm to toggle metadata). And output in export command is a folder name, where joplin put the exported note in. In TUI Mode Start joplin with jop . Wrtie a new note: :mknote \"my note name\" and press on the note panel. Modify metadata of a note: Search the note with :search <title> Add tag to the note: :tag add wesnoth $n ( $n means current note); Modify created time of the note: :set $n user_created_time 1470268800000 (run Date.parse('2016-08-04') in node.js REPL to get the timestamp 1470268800000 ) Shortcuts Sync: :sync ; Quit: Ctrl-d ; Search: / ; Edit note: Enter ; toggle console: tc ; make a new note: mn , or :mknote toggle metadata: tm ; Export Joplin can be exported to several formats: raw: export to a folder, each note to a markdown file, with contents and metadata; jex: Joplin Export File, default format, a big binary file markdown: export to a folder, each notebook to a subfolder, each note to a markdown file with only contents, no metadata; json: export to a folder, each note to a json file (no subfolder), with contents and metadata; API apt install httpie http localhost : 41184 / ping # test REST server http - b 'localhost:41184/tags?fields=id,title' # List all tags with id and name GUI","tags":"Tech","url":"http://leetschau.github.io/joplin-notes.html","loc":"http://leetschau.github.io/joplin-notes.html"},{"title":"matplotlib Architecture Notes","text":"matplotlib 的设计原理和发展历史可参考 \"Mastering matplotlib-Duncan M. McGreggor(2015).pdf\" 第2章 \"The matplotlib Architecture\"，以及 \"Python Data Analytics with Pandas NumPy and Matplotlib-Fabio Nelli(2018).pdf\" 第7章 \"The IPython and IPython QtConsole\" 和 \"The matplotlib Architecture\" 两节， 厘清了 matplot 中最重要的几个概念的联系和区别： \"pyplot\" 是 matplotlib API 模块 (scripting layer) 的名称； \"figure\" 代表整个绘图区域，可能只包含一个图，也可能包含多个图（subplot）； \"axes\" 在 matplotlib 中代表一个图，也就是 subplot 中的一个小图， 其类名是 AxesSubplot ，在单图场景中，\"figure\" 和 \"axes\" 基本是重合的； \"axis\" 代表一个坐标轴，二维图中有x轴和y轴两种情况； 参考下面的代码： import matplotlib.pyplot as plt import numpy as np x = np . linspace ( 0 , 2 * np . pi , 400 ) y = np . sin ( x ** 2 ) f , axarr = plt . subplots ( 2 , 2 ) print ( type ( plt )) # <class 'module'> print ( type ( f )) # <class 'matplotlib.figure.Figure'> print ( type ( axarr )) # <class 'numpy.ndarray'> axarr [ 0 , 0 ] . plot ( x , y ) axarr [ 0 , 0 ] . set_title ( 'Axis [0,0]' ) axarr [ 0 , 1 ] . scatter ( x , y ) axarr [ 0 , 1 ] . set_title ( 'Axis [0,1]' ) axarr [ 1 , 0 ] . plot ( x , y ** 2 ) axarr [ 1 , 0 ] . set_title ( 'Axis [1,0]' ) axarr [ 1 , 1 ] . scatter ( x , y ** 2 ) axarr [ 1 , 1 ] . set_title ( 'Axis [1,1]' ) print ( type ( axarr [ 0 , 0 ])) # <class 'matplotlib.axes._subplots.AxesSubplot'> print ( type ( axarr [ 0 , 0 ] . xaxis )) # <class 'matplotlib.axis.XAxis'> plt . show () Note: axes 本意是 axis （轴）或者 ax （斧子）的复数，具体哪个意思取决于上下文。 在单图场景中， figure 对象通过 fig = plt.figure() 方法获得。","tags":"Tech","url":"http://leetschau.github.io/matplotlib-architecture-notes.html","loc":"http://leetschau.github.io/matplotlib-architecture-notes.html"},{"title":"Build Android App with Kivy","text":"On Ubuntu Install kivy with conda: conda create - n kivy python = 3 . 6 ipython . activate kivy conda install kivy - c conda - forge Create a demo app: take demoapp cat << EOF > main . py from kivy.app import App from kivy.uix.button import Button class TestApp ( App ): def build ( self ): return Button ( text = \"hi sweetie\" ) TestApp () . run () EOF cat << EOF > android . txt title = My Demo App author = Li Chao orientation = portrait EOF Test the demo with python main.py (in conda env). Install FTP client: ncftp (install with sudo apt install ncftp ) supports tab-completion, which make the file transfer and manipulation much easier. On Android Device Install app Kivy Launcher and 软件数据线 (or Software data cable from Google Play) on the android device. Firstly upload the project: On the PC, run the following commands: $ ncftp - P 8888 192 . 168 . 1 . 2 > cd \" /Device Storage (HUAWEI VTR-AL00) \" > mkdir kivy > exit $ ncftpput - R - P 8888 192 . 168 . 1 . 2 \" /Device Storage (HUAWEI VTR-AL00)/kivy \" demoapp Now run the demo on your android device by startting the Kivy Launcher and choose the demoapp in the list.","tags":"Tech","url":"http://leetschau.github.io/build-android-app-with-kivy.html","loc":"http://leetschau.github.io/build-android-app-with-kivy.html"},{"title":"Add Wallpaper for i3wm","text":"To add the slideshow wallpaper for i3wm, run the commands: sudo apt install feh cd ~/ apps git clone git @github . com : thejandroman / bing - wallpaper . git Then run crontab -e and append: 0 3 * * * bash apps / bing - wallpaper / bing - wallpaper . sh 0 4 * * 1 - 5 DISPLAY = : 0 feh --bg-fill -z $HOME/Pictures/bing-wallpapers/*.* Get the value of DISPLAY from the output of env|grep DISPLAY . This command is valid only in tty connected directly with the X window via keyboard. It will be invalid when executed in a remote shell via SSH. The folder $HOME/Pictures/bing-wallpapers is the default download path for thejandroman/bing-wallpaper. To change the wallpaper manually, add a script: cat << EOF > ~/ . local / bin / wapa DISPLAY = : 0 feh --bg-fill -z $HOME/Pictures/bing-wallpapers/*.* EOF chmod 755 ~/ . local / bin / wapa Now you can change the wallpaper anytime in an empty workspace with Ald-d, wapa . Note: 45 3 * * 1-5 feh --bg-scale -r -z Pictures/**/{*.jpg,*.png} does not work. Maybe the {} syntax in path is not supported?","tags":"Tech","url":"http://leetschau.github.io/add-wallpaper-for-i3wm.html","loc":"http://leetschau.github.io/add-wallpaper-for-i3wm.html"},{"title":"Population Variance and Sample Variance","text":"Given a population with size \\(N\\) and a sample from this population with size \\(n\\) . You can compute the exact value of population variance \\(\\sigma&#94;2\\) with: $$ \\sigma&#94;2 = \\frac1N \\sum_{i=1}&#94;N (x_i - \\mu)&#94; 2 $$ where \\(\\mu\\) is the mean of the population. Second, you can compute the exact value of sample variance \\(s&#94;2\\) with: $$ s&#94;2 = \\frac1n \\sum_{i=1}&#94;n (x_i - \\bar x)&#94; 2 $$ where \\(\\bar x\\) is the mean of the sample. Third, you can estimate the population variance based on the sample data when you don't know the mean of population: $$ \\sigma&#94;2 \\approx \\frac1{n - 1} \\sum_{i=1}&#94;n (x_i - \\bar x)&#94; 2 $$ where \\(\\bar x\\) is the mean of the sample. Finally, you can estimate the population variance based on the sample data when you know the mean of population: $$ \\sigma&#94;2 \\approx \\frac1n \\sum_{i=1}&#94;n (x_i - \\mu)&#94; 2 $$ where \\(\\mu\\) is the mean of the population. Ref: Why divide the sample variance by N-1? What is the difference between N and N-1 in calculating population variance? Sample Variance Standard Deviation and Variance Variance if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/population-variance-and-sample-variance.html","loc":"http://leetschau.github.io/population-variance-and-sample-variance.html"},{"title":"Jupyter Notebook Notes","text":"DIff and Merge Tool for ipynb File Python 的数据分析和展示文档格式，目前的解决方案大体分为两类： 第一类是使用类 Rmd 格式，优点是可读性好，对 git 友好，缺点是交互性比较差， 没有输出结果无法作为说明文档（类似于用 knitr 转换 Rmd 文档得到的 md文件）， 例如 ipymd 用 markdown 格式代替 Jupyter notebook 的 ipynb 格式作为源码保存格式， 以及 nbstripout 将 ipynb 中的输出去除，达到净化文本的目的。 第二类是直接分析 ipynb 文件解决 diff 和 merge 问题， 有点是保留的 notebook 的交互性和结果展示，缺点是代码库中（尤其是源码文件， 这点与 Rmd 将输出放在单独的文件中不同）混杂了输出数据和图片，不够\"纯粹\"， 例如 nbdime，上午用下面的命令安装了这个工具，初步使用效果不错， 打开 git 集成后执行 git diff 会被 nbdime 处理（定义在 ~/.gitconfig 里）， 不需要改变工作流程，对输入、输出的比较都比较靠谱。 . activate anaconda conda install - c conda - forge nbdime nbdime config - git --enable --global Jupyterhub Verified on Ubuntu 16.04. To use jupyter notebook conda environment, you need nb_conda . To install and start server, run the following codes in conda's root env: conda install jupyter conda install nb_conda conda install - c conda - forge jupyterhub conda install notebook jupyterhub Access :8000 in browser, in the New dropdown list you can see all your conda envs. There is a Conda tab in the file browser. You can export, clone or remove all the conda envs. After opening a notebook file, use Kernel > Change kernel to use your conda environment. Note: The following steps should be unnecessary . In a conda env install nb_conda_kernels ： . activate < your - env > conda install - c conda - forge nb_conda_kernels conda install ipykernel Run service as a daemon Use the following scripts to make jupyterhub a systemd service, which auto-starts when system start, auto-restarts when service down, etc: sudo cat << EOF > / etc / systemd / system / jupyterhub . service [ Unit ] Description = Jupyterhub After = syslog . target After = network . target [ Service ] Type = simple User = leo Group = leo WorkingDirectory =/ home / leo / temp ExecStart =/ bin / bash - c 'PATH=/home/leo/apps/miniconda3/bin:$PATH /home/leo/apps/miniconda3/bin/jupyterhub --port 8282' Restart = always Environment = USER = leo HOME =/ home / leo [ Install ] WantedBy = multi - user . target EOF sudo systemctl enable jupyterhub sudo systemctl start jupyterhub Note 1: Watch the log with tail -f /var/log/syslog or sudo journalctl -u jupyterhub . See the service status with sudo systemctl status jupyterhub.service . Note 2: If you modified the jupyterhub.service file manually, run sudo systemctl daemon-reload to reload and sudo systemctl start jupyterhub.service to start again. Note 3: The jupyterhub depends on configurable-http-proxy . If not adding its path /home/leo/apps/miniconda3/bin into PATH in ExecStart , the jupyterhub service startup will fail. Written in 2016: Start jupyter notebook server with jupyter notebook . It creates a new window in existing browser session with url \"http://localhost:8888/tree\". Click [New -> Python3] at the right side of the page to create a new notebook session. In the new page, use [File -> Rename] to give it a name. When you click any of the notebook file *.ipynb (here is chap01ex.ipynb) in browser, it will be opened in a new tab with url \"http://localhost:8888/notebooks/chap01ex.ipynb\". Jupyter notebook support all vi-style key shortcuts, which conflicts with Chrome plugin Vimium. So click the Vimium icon at the right side of the address bar, and add a rule: Patterns : https ?:// localhost : 8888 /notebooks/ * Leave the \"Keys\" textbox blank, which means disable all keys of Vimium under this pattern. For Firefox, in [Tools -> Add-ons -> Extensions -> VimFx -> Blacklist], add http://localhost:8888/* to disable VimFx key shortcuts on Jupyter web page. Now you can use jupyter key shortcuts freely. Use h key list all available shortcuts. Note that shortcuts listed there are all capital letter, while actually you should use the corresponding small letter. Use j / k to select active cell, <Enter> to edit it, c to copy, v to paste, x to delete it, a / b to insert before/after acitve cell. Use m to make text in a cell as markdown text, y to code. For markdown cell, use to edit it, use Ctrl-Enter to run it (turn text from edit mode to markdown preview mode). Use Alt-Enter to evaluate the current cell and insert a blank cell below. Use s to save current notebook and setup a \"checkpoint\", use [File -> Revert to Checkpoint] to discard all changes after that checkpoint. Use o to toggle output of the current cell, Shift-o to toggle output scrolling. Use [File -> Download as -> Python(.py)] to create a runnable Python script from the current jupyter notebook. Setup Jupyter Server Setup Anaconda server on a CentOS (IP: 192.168.12.233): bash Anaconda3 - 4 . 3 . 1 - Linux - x86_64 . sh # target path : $ HOME / apps / anaconda3 export PATH = $ HOME / apps / anaconda3 / bin : $ PATH jupyter notebook --generate-config vi ~/ . jupyter / jupyter_notebook_config . py # see notes below to customize it jupyter notebook Generate password: export PATH = $ HOME / apps / anaconda3 / bin : $ PATH ipython In [ 1 ]: from notebook.auth import passwd In [ 2 ]: passwd () Out [ 2 ]: 'sha1:xxx:xxx' The value of Out[2] is the 'password' of the jupyter config file. Note that the u before the string must be added, or the password doesn't work. Setup server properties (file ~/.jupyter/jupyter_notebook_config.py): c . NotebookApp . ip = '*' c . NotebookApp . open_browser = False c . NotebookApp . password = u 'sha1:39bfa5b30456:33907b4fb0ecdaa77e772399565096d85bd7dd7d' c . NotebookApp . port = 7654 If the server is used only by yourself, add c.NotebookApp.password_required = False into the config file to login with a token (printed in the server console). See Running a notebook server for details. Use Ctrl-z , bg and disown to convert it to a daemon process. There's no elegant way to reattach to this process. You have to find it's PID with pgrep jupyter and kill it. Then start the server again. Now on the client, open 'http://192.168.12.233:7654/' in browser. Type the password and login. Click 'New -> Python3' on the right side to create a new notebook. Custom Notebook Color Themes Custom notebook color theme with dunovank/jupyter-themes : conda install jupyterthemes jt - h # print help info jt - l # list available themes jt - t monokai # use theme \"monokai\" jt - r # reset to default theme It install color theme files into folder $HOME/.jupyter/custom. So no matter if the Jupyter server and this extension is in the same conda env, the color theme always works. Ref: How to change the theme in Jupyter Notebook?","tags":"Tech","url":"http://leetschau.github.io/jupyter-notebook-notes.html","loc":"http://leetschau.github.io/jupyter-notebook-notes.html"},{"title":"JupyterLab Notes","text":"Install Install JupyterLab with conda install -c conda-forge jupyterlab . Configuration 配置文件在 ~/.jupyter/ 下，主要是 jupyter_notebook_config.py 和 jupyter_notebook_config.json 两个文件。 Disable Token and Start Server 如果不设置秘密则 Jupyter 每次生成不同的 token，会造成奇怪的安全错误， 所以下面为 Jupyter notebook 设置了密码，然后在指定端口启动： $ jupyter notebook password Enter password : Verify password : [ NotebookPasswordApp ] Wrote hashed password to / home / leo / . jupyter / jupyter_notebook_config . json $ jupyter lab --port 8765 --no-browser Customize Keyboard Shortcuts 在 Settings > Advanced Settings Editor > Keyboard Shortcuts 中设置快捷键， 例如下面两个快捷键分别是 重启 Kernel 并执行所有 cell 和 在 console 中执行当前行当前行代码 ： { \"notebook:restart-run-all\" : { \"command\" : \"notebook:restart-run-all\" , \"keys\" : [ \"Alt Shift W\" ], \"selector\" : \".jp-Notebook:focus\" , \"title\" : \"Restart Kernel and Run All\" , \"category\" : \"Main Area\" } , \"notebook:run-in-console\" : { \"command\" : \"notebook:run-in-console\" , \"keys\" : [ \"Alt Shift M\" ], \"selector\" : \".jp-Notebook:focus\" , \"title\" : \"Run Cell(s) and Insert Below\" , \"category\" : \"Notebook Cell Operations\" } } 其中最重要的是 command 和 keys ，快捷键的名字与 command 一致即可， 没找到 selector 的说明文档， category 似乎可以随便写。 定义后保存，无需重启立即生效。 命令的完整列表见 namespace CommandIDs in index.ts JupyterLab 目前还没用跳转快捷键，体验上不如 VS Code. vim mode jupyterlab-vim 是 JupyterLab 的 vim mode 实现。 它有3个状态：Jupyter command, vim command, vim insert，互相之间的切换方式： Jupyter command > vim command: Enter vim command > Jupyter command: Shift + ESC vim command > vim insert: i vim insert > vim command: ESC 完整快捷键列表： jupyterlab-vim 。 在 Settings > Advanced Settings Editor 中设置的快捷键只在 Jupyter command 模式下生效，例如下面为 在 console 中执行当前行 分配快捷键 Alt+Shift+m ， 只能先在 vim mode 下将光标移动到目标行，按 ESC 切换到 Jupyter command 状态， 再 Alt+Shift+m 执行当前行。 P.S.: 使用 Jupyterlab 时若提示升级 jupyterlab-vim，需要 node.js 版本 >=6.11.5， 则首先升级 node.js： conda install - c conda - forge nodejs Workspace Management URL: http://localhost:8765/lab/workspaces/mywork Integrated with jupyterhub $ conda install -c conda-forge jupyterhub Ref: Jupyter lab shortcuts","tags":"Tech","url":"http://leetschau.github.io/jupyterlab-notes.html","loc":"http://leetschau.github.io/jupyterlab-notes.html"},{"title":"User Defined Snippets in VS Code","text":"更新 FPP 时经常要插入Python代码块，反复手工写很麻烦， 用VSC 的自定义代码块功能能比较好的解决重复输入问题， 参考 Creating your own snippets 。 首先在 User Settings 中添加 \"editor.tabCompletion\": true ， 然后在 markdown.json （在 command palette 里输入 User Snippets ，选择 markdown 打开此文件）里加入： \"Python code block\" : { \"prefix\" : \"pyb\" , \"body\" :[ \"```py\" , \"$1\" , \"```\" ], \"description\" : \"add a python code block\" } 保存文件后就自动生效了，在 markdown 文件里输入 pyb ， 按两次 Tab 键就会扩展为 Python 代码块。","tags":"Tech","url":"http://leetschau.github.io/user-defined-snippets-in-vs-code.html","loc":"http://leetschau.github.io/user-defined-snippets-in-vs-code.html"},{"title":"Easy Search and Jump in vim","text":"easymotion 的基本思想是为多个备选目标 加上标号，通过按键选择标号，定位备选结果，从而避免了反复多次输入光标移动指令 （ jjjjjjjjjjjj 或者 llllllllllllll 等）。 通过试用，发现 f 跳转增强最实用： f 加上标号选择（一般是两次按键）跳转到（一个或多个窗口内的） 任一单词上，配置如下： map f < Plug > ( easymotion - bd - w ) nmap f < Plug > ( easymotion - overwin - w ) Plug 'easymotion/vim-easymotion' Note: 按照 easymotion README 的说明，它（以及配合 incsearch ）还可以实现如下功能： 使用 f 加一个搜索字母加上标号选择实现跳转； 使用 s 加两个字母加上标号选择实现跳转； 使用 / 后面加上目标字符串，再结合标号选择跳转到任一匹配目标上； 使用 ,L 结合标号选择跳转到任何行； 但 neovim 默认的 incsearch ( / ) 已经比较好用了，没必要再加上标号选择，也没必要再安装一个插件。 f , s 是结合搜索跳转，相比 w 纯跳转多了一个环节，且 s 覆盖了原本相对常用的修改功能； .L 实现的功能可以被 w 覆盖，而操作复杂度比后者高的多。 另外使用 f , s 和 结合 easymotion 的 / 时出现了乱码 [2 q ，见 Nvim shows weird symbols ([2 q) when changing modes ， 按照说明添加了 :set guicursor= 也无效。","tags":"Tech","url":"http://leetschau.github.io/easy-search-and-jump-in-vim.html","loc":"http://leetschau.github.io/easy-search-and-jump-in-vim.html"},{"title":"Visual Studio Code Notes","text":"VSC 是一个很好实现了 editor + terminal 模式的文本编辑器： editor 和 terminal 被整合到了同一个环境中， 通过 workbench.action.terminal.runSelectedText 命令把文本发送到 terminal 里； 通过快捷键方便地在二者间一步跳转，不需要像 nvim terminal 那样在 insert 模式下执行命令， 用 Ctrl-\\ Ctrl-n 切换到 normal 模式才能转换到 editor； terminal 直接使用操作系统的 terminal emulator 应用， 可以使用所有系统命令快捷键（例如 fzf 的命令行历史，autojump 的跳转等）； 详细的 terminal 配置，提供了大量 terminal 相关的命令可以绑定快捷键， 详细列表在系统快捷键定义文件（Command Palette 里搜索 keyboard shortcuts ） 里搜索 workbench.action.terminal.* ; 基于文件的配置：全局配置和用户配置分离，主要的用户配置文件都在 ~/.config/Code/User 目录下，例如 keybindings.json 和 settings.json; 全局模糊匹配的 Command Palette ( Ctrl-Shift-p )， 很多使用频率不太高的命令不必定义快捷键也能通过键盘快速操作， 不需要通过鼠标点击菜单完成； 与 neovim 深度整合（ VSCodeVim/Vim 插件正是 neovim GUI 列表 中 VSC 的实现），vim mode 体验不错，很多 vim 插件也被移植到了 vsc-vim 上 （例如 easy-motion）； 基于 electron 框架，可以方便地使用 JavaScript/TypeScript 开发插件； Install Always install VSC with the deb file from its official website . 不要通过 flatpak 安装 VSC。flatpak 在沙箱中运行应用，应用环境与 用户环境隔离，所以适合运行微信等不依赖外界环境的应用，而 VSC 与系统终端深度整合， 通过 $SHELL 环境变量确定启动 shell 的种类和方式，而 flatpak sandbox 中 $SHELL 只能是 /bin/sh ，无法改变。 P.S.: the configuration files above are in folder ~/.var/app/com.visualstudio.code/config/Code/User when installed with flatpak. See vscodevim for more customization examples. Install Vim extension in the Extensions bar (show with ctrl-shift-x , hide with ctrl-b ). Configuration Add the following codes in ~/.config/Code/User/keybindings.json to enable Capslock-ESC swap and Ctrl-j to jump between editor and console: [ { \"key\" : \"capslock\" , \"command\" : \"extension.vim_escape\" , \"when\" : \"editorTextFocus && vim.active && !inDebugRepl\" } , { \"key\" : \"ctrl+enter\" , \"command\" : \"workbench.action.terminal.runSelectedText\" } , { \"key\" : \"alt+j\" , \"command\" : \"workbench.action.terminal.focus\" } , { \"key\" : \"alt+j\" , \"command\" : \"workbench.action.focusActiveEditorGroup\" , \"when\" : \"terminalFocus\" } ] The capslock block above is a workaround for bug #23991 . When in i3wm, change alt+j to alt+m for avoiding shortcut confliction. Add the following codes in ~/.config/Code/User/settings.json to customize proxy and vim extension: { \"http.proxy\" : \"http://localhost:1080\" , \"vim.easymotion\" : true , \"vim.useSystemClipboard\" : true , \"vim.normalModeKeyBindingsNonRecursive\" : [ { \"before\" : [ \";\" ], \"after\" : [ \":\" ] } ], ... } Auto completion 推荐 All Autocomplete 插件，翻译 FPP 过程中使用它对中英文的自动补全都很不错。 Auto Switch of Input Method 在Linux系统上，使用 fcitx 输入法时，首先确定是否可以用 fcitx-remote -t 切换输入法，若能正确切换，在输入法关闭的情况下执行 fcitx-remote ， 得到的结果（应该是1）作为下面 \"vim.autoSwitchInputMethod.defaultIM\" 的值： { \"vim.autoSwitchInputMethod.enable\" : true , \"vim.autoSwitchInputMethod.defaultIM\" : \"1\" , \"vim.autoSwitchInputMethod.obtainIMCmd\" : \"/usr/bin/fcitx-remote\" , \"vim.autoSwitchInputMethod.switchIMCmd\" : \"/usr/bin/fcitx-remote -t {im}\" , ... } 这样当使用 ESC 返回 normal 模式时，VSC 将自动关闭输入法。 另外 fcitx 还提供了 fcitx-remote -c 关闭输入法， fcitx-remote -o 开启输入法，通过它们可以实现 vim 中自动切换输入法。 在 Windows 系统上使用 VSC 时，可以通过 im-select 实现输入法自动切换，首先下载 im-select.exe 64位版本到 d:/apps/im-select目录下， 然后在 C:\\Users\\lee_c\\AppData\\Roaming\\Code\\User\\settings.json 文件中加入如下内容： { ... \"vim.autoSwitchInputMethod.enable\" : true , \"vim.autoSwitchInputMethod.defaultIM\" : \"1033\" , \"vim.autoSwitchInputMethod.obtainIMCmd\" : \"d:/apps/im-select/im-select.exe\" , \"vim.autoSwitchInputMethod.switchIMCmd\" : \"d:/apps/im-select/im-select.exe {im}\" } 这里 1033 是当关闭输入法时， 在 git bash （im-select 无法在 Windows cmd.exe 中运行）里执行 im-select 得到的返回值。 当中文输入法开启时，返回值为 2052. 详细方法参考 section \"Input Method\" in VSCodeVim . Frequently Used Actions Zoom in/out in editor: Ctrl +/- ; Show/hide terminal: Ctrl-backslash; Open command palette: Ctrl-Shift-p , for example you can specify the Python interpreter via inputing interpreter in the command window; Open a folder (as the project root): Ctrl-k Ctrl-o , VSC create a .vscode folder in it, and save workspace settings (for example, Python Interpreter path) in .vscode/settings.json file. Jump between opened files: Ctrl-p; Jump between editors in the same group: Ctrl-tab ; Jump between editor groups: Ctrl-1/2/3/... ; Find keyboard shortcuts of a command: Ctrl-Shift-p > open keyboard shortcuts file . Then the file Default Keybindings is opened, search in it with the action name, for example, editorgroup\\c to find all command and corresponing shortcuts; Markdown Preview Install extension \"Markdown All in One\" for VSC. After opening a markdown file, split the window, and put it in a new editor group. Thus when you edit the markdown file in the left window, the preview in the right window will change accordingly. Ref: User Interface Define Macros In haskell repl, you need put multiline codes between :{ and :} . So I defined the following macros to automate this workflow. First install multi-command pulgin. Then add the following codes into settings.json: \"multiCommand.commands\" : [ { \"command\" : \"multiCommand.runHaskellCode\" , \"interval\" : 30 , \"sequence\" : [ { \"command\" : \"workbench.action.terminal.sendSequence\" , \"args\" : { \"text\" : \":{\\u000d\" } } , \"workbench.action.terminal.runSelectedText\" , { \"command\" : \"workbench.action.terminal.sendSequence\" , \"args\" : { \"text\" : \":}\\u000d\" } } ] } ] Add the following codes in keybindings.json: { \"key\" : \"ctrl+enter\" , \"command\" : \"workbench.action.terminal.runSelectedText\" , \"when\" : \"editorTextFocus && editorLangId != haskell\" } , { \"key\" : \"ctrl+enter\" , \"command\" : \"multiCommand.runHaskellCode\" , \"when\" : \"editorTextFocus && editorLangId == haskell\" } , Note \\u000d above means the Enter key, see section Send text from a keybinding in Send text from a keybinding for details. There is also a macros plugin to build macros. But it cann't keep the command sequence correctly . View documention on hover for Haskell To show type information and documentation on mouse hover in VS Code, install HIE and Haskell Language Server : git clone https : // github . com / haskell / haskell - ide - engine --recursive cd haskell - ide - engine && make build - all This took 4~5 hours to finish (in the office of biot, 2018.11.7), with about 400MB contents downloaded and some from s3.amazon.com. So you must run this command with proxy. The final size of the folder haskell-ide-engine is about 6GB. You can delete this folder after installation (there are several hie-* executables in the ~/.local/bin foler). Then open VS Code, install the Haskell Language Server extension and reload. Now you can see the documentations of any functions, types or variables with mouse hover.","tags":"Tech","url":"http://leetschau.github.io/visual-studio-code-notes.html","loc":"http://leetschau.github.io/visual-studio-code-notes.html"},{"title":"修复Ubuntu系统中为知笔记不能使用fcitx拼音输入法问题","text":"症状： 在 Ubuntu 16.04 Server 的 i3 环境下使用 AppImage 版本的 为知笔记， 无法使用 fcitx 输入法。 解决方法： 参考 编译为知笔记客户端 的\"编译后不能输入中文的解决方案\"一节，由于为知笔记使用 Qt5 框架， 需要安装 fcitx 支持 Qt5 的相关库： sudo apt install cmake extra - cmake - modules qt5 - qmake qtbase5 - dev sudo apt install fcitx - libs - dev libfcitx - qt5 - 1 libfcitx - qt5 - dev 仍然无法使用拼音输入法，运行 fcitx-diagnose ， 查看其中 Frontends setup > qt5 部分，可知需要设置环境变量 QT_IM_MODULE=fcitx ， 所以在 ~/.xsessionrc 文件中加入如下设置： export QT_IM_MODULE=fcitx . 或者创建为知笔记的启动脚本 ~/.local/bin/wiznote： export QT_IM_MODULE = fcitx $ HOME / warez / WizNote - 2 . 5 . 9 - x86_64 . AppImage 这样就可以通过在 dmenu (快捷键 Alt-d) 中输入 wiznote 启动为知笔记了。","tags":"Tech","url":"http://leetschau.github.io/xiu-fu-ubuntuxi-tong-zhong-wei-zhi-bi-ji-bu-neng-shi-yong-fcitxpin-yin-shu-ru-fa-wen-ti.html","loc":"http://leetschau.github.io/xiu-fu-ubuntuxi-tong-zhong-wei-zhi-bi-ji-bu-neng-shi-yong-fcitxpin-yin-shu-ru-fa-wen-ti.html"},{"title":"Correlation Matrix in Python and R","text":"The following codes demonstrate how to build a dataframe through a csv file, calculating its correlation matrix and output the 10th column of the matrix: $ cat << EOF > inp.csv time,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16 2017-03-23 06:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 06:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 06:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 06:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 07:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 07:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 07:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 07:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 08:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 08:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 08:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 08:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 09:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 09:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.0,0.0,0.0 2017-03-23 09:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 09:45:00,0.0,0.40999999600000003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.43999999799999995,0.0,0.0,0.0,0.0 2017-03-23 10:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.43999999799999995,0.0,0.0,0.0,0.0 2017-03-23 10:15:00,0.0,0.40999999600000003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.43999999799999995,0.0,0.0,0.0,0.0 2017-03-23 10:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.419999987,0.0,0.0,0.0,0.0 2017-03-23 10:45:00,0.44999998799999996,0.459999979,0.0,0.39999997600000003,0.0,0.0,0.0,0.40999999600000003,0.0,0.469999999,0.0,0.50999999,0.0,0.40999999600000003,0.0,0.0 2017-03-23 11:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 11:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.0,0.0,0.0 2017-03-23 11:30:00,0.0,0.40999999600000003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.459999979,0.0,0.0,0.0,0.0 2017-03-23 11:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.0,0.0,0.0 2017-03-23 12:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.0,0.0,0.0 2017-03-23 12:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 12:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.0,0.0,0.0 2017-03-23 12:45:00,0.539999962,0.550000012,0.48999998,0.50999999,0.42999997700000003,0.459999979,0.469999999,0.5,0.469999999,0.579999983,0.5,0.599999964,0.44999998799999996,0.519999981,0.459999979,0.0 2017-03-23 13:00:00,0.5,0.5299999710000001,0.44999998799999996,0.469999999,0.0,0.40999999600000003,0.44999998799999996,0.47999998899999996,0.44999998799999996,0.539999962,0.459999979,0.5699999929999999,0.40999999600000003,0.469999999,0.419999987,0.0 2017-03-23 13:15:00,0.469999999,0.50999999,0.42999997700000003,0.44999998799999996,0.0,0.0,0.419999987,0.459999979,0.40999999600000003,0.50999999,0.43999999799999995,0.5299999710000001,0.40999999600000003,0.44999998799999996,0.0,0.0 2017-03-23 13:30:00,0.579999983,0.620000005,0.539999962,0.560000002,0.5,0.47999998899999996,0.560000002,0.5699999929999999,0.519999981,0.7199999690000001,0.589999974,0.6599999670000001,0.519999981,0.560000002,0.5299999710000001,0.0 2017-03-23 13:45:00,0.649999976,0.689999998,0.599999964,0.649999976,0.560000002,0.539999962,0.629999995,0.610000014,0.539999962,0.75999999,0.6599999670000001,0.7099999790000001,0.550000012,0.599999964,0.5699999929999999,0.0 2017-03-23 14:00:00,0.669999957,0.7199999690000001,0.599999964,0.649999976,0.539999962,0.5699999929999999,0.649999976,0.629999995,0.560000002,0.74000001,0.6599999670000001,0.729999959,0.589999974,0.629999995,0.5699999929999999,0.0 2017-03-23 14:15:00,0.729999959,0.75999999,0.689999998,0.7199999690000001,0.629999995,0.610000014,0.7199999690000001,0.699999988,0.599999964,0.829999983,0.7199999690000001,0.7999999520000001,0.639999986,0.689999998,0.639999986,0.0 2017-03-23 14:30:00,0.560000002,0.620000005,0.539999962,0.579999983,0.47999998899999996,0.47999998899999996,0.539999962,0.550000012,0.469999999,0.649999976,0.5699999929999999,0.639999986,0.519999981,0.560000002,0.5299999710000001,0.0 2017-03-23 14:45:00,0.0,0.40999999600000003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.43999999799999995,0.0,0.0,0.0,0.0 2017-03-23 15:00:00,0.40999999600000003,0.459999979,0.0,0.39999997600000003,0.0,0.0,0.0,0.0,0.0,0.469999999,0.0,0.47999998899999996,0.0,0.40999999600000003,0.0,0.0 2017-03-23 15:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.43999999799999995,0.0,0.0,0.0,0.0 2017-03-23 15:30:00,0.519999981,0.5299999710000001,0.44999998799999996,0.48999998,0.0,0.42999997700000003,0.48999998,0.47999998899999996,0.40999999600000003,0.599999964,0.47999998899999996,0.5699999929999999,0.42999997700000003,0.469999999,0.43999999799999995,0.0 2017-03-23 15:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 16:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.419999987,0.0,0.0,0.0,0.0 2017-03-23 16:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.39999997600000003,0.0,0.0,0.0,0.0 2017-03-23 16:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 16:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 17:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 17:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 17:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 17:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 18:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 18:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 18:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 18:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 19:00:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 19:15:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 19:30:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 2017-03-23 19:45:00,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 EOF $ cat << EOF > corr.py import pandas as pd df = pd.read_csv('inp.csv') df = df.set_index('time') corr = df.corr() # corr is a dataframe print(corr['x10']) # get column by name (label) print(corr.loc['x10']) # same as above print(corr.iloc[9]) # same as above but by number, 0 based index print(corr.iloc[2:3, 7:10]) # get subgroup of a dataframe, upper bound excluded print(corr.iloc[2, 7]) # get value by index number print(corr.iloc[2][7]) # same as above EOF $ python corr.py $ cat << EOF > corr.R inp <- read.csv2('inp.csv', sep = ',', row.names = 'time', dec = '.') corr <- cor(inp) # corr is a matrix print(corr[, \"x10\"]) # get column by name (label) print(corr[, 10]) # same as above but by index number, 1 based index, print(corr[3:4, 8:11]) # get subgroup by index number, upper bound included print(corr[3, 8]) # get value by index number EOF $ Rscript corr.R It's easy to see for dataframe and matrix manipulation, syntax of R is much more concise and consistent than that of Python.","tags":"Tech","url":"http://leetschau.github.io/correlation-matrix-in-python-and-r.html","loc":"http://leetschau.github.io/correlation-matrix-in-python-and-r.html"},{"title":"Interactive Programming for Spark","text":"Interactive programming , IAP for short, is the upgrade version of REPL, which meets Immediate Feedback Principle . Synonyms: on-the-fly-programming, just in time programming, conversational programming. IAP means when the programmer works on the program file, every time the file is saved, the toolchain provides on-the-fly feedbacks which are helpful for ongoing development. IAP of each language is implemented on a specific toolchain (mostly implemented in the same language). For example, ghcid for Haskell, RStudio for R, Spyder for Python, and sbt for Scala. Unit Test with FunSuite Based on Funsuite of ScalaTest , and spark-testing-base , we can write unit test of Spark with SparkContext : $ take sparkdemo $ mkdir - p src / { main / { resources , scala }, test / { resources , scala }} $ cat << EOF > src / test / scala / Test1 . scala import org.scalatest.FunSuite import com.holdenkarau.spark.testing.SharedSparkContext class Test1 extends FunSuite with SharedSparkContext { test ( \"test with SparkContext\" ) { val list = List ( 1 , 2 , 3 , 4 ) val rdd = sc . parallelize ( list ) assert ( rdd . count === list . length ) } } EOF $ cat << EOF > build . sbt import scala.sys.process._ name : = \"Simple Project\" version : = \"0.0.1\" scalaVersion : = \"2.11.8\" libraryDependencies += \"org.apache.spark\" %% \"spark-sql\" % \"2.3.1\" libraryDependencies += \"com.holdenkarau\" %% \"spark-testing-base\" % \"2.3.1_0.10.0\" % \"test\" fork in Test : = true parallelExecution in Test : = false javaOptions ++= Seq ( \"-Xms512M\" , \"-Xmx2048M\" , \"-XX:MaxPermSize=2048M\" , \"-XX:+CMSClassUnloadingEnabled\" ) lazy val submit = taskKey [ Unit ]( \"submit to Spark\" ) submit : = { \"spark-submit --class SimpleApp target/scala-2.11/simple-project_2.11-0.0.1.jar\" ! } addCommandAlias ( \"rs\" , \"; clean; package; submit\" ) EOF $ sbt sbt : Simple Project > ~ test spark-testing-base provides SharedSparkContext , so there's no need to initialize and destroy SparkSession manually. spark-testing-base also has many useful traits, such as DataFrameGenerator . With it and ScalaCheck , you can implemente property-based test, like QuckCheck in Haskell. See its wiki for the full list. Integration Test You can run Spark application line by line in spark-shell or pyspark shell. But the following implementation is file based, which means in each loop of the iteration, a complete Spark job (a jar file) is submitted to Spark cluster and return a result. With the scaffold above, add a source file and run Integration test with user defined command rs (run spark): $ cat << EOF > src / main / scala / SimpleApp . scala import org.apache.spark.sql.SparkSession object SimpleApp { def main ( args : Array [ String ]) { val logFile = \"/home/leo/apps/spark-2.2.0-bin-hadoop2.7/README.md\" val spark = SparkSession . builder . appName ( \"Simple Application\" ) . getOrCreate () val logData = spark . read . textFile ( logFile ) . cache () val numAs = logData . filter ( line => line . contains ( \"a\" )) . count () val numBs = logData . filter ( line => line . contains ( \"b\" )) . count () println ( s \"Lines with a: $numAs, Lines with b: $numBs\" ) spark . stop () } } EOF $ sbt sbt : Simple Project > ~ rs Now change texts in file SimpleApp.scala and save, sbt will clean the project build, regenerate the jar file and submit to Spark. P.S.: if the contents in build.sbt is changed, run reload in sbt console. Ref: FunSuite","tags":"Tech","url":"http://leetschau.github.io/interactive-programming-for-spark.html","loc":"http://leetschau.github.io/interactive-programming-for-spark.html"},{"title":"Install Tensorflow and Keras on Ubuntu","text":"Install 由于 R 的安装命令 install_keras() 会创建新的 conda environment r-tensorflow ， 需首先确认 conda 在当前系统路径下： $ whereis conda conda: /home/leo/apps/miniconda3/bin/conda $ cat ~/.zshenv ... export PATH = \" $HOME /apps/miniconda3/bin: $PATH \" 在 R console 中运行： chooseCRANmirror () # choose the mirror in Beijing install . packages ( ' curl ' ) # if it ' s not installed yet install . packages ( ' keras ' ) Sys . setenv ( http_proxy = ' http://localhost:1080 ' ) # tensorflow download site is blocked Sys . setenv ( https_proxy = ' http://localhost:1080 ' ) library ( keras ) install_keras () 这里 install_keras() 是幂等的，如果安装失败了（例如网络不通），可以再次安装。 为 conda 环境添加 IPython: . activate r - tensorflow conda install ipython Verify in R console 执行下面的脚本验证 keras 和 tensorflow 安装成功（来自 R interface to Keras ）： $ . activate r - tensorflow $ R Sys . setenv ( http_proxy = ' http://localhost:1080 ' ) # dataset download site is blocked Sys . setenv ( https_proxy = ' http://localhost:1080 ' ) library ( keras ) mnist <- dataset_mnist () x_train <- mnist $ train $ x y_train <- mnist $ train $ y x_test <- mnist $ test $ x y_test <- mnist $ test $ y # reshape dim ( x_train ) <- c ( nrow ( x_train ) , 784 ) dim ( x_test ) <- c ( nrow ( x_test ) , 784 ) # rescale x_train <- x_train / 255 x_test <- x_test / 255 y_train <- to_categorical ( y_train , 10 ) y_test <- to_categorical ( y_test , 10 ) model <- keras_model_sequential () model %>% layer_dense ( units = 256 , activation = \" relu \" , input_shape = c ( 784 )) %>% layer_dropout ( rate = 0 . 4 ) %>% layer_dense ( units = 128 , activation = \" relu \" ) %>% layer_dropout ( rate = 0 . 3 ) %>% layer_dense ( units = 10 , activation = \" softmax \" ) summary ( model ) model %>% compile ( loss = \" categorical_crossentropy \" , optimizer = optimizer_rmsprop () , metrics = c ( \" accuracy \" ) ) history <- model %>% fit ( x_train , y_train , epochs = 30 , batch_size = 128 , validation_split = 0 . 2 ) plot ( history ) model %>% evaluate ( x_test , y_test , verbose = 0 ) model %>% predict_classes ( x_test ) Run Keras and Tensorflow in RStudio 不做任何预处理情况下，在 RStudio 中执行上面的脚本， 执行到 mnist <- dataset_mnist() 时报 找不到keras模块 错误， 这是由于 RStudio 中默认的 Python 环境不是 keras 包连接的 tensorflow backend 使用的环境， 并且由于 conda 并没有出现在系统级 $PATH 中（通过 Sys.getenv('PATH') 确认）， 导致 RStudio 中执行 use_condaenv('r-tensorflow') 并不会生效（尽管也没有报错）。 解决方法是手工调整 $PATH 中路径的内容和顺序，保证按 tensorflow > conda > system 顺序排列： Sys . setenv ( PATH = paste ( ' /home/leo/apps/miniconda3/envs/r-tensorflow/bin:/home/leo/apps/miniconda3/bin ' , Sys . getenv ( ' PATH ' ) , sep = ' : ' )) 再执行上面 R console 中的验证脚本（不需要执行 use_condaenv() 函数）。 相比在 R console 中执行代码，在 RStudio 中做深度学习可以在 Viewer 窗口中实时观察 模型训练进展。 如果仍然报错，可以手工加载 conda 路径到 $PATH 中，执行 use_condaenv() ， 再手工调整 $PATH 中路径顺序，并用 reticulate 包提供的 py_config() 验证： Sys . setenv ( PATH = paste ( ' /home/leo/apps/miniconda3/bin ' , Sys . getenv ( ' PATH ' ) , sep = ' : ' )) library ( reticulate ) use_condaenv ( ' r-tensorflow ' ) # fix path order error : Sys . setenv ( PATH = ' /home/leo/apps/miniconda3/envs/r-tensorflow/bin:/home/leo/apps/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/leo/.local/bin ' ) py_config () # verify Note: 如果在 RStudio 中执行 system('conda env list') ， 会发现当前 conda 环境仍然是 base ， 这是由于 system() 函数中的系统环境不是 keras 包连接的 tensorflow backend 使用的环境， 所以用 system('. activate r-tensorflow') 加载环境也是无效的。","tags":"Tech","url":"http://leetschau.github.io/install-tensorflow-and-keras-on-ubuntu.html","loc":"http://leetschau.github.io/install-tensorflow-and-keras-on-ubuntu.html"},{"title":"Apache Spark Architecture and Runtime","text":"Spark 的整体架构和关键概念 参考 Cluster Mode Overview ， 当一个应用在 Spark 集群上运行时，总体来说包含两大部分： 基础设施集群和Spark Application。 Spark 目前支持的基础设施集群包括 Standalone（Spark 内置集群）， Apache Mesos, Hadoop YARN 和 Kubernetes。 基础设施集群包括两部分： Cluster manager: 运行在作为集群管理节点的主机上； Worker node: 承担具体计算工作的主机节点，被cluster manager 管理； 基础设施集群作为计算基础设施是持久存在的，与 Spark Application 的生命周期无关。 Spark Application 包含用户定义的计算过程，例如一个 Java/Scala jar 或者 python/R script， 包括 driver program 和 executor 两部分， 它们都是 JVM process，生命周期与 Spark Application 的生命周期一致。 spark-shell 和 pyspark 也是 Spark Application。 其他主要概念包括（参考 \"Glossary\" in Cluster Mode Overview ）： Driver program: 负责运行Spark Application 的 main 方法并创建 SparkContext， Driver 还内置了一个 web server （下面简称为 4040）， 监听它所在主机的 4040 端口，下面将结合它分析 Spark Application 的逻辑运行过程。 SparkContext: 由 driver program 创建，负责调度管理整个 Spark Application 各部分通信； SparkSession: SparkSession 是 Spark 2.x 中新出现的概念，由 Spark 1.x 中的 SparkContext 和 SQLContext 合并而来，为用户提供更一致的 API。 SparkSession 对象内部包含一个 SparkContext 对象，负责与 Spark cluster 通讯方面的工作； Executor: 运行在基础设施集群的一台 worker node 上，完成本地计算任务。 它可以同时执行 spark.executor.cores 个 task，默认值是主机的逻辑CPU数量， 即 lscpu 中 CPU(s) 的值，等于 \\(Sockets \\times Cores_per_socket \\times Thread_per_core\\) . Spark Application 的物理运行过程 大体分为 client request, launch, execution, completion 几个阶段，详细参考 \"The Life Cycle of a Spark Application (Outside Spark)\" in [SDG15]. Client Request: 用户将 Spark app 从 client 发给 cluster manager， cluster manager 选择集群中的一个节点做 Spark driver；之后 client 执行完毕退出。 Launch: Spark driver 开始执行用户程序，首先初始化 SparkContext， 由 SparkContext 连接 cluster manager (通过用户指定的 --master 参数）， 将用户指定的 executor 数量和其他配置信息发给它用来创建 executors process， cluster manager 按照要求在 worker node 上创建好 executors 后，将它们的位置信息 返回给 SparkContext，至此 Spark cluster 创建完毕。 Execution: 具体计算工作在这一阶段完成，由 Spark driver 协调各个节点， 分配计算任务，接收任务执行结果。此阶段的信息和数据传输发生在 Spark cluster 内部，与基础设施集群无关。 Completion: Spark driver 执行结束，返回 成功/失败 结果，cluster manager 负责关闭 与此 Spark driver 相关的 executors. Spark Application 的逻辑运行过程 样例程序 (in Python): $ pyspark df1 = spark.range ( 2 , 10000000 , 2 ) df2 = spark.range ( 2 , 10000000 , 4 ) step1 = df1.repartition ( 5 ) step12 = df2.repartition ( 6 ) step2 = step1.selectExpr ( \"id * 5 as id\" ) step3 = step2.join ( step12, [ \"id\" ]) step4 = step3.selectExpr ( \"sum(id)\" ) step4.collect () # 2500000000000 启动 pyspark 后，就可以在 http://localhost:4040 查看 app 运行情况了， 这时 Jobs 和 Stages 页面均为空， Executors 页面显示有一个 executor， ID 为 driver ，监听端口 33869，在系统命令行中输入 jps 可以看到一个名为 SparkSubmit 的进程，PID为16270，通过 netstat 命令可以看到正是这个进程监听 33869端口。 运行 step4.collect() 前面的代码，可以看到4040页面上 Jobs 和 Stages 始终是空的， 表示 job 没有实际执行。 执行 step4.collect() ，4040 Jobs 页面上出现一条ID为0的记录 （由于 collect() 方法是 action，前面的操作都是 transformation， 表明一个 job 对应一个 action)。 点击 job0 后出现 Details for Job 0 页面，包含6个 Completed Stages ， ID 为 0 ~ 5。页面上的 DAG Visualization 图示了这6个 stage 之间的继承关系。 其中 stage0 和 stage1 对应 df1 = ... 和 df2 = ... 两行， 二者各包含8个task，stage0 的 Shuffle Write 为24MB，stage1为12MB， 这是因为 df1 的长度是 df2 的二倍。 由于代码是在单机 Spark 2.2 的 pyspark REPL 中运行， 机器的逻辑CPU数为8，所以一个 stage 默认的（并行）task 数为8。 点击 stage0 进入 Details for Stage 0 页面，其中的 Shuffle Write Size / Records 的值为 24.0 MB / 4999999 ，与 df1 的长度吻合，这些 records 被平均分配给了 8个 task，每个 task 的 Shuffle Write Size / Records 都是 1/8. Stage1 对应的 df2 的长度是 df1 的一半，所以处理的 records 也只有 stage0 的一半。 从 DAG 图可知 stage2 从 stage1 变化而来，stage2 的 Shuffle Read 和 stage1 的 Shuffle Write 都是 12MB，也印证了这两个 stage 的继承关系， 所以 stage2 对应代码行是 step12 = df2.repartition(6) ，所以它包含6个 task。 Stage3 对应 step1 = df1.repartition(5) 和 step2 = step1.selectExpr(...) ， 包含5个 task。 Stage4 对应 step3 = step2.join(...) ，所以父节点是 stage3 和 stage2， 所以它的 shuffle read 值 (38.6MB) 是两个父节点各自 shuffle write 值 (13MB 和 25.6MB) 的和。 这个 stage 有200个 task，是因为 spark.sql.shuffle.partitions 的默认值是200。 关于这个参数（以及其他配置参数）可以参考 Spark SQL, DataFrames and Datasets Guide 。 Stage5 对应 step4 = step3.selectExpr(...) 和 step4.collect() ， 前者是一个 transformation，后者是action，所以两个归入一个 stage. 逻辑架构中的关键概念 Job: 一个 job 包含一个或多个 stages，一个 job 对应一个 action ； Stage: 一个 stage 包含一组可并行计算的 tasks，一个 stage 对应一次 shuffle； Shuffle: 数据在 executor 间移动，叫做 shuffle，例如初始化 RDD，对 RDD 重新分区 (repartition), join, collect 都会引起 shuffle 动作； task Spark 的 task 包含如下特征： 一个 task 只运行在一个 executor 上； 一个 task 在一个 RDD 中的一个 partition 上执行一组 transformations; 一个 task 可以使用 spark.task.cpus 个 CPU； 同一个 stage 中不同 task 是并行执行的； Task 的执行过程： Driver 序列化一个 function 对象，并发送给 executor，executor 收到后做反序列化， 并在某个 partition 上执行之。 Ref: [SDG15]: Chapter 15 of \"How Spark Runs on a Cluter, in Spark: the Definitive Guide\" by Bill Chambers. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/apache-spark-architecture-and-runtime.html","loc":"http://leetschau.github.io/apache-spark-architecture-and-runtime.html"},{"title":"View R Source Codes","text":"The basic method for view a function's source code is input its name in R console without paranthesis: > mean function ( x , ...) UseMethod ( \"mean\" ) < bytecode : 0 x611edd8 > < environment : namespace : base > The above output means this function is a generic function, which represents a group of functions. You can list this group with methods() function: > methods ( mean ) [ 1 ] mean . Date mean . default mean . difftime mean . POSIXct mean . POSIXlt see ' ?methods ' for accessing help and source code The final step is use getAnywhere() to view the souce codes (here we choose the function mean.default ): > getAnywhere ( mean . default ()) A single object matching ‘ mean . default ' was found It was found in the following places package : base registered S3 method for mean from namespace base namespace : base with value function ( x , trim = 0 , na . rm = FALSE , ... ) { if ( ! is . numeric ( x ) && ! is . complex ( x ) && ! is . logical ( x )) { warning ( \" argument is not numeric or logical: returning NA \" ) return ( NA_real_ ) } if ( na . rm ) x <- x [ ! is . na ( x ) ] if ( ! is . numeric ( trim ) || length ( trim ) != 1 L ) stop ( \" 'trim' must be numeric of length one \" ) n <- length ( x ) if ( trim > 0 && n ) { if ( is . complex ( x )) stop ( \" trimmed means are not defined for complex data \" ) if ( anyNA ( x )) return ( NA_real_ ) if ( trim >= 0 . 5 ) return ( stats :: median ( x , na . rm = FALSE )) lo <- floor ( n * trim ) + 1 hi <- n + 1 - lo x <- sort . int ( x , partial = unique ( c ( lo , hi ))) [ lo : hi ] } . Internal ( mean ( x )) } < bytecode : 0 x611e5e0 > < environment : namespace : base > But this method doesn't work for stats::hatvalues function. Read the doc of hatvalues you can find it's just a wrapper of lm.influence , you can verify this through the following codes: > mdl <- lm ( hp ~ cyl + mpg , data = mtcars ) > hats <- hatvalues ( mdl ) > infs <- lm.influence ( mdl ) > sum ( hats - infs $ hat ) 0 Get the source of lm.influence() : getAnywhere(lm.influence) You can see the res$hat in the source codes is just the \\(h\\) vector. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/view-r-source-codes.html","loc":"http://leetschau.github.io/view-r-source-codes.html"},{"title":"File Watcher on Linux","text":"When writing the following Haskell script (saved in Main.hs), module Main where main :: IO () main = do input <- readFile \" input.txt \" print $ countWords input -- Counts the number of words per line countWords input = map ( length . words ) ( lines input ) I have to repeat the following process again and again: save the script file; run stack build --exec Code0101 or stack build && stack exec Code0101 edit the file; back to step 1 ... I need a tool to automate this process, and let me concentrate on coding. ghcid ndmitchell/ghcid can reload your script after file changed, and run script via the --test argument. Install with stack install ghcid and open an editor in the left window, run ghcid --test \"main\" in the right window and that's all. For a bare Haskell script (instead of files in a stack project), and a system level ghci is installed, you need start it with ghcid \"--command=stack ghci solutions19.hs\" --test main . It is much faster than entr and watchman but only for Haskell. See ghcid for the win! for details. entr entr is a tool running arbitrary commands when files change. Download its source codes (entr-4.1.tar.gz) from its website , extract and install: . / configure make test sudo make install Now open your editor in the left window, run ls *.hs | entr -r stack build --exec Code0101 in the right window and that's all. With the -r option, you can press SPACE to terminate the current running command (here it's stack build and restart it immediately as if a file change event had occurred. See man entr for details. Press q to quit the watcher. See stack build --file-watch-post= for some examples for Haskell development. The following scenario is running a PySpark project pv-current , which contains several Python scripts, on a remote host cdh1 . You can copy the project folder onto cdh1, edit the scripts there. But the vim on cdh1 is very primitive. You can't comment/uncomment block codes, copy/paste from clipboard, ... You can edit the file with your local vim with vi scp://cdh1/docs/pv-current/main.py . But when can want to edit another file, you have to quit the editor and run another command. Meanwhile you have no local copy of the modified version. With entr you can easily edit the local files with all benefits of a local editor and sync them automatically to remote host once the file changes are saved: ls *.py | entr -c rsync -av *.py cdh1:~/docs/pypv Here the rsync command runs quickly so there's no need to use -r option. The -c option clears the screen every time the command ( rsync ) is invoked. Note: rsync must be installed on the remote server, or the rsync command will fail: rsync error: remote command not found (code 127) . watchman watchman watch file changes and run some actions when watching file changes. sudo apt install libtool git clone https : // github . com / facebook / watchman . git cd watchman git checkout v4 . 9 . 0 # the latest stable release . / autogen . sh . / configure make sudo make install pip install pywatchman However watchman is very complicated. So there's a watchman-make shipped with watchman to make thing easier. Now it's incompatible with Python3, but you can fix it like this: search basestring in $(which watchman-make), and replace the line if isinstance(values, basestring): with: if pywatchman . compat . PYTHON3 : STRING_TYPES = ( str , bytes ) else : STRING_TYPES = ( str , unicode ) if isinstance ( values , STRING_TYPES ) : Run the following command in the project root folder: watchman-make -p '*.hs' --make='stack build && stack exec' -t 'Code0101' and open an editor. Now every time you change the *.hs file and save, stack will build and run. But you have to delete the watch manually: watchman watch-del \"/home/leo/docs/bookSourceCodes/Haskell-Data-Analysis-Cookbook\" Ref: Installation of watchman [watchman-make not working on python3](https://github.com/facebook/watchman/issues/631( Note: schell/steeloverseer is another candidate. But after I ran stack install steeloverseer on Ubuntu 16.04, the following error raised: / tmp / stack11108 / steeloverseer - 2 . 0 . 2 . 0 / app / Main . hs : 258 : 5 : error : • The constructor ‘ FSNotify . Added ' should have 3 arguments , but has been given 2 • In the pattern : FSNotify . Added path _ In a case alternative : FSNotify . Added path _ -> S . yield ( FileAdded ( go cwd path )) In the second argument of ‘ S . for ', namely ‘ ( \\ case FSNotify . Added path _ -> S . yield ( FileAdded ( go cwd path )) FSNotify . Modified path _ -> S . yield ( FileModified ( go cwd path )) FSNotify . Removed _ _ -> pure ()) ' | 258 | FSNotify . Added path _ -> S . yield ( FileAdded ( go cwd path )) | &#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94;&#94; Looks like API incompatible.","tags":"Tech","url":"http://leetschau.github.io/file-watcher-on-linux.html","loc":"http://leetschau.github.io/file-watcher-on-linux.html"},{"title":"micro:bit notes","text":"Installation of IDE For Windowns 10, download the installer of mu-editor and install it. For Linux, run the following commands: conda create - n microbit pip . activate microbit pip install mu - editor 它依赖的包体积比较大，比如 PyQt5 120MB 多，需要较快的网络连接。 安装完成后启动： . activate microbit mu - editor 常用术语和概念 AAA battery: 7号电池（标号完整列表见 电池列表 ）， micro:bit 可用两节7号电池作为电源，电源接口在板子背面右上角； GPIO: general-purpose input/output ， 自定义输出输出，具体功能由用户在运行时确定； Analog Input and Output: 模拟输出和输出，与digital input and output相对； Potentiometer: 电位计、旋转电位计、 电位器 ， 共3个引脚，两侧的分别接高电压和地线，中间的接输出， 随着旋钮的旋转，中间的输出值不断变化，所以是一种模拟输出部件； 串行和并行传输：并行传输效率高，但无法远距离传输（信号线间的串音干扰）， 成本高（导线数量多，消耗功率大），占用空间大（导线和接口体积大）， 参考 什么是并行传输、串行传输、异步传输？ ； IC: integrated circuit，集成电路； Serial Communication and UART: I2C: Inter-integrated circuit ， 一种串行通讯协议，包含一条数据线（SDA，micro:bit 引脚：P20） 和一条时钟线（SCL，micro:bit 引脚：P19）， 参考 巩固理解I2C协议(MCU，经验) ；","tags":"Tech","url":"http://leetschau.github.io/microbit-notes.html","loc":"http://leetschau.github.io/microbit-notes.html"},{"title":"在Linux Mint 19上安装中文输入法","text":"在 Mint 19 图形桌面环境中安装中文输入法： $ sudo apt install fcitx fcitx-config-gtk fcitx-googlepinyin \\ fcitx-frontend-qt5 fcitx-ui-classic fcitx-libs fcitx-frontend-gtk3 $ cat << EOF > ~/.xprofile export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx EOF 然后在 \"Session and Startup\" 中添加启动项 fcitx . 重启系统后，命令行、GUI文本编辑器、Wiznote中使用中文输入法正常。 2018.9.30日在 Mint 19 Cinnamon 上验证，11.11在 Mint 19 Xfce 上验证。 若不能正常运行，可以通过运行 fcitx-diagnose 查找原因。 另外可参考2018.9.27日wiznote日记。 以下仅作为历史内容备份。 上午在 Linux Mint 19 Xfce 系统上安装中文输入法， 首先下载了搜狗拼音 for Linux 的 deb 包，安装后发现在WPS中无法使用， 网上查找了一番，说在启动文件（例如/usr/bin/wps）里增加如下内容： export XMODIFIERS = \"@im=fcitx\" export QT_IM_MODULE = \"fcitx\" export GTK_IM_MODULE = \"fcitx\" 但添加后WPS中仍然无法启动输入法。 接下来用 apt search fcitx 搜出所有与 fcitx 相关的包，找与界面显示有关的装上，安装后效果： $ dpkg - l | grep fcitx ii fcitx 1 : 4 . 2 . 9 . 6 - 1 all Flexible Input Method Framework ii fcitx - bin 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - essential binaries ii fcitx - config - common 0 . 4 . 10 - 1 all graphic Fcitx configuration tool - common files ii fcitx - config - gtk 0 . 4 . 10 - 1 amd64 graphic Fcitx configuration tool - Gtk + 3 version ii fcitx - data 1 : 4 . 2 . 9 . 6 - 1 all Flexible Input Method Framework - essential data files ii fcitx - frontend - all 1 : 4 . 2 . 9 . 6 - 1 all Flexible Input Method Framework - frontends metapackage ii fcitx - frontend - gtk2 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - GTK + 2 IM Module frontend ii fcitx - frontend - gtk3 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - GTK + 3 IM Module frontend ii fcitx - frontend - qt4 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - Qt4 IM Module frontend ii fcitx - frontend - qt5 : amd64 1 . 1 . 1 - 1 build3 amd64 Free Chinese Input Toy of X - Qt5 IM Module frontend ii fcitx - libs 1 : 4 . 2 . 9 . 6 - 1 all Flexible Input Method Framework - metapackage for libraries ii fcitx - module - dbus 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - D - Bus module and IPC frontend ii fcitx - module - kimpanel 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - KIMPanel protocol module ii fcitx - module - x11 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - X11 module and XIM frontend ii fcitx - modules 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - core modules ii fcitx - table - all 1 : 4 . 2 . 9 . 6 - 1 all Flexible Input Method Framework - tables metapackage ii fcitx - tools 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - various tools ii fcitx - ui - classic 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - Classic user interface ii libfcitx - config4 : amd64 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - configuration support library ii libfcitx - core0 : amd64 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - library of core functions ii libfcitx - gclient1 : amd64 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - D - Bus client library for Glib ii libfcitx - qt0 : amd64 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - Meta package for Qt library ii libfcitx - qt5 - 1 : amd64 1 . 1 . 1 - 1 build3 amd64 Free Chinese Input Toy of X - D - Bus client libraries for Qt5 ii libfcitx - qt5 - dev : amd64 1 . 1 . 1 - 1 build3 amd64 Free Chinese Input Toy of X - Devel files for libfcitx - qt5 ii libfcitx - utils0 : amd64 1 : 4 . 2 . 9 . 6 - 1 amd64 Flexible Input Method Framework - utility support library $ dpkg - l | grep sogou ii sogoupinyin 2 . 2 . 0 . 0108 amd64 Sogou Pinyin Input Method 安装后需要重启系统（logout-login无效），就可以使用安装好的输入法了。 总结 首先执行下面的命令安装fcitx框架： sudo apt install fcitx fcitx - bin fcitx - config - common fcitx - config - gtk \\ fcitx - data fcitx - frontend - all fcitx - frontend - gtk2 fcitx - frontend - gtk3 \\ fcitx - frontend - qt4 fcitx - frontend - qt5 fcitx - libs fcitx - module - dbus \\ fcitx - module - kimpanel fcitx - module - x11 fcitx - modules fcitx - table - all \\ fcitx - tools fcitx - ui - classic libfcitx - config4 libfcitx - core0 \\ libfcitx - gclient1 libfcitx - qt0 libfcitx - qt5 - 1 libfcitx - qt5 - dev libfcitx - utils0 然后安装任何一种中文输入法，比较好用的包括 fcitx-googlepinyin , fcitx-sunpinyin （install with apt ）或者搜狗拼音（需要下载deb包）等。 总的来说 fcitx 平台上的输入法选择比 ibus 上的要多， 后者似乎只有 ibus-sunpinyin 比较好用。","tags":"Tech","url":"http://leetschau.github.io/zai-linux-mint-19shang-an-zhuang-zhong-wen-shu-ru-fa.html","loc":"http://leetschau.github.io/zai-linux-mint-19shang-an-zhuang-zhong-wen-shu-ru-fa.html"},{"title":"Python Generator Reuse","text":"The following script demonstrates the reuse of Python generator objects: cat << EOF > tee_demo . py import itertools dat = (( x + 3 ) * 2 for x in range ( 10 )) g1 , g2 , g3 = itertools . tee ( dat , 3 ) print ( f 'next(g1) = {next(g1)}' ) print ( f 'next(g2) = {next(g2)}' ) print ( f 'next(g3) = {next(g3)}' ) print ( f 'next(g3) = {next(g3)}' ) print ( f 'next(g3) = {next(g3)}' ) print ( f 'next(g1) = {next(g1)}' ) print ( f 'next(g2) = {next(g2)}' ) print ( 'g1 and g2 are consistent after g3 advancing' ) print ( f 'next(g3) = {next(g3)}' ) print ( f 'next(dat) = {next(dat)}' ) print ( f 'next(dat) = {next(dat)}' ) print ( f 'next(g3) = {next(g3)}' ) print ( f 'next(g1) = {next(g3)}' ) print ( f 'next(g2) = {next(g3)}' ) print ( 'g1,g2,g3 are unconsistent after dat advancing' ) dat2 = (( x + 3 ) * 2 for x in range ( 10 )) c1 , c2 , c3 = itertools . tee ( dat2 , 3 ) print ( f 'next(c1) = {next(c1)}' ) print ( f 'next(c2) = {next(c2)}' ) print ( f 'next(c3) = {next(c3)}' ) print ( f 'next(c1) = {next(c1)}' ) print ( f 'next(c1) = {next(c1)}' ) print ( f 'next(c1) = {next(c1)}' ) print ( f 'next(c2) = {next(c2)}' ) print ( f 'next(c3) = {next(c3)}' ) print ( 'c1,c2,c3 keep consistent when dat2 untouched' ) EOF $ python tee_demo . py next ( g1 ) = 6 next ( g2 ) = 6 next ( g3 ) = 6 next ( g3 ) = 8 next ( g3 ) = 10 next ( g1 ) = 8 next ( g2 ) = 8 g1 and g2 are consistent after g3 advancing next ( g3 ) = 12 next ( dat ) = 14 next ( dat ) = 16 next ( g3 ) = 18 next ( g1 ) = 20 next ( g2 ) = 22 g1 , g2 , g3 are unconsistent after dat advancing next ( c1 ) = 6 next ( c2 ) = 6 next ( c3 ) = 6 next ( c1 ) = 8 next ( c1 ) = 10 next ( c1 ) = 12 next ( c2 ) = 8 next ( c3 ) = 8 c1 , c2 , c3 keep consistent when dat2 untouched It's also a good explanation of the following citation from the official documents of itertools.tee : Once tee() has made a split, the original iterable should not be used anywhere else; otherwise, the iterable could get advanced without the tee objects being informed. For this example, the above sentence can be rewritten as: Once tee() has made a split, the original iterable dat should not be used anywhere else; otherwise, the iterable could get advanced without the tee objects ( g1, g2, g3 ) being informed. Note: the fstring in print() function is a new language feature in Python 3.6.","tags":"Tech","url":"http://leetschau.github.io/python-generator-reuse.html","loc":"http://leetschau.github.io/python-generator-reuse.html"},{"title":"Install R Packages from Nearest CRAN Mirror","text":"When installing packages in R, you can use chooseCRANmirror(graphics=FALSE) to choose the nearest mirror. For example, in Beijing, China, you can choose any one in China mainland.","tags":"Tech","url":"http://leetschau.github.io/install-r-packages-from-nearest-cran-mirror.html","loc":"http://leetschau.github.io/install-r-packages-from-nearest-cran-mirror.html"},{"title":"Typing System in Python 3","text":"Install mypy with conda install -c anaconda-platform mypy , vim plugin 'w0rp/ale' (asynchronous lint engine, which embed mypy into vim) and 'python-mode/python-mode' (see dsnot Python IDE based on vim ). The following codes demonstrates how mypy find typing incompatibility before running the code: $ cat << EOF > test . py from typing import Iterable def mean ( items : Iterable ) -> float : return sum ( items ) / len ( items ) EOF $ mypy test . py test . py : 5 : error : Argument 1 to \"len\" has incompatible type Iterable [ Any ]; expected \"Sized\" Another example based on codes in chapter 10 of \"Functional Python Programming\", 2nd edition by Steve Lott: Save the following codes into typecheck.py : from typing import ( Callable , Iterable , Any , TypeVar , Dict , Iterator , List , Tuple , cast ) from functools import reduce from operator import add from collections import defaultdict from itertools import groupby T = TypeVar ( 'T' ) def map_reduce ( mapf : Callable , reducef : Callable , source : Iterable ) -> Any : return reduce ( reducef , map ( mapf , source )) def mr2 ( mapf : Callable [[ T ], T ], reducef : Callable [[ T , T ], T ], source : Iterable [ T ]) -> T : return reduce ( reducef , map ( mapf , source )) data = [ 1 , 2 , 3 , 5 ] res = map_reduce ( lambda x : x * 10 , add , data ) print ( res ) res = mr2 ( lambda x : x * 10 , add , data ) print ( res ) K = str # means \"key\" D = Tuple [ K , float ] inp : List [ D ] = [ ( '4' , 6.1 ), ( '1' , 4.0 ), ( '2' , 8.3 ), ( '2' , 6.5 ), ( '1' , 4.6 ), ( '2' , 6.8 ), ( '3' , 9.3 ), ( '2' , 7.8 ), ( '2' , 9.2 ), ( '4' , 5.6 ), ( '3' , 10.5 ), ( '1' , 5.8 ), ( '4' , 3.8 ), ( '3' , 8.1 ), ( '3' , 8.0 ), ( '1' , 6.9 ), ( '3' , 6.9 ), ( '4' , 6.2 ), ( '1' , 5.4 ), ( '4' , 5.8 )] def partition ( source : Iterable [ D ], key : Callable [[ D ], K ] = lambda x : cast ( K , x ) ) -> Iterable [ Tuple [ K , List [ float ]]]: pd : Dict [ K , List [ float ]] = defaultdict ( list ) for item in source : pd [ key ( item )] . append ( item [ 1 ]) for k in sorted ( pd ): yield k , pd [ k ] for key , group_iter in partition ( inp , key = lambda x : x [ 0 ]): print ( key , list ( group_iter )) def partition_s ( source : Iterable [ D ], key : Callable [[ D ], K ] = lambda x : cast ( K , x ) ) -> Iterable [ Tuple [ K , Iterator [ D ]]]: return groupby ( sorted ( source , key = key ), key ) res = partition_s ( inp , key = lambda x : x [ 0 ]) for key , groupIter in partition_s ( inp , key = lambda x : x [ 0 ]): print ( key , list ( groupIter )) If you change T = TypeVar('T') to T = str , there will be an 'incompatible type ... error marked on function mr2`. The following codes shows the function of typing.cast : >>> from typing import cast >>> cast ( float , 3 ) 3 >>> type ( cast ( float , 3 )) int It returns the argument (here it's 3) itself. And tell the type checker \"I am a float variable\". While at runtime the Python interpreter will simply ignore the cast function and treat 3 as an integer.","tags":"Tech","url":"http://leetschau.github.io/typing-system-in-python-3.html","loc":"http://leetschau.github.io/typing-system-in-python-3.html"},{"title":"NeoVim Notes","text":"On Linux Mint 18 Health check Run :checkhealth and read the warnings and advices. Python support Add the following scripts into $MYVIMRC: let g : python_host_prog = '/usr/bin/python2' let g : python3_host_prog = '/home/leo/apps/miniconda3/bin/python' Install neovim plugin for both Python 2 & 3: sudo pip2 . 7 install neovim pip install neovim 使用不同的配置文件 neovim 作为不同语言的编辑器需要不同的语言插件，放在一起容易冲突，也不方便排查错误， 可以使用 -u 选项加载不同的配置文件实现不同配置的分离，例如使用专门为 Hy 代码编写的配置文件： vi - u ~/ . config / nvim / init . hy . vim 或者： export MYVIMRC =~/ . config / nvim / init . hy . vim vi 不同的配置文件中，插件安装目录最好分开，防止互相干扰（例如一个配置中执行 :PlugClean 会删掉其他配置安装的插件），实现方法是在配置文件中指明 vim-plug 的插件安装目录： call plug#begin('~/.vim/plugged-hy') . 例如下面是为 Coconut 配置的例子： $ mkdir ~/.config/nvim/coconut $ cd ~/.config/nvim/coconut $ mkdir plugged $ cat << EOF > init.coco.vim ... call plug#begin('~/.config/nvim/coconut/plugged') ... Plug 'manicmaniac/coconut.vim' ... EOF $ vi -u ./init.coco.vim :PlugInstall :q $ cat << EOF >> ~/.bash_aliases alias vicoco=\"$HOME/warez/nvim031.appimage -u $HOME/.config/nvim/coconut/init.coco.vim\" EOF $ vicoco :PlugStatus neovim乱码问题 现象：normal模式下输入 i 、 : 后在文本区和命令行分别出现 6 q 、 2 q 等乱码。 解决方法：在 init.vim 里加上 set guicursor= 。 解决过程：首先Google neovim '6 q' ，找到了 https://github.com/neovim/neovim/issues/6041 ， 但 https://github.com/neovim/neovim/issues/7002 有人反馈加上后语法高亮会出问题， 目前我还没有发现这个情况。 Use system clipboard Add set clipboard+=unnamedplus into init.vim and install xsel with sudo apt install xsel (or xclip ). Ref: https://github.com/neovim/neovim/issues/2889 Remove built-in vi completely dpkg - l | ag '&#94;ii.*vim' sudo apt purge vim - common vim - tiny","tags":"Tech","url":"http://leetschau.github.io/neovim-notes.html","loc":"http://leetschau.github.io/neovim-notes.html"},{"title":"Using Python in R Environment","text":"Add Python Script in Rmd File To use Python of a specified conda environment (instaed of the default one chosen by R) in a R markdown (*.Rmd) file, firstly install reticulate package. Then add 3 things into the setup seciton of the Rmd file: Add 2 entries into R's PATH environment variable: the path of conda , and the path of the conda env; Load reticulate ; Load the target conda env; For example, I built a conda env named pandas023test with full Anaconda packages, in the folder /home/leo/apps/miniconda3/envs/pandas023test . Now the Python scripts can be added into a Rmd file: $ cat example . Rmd --- title : \"Exercises for 2.2\" output : html_document --- `` ` { r setup , include = FALSE } Sys . setenv ( PATH = paste ( '/home/leo/apps/miniconda3/envs/pandas023test/bin:/home/leo/apps/miniconda3/bin' , Sys . getenv ( 'PATH' ), sep = ':' )) library ( reticulate ) use_condaenv ( condaenv = 'pandas023test' , conda = \"/home/leo/apps/miniconda3/bin/conda\" , required = TRUE ) `` ` Some texts here . `` ` { python } import pandas as pd df = pd . DataFrame ({ 'Animal' : [ 'Falcon' , 'Falcon' , 'Parrot' , 'Parrot' ], 'Max Speed' : [ 380. , 370. , 24. , 26. ]}) print ( df ) grps = df . groupby ([ 'Animal' ]) print ( grps ) print ( grps . mean ()) `` ` Note r setup above is not r, setup . See another example with source code and rendered markdown file with calculation results. Run Python REPL in R console After run the codes in r setup section above, start a Python REPL with repl_python() . Verify the environment is loaded successfully with: py_config () py_discover_config () Ref: reticulate: R interface to Python R Markdown Python Engine From Jupyter Notebooks to R Markdown Importing matplotlib with reticulate in R","tags":"Tech","url":"http://leetschau.github.io/using-python-in-r-environment.html","loc":"http://leetschau.github.io/using-python-in-r-environment.html"},{"title":"Python函数的参数传递机制","text":"Python中一切皆对象，包括函数，函数的参数是函数对象的一个属性（这个属性仍然是一个对象）。 函数及其默认参数在定义（执行函数的def语句）时被初始化，且只被初始化一次。 调用函数时，传递的是参数对象的地址，下面的代码演示了不论参数是否为可变对象， 形式参数和实际参数的地址是完全一致的： def immutable ( pb ): print ( 'id of pb: %s' % id ( pb )) pb += 1 print ( 'id of pb: %s' % id ( pb )) print ( 'value of pb: %d' % pb ) def mutable ( pb ): print ( 'id of pb: %s' % id ( pb )) pb . append ( 1 ) print ( 'id of pb: %s' % id ( pb )) print ( 'value of pb: %s' % pb ) b = 1 b2 = b print ( 'id of b: %s' % id ( b )) immutable ( b ) print ( 'id of b: %s' % id ( b )) print ( 'value of b: %d' % b ) print ( 'value of b2: %d' % b ) mb = [ 1 ] mb2 = mb print ( 'id of mb: %s' % id ( mb )) mutable ( mb ) print ( 'id of mb: %s' % id ( mb )) print ( 'value of mb: %s' % mb ) print ( 'value of mb2: %s' % mb2 ) 这种机制导致当函数使用可变对象作为默认参数时，且调用函数时使用可变对象， 前面的调用会影响后面的调用，因为前面的调用修改了默认参数的值： def default_param_emplist ( b = []): print ( 'param before modified: %s' % b ) b += [ 1 ] print ( 'param after modified: %s' % b ) default_param_emplist ([ 3 ]) print ( default_param_emplist . __defaults__ ) default_param_emplist () print ( default_param_emplist . __defaults__ ) default_param_emplist () print ( default_param_emplist . __defaults__ ) default_param_emplist () print ( default_param_emplist . __defaults__ ) default_param_emplist ([ 3 ]) print ( default_param_emplist . __defaults__ ) print ( '-----------------' ) def default_param_none ( b = None ): print ( 'param before modified: %s' % b ) b = b or [] b += [ 1 ] print ( 'param after modified: %s' % b ) default_param_none ([ 3 ]) print ( default_param_none . __defaults__ ) default_param_none () print ( default_param_none . __defaults__ ) default_param_none () print ( default_param_none . __defaults__ ) default_param_none () print ( default_param_none . __defaults__ ) default_param_none ([ 3 ]) print ( default_param_none . __defaults__ ) print ( '-----------------' ) def no_default_param ( b : str ): print ( 'param before modified: %s' % b ) b += [ 1 ] print ( 'param after modified: %s' % b ) no_default_param ([ 3 . 1 ]) print ( no_default_param . __defaults__ ) no_default_param ([ 3 . 2 ]) print ( no_default_param . __defaults__ ) 解决这个问题的方法：不要用可变对象作为参数的默认值， 必须使用复合型数据作为参数值时，可以用tuple等不可变对象， 在函数体里根据该参数的类型判断如何处理。 Ref: \"Least Astonishment\" and the Mutable Default Argument Common Gotchas","tags":"Tech","url":"http://leetschau.github.io/pythonhan-shu-de-can-shu-chuan-di-ji-zhi.html","loc":"http://leetschau.github.io/pythonhan-shu-de-can-shu-chuan-di-ji-zhi.html"},{"title":"解析Excel文档的JavaScript库","text":"安装和运行示例： $ cd readexcel $ npm init $ npm install --save xlsx $ ls demo.xls demo.xlsx node_modules package.json $ node > var workbook = XLSX.readFile ( 'demo.xlsx' , { cellStyles: true }) ; > var worksheet = workbook.Sheets [ workbook.SheetNames [ 0 ]] ; > var desired_cell = worksheet [ 'D5' ] ; > desired_cell.v ; > worksheet [ '!cols' ] > worksheet [ '!rows' ] > worksheet [ '!merges' ] 上面 worksheet['!merges'] 对象中包含了所有单元格的merge情况， worksheet['!cols'] 中保存每行的列宽（ wpx 记录像素宽度， wch 保存字符宽度） worksheet['!rows'] 中保存每行的行高。 以上代码同样可以处理 xls 文件。 详细内容参考 js-xlsx: SheetJS Community Edition 的 Worksheet Object 部分。","tags":"Tech","url":"http://leetschau.github.io/jie-xi-excelwen-dang-de-javascriptku.html","loc":"http://leetschau.github.io/jie-xi-excelwen-dang-de-javascriptku.html"},{"title":"Writing Documents with LaTeX on Ubuntu Server","text":"Step 1: Create PDF on Server SSH to your Ubuntu 16.04 server (named connection A ) and run: sudo apt update sudo apt install texlive - full sudo apt install evince # if no PDF viewer installed yet This requires about 3.6GB disk space, and fast Internet connection. To verify the TeX system, create a demo .tex file and convert to pdf: cat << EOF > demo . tex \\ documentclass [ UTF8 ] { ctexart } \\ usepackage { fullpage } \\ ctexset { section / format = \\ Large \\ bfseries } \\ usepackage { graphicx } \\ usepackage { float } \\ usepackage { tikz } \\ usetikzlibrary { calc } \\ usepackage { pgf - umlsd } \\ usetikzlibrary { shapes . geometric , arrows , positioning } \\ tikzstyle { arrow } = [ ultra thick, <->, >=stealth ] \\ usepackage { forest , array } \\ usetikzlibrary { shadows } \\ title { 产品概要设计 } \\ author { 张三 ， 李四 } \\ date {\\ today } \\ begin { document } \\ heiti \\ maketitle \\ songti \\ section { 产品需求 } \\ subsection { 业务场景说明 } \\ subsubsection { 典型业务场景 } EOF xelatex demo . tex Step 2: View the PDF on Client On your laptop login to the TeX server via SSH with X server. For Windows you can use MobaXterm which has a built-in X server as the client, while for Linux using ssh -X <tex-server> . After login via SSH (named connection B ), run echo $DISPLAY , you get something like localhost:10.0 . So the DISPLAY attached to you client is :10.0 . In connection A , run: DISPLAY=:10.0 evince demo.pdf . A new window displaying the PDF file should appear on your laptop in a few seconds, depending on the file size and LAN speed. Step 3: Editing with Live Preview On TeX server, install xuhdev/vim-latex-live-preview plugin for vim by adding the following lines into .vimrc: \" LaTeX Live Preview let g : livepreview_engine = 'xelatex' let g : livepreview_previewer = 'evince' Plug 'xuhdev/vim-latex-live-preview' And run PlugInstall in vim. Open the file with: DISPLAY=:10.0 evince demo.pdf , and run :LLPStartPreview in the vim. The PDF window should appear in a few seconds. While you edit the .tex file, the content in the PDF window will change accordingly, without saving the source file. Preview for subfiles structure If your document has a main-subfiles structure (see Multi-file LaTeX projects for details): . ├── images │ └── fig1 . png ├── main . tex ├── README . md └── sections ├── section1 . tex ├── section2 . tex ├── section3 . tex └── section4 . tex Run vi in the project root, and run preview command with :LLPStartPreview main.tex . Now your changes in subfiles will refresh the PDF preview window.","tags":"Tech","url":"http://leetschau.github.io/writing-documents-with-latex-on-ubuntu-server.html","loc":"http://leetschau.github.io/writing-documents-with-latex-on-ubuntu-server.html"},{"title":"Define Keyboard Shortcuts for Specific Application on Winodws","text":"The TeXworks on Windows use Ctrl-t to compile the document, which is not very convenient. I want to use Alt-t to replace it. Press Win key and input Active Window Info to start this application (it's installed by Autohotkey, so you need install Autohotkey beforehand). With Active Window Info I got the identity of the TeXworks window: ahk_exe texworks.exe . Create an autohotkey script texworks-hotkeys.ahk : ! t :: if ( WinActive ( \" ahk_exe texworks.exe \" )) { SendInput &#94; t } Return Double click the file, and you can use Alt-t to compile LaTeX documents now.","tags":"Tech","url":"http://leetschau.github.io/define-keyboard-shortcuts-for-specific-application-on-winodws.html","loc":"http://leetschau.github.io/define-keyboard-shortcuts-for-specific-application-on-winodws.html"},{"title":"Windows subsystem Linux Notes","text":"Install WSL 安装 Windows Subsystem for Linux （简称WSL）中的Ubuntu， 只需要在【控制面板 > 程序 > 程序和功能 > 启动或关闭 Windows 功能】中勾选 【适用于 Linux 的 Windows 子系统】后重启， 然后在 Windows Store 中搜索 Ubuntu 并安装，下载大小195.7MB的安装包， 整个安装过程非常流畅。启动后可以运行 apt 命令更新和安装应用，界面也比较靠谱。 Install Softwares 在笔记本的WSL里不能用appimage，所以neovim PPA安装了neovim， 用 sudo update-alternatives --config vim 用nvim代替了vim， 在WSL上安装zsh和neovim等各种工具都没问题。 终端模拟程序 cmder 优点是方便的指定字体、字号，方便地更换系统文字配色， 例如在 [Settings > Features > Colors > Schemas] 中选 Cobalt2 ， 能比较好的解决下面Windows自带模拟器显示目录和REPL文字看不清问题。 在 [Settings > Startup > Tasks] 中新增一个task，名字为 WSL ， 命令输入框里输入： wsl.exe . Hotkey: Ctrl-Alt-w. P.S.: 使用 wslconfig /l 列出所有 WSL 系统，使用 wslconfig /s 设置默认distro。 集成 Git Bash 在 [Settings > Startup > Tasks] 中新增一个task，名字为 Git Bash ， 命令输入框里写： \"C:\\Program Files\\Git\\bin\\bash.exe\" --cd-to-home 参数框中输入： /icon \"C:\\Program Files\\Git\\mingw64\\share\\git\\git-for-windows.ico\" . Hotkey: Ctrl-Alt-g. P.S.: 使用Ctrl-1, Ctrl-2, ... 在 cmder 的各个窗口间切换。 将第一个窗口固定为WSL，第2个窗口固定为ssh服务器，第3个窗口固定为dsnote笔记。 WSL和服务器上都可以使用各自的tmux系统，用alt-a, alt-s, alt-d在 tmux 内切换。 使用 Windows 自带的终端模拟程序 使用Windows自带的终端模拟程序问题很多，例如： WSL字体如果设置成Consolas，总是自动变回 新宋体 。 解决方法：下载 Microsoft YaHei Mono 并安装（下载后解压双击ttf文件就可以安装了）， 然后在WSL里设置成 Microsoft YaHei Mono 就可以了， 参考 请问如何更换bash on ubuntu on windows10的字体？ 。 目录和 ClojureScript REPL 输出的暗蓝色文字看不清楚。 解决方法：目录字体的颜色可以通过修改 LS_COLOR 解决，例如在~/.zshrc中加入： `export LS_COLORS=$LS_COLORS:'di=1;32:ow=01;36;'. 命令行输出文字的输出就比较麻烦了，所以建议不要用这个模拟器。 另：在 autohotkey 中添加 !&#94;w:: Run, \"wsl.exe\" ，实现使用 Ctrl-Alt-w 启动， 启动后目录不在根目录，解决方法是在 ~/.zshrc 里加一行 cd $HOME 。","tags":"Tech","url":"http://leetschau.github.io/windows-subsystem-linux-notes.html","loc":"http://leetschau.github.io/windows-subsystem-linux-notes.html"},{"title":"Interactive Development with ClojureScript","text":"Install and Setup On Remote Ubuntu Server On ThinkCenter server, start sshuttle service, install sdkman , and run: bash - c \"cd $HOME/.local/bin && curl -fsSLo boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && chmod 755 boot\" boot - h Install firefox on the server. SSH to server with MobaXterm (which has a built-in X server), then run firefox localhost:3000 , you will have a browser window in your client system. Or install the xrdp service and OpenBox window manager on the server, and start a remote GUI browser from your laptop, according to dsnote Run GUI Application on Remote Linux Server . Now you can do interactive develop all the same in local environment. The process are the same on Ubuntu/Mint laptop. On WSL sudo apt install zip unzip curl - s \"https://get.sdkman.io\" | bash . . bashrc http_proxy = http : // localhost : 1080 https_proxy = http : // localhost : 1080 sdk i java bash - c \"cd $HOME/.local/bin && curl -fsSLo boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && chmod 755 boot\" BOOT_JVM_OPTIONS = '-Dhttps.proxyHost=localhost -Dhttps.proxyPort=1080' boot - h Vim Setup Add the following lines into $MYVIMRC : Plug 'guns/vim-clojure-static' Plug 'tpope/vim-fireplace' Plug 'guns/vim-clojure-highlight' Plug 'kien/rainbow_parentheses.vim' Tutorial According to Tutorial 1 - The Basics and Tutorial 2.","tags":"Tech","url":"http://leetschau.github.io/interactive-development-with-clojurescript.html","loc":"http://leetschau.github.io/interactive-development-with-clojurescript.html"},{"title":"Change Shell Color Theme","text":"To change the color theme of zsh: add export LS_COLORS=$LS_COLORS:'di=1;32:ow=01;36;' into ~/.zshrc. Ref: How do I change the color for directories with ls in the console? COLORS-Lscolors","tags":"Tech","url":"http://leetschau.github.io/change-shell-color-theme.html","loc":"http://leetschau.github.io/change-shell-color-theme.html"},{"title":"Browser Auto Test","text":"Selenium is a popular browser automation tool, which mainly used for UI auto test. Python Client on Linux Mint Follow the instructions on Python API docs in the section Selenium Client & WebDriver Language Bindings on Download page of Selenium website. First download Firefox drivers for Linux 64bit: geckodriver-v0.20.1-linux64.tar.gz . Extract geckodriver and put it in a folder in $PATH, for example ~/.local/bin . Make sure the firefox executable is in the $PATH, and the terminal is attached with a DISPLAY . If not, start ipython with valid PATH and DISPLAY , for example: PATH=\"$PATH:$HOME/apps/firefox\" DISPLAY=:10.0 ipython . Here DISPLAY is a session with X session . On Windows the simplest way is ssh to the server with MobaXterm. Search MobaXterm in dsnote Writing Documents with LaTeX on Ubuntu Server for details. Then install selenium Python client and run a demo: conda create - n browsertest python = 3.5 conda install - n browsertest - c conda - forge selenium conda install - n browsertest ipython . activate browsertest ipython >>> from selenium import webdriver >>> browser = webdriver . Firefox () >>> browser . get ( 'http://baidu.com' ) >>> browser . quit ()","tags":"Tech","url":"http://leetschau.github.io/browser-auto-test.html","loc":"http://leetschau.github.io/browser-auto-test.html"},{"title":"Free Music Instrument Tuner","text":"s8tuner hosted here is a free tuner on Windows. But with Wine it can run on Linux, too. On Linux Mint, install Wine and Winetricks from Software Manager . Download s8tuner_e307.zip and extract it to ~/apps. Then run: cd ~/ apps / s8tuner_e307 winetricks mfc42 wine s8tuner . exe After the application start, I blew the 4th hole on the blues harmonica, it showed C5 and 0525.7 Hz , which is exactly the same with the frequency of C5 (523.251 Hz) in Piano key frequencies . You can play the C4 in section Pitch standards and Standard pitch of Pitch to test the software's capability. There is another application FMIT which can be installed via Software Manager . Or download installer in its release page (for both Linux and Windows). But it can't give right results in the 440 Hz test above. And its interface is hard to understand compared with s8tuner.","tags":"Tech","url":"http://leetschau.github.io/free-music-instrument-tuner.html","loc":"http://leetschau.github.io/free-music-instrument-tuner.html"},{"title":"Screen Recorder on Linux","text":"OBS Studio , which hosted on github is an excellent open source video recording tool on both Linux and Windows. Install and Setup Install on Linux Mint 18.3: glxinfo | grep \"OpenGL\" sudo apt - get install ffmpeg sudo add - apt - repository ppa : obsproject / obs - studio sudo apt - get update sudo apt - get install obs - studio After starting obs, in File > Settings > Output > Recording , set the Recording Path to your choice. Then set Recording Quality to Same as stream . This produces minimum output file, while the quality is good enough through my test. The default Recording Format is flv , install VLC to play files with this format on Linux. In Settings > Hotkeys , you can assign Alt-Shift-a and Alt-Shift-s to Start Recording and Stop Recording respectively. These are global hotkeys, you can use them to start and stop recording when OBS is not active window. Usage Add a source to record video or audio in OBS. For video recording, and all actions are in a window, add a Window Capture source. For recoding whole desktop including actions between multiple applications, add a Screen Capture source. If only want to record audio, add a Audio Output Capture or Audio Capture Device source. You can add multiple sources for one scene . but it seems unnecessary for simple recording tasks. Then press Start Recording button on the right side.","tags":"Tech","url":"http://leetschau.github.io/screen-recorder-on-linux.html","loc":"http://leetschau.github.io/screen-recorder-on-linux.html"},{"title":"R Squre Statistic and Correlation in Linear Regression","text":"This note is the proof of Exercise 7 in section 3.7 of An Introduction to Statistical Learning . For n observations \\((x_i, y_i), i=1..n\\) , let: $$\\begin{equation}\\begin{aligned} ss_{xx} &\\equiv \\sum_{i=1}&#94;n (x_i - \\bar x)&#94;2 \\\\ &= \\sum_{i=1}&#94;n x_i&#94;2 - 2 \\bar x \\sum_{i=1}&#94;n x_i + \\sum_{i=1}&#94;n \\bar x&#94;2 \\\\ &= \\sum_{i=1}&#94;n x_i&#94;2 - 2n\\bar x&#94;2 + n \\bar x&#94;2 \\\\ &= \\sum_{i=1}&#94;n x_i&#94;2 - n\\bar x&#94;2 \\end{aligned}\\end{equation} \\tag{1}\\label{eq1} $$ Substitute \\(x\\) with \\(y\\) , we get: $$ ss_{yy} \\equiv \\sum_{i=1}&#94;n (y_i - \\bar y)&#94;2 = \\sum_{i=1}&#94;n y_i&#94;2 - n\\bar y&#94;2 \\tag{2}\\label{eq2} $$ And: $$\\begin{equation}\\begin{aligned} ss_{xy} &\\equiv \\sum_{i=1}&#94;n (x_i - \\bar x) (y_i - \\bar y) \\\\ &= \\sum_{i=1}&#94;n (x_i y_i - \\bar x y_i - x_i \\bar y + \\bar x \\bar y) \\\\ &= \\sum_{i=1}&#94;n x_i y_i - n \\bar x \\bar y - n \\bar x \\bar y + n \\bar x \\bar y \\\\ &= \\sum_{i=1}&#94;n x_i y_i - n\\bar x\\bar y \\end{aligned}\\end{equation} \\tag{3}\\label{eq3} $$ For correlation between \\(X\\) and \\(Y\\) , also denoted as \\(Cor(X, Y)\\) : $$ r \\equiv \\frac{\\sum_{i=1}&#94;n(x_i - \\bar x)(y_i - \\bar y)} {\\sqrt{\\sum_{i=1}&#94;n(x_i - \\bar x)&#94;2} \\sqrt{\\sum_{i=1}&#94;n(y_i - \\bar y)&#94;2}} = \\frac{ss_{xy}}{\\sqrt{ss_{xx}ss_{yy}}} \\tag{4} \\label{eq4} $$ Here \\(\\bar x = \\frac{\\sum_{i=1}&#94;n x_i}n, \\bar y = \\frac{\\sum_{i=1}&#94;n y_i}n\\) . See Correlation Coefficient and Least Squares Fitting for detailed reasonings. For the target regression function \\(y = a + bx\\) , \\(a\\) and \\(b\\) should be the value that make \\(RSS\\) get its minimum, where $$ RSS \\equiv \\sum_{i=1}&#94;n(y_i - \\hat y_i)&#94;2 = \\sum_{i=1}&#94;n [y_i - (a + b x_i)]&#94;2 \\tag{5}\\label{eq5} $$ So we have: $$ \\frac{\\partial (RSS)}{\\partial a} = -2 \\sum_{i=1}&#94;n [y_i - (a + b x_i)] = 0 \\\\ \\frac{\\partial (RSS)}{\\partial b} = -2 \\sum_{i=1}&#94;n [y_i - (a + b x_i)] x_i = 0 $$ These lead to: $$ \\begin{align} na + b\\sum_{i=1}&#94;n x_i = \\sum_{i=1}&#94;n y_i \\tag{6} \\label{eq6}\\\\ a \\sum_{i=1}&#94;n x_i + b \\sum_{i=1}&#94;n x_i&#94;2 = \\sum_{i=1}&#94;n x_i y_i \\tag{7}\\label{eq7} \\end{align}$$ Eq \\(\\eqref{eq7}\\) can be written as: $$ an \\bar x + b \\sum_{i=1}&#94;n x_i&#94;2 = \\sum_{i=1}&#94;n x_i y_i \\tag{8}\\label{eq8} $$ From eq \\(\\eqref{eq6}\\) we have: $$a = \\bar y - b \\bar x \\tag{9}\\label{eq9}$$ Take eq \\(\\eqref{eq1}, \\eqref{eq3}, \\eqref{eq9}\\) into eq \\(\\eqref{eq8}\\) , we get: $$ (\\bar y - b \\bar x) n \\bar x + b \\sum_{i=1}&#94;n x_i&#94;2 = \\sum_{i=1}&#94;n x_i y_i \\\\ n \\bar x \\bar y - bn \\bar x&#94;2 + b \\sum_{i=1}&#94;n x_i&#94;2 = \\sum_{i=1}&#94;n x_i y_i \\\\ (\\sum_{i=1}&#94;n x_i&#94;2 - n \\bar x&#94;2) b = \\sum_{i=1}&#94;n x_i y_i - n \\bar x \\bar y \\\\ \\therefore b = \\frac{\\sum_{i=1}&#94;n x_i y_i - n \\bar x \\bar y}{\\sum_{i=1}&#94;n x_i&#94;2 - n \\bar x&#94;2} = \\frac{ss_{xy}}{ss_{xx}} \\tag{10}\\label{eq10} $$ Take eq \\(\\eqref{eq9}, \\eqref{eq10}\\) into eq \\(\\eqref{eq5}\\) , we get: $$\\begin{equation}\\begin{aligned} RSS &= \\sum_{i=1}&#94;n [y_i - (a + b x_i)]&#94;2 \\\\ &= \\sum_{i=1}&#94;n (y_i - \\bar y + b \\bar x - b x_i)&#94;2 \\\\ &= \\sum_{i=1}&#94;n [(y_i - \\bar y) - b (x_i - \\bar x)]&#94;2 \\\\ &= \\sum_{i=1}&#94;n (y_i - \\bar y)&#94;2 + b&#94;2 \\sum_{i=1}&#94;n (x_i - \\bar x)&#94;2 -2b \\sum_{i=1}&#94;n (x_i - \\bar x) (y_i - \\bar y) \\\\ &= ss_{yy} + b&#94;2 ss_{xx} -2bss_{xy} \\\\ &= ss_{yy} + \\frac{ss_{xy}&#94;2}{xx_{xx}&#94;2}ss_{xx} -2 \\frac{ss_{xy}}{ss_{xx}}ss_{xy} \\\\ &= ss_{yy} - \\frac{ss_{xy}&#94;2}{ss_{xx}} \\end{aligned}\\end{equation} \\tag{11}\\label{eq11} $$ Take eq \\(\\eqref{eq11}\\) into equation (3.17) of An Introduction to Statistical Learning , we have: $$ R&#94;2 = \\frac{TSS - RSS}{TSS} = \\frac{ss_{yy} - ss_{yy} + \\frac{ss_{xy}&#94;2}{ss_{xx}}}{ss_{yy}} = \\frac{ss_{xy}&#94;2}{ss_{xx} ss_{yy}} $$ With eq \\(\\eqref{eq4}\\) , we get \\(R&#94;2 = Cor(X, Y)&#94;2\\) . Here \\(RSS\\) , \\(R&#94;2\\) , \\(TSS\\) and \\(Cor(X, Y)\\) is defined in Equation (3.16) ~ (3.18) of An Introduction to Statistical Learning . \\(ss\\) , \\(r\\) is defined in Correlation Coefficient and Least Squares Fitting . Other references: Relationship between R2 and correlation coefficient if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/r-squre-statistic-and-correlation-in-linear-regression.html","loc":"http://leetschau.github.io/r-squre-statistic-and-correlation-in-linear-regression.html"},{"title":"假设检验中p-value的含义","text":"假设检验 从一个例子开始： 甲告诉乙：我的硬币没有动过手脚，抛硬币正反面（正面是字，反面是花）出现的概率各 \\(1/2\\) 。 乙怀疑甲对花的一面增加了重量，出现花的概率大于出现字的概率。 怎样验证甲说的是真是假？ 只能通过抛硬币的方法验证。 两次之后都是花朝上，如果硬币没被改过， 出现这种情况的概率是 \\(0.5 \\times 0.5 = 0.25\\) 。 再抛两次，仍然都是花朝上，概率是 \\(0.5&#94;4 = 0.0625\\) ， 再抛了6次（共10次），只有两次字朝上，其他8次花朝上， 基于这个事实，是否可以确定硬币被修改过？ 这就是假设检验 (hypothesis testing)，这里假设是\"硬币没被改过\"，假设检验的方法是抛10次硬币， 实验结果是8次为字，2次为花。 p-value 基于p-value的假设检验是假设检验的方法之一，它采用反证法： 假设 \\(H_0\\) 为真，找到这个情形下的概率分布，计算本次试验结果在这个分布下出现的概率， 如果这个概率很低，就与\"小概率事件在一次实验中不可能发生\"冲突， 从而证明 \\(H_0\\) 不成立。 采用这种方式的假设检验包含4步： 提出null hypothesis ( \\(H_0\\) ) 和 alternative hypothesis ( \\(H_A)\\) ，上面的例子中， \\(H_0\\) 是硬币两面相同， \\(H_A\\) 是硬币两面不同。 进行一次实验，得到实验结果数据，这里通过抛10次硬币，得到的结果是8次为字，2次为花。 计算p-value：基于 \\(H_0\\) 为真的假设，计算实验结果出现的概率， 以及在 \\(H_A\\) 方向上比实现结果更极端（更不利于 \\(H_0\\) ）的概率的 和 。 这里当 \\(H_0\\) 为真时，抛硬币符合二项分布，且花朝上的数学期望是 0.5， 及 \\(X \\sim B(n, \\mu) = B(10, 0.5)\\) ， 所谓\"在 \\(H_A\\) 方向上比实现结果更极端\"，在这里是\"如果硬币确实花面重的话， 花朝上的次数比8次还多的情形\"， 所以 p-value \\(= P(8 \\ge X \\le 10) =0.05\\) ； 将p-value与我们实现规定的\"显著水平\" (significant level, \\(\\alpha\\) ) 比较， 如果 \\(p \\gt \\alpha\\) ，说明无法推翻 \\(H_0\\) ，否则认为 \\(H_0\\) 不成立， \\(H_A\\) 成立。 假设这里我们选择 \\(\\alpha = 0.1\\) ，由于 \\(p \\lt \\alpha\\) ， \\(H_0\\) 被推翻， 我们认为硬币两面是不同的。 p-value的含义是：假设 \\(H_0\\) 为真时，本次实验以及比本次实验更不利于 \\(H_0\\) 的实验结果出现的概率之 和 。 如果这个值很低，就表明\"这次实验发生了一个小概率事件\"。 这就与\"小概率事件在一次实验中不可能发生\"这一假设发生了冲突。 要解决这个冲突，要么放弃\"小概率事件在一次实验中不可能发生\"， 要么放弃 \\(H_0\\) ，基于p-value的假设检验方法坚持\"小概率事件在一次实验中不可能发生\"， 所以推出：当 \\(p \\lt \\alpha\\) 时， \\(H_0\\) 不成立。 除了基于p-value的假设检验方法，还有其他方法，例如 3.1 - Hypothesis Testing (Critical value approach) . ISL Simple Linear Regression 中 t-statistics 与 p-value的说明 An Introduction to Statistical Learning 3.1.2节讨论了基于p-value的假设检验方法确定simple linear regression中自变量系数 \\(\\hat \\beta_1\\) 的方法，按照上面的4步过程，分解计算过程如下： \\(H_0\\) : \\(X\\) , \\(Y\\) 不相关，即 \\(\\beta_1 = 0\\) ， \\(H_A\\) : \\(\\beta_1 \\gt 0\\) ; 根据式 (3.14) 以及已经计算出来的 \\(\\hat \\beta_1\\) 计算出 \\(t\\) 值： 假设 \\(H_0\\) 成立，则式 (3.14) 符合 自由度为 \\(n-2\\) 的 \\(t\\) 分布，当 \\(n>30\\) 时，可以近似为正态分布， 由于 \\(H_A\\) 倾向于 \\(t\\) 越大越好（ \\(t\\) 越大 \\(\\beta_1 \\gt 0\\) 可能性越大）， 所以 \\(p = P(\\lvert T\\rvert \\gt t)\\) ； 当 \\(p\\) 很小时，说明单次试验出现了小概率事件，所以 \\(H_0\\) 不成立， \\(X\\) 与 \\(Y\\) 相关。 Ref: 3.2 - Hypothesis Testing (P-value approach) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/jia-she-jian-yan-zhong-p-valuede-han-yi.html","loc":"http://leetschau.github.io/jia-she-jian-yan-zhong-p-valuede-han-yi.html"},{"title":"SageMath Notes","text":"Running as Linux Server Download sagemath binary package file sage-8.1-Ubuntu_16.04-x86_64.tar.bz2 (version 8.1 for Ubuntu 16.04 x64 platform) from tsinghua mirror. Extract it to ~/apps. So we get $SAGE_HOME=$HOME/apps/SageMath . Run ./sage for initial compilation and starting the REPL. After that add the following lines to $SAGE_HOME/local/etc/jupyter/jupyter_notebook_config.py : c . NotebookApp . ip = '*' c . NotebookApp . open_browser = False Then start sage server with ./sage -n jupyter , and open http://<server-ip>:8888/?token=... in your browser (the exact address can be found in the console output), the SageMath 8.1 kernel can be seen in the New dropdown list. If you don't want to modify the config file, start the server with ./sage -n jupyter --ip '*' (but I don't know how to specify the open_browser to False in command line). Notice SageMath can't use Anaconda Python. If you setup your system to use Anaconda Python by adding the following line into ~/.zshenv or ~/.bashrc : export PATH = \"$HOME/apps/miniconda3/bin:$PATH\" You will get the error below: RecursionError: maximum recursion depth exceeded during compilation . To fix it ,start SageMath server like this: PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games ./sage -n jupyter A Demo Create a new notebook with kernel SageMath 8.1 , and input the following lines: eqn = x ** 3 + sqrt ( 2 ) * x + 5 == 0 pretty_print ( eqn ) latex ( eqn ) res = solve ( eqn , x ) [ 0 ]. rhs () pretty_print ( res ) plot ( [ x * exp ( - n * x &#94; 2 ) / . 4 for n in [ 1 .. 5 ]], ( 0 , 2 ) , aspect_ratio = . 8 ) Ref: Running a notebook server","tags":"Tech","url":"http://leetschau.github.io/sagemath-notes.html","loc":"http://leetschau.github.io/sagemath-notes.html"},{"title":"清除Chrome浏览器中的恶意广告插件","text":"今天在Chrome浏览器中打开网址 https://plumbum.readthedocs.io/en/latest/ ， counterflix广告会自动出现在页面上（广告条下面有 Powered by Counterflix 字样）， 点击页面任何地方，都会弹出广告页面。 在Chrome Settings 中点击 Reset 后重启Chrome仍然出现这个广告。 另外尝试了下面的方法： 关闭Chrome，删除（或者重命名） c:\\Users\\lee_c\\AppData\\Local\\Google\\Chrome\\User Data\\Default 文件夹 （Chrome启动后会创建新的 default 文件夹）， 再次启动Chrome，浏览器缓存和用户登录会被彻底清空， 重新登录个人账号，并重置用户同步，但仍然会弹出广告。 下午Windows报告 TrojanDownloader病毒，尚不清楚是否与这个广告插件有关。 卸载了Chrome，删除了文件夹 c:\\Users\\lee_c\\AppData\\Local\\Google 。 再次安装Chrome，仍然没有清除此广告插件。 下载了 Malwarebytes 试用版， 扫描系统清除了81个恶意软件，之后广告插件暂时未再出现。 感染这个广告插件的原因，似乎是它在某些网页上（比如Reddit），不小心点击后， 就被自动安装到了Chrome中，所有其他网页都会出现Counterfix广告。","tags":"Tech","url":"http://leetschau.github.io/qing-chu-chromeliu-lan-qi-zhong-de-e-yi-yan-gao-cha-jian.html","loc":"http://leetschau.github.io/qing-chu-chromeliu-lan-qi-zhong-de-e-yi-yan-gao-cha-jian.html"},{"title":"基于Markdown和MathJax的书写工具笔记","text":"最优选择：RStudio，支持完整markdown和绝大多数 MathJax 语法，实时预览方便。 其他工具： Atom: 安装markdown-preview-plus包失败，加上代理也不行，离线安装缺少依赖包，也不可用； Gitbook: 在编辑器中可以预览公式，但保存后公式消失，无法使用； TeX Live: 对MathJax支持不好； Visual Math Editor : 对MathJax支持很好，实时预览方便，但不支持Markdown，没有保存文件功能，只有导出； StackEdit : 支持markdown和MathJax，但基于KaTeX实现， 对MathJax语法支持不全，例如不支持 \\tag ； Sublime: 有markdown preview包 Sublimetext-markdown-preview ， 安装迅速，有LiveReload包，在Chrome中实时渲染表现良好，但不支持换行符 \\\\ ， 在Edge中MathJax渲染很慢，简单的公式渲染一次需要15秒左右，LiveReload不起作用； markdown-preview.vim : 在Windows Git Bash的vim中运行 MarkdownPreview 命令失败， 报缺乏 python/python3 特性错误，但这个vim实际上具备Python支持； notepad++: 安装插件 MarkdownViewer++ 后能预览markdown，不支持MathJax，","tags":"Tech","url":"http://leetschau.github.io/ji-yu-markdownhe-mathjaxde-shu-xie-gong-ju-bi-ji.html","loc":"http://leetschau.github.io/ji-yu-markdownhe-mathjaxde-shu-xie-gong-ju-bi-ji.html"},{"title":"Python Package and Distribution Tools","text":"Python打包工具主要分两种，一种是freezer，以 PyInstaller 为代表，把Python编译器，主脚本以及依赖库放一起打个包， 用户在没有Python的环境下也能用，这种方式决定了这样的\"可执行文件\"虽然形式上是 二进制代码，但不是真正意义上的native executable， 运行效率和Python脚本差不多，反编译比较容易，打包成功率高。 第二种是compiler，以 Nuitka 为代表， 将Python代码转换为C++代码，再编译为binary code，生成的是真正的native executable， 与C++, Go, Haskell这些静态编译器生成的可执行文件类似， 运行效率会有比较大的提升，但编译失败的风险也更大一些。","tags":"Tech","url":"http://leetschau.github.io/python-package-and-distribution-tools.html","loc":"http://leetschau.github.io/python-package-and-distribution-tools.html"},{"title":"Share Files without Servers","text":"Syncthing 是一种分布式的文件共享协议和实现。 使用方法是：在需要共享文件的两台主机（Windows, Linux, Android) A和B上启动软件， 在A上设置一个共享文件夹，将A的设备ID告诉B，B输入ID后设置本机共享目录， 这个文件夹就会在A和B上双向同步。 Windows 从 Syncthing 官网下载 [Native GUIs & Integrations > Windows] 客户端 SyncTrayzor ， 选择64位的portable版本（文件名：SyncTrayzorPortable-x64.zip）。 解压后执行 SyncTrayzor.exe 就可以了。 Linux in Console 从 Syncthing 官网下载 [Syncthing Core > Linux 64bit] 文件名 syncthing-linux-amd64-v0.14.45.tar.gz。 解压到 ~/apps 下，执行 ./syncthing -no-browser -gui-address=\"http://<server-ip>:<port>\" ， 例如\"http://192.168.10.253:6565\"，然后在浏览器里打开\"http://192.168.10.253:6565\"， 在 [Actions > Show ID] 看设备ID.","tags":"Tech","url":"http://leetschau.github.io/share-files-without-servers.html","loc":"http://leetschau.github.io/share-files-without-servers.html"},{"title":"Using R in Python","text":"Using R data and functions with rpy2 in Python: Import and activate the environment: from rpy2.robjects import r , pandas2ri pandas2ri . activate () Get R dataframe: rdf = r.iris.head() or rdf = r['iris'].head() . List all methods and properties of the dataframe with dir(r.iris) . Convert R dataframe to Pandas dataframe: pdf = pandas2ri.ri2py(rdf) . Use R function: r.mean or mean = r['mean'] . Convert Pandas dataframe to R dataframe and feed to R function: res = mean(pandas2ri.py2ri(pdf['Sepal.Length'])) . Evaluating strings as R code: ``` r('mydata <- head(iris)') r('mean(mydata$Sepal.Length)') `` Ref: rpy2 / R interface","tags":"Tech","url":"http://leetschau.github.io/using-r-in-python.html","loc":"http://leetschau.github.io/using-r-in-python.html"},{"title":"Rebuild Python/R Environment on a Offline Host","text":"Environments Manged by Pip Download all packages with pip download -r requirements.txt and copy them to the offline host. Install them on the offline host with pip install --no-index --find-links /path/to/some/dir/ -r requirements.txt . If you manage environment with pipenv , create the requirements.txt file from Pipfile with pipenv lock -r . Environments Managed by Conda Conda environment is portable. Make sure develop and production host have the same conda installation folder and OS specification. In the following demo the OS of both hosts are CentOS 6.8, and the installation folder the default one: /root/miniconda3 or /root/anaconda3 . Install Anaconda and R packages in the conda env on the develop machine (with Internet access). Tar the $MINICONDA_HOME/envs/<target-env> folder and copy it to the offline machine. Extract to the $MINICONDA_HOME/envs of the offline host. Activate the new environment and run app codes. The following codes demonstrates packaging the entire Anaconda and R environment with conda and restore it on an offline host: ssh GW - 191 bash Miniconda3 - latest - Linux - x86_64 . sh . ~/. bashrc conda create - n operator anaconda # takes 2 hours conda install - n operator r - base r - psych # takes 30 minutes . activate operator R > library ( psych ) > describeBy ( CO2 $ uptake , list ( CO2 $ Plant )) > &#94; d . deactivate cd ~/ miniconda3 / envs / tar zcf operator . tgz operator # 831MB for tgz file, 2.7GB for *operator* folder scp operator . tgz GW - 192 : ~/ ssh GW - 192 cd ~/ miniconda3 / envs / tar xf ~/ operator . tgz . activate operator ipython >>> import pandas >>> data = pandas . DataFrame ([( 3 , 33 ), ( 4 , 44 )]) >>> &#94; d R > library ( psych ) > describeBy ( CO2 $ uptake , list ( CO2 $ Plant )) > &#94; d So this is a fully functional Anaconda and R environment. Or you can use Anaconda installer instead of Miniconda when the Internet access is slow: ssh GW - 193 bash Anaconda3 - 5 . 1 . 0 - Linux - x86_64 . sh . ~/ . bashrc conda create - n renv r - base r - psych . activate renv R > library ( psych ) > describeBy ( CO2 $ uptake , list ( CO2 $ Plant )) > &#94; d . deactivate cd anaconda3 / envs / tar zcf renv . tgz renv / # 263 MB for tgz file , 771 MB for * renv * folder scp renv . tgz GW - 194 : ~/ ssh GW - 194 # this is the offline host cd / root / anaconda3 / envs tar xf ~/ renv . tgz . activate renv > library ( psych ) > describeBy ( CO2 $ uptake , list ( CO2 $ Plant )) > &#94; d Other options: Copy all $MINICONDA_HOME/pkg/*.bz2 files to offline host, install with conda install -n myenv *.bz2 . Ref: Python Packages Offline Installation Generating a requirements.txt export environment to an offline machine","tags":"Tech","url":"http://leetschau.github.io/rebuild-pythonr-environment-on-a-offline-host.html","loc":"http://leetschau.github.io/rebuild-pythonr-environment-on-a-offline-host.html"},{"title":"Conda特性说明","text":"Conda: Myths and Misconceptions 详细介绍了 conda 与 pip 如何协作，重点包括： conda 是 100%开源的， 可以通过 pip install conda 安装； pip 用于将 Python package 安装到任何环境里， conda 用于将任何语言的 package 安装到 conda 环境里； conda 的优势在于跨语言的应用环境配置，用户自定义的环境配置（叫做 recipe ） 可以发布到 conda-forge （同样是社区管理的）上； 二者只有在 将 Python package 安装到隔离环境中 这一场景下，功能才是重叠的， 即 pipenv 和 conda 可以互相取代；","tags":"Tech","url":"http://leetschau.github.io/condate-xing-shuo-ming.html","loc":"http://leetschau.github.io/condate-xing-shuo-ming.html"},{"title":"机器学习的数学基础知识","text":"机器学习必备的数学基础有哪些？ by 王天一 总结了机器学习的3个步骤： 表示：将具体问题和数据抽象为数学模型和矩阵，使用线性代数工具； 评价：设定目标函数评价模型行性质，使用概率论和数理统计作为工具； 优化：求出目标函数（第2步中确定）在模型（第1步中确定）中的一个最优解，使用最优化理论作为工具； 数学基础包括： 高等数学：求导、微分、积分等； 线性代数：线性空间理论、矩阵分析（如SVD等）； 概率论和数理统计； 最优化理论：梯度下降、凸优化、无约束优化、反向传播等； 推荐了两本机器学习数学基础方面的书，作者都是 Trevor Hastie 和 Robert Tibshirani 等： An Introduction to Statistical Learning : 简称 ISL ，作者开发了R package ISLR ， 网站上有PDF版本、数据、图片和R代码下载； The Elements of Statistical Learning : Springer, 2009年第二版 ESL需要读者有比较好的数学基础，ISL的内容与ESL大致相同，但更偏重于应用， 使用R做了很多实例。可以先通过ISL熟悉各个算法，如果对后面的数学理论感兴趣， 再研究ESL中的对应章节。","tags":"Tech","url":"http://leetschau.github.io/ji-qi-xue-xi-de-shu-xue-ji-chu-zhi-shi.html","loc":"http://leetschau.github.io/ji-qi-xue-xi-de-shu-xue-ji-chu-zhi-shi.html"},{"title":"Using Pandas with PySpark","text":"To use packages (pandas, numpy, statsmodels, etc) of Anaconda in Spark, sumbit spark job (or start spark shell) in anaconda environment. The following codes demonstrate convert dataframe between Spark and pandas, and the groupby function in each dataframe: $ cat << EOF > groupbyDemo . py from pyspark.sql import SparkSession from pyspark.sql.functions import ( avg , count , first , pandas_udf , concat , col , PandasUDFType ) from pyspark.sql.types import StructType , StructField from pyspark.sql.types import IntegerType , StringType spark = SparkSession . builder . master ( \"local[*]\" ) . appName ( 'demo' ) . getOrCreate () ls = [[ 'a' , 'b' , 3 ], [ 'a' , 'b' , 4 ], [ 'a' , 'c' , 3 ], [ 'b' , 'b' , 5 ]] df = spark . createDataFrame ( ls , schema = [ 'A' , 'B' , 'C' ]) print ( 'Spark DF:' ) df . show () grps = df . groupBy ( 'A' ) print ( 'grps.mean():' ) grps . mean () . show () print ( 'grps.count():' ) grps . count () . show () schema = StructType ([ StructField ( \"A\" , StringType (), True ), StructField ( \"B\" , StringType (), True ), StructField ( \"C\" , IntegerType (), True )]) @pandas_udf ( schema , PandasUDFType . GROUPED_MAP ) def grp_self ( grp ): print ( 'grp.shape:' , grp . shape ) print ( 'grp.info():' , grp . info ()) return grp . head () print ( 'Contents of each group (PySpark):' ) grps . apply ( grp_self ) . show () pdf = df . toPandas () print ( 'Pandas DF: pdf' ) print ( pdf ) pgrps = pdf . groupby ( 'A' ) print ( 'pgrps.mean(): \\n %s ' % pgrps . mean ()) print ( 'pgrps.count(): \\n %s ' % pgrps . count ()) print ( 'Contents of each group (Pandas):' ) for grp in pgrps : print ( grp ) fdf = spark . createDataFrame ( pdf ) EOF $ export SPARK_HOME = $ HOME / apps / spark - 2.2 . 0 - bin - hadoop2 . 7 $ export PATH = $ SPARK_HOME / bin : $ PATH $ export PYTHONPATH = \"${SPARK_HOME}/python/:$PYTHONPATH\" $ export PYTHONPATH = \"${SPARK_HOME}/python/lib/py4j-0.10.6-src.zip:$PYTHONPATH\" $ . activate anaconda $ python groupbyDemo . py 从程序的输出可知： 两种 DataFrame 做 groupby 后生成的每个分组的 schema 与原 DataFrame 是一致的; PySpark 分组后可以通过 pandas_udf 用 Pandas 处理每个分组后的 DataFrame; PySpark 分组对象不是 Iterrable，Pandas 分组后生成一个 Iterable，可以用 for 遍历；","tags":"Tech","url":"http://leetschau.github.io/using-pandas-with-pyspark.html","loc":"http://leetschau.github.io/using-pandas-with-pyspark.html"},{"title":"Run SparkR in RStudio","text":"Setup the environment on a VM and run SparkR scripts: Start a Ubuntu 16.04 vm with vagrant; copy RStudio deb installer, JDK and Spark tarball file (jdk-8u161-linux-x64.tar.gz and spark-2.2.0-bin-hadoop2.7.tgz) to shared folder; Install r-base , gdebi via apt , install RStudio with gdebi, extract JDK and Spark; Create a new user (for example, leo) as the RStudio user ( root is not permitted to login to RStudio); Login the vm as leo . Add JAVA_HOME , SPARK_HOME to ~/.Renviron ; Add JAVA_HOME , SPARK_HOME and $JAVA_HOME/bin , $SPARK_HOME/bin to PATH in ~/.profile ; Source ~/.profile , run spark-shell to verify the setup in above steps; Login RStudio with user leo , check if SPARK_HOME is set correctly with Sys.getenv() ; Load library SparkR . Convert an existing R dataframe to Spark dataframe; Operations on the VM: sudo su apt update apt install r - base gdebi - core gdebi / vagrant / rstudio - server - 1 . 1 . 383 - amd64 . deb useradd - m leo - p $ ( openssl passwd - 1 mypwd ) su - leo mkdir ~/ apps ; cd ~/ apps ; tar xf / vagrant / jdk - 8 u161 - linux - x64 . tar . gz tar xf / vagrant / spark - 2 . 2 . 0 - bin - hadoop2 . 7 . tgz cat << EOF > . Renviron JAVA_HOME = \"/home/leo/apps/jdk1.8.0_161\" SPARK_HOME = \"/home/leo/apps/spark-2.2.0-bin-hadoop2.7\" EOF cat << EOF >> . profile JAVA_HOME = \"$HOME/apps/jdk1.8.0_161\" SPARK_HOME = \"$HOME/apps/spark-2.2.0-bin-hadoop2.7\" PATH = \"$HOME/bin:$HOME/.local/bin:$JAVA_HOME/bin:$SPARK_HOME/bin:$PATH\" EOF Login RStudio with leo in browser and run: library ( SparkR , lib . loc = c ( file . path ( Sys . getenv ( \" SPARK_HOME \" ) , \" R \" , \" lib \" ))) spark <- sparkR . session ( master = \" local[*] \" , sparkConfig = list ( spark . driver . memory = \" 2g \" )) df <- as . DataFrame ( faithful ) head ( df )","tags":"Tech","url":"http://leetschau.github.io/run-sparkr-in-rstudio.html","loc":"http://leetschau.github.io/run-sparkr-in-rstudio.html"},{"title":"Install R Packages Offline","text":"Install Specific Packages Ref: Installing Packages without Internet On the online host: getDependencies <- function ( packs ) { dependencyNames <- unlist ( tools :: package_dependencies ( packages = packs , db = available . packages () , which = c ( \" Depends \" , \" Imports \" ) , recursive = TRUE )) packageNames <- union ( packs , dependencyNames ) packageNames } pkgs <- c ( \" digest \" , \" plyr \" , \" reshape2 \" ) packages <- getDependencies ( pkgs ) setwd ( ' ~/temp/myrepo/ ' ) pkgInfo <- download . packages ( pkgs = packages , destdir = getwd () , type = \" source \" ) write . csv ( file = \" pkgFilenames.csv \" , basename ( pkgInfo [, 2 ] ) , row . names = FALSE ) library ( tools ) write_PACKAGES () Copy ~/temp/myrepo to the folder /vagrant/myrepo on production host and run: setwd ( ' /vagrant/myrepo/ ' ) pkgFilenames <- read . csv ( \" pkgFilenames.csv \" , stringsAsFactors = FALSE ) [, 1 ] install . packages ( pkgFilenames , repos = NULL ) # if failed , run the command below install . packages ( \" plyr \" , contriburl = \" file:///vagrant/myrepo/ \" ) via miniCRAN Not work. $ sudo apt install libssl-dev libxml2-dev > install.packages ( \"miniCRAN\" ) But function pkgDep() failed. Backup All CRAN Repos via wget Ref: Offline install of R package and dependencies Download R packages to a online host: wget 'ftp://cran.r-project.org/pub/R/src/contrib/*.tar.gz' . Or download part by part: for i in U u V v W; wget \"ftp://cran.r-project.org/pub/R/src/contrib/$i*.tar.gz\" (for zsh) or for i in U u; do wget \"ftp://cran.r-project.org/pub/R/src/contrib/$i*.tar.gz\"; done (for bash). But the digest source file is absent. It seems not all source files are downloaded. And this method is not reliable. via download.packages Not test yet. Ref: R Package Automated Download > pkg . list = available . packages () > download . packages ( pkgs = pkg . list , destdir = \"C:\\\\MyRPackages\" )","tags":"Tech","url":"http://leetschau.github.io/install-r-packages-offline.html","loc":"http://leetschau.github.io/install-r-packages-offline.html"},{"title":"Build Self-hosted Git Service on Private Host","text":"Today I followed the instructions on Install from binary , download the gogs binary for Linux amd64 with tar.gz extension to a vagrant virtual host on ThinkCenter (IP address 172.18.0.244 ). Extract it to ~/apps/gogs folder: sudo useradd - m - p $ ( openssl passwd - 1 mygitpwd ) git su - git mkdir apps ; cd apps tar xf / vagrant / gogs0 . 11 . 34 . tar . gz cd gogs . / gogs web # or use another port with '-port 3001' Open 172.18.0.244:3000 in browser, modify the following install parameters: Database Type : SQLite3 Domain : 172 . 18 . 0 . 244 Application URL : http : // 172 . 18 . 0 . 244 : 3000 / Then click Install Gogs to install Gogs service. After that click Sign up now to register a new user leo . This user will be the administrator of the gogs system. Run as Daemon According to How do I run Gogs at startup with Systemd? . Modify the following items in $GOGS_HOME/scripts/systemd/gogs.service : WorkingDirectory =/ home / git / apps / gogs ExecStart =/ home / git / apps / gogs / gogs web And comment out After=mariadb.service mysqld.service ... , for here we use SQLite3 instead of mariadb, etc. Copy the file into folder /etc/systemd/system and run: sudo systemctl enable gogs sudo systemctl start gogs There's also an init.d script provided, which is more complicated to configure than the systemd equivalent. Note: Don't use existing user as the gogs Run User . Thus the normal SSH connection will be interfered by Gogs. Backup and Restore Backup: ./gogs backup and save the created file in the current folder: gogs-backup-xxx.zip . Restore: ./gogs restore --from=\"gogs-backup-xxx.zip\" . Notice that the user name of the backup and restore must be the same, or the restore will failed. Follow How to backup, restore and migrate for details. Clone with SSH After adding the client's SSH public key in Gogs Your Settings > SSH Keys , I could push an existing repository to Gogs: git remote add gogs git @172.18.0.244 : leo / programming - style . git git push gogs master And clone it from Gogs: git clone git@172.18.0.244:leo/programming-style.git . Under the hood, Gogs add something like the following lines to file ~/.ssh/authorized_keys of user git : command = \"/home/git/apps/gogs/gogs serv key-1 --config='/home/git/apps/gogs/custo m/conf/app.ini'\" , no - port - forwarding , no - X11 - forwarding , no - agent - forwarding , no - pty ssh - rsa < your - pub - key > So if you can't push via ssh, check if the contents in authorized_keys is generated correctly.","tags":"Tech","url":"http://leetschau.github.io/build-self-hosted-git-service-on-private-host.html","loc":"http://leetschau.github.io/build-self-hosted-git-service-on-private-host.html"},{"title":"Default Parameter in Python","text":"The following codes demonstrates the default parameters usage in Python: $ cat default_params . py import sys def myfunc ( app_name , props = '[]' , master_name = \"yarn\" ): return \" %s : method: %s ; master_name: %s \" % ( app_name , props , master_name ) if __name__ == \"__main__\" : if len ( sys . argv ) == 1 : print ( myfunc ( \"default app\" , master_name = 'default master' )) elif len ( sys . argv ) == 2 : print ( myfunc ( sys . argv [ 1 ], master_name = 'local' )) elif len ( sys . argv ) == 3 : print ( myfunc ( sys . argv [ 1 ], sys . argv [ 2 ])) else : print ( myfunc ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 3 ])) $ python default_params . py default app : method : []; master_name : default master $ python default_params . py appname appname : method : []; master_name : local $ python default_params . py appname myprops appname : method : myprops ; master_name : yarn $ python default_params . py appname proplist 'local[2]' appname : method : proplist ; master_name : local [ 2 ] It's NOT recommended to use collection object (for example: list) as default parameters, see Default Parameter Values in Python for details.","tags":"Tech","url":"http://leetschau.github.io/default-parameter-in-python.html","loc":"http://leetschau.github.io/default-parameter-in-python.html"},{"title":"`diff` Function in R base Package","text":"For the function diff in base package of R, the parameter lag means the difference between which 2 element, the default value is 1. If lag=2 , the difference will be calculated between the 3rd and 1st ( 5-1 below), the 4th and the 2nd ( 8-3 ), etc. The parameter differences is how many time the differences is calculated. The default value is 1. If differences=2 , there will be one more difference calculation on the first difference result ( 2 2 3 4 75 below): > inputs <- c ( 1 , 3 , 5 , 8 , 12 , 87 ) > diff ( inputs ) [1] 2 2 3 4 75 > diff ( inputs , lag = 2 ) [1] 4 5 7 79 > diff ( inputs , differences = 2 ) [1] 0 1 1 71 Ref: \"What does the diff() function in R do?\" on SO.","tags":"Tech","url":"http://leetschau.github.io/diff-function-in-r-base-package.html","loc":"http://leetschau.github.io/diff-function-in-r-base-package.html"},{"title":"Install Neovim and Plugins","text":"Install and Configure Install neovim on Ubuntu 16.04 server: take $ HOME / apps / neovim curl - LO https : // github . com / neovim / neovim / releases / download / nightly / nvim . appimage chmod u + x nvim . appimage . / nvim . appimage # test running echo 'alias vi=\"$HOME/apps/neovim/nvim.appimage\"' >> ~/ . bash_aliases cd ~ curl - fLo ~/ . local / share / nvim / site / autoload / plug . vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim cp ~/ . vimrc ~/ . config / nvim / init . vim pip3 install --user neovim # to enable neovim using Python plugin Current installed plugins list: call plug # begin () Plug ' roxma/nvim-completion-manager ' Plug ' SirVer/ultisnips ' Plug ' honza/vim-snippets ' Plug ' brooth/far.vim ' Plug ' kien/ctrlp.vim ' Plug ' gabrielelana/vim-markdown ' Plug ' scrooloose/nerdtree ' Plug ' Xuyuanp/nerdtree-git-plugin ' Plug ' tpope/vim-fugitive ' Plug ' fholgado/minibufexpl.vim ' Plug ' mbbill/undotree ' Plug ' geoffharcourt/vim-matchit ' Plug ' ervandew/supertab ' Plug ' python-mode/python-mode ' Plug ' szw/vim-maximizer ' Plug ' scrooloose/nerdcommenter ' call plug # end () Connecting with System Clipboard On my Linux Mint laptop, first install xclip with sudo apt install xclip , Then add set clipboard+=unnamedplus into ~/.config/nvim/init.vim. See :h clipboard for details.","tags":"Tech","url":"http://leetschau.github.io/install-neovim-and-plugins.html","loc":"http://leetschau.github.io/install-neovim-and-plugins.html"},{"title":"Run Spark on Yarn Cluster","text":"Run WordCount on 3-Node Yarn Cluster According to How to Install and Set Up a 3-Node Hadoop Cluster . Create 3 Ubuntu 16.04 hosts with vagrant on Lenovo ThinkCenter. Configure the network, hostname and IP address in each Vagrantfile. The memory should be no less than 8GB for each host. Or you have to configure yarn's memory usage manually. The node-master Vagrantfile: # -*- mode : ruby -*- Vagrant . configure ( 2 ) do | config | config . vm . box = \" ubuntu/xenial64 \" config . ssh . username = \" ubuntu \" config . ssh . password = \" 3d7d18ebe09a49ff99028120 \" config . vm . define \" yarnmaster \" config . vm . hostname = \" nodemaster \" config . vm . network \" private_network \" , ip : \" 192.0.2.1 \" config . vm . provider \" virtualbox \" do | vb | vb . memory = \" 8192 \" end end Add the following lines into /etc/hosts of each host: 192 . 0 . 2 . 1 node - master 192 . 0 . 2 . 2 node1 192 . 0 . 2 . 3 node2 Install JDK on each host: sudo apt update sudo apt install - y openjdk - 8 - jdk Create hadoop user on each host: sudo useradd - m hadoop sudo passwd hadoop # input password : hadoop Configure SSH access: on node-master: sudo su - hadoop ssh - keygen ssh - copy - id hadoop @node - master ssh - copy - id hadoop @node1 ssh - copy - id hadoop @node2 Install Hadoop as user hadoop on node-master and duplicate to other nodes: wget http : // mirror . bit . edu . cn / apache / hadoop / common / hadoop - 2 . 9 . 0 / hadoop - 2 . 9 . 0 . tar . gz tar xf hadoop - 2 . 9 . 0 . tar . gz mv hadoop - 2 . 9 . 0 hadoop echo 'PATH=/home/hadoop/hadoop/bin:/home/hadoop/hadoop/sbin:$PATH' >> $ HOME / . profile Modify files under ~/hadoop/etc/hadoop/ and duplicate the files on each node: scp - r hadoop node1 : ~/ scp - r hadoop node2 : ~/ scp . profile node1 : ~/ scp . profile node2 : ~/ Note 1: Spark 2.2.1 using Hadoop 2.7+, so we download Hadoop 2.9.0. Note 2: The memory of each host is 8GB. So I didn't modify the memory configurations. Start HDFS: on node-master, run: hdfs namenode -format start-dfs . sh jps # on node-master : NameNode and SecondaryNameNode ; on node1 / 2 : DataNode hdfs dfsadmin -report hdfs dfs -mkdir -p / user / hadoop wget -O alice . txt https :// www . gutenberg . org / files / 11 / 11-0 . txt wget -O holmes . txt https :// www . gutenberg . org / ebooks / 1661 . txt . utf-8 wget -O frankenstein . txt https :// www . gutenberg . org / ebooks / 84 . txt . utf-8 hdfs dfs -mkdir books hdfs dfs -put alice . txt holmes . txt frankenstein . txt books # on node1 : hdfs dfs -get books / alice . txt Start Yarn and run a wordcount app: start-yarn . sh jps # on node-master : ResourceManager ; on node1 / 2 : NodeManager yarn node -list # this works on both node-master and node1 / 2 yarn application -list yarn jar ~/ hadoop / share / hadoop / mapreduce / hadoop-mapreduce-examples-2 . 9 . 0 . jar wordcount \"books/*\" output hdfs dfs -ls output Run Spark on Yarn According to Install, Configure, and Run Spark on Top of a Hadoop YARN Cluster . Download and install Spark on each host (as user hadoop ): cd / home / hadoop wget https : // d3kbcqa49mib13 . cloudfront . net / spark - 2 . 2 . 0 - bin - hadoop2 . 7 . tgz tar - xvf spark - 2 . 2 . 0 - bin - hadoop2 . 7 . tgz mv spark - 2 . 2 . 0 - bin - hadoop2 . 7 spark Edit ~/.profile : export PATH =/ home / hadoop / spark / bin : $ PATH export HADOOP_CONF_DIR =/ home / hadoop / hadoop / etc / hadoop export SPARK_HOME =/ home / hadoop / spark export LD_LIBRARY_PATH =/ home / hadoop / hadoop / lib / native : $ LD_LIBRARY_PATH Run spark-shell on node-master, some errors raised. In the spark-shell, the spark variable doesn't exists.","tags":"Tech","url":"http://leetschau.github.io/run-spark-on-yarn-cluster.html","loc":"http://leetschau.github.io/run-spark-on-yarn-cluster.html"},{"title":"HDP Notes","text":"Today I downloaded Hortonworks HDP Sandbox (filename: HDP_2.6.4_virtualbox_01_02_2018_1428.ova). After importing it into virtualbox on Windows laptop, it stucked when showing \"Waiting for amberi agent to connect\". Then I uploaded the ova file to TC, and import it to virtualbox: vboxmanage import HDP_2.6.4_virtualbox_01_02_2018_1428.ova -- vsys 0 -- vmname hdpSandbox2 . 6.4 vboxmanage list vms vboxmanage list runningvms vboxmanage startvm hdpSandbox2 . 6.4 -- type headless ssh root @localhost - p 2222 # default password: hadoop Add the following into ~/.ssh/config of host machine to simplify ssh login: Host hort Hostname localhost User root Port 2222 However, the port forwarding in this vm is all binding to localhost, which can't be access outside the TC server. But there are lots of web server which can only be accessed from browser. So I had to modify all port forwarding to enable accessing from outside. There are more than 60 port forwarding rules in this vm like this (get these rules with vboxmanage showvminfo hdpSandbox2.6.4 | less ): NIC 1 Rule ( 53 ): name = Tutorials , protocol = tcp , host ip = 127 . 0 . 0 . 1 , host port = 8888 , guest ip = , guest port = 8888 which should be modified to: NIC 1 Rule ( 53 ): name = Tutorials , protocol = tcp , host ip = , host port = 8888 , guest ip = , guest port = 8888 with the following commands: vboxmanage modifyvm hdpSandbox2 . 6 . 4 --natpf1 delete Tutorials vboxmanage modifyvm hdpSandbox2 . 6 . 4 --natpf1 \"Tutorials,tcp,,8888,,8888\" VirtualBox has no command to modify rules directly, you have to delete the old one, then create a new one. It's very boring to modify them manually. So I write a Python script to build a shell script, Then run the shell script to modify the vm: $ cat << EOF > buildcmds.py lines = open('origin26.log').read().split('\\n') rules = filter(lambda x: x.startswith('NIC 1 Rule'), lines) nameports = map(lambda x: (x.split('name = ')[1].split(',')[0], x.split(' ')[-1]), rules) new_rules = map(lambda x: ('vboxmanage modifyvm hdpSandbox2.6.4 --natpf1 delete %s\\n' 'vboxmanage modifyvm hdpSandbox2.6.4 --natpf1 \"%s,tcp,,%s,,%s\"') % (x[0], x[0], x[1], x[1]), nameports) with open('buildrules.sh', 'w') as f: f.write('\\n'.join(new_rules)) EOF $ python buildcmds.py $ bash buildrules.sh Now I can access the HDP vm with http://172.18.0.253:8080 in browser. The admin password should be modified: ssh hort ambari - admin - password - reset Now login with user name admin and password you set. Note: I tried to modify the vm's network from NAT to bridged, but it didn't work: vboxmanage controlvm hdpSandbox2 . 6 . 4 savestate vboxmanage startvm hdpSandbox2 . 6 . 4 --type headless vboxmanage controlvm hdpSandbox2 . 6 . 4 poweroff vboxmanage modifyvm hdpSandbox2 . 6 . 4 --nic2 bridged --bridgeadapter2 eth1 vboxmanage modifyvm hdpSandbox2 . 6 . 4 --nic2 none vboxmanage modifyvm hdpSandbox2 . 6 . 4 --nic1 bridged --bridgeadapter1 eth0","tags":"Tech","url":"http://leetschau.github.io/hdp-notes.html","loc":"http://leetschau.github.io/hdp-notes.html"},{"title":"Compile and Install Python 3.5 on CentOS 6.8","text":"The default Python version is 2.6 on CentOS 6.8, which is toooo out-dated. Now compile and install Python 3.5: cd / opt mkdir python35 curl - O https : // www . python . org / ftp / python / 3 . 5 . 0 / Python - 3 . 5 . 0 . tgz tar xf Python - 3 . 5 . 0 . tgz cd Python - 3 . 5 . 0 . / configure --prefix=/opt/python35 make make install The key is using --prefix when ./configure to specify where to install. However, if you have no plan to remove Python 3 in the future, it's unnecessary to add --prefix option when running ./configure . Because Python executable will be installed as python3.5 and python3 , which doesn't conflict with the default Python. Note: If there are errors during the compile process, try the following codes: sudo yum install yum - utils sudo yum - builddep python See How to install Python3 on CentOS for details. Ref: https://unix.stackexchange.com/questions/2502/using-different-versions-of-python","tags":"Tech","url":"http://leetschau.github.io/compile-and-install-python-35-on-centos-68.html","loc":"http://leetschau.github.io/compile-and-install-python-35-on-centos-68.html"},{"title":"Spark Job Monitor","text":"Yarn ResourceManager: http://192.168.12.190:8088/ SparkContext UI: http://192.168.12.190:4040 (only exists when app is running) Spark History Server: http://192.168.12.194:18089/ (default port is 18080) Ref: Monitoring and Instrumentation YARN Service Ports","tags":"Tech","url":"http://leetschau.github.io/spark-job-monitor.html","loc":"http://leetschau.github.io/spark-job-monitor.html"},{"title":"Analysis Relationship between Nominal and Continuous Data","text":"Ref: \"How do we know whether we use t-test, ANOVA, chi-square, correlation, or regression analysis?\" on Quora T-test: Compares the means of a variable from two groups. An independent t-test compares the means of two different groups (e.g., reaction times on a task for women vs. men), whereas a paired t-test compares the means of the same group at two different times (e.g., reaction times for the same people on a task before or after a training period). ANOVA: Compares the means of 3 or more groups. Repeated-measures ANOVA is used when it is the same group of people in each group, as in a paired t-test. Chi-square: Comparing nominal data (e.g, # of correct responses). Correlation: Measuring the strength of a relationship between two continuous variables (e.g., height and age). Regression: Similar to correlation, but used to define the relationship between two continuous variables such that you can then make predictions . For example, after finding the equation that best describes the relationship between height and age in your sample, can then predict the height of someone of an age not in your sample.","tags":"Tech","url":"http://leetschau.github.io/analysis-relationship-between-nominal-and-continuous-data.html","loc":"http://leetschau.github.io/analysis-relationship-between-nominal-and-continuous-data.html"},{"title":"Random Variable Distributions in R","text":"library ( car ) set.seed ( 42 ) x <- rnorm ( 100 ) qqPlot ( x ) y <- rgamma ( 100 , 1 ) qqPlot ( y ) plot ( density ( rf ( 10 , 2 , 2 ))) # F distribution plot ( density ( rt ( 10 , 2 , 2 ))) # t distribution plot ( density ( rchisq ( 10 , 2 , 2 ))) # chi-square distribution Ref: Probability Plots QQPlot: how to see whether data are normally distributed","tags":"Tech","url":"http://leetschau.github.io/random-variable-distributions-in-r.html","loc":"http://leetschau.github.io/random-variable-distributions-in-r.html"},{"title":"Call Method in Parent Class in Python","text":"You can call the method of the parent class by its name directly: $ cat callpm.py class A () : def bar ( self, string ) : print ( \"Hi, I'm bar, inherited from A\" + string ) class B ( A ) : def baz ( self ) : self.bar ( \" - called by baz in B\" ) B () .baz () $ python --version Python 3 .6.3 :: Anaconda, Inc. $ python callpm.py Hi, I ' m bar, inherited from A - called by baz in B","tags":"Tech","url":"http://leetschau.github.io/call-method-in-parent-class-in-python.html","loc":"http://leetschau.github.io/call-method-in-parent-class-in-python.html"},{"title":"Feature Selection in Machine Learning","text":"Overview Feature selection on Wikipedia scikit-learn doc: 1.13. Feature selection An Introduction to Feature Selection Feature selection of book Ensemble Machine Learning by Ankit Dixit: the workflow chart is excellent. Implementation Recursive feature elimination with cross-validation Recursive feature elimination with cross-validation Keywords: Python, RFECV Extracting Features with Transformers Keywords: Python, SelectKBest , chi2 Data source: Adult Chapter 5 of \"Learning Data Mining with Python\" by Robert Layton X = adult [[ \"Age\" , \"Education-Num\" , \"Capital-gain\" , \"Capital-loss\" , \"Hours-per-week\" ]] . values y = ( adult [ \"Earnings-Raw\" ] == ' >50K' ) . values from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2 transformer = SelectKBest ( score_func = chi2 , k = 3 ) Xt_chi2 = transformer . fit_transform ( X , y ) from sklearn.tree import DecisionTreeClassifier from sklearn.cross_validation import cross_val_score clf = DecisionTreeClassifier ( random_state = 14 ) scores_chi2 = cross_val_score ( clf , Xt_chi2 , y , scoring = 'accuracy' ) print ( \"Chi2 performance: {0:.3f}\" . format ( scores_chi2 . mean ())) Feature selection for machine learning Feature selection for machine learning of book Ensemble Machine Learning . Keywords: Python Data source: Pima Indians Diabetes dataset Note: Feature Selection For Machine Learning in Python is almost the same with this chapter. Feature Selection in Python with Scikit-Learn Feature Selection in Python with Scikit-Learn Data source: Iris Feature Selection with the Caret R Package Feature Selection with the Caret R Package Keywords: R, Data source: Pima Indians Diabetes dataset Logistic Regression Section 13.2 in \"R in Action\". Keywords: R, logistic Data source: Affairs","tags":"Tech","url":"http://leetschau.github.io/feature-selection-in-machine-learning.html","loc":"http://leetschau.github.io/feature-selection-in-machine-learning.html"},{"title":"Python Data Analysis Environment in RStudio-Server Style","text":"Demo Code Wavelet Denoise Run the folling codes as test case: import numpy as np import matplotlib.pyplot as plt import pywt original = pywt . data . camera () noiseSigma = 16.0 image = original + np . random . normal ( 0 , noiseSigma , size = original . shape ) wavelet = pywt . Wavelet ( 'haar' ) levels = int ( np . floor ( np . log2 ( image . shape [ 0 ]))) waveletCoeffs = pywt . wavedec2 ( image , wavelet , level = levels ) threshold = noiseSigma * np . sqrt ( 2 * np . log2 ( image . size )) newWaveletCoeffs = list ( map ( lambda x : pywt . threshold ( x , threshold ), waveletCoeffs )) newImage = pywt . waverec2 ( newWaveletCoeffs , wavelet ) plt . imshow ( original ) plt . imshow ( image ) plt . imshow ( newImage ) Visual Studio Code See dsnote Visual Studio Code Notes for initial setup. Install Python Extension Pack and VS Code Jupyter Notebook Previewer in the Extensions bar. After the Python language server pack is downloaded and installed (see the progression in the status bar), restart VSC. Now you have 3 options: shift+enter: run selected codes (or current line) in Python console provided by Python Extension Pack. You need specify the conda environment with Python: Select interpreter in command palette. Then it starts conda environment automatically. But no way to use IPython console; ctrl+enter: run selected codes (or current line) in active terminal. This is implemented by add keyboard shortcut in user's keybindings.json file, see dsnote \"Visual Studio Code Notes\" for details. You need specify conda environment and start Python shell IPython console manually. For a feature (bug?) of IPython, you can't send multiple lines to IPython shell. You can use bpython or ptpython shell instead (install with pip). ctrl+alt+enter: run in Jupyter notebook provided by VS Code Jupyter Notebook Previewer . Output to Jupyter notebook instead of console let you see the plot right after the plot command (for example, plt.imshow(newImage) in above codes), without plt.show() , which is necessary for image show in console. Spyder This is the most light-weight solution except bare IPython console, It's included in Anaconda package, so no need to install. The keyboard shortcuts and image display are both good. You can jump between editor and embedded IPython console easily. And run current line or selected block easily with Keyboard shortcuts. The main problem is the lost of funding of this project(2018.9). The developers work mainly for maintaining 3.x version, and the lack of vim mode plugin. (There's one on github but not published to conda). See dsnote Spyder Notes for details. Rodeo Verified on Ubuntu 16.04. Jupyter notebook has no console with notebook. Rodeo has console with notebook in RStudio style. But Rodeo has no server edition. And by far Rodeo only support .py format. You can't write Jupyter notebook in Rodeo. Another problem is the Keyboard shortcuts. Rodeo use Alt-Enter to run current line, which is conflict with i3wm. And there's NO way to customize this shortcut. So Rodeo is a good exploring and analyse environment, while Jupyter notebook is good for presenting the results. I installed Rodeo's Linux editon on the server. SSH to server from my laptop in MobaXterm and run: . activate anaconda cd < project_root > / opt / Rodeo / rodeo Or set python path in Preferences , so no need to start Rodeo in virtual environment. Highlights: vim-mode in editor: [Preferences > Editor > Key Bindings] to vim ; Better code hints and completion of module names, function names, function parameters in both editor and console, than Jupyter notebook; To set working directory in session level, run cd <target-foder> in console window. To set working directory in system level, set the path in [Preferences > Python > Default Working Directory]. Changing the font size [Preferences > Global > Font Size]. Useful key shortcuts: Ctrl-1: jump to editor; Ctrl-2: jump to console; Ctrl-,: open preference window; Ctrl-Enter: run the current line, or run selected multiple lines, which is very convenient in vim-mode; See http://rodeo.yhat.com/docs/#keyboard-shortcuts for all shortcuts. Jupyter Notebook See dsnote \"Jupyter Notebook Notes\". Enthought Canopy Verified on Ubuntu 16.04. Likes Rodeo, this IDE puts text editor and console side by side, so you can run the current script (Ctrl-R) or selected text (Ctrl-Shift-R) in console easily. Jump between editor and console with Ctrl-Tab . Canopy supports image display inline. To install Canopy, download the installer (a .sh file more than 600MB), make it executable and run. Then start Canopy with https_proxy=https://localhost:1080 http_proxy=https://localhost:1080 ./canopy , because it's package manager will be stuck without the proxy. Canopy uses its own package manager. Start it in welcome page, or [Window -> Package Manager] in editor. Config the proxy settings in [Edit -> Preferences -> Network]. Choose System settings and click button Test connection setup . It has no vim bindings. It auto-completion looks better than Rodeo. For example, when in a function, it can auto-complete the name of the parameters with TAB key, while Rodeo can't. It creates some folders in the home directory, which is annoying. Wing IDE To make Wing use Anaconda environment, set [Project > Project Properties > Python Executable] to the python executable in the target environment, for example: /home/leo/apps/miniconda3/envs/anaconda/bin/python . Then check it with [Source > Show Python Environment > Effective Python Path]. To use vim mode in editor, set [Edit > Preferences > User Interface > Keyboard > Personality] to \"VI/VIM\". To run current line or selected texts in Python console with keyboard shortcut Shift-Enter , build a script (such as \"myfunc.py\") in the folder \"~/.wingpersonal6/scripts\", which is defined at [Edit > Preferences > IDE Extension Scripting > Search Path]. In this file add the following functions: import wingapi def runCurLine (): app = wingapi . gApplication app . ExecuteCommand ( 'evaluate-sel-in-shell' , restart_shell = False , whole_lines = True ) app . ExecuteCommand ( 'focus-current-editor' ) app . ExecuteCommand ( 'exit-visual-mode' ) Then in [Edit > Preferences > User Interface > Keyboard > Custom Key Bindings], click \"Insert\" button. Press Shift-Enter when \"Key\" is focused. Input runCurLine in \"Command\" text box, which is the function name defined in your script file. To focus Pythn shell with keyboard, add the following function into your script file: def focusShell () : app = wingapi . gApplication app . ExecuteCommand ( ' show-panel-python-shell ' , flash = True , grab_focus = True ) In [Edit > Preferences > User Interface > Keyboard > Custom Key Bindings], click \"Insert\" button. Press Alt-u when \"Key\" is focused. Input focusShell in \"Command\" text box. Or input show-panel-python-shell in \"Command\" text box, so no need to define a custom function. Now you can focus Python shell with Alt-u . Focus editor with ESC key. Note: Test a command Wing provided (such as show-panel-python-shell ), or user-defined (such as focusShell ) by [Edit > Command by Name]. After modified a function, save your script file and reload it in Wing with [Edit > Reload All Scripts]. Problems Wing can't embed image into the IDE environment. The image window is a new window seperating from the IDE. The process of drawing the image persists until you close the image window. PyCharm PyCharm's project-oriented workflow makes it suitable for project development, instead of casual data exploration. The latter is fit for file-oriented workflow. Send current cell (a cell is a code block seperated by #%% , which is the same with that in Spyder) to console with Shift-Enter . Pycharm's Scientific Mode (toggle with [View > Scientific Mode]) is exellent for data exploration, for smart code auto-completion, embeded image and documentation window. Pycharm need relatively large memory resources, or it will very slow. Jupyter notebook support in Pycharm is still poor. Keyboard shortcuts doesn't work. Connecting to Jupyterhub failed, so you can't run codes in a notebook.","tags":"Tech","url":"http://leetschau.github.io/python-data-analysis-environment-in-rstudio-server-style.html","loc":"http://leetschau.github.io/python-data-analysis-environment-in-rstudio-server-style.html"},{"title":"Change Encoding of R Data Object","text":"R can't specify file encoding when loading from file. So we have to convert encoding after loading. The following codes convert data with GBK encoding (which can't display properly in browser connected to a rstudio-server on Ubuntu), to UTF-8 encoding, which can display properly: > load ( \"gbkobj.RData\" ) > head ( gbkobj ) \\xc9\\xe7\\xc7\\xf8 \\xd0Ա\\xf0 ̬ \\xb6\\xc8 1 A\\xc9\\xe7\\xc7\\xf8 \\xc4\\xd0 \\xb7\\xb4\\xb6\\xd4 2 B\\xc9\\xe7\\xc7\\xf8 Ů \\xb7\\xb4\\xb6\\xd4 3 D\\xc9\\xe7\\xc7\\xf8 Ů \\xb7\\xb4\\xb6\\xd4 4 C\\xc9\\xe7\\xc7\\xf8 \\xc4\\xd0 \\xb7\\xb4\\xb6\\xd4 5 A\\xc9\\xe7\\xc7\\xf8 \\xc4\\xd0 \\xd4\\u07b3\\xc9 6 D\\xc9\\xe7\\xc7\\xf8 Ů \\xb7\\xb4\\xb6\\xd4 > colnames ( gbkobj ) <- iconv ( colnames ( gbkobj ), from = \"GBK\" , to = \"UTF-8\" ) > res <- as.data.frame ( lapply ( gbkobj , function ( x ) iconv ( x , from = \"GBK\" , to = \"UTF-8\" ))) > head ( res ) 社区 性别 态度 1 A社区 男 反对 2 B社区 女 反对 3 D社区 女 反对 4 C社区 男 反对 5 A社区 男 赞成 6 D社区 女 反对 Note: apply will convert a data frame to a matrix before applying functions. So here we use lapply instead. But lapply return a list, so we convert it to a data frame with as.data.frame function.","tags":"Tech","url":"http://leetschau.github.io/change-encoding-of-r-data-object.html","loc":"http://leetschau.github.io/change-encoding-of-r-data-object.html"},{"title":"Octave Notes","text":"Install and Run On Ubuntu 16.04: sudo apt - add - repository ppa : octave / stable sudo apt update sudo apt install octave Start in console: octave . On Winodows 10, download the binary file octave-4.2.1-w64.zip and extract. Then run octave.bat . Package Management The default package installation directory is ~/octave . So we need change it beforehand. pkg prefix ~/ . octave_pkgs pkg install - forge io pkg load io pkg list help xlsopen To change the prefix permanently, add pkg prefix ~/.octave_pkgs into file ~/.octaverc .","tags":"Tech","url":"http://leetschau.github.io/octave-notes.html","loc":"http://leetschau.github.io/octave-notes.html"},{"title":"Arima算法的基本原理","text":"时间序列分析以时间作为唯一的自变量，函数值（至少）由3部分组成： 长期趋势项、周期变化项和随机扰动项。 其中周期变化项可能包含多个周期的变化，例如以天为周期的变化、 以月为周期的变化、以年为周期的变化等。 采用自相关方法可以识别出函数值中的周期变化成分， 其原理是对于周期为t的变量X，把自身延后（lag）t后生成新变量X1， X与X1的相关系数会明显升高，具体实例见 统计思维 第二版（作者Allen Downey， 人民邮电出版社，2015.9，ISBN: 978-7-115-40108-3）12.7节对大麻价格的分析。 随机扰动项可以看作是服从正态分布的白噪声， 去掉这两项后，剩余的就是长期趋势项。 Arima预测值由最近的几次观测值加权后线性组合而成。 Note: 时间序列分析中可以包含除时间外的其他自变量，参考 Time series - Is Time the only independent variable?","tags":"Tech","url":"http://leetschau.github.io/arimasuan-fa-de-ji-ben-yuan-li.html","loc":"http://leetschau.github.io/arimasuan-fa-de-ji-ben-yuan-li.html"},{"title":"Basic Statistics Concepts","text":"假设测量一根木棒的长度10次，长度随机变量未X：4个基本统计量为： Variance: 方差，随机变量每个观测值与平均值差的平方和，量纲：样本单位的平方（平方米）， R函数： var(X) ; Standard deviation: 标准差，variance的平方根，量纲：样本单位（米）， R函数： sd(X) ;` Covariance: 协方差，两个变量间的相关度，当两个变量一样时，协方差就是方差。 量纲：样本单位的平方（平方米），R函数： cov(X) ; Correlation: 相关系数，无量纲化的协方差，取值范围在-1到1之间。 相同变量的相关系数永远为1，R函数： cor(X) . 凡是名字里有\"方\"的，比如方差和协方差，量纲都是样本量纲的平方； 名字里有\"系数\"的，表明无量纲。以R语言为例说明它们的计算方法和特点： X <- c ( .5 , .3 , -0.2 , 0.8 , -0.7 ) Y <- c ( 5 , 9 , -5 , 3 , -7 ) df <- data.frame ( X , Y ) summary ( df ) df_scaled <- scale ( df ) summary ( df_scaled ) mean ( df_scaled[ , 1 ] ) # 0 mean ( df_scaled[ , 2 ] ) # 0 sd ( df_scaled[ , 1 ] ) # 1 sd ( df_scaled[ , 2 ] ) # 1 cov ( df $ X , df $ Y ) # 3.2 cor ( df $ X , df $ Y ) # 0.7941156 cov ( df_scaled[ , 1 ] , df_scaled[ , 2 ] ) # 0.7941156 cor ( df_scaled[ , 1 ] , df_scaled[ , 2 ] ) # 0.7941156 cov ( df $ X , df $ X ) # 0.353 cor ( df $ X , df $ X ) # 1 cov ( df_scaled[ , 1 ] , df_scaled[ , 1 ] ) # 1 cor ( df_scaled[ , 1 ] , df_scaled[ , 1 ] ) # 1 上述代码表明 scale() 的作用是将随机变量标准化，也就是将其线性变换为 均值为0、方差为1的向量。 Ref: Covariance and correlation","tags":"Tech","url":"http://leetschau.github.io/basic-statistics-concepts.html","loc":"http://leetschau.github.io/basic-statistics-concepts.html"},{"title":"Install xlsx Package for RStudio Server","text":"The package xlsx need another package rJava , which need JDK, so you have to install JDK first, then config the path for RStudio, then restart RStudio server to take effect: ` sudo apt install openjdk-8-jdk sudo R CMD javareconf sudo rstudio-server restart Ref: Error of java path on loading rJava package on SO.","tags":"Tech","url":"http://leetschau.github.io/install-xlsx-package-for-rstudio-server.html","loc":"http://leetschau.github.io/install-xlsx-package-for-rstudio-server.html"},{"title":"Encoding Categorial Data in Machine Learning","text":"For example there is a input file categorical_input.csv : patientID , age , diabetesType , status 1 , 25 , Type1 , Poor 2 , 34 , Type2 , Improved 3 , 28 , Type1 , Excellent 4 , 52 , Type1 , Poor Notice there are NO space after comma, or the data will be wrong after loaded We need load it into a dataframe with right type: the diabetesType is a nominal feature, and status is a ordinal feature. R R encodes category data via function factor . To encode nominal feature, use factor(vec) . To encode ordinal feature, use factor(vec, order=TRUE, levels=c(\"Poor\", \"Improved\", \"Excellent\")) . See section 2.2.5 \"Factors\" in \"R in Action\" for details. > diabetes <- read.table ( \"categorical_input.csv\" , header = TRUE , row.names = \"patientID\" , sep = \",\" , stringsAsFactors = FALSE ) > diabetes <- transform ( diabetes , status = factor ( status , ordered = TRUE , levels = c ( \"Poor\" , \"Improved\" , \"Excellent\" ))) > diabetes <- transform ( diabetes , diabetesType = factor ( diabetesType )) > str ( diabetes ) 'data.frame' : 4 obs. of 3 variables : $ age : int 25 34 28 52 $ diabetesType : Factor w / 2 levels \"Type1\" , \"Type2\" : 1 2 1 1 $ status : Ord.factor w / 3 levels \"Poor\" < \"Improved\" < .. : 1 2 3 1 > diabetes $ status <- as.integer ( diabetes $ status ) # convert categorial feature to numeric > str ( diabetes ) 'data.frame' : 4 obs. of 3 variables : $ age : int 25 34 28 52 $ diabetesType : Factor w / 2 levels \"Type1\" , \"Type2\" : 1 2 1 1 $ status : int 1 2 3 1 Python import pandas as pd import numpy as np print ( pd . __version__ ) 0.20 . 3 diabetes = pd . read_csv ( 'categorical_input.csv' , index_col = 'patientID' , dtype = { 'age' : np . float , 'diabetesType' : 'category' , 'status' : 'category' }) print ( diabetes [ 'status' ]) patientID 1 Poor 2 Improved 3 Excellent 4 Poor Name : status , dtype : category Categories ( 3 , object ): [ Excellent , Improved , Poor ] status = diabetes [ 'status' ] status . cat . set_categories ([ 'Poor' , 'Improved' , 'Excellent' ], ordered = True , inplace = True ) diabetes [ 'status' ] patientID 1 Poor 2 Improved 3 Excellent 4 Poor Name : status , dtype : category Categories ( 3 , object ): [ Poor < Improved < Excellent ] # convert categorical feature to numeric status_mapping = { 'Poor' : 1 , 'Improved' : 2 , 'Excellent' : 3 } diabetes [ 'status' ] = diabetes [ 'status' ] . map ( status_mapping ) # convert it back inv_status_mapping = { v : k for k , v in status_mapping . items ()} diabetes [ 'status' ] = diabetes [ 'status' ] . map ( inv_status_mapping ) Ref: * Categorical Data in pandas (0.20.3) doc. Section Mapping ordinal features in book \"Python Machine Learning\" 2ed by Sebastian Raschka. For categorial data encoding, R is more mature than Python.","tags":"Tech","url":"http://leetschau.github.io/encoding-categorial-data-in-machine-learning.html","loc":"http://leetschau.github.io/encoding-categorial-data-in-machine-learning.html"},{"title":"Games in Linux Console","text":"Tetris: sudo apt-get install bastet , bastet ; Greed: sudo apt-get install greed , greed ; moon-buggy: sudo apt-get install moon-buggy , moon-buggy ; nInvaders: sudo apt-get install ninvaders , ninvaders ; nSnake: sudo apt-get install nsnake , nsnake ; Pacman: sudo apt-get install pacman4console , pacman4console ; Sudoku: sudo apt-get install sudoku , sudoku ; Nethack: sudo apt-get install nethack-console , nethack ; Robot Finds Kitten: sudo apt-get install robotfindskitten , robotfindskitten ; CDDA ; zangband: sudo apt-get install zangband , zangband (use Q to quit the game);","tags":"Tech","url":"http://leetschau.github.io/games-in-linux-console.html","loc":"http://leetschau.github.io/games-in-linux-console.html"},{"title":"Python Unit Test with unittest","text":"Suppose there is such a test module: $ cat src / test / py / test_input . py import unittest import sys sys . path . append ( 'src/main/py' ) from com.dhcc.gics.driver.PythonDriver import run_app # nopep8 class TestInput ( unittest . TestCase ): def test_sample_input ( self ): modelfile = \"\"\"[ { \"stepId\": \"InputData\", \"stepName\": \"Sample数据输入\", \"stepType\": \"SampleInputStep\", \"parameters\": { \"url\": \"some sample data\" }, \"ancestors\": [], \"descendants\": [] } ]\"\"\" res = run_app ( modelfile , \"demoapp\" ) self . assertEqual ( 3 , res . count ()) self . assertAlmostEqual ( 32.7 , res . head () . asDict ()[ 'value' ], places = 4 ) Run all test cases in a module: python -m unittest src.test.py.test_input . Run a specific test case in a module: python -m unittest src.test.py.test_input.TestInput.test_sample_input .","tags":"Tech","url":"http://leetschau.github.io/python-unit-test-with-unittest.html","loc":"http://leetschau.github.io/python-unit-test-with-unittest.html"},{"title":"Estimator, Transformer and Pipeline in Machine Learning","text":"Main concepts in Pipelines (in Spark Docs > Programming Guides > Machine Learning Library (MLlib) Guide > ML Pipelines) gives a good introduction to these 3 concepts. A dataframe is converted to a model (which is a transformser ) via the fit() method of an estimator . A dataframe is converted to another dataframe via the transform() method of a transformer . A pipeline is an estimator , which is consisted by many transformer s and estimator s. The document provides an example of above concepts. A text processing pipeline built with 2 transformers ( Tokenizer and HashingTF ) and an estimator ( LogisticRegression ). The input of the fit() method of the pipeline is raw text in dataframe. The output is a model ( transformer ), which is used to predict new text. As the documents mentioned, the pipeline and related concepts are mostly inspired by scikit-learn. So these concepts in scikit-learn have the same meanings.","tags":"Tech","url":"http://leetschau.github.io/estimator-transformer-and-pipeline-in-machine-learning.html","loc":"http://leetschau.github.io/estimator-transformer-and-pipeline-in-machine-learning.html"},{"title":"Symbolic Integration Tools","text":"Calculate the equations in \"Introduction to Probability Models\" 11th editon, section 2.3.2: $$ F(a) = \\int_0&#94;a \\lambda e&#94;{-\\lambda x} dx \\qquad a \\ge 0, \\lambda > 0 $$ $$ \\int_0&#94;\\infty \\lambda e&#94;{-\\lambda x} dx \\qquad \\lambda > 0 $$ WolframAlpha Integral from 0 to a : Integrate[\\[Lambda] e&#94;(-\\[Lambda] x), {x, 0, a}] Integral from 0 to infinity: Integrate[\\[Lambda] e&#94;(-\\[Lambda] x), {x, 0, Infinity}] . With assumptions: Integrate[\\[Lambda] e&#94;(-\\[Lambda] x), {x, 0, Infinity}, assumptions -> \\[Lambda] > 0] . Or put assumptions outside the expression: assuming[\\[Lambda] > 0, Integrate[\\[Lambda] e&#94;(-\\[Lambda] x), {x, 0, Infinity}]] . Sympy from sympy import integrate , oo , exp , init_printing from sympy.assumptions import assuming from sympy.abc import x , lamda , a init_printing () with assuming ( a >= 0 , lamda > 0 ): res1 = integrate ( lamda * exp ( - 1 * lamda * x ), x ) res2 = integrate ( lamda * exp ( - 1 * lamda * x ), ( x , 0 , oo )) The display effect of math equations in jupyter notebook is better then in ipython console. SageMath %var x , lmd assume ( lmd > 0 ) integral ( lmd * exp ( - 1 * lmd * x ), x ) integral ( lmd * exp ( - 1 * lmd * x ), x , 0 , oo ) No time to implementations in Maxima today. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/symbolic-integration-tools.html","loc":"http://leetschau.github.io/symbolic-integration-tools.html"},{"title":"Plot Functions","text":"2D plot in R To visualize a function, we need plot it. A minimal example: curve(sin(x), -2*pi, 2*pi) . The following codes demonstrates the sigmoid function used by logistic regression: $$f(x) = \\frac{1}{1 + e&#94;{-x}}$$ curve(1 / (1 + exp(-x)), -5, 5) , or plot(function(x) { 1 / (1 + exp(-x)) }, -5, 5) , or give the function a name: sigmoid <- function ( x ) { 1 / ( 1 + exp ( - x )) } plot ( sigmoid , -5 , 5 ) 3D Plot How to plot multivariable function, such as \\(f(x, y) = x&#94;2 + y&#94;2\\) ? Online Solutions Using Cocalc Create a new project and a new Sage Worksheet on CoCalc . Input the following codes: %var u v plot3d ( 2 &#94; ( - u &#94; 2 + v &#94; 2 ),[ u , - 2 , 2 ],[ v , - 2 , 2 ]) Using WolframAlpha Input 3d plot z=x&#94;2+y&#94;2 into the inputbox of WolframAlpha . Desktop App Download and install Windows version of maxima (about 100MB) and install it. Then start Maxima (command line) from start menu. It also has Linux and Android distributions. In the console, input plot3d(2&#94;(-u&#94;2+v&#94;2),[u,-2,2],[v,-2,2]); (notice the semicolon), the plot image is interactive. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/plot-functions.html","loc":"http://leetschau.github.io/plot-functions.html"},{"title":"Read Table Data from MySQL in PySpark","text":"Verified on Spark 2.2. First copy file mysql-connector-java-5.1.40.jar into folder $SPARK_HOME/jars . Then get the data in table table_name from MySQL service 192.168.110.3:3306/avatar with: url = \"jdbc:mysql://192.168.110.3:3306/avatar\" df = spark_session . read . jdbc ( url , table_name , properties = { 'user' : username , 'password' : password , 'driver' : 'com.mysql.jdbc.Driver' } )","tags":"Tech","url":"http://leetschau.github.io/read-table-data-from-mysql-in-pyspark.html","loc":"http://leetschau.github.io/read-table-data-from-mysql-in-pyspark.html"},{"title":"WiFi Sniffer Notes","text":"airmon-ng The wireless card Ralink RT5370 was bought from taobao seller 铠睿科技. Plug it into the USB hub and run the following commands: sudo apt - get update sudo apt - get install aircrack - ng sudo airmon - ng # got * phy0 * in the row with * Interface * wlxc83a35b05bb9 under column * Driver * iw phy0 info # see * monitor * in * Supported interface mode * section , # which mean this card support monitor mode iwconifg # see * Mode : Managed * in section * wlxc83a35b05bb9 * sudo airmon - ng start wlxc83a35b05bb9 # start a new interface in monitor mode iwconfig # see \" Mode: Monitor* in section *mon0* # while wlxc83a35b05bb9 still in managed mode sudo airodump - ng mon0 # get chanel and bssid of the target AP sudo airodump - ng - c 1 - w . -- bssid D4 : EE : 07 : 03 : D9 : 50 mon0 # save all traffic of the target AP to files sudo airmon - ng stop mon0 # stop monitor mode Other tools scapy $ conda create - n wifi python = 3 . 5 ipython $ conda install - n wifi - c anaconda cryptography $ . activate wifi $ pip install scapy - python3 $ sudo PATH = $ PATH zsh - c scapy >>> conf . iface = ' mon0 ' >>> pkts = sniff ( count = 5 ) >>> pkts . summary () >>> pkts . show () >>> p1 = pkts [ 0 ] >>> p1 . summary () >>> p1 . show () >>> p1 . type # 0 >>> p1 . subtype # 8 >>> p1 . addr2 # the mac address tshark sudo apt install tshark sudo tshark - D # list all interfaces sudo tshark - i mon0 - c 20 See dsnote \"tshark Notes\" and man tshark for more information.","tags":"Tech","url":"http://leetschau.github.io/wifi-sniffer-notes.html","loc":"http://leetschau.github.io/wifi-sniffer-notes.html"},{"title":"Linear Regression in R","text":"summary() 函数返回结果的含义 以下内容参考了\"R Cookbook\" section 11.4。 对于函数 \\(y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_n x_n + \\epsilon\\) ， 执行下面的代码，得到的结果各部分含义是： mdl <- lm ( y ~ x ) summary ( mdl ) Residuals Residuals 表示公式中 残差 \\(\\epsilon\\) 的分布情况，理想状态下，残差应该符合正态分布， 即平均值（Median）为0，Min和Max基本对称（至少同一量级）， 1Q和3Q基本对称（至少同一量级），所以Median越小越好。 Coefficients 每一行代表其中一项的系数 \\(a_i\\) ，例如第一行 (Intercept) 表示 截距 \\(\\beta_0\\) 的 估计值（Estimate，这一项大概是多少）、标准差（Std. Error，估计值上下浮动的范围）、 t-value和Pr表示此系数对 \\(y\\) 影响的大小，三颗星表示此变量对 \\(y\\) 影响显著， 两颗星次之，直到空白表示影响最小。 Signif. codes 一行相当于\"图例\"，解释了三颗星、两颗星等等的数值范围。 第二行、第三行分布表示 \\(\\beta_1\\) 、 \\(\\beta_2\\) 的 估计值、标准差等， 具体实例可以参考 \"R Cookbook\" section 11.4。 Residual standard error This reports the standard error of the residuals (σ)—that is, the sample standard deviation of ε. 这部分与 Residuals 部分似乎都反映的是 \\(\\epsilon\\) 的某些性质，具体关系有待进一步研究。 degrees of freedom 的含义也需要进一步厘清。 R-squared \\(R&#94;2\\) 表示 \\(y\\) 的方差中线性部分所占的百分比，0表示线性部分完全无法解释 \\(y\\) 的变化， 模型质量最差，1表示 \\(y\\) 的变化完全可以由线性部分解释，质量最好。 另外 Adjusted R-squared 比 Multiple R-squared 解释效果更好。 F-statistic p-value 小于 0.05 表明模型有效（significant），否则表明模型无效（insignificant）。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/linear-regression-in-r.html","loc":"http://leetschau.github.io/linear-regression-in-r.html"},{"title":"PySpark Environment on Ubuntu 16.04","text":"In this environment Anaconda pakcages (pandas, numpy, etc), IPython and PySpark packages (SparkSession, SparkContext, etc) are all available, where IPython REPL is used as our development environment. Build the environment Download and install miniconda and create Anaconda environment; Download and extract Spark 2.3.3 into $HOME/apps; Add environment variable to ~/.zshenv: export SPARK_HOME=\"$HOME/apps/spark-2.3.3-bin-hadoop2.7\" export PATH=$PATH:$SPARK_HOME/bin To start IPython REPL with PySpark and Anaconda, you have the following 2 options: Option 1: Run PySpark with Anaconda (recommended): export PYSPARK_PYTHON = \"$HOME/apps/miniconda3/envs/anaconda/bin/ipython\" conda activate anaconda pyspark Option 2: Run IPython with PySpark: export PYTHONPATH=\" ${ SPARK_HOME } /python/: $PYTHONPATH \" export PYTHONPATH=\" ${ SPARK_HOME } /python/lib/py4j-0.10.4-src.zip: $PYTHONPATH \" conda activate anaconda ipython Option 3: put all dependencies in a conda env: conda create - n portablePySpark python = 3 . 5 ipython conda install - n portablePySpark - c conda - forge pyspark conda install - n portablePySpark - c conda - forge pudb conda install - n portablePySpark - c cyclus java - jdk Verify cat << EOF > demo . py from pyspark.sql.session import SparkSession from pyspark.sql.types import FloatType spark = SparkSession . builder . master ( \"local[*]\" ) . appName ( \"demo\" ) . getOrCreate () mylist = [ 1.0 , 2.3 , 3.4 ] df = spark . createDataFrame ( mylist , FloatType ()) df . show () EOF . activate portablePySpark python demo . py Start Local PySpark Environment For option 1: cat << EOF > $ HOME / . local / bin / pyspark_in_anaconda #!/ bin / zsh export PYSPARK_PYTHON = \"$HOME/apps/miniconda3/envs/anaconda/bin/ipython\" conda activate anaconda pyspark EOF Start a REPL with . pyspark_in_anaconda . For option 2: cat < < EOF > $HOME /.local/bin/startPySparkEnv #!/bin/zsh export PYTHONPATH=\" ${ SPARK_HOME } /python/: $PYTHONPATH \" export PYTHONPATH=\" ${ SPARK_HOME } /python/lib/py4j-0.10.7-src.zip: $PYTHONPATH \" conda activate anaconda ipython EOF Start a REPL with . startPySparkEnv .","tags":"Tech","url":"http://leetschau.github.io/pyspark-environment-on-ubuntu-1604.html","loc":"http://leetschau.github.io/pyspark-environment-on-ubuntu-1604.html"},{"title":"List Largest Files Recursively in a Folder","text":"In shell, to list the files in a folder recursively ordered by size (excluding sub-folders), run the following command: find . -type f -exec du -h -a {} + | sort -hr | head See Using semicolon (;) vs plus (+) with exec in find for the meaning of {} and + in the exec clause of find command. Verified in bash and zsh.","tags":"Tech","url":"http://leetschau.github.io/list-largest-files-recursively-in-a-folder.html","loc":"http://leetschau.github.io/list-largest-files-recursively-in-a-folder.html"},{"title":"Class Inheritance in Python","text":"In Python you have to call initializing method of super class explicitly: $ python -V Python 3 .6.3 $ cat << EOF > demo.py class A: def __init__(self, pa, pb): print('init in class A') self.pa = pa self.pb = pb class B(A): def __init__(self, pa, pb): print(\"init in class B\") super().__init__(pa, pb) b = B(3, 2) print(b.pa + b.pb) EOF $ python demo.py init in class B init in class A 5 Ref: https://stackoverflow.com/questions/2399307/how-to-invoke-the-super-constructor","tags":"Tech","url":"http://leetschau.github.io/class-inheritance-in-python.html","loc":"http://leetschau.github.io/class-inheritance-in-python.html"},{"title":"Load Python Module through Relative Path","text":"The relative path in sys.path only works for Python 3.x. The following importing method is path and OS agnostic. The only requirement is that the main script and the imported module files have a common parent folder. $ take pkgex $ Python - V Python 3.6 . 3 mkdir - p { driver , step / impl } $ cat << EOF > step / impl / inputstep . py def myfunc ( x , y ): return x * 10 + y EOF $ cat << EOF > driver / main . py import sys , os sys . path . append ( os . path . join ( sys . path [ 0 ], '..' )) # or this: sys.path.append(os.path.join(os.path.dirname(__file__), '..')) from step.impl.inputstep import myfunc print ( myfunc ( 3 , 5 )) EOF $ python driver / main . py 35 Note 1: for Python 3.x, the init .py file is unnecessary. Note 2: sys.path.append('..') does not work. import module, class and function import module with full qualified name import step.impl.inputstep step . impl . inputstep . myfunc ( 3 , 5 ) import module from step.impl import inputstep inputstep . myfunc ( 3 , 5 ) import function from step.impl.inputstep import myfunc myfunc ( 3 , 5 )","tags":"Tech","url":"http://leetschau.github.io/load-python-module-through-relative-path.html","loc":"http://leetschau.github.io/load-python-module-through-relative-path.html"},{"title":"R Notes","text":"Install R and run On Linux: $ sudo apt update $ sudo apt install r-base $ R On Windows: choco install r . project choco install r . studio Install RStudio Server on Ubuntu $ sudo apt update $ sudo apt install r-base $ sudo apt-get install gdebi-core $ wget https://download2.rstudio.org/rstudio-server-1.1.383-amd64.deb $ sudo gdebi rstudio-server-1.1.383-amd64.deb $ sudo echo \"r-libs-user=~/.RPackages\" >> /etc/rstudio/rsession.conf $ sudo rstudio-server restart Login RStudio in browser at \" :8787\" with Ubuntu username and password. Note 1: If not modify the default personal package directory in file /etc/rstudio/rsession.conf , the new installed package will be saved in folder ~/R . Changes in /etc/rstudio/rsession.conf only affect RStudio, not the R console (started with R in shell). To modify the installation path for both R console and RStudio, run echo 'R_LIBS_USER=~/.RPackages' >> $HOME/.Renviron . Verified with Sys.getenv(\"R_LIBS_USER\") and .libPaths() in R console. Note 2: List all rstudio-server subcommmands with sudo rstudio-server help . Note 3: Specify another server port instead of 8787 in file /etc/rstudio/rserver.conf . See all configuration items in RStudio Server: Configuring the Server . Compile Rmd file to docx Install R base and relevant packages, build a new Rmd file and convert: $ R > chooseCRANmirror ( graphics = FALSE ) > install.packages ( \"rmarkdown\" ) > packageVersion ( \"rmarkdown\" ) [ 1 ] ‘1.10' > install.packages ( \"knitr\" ) > packageVersion ( \"knitr\" ) [ 1 ] ‘1.18' > install.packages ( \"devtools\" ) > devtools::install_github ( 'rstudio/reticulate' ) $ cat example.Rmd --- title: \"My Example Doc\" author: \"Leo\" date: \"2019.1.25\" output: html_document --- This is a test file. $ Rscript -e 'library(rmarkdown);render(\"example.Rmd\", \"word_document\")' Frequently used command version . libPaths () installed . packages ()[, c ( 1 , 3 : 4 )] getwd () setwd ( \"temp\" ) # set working directory Get the package name which a specific object belongs to For example, I want to get the name of the package where the function acf() defined in. In R console, run ?acf , get the package name ( stats ) at the first line of the function's documentation in the Help window: acf {stats} , and the last line of the doc: [Package stats version 3.2.3 Index] . Or run ??acf to get all similar function list in the Help window, here you can see stats::acf in the function list. These methods also works for data object. For example, run ?women and ??women you can see it's defined in package datasets . Explore data frame str ( women ) # list all column names , types and some data head ( women , n ) # first n rows attributes ( women ) # list all attributes ( metadata ) of an object , # such as names , dimension , class , row . names , etc . names ( women ) # get the * name * attribute of an object dim ( women ) # get the * dimension * attribute of an object ( row and column number ) class ( women ) # get the * class * attribute of an object nrow ( women ) ncol ( women ) colnames ( women ) # column names summary ( women ) women [ sample ( nrow ( women ) , 3 ) , ] # sample 3 rows randomly library ( \" dplyr \" ) sample_n ( women , 3 ) # another way for sampling via package dplyr names transition between data frame and vector names is a basic attribute of all objects, including single scalar (but in R scalar is a vector with length equals to 1): scalar <- 3 names ( scalar ) <- 'sname' df <- data.frame ( scalar ) names ( df ) # \"scalar\" attributes ( df ) # $names: \"scalar\"; $row.names: \"sname\"; $class: \"data.frame\" Data frame is a kind of list . Each element of this list is a vector . If the vector has set its names attribute (here they are 'fir' and 'sec'), they will be convert to rownames attribute in the created data frame: > sv <- c ( 33 , 44 ) > names ( sv ) <- c ( 'fir' , 'sec' ) > sv fir sec 33 44 > sdf <- data.frame ( sv ) > sdf sv fir 33 sec 44 > class ( sdf ) [1] \"data.frame\" > mode ( sdf ) [1] \"list\" typeof(), mode() & class() 'mode' is a mutually exclusive classification of objects according to their basic structure. The 'atomic' modes are numeric, complex, charcter and logical. Recursive objects have modes such as 'list' or 'function' or a few others. An object has one and only one mode. typeof() and mode() are basically the same with some differences, see ?mode for details. The return values of these functions are in a small set, such as \"integer\", \"double\", \"logical\", \"character\", \"list\", \"closure\"(function), etc. 'class' is a property assigned to an object that determines how generic functions (such as summary() ) operate with it. It is not a mutually exclusive classification. If an object has no specific class assigned to it, such as a simple numeric vector, it's class is usually the same as its mode, by convention. Changing the mode of an object is often called 'coercion'. The mode of an object can change without necessarily changing the class. e.g: > x <- 1 : 8 > mode ( x ) [1] \"numeric\" > class ( x ) [1] \"integer\" > dim ( x ) <- c ( 2 , 4 ) > mode ( x ) [1] \"numeric\" > class ( x ) [1] \"matrix\" > is.numeric ( x ) [1] TRUE > mode ( x ) <- \"character\" > mode ( x ) [1] \"character\" > class ( x ) [1] \"matrix\" Ref: What is the difference between mode and class in R? Data Types 1-dimensional: vector( c(...) ), list( list(...) ); 2-dimensional: matrix( maxtrix(...) ), data.frame( data.frame(...) ); n-dimensional: array( array(...) ).","tags":"Tech","url":"http://leetschau.github.io/r-notes.html","loc":"http://leetschau.github.io/r-notes.html"},{"title":"Run pyspark on Windows","text":"Download Spark 2.2.0 ( spark-2.2.0-bin-hadoop2.7.tgz ) and extract to d:\\apps . Install Oracle JDK instead of OpenJDK. Set environment variables (modify user environment variables with rapidee ): SPARK_HOME = D : \\ apps \\ spark-2 . 2 . 0-bin-hadoop2 . 7 HADOOP_HOME =% SPARK_HOME % \\ hadoop JAVA_HOME = c : \\ Program Files \\ Java \\ jdk1 . 8 . 0_151 Path =% SPARK_HOME % \\ python \\ pyspark ; C : \\ Users \\ lee_c \\ Miniconda3 \\ Scripts ; C : \\ Users \\ lee_c \\ Miniconda3 ;% SPARK_HOME % \\ bin ;% JAVA_HOME % \\ bin ; C : \\ Users \\ lee_c \\ Miniconda3 ;% USERPROFILE % \\ AppData \\ Local \\ Microsoft \\ WindowsApps ; PYSPARK_PYTHON = C : \\ Users \\ lee_c \\ Miniconda3 \\ python . exe PYTHONPATH =% SPARK_HOME % \\ python \\ pyspark ; C : \\ Users \\ lee_c \\ Miniconda3 Check values of environment variables with set in Windows console. Using winutils.exe to set file system permission mkdir - p % SPARK_HOME %/ hadoop / bin cd % SPARK_HOME %/ hadoop / bin wget https : // github . com / steveloughran / winutils / raw / master / hadoop - 2 . 7 . 1 / bin / winutils . exe winutils . exe chmod 777 D : \\ tmp \\ hive Verify $ spark-submit d: \\a pps \\s park-2.2.0-bin-hadoop2.7 \\e xamples \\s rc \\m ain \\p ython \\w ordcount.py d: \\a pps \\s park-2.2.0-bin-hadoop2.7 \\e xamples \\s rc \\m ain \\p ython \\w ordcount.py $ pyspark >>> sc <SparkContext master = local [ * ] appName = PySparkShell> >>> spark <pyspark.sql.session.SparkSession object at 0x0000022917AF87F0> Note: on Windows the path seperator must be backslash. If using slash, write it like this: file:///d:/apps/... .","tags":"Tech","url":"http://leetschau.github.io/run-pyspark-on-windows.html","loc":"http://leetschau.github.io/run-pyspark-on-windows.html"},{"title":"Play with POI in Groovysh","text":"Read data from Excel File To read Excel formula with POI, firstly create a new Excel file where there are numbers in column A and B, and a formula =A1*10+B1 in column C. Then run the following commands: $ wget http : // mirrors . tuna . tsinghua . edu . cn / apache / poi / release / bin / poi - bin - 3.17 - 20170915. tar . gz $ tar zxf poi - bin - 3.17 - 20170915. tar . gz $ wget http : // central . maven . org / maven2 / org / apache / xmlbeans / xmlbeans / 2.6 . 0 / xmlbeans - 2.6 . 0.j ar $ ls formularTest . xlsx poi - 3.17 xmlbeans - 2.6 . 0.j ar $ ls poi - 3.17 docs lib LICENSE NOTICE ooxml - lib poi - 3.17 . jar poi - examples - 3.17 . jar poi - excelant - 3.17 . jar poi - ooxml - 3.17 . jar poi - ooxml - schemas - 3.17 . jar poi - scratchpad - 3.17 . jar $ export CLASSPATH =./* : poi - 3.17 /* : poi - 3.17 / lib /* $ groovysh import org.apache.poi.xssf.usermodel.XSSFWorkbook excelFile = new FileInputStream ( new File ( \"formularTest.xlsx\" )) workbook = new XSSFWorkbook ( excelFile ) dataSheet = workbook . getSheetAt ( 0 ) firRow = dataSheet . getRow ( 0 ) formulaCell = firRow . getCell ( 2 ) formulaCell . rawValue // 21 formulaCell . getCellTypeEnum () // FORMULA formulaCell . getCellFormula () // A1 * 10 + B1 Ref: Apache POI – Reading and Writing Excel file in Java Busy Developers' Guide to HSSF and XSSF Features https://stackoverflow.com/questions/7608511/java-poi-how-to-read-excel-cell-value-and-not-the-formula-computing-it https://stackoverflow.com/questions/23080945/java-lang-classnotfoundexception-org-apache-xmlbeans-xmlexception","tags":"Tech","url":"http://leetschau.github.io/play-with-poi-in-groovysh.html","loc":"http://leetschau.github.io/play-with-poi-in-groovysh.html"},{"title":"Use Jupyter as Spark Notebook","text":"PySpark in Jupyter First download Spark 2.2 and extract. Then setup jupyter and install minrk/findspark : conda create - n pysparkenv python = 3 . 5 . activate pysparkenv conda install jupyter ipython conda install - c conda - forge findspark In the browser, create a new Python 3 notebook, and run: import findspark findspark . init ( \"/home/leo/apps/spark-2.2.0-bin-hadoop2.7/\" , edit_profile = True ) from pyspark.context import SparkContext from pyspark.sql.session import SparkSession sc = SparkContext ( 'local' ) spark = SparkSession ( sc ) Note: Running findspark.init with option edit_profile=True makes a startup script created in ~/.ipython/profile_default/startup/findspark.py . Next time after creating a new notebook in browser, no need to run findspark.init(...) again. Scala in Jupyter For now (2017.12.11), Apache Toree only supports Scala 2.10 and Spark 1.6.3. You can't use pyspark. Installation Install Toree kernel according to its Quick Start . It report Permission denied: '/usr/local/share/jupyter' . According Install to non-/usr/local/share location , and introduction about --ToreeInstall.prefix in jupyter toree install --help-all , the prefix should be $MINICONDA_HOME/envs/py35-anaconda-keras . Here py35-anaconda-keras is the virtual environment name which contains Anaconda and Jupyter notebook. So install with: . activate py35 - anaconda - keras pip install toree jupyter toree install --spark_home=/home/leo/apps/spark-2.2.0-bin-hadoop2.7/ --ToreeInstall.prefix=/home/leo/apps/miniconda3/envs/py35-anaconda-keras/ The server can start, but the toree kernel starting failed. Accroding to Apache Toree and Spark Scala Not Working in Jupyter , for now toree only support the Scala 2.10 or lower. So I install Spark 1.6.3 and reinstall toree kernel using the following commands: . activate py35 - anaconda - keras jupyter kernelspec list rm - rf / home / leo / apps / miniconda3 / envs / py35 - anaconda - keras / share / jupyter / kernels / apache_toree_scala jupyter toree install --spark_home=/home/leo/apps/spark-1.6.3-bin-hadoop2.6/ --ToreeInstall.prefix=/home/leo/apps/miniconda3/envs/py35-anaconda-keras/","tags":"Tech","url":"http://leetschau.github.io/use-jupyter-as-spark-notebook.html","loc":"http://leetschau.github.io/use-jupyter-as-spark-notebook.html"},{"title":"Neural Network Demo with Keras","text":"Install Anaconda and Keras Based on How to Setup a Python Environment for Machine Learning and Deep Learning with Anaconda . Environment: Ubuntu 16.04, Miniconda conda create - n 'py35-anaconda-keras' python = 3 . 5 . activate py35 - anaconda - keras conda install anaconda conda install theano conda install - c conda - forge tensorflow conda install - c conda - forge keras Verify the installation of packages with the following codes in IPython console: import numpy print ( 'numpy: %s ' % numpy . __version__ ) import scipy print ( 'scipy: %s ' % scipy . __version__ ) import matplotlib print ( 'matplotlib: %s ' % matplotlib . __version__ ) import pandas print ( 'pandas: %s ' % pandas . __version__ ) import statsmodels print ( 'statsmodels: %s ' % statsmodels . __version__ ) import sklearn print ( 'sklearn: %s ' % sklearn . __version__ ) import theano print ( 'theano: %s ' % theano . __version__ ) import tensorflow print ( 'tensorflow: %s ' % tensorflow . __version__ ) import keras print ( 'keras: %s ' % keras . __version__ ) Run ANN Demo Based on Develop Your First Neural Network in Python With Keras Step-By-Step . wget http : // archive . ics . uci . edu / ml / machine - learning - databases / pima - indians - diabetes / pima - indians - diabetes . data - O pima - indians - diabetes . csv cat << EOF > pima . py # Create your first MLP in Keras from keras.models import Sequential from keras.layers import Dense import numpy # fix random seed for reproducibility numpy . random . seed ( 7 ) # load pima indians dataset dataset = numpy . loadtxt ( \"pima-indians-diabetes.csv\" , delimiter = \",\" ) # split into input (X) and output (Y) variables X = dataset [:, 0 : 8 ] Y = dataset [:, 8 ] # create model model = Sequential () model . add ( Dense ( 12 , input_dim = 8 , activation = 'relu' )) model . add ( Dense ( 8 , activation = 'relu' )) model . add ( Dense ( 1 , activation = 'sigmoid' )) # Compile model model . compile ( loss = 'binary_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) # Fit the model model . fit ( X , Y , epochs = 150 , batch_size = 10 ) # evaluate the model scores = model . evaluate ( X , Y ) print ( \" \\n %s : %.2f%% \" % ( model . metrics_names [ 1 ], scores [ 1 ] * 100 )) EOF python pima . py","tags":"Tech","url":"http://leetschau.github.io/neural-network-demo-with-keras.html","loc":"http://leetschau.github.io/neural-network-demo-with-keras.html"},{"title":"Debug Scripts in Jupyter Notebook","text":"To debug codes in a jupyter notebook: Add from IPython.core.debugger import set_trace into the script; Add set_trace() as the breakpoint; Run this cell. Note: When the breakpoint is in the body of a function, running the cell will not invoke ipdb, but call the function will invoke ipdb. After the debugging is done, remove set_trace() . And rerun the script with menu item Kernel > Restart & Run All .","tags":"Tech","url":"http://leetschau.github.io/debug-scripts-in-jupyter-notebook.html","loc":"http://leetschau.github.io/debug-scripts-in-jupyter-notebook.html"},{"title":"Zeppelin Notes","text":"Zeppelin 的一个代码块叫做一个 paragraph，相当于 Jupyter 的 cell。 Jupyter 有 mode 的概念，可以通过键盘快捷键操作 cell，例如 normal 模式下， x 可以删除 cell，Zeppelin 只有编辑模式。 当前的 zeppelin (0.8.1) 似乎没有 note（一个note相当于一个脚本文件）级别的 working directory 的概念， 只有一个全局的 zeppelin.home 可以设置。所以读入数据文件时只能写全路径。 Zeppelin 数据可视化的实现方式与 Jupyter 不同，没有 matplotlib 这样的做图包， 而是通过 dataframe 的 createOrReplaceTempView 方法缓存为 view，然后创建一个 SQL paragraph, 利用绘图按钮将 SQL 返回的数据集转换为图。 运行 $ZEPPELIN_HOME/bin/zeppelin-daemon.sh start 启动服务，默认端口 8080. Customize To modify the server port, run: cd $ ZEPPELIN_HOME / conf cp zeppelin - site . xml . template zeppelin - site . xml cp zeppelin - env . sh . template zeppelin - env . sh Modify the value of zeppelin.server.port in zeppelin-site.xml , and restart the server. Using Anaconda To run functions using scikit-learn, pandas, numpy in zeppelin, firstly install anaconda. Starting Zeppelin daemon in a environment where anaconda packages are fully accessible. For example, I build the environment in the following steps: Downloaded and installed minicodna on a host (Ubuntu 16.04). Create a new virtual environment contains anaconda (named anaconda ); Downloaded and installed zeppelin 0.7.3; Activate the virtual env anaconda ; Start the zeppelin daemon. As the following commands shows: conda create --name anaconda python=3.5 conda install --name anaconda anaconda . activate anaconda $ ZEPPELIN_HOME / bin / zeppelin - daemon . sh start Note here you can't use Python 3.6 to build the environment if using pyspark. Because pyspark 2.1.0 and before do not support Python 3.6. If you do not use pyspark, or the spark version is greater than 2.1, you can build it with Python 3.6. Ref: Unable to run pyspark . Now test anaconda modules with the following codes: % python from sklearn import svm from sklearn import datasets clf = svm . SVC () iris = datasets . load_iris () X , y = iris . data , iris . target clf . fit ( X , y ) print ( \"Prediction: %s \" % clf . predict ( X [ 0 : 1 ])) print ( \"Actual: %d \" % y [ 0 ]) Execute with Shift-Enter . The result should be: Prediction : [ 0 ] Actual : 0 Print Python interpreter information: % python import sys print ( \"Version: %s \\n Sys Path: %s \" % ( sys . version , sys . path )) Verify plot functions: % python import matplotlib.pyplot as plt plt . plot ([ 1 , 2 , 3 ]) Note 1: Use Ctrl . instead of key to autocomplete, which is not worked for python. Note 2: I've tried to switch conda environment in zeppelin (v0.7.3), but failed. In a zeppelin notebook, you can run %conda env list to list all virtual envs. But %conda activate ... failed. It said command activate is not supported . While this is the method written in official doc Python 2 & 3 Interpreter for Apache Zeppelin . Using PySpark If your Spark version is 2.1 or lower, you have to ensure the Python version in the PATH is 3.5 or lower. In zeppelin notebook run the following codes: %pyspark a = sc . parallelize ([ \"black\" , \"blue\" , \"white\" , \"green\" , \"grey\" ], 2 ) b = a . groupBy ( lambda x : len ( x )). collect () print ( b ) sorted ([( x , sorted ( y )) for ( x , y ) in b ]) Using Ctrl . to autocompletion.","tags":"Tech","url":"http://leetschau.github.io/zeppelin-notes.html","loc":"http://leetschau.github.io/zeppelin-notes.html"},{"title":"使用HeidiSQL合并多个表","text":"合并过程分3步： 确保表结构一致； 创建目标表； 合并到目标表 具体过程为： 首先确认要合并的多个表结构一致，包括字段名、字段类型一致，主键、外键、索引一致， 比如除\"叶轮\"表外，其他表都使用 PHEP_ID 作为主键， 所以需要给\"叶轮\"表的 PHEP_ID 字段设置为主键，但设置失败， 原因是表中有些记录的 PHEP_ID 字段值相同，删掉重复记录后，主键设置成功。 采用 另存 的方法创建目标表：在 叶片 表上右键，选择 创建新的 > 表复制 生成一个新表 bcse123456 。 执行下面的脚本将其他4个表追加到目标表里： insert into bcse123456 select * from 叶轮 ; insert into bcse123456 select * from 集电线路发电设备 ; insert into bcse123456 select * from 风力发电机组单元 ; insert into bcse123456 select * from 风轮机 ;","tags":"Tech","url":"http://leetschau.github.io/shi-yong-heidisqlhe-bing-duo-ge-biao.html","loc":"http://leetschau.github.io/shi-yong-heidisqlhe-bing-duo-ge-biao.html"},{"title":"Windows 10 Virtual Desktops","text":"Key Shortcuts Create a new desktop: Win-Ctrl-d; Jump between desktops: Win-Ctrl-Left/Right; Move a window to another desktop: not implemented yet; Close a desktop: Win-Ctrl-F4;","tags":"Tech","url":"http://leetschau.github.io/windows-10-virtual-desktops.html","loc":"http://leetschau.github.io/windows-10-virtual-desktops.html"},{"title":"Logging for Vert.x Application","text":"Add file $PORJ_HOME/src/main/resources/vertx-default-jul-logging.properties : handlers = java . util . logging . FileHandler java . util . logging . ConsoleHandler java . util . logging . SimpleFormatter . format = % 1 $ tF % 1 $ tT . % 1 $ tL % 4 $ s % 5 $ s [ % 2 $ s % 3 $ s % 6 $ s ] % n java . util . logging . ConsoleHandler . formatter = java . util . logging . SimpleFormatter java . util . logging . ConsoleHandler . level = ALL java . util . logging . FileHandler . formatter = java . util . logging . SimpleFormatter java . util . logging . FileHandler . pattern = logs / bomserver . log java . util . logging . FileHandler . level = INFO java . util . logging . FileHandler . limit = 50000 java . util . logging . FileHandler . count = 5 Note that the directories you defined in FileHandler.pattern must already exists, or an exception raised when app started. In the class you want to add a logger, for example, MyApp.groovy , add the following codes into the class body: private static final Logger LOGGER = Logger . getLogger ( Thread . currentThread (). getStackTrace ()[ 0 ]. getClassName ()); In the method body you want to log, add the following codes: LOGGER.info(\"Starting server at port ${config['server.port']}\") Never forget adding import java.util.logging.Logger in the class. References About logging utility: java.util.logging.LogManager Java Logging: Configuration Log format(defined in java.util.logging.SimpleFormatter.format ): section Format String Syntax in java.util.Formatter . About file handler: https://stackoverflow.com/questions/8342336/how-to-set-maximum-number-of-rolls-and-maximum-log-size-for-tomcat https://stackoverflow.com/questions/8248899/java-logging-how-to-redirect-output-to-a-custom-log-file-for-a-logger","tags":"Tech","url":"http://leetschau.github.io/logging-for-vertx-application.html","loc":"http://leetschau.github.io/logging-for-vertx-application.html"},{"title":"Install SDKMan on Windows Git Bash","text":"SDKMan need zip , which is not included by Windows Git Bash by default. To resolve this, go to https://sourceforge.net/projects/gnuwin32/files/ and find zip in the list. Download zip-3.0-bin.zip and extract zip.exe in the bin folder. Copy it to *c:\\Program Files\\Git\\usr\\bin*. And run SDKMan install script again.","tags":"Tech","url":"http://leetschau.github.io/install-sdkman-on-windows-git-bash.html","loc":"http://leetschau.github.io/install-sdkman-on-windows-git-bash.html"},{"title":"Sharing Tmux Session between Multiple Users","text":"Sharing a session between multiple users Tmux can create a socket session via -S option. Note the socket file must can be read/write by all participants of tmux. sudo useradd - m devs sudo usermod - aG devs leo sudo usermod - aG devs wangyekun sudo usermod - aG devs kangpeng sudo chsh - s / bin / zsh devs su - devs # Install oh - my - zsh , vundle ( and vim plugins ), fzf , sdkman , nvm git clone git @code . aliyun . com : znbt / bomserver . git ~/ sources / bomserver tmux - S socket - file chmod 774 socket - file Now other users can attach to this session with tmux -S ~devs/socket-file attach . Using a common user Create the user devs like above. All users login with the user devs and attach to the same tmux session.","tags":"Tech","url":"http://leetschau.github.io/sharing-tmux-session-between-multiple-users.html","loc":"http://leetschau.github.io/sharing-tmux-session-between-multiple-users.html"},{"title":"Python Project and Package Management with pipenv","text":"pipenv is a modern packaging tool like npm (for node.js), leiningen (for clojure) or gradle (for java, groovy). Install with pip install pipenv or pip install --user pipenv . Basic workflow mkdir myproj ; cd myproj pipenv install flask pudb -- three # create Pipfile which is the equivalent of package . json ( for node . js ) , # build . gradle ( for gradle ) . here ` -- two / three ` means using Python 2 or 3 # Or with specific Python version : pipenv install baidupcsapi ipython requests requests_toolbelt -- python 3 . 5 # Or build with multiple steps : pipenv -- python 3 . 6 # create a new environment using Python 3 . 6 pipenv install flask pipenv install pudb pipenv shell # activate the virtual environment pipenv uninstall flask exit # leave the virtual environment , or Ctrl - d pipenv -- rm # remove the virtual environment created by ` pipenv install ` pipenv install # install packages in Pipfile ( and the lock file ) Add Pipfile.lock into git version control. See Issue 598 for explanations. Working with an existing Python project For a project already contains Pipfile or requirements.txt : pipenv install (this command create a Pipfile automatically based on requirements.txt ). Install develop package The packages required by application is called default pakcage in pipenv jargon. That used only for development purpose is dev packages. For example, when developing a i3ipc application for i3wm: $ cat Pipfile [ [source ] ] url = \"https://pypi.python.org/simple\" verify_ssl = true name = \"pypi\" [ packages ] \"i3ipc\" = \"*\" [ dev-packages ] pyinstaller = \"*\" ipython = \"*\" flake8 = \"*\" yapf = \"*\" [ requires ] python_version = \"3.7\" Here all packages in [dev-packages] is not required by the final application, but for development. For example flake8 and yapf are linters, ipython is REPL, and pyinstaller is the package tool. Install both develop and default packages with pipenv install -d or pipenv install --dev . Working with conda See pipenv and conda for details. Other Python Environment Manager pyenv + pip-virtualenv + pip-tools . This solution is more lightweight than pipenv. See is pipenv still the \"official\" reccomended tool for packaging? for more discussions.","tags":"Tech","url":"http://leetschau.github.io/python-project-and-package-management-with-pipenv.html","loc":"http://leetschau.github.io/python-project-and-package-management-with-pipenv.html"},{"title":"Static vs Dynamic","text":"Multimethods Based on section 3.6 \"Multimethods\" in \"Programming Groovy 2\" by Venkat Subramaniam. Run the following codes and see the differences between Java and Groovy programs: $ cat << EOF > Employee . java public class Employee { public void raise ( Number amount ) { System . out . println ( \"Employee got raise\" ); } } EOF $ cat << EOF > Executive . java public class Executive extends Employee { public void raise ( Number amount ) { System . out . println ( \"Executive got raise\" ); } public void raise ( java . math . BigDecimal amount ) { System . out . println ( \"Executive got outlandish raise\" ); } } EOF $ cat << EOF > GiveRaise . java import java.math.BigDecimal ; public class GiveRaise { public static void giveRaise ( Employee employee ) { employee . raise ( new BigDecimal ( 10000.00 )); } public static void main ( String [] args ) { giveRaise ( new Employee ()); giveRaise ( new Executive ()); } } EOF $ javac GiveRaise . java $ java GiveRaise Employee got raise Executive got raise $ cat << EOF > GiveRaise . groovy void giveRaise ( Employee employee ) { employee . raise ( new BigDecimal ( 10000.00 )) } giveRaise new Employee () giveRaise new Executive () EOF $ groovy GiveRaise . groovy Employee got raise Executive got outlandish raise The behavior of employee.raise(new BigDecimal(10000.00)); at rum time is different in Java and Groovy. For Java, whether raise(Number) or raise(BigDecimal) is decided at compile time, only by the type of callee employee ( Employee ). For Groovy, which method used is decided at run time, by both the type of employee and the parameter of the method raise ( new BigDecimal(10000.00) ). This is called multiple dispatch or multimethods . Multi-type data collection Based on 10 things your static language can't do . For both section \"Multimethods\" and \"Duck typing\" in origin article. $ cat << EOF > MultiMethod . java import java.util.Date ; public class MultiMethod { public int foo ( String p ) { return 1 ; } public int foo ( Date p ) { return 2 ; } public int foo ( Object p ) { return 3 ; } public static void main ( String [] args ) { MultiMethod mm = new MultiMethod (); Object [] array = new Object [] { \"a string\" , new Date (), 666 }; for ( Object o : array ) { System . out . println ( mm . foo ( o )); } } } EOF $ javac - version javac 1.8 . 0 _144 $ javac MultiMethod . java $ java - version java version \"1.8.0_144\" Java ( TM ) SE Runtime Environment ( build 1.8 . 0 _144 - b01 ) Java HotSpot ( TM ) 64 - Bit Server VM ( build 25.144 - b01 , mixed mode ) $ java MultiMethod 3 3 3 $ cat << EOF > MultiMethod . java import java.util.Date ; public class MultiMethod { public int foo ( String p ) { return 1 ; } public int foo ( Date p ) { return 2 ; } public static void main ( String [] args ) { MultiMethod mm = new MultiMethod (); Object [] array = new Object [] { \"a string\" , new Date (), 666 }; for ( Object o : array ) { if ( o instanceof Date ) { System . out . println ( mm . foo (( Date ) o )); } else if ( o instanceof String ) { System . out . println ( mm . foo (( String ) o )); } } } } EOF $ javac MultiMethod . java $ java MultiMethod 1 2 $ cat << EOF > MultiMethod . groovy int foo ( String p ) { 1 } int foo ( Date p ) { 2 } int foo ( Object p ) { 3 } def array = [ \"a string\" , new Date (), 666 ] array . each { println ( foo ( it )) } EOF $ groovy Multimethods . groovy 1 2 3 So static typing is much more verbose and limited in the scenario involved with multi-type collection. Respond to non-existing methods The correspondent implementation of ActiveRecord in Ruby is method_missing . Summary Dynamic languages are good tools for rapid prototying for using fewer codes to implement the same function, and more flexible in data structure. They are more good at building DSL and metaprogramming (Clojure, Ruby, etc). On the other side dynamic languages can't guarantee type safe (while static codes seems can't too). And it is slower (but in most case hardware promotion can make up for this). Maybe developers should use dynamic languages building prototypes of the product, then rewrite with static languages to reduce the runtime errors and potential bugs.","tags":"Tech","url":"http://leetschau.github.io/static-vs-dynamic.html","loc":"http://leetschau.github.io/static-vs-dynamic.html"},{"title":"Run Emacs as Daemon","text":"After installed emacs on a Ubuntu server, I want to use emacs in tmux style. First SSH to the Ubuntu server, start a emacs daemon with emacs --daemon , and attach to it with emacsclient -t . When I need a break, detach from the emacs with C-x 5 0 (means kill the frame ), and logout from the Ubuntu server. When I want to resume, SSH to the server and attach to emacs again with emacsclient -t . Finally when the job is done, stop the emacs daemon with M-x kill-emacs . Ref: Emacs As Daemon","tags":"Tech","url":"http://leetschau.github.io/run-emacs-as-daemon.html","loc":"http://leetschau.github.io/run-emacs-as-daemon.html"},{"title":"Build CentOS VM on Ubuntu Server","text":"We need create a CentOS 6.8 server with public IP address on the host, an Ubuntu Server 16.04. First enable CPU virtualization tech in BIOS. Then run: sudo apt install virtualbox sudo apt install vagrant vagrant box add bento / centos - 6 . 8 mkdir - p $ HOME / vms / ddaas ; cd $ HOME / vms / ddaas vagrant init bento / centos - 6 . 8 # add this line in Vagrantfile : config . vm . network \"public_network\" , ip : \"172.18.0.251\" vagrant up Now you can login to this new vm server with ssh vagrant@172.18.0.251 (password vagrant ) using a SSH client in LAN.","tags":"Tech","url":"http://leetschau.github.io/build-centos-vm-on-ubuntu-server.html","loc":"http://leetschau.github.io/build-centos-vm-on-ubuntu-server.html"},{"title":"Debug Clojure App with Emacs on Ubuntu Server","text":"在Ubuntu 16.04服务器上用emacs调试Clojure程序，首先安装Clojure运行环境和Emacs （需要首先安装sdkman）： sdk i leiningen sudo apt install emacs rm - rf $ HOME / . emacs . d git clone https : // github . com / flyingmachine / emacs - for - clojure . git $ HOME / . emacs . d cd $ HOME / temp lein new app macro - test cd macro - test emacs C-x C-f , open src/macro_test/core.clj . 输入如下内容： ( ns macro - test . core ( : gen - class )) ( defmacro squares [ xs ] ( list 'map ' # ( * % % ) xs )) ( squares ( range 10 )) M-x cider-jack-in 启动nrepl server, 用 C-c C-k 编译整个文件 用 C-x C-e evaluate 光标前的表达式的值。 Note: 一开始尝试在tmux中使用emacs，但二者多个快捷键冲突，例如 M-b , M-n 等， 且 tmux 中修改快捷键一直不生效，于是采用 ssh 到服务器进入项目目录后启动 emacs， 不经过 tmux 的方式； AHK启动TotalCmd快捷键 Alt-a 与 tmux 冲突，tmux 中可以用 Alt-q : 代替 Alt-a ；","tags":"Tech","url":"http://leetschau.github.io/debug-clojure-app-with-emacs-on-ubuntu-server.html","loc":"http://leetschau.github.io/debug-clojure-app-with-emacs-on-ubuntu-server.html"},{"title":"Speed up docker pull","text":"For Ubuntu 16.04. Pull with docker pull daocloud.io/mysql:5.7 makes it faster a little. Pull with docker pull registry.docker-cn.com/library/mysql:5.7 makes it faster a little. Add the foloowing line to /etc/default/docker : DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4 --registry-mirror=https://docker.mirrors.ustc.edu.cn\" Restart docker service: sudo systemctl restart docker","tags":"Tech","url":"http://leetschau.github.io/speed-up-docker-pull.html","loc":"http://leetschau.github.io/speed-up-docker-pull.html"},{"title":"GNU Screen Notes","text":"Frequently Used Keys Install on CentOS: yum install sreen Show help: screen -h and C-a ? Start a new session: screen -S <session-name> (if a [screen is terminating] error raise, use screen instead) Create a new window: C-a c Switch between windows: C-a # where # is the window number Detach from a session: C-a d Reattach to an existing session: screen -r <session-name> List all sessions: screen -ls Reattach to a detached session: screen -r [session-name] Switch between windows: C-a C-a Copy Mode Open copy mode: C-a [ . In copy mode, press Space to mark starting point. Move the cursor (using vi key bindings) to the end point. Press Space again to copy selected texts. C-a ] to paste texts. Scroll up/down: in copy mode, C-u/d or C-b/f Ref: Copy and Paste Customize Status Line Add the following lines into ~/.screenrc: cat ~/ . screenrc startup_message off hardstatus alwayslastline hardstatus string \"%{= KW} [%1`] %{= Kw}|%{-} %-Lw%{= bW}%n%f %t%{-}%+Lw\" backtick 1 30 30 sh - c 'screen -ls | grep --color=no -o \"$PPID[&#94;[:space:]]*\"' Change default escape Ctrl-a To change Ctrl-a to Alt-q, add the following lines into ~/.screenrc: escape &#94;|| bindkey \"&#94;[q\" command Ref: Understanding GNU Screen's hardstatus strings","tags":"Tech","url":"http://leetschau.github.io/gnu-screen-notes.html","loc":"http://leetschau.github.io/gnu-screen-notes.html"},{"title":"Run Vertx App Programmatically","text":"The following codes demonstrate how to start verticles from a plain groovy script ( App.groovy ), and how to use other groovy class ( MyAdd ) in a verticle ( MyVer & MyVer2 ): take vg - server gradle init -- type groovy - application cat << EOF > build . gradle plugins { id 'groovy' id 'application' id 'com.github.johnrengelman.shadow' version '1.2.3' } repositories { jcenter () } version = '3.4.2' sourceCompatibility = '1.8' mainClassName = 'App' dependencies { compile \"io.vertx:vertx-core:$version\" compile \"io.vertx:vertx-lang-groovy:$version\" testCompile 'org.spockframework:spock-core:1.0-groovy-2.4' } EOF cat << EOF > src / main / groovy / App . groovy import io.vertx.core.Vertx ; println ( \"hello groovy\" ) Vertx . vertx () . deployVerticle ( \"MyVer\" ) Vertx . vertx () . deployVerticle ( \"MyVer2\" ) EOF cat << EOF > src / main / groovy / MyVer . groovy import io.vertx.core.AbstractVerticle import MyAdd public class MyVer extends AbstractVerticle { public void start () { println ( \"Starting\" ) def myadd = new MyAdd () println ( myadd . add ( 3 , 7 )) } public void stop () { println ( \"Stopping\" ) } } EOF cat << EOF > src / main / groovy / MyVer2 . groovy import io.vertx.core.AbstractVerticle import MyAdd public class MyVer2 extends AbstractVerticle { public void start () { println ( \"Starting\" ) def myadd = new MyAdd () println ( myadd . add ( 8 , 5 )) } public void stop () { println ( \"Stopping\" ) } } EOF cat << EOF > src / main / groovy / MyAdd . groovy class MyAdd { int add ( int x , int y ) { x * 10 + y } } EOF gradle run For the imported groovy class (MyAdd), its filename (MyAdd.groovy) must be the same with its class name. The file must be placed in the folder as the package named refers. For example, after add package com.biot into MyAdd.groovy, the file must be placed into \"src/main/groovy/com/biot\". Or the importing verticle (MyVer.groovy) can not use class \"MyAdd\" with import com.biot.MyAdd .","tags":"Tech","url":"http://leetschau.github.io/run-vertx-app-programmatically.html","loc":"http://leetschau.github.io/run-vertx-app-programmatically.html"},{"title":"Using docker on Windows","text":"Firstly, you must use system level shadowsocks to download and install the following apps. Install virtualbox and docker with choco install virtualbox choco install docker - toolbox When installation complete, run Docker Quickstart Terminal from the start menu. If it stucks when downloading the file boot2docker.iso from github repo , download this file manually and put it into folder c:\\Users\\lee_c.docker\\machine\\cache*. Then run Docker Quickstart Terminal* again. Note: A new application Docker for Windows is recommended by docker authorities. However it only runs with Hyper-V, which is unavailable on Windows Home edition.","tags":"Tech","url":"http://leetschau.github.io/using-docker-on-windows.html","loc":"http://leetschau.github.io/using-docker-on-windows.html"},{"title":"Python IDE based on vim","text":"Interactive linter/fixer in editor First install linter flake8 and fixer yapf : conda config --add channels conda-forge conda search flake8 conda search yapf conda acitvate < my - env > conda install flake8 conda install yapf Then integrate these tools with w0rp/ale by adding the following lines into $MYVIMRC: let g : ale_enabled = 1 let b : ale_linters = { 'python' : [ 'flake8' ] } let b : ale_fixers = { 'python' : [ 'yapf' ] } Plug 'w0rp/ale' Or disable ALE by default through setting g:ale_enabled to 0. Type checker Type check is only for Python 3.5+ and optional. Install mypy with conda install -c anaconda-platform mypy . See dsnote Typing System in Python 3 for details. Code snippet management See dsnote Vim Snippet Plugins for details. Smart code completion and other tools 'python-mode/python-mode' provides auto-completion specific for Python, and check the code style with PEP8 and syntax with PyFlakes (via pylama ), such as unassigned variables, incomplete statements, etc. However it use rope to complete words, while rope doesn't support Python 3 by now. So I choose supertab to replace rope. super-tab search words in all the project files, which is very practical and smart. Add the following lines into ~/.vimrc and install with Vundle: let g : pymode_lint_on_fly = 0 let g : pymode_breakpoint = 1 let g : pymode_breakpoint_bind = '<leader>b' let g : pymode_folding = 0 cabbrev af PymodeLintAuto < CR > Plugin 'python-mode/python-mode' Plugin 'ervandew/supertab' Now you can: Auto lint and syntax check after saving file; Auto format codes according to PEP8 with :af ; Run current buffer with <leader>r ; Show doc of the current word with K ; See :h pymode-features for details. Note: python-mode now (2018.1.17) uses git submodules to organize codes, which Vundle can handle automatically for you. python-mode seems conflict with jedi-vim according to jedi-vim doc . So remove jedi-vim after installing python-mode. Ignore Specific Lint Errors and Warnings The problem is describe in \"PEP8 – import not at top of file with sys.path\" in SO (stackoverflow.com). Option 1: ignore in your editor: Add let g:pymode_lint_ignore = [\"E501\", \"W\",] into ~/.vimrc to ignore E501 and all warnings when linting the Python source files. Search ignore in :h pymode for more details. Option 2: ignore for specific line: Add # nopep8 or # noqa at the end of the line where raise the error. Ref: \"How to disable a pep8 error in a specific file?\" in SO. Go to Definitions I want to get tags for whole project without opening all files one by one. But xolox/vim-easytags and majutsushi/tagbar can only create tags for the opening file. So I choose to build the tag file manually with ctags. First install ctags with sudo apt install exuberant-ctags . The default tag file name is tags , I prefer the name .tags . So in $MYVIMRC, add set tags=.tags; . Notice the semicolon at the end, it will make vim search for .tags in parent folder of each level until it find one. Without it, you can only use tags when the working directory of the editor is the project root. In the root folder of the Python project, run ctags -R -f .tags . . Add .tags in file .gitignore . Now you can use Ctrl-] to go to function definition, and Ctrl-o to jump back. Note: you can config ctags in file ~/.ctags: --python-kinds=-iv --exclude=build --exclude=dist according to ‘Go to Definition' in Vim for Python using Ctags, Done Right . Find and Replace Using plugin brooth/far.vim , find the word under cursor with :F Ctrl-r Ctrl-w **/*.py . Here Ctrl-r Ctrl-w is the key shortcut for getting the word under cursor in command line mode. Note: In command line mode (start with pressing : in normal mode), using Ctrl-r % to get the current file name; Ctrl-r / to get the last search pattern, etc. See details of key shortcuts in command line mode with :h c_CTRL-R . Origin post in 2017: 命令执行 前提：vim有 python 标志： vim --version|ag python 安装 vim-cellmode 插件，在.vimrc中加入： \" vimux cellmode let g : cellmode_tmux_panenumber = '2' let g : cellmode_default_mappings = '0' vnoremap < silent > < leader > v : call RunTmuxPythonChunk () < CR > nnoremap < silent > < leader > l : call RunTmuxPythonLine () < CR > noremap < silent > < leader > nc : call RunTmuxPythonCell ( 0 ) < CR > noremap < silent > < leader > c : call RunTmuxPythonCell ( 1 ) < CR > noremap < silent > < leader > ut : call RunTmuxPythonAllCellsAbove () < CR > Plugin 'benmills/vimux' Plugin 'julienr/vim-cellmode' 关于vimscript的语法，例如 function! MyFunc() range 中， ! 的含义（覆盖同名函数）， range 关键字的含义（函数自己处理范围）， 参考 :h :function 自动补全 前提： * 安装jedi： pip install --user jedi * vim有 conceal 标志： vim --version|ag conceal 安装 jedi-vim 插件： 在.vimrc中加入 Plugin 'davidhalter/jedi-vim'","tags":"Tech","url":"http://leetschau.github.io/python-ide-based-on-vim.html","loc":"http://leetschau.github.io/python-ide-based-on-vim.html"},{"title":"Convert Git Repo to Subversion Repo","text":"The process of converting a git repo to subversion repo is: Build the remote (empty) svn repo; Clone the svn repo to local host, which creates a remote branch git-svn ; Checkout the remote svn branch, which creates a local branch git-svn ; Pull the remote git repo to local master branch; Merge all commits on master to git-svn ; Commit back to svn repo with dcommit command; The commands: sudo apt install git - svn git svn clone svn : // 192.168.110.3 / Aomsc git svn fetch git checkout remotes / git - svn git remote add gitrepo git @code . aliyun . com : znbt / 428 doc . git git pull gitepo master git checkout master git rebase --onto git-svn --root master git svn dcommit","tags":"Tech","url":"http://leetschau.github.io/convert-git-repo-to-subversion-repo.html","loc":"http://leetschau.github.io/convert-git-repo-to-subversion-repo.html"},{"title":"Spark Streaming Hello World","text":"From \"Spark Cookbook\" by Rishi Yadav. Chapter 5: \"Word count using Streaming\". Step 1: Starting Input Server On CentOS 6.8, start a listening server as follows: sudo yum install nmap ncat - l 8585 Step 2: Start Spark job Run the following codes in Spark shell: import org.apache.spark.SparkConf import org.apache.spark.streaming. { Seconds , StreamingContext } import org.apache.spark.storage.StorageLevel import StorageLevel._ import org.apache.spark._ import org.apache.spark.streaming._ import org.apache.spark.streaming.StreamingContext._ val ssc = new StreamingContext ( sc , Seconds ( 2 )) val lines = ssc . socketTextStream ( \"localhost\" , 8585 , MEMORY_ONLY ) val wordsFlatMap = lines . flatMap ( _ . split ( \" \" )) val wordsMap = wordsFlatMap . map ( w => ( w , 1 )) val wordCount = wordsMap . reduceByKey (( a , b ) => ( a + b )) wordCount . print ssc . start Now input some text in server window. After press enter, you can see the word counting result is printed in the Spark shell window. Note socketTextStream above creates an instance of SocketInputDStream which uses java.net.Socket , a client socket. So if you run Spark streaming job without starting a listening server, you will get a connection refused error. See 'Connection Refused' error while running Spark Streaming on local machine for details. netcat for CentOS 6.8 has a bug, make it can't used as a listening server.","tags":"Tech","url":"http://leetschau.github.io/spark-streaming-hello-world.html","loc":"http://leetschau.github.io/spark-streaming-hello-world.html"},{"title":"scikit-learn的多项式拟合","text":"scikit-learn多项式拟合的整体思路是将多项式方程变为线性方程，再用线性拟合求解。 例如要拟合函数 \\(n\\) 元 \\(k\\) 次函数 \\(y = f(x_0, x_1, x_2, ..., x_n)\\) ， 首先确定次数 \\(k\\) ： polynomial = sklearn.preprocessing.PolynomialFeatures(degree=k) 。 接下来确定 \\(n\\) ： X_train_transformed = polynomial.fit_transform(X_train) 中 X_train 确定， 如果它是矩阵 ( numpy.ndarray )， \\(n\\) 等于矩阵的列数， 如果是 Python list ， \\(n\\) 等于它的长度。 这时可以通过 polynomial 查看多项式的形态，例如下面是3元2次方程 \\(y = a_0 + a_1 x_0 + a_2 x_1 + a_3 x_2 + a_4 x_0&#94;2 + a_5 x_0 x_1 + a_6 x_0 x_2 + a_7 x_1&#94;2 + a_8 x_1 x_2 + a_9 x_2&#94;2\\) 的项列表和变量次数列表： >>> polynomial . get_feature_names () [ '1' , 'x0' , 'x1' , 'x2' , 'x0&#94;2' , 'x0 x1' , 'x0 x2' , 'x1&#94;2' , 'x1 x2' , 'x2&#94;2' ] >>> polynomial . powers_ array ([[ 0 , 0 , 0 ], [ 1 , 0 , 0 ], [ 0 , 1 , 0 ], [ 0 , 0 , 1 ], [ 2 , 0 , 0 ], [ 1 , 1 , 0 ], [ 1 , 0 , 1 ], [ 0 , 2 , 0 ], [ 0 , 1 , 1 ], [ 0 , 0 , 2 ]]) 其中的 \\(a_0, a_1, ..., a_9\\) 向量保存在 X_train_transformed 中。 此矩阵的行数与输出矩阵 X_train 的行数相同，列数由 \\(n\\) 和 \\(k\\) 决定： In [ 151 ]: X_train . shape Out [ 154 ]: ( 400 , 3 ) In [ 151 ]: X_train_transformed Out [ 152 ]: array ([[ 1 . 00000000 e + 00 , 3 . 90000000 e - 01 , 2 . 78000000 e + 00 , ..., 7 . 72840000 e + 00 , 1 . 97658000 e + 01 , 5 . 05521000 e + 01 ], [ 1 . 00000000 e + 00 , 1 . 65000000 e + 00 , 6 . 70000000 e + 00 , ..., 4 . 48900000 e + 01 , 1 . 62140000 e + 01 , 5 . 85640000 e + 00 ], [ 1 . 00000000 e + 00 , 5 . 67000000 e + 00 , 6 . 38000000 e + 00 , ..., 4 . 07044000 e + 01 , 2 . 41802000 e + 01 , 1 . 43641000 e + 01 ], ..., [ 1 . 00000000 e + 00 , 2 . 16000000 e + 00 , 1 . 13000000 e + 00 , ..., 1 . 27690000 e + 00 , 8 . 36200000 e - 01 , 5 . 47600000 e - 01 ], [ 1 . 00000000 e + 00 , 7 . 04000000 e + 00 , 3 . 19000000 e + 00 , ..., 1 . 01761000 e + 01 , 3 . 70040000 e + 00 , 1 . 34560000 e + 00 ], [ 1 . 00000000 e + 00 , 1 . 65000000 e + 00 , 6 . 20000000 e - 01 , ..., 3 . 84400000 e - 01 , 1 . 05400000 e - 01 , 2 . 89000000 e - 02 ]]) In [ 153 ]: X_train_transformed . shape Out [ 153 ]: ( 400 , 10 ) 把展开式每一项中除了系数 \\(a_i\\) 外其他部分当时一个独立的变量， 多项式拟合就转换为了线性拟合问题，后面用线性拟合器的 fit -> predict 两步就可以得到拟合结果了，完整代码见 regression_multivar.py in Python Machine Learning Cookbook 。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/scikit-learnde-duo-xiang-shi-ni-he.html","loc":"http://leetschau.github.io/scikit-learnde-duo-xiang-shi-ni-he.html"},{"title":"Unit and Integration Test with doctest","text":"The codes below demonstrate how to add unit test (including function test and method test in an object) and integration test: cat mymodule . py def myadd ( x , y ): '''unit test for function >>> myadd(3, 5) 35 ''' return x * 10 + y class MyClass : '''class level test >>> mobj = MyClass(7) >>> mobj.newMul(8) 60 ''' def __init__ ( self , p0 ): self . a0 = p0 def ynadd ( self , p1 ): '''unit test for object method >>> mobj = MyClass(6) >>> mobj.ynadd(4) 14 ''' return self . a0 + p1 * 2 def newMul ( self , p1 ): return self . a0 * p1 + 4 integration_test = ''' >>> mo = MyClass(2) >>> mo.newMul(3) + myadd(5, 7) 67 ''' __test__ = { \"integration_test\" : integration_test } if __name__ == \"__main__\" : import doctest doctest . testmod ( extraglobs = { 'mobj' : MyClass ( 7 )}) You can run tests in 3 ways. Option 1: python mymodule.py or python mymodule.py -v . Here when you specify object name with extraglobs parameter, mobj = MyClass(6) can be omitted. Option 2: python -m doctest mymodule.py or python -m doctest mymodule.py -v . In this way the global part if __name__ == \"__main__\": will not be executed, which can be omitted. Option 3: put all doctest texts into another text file (named mytests.txt), run tests with doctest.testfile('mytests.txt') . You can generating doctest texts with %doctest_mode command in IPython. Use ... for multiline expression. For example: def myfunc ( x ) : \"\"\" my demo function >>> inp = [ ... 1 , 2 , 3 ] >>> myfunc ( inp ) 3 \"\"\" return len ( x ) Python doesn't keep the order of dict keys. To avoid mismatch caused by different key orders in testing, use >>> myfunc () == { 1 : 'a' , 2 : 'b' } True instead of >>> myfunc () { 1 : 'a' , 2 : 'b' } To avoid the mismatch caused by different whitespace, use doctest.NORMALIZE_WHITESPACE : def foo () : \"\"\" whitespace test >>> foo () ... # doctest : + NORMALIZE_WHITESPACE ' abc ' \"\"\" return \" abc \" Ref: doctest in Python doc","tags":"Tech","url":"http://leetschau.github.io/unit-and-integration-test-with-doctest.html","loc":"http://leetschau.github.io/unit-and-integration-test-with-doctest.html"},{"title":"Run Python Script within a Module","text":"Run a script in Functional Python Programming : python -m Chapter_8.ch08_ex1 . Demo take pymod mkdir - p moda modb touch moda / __init__ . py modb / __init__ . py cat << EOF > modb / lib . py def myadd ( a , b ): return a * 10 + b EOF cat << EOF > moda / app . py from modb.lib import myadd print ( myadd ( 3 , 5 )) EOF python - m moda / app 35","tags":"Tech","url":"http://leetschau.github.io/run-python-script-within-a-module.html","loc":"http://leetschau.github.io/run-python-script-within-a-module.html"},{"title":"Driving Visual Analyses with Automobile Data","text":"This note is based on chapter \"Driving Visual Analyses with Automobile Data\" in book \"Practical Data Science Cookbook\" by Tony Ojeda, etc. Domain knowledge Feature comb08 represents combine fuel efficiency (in Chapter 2, page 43); displ represents the engine displacement in liters (in page 206); atvType represents alternative or advanced technology vehicle (in chaper 2, page 33). The same place for explanations of feature barrels08, barrelsA08, charge120, charge240. Python Implementation pandas.melt convert a dataframe from wide format (宽表) to a long format . The converting rule based on distingishing all the columns from id , variable (like dimension in BI) and value (like measure in BI).","tags":"Tech","url":"http://leetschau.github.io/driving-visual-analyses-with-automobile-data.html","loc":"http://leetschau.github.io/driving-visual-analyses-with-automobile-data.html"},{"title":"Send Messages between Windows and Linux","text":"Server side Use netcat on Linux as server: nc -lkC 192.168.71.102 5555 . Here -l means listen ; -k means not close when client closed . -C means Send CRLF as line-ending , which is very useful when connect with telnet from Windows. If the client is netcat, -C is unnecessary. Client side Use MobaXterm netcat Run nc 192.168.71.102 5555 in MobaXterm. Press Ctrl-c to quit connection session. Use telnet on Windows telnet 192.168.71.102 5555 . Open local echo: press Ctrl+] to open telnet prompt, then input set localecho and press <Enter> only to leave telnet prompt environment. Press q in telnet prompt environment to quit telnet session.","tags":"Tech","url":"http://leetschau.github.io/send-messages-between-windows-and-linux.html","loc":"http://leetschau.github.io/send-messages-between-windows-and-linux.html"},{"title":"Spyder Notes","text":"As a built-in package, start Spyder in Anaconda environment directly with spyder . Keyboard Shortcuts To jump to console pane: Tools > Preferences > Keyboard shortcuts, Name: switch to ipython_console (not swtich to console ). To jump back to editor pane: the shortcut name is switch to editor . Modify the shortcuts as follows: Run selected texts or current line: Ctrl + Enter; Run current cell: Ctrl + Shift + Return (the same with RStudio); Project Management In main menu > Projects. vi mode There's a spyder-vim . But looks like half abandoned.","tags":"Tech","url":"http://leetschau.github.io/spyder-notes.html","loc":"http://leetschau.github.io/spyder-notes.html"},{"title":"Julia Notes","text":"启动Julia环境 在Windows 10的cmder启动环境定义文件 user-profile.cmd 中添加： set PATH=%PATH%;%USERPROFILE%\\AppData\\Local\\JuliaPro-0.6.0.1;%USERPROFILE%\\AppData\\Local\\JuliaPro-0.6.0.1\\Julia-0.6.0\\bin 不需要绘制图形，使用Julia命令行版本： julia 绝对路径： C:\\Users\\lee_c\\AppData\\Local\\JuliaPro-0.6.0.1\\Julia-0.6.0\\bin\\julia.exe 需要绘制图形：使用IJulia web service： ijulia 绝对路径：*C:\\Users\\lee_c\\AppData\\Local\\JuliaPro-0.6.0.1\\IJulia.bat","tags":"Tech","url":"http://leetschau.github.io/julia-notes.html","loc":"http://leetschau.github.io/julia-notes.html"},{"title":"Airbnb Superset Notes","text":"Use Anaconda to build superset environment on Ubuntu 14.04: sudo apt install build - essential libssl - dev libffi - dev python - dev python - pip libsasl2 - dev libldap2 - dev conda create - n superset python = 2 . 7 . activate superset pip install superset fabmanager create - admin --app superset superset db upgrade superset load_examples superset init superset runserver Run conda env export > environment.yml in virtual environment to export environment definitons. Use conda env create -f environment.yml to build a superset server elsewhere according to these definitions. See Managing Environments of conda tools for more managing commands.","tags":"Tech","url":"http://leetschau.github.io/airbnb-superset-notes.html","loc":"http://leetschau.github.io/airbnb-superset-notes.html"},{"title":"Trait in Scala","text":"早上研究了Scala的trait与abstract class的区别，大体有以下几点： 抽象类代表一个独立的实体，trait代表一个具体的功能，不能独立存在； 如果希望多个彼此无关的类复用一项相同的功能，把它用trait实现； 一个类只能继承（使用 extensds 关键字）一个抽象类， 但可以mixin（使用 with 关键字）多个trait，可以同时使用， 例如下面实例中的 class D extends B with C ； 抽象类可以有类型参数（通过使用 type 关键字）和构造函数参数， trait只能有类型参数； trait可以继承自（ extends ）其他trait； trait可以继承自（ extends ）抽象类，例如下面的 trait C extends A ； 当无法确定使用trait还是抽象类时，优先使用trait； 实例代码1： abstract class A { val message: String } class B extends A { val message = \"I'm an instance of class B\" } trait C extends A { def loudMessage = message.toUpperCase() } class D extends B with C val d = new D d.message // I'm an instance of class B d.loudMessage // I'M AN INSTANCE OF CLASS B mixin的栈特性（stackable）： trait A { def a = 1 } trait X extends A { override def a = { println ( \"X\" ) super . a } } trait Y extends A { override def a = { println ( \"Y\" ) super . a } } scala > val xy = new AnyRef with X with Y xy : java . lang . Object with X with Y = $ anon $ 1 @6e9 b6a scala > xy . a Y X res0 : Int = 1 scala > val yx = new AnyRef with Y with X yx : java . lang . Object with Y with X = $ anon $ 1@188 c838 scala > yx . a X Y res1 : Int = 1 讨论 2013年在广州开发GODU时，曾经设计过这样的类结构： 接口 > 抽象类 > 多个具体实现类。 之所以要在接口和具体实现类之间插入一个抽象类层， 就是因为有一些通用的方法实现不能写在接口里，如果放在具体实现类里， 又会出现大量的冗余，但这样的3层结构，导致最上面的接口被架空，只能作为名义上的行为规范。 如果用Scala实现，就可以把通用功能放在trait里面实现， 各个具体实现类 MyConcreteClass1 extends MyInterface with MyTrait 就可以了。 参考： https://stackoverflow.com/questions/1991042/what-is-the-advantage-of-using-abstract-classes-instead-of-traits https://stackoverflow.com/questions/2005681/difference-between-abstract-class-and-trait http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html.html","tags":"Tech","url":"http://leetschau.github.io/trait-in-scala.html","loc":"http://leetschau.github.io/trait-in-scala.html"},{"title":"dsnote不同实现方案性能对比","text":"测试标准：在1699个文本文件中搜索 logon ，查看总用时。 PowerShell 和 Bash 版本 dsnote 性能对比 测试环境：cygwin in Windows 10 测试过程： $ time powershell -f apps/dsnote/donshell.ps1 s logon powershell -f apps/dsnote/donshell.ps1 s logon 0 .00s user 0 .01s system 2 % cpu 0 .571 total $ time ~/apps/dsnote/donshell.sh s logon /home/lee_c/apps/dsnote/donshell.sh s logon 0 .36s user 0 .55s system 100 % cpu 0 .933 total 测试结果： 多次测试 Powershell 版稳定在 0.5 ~ 0.6 秒，bash 版稳定在 0.9 ~ 1 秒。 Winodws版本搜索方案对比 测试环境：Powershell in Windows 10 基于Powershell的搜索实现： $ res = \" $repo\\*$noteFileExt \" foreach ( $ kw in $ items ) { $ res = Select - String - Path $ res - Pattern $ kw | % { $ _ . Path } | Get - Unique if ( $ res . Length - eq 0 ) { Write - Host Nothing match . return } } 基于 pt 的搜索实现： $ res = $ repo foreach ( $ kw in $ items ) { $ res = @ ( pt / i / l $ kw $ res ) if ( $ res . length - eq 0 ) { Write - Host Nothing match . return } } 测试过程： PS > Measure - Command { C : \\ apps \\ cygRoot \\ home \\ lee_c \\ apps \\ dsnote \\ donshell . ps1 s logon } 测试结果： 多次测试 Powershell 版稳定在 200ms ~ 230ms 间，pt 版稳定在 210ms ~ 240ms 间， 另外 Powershell 版本中 Select-String 如果加 -SimpleMatch 参数， 运行时间反而增加到了 300ms 左右。 Powershell版本没有外部依赖，性能也不错，决定用它代替之前的pt版本。","tags":"Tech","url":"http://leetschau.github.io/dsnotebu-tong-shi-xian-fang-an-xing-neng-dui-bi.html","loc":"http://leetschau.github.io/dsnotebu-tong-shi-xian-fang-an-xing-neng-dui-bi.html"},{"title":"解决Git提交时文件权限变更问题","text":"Windows 10系统中，在console下（这里用cmder）下创建一个文件， 不论通过程序（Python, PowerShell），还是手工用文本编辑器创建， 在cygwin下，都会被加上可执行权限（在cmder下用 ls -l 查看没有可执行权限）， 但这个权限不会被提交到git repo中。按正常文件处理即可。 如果执行 git diff 时返回如下结果： old mode 100755 new mode 100644 一个可能的原因是：此文件在Linux系统中被修改时由于某种原因被加上了可执行权限， 然后被提交到了代码库中，在Windows中被检出时，由于系统发生了变化， 无法恢复其可执行权限，被检出的文件不具备可执行权限，被 git 认为发生了变化。 解决方法分两种情况：需要保留可执行权限的和不需要保留可执行权限的。 需要保留权限 比如一些可执行脚本，需要保留其可执行权限， 这时需要在repo根目录下执行 git config core.filemode false ， 这样 Windows 就不会检查可执行这一项了。 不需要保留权限 在shell或者cygwin下首先执行 find . -maxdepth 1 -type f -executable 找到具有可执行权限的文件，然后执行 chmod 644 filename 去掉执行权限，然后提交。 也可以要求 git 忽略对权限的检查，但不推荐这个方案。 详细问题及解决方法见 How do I remove files saying \"old mode 100755 new mode 100644\" from unstaged changes in Git? 和 finding executable files using ls and grep 。","tags":"Tech","url":"http://leetschau.github.io/jie-jue-gitti-jiao-shi-wen-jian-quan-xian-bian-geng-wen-ti.html","loc":"http://leetschau.github.io/jie-jue-gitti-jiao-shi-wen-jian-quan-xian-bian-geng-wen-ti.html"},{"title":"List Git Configurations","text":"The output of git config --list is composed by 3 parts: # output of git config --system --list (read from '/etc/gitconfig') core . symlinks = false core . autocrlf = true color . diff = auto color . status = auto color . branch = auto color . interactive = true pack . packsizelimit = 2 g help . format = html http . sslcainfo =/ ssl / certs / ca - bundle . crt diff . astextplain . textconv = astextplain rebase . autosquash = true # output of git config --global --list user . email = leechau @126. com user . name = Li Chao core . editor = vim core . autocrlf = input core . eol = lf # output of git config --local --list core . repositoryformatversion = 0 core . filemode = false core . bare = false core . logallrefupdates = true core . ignorecase = true remote . origin . url = git @ github . com : leetschau / dsnote . git remote . origin . fetch =+ refs / heads /*:refs/remotes/origin/* branch.master.remote=origin branch.master.merge=refs/heads/master Some conifgurations, such as core.autocrlf appear in both system and global level. Such global configurations will overwrite their system level counterparts. And local configs will overwrite global and system-level counterparts. Verified on cygwin and cmder on Windows 10.","tags":"Tech","url":"http://leetschau.github.io/list-git-configurations.html","loc":"http://leetschau.github.io/list-git-configurations.html"},{"title":"Powershell Notes","text":"Tools Package Repo and Management PowerShell office (managed by MS) package repo: PowerShell Gallery . Package manager: PowerShellGet Install it with Install-Module -Name PowerShellGet -Force . Install package with Install-Module -Name ... like the following ZLocation . PowerShell directory auto jump Install ZLocation with Install-Module -Name ZLocation . Like autojump ( j ) in shell, jump with z command. Development Comment # for line; <# ... #> for block Ref: https://stackoverflow.com/questions/7342597/how-do-you-comment-out-code-in-powershell Test object type write - host $ res . GetType () . fullname # write - host = println if ( $ res - is [ string ] ) { write - host \" this is a string \" } if ( $ res - is [ array ] ) { write - host \" this is a array \" } Ref: http://thephuck.com/scripts/easy-way-to-check-if-your-powershell-variable-is-an-array-or-not/ List properties and methods of an object Use Get-Member : $ curTime = Get - Date # DateTime object $ timeStr = $ curTime . ToString () # String $ dt = [ datetime ]:: Parse ( $ timeStr ) # DateTime object $ dt | Get - Member # list props and methods Convert result to array Use @() . Ref: Powershell Test if array in one line map array Or list comprehension. For example, map a string array to an object array: $fileNameArr | % { Get-Item $_ } . Here % means foreach , $_ denote each element of the array. Load variables from another powershell script Use ./fileToLoad.ps1 . Ref: https://stackoverflow.com/questions/1864128/load-variables-from-another-powershell-script https://stackoverflow.com/questions/27138483/how-can-i-re-use-import-script-code-in-powershell-scripts File IO Write to file Write string $res to file path $lastResult: $res | out-file -encoding UTI8 $lastResult Here -encoding is mandatory, or the english characters will be written as full-width characters. Write string $timeStr to file path $lastSync: [System.IO.File]::WriteAllLines($lastSync, $timeStr) But why files created by these 2 methods are all have 'x' attributes? Ref: https://stackoverflow.com/questions/19122755/output-echo-a-variable-to-a-text-file https://stackoverflow.com/questions/5596982/using-powershell-to-write-a-file-in-utf-8-without-the-bom Out- File API Head/tail of an array Empty array: @() All except first 3 items: 1..10 | Select-Object -skip 3 First 3 items: 1..10 | Select-Object -first 3 Last 3 items: 1..10 | Select-Object -last 3 Middle 4 items: 1..10 | Select-Object -skip 3 -first 4 Ref: https://stackoverflow.com/questions/10079572/powershell-equivalent-for-head-n-3 Get file attributes $updated = Get-Date (Get-Item $fullname).LastWriteTime Ref: https://stackoverflow.com/questions/19774097/finding-modified-date-of-a-file-folder Print a certain line of a file with PowerShell Or get a selected item from an index: (Get-Content file.txt)[4] Ref: https://stackoverflow.com/questions/14759649/how-to-print-a-certain-line-of-a-file-with-powershell Parse and format Time default format Get current time: $timeStr = Get-Date Custom format Get time from file and print as string: $updated = Get-Date (Get-Item $fullname).LastWriteTime -format \"yy.M.d H:m\" String -> DateTime -> String: $ y = [ datetime ]:: ParseExact ( $ createdStr , \"yyyy-MM-dd HH:mm:ss\" , [ Globalization.CultureInfo ]:: InvariantCulture ) $ created = $ y . ToString ( \"yy.M.d H:m\" ) Ref: https://technet.microsoft.com/en-us/library/ee692801.aspx https://stackoverflow.com/questions/27741810/string-to-datetime-conversion-in-powershell https://stackoverflow.com/questions/2249619/how-to-format-a-datetime-in-powershell Run Powershell script in Winodws console You have to add -file flag for a non-command PS script: powershell -file donshell.ps1 s reduce Ref: https://stackoverflow.com/questions/13724940/how-to-run-a-powershell-script-from-the-command-line-and-pass-a-directory-as-a-p","tags":"Tech","url":"http://leetschau.github.io/powershell-notes.html","loc":"http://leetschau.github.io/powershell-notes.html"},{"title":"Restart Network on Ubuntu","text":"Ubuntu 16.04 Today I can't ssh to a Ubuntu server (named alpha ) on QingCloud, and can't connect to it via ping command. The VPN is good because I can access web service on another host in the same LAN on QingCloud. The alpha host itself is OK because I can login to it via the web console of QingCloud. After running command ping baidu.com , I got network unreachable . So it's clear that its network service is down. To restart the network service, run: sudo systemctl restart NetworkManager.service . It works. Now I can logon this host via ssh. Ubuntu 14.04 Sometimes the Dell laptop can't connect to WiFi, run sudo service network-manager restart and it then connect successfully.","tags":"Tech","url":"http://leetschau.github.io/restart-network-on-ubuntu.html","loc":"http://leetschau.github.io/restart-network-on-ubuntu.html"},{"title":"Scala中函数的4种定义方式","text":"scala> val upper1: String => String = _.toUpperCase upper1: String => String = <function1> scala> val upper2 = (x: String) => x.toUpperCase upper2: String => String = <function1> scala> def upper3: String => String = _.toUpperCase upper3: String => String scala> def upper4(x: String): String = { x.toUpperCase } upper4: (x: String)String scala> def upper5(x: String) = { x.toUpperCase } upper5: (x: String)String upper1 和 upper2 都通过lambda函数方法定义函数， 只不过前者采用完整的lambda函数形式，后者采用了lambda函数的简写。 注意声明中 => 发挥了不同的作用， 前者（以及 upper3 ）中的 => 用来分隔输入参数与返回值类型， 后者中的 => 用来分隔参数列表与返回值表达式。 upper3 , upper4 和 upper5 都通过 def 关键字定义， 只是采取的不同的类型声明方式。 通过 def 定义的函数，只在被调用时（运行时）对函数体进行求值，每次被调用得到的函数实例都不同； 通过 var 定义的函数，在被定义后（运行时）立即被求值，每次被调用时使用了相同的函数实例。 参考： What is the difference between def and val to define a function How do you define a type for a function in Scala?","tags":"Tech","url":"http://leetschau.github.io/scalazhong-han-shu-de-4chong-ding-yi-fang-shi.html","loc":"http://leetschau.github.io/scalazhong-han-shu-de-4chong-ding-yi-fang-shi.html"},{"title":"Install Applications on Windows with Chocolatey","text":"使用chocolatey安装软件的优点是易于卸载和升级， 不需要手工将安装好的软件添加到系统%PATH%变量里就能使用。 首先 Win+X 打开系统菜单，然后选择 Windows PowerShell(管理员) ， 在powershell窗口里输入 choco install 或者 cinst 加软件名安装， 例如 choco install kitty . Application list: cmder // including ssh, git, curl, ls, cat, etc cygwin git // better ssh client than cmder & cygwin pt // fast text searcher, like ag on Linux fzf // history and file name search on Windows and Linux kitty telnet // used as LAN messager, the peer(server) on Linux is nc(netcat) pandoc curl wget autoruns jq vim emacs notepadplusplus notepad2-mod // based on notepad2, hosted on github atom visualstudiocode dotnet4.5 totalcommander firefox utorrent openvpn spacesniffer rapidee shadowsocks autohotkey.portable copyq 7zip peazip sumatrapdf ccleaner // free version you-get vlc potplayer virtualbox vagrant jdk8 nodist // nvm for Windows lein // Clojure project automation tool golang scala // 会被安装到C盘根目录下，且Windows命令行下无法运行，只能在cygwin下运行，不如用 sdk 安装效果好 julia tortoisesvn python python2 python3 php elixir ruby mongodb mariadb heidisql sqlite anaconda3 miniconda3 r.project r.studio docker-toolbox // you have to use system level shadowsocks to install // docker-for-windows need Hyper-V, which in unavailable in Windows Home edition Note: scoop is an open source alternative for choco.","tags":"Tech","url":"http://leetschau.github.io/install-applications-on-windows-with-chocolatey.html","loc":"http://leetschau.github.io/install-applications-on-windows-with-chocolatey.html"},{"title":"Manage Spark Jobs via API","text":"Light-weight solutions For Java project spark-jobs-rest-client For Spark on YARN Starting Spark jobs directly via YARN REST API Hidden Rest API Apache Spark's Hidden REST API A gist using Spark Hidden API Heavy Solutions Mainly developed with Scala. livy by cloudera; spark-jobserver Ref: Triggering spark jobs with REST","tags":"Tech","url":"http://leetschau.github.io/manage-spark-jobs-via-api.html","loc":"http://leetschau.github.io/manage-spark-jobs-via-api.html"},{"title":"vim Package Management on Windows","text":"Install vim 8.0 (and gvim) with choco install vim . Don't install gvim with its installer, it can't handle path corretly in cmder. Install junegunn/vim-plug for gvim on Windows: copy plug.vim into folder c:\\Program Files (x86)\\Vim\\vim80\\autoload . Add the following lines into .vimrc (open it with :e $MYVIMRC in vim): call plug # begin ( ' ~/.vim/plugged ' ) Plug ' posva/vim-vue ' , { ' for ' : ' vue ' } Plug ' scrooloose/nerdtree ' , { ' on ' : ' NERDTreeToggle ' } call plug # end () Install plugins with :PlugInstall . Note 1: Find .vimrc file location with :echo expand('~') or :echo $HOME . Note 2: The gvim installer doesn't contains vim, so you have to use cmder's vim in git-for-windows folder, which will result in 2 vim environments. Note 3: The font of vim in console is set up in the cmder. vim itself has no indenpendent font to set up. Note 4: my .vimrc and .gvimrc files: .vimrc: set nocompatible set clipboard = unnamed set autowrite set splitbelow set splitright nnoremap < F2 > : set wrap !< CR > let mapleader = \" , \" let maplocalleader = \" , \" set nobackup set noswapfile \" code folding set foldmethod = indent set foldnestmax = 2 nnoremap < space > za set laststatus = 2 \" JavaScript code folding \" set foldmethod=syntax \" set foldlevelstart=4 \" let javaScript_fold=1 \" vim-go autocmd FileType go nmap < leader > b < Plug > ( go - build ) autocmd FileType go nmap < leader > r < Plug > ( go - run ) autocmd FileType go nmap < leader > t < Plug > ( go - test ) let g : go_auto_type_info = 0 \" nerdtree nnoremap < C - i > : NERDTreeToggle < CR > autocmd bufenter * if ( winnr ( \" $ \" ) == 1 && exists ( \" b:NERDTree \" ) && b : NERDTree . isTabTree ()) | q | endif syntax on \" Font color for line longer than 80 characters highlight OverLength ctermfg = cyan guibg = #592929 match OverLength / \\ % 81 v .\\ +/ set incsearch set et set sw = 2 set ts = 2 set nu set nowrap nnoremap < C - J > < C - W >< C - J > nnoremap < C - K > < C - W >< C - K > nnoremap < C - L > < C - W >< C - L > nnoremap < C - H > < C - W >< C - H > nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; \" undo & undotree configs set undodir = $ HOME / . vim / undo / \" make sure this folder exists set undofile set undolevels = 1000 set undoreload = 10000 cabbrev ss set spell !< CR > cabbrev mt MBEToggle < CR > cabbrev mru MBEToggleMRU < CR > cabbrev vb vert sb cabbrev tt TagbarToggle < CR > cabbrev nt NERDTreeToggle < CR > call plug # begin ( ' ~/.vim/plugged ' ) Plug ' posva/vim-vue ' , { ' for ' : ' vue ' } Plug ' scrooloose/nerdtree ' , { ' on ' : ' NERDTreeToggle ' } Plug ' fatih/vim-go ' , { ' do ' : ' :GoInstallBinaries ' } Plug ' fholgado/minibufexpl.vim ' Plug ' geoffharcourt/vim-matchit ' Plug ' vim-airline/vim-airline ' Plug ' scrooloose/nerdcommenter ' Plug ' scrooloose/nerdtree ' Plug ' kien/ctrlp.vim ' call plug # end () filetype plugin indent on .gvimrc: set encoding = utf - 8 set guioptions -= T set guioptions -= m set noswapfile set nobackup set guifont = Consolas : h12 colo koehler nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; nnoremap < C - J > < C - W >< C - J > nnoremap < C - K > < C - W >< C - K > nnoremap < C - L > < C - W >< C - L > nnoremap < C - H > < C - W >< C - H >","tags":"Tech","url":"http://leetschau.github.io/vim-package-management-on-windows.html","loc":"http://leetschau.github.io/vim-package-management-on-windows.html"},{"title":"Define Command Alias in Windows Console","text":"In cmder , turn on \"Use legacy console\" in [Properties > Options] in Windows console window. See Aliases not working at all for details. Then add vi=vim $* into C:\\apps\\cmder\\config\\user-aliases.cmd. Here you must add $* after origin command, or vi myfile will be transformed to vim . My aliases definition: l = ls -- show - control - chars - F -- color - la $ * ll = ls -- show - control - chars - F -- color - l $ * ls = ls -- show - control - chars - F -- color $ * pwd = cd clear = cls history = cat \" %CMDER_ROOT%\\config\\.history \" cd = cd $ * $ Tautojump - i $ Gnul unalias = alias / d $1 cmderr = cd / d \" %CMDER_ROOT% \" vi = vim $ * g = \" C:\\Program Files (x86)\\Vim\\vim80\\gvim.exe \" $ * np = \" C:\\Program Files (x86)\\Notepad++ \\n otepad++.exe \" $ * gs = git status ga = git add - A gd = git diff $ * gl = git log -- stat -- decorate $ * glg = git log -- graph -- abbrev - commit -- decorate -- format = format : ' \\ '' %C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n ' \\ ' \\ '' %C(white)%s%C(reset) %C(dim white)- %an%C(reset) ' \\ '' -- all gci = git commit $ * dn = powershell - f C :\\ apps \\ cygRoot \\ home \\ lee_c \\ apps \\ dsnote \\ donshell . ps1 $ *","tags":"Tech","url":"http://leetschau.github.io/define-command-alias-in-windows-console.html","loc":"http://leetschau.github.io/define-command-alias-in-windows-console.html"},{"title":"Autojump in Windows Console","text":"To use autojump in Windows console, you have to install clink first. I use cmder as the console emulator, which use clink by default. So it's unnecessary to install clink. autojump uses Python, so python.exe has to be added to %PARH% by adding the following lines into C:\\apps\\cmder\\config\\user-profile.cmd: set PATH =% PATH % ; % USERPROFILE % \\ Anaconda3 ; % USERPROFILE % \\ Anaconda3 \\ Scripts Clone and install autojump according its documents: cd C : \\ apps git clone git : // github . com / joelthelion / autojump . git cd autojump python install . py There are 2 bugs for autojump on Windows. The first is Crash on Windows due to improper backslash handling in autojump_match.py . To fix it, replace line 78 ~ 88 as follows: sep = ' \\\\\\\\ ' if os . sep == ' \\\\ ' else os . sep regex_no_sep = ' [&#94; ' + sep + ' ]* ' regex_no_sep_end = regex_no_sep + ' $ ' regex_one_sep = regex_no_sep + sep + regex_no_sep The second is Running autojump on Windows with Clink . Fix it with adding cd=cd $*$Tautojump -i $Gnul to C:\\apps\\cmder\\config\\user-aliases.cmd. The meaning of $T and $G is explained at Windows Batch Scripting . After installation, add autojump's bin folder into %PATH%, via add the following line into C:\\apps\\cmder\\config\\user-profile.cmd: set PATH =% PATH % ; % USERPROFILE % \\ AppData \\ Local \\ autojump \\ bin","tags":"Tech","url":"http://leetschau.github.io/autojump-in-windows-console.html","loc":"http://leetschau.github.io/autojump-in-windows-console.html"},{"title":"Build a MySQL Web Management Rest Server with Flask","text":"On Windows 10, I use cmder as the console emulator. See dsnote 'Cmder和ConEmu笔记' for details about setting up cmder. The package flask-mysql used by the server is incompatible with Python 3.6, so we use Python 2.7 instead. Anaconda instead of Python Windows installer is used to build Python environment, because Anaconda can manage Python environment easily with conda utility. First install Anaconda, add c:\\Users\\lee_c\\Anaconda3\\Scripts to %PATH% to enable command conda in console. Then create a new Python 2.7 environment with conda create -n flask-mysql-server python=2.7 . Activate it with activate flask-mysql-server . Install packages in this environment: pip install flask-mysql flask-cors . Create server script: # -*- coding: utf-8 -*- from flask import Flask , render_template , json , request , flash , redirect , url_for from flaskext.mysql import MySQL from flask_cors import CORS , cross_origin mysql = MySQL () app = Flask ( __name__ ) app . secret_key = 'fuzhuo dasha' CORS ( app ) app . config [ 'MYSQL_DATABASE_USER' ] = 'root' app . config [ 'MYSQL_DATABASE_PASSWORD' ] = 'zhangjingg' app . config [ 'MYSQL_DATABASE_DB' ] = 'test' app . config [ 'MYSQL_DATABASE_HOST' ] = 'localhost' mysql . init_app ( app ) conn = mysql . connect () cursor = conn . cursor () @app.route ( '/' ) def index (): return \"Hello, World!\" @app.route ( '/groups/add' , methods = [ 'POST' ]) def add_group (): data = request . get_json () cursor . execute ( 'insert into groups (user, groupName) values ( %s , %s )' , [ data [ 'user' ], data [ 'grpname' ]]) conn . commit () return 'insert success' @app.route ( '/groups/del/<gid>' , methods = [ 'POST' ]) def del_group ( gid ): data = request . get_json () cursor . execute ( 'delete from groups where GrpID = %s ' , gid ) conn . commit () return 'delete success' @app.route ( '/groups/edit/<gid>' , methods = [ 'POST' ]) def edit_group ( gid ): data = request . get_json () sqlstr = \"update groups set groupName = ' %s ' where GrpID = %s \" % ( data [ 'grpname' ], gid ) print ( 'Execute SQL: ' + sqlstr ) cursor . execute ( sqlstr ) conn . commit () return 'edit success' if __name__ == '__main__' : app . run ( port = 5000 , debug = True ) And run: python app.py . Test it in a new cygwin window: curl -i -X POST -H \"Content-Type: application/json\" http://127.0.0.1:5000/groups/add -d '{\"user\": 2, \"grpname\": \"我的新组\"}' . Note: You can't run above command in cygwin, because command activate and source doesn't work in cygwin.","tags":"Tech","url":"http://leetschau.github.io/build-a-mysql-web-management-rest-server-with-flask.html","loc":"http://leetschau.github.io/build-a-mysql-web-management-rest-server-with-flask.html"},{"title":"Transfer Texts between Vim and System Clipboard","text":"vim for Linux Add set clipboard=unnamedplus into $HOME/.vimrc . for cygwin Add set clipboard+=unnamed into $HOME/.vimrc . Notice the plus sign before the equal sign. On Winodws 10, set clipboard+=unnamedplus doesn't work. ideavim The ideavim plugin for IntelliJ IDEA, PyCharm and WebStrom. Create a file named '.ideavimrc' with the following texts: set nocompatible set clipboard = unnamedplus nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; For Linux, put this file in $HOME folder. For Windows, put it in %USERPROFILE% folder.","tags":"Tech","url":"http://leetschau.github.io/transfer-texts-between-vim-and-system-clipboard.html","loc":"http://leetschau.github.io/transfer-texts-between-vim-and-system-clipboard.html"},{"title":"使用IntelliJ IDEA开发Spark程序","text":"Spark 1.6.3是Spark 1.x的最后一个版本，基于Scala 2.10。 设置项目属性时，将Scala版本设置为2.10.6，也就是2.10.x系列最高版本。 使用idea作为Spark的开发环境，需要首先安装它的 Scala 插件。 第一次使用idea以SBT方式创建Scala项目时，要找一个网络速度快的地方， 因为Idea要下载SBT整套环境的Jar包， 只有在Idea的Project Window中的External Libraries中出现了 SBT: org.scala-lang: scala-library: 2.10.6.jar 和 SBT: sbt and plugins ， 并且项目根目录下的 src/main/scala 目录变为蓝色 （表示这是一个source folder，而不是普通文件夹的灰色）后， 整个项目才初始化完毕，这时才能在 src/main/scala文件夹下创建Scala类。 创建的类（Object）中，要定义一个main方法 （输入main，idea会自动提示输入完整的main函数定义）后， 才能在右键菜单里找到Run来运行应用。 在 Project Settings > Modules > Dependencies 中，新增一个 JARs or directories， 目录指向Spark 1.6.3解压后的lib目录， 确定后在 Project Window >External Libraries 下会出现这个目录下所有的jar包。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-intellij-ideakai-fa-sparkcheng-xu.html","loc":"http://leetschau.github.io/shi-yong-intellij-ideakai-fa-sparkcheng-xu.html"},{"title":"Transfer Information between Linux and Windows Hosts","text":"Information to be transfered between Linux and Windows hosts are mostly texts and files. For uploading/downloading files, first ssh to the Linux server via MobaXterm' SSH client, then use MobaXterm's sftp function. For transfering texts between the hosts, start a tmux session on Linux host. SSH to the Linux host via MobaXterm, and attach tmux session.","tags":"Tech","url":"http://leetschau.github.io/transfer-information-between-linux-and-windows-hosts.html","loc":"http://leetschau.github.io/transfer-information-between-linux-and-windows-hosts.html"},{"title":"Disable Nautilus Desktop","text":"In i3wm, start nautilus will show a desktop, which is useless. To prevent this desktop showing when starting nautilus, run gsettings set org.gnome.desktop.background show-desktop-icons false . To enable it again, run gsettings set org.gnome.desktop.background show-desktop-icons true Turning off desktop will make wallpapaer disappear, which makes the desktop looks bad in Unity environment. Ref: How to stop nautilus managing desktop in unity How to disable nautilus from handling the desktop? How can I get rid of the nautilus desktop window?","tags":"Tech","url":"http://leetschau.github.io/disable-nautilus-desktop.html","loc":"http://leetschau.github.io/disable-nautilus-desktop.html"},{"title":"Using scikit-learn & pandas on Spark Cluster","text":"With method 'Create a Temporary Local Repository' described in Creating and Using a Parcel Repository for Cloudera Manager , we can copy anaconda parcel files to cdh manager host, and install anaconda to all the nodes in spark cluster. Then run python scripts with PYSPARK_PYTHON=/opt/cloudera/parcels/Anaconda/bin/python spark-submit pyspark_script.py according to Using the Anaconda parcel . Install Anaconda with Local Parcel Download 3 files: Anaconda-4.1.1-el6.parcel, Anaconda-4.1.1-el6.parcel.sha and manifest.json from Anaconda CDH Parcel Repo according to Using the Anaconda parcel to local disk, copy them to cdh manager.","tags":"Tech","url":"http://leetschau.github.io/using-scikit-learn-pandas-on-spark-cluster.html","loc":"http://leetschau.github.io/using-scikit-learn-pandas-on-spark-cluster.html"},{"title":"解压Windows中创建的压缩文件时出现乱码问题","text":"在Windows中创建的Zip文件如果文件名或者路径中包含了汉字， 在Linux下解压时汉字会变成乱码，解决方法是在 unzip 命令中加 -O cp936 选项： unzip - O cp936 / media / MULTIBOOT / 五菱数据 . zip Ubuntu 14.04上验证成功。 Ref: http://blog.csdn.net/gatieme/article/details/44807105","tags":"Tech","url":"http://leetschau.github.io/jie-ya-windowszhong-chuang-jian-de-ya-suo-wen-jian-shi-chu-xian-luan-ma-wen-ti.html","loc":"http://leetschau.github.io/jie-ya-windowszhong-chuang-jian-de-ya-suo-wen-jian-shi-chu-xian-luan-ma-wen-ti.html"},{"title":"Build Remote Git Repository based on SSH","text":"Build a git repo on a Linux host based on SSH protocol according to 4.4 Git on the Server . sudo adduser git sudo passwd git su git cd mkdir . ssh chmod 700 . ssh touch . ssh / authorized_keys && chmod 600 . ssh / authorized_keys vi . ssh / authorized_keys # add user ' s pub key , modify the comment mkdir - p repos / avabuilder . git cd repos / avabuilder . git / git init --bare So the git url is git@192.168.12.233:~/repos/avabuilder.git . Now clone this repo on the client host: git clone git@192.168.12.233:~/repos/avabuilder.git , push to this repo: git remote add 233 git @192.168.12.233 :~/ repos / avabuilder . git git push - u 233 master The comment of a SSH pub-key is the 3rd part of the key string. As an example, for the following pub-key, the comment part is chad@myhost : ssh - rsa AAAAB3Nza ... AH8baX chad @myhost See Add comment to existing SSH public key for details. The problem of the method is all the users with authorized key can access all the repos.","tags":"Tech","url":"http://leetschau.github.io/build-remote-git-repository-based-on-ssh.html","loc":"http://leetschau.github.io/build-remote-git-repository-based-on-ssh.html"},{"title":"使用GIMP去除图片背景","text":"使用 gimp input.jpg 打开要处理的文件， 使用工具面板第1行第4列的'Fuzzy Select Tool'， 点选需要去除的颜色区域，如果有多个不连续区域， 按住Shift键选择多个。 选好要去掉的背景区域后，[Select -> Invert] 反选区域， [Edit -> Copy], [Edit -> Paste as -> new layer], [Layer -> Tranparency → Add Alpha Channel]. 在图层面板中点击眼睛图标隐藏原来的'input.jpg'图层， 保存文件，[File -> Export as]，定义文件名'output.png'， 注意png文件支持透明图层，而jpg文件不支持，所以不能导出为jpg文件。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-gimpqu-chu-tu-pian-bei-jing.html","loc":"http://leetschau.github.io/shi-yong-gimpqu-chu-tu-pian-bei-jing.html"},{"title":"vertx-blueprint-todo-backend代码分析","text":"本文是对 Vert.x Blueprint - Todo Backend 的分析。 Handler -> Future 以API Delete all todo entities: DELETE /todos 为例， 第一次简单实现（ REST API with Vert.x Web 一节的做法） 代码实现为 SingleApplicationVerticle.java L211 : private void handleDeleteAll ( RoutingContext context ) { redis . del ( Constants . REDIS_TODO_KEY , res -> { if ( res . succeeded ()) context . response () . setStatusCode ( 204 ) . end () ; else sendError ( 503 , context . response ()) ; } ) ; } redis.del() 函数是vert.x标准的 func(param1, param2, handler) 格式。 在[Decouple controller and service][dcas]一节实现了服务(service)和 控制器(controller)的解耦，这个API的控制器部分在[TodoVerticle.java L220]: private void handleDeleteAll ( RoutingContext context ) { service . deleteAll () . setHandler ( deleteResultHandler ( context )); } 服务分为两部分，接口在TodoService.java文件中， Redis服务的具体实现在 RedisTodoService.java L112 : @ Override public Future < Boolean > deleteAll () { Future < Boolean > result = Future . future () ; redis . del ( Constants . REDIS_TODO_KEY , res -> { if ( res . succeeded ()) result . complete ( true ) ; else result . complete ( false ) ; } ) ; return result ; } 也就是将 func(param1, param2, handler) 改为 futureFunc().setHandler() ， 将具体的处理逻辑包括handler都放到 futureFunc() 中完成， 然后返回一个 future 对象， 再调用 future 对象的 setHandler() 方法完成整个异步处理过程。 Load Configurations vert.x应用是通过在命令 java -jar <fat-jar>.jar -conf <conf-path> 中的 -conf 选项加载应用配置的。 举例来说，config/config.json文件内容为： { \"service.type\" : \"redis\" } 当以下面的方法启动应用时： java -jar build/libs/vertx-blueprint-todo-backend-fat.jar -conf config/config.json 表达式 config().getString(\"service.type\", \"redis\") 返回值为 \"redis\" ， 其中 config() 是定义在抽象类 AbstractVerticle 中的公有方法， 所以可以在 AbstractVerticle 的子类方法中直接使用。","tags":"Tech","url":"http://leetschau.github.io/vertx-blueprint-todo-backenddai-ma-fen-xi.html","loc":"http://leetschau.github.io/vertx-blueprint-todo-backenddai-ma-fen-xi.html"},{"title":"Ubuntu上的截图和标记工具","text":"首先安装shutter, pinta和CopyQ： sudo apt install pinta shutter ， CopyQ的安装见dsnote \"CopyQ Notes\"。 创建如下可执行脚本（文件名'tss'）并加入到 $PATH 中： 1 2 3 4 5 #!/bin/bash # taking screenshots shutter -s \" $@ \" -e -o ~/temp/screenshot.png pinta ~/temp/screenshot.png copyq write image/png - < ~/temp/screenshot.png 现在执行 tss 命令，进入鼠标选择截图区域状态， 确定后进入图像编辑页面，可以在上面做标记， 编辑完保存图片，关闭pinta，图像被copy到剪贴板上。 由于脚本中使用了 \"$@\" ，在 tss 后面可以加上 shutter 的命令行参数， 例如 tss -d 5 ，可以实现延时5秒截图。 另外还可以定义是否捕捉鼠标等，详见 shutter -h .","tags":"Tech","url":"http://leetschau.github.io/ubuntushang-de-jie-tu-he-biao-ji-gong-ju.html","loc":"http://leetschau.github.io/ubuntushang-de-jie-tu-he-biao-ji-gong-ju.html"},{"title":"Use Bitnami Redis","text":"The password is stored in file $REDIS_HOME/redis/etc/redis.conf: requirepass < modify - this - to - new - password > If you want clients to connect to server without auth, stop redis server, comment out this line, and start it again.","tags":"Tech","url":"http://leetschau.github.io/use-bitnami-redis.html","loc":"http://leetschau.github.io/use-bitnami-redis.html"},{"title":"Define File Association for Rifle","text":"I want to use apps of WPS to open Word, Excel and PowerPoint files in a new process (defined by the flag 'f'): cat ~/ . config / ranger / rifle . conf ext docx ? , has wps , flag f = wps -- \"$@\" ext pdf , has evince , flag f = evince -- \"$@\" ext xlsx ? , has et , flag f = et -- \"$@\" ext pptx ? , has wpp , flag f = wpp -- \"$@\" ext mp4 , has totem , flag f = totem -- \"$@\" ext jpg , has eog , flag f = eog -- \"$@\" Now use rifle mydoc.docx in shell, or in ranger, to open docx, doc files without blocking ranger itself. Ref: https://wiki.archlinux.org/index.php/ranger#File_association https://github.com/ranger/ranger/blob/master/ranger/config/rifle.conf","tags":"Tech","url":"http://leetschau.github.io/define-file-association-for-rifle.html","loc":"http://leetschau.github.io/define-file-association-for-rifle.html"},{"title":"Set Environment Variables in Windows","text":"Set env variables in current process: set JAVA_HOME='D:\\jdk8' ; Set env vars globally: setx JAVA_HOME 'D:\\jdk8' ; Print a env var: echo %JAVA_HOME% . Ref: https://superuser.com/questions/79612/setting-and-getting-windows-environment-variables-from-the-command-prompt","tags":"Tech","url":"http://leetschau.github.io/set-environment-variables-in-windows.html","loc":"http://leetschau.github.io/set-environment-variables-in-windows.html"},{"title":"Gradle Notes","text":"List dependencies location (run with gradle listdeps ): task listdeps { configurations . runtime . files . each { print it ; print '\\n' } } Put dependencies into a local folder 'lib': task ( getjars , type : Copy ) { into \"lib\" from configurations . runtime }","tags":"Tech","url":"http://leetschau.github.io/gradle-notes.html","loc":"http://leetschau.github.io/gradle-notes.html"},{"title":"Rerun Gradle Tasks After File Changes","text":"mkdir - p helloserver / src ; cd helloserver; cat << EOF > src / HelloServer . groovy vertx . createHttpServer () . requestHandler ( { req -> req . response () . putHeader ( \" content-type \" , \" text/html \" ) . end ( \" <html><body><h3>Hello from vert.X</h3></body></html> \" ) } ) . listen ( 8080 ) EOF cat << EOF > build . gradle task mytask ( type : Exec ) { inputs . files ' src ' // commandLine ' vertx ' , ' run ' , ' src/HelloServer.groovy\" ' # this not work commandLine ' cat ' , ' src/HelloServer.groovy ' ext . output = { return standardOutput . toString () } } EOF gradle - t mytask Any file in folder 'src' changes, gradle will rerun 'mytask'. However, the command after 'commandLine' parameter can't be a service. Ref: Continuous build","tags":"Tech","url":"http://leetschau.github.io/rerun-gradle-tasks-after-file-changes.html","loc":"http://leetschau.github.io/rerun-gradle-tasks-after-file-changes.html"},{"title":"Vert.x Notes","text":"Today I read Groovy Manual in 'Core' section in vertx documentation . It's a very good starting point. Good examples: * gradle groovy example * gradle java example * gradle java embeded example * Vert.x Tutorial by Jakob Jenkov Some facts about vertx: The golden rule: never block event loop (like node.js); vertx use 'future' to handle async events; The 'verticle' is something like actor in akka; Verticles live in event loop (standard verticle) or worker thread (worker verticle). They both live in one thread; An 'event bus' has many 'address', which is a plain string; A 'handler' can be registered to one or more addresses; One or more handlers can be registered to the same address; A 'message' can be published to an address, in which case all handlers can receive this message; A message can be sent to an address, in which case only one handler could receive this message; vertx use JSON as the default message format; Run Vertical with external jars Add these jars into the 'dependencies' section in 'build.gradle'. Then add the task 'getjars' into build.gradle: task ( getjars , type : Copy ) { into \"lib\" from configurations . runtime } When develop, run gradle getjars to put all jars into 'lib' folder. Then run verticle with vertx run -cp 'lib/*' <verticle-name> . The wildcard syntax can only be used for Java 6 or later. In Java 5, you have to add all jar file names into -cp option. See How to include all the jars present at a particular directory in the CLASSPATH in one go? for details. Web App Auto Refresh First install Auto Refresh plugin for your browser, such as Chrome, then run: mkdir src cat << EOF > src / HelloServer . groovy vertx . createHttpServer () . requestHandler ( { req -> req . response () . putHeader ( \" content-type \" , \" text/html \" ) . end ( \" <html><body><h3>Hello from vert.X!</h3></body></html> \" ) } ) . listen ( 8080 ) EOF vertx run -- redeploy = \" src/**/*.* \" -- launcher - class = io . vertx . core . Launcher src / HelloServer . groovy Now when any file in folder 'src' changes, the vertical will be redeployed. You can put all external jars into 'lib' folder and run the verticle with the -cp option: vertx run --redeploy=\"src/**/*.*\" --launcher-class=io.vertx.core.Launcher -cp lib src/HelloServer.groovy . See Automatic redeployment in Eclipse IDE and vertx run --help for details. Build Fat Jar with Gradle Build a fat-jar including all dependencies with Gradle: gradle shadowJar . Then this app can be run with java -jar app-fat-jar.jar . Project files: cat << EOF > build . gradle plugins { id ' java ' id ' groovy ' id ' application ' id ' com.github.johnrengelman.shadow ' version ' 1.2.3 ' } repositories { mavenCentral () maven { url \" https://oss.sonatype.org/content/repositories/snapshots \" } } version = ' 3.4.1 ' sourceCompatibility = ' 1.8 ' mainClassName = ' io.vertx.core.Launcher ' dependencies { compile \" io.vertx:vertx-core:$version \" compile \" io.vertx:vertx-lang-groovy:$version \" } processResources { from ' src/main/groovy ' } shadowJar { classifier = ' fat ' manifest { attributes ' Main-Verticle ' : ' groovy:MyGroovyVerticle ' } mergeServiceFiles { include ' META-INF/services/io.vertx.core.spi.VerticleFactory ' } } task wrapper ( type : Wrapper ) { gradleVersion = ' 3.4.1 ' } EOF mkdir - p src / main / groovy cat << EOF > src / main / groovy / MyGroovyVerticle . groovy vertx . createHttpServer () . requestHandler ( { req -> req . response () . putHeader ( \" content-type \" , \" text/html \" ) . end ( \" <html><body><h1>Hello from vert.x!</h1></body></html> \" ) } ) . listen ( 8080 ) EOF P.S: Why you can use vertx directly in Groovy script without import or declaring it? Because vertx is a field in class AbstractVerticle . The entrance class defined in build.gradle is io.vertx.core.Launcher , which will load AbstractVerticle somewhere at runtime (How? I didn't figure it out so far). The launcher then load your verticle (defined in Main-Verticle in build.gradle) As compared with Java verticle class, you must declare you class extends AbstractVerticle explicitly.","tags":"Tech","url":"http://leetschau.github.io/vertx-notes.html","loc":"http://leetschau.github.io/vertx-notes.html"},{"title":"在Linux系统中模拟鼠标点击","text":"模拟鼠标点击分为3个步骤： 首先能够得到要点击的目标位置的坐标， 其次能够用命令模拟鼠标点击动作， 最后能够用快捷键执行该命令。 下面以 Wiznote 中模拟点击 \"阅读/编辑\" 切换按钮为例说明实现过程。 获取鼠标位置 首先安装 xdotool ，执行： $ sleep 5 ; xdotool getmouselocation x:1669 y:110 screen:0 window:79691803 前面的 sleep 5 是为了能够在这段时间里做切换窗体、 移动鼠标到目标位置等准备工作。 这样就得到了要点击位置的坐标是(1669, 110)。 模拟鼠标点击 在命令行中执行： xdotool mousemove 1669 110 click 3 ， 这里使用左手鼠标，所以鼠标键设为3。 如果达到预期效果，则可以进入下一步。 绑定快捷键 如果是在 i3wm 环境下，只要在 ~/.i3/config 文件中添加下面的配置： bindsym $mod+x exec xdotool mousemove 1669 110 click 3 ， 然后执行命令 i3-msg reload 就可以实现 Alt-x 模拟鼠标点击了。 另外可以借助 Autokey 工具： 在Autokey中新建一个Script，内容为： system . exec_command ( 'xdotool mousemove 3047 122 click 3' ) 绑定快捷键Alt-x. 这样在WizNote中编写笔记时，就可以用Alt-x在 \"阅读/编辑\"两种模式间方便地切换了。","tags":"Tech","url":"http://leetschau.github.io/zai-linuxxi-tong-zhong-mo-ni-shu-biao-dian-ji.html","loc":"http://leetschau.github.io/zai-linuxxi-tong-zhong-mo-ni-shu-biao-dian-ji.html"},{"title":"Compile and Run Clojure Codes Manually","text":"创建一个简单的Clojure命令行应用，编译为class文件，运行class文件： $ mkdir hello && cd hello $ mkdir -p src/com/hello_world classes $ cat << EOF > src/com/hello_world/core.clj (ns com.hello-world.core (:gen-class)) (defn -main [ greetee ] (println (str \"Hello \" greetee \"!\" ))) EOF $ java -cp $HOME/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:.:./src:./classes clojure.main user=> (compile 'com.hello-world.core) user=> &#94; d $ java -cp $HOME/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:.:./classes 'com.hello_world.core' \"chao\" Hello chao! 注意什么时候用 - ，什么时候用 _ ，为了避免麻烦，最好不要在包名里加 - 和 _ 。 注意： 编译时classpath里面必须有 classes 文件夹，用其他名字会导致错误，原因不明； Clojure的namespace相当于Java的package，必须与路径对应； 要编译一个Clojure类，必须在namespace里面加 (:gen-class) ；","tags":"Tech","url":"http://leetschau.github.io/compile-and-run-clojure-codes-manually.html","loc":"http://leetschau.github.io/compile-and-run-clojure-codes-manually.html"},{"title":"Find Package Information with apt-file","text":"sudo apt install apt - file apt - file update apt - file search bin / ab | ag 'bin/ab$'","tags":"Tech","url":"http://leetschau.github.io/find-package-information-with-apt-file.html","loc":"http://leetschau.github.io/find-package-information-with-apt-file.html"},{"title":"Web Server Benchmarking","text":"ab sudo apt install apache2 - utils ab - c 100 - n 1000 - k https : // www . baidu . com / -c means how many users send requests at the SAME time. -n means the total requests to be sent in this benchmark. -k means keep-alive. See its manpage for details. Ref: http://stackoverflow.com/questions/12732182/ab-load-testing Install with yum install httpd-tools on CentOS. See http://serverfault.com/questions/514401/how-to-install-apache-benchmark-on-centos for details.","tags":"Tech","url":"http://leetschau.github.io/web-server-benchmarking.html","loc":"http://leetschau.github.io/web-server-benchmarking.html"},{"title":"Cygwin on Windows 10","text":"相关文件夹： Package cache: d:\\warez\\cygwinPackages Installation directory: d:\\apps\\cygRoot User home directory: d:\\docs\\cygHome 安装步骤： 从 cygwin官网 下载 setup-x86_64.exe 安装cygwin核心：在Windows命令行中执行 setup-x86_64.exe --no-admin -q -n -R d:\\apps\\cygRoot -s http://mirrors.163.com/cygwin/ -l d:\\warez\\cygwinPackages 修改 $Home 目录：在 D:\\apps\\cygRoot\\etc\\nsswitch.conf 文件中增加 db_home: /cygdrive/d/docs/cygHome ； 定义启动快捷键 Alt-F10 ：在Autohotkey脚本中添加 !F10:: Run D:\\apps\\cygRoot\\bin\\mintty.exe -i /Cygwin-Terminal.ico - 修改用户名：启动cygwin，执行命令 mkpasswd -c > /etc/passwd 安装新包：在Windows命令行中执行 setup-x86_64.exe --no-admin -q -n -R d:\\apps\\cygRoot -s http://mirrors.163.com/cygwin/ -l d:\\warez\\cygwinPackages -P tmux,python3,vim,zsh,fzf-zsh,git,curl,zip,unzip,python3-setuptools,the_silver_searcher,procps-ng 安装 pip ：cygwin中执行 easy_install-x.y pip ，例如 easy_install-3.4 pip 安装oh-my-zsh： git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh 安装autojump: git clone git://github.com/joelthelion/autojump.git cd autojump ./install.py echo '[[ -s /cygdrive/d/docs/cygHome/.autojump/etc/profile.d/autojump.sh ]] && source /cygdrive/d/docs/cygHome/.autojump/etc/profile.d/autojump.sh' >> ~/.zshrc 安装Vundle： git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim` vim +PluginInstall 使用 vi 启动 vim ：在 ~/.bash_aliases 中增加 alias vi='vim' 恢复配置和笔记 mkdir $HOME/apps cd $HOME/apps git clone git@github.com:leetschau/sysClone.git git clone git@github.com:leetschau/dsnote.git // download dsnote tarball dn r 使用 zsh 作为登录shell：将 /etc/passwd 中的登录shell改为 /bin/zsh 说明： 不要安装到C盘，不要使用管理员权限安装： setup-x86_64.exe --no-admin cygwin使用 Alt-F11 作为全屏快捷键，所以这里将启动快捷键改为 Alt-F10 使用 cygcheck -p <package-name> 来搜索package，类似于 apt search ... cygwin中可以直接使用Windows中的环境变量，大小写必须与Windows中的定义一致， 在Windows命令行中用 set 命令列出所有环境变量，在cygwin下用 env 列出所有环境变量 Uninstall cygwin Uninstall services: cygrunsrv -L Delete cygwin root folders: d:\\apps\\cygRoot 待解决问题 fzf无法用 Ctrl-R 搜索命令历史：在 sysClone/confs 中增加文件 ~/.fzf.zsh 参考 cygwin网易开源镜像站 cygwin安装程序命令行参数列表","tags":"Tech","url":"http://leetschau.github.io/cygwin-on-windows-10.html","loc":"http://leetschau.github.io/cygwin-on-windows-10.html"},{"title":"Download Jar Files and Dependencies","text":"For example we need download jar-file 'http-builder' and all its dependencies to folder \"target\". Ivy First download apache-ivy-x.x.x-bin.tar.gz from Apache Ivy . Extract ivy-x.x.x.jar to ~/warez folder. Then create a ivy definition file and run it: cat << EOF > ivy . xml < ivy - module version = \"2.0\" > < info organisation = \"org.demo\" module = \"demo\" /> < configurations defaultconfmapping = \"default\" /> < dependencies > < ! -- replace the following line with the definitions from [MVNRepository](https://mvnrepository.com/) --> < dependency org = \"org.codehaus.groovy.modules.http-builder\" name = \"http-builder\" rev = \"0.7\" /> </ dependencies > </ ivy - module > EOF java - jar ~/ warez / ivy - 2.4.0 . jar - ivy ivy . xml - retrieve \"target/[artifact].[ext]\" Ref: http://stackoverflow.com/questions/7908090/downloading-all-maven-dependencies-to-a-directory-not-in-repository Gradle Install gradle with sdkman, then run: cat << EOF > build . gradle apply plugin : 'java' task ( getjars , type : Copy ) { into \"target\" from configurations . runtime } repositories { jcenter () } dependencies { compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7' } EOF gradle getjars Note: jcenter() is a superset of mavenCentral() , and faster than it. See Android buildscript repositories: jcenter VS mavencentral for details. Maven Download jars of 'mysql' and 'druid', and all their dependencies to subfolder 'jars' (maven will create this folder if not exists): cat < < EOF > pom.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.znbt </groupId> <artifactId> dtester </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <dependencies> <dependency> <groupId> mysql </groupId> <artifactId> mysql-connector-java </artifactId> <version> 6.0.6 </version> </dependency> <dependency> <groupId> com.alibaba </groupId> <artifactId> druid </artifactId> <version> 1.0.29 </version> </dependency> </dependencies> </project> EOF mvn dependency:copy-dependencies -DoutputDirectory=jars That's to say, downloading jars with maven is a 2-step process: add dependency definitions between <dependencies> tags of template file 'pom.xml': <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> com.znbt </groupId> <artifactId> dtester </artifactId> <version> 0.0.1-SNAPSHOT </version> <packaging> jar </packaging> <dependencies> </dependencies> </project> In the folder of 'pom.xml', run command mvn dependency:copy-dependencies -DoutputDirectory=jars . Ref: http://stackoverflow.com/questions/7742252/how-to-use-maven-pom-to-download-jar-files-only-to-a-specific-directory","tags":"Tech","url":"http://leetschau.github.io/download-jar-files-and-dependencies.html","loc":"http://leetschau.github.io/download-jar-files-and-dependencies.html"},{"title":"使用LaTeX编辑文档","text":"Winodws Tex Live 目前功能最完善的Tex系统，支持 ctexart ，支持多种汉字字体，编译时不需要在 xelatex和pdflatex间切换，都使用默认的pdfLaTeX即可。 下载包最大，安装很方便。 从TeX Live的开发维护者 TUG 的 Acquiring TeX Live as an ISO image 上下载 TeX Live DVD 文件，其中包含了 Windows 和 Linux 下的安装程序。 最新版ISO文件 texlive2017-20170524.iso 大小为 3.6GB. 加载ISO文件后，在命令行里执行install-tl-windows.bat文件，如果报找不到 cmd.exe 命令错误，确认系统%PATH%里包含 C:\\Windows\\system32 文件夹，之后在命令行里执行 cmd 命令确认。 安装后占用5GB磁盘空间，执行 [开始 > TeX Live 2017 > TeXworks editor] 启动编辑器， 将下面的内容拷贝到编辑器中，用快捷键 Ctrl-t 预览结果， 文件修改后再次使用这个快捷键保存文件并更新预览窗口： \\documentclass { article } \\begin { document } Let: $$ ss_{xy} = \\sum ( x_i - \\bar x ) ( y_i - \\bar y ) $$ \\end { document } 或者包含汉字及字体定义： \\documentclass [UTF8] { ctexart } \\title { 石頭記 } \\author { 曹雪芹 } \\date { \\today } \\begin { document } \\heiti \\maketitle \\begin { center } \\kaishu 滿紙荒唐言 \\\\ \\songti 一把辛酸淚 \\\\ \\fangsong 都雲作者癡 \\\\ 誰解其中味 \\\\ \\end { center } \\end { document } Ref: https://tex.stackexchange.com/questions/17611/how-does-one-type-chinese-in-latex MiKTeX MiKTeX 只有 Windows 实现，不像 TeX Live 是跨平台的。 相比于TeX Live，它可以在运行时安装需要的package，所以初始安装比较小， 安装包 basic-miktex-x64.exe 220MB，安装完成后占用 850MB 磁盘空间。 MiKTeX 使用 TeXworks作为编辑器，相比于 WinEdt，它更小巧。 可以防爆地设置编辑器字体和字号，可以方便地切换 typeset 引擎， 默认使用 pdfLaTex，编译中文时需要切换为 XeLaTeX。 处理汉字时它使用比CTeX的 CJK 更先进的 xeCJK 包，示例文件： \\documentclass [12pt] { article } \\usepackage { xeCJK } % I supposed that you do have these fonts mentioned below. \\setCJKmainfont [BoldFont={SimHei},ItalicFont={[SIMKAI.TTF] } ] { SimSun } \\setCJKsansfont { SimHei } \\setCJKmonofont { [SIMFANG.TTF] } \\setCJKfamilyfont { zhsong }{ SimSun } \\setCJKfamilyfont { zhhei }{ SimHei } \\setCJKfamilyfont { zhkai }{ [SIMKAI.TTF] } \\setCJKfamilyfont { zhfs }{ [SIMFANG.TTF] } \\newcommand* { \\songti }{ \\CJKfamily { zhsong }} % 宋体 \\newcommand* { \\heiti }{ \\CJKfamily { zhhei }} % 黑体 \\newcommand* { \\kaishu }{ \\CJKfamily { zhkai }} % 楷书 \\newcommand* { \\fangsong }{ \\CJKfamily { zhfs }} % 仿宋 \\title { Test } \\author { zhulongsheng(11291065@bjtu.edu.cn) } \\date { 2014/01/28 } \\begin { document } \\maketitle \\today \\section { 第一 } 这是第一段 \\heiti \\section { 第二 } \\kaishu 这是第二段 \\subsection { Goal } 这是 \\LaTeX \\end { document } 使用 Ctrl-t 进行实时预览。 CTeX CTeX也使用 MiKTeX，但体积比后者大了一倍多，且汉字处理使用的是已经过时的 CJK 包， 因此不推荐使用。 从 CTeX 官网下载安装包 CTeX_2.9.2.164_Full.exe ， 文件大小1.4GB，安装到 D:\\apps\\CTEX2.9.2 下（此目录以下记为$CTEXHOME）， 占用空间2.5GB。 用RapidEE将 $CTEXHOME/CTeX/cct/bin 和 $CTEXHOME/MiKTeX/miktex/bin 加入到 User 的 $PATH 中， 运行 $CTEXHOME/WinEdt/WinEdt.exe ，确认主菜单中 Options > Execution Modes > PDF Viewer > PDF Viewer Executable 指向一个可用的 PDF浏览器EXE文件，默认是CTeX自带的SumatraPDF.exe，使用默认值即可。 在编辑器中输入如下代码： \\documentclass [12pt] { article } \\usepackage { CJK } \\title { Demo Article } \\author { Li Chao } \\date { \\today } \\begin { document } \\maketitle \\begin { CJK* }{ GBK }{ kai } 关于示例文档的一些说明。 \\end { CJK* } \\end { document } 保存到本地后，按 F9 执行编译，如果没有错误，会自动打开SumatraPDF显示结果。 修改文件内容后再按 F9 ，更新内容会直接显示在PDF Viewer中，实现了实时预览。 文章的模板是： \\documentclass [12pt] { article } \\title { … } \\author { Li Chao } \\date { \\today } \\begin { document } \\maketitle % Insert content here \\end { document } 如果需要写中文，加上 \\usepackage{CJK} ，在正文中加上 \\begin{CJK*}{GBK}{kai} 和 \\end{CJK*} 。 Ref: https://tex.stackexchange.com/questions/85060/pdf-viewer-with-auto-update-for-winedt Linux Tex Live + XeTeX TeX 是一套排版(typesetting)系统， XeTeX 是一套基于Unicode实现的、 支持现代字体技术的TeX排版引擎，处理中文非常合适。 TeX Live 是目前流行的TeX发行版， 在Ubuntu 14.04系统上，使用下面的方法安装并运行Demo： sudo apt - get install texlive - xetex texlive - latex - extra fc - list : outline - f \" %{family} \\n \" # 得到下文用到的可用字体名称 cat << EOF > stone . tex \\ documentclass [ 12 pt , a4paper ]{ article } \\ usepackage { xltxtra , fontspec , xunicode } \\ usepackage [ slantfont , boldfont ]{ xeCJK } % 允许斜体和粗体 \\ setCJKmainfont { WenQuanYi Micro Hei } % 设置缺省中文字体 \\ setCJKmonofont { WenQuanYi Micro Hei Mono } % 设置等宽字体 \\ setmainfont { DejaVu Serif } % 英文衬线字体 \\ setmonofont { Ubuntu Mono } % 英文等宽字体 \\ title {石頭記} \\ author {曹雪芹} \\ date {} \\ begin { document } \\ maketitle \\ begin { center } 滿紙荒唐言\\\\ 一把辛酸淚\\\\ 都雲作者癡\\\\ 誰解其中味\\\\ \\ end { center } \\ end { document } EOF xelatex stone . tex evince stone . pdf Tex Live安装文件在 /usr/share/texlive 目录下， 此目录下的 texmf-dist 目录符合 TeX Directory Structure 规范。 TeX的package安装在 tex 目录下，例如 nameref 这个package安装路径为： $ locate nameref /usr/share/doc/texlive-doc/latex/hyperref/nameref.pdf /usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty 所以package的定义（至少是一部分）保存在sty文件中。 TeX Live的包管理器叫做 tlmgr ，可以用 tlmgr help 查看帮助文档。 但在Ubuntu上执行 tlmgr repository list 并没有按照预期列出repo，原因不明。 Ref: http://blog.jqian.net/post/xelatex.html Texmaker Texmaker作为xetex的代码编辑器非常好用， 首先使用 sudo apt-get install texmaker 安装， 启动软件，在 Options -> Configure Texmaker -> Quick Build 中将 Quick Build Command 设置为 XeLaTeX + View PDF ， 然后在 Shortcuts 中将 Quick Build 快捷键设置为 Alt+J ， 将 Toggle focus editor/pdf viewer 快捷键设置为 Alt+; ， 使用起来就很方便了。 另外，从 Texmaker 下载的安装包 texmaker_ubuntu_14.04_4.5_amd64.deb 安装失败，报下面的错误： dpkg : error processing archive texmaker_ubuntu_14 . 04 _4 . 5 _amd64 . deb ( -- install ) : trying to overwrite ' /usr/share/texmaker/texmaker_se.qm ' , which is also in package texmaker - data 4 . 1 - 1 dpkg - deb : error : subprocess paste was killed by signal ( Broken pipe ) Errors were encountered while processing : texmaker_ubuntu_14 . 04 _4 . 5 _amd64 . deb Lyx Lyx生成的文件使用了自己的扩展名 lyx ，且编辑时类似于Office所见即所得， 不能直接改源代码，比较不方便。 另外，没找到如何使用本地字体。 sudo add - apt - repository ppa : lyx - devel / release sudo apt update sudo apt install lyx sudo apt - get install latex - cjk - all 显示汉字 打开有汉字的文档，作如下设置： Document -> Settings -> Language -> Language: Chinese (simplified) Document -> Settings -> Language -> Encoding: Other -> Unicode (CJK) (utf8) Document -> Settings -> Fonts -> CJK: gbsn 其他设置 显示源代码： View -> Source Pane 显示文档结构： View -> Outline Pane","tags":"Tech","url":"http://leetschau.github.io/shi-yong-latexbian-ji-wen-dang.html","loc":"http://leetschau.github.io/shi-yong-latexbian-ji-wen-dang.html"},{"title":"Ubuntu视频录制","text":"需要录制浏览器中的一段视频，用视频下载软件下载失败， 所以尝试直接录屏。 用Ubuntu Software Center安装了 gtk-recordmydesktop ， 启动软件，选择要录制的屏幕，然后点击\"Save as\"按钮确定保存输出文件的位置和名称， 不需要写扩展名，点击\"Record\"开始录制，这个软件会开启麦克风把环境声音录制下来， 所以需要保持安静，把视频的声音开大。 检查视频格式： sudo apt - get install tovid tovid id < video - file - name > Ref: http://xmodulo.com/how-to-identify-video-formats-from-command-line-linux.html http://askubuntu.com/questions/4428/how-to-record-my-screen","tags":"Tech","url":"http://leetschau.github.io/ubuntushi-pin-lu-zhi.html","loc":"http://leetschau.github.io/ubuntushi-pin-lu-zhi.html"},{"title":"Format XML Files in Shell","text":"xmllint and tidy can both format XML and HTML file. Using their default versions On Ubuntu 14.04, xmllint is more reliable than tidy regarding to indentation correctness and Unicode conversion. sudo apt install libxml2 - utils xmllint --format input.xml > output.xml sudo apt install tidy tidy - xml - i input . xml > output . xml","tags":"Tech","url":"http://leetschau.github.io/format-xml-files-in-shell.html","loc":"http://leetschau.github.io/format-xml-files-in-shell.html"},{"title":"Quote, Syntax quote and Unquote in Clojure","text":"Ref: https://clojuredocs.org/clojure.core/unquote http://stackoverflow.com/questions/26485514/clojure-difference-between-quote-and-syntax-quote","tags":"Tech","url":"http://leetschau.github.io/quote-syntax-quote-and-unquote-in-clojure.html","loc":"http://leetschau.github.io/quote-syntax-quote-and-unquote-in-clojure.html"},{"title":"SQLite Notes","text":"Create a new sqlite database: git clone git @github . com : leetschau / zap - ring . git cd zap - ring sqlite3 - init resources / data / schema . sql zap . db . quit GUI client With Squirrel SQL as Sqlite Client, first download sqlite jdbc driver sqlite-jdbc-3.16.1.jar from Maven Repo to ~/warez folder. Add a driver in Squirrel SQL Client: Name: Sqlite Example URL: jdbc:sqlite:/home/leo/work/mydatabase.db Website URL: http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc Choose Extra Class Path tab, add ~/warez/sqlite-jdbc-3.16.1.jar . Click List Drivers , Class Name will be filled with org.sqlite.JDBC automatically. Add a new alias in Squirrel SQL Client with URL , say jdbc:sqlite:/home/leo/workspace/zap-ring/zap.db . Now you can browse and modify this local sqlite database. CLI client On Ubuntu 14.04 sqlite3 is installed by default. sqlite3 . help . open zap . db # or in one step : ` sqlite3 zap . db ` . tables select * from status ; Note: Official SQLite JDBC repository . If the official maven repository can't be connected, you can use aliyun maven repo instead. But their urls have not strict mapping relations. For example: sqlite jdbc driver: http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc http://maven.aliyun.com/nexus/content/groups/public/org/xerial/sqlite-jdbc Mongo jdbc driver: http://mvnrepository.com/artifact/org.mongodb/mongo-java-driver http://maven.aliyun.com/nexus/content/groups/public/org/mongodb/mongo-java-driver","tags":"Tech","url":"http://leetschau.github.io/sqlite-notes.html","loc":"http://leetschau.github.io/sqlite-notes.html"},{"title":"Clojure Development Workflow","text":"Hello world This is a HelloWorld demo with auto reloading function, a minimal clojure ring web server: sdk install leiningen lein new hello cd hello cat << EOF > project . clj ( defproject hello \"0.1.0-SNAPSHOT\" : description \"My Hello World\" : license { : name \"Eclipse Public License\" : url \"http://www.eclipse.org/legal/epl-v10.html\" } : dependencies [[ org . clojure / clojure \"1.8.0\" ] [ ring \"1.4.0\" ] [ compojure \"1.5.0\" ]] : plugins [[ lein - ring \"0.11.0\" ]] : ring { : handler hello . core / app : auto - reload ? true : auto - refresh ? true } ) EOF cat << EOF > src / hello / core . clj ( ns hello . core (: use compojure . core )) ( defroutes app ( GET \"/\" [] \"Hello World\" )) EOF lein ring server Now a browser is opened at http://localhost:3000/ . Modify Hello World in file src/hello/core.clj to Hello Ring , and refresh browser, you can see the changes. Note 1: Ring server has no console outputs to let you known it's reloaded. Note 2: For clojure file editing in vim, see dsnote \"Use vim as Clojure Development Environment\". IPython style workflow You can create and debug functions in REPL, then add them into project files at rumtime. Or load existing functions into REPL and modify them. For example, zap-ring : List available ns: (all-ns) Load a ns defined in a file: (load \"zap/views\") List all functions in a ns: (dir zap.views) Switch to another ns (with all the imported functions): (in-ns 'zap.views) git clone git @github . com : leetschau / zap - ring . git cd zap - ring lein repl user => ( all - ns ) ... user => ( load \"zap/views\" ) user => ( all - ns ) ... # you can find \"zap.views\" , \"zap.models\" are added into available namespaces user => ( dir zap . views ) user => ( keys ( ns - publics 'zap.views)) user=> (in-ns ' zap . views ) zap . views => ( html [ :h1 \"Project List\" ] ) zap . views => ( def h1 ( html [ :h1 \"Project List\" ] )) #' zap . views / h1 zap . views => ( type h1 ) clojure . lang . LazySeq zap . views => ( first h1 ) {: tag : h1 , : attrs {} , : content ( \"Project List\" ) } zap . views => ( type ( first h1 )) clojure . lang . PersistentArrayMap zap . views => ( keys ( first h1 )) ( : tag : attrs : content ) zap . views => ( vals ( first h1 )) ( : h1 {} ( \"Project List\" )) Ref: Loading and using namespaces in the Clojure REPL","tags":"Tech","url":"http://leetschau.github.io/clojure-development-workflow.html","loc":"http://leetschau.github.io/clojure-development-workflow.html"},{"title":"A Minimal vert.x HTTP Server and Client","text":"sdk install vertx git clone https : // github . com / vert - x3 / vertx - examples . git cd vertx - examples / core - examples / src / main / groovy / io / vertx / example / core / http / simple vertx run server . groovy # on a new console window vertx run client . groovy","tags":"Tech","url":"http://leetschau.github.io/a-minimal-vertx-http-server-and-client.html","loc":"http://leetschau.github.io/a-minimal-vertx-http-server-and-client.html"},{"title":"Ubuntu网络速度监控工具","text":"speedometer After installing speedometer with sudo apt-get install speedometer , monitor interface eth0 with: speedometer -r eth0 -t eth0 . There are some equivalent, like glances, nmon, etc.","tags":"Tech","url":"http://leetschau.github.io/ubuntuwang-luo-su-du-jian-kong-gong-ju.html","loc":"http://leetschau.github.io/ubuntuwang-luo-su-du-jian-kong-gong-ju.html"},{"title":"基于HTTP协议收发JSON数据","text":"使用 httpbin 测试HTTP POST收发数据。 curl 默认的 Content-Type 是 application/x-www-form-urlencoded ， 所以第一次发送时JSON数据被当成了 form 数据， 第二次发送时通过 -H 参数指定 Content-Type 为 application/json ， JSON数据被正确地发出。 $ curl -i -XPOST https://httpbin.org/post --data '{\"query\": {\"a\":1,\"b\":2} }' HTTP/1.1 200 OK Server: nginx Date: Mon, 23 Jan 2017 02 :16:03 GMT Content-Type: application/json Content-Length: 383 Connection: keep-alive Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true { \"args\" : {} , \"data\" : \"\" , \"files\" : {} , \"form\" : { \"{\\\"query\\\": {\\\"a\\\":1,\\\"b\\\":2} }\" : \"\" } , \"headers\" : { \"Accept\" : \"*/*\" , \"Content-Length\" : \"25\" , \"Content-Type\" : \"application/x-www-form-urlencoded\" , \"Host\" : \"httpbin.org\" , \"User-Agent\" : \"curl/7.35.0\" } , \"json\" : null, \"origin\" : \"61.50.125.214\" , \"url\" : \"https://httpbin.org/post\" } $ curl -i -XPOST -H \"Content-Type: application/json\" https://httpbin.org/post --data '{\"query\": {\"a\":1,\"b\":2} }' HTTP/1.1 200 OK Server: nginx Date: Mon, 23 Jan 2017 02 :13:16 GMT Content-Type: application/json Content-Length: 402 Connection: keep-alive Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true { \"args\" : {} , \"data\" : \"{\\\"query\\\": {\\\"a\\\":1,\\\"b\\\":2} }\" , \"files\" : {} , \"form\" : {} , \"headers\" : { \"Accept\" : \"*/*\" , \"Content-Length\" : \"25\" , \"Content-Type\" : \"application/json\" , \"Host\" : \"httpbin.org\" , \"User-Agent\" : \"curl/7.35.0\" } , \"json\" : { \"query\" : { \"a\" : 1 , \"b\" : 2 } } , \"origin\" : \"61.50.125.214\" , \"url\" : \"https://httpbin.org/post\" } Content-Type 也可以写作 application/json; charset=UTF-8 ， 但貌似没什么用，UTF-8是默认编码。 对应的Groovy脚本： import groovy.json.JsonSlurper def urlString = \"https://httpbin.org/post\" def queryString = '{\"第一\": 3, \"第二\": 45, \"abc\": 345345}' def url = new URL ( urlString ) def connection = url . openConnection () connection . setRequestMethod ( \"POST\" ) connection . doOutput = true connection . setRequestProperty ( 'Content-Type' , 'application/json' ) def writer = new OutputStreamWriter ( connection . outputStream ) writer . write ( queryString ) writer . flush () writer . close () connection . connect () def jsonSlurper = new JsonSlurper () def res = jsonSlurper . parseText ( connection . content . text ) println \"result keys: ${res.keySet()}\" println \"json: ${res.json}\" println \"json/key: ${res.json['第一']}\" println \"headers/Accept: ${res.headers.Accept}\" println \"headers/Content-Type: ${res.headers['Content-Type']}\" 输出结果： result keys : [ args , data , files , form , headers , json , origin , url ] json : [ abc : 345345 , 第一 : 3 , 第二 : 45 ] json / key : 3 headers / Accept : text / html , image / gif , image / jpeg , *; q = . 2 , */*; q = . 2 headers / Content-Type : application / json Ref: groovy post to a url java.net.Class URL http://stackoverflow.com/questions/21404252/post-request-send-json-data-java-httpurlconnection http://stackoverflow.com/questions/1945336/how-to-set-content-type-on-httpurlconnection","tags":"Tech","url":"http://leetschau.github.io/ji-yu-httpxie-yi-shou-fa-jsonshu-ju.html","loc":"http://leetschau.github.io/ji-yu-httpxie-yi-shou-fa-jsonshu-ju.html"},{"title":"Python的Coroutine和yield from","text":"yield from yield x 中， x 是一个普通对象，例如3或者 [1, 2, 3] ， yield from x 中， x 是一个iterator，例如下面的代码 来自 what's the difference between yield from and yield in python 3.3.2+ : In [ 1 ]: def iterable1 () : ...: yield 1 ...: yield 2 ...: ...: def iterable2 () : ...: yield from iterable1 () ...: yield 3 ...: In [ 2 ]: iter = iterable2 () In [ 3 ]: next ( iter ) Out [ 3 ]: 1 In [ 4 ]: next ( iter ) Out [ 4 ]: 2 In [ 5 ]: next ( iter ) Out [ 5 ]: 3 In [ 6 ]: next ( iter ) --------------------------------------------------------------------------- StopIteration Traceback ( most recent call last ) < ipython - input - 6 - 5 c05586d40e8 > in < module > () ----> 1 next ( iter ) StopIteration : 用 PEP 380 中的术语， iterable2() 是generator， iterable1() 是subgenerator， iterable2 通过使用 yield from 实现对 iterable1 的\"代理\"， 这样上层iterator的代码就可以分散在几个subitorator中， 然后在上层iterator中，用 yield from 将这些subitorators组合起来。 再比如下面这个函数，更是直接判断 x 是不是iterator，如果是用 yield from ， 否则用 yield ： def flatten ( sequence ) : \"\"\" flatten a multi level list or something >>> list ( flatten ( [ 1 , [ 2 ], 3 ] )) [ 1 , 2 , 3 ] >>> list ( flatten ( [ 1 , [ 2 ], [ 3 , [ 4 ]]] )) [ 1 , 2 , 3 , 4 ] \"\"\" for element in sequence : if hasattr ( element , ' __iter__ ' ) : yield from flatten ( element ) else : yield element yield from 的另一个常用方法是后面跟一个 range 对象，例如： >>> def g ( x ): ... yield from range ( x , 0 , - 1 ) ... yield from range ( x ) ... >>> list ( g ( 5 )) [ 5 , 4 , 3 , 2 , 1 , 0 , 1 , 2 , 3 , 4 ] 这种用法中的 yield from x 等价于 for item in x: yield item （来自 PEP 380 ）。 coroutine 使用coroutine可以在一个线程中同时执行多项任务，在多个函数中切换任务和发送消息。 例如下面的代码来自 python generator \"send\" function purpose? : def coroutine () : for i in range ( 1 , 5 ) : print ( \" From generator {} \" . format (( yield i ))) c = coroutine () c . send ( None ) try : while True : print ( \" From user {} \" . format ( c . send ( 1 ))) except StopIteration : pass 输出： From generator 1 From user 2 From generator 1 From user 3 From generator 1 From user 4 From generator 1 接收方通过 yield i 拿到发送方发来的值（即 send() 的参数1）， 发送方则通过 c.send(1) 拿到了接收方的当前状态（ yield i 中的 i 值）， 这样就实现了二者间的双向数据传递， 且双方可以在任何时候停下来让对方工作，等待对方处理到一定阶段时把执行权还给自己， 这样就在一个线程里实现了多个任务同时进行的效果。 另一个使用协程实现\"生产-消费者模型\"的例子可以参考 理解python coroutine .","tags":"Tech","url":"http://leetschau.github.io/pythonde-coroutinehe-yield-from.html","loc":"http://leetschau.github.io/pythonde-coroutinehe-yield-from.html"},{"title":"SDKMAN Notes","text":"sdk current : 列出所有安装的包以及版本； sdk list java : 列出所有可安装和已安装的JDK版本； sdk install java : 添加最新版本， sdk rm java 8u111 : 删除JDK版本 8u111 ； 当外部程序（例如IntelliJ IDEA）需要使用sdkman管理的JDK时， 将路径设置为对应语言的 current 目录，而不要指向具体的版本， 例如JDK设置为\"~/.sdkman/candidates/java/current\"而不是 \"~/.sdkman/candidates/java/8u121\"，这样当sdkman切换版本时， 应用的JDK路径不必随之改变； Trouble Shooting 如果 sdk list 报 INTERNET NOT REACHABLE 错误，使用 sshuttle 启动全局代理； 如果 sdk list java 报 Stop! java is not a valid candidate. 错误， 执行 source .sdkman/bin/sdkman-init.sh ，再执行一次 sdk list java 验证； 当网络状态不佳时，使用 sdk install leiningen 总报网络连接失败， 这时可以按照sdk的错误提示，找到要下载的安装包（这里是 leiningen-2.7.1.zip ）， 从 官网 下载这个文件到 ~/.sdkman/archives 目录下，再执行 sdk install leiningen ，安装成功。","tags":"Tech","url":"http://leetschau.github.io/sdkman-notes.html","loc":"http://leetschau.github.io/sdkman-notes.html"},{"title":"使用国内npm镜像","text":"Ref: 国内优秀npm镜像推荐及使用 临时使用国内npm镜像： npm --registry https://registry.npm.taobao.org install express 持久使用国内npm镜像： npm config set registry https : // registry . npm . taobao . org 验证是否成功： npm config get registry npm info express 通过cnpm使用国内npm镜像： // install : npm install - g cnpm --registry=https://registry.npm.taobao.org // use : cnpm install express","tags":"Tech","url":"http://leetschau.github.io/shi-yong-guo-nei-npmjing-xiang.html","loc":"http://leetschau.github.io/shi-yong-guo-nei-npmjing-xiang.html"},{"title":"node.js的模块系统","text":"node.green 是一个详细列出node.js 的各个版本支持的ES2015语言特性的网站。 CommonJS是一种JavaScript模块化标准，主要在后端JS中比较流行， node.js的模块化基于CommonJS， 另一个模块化标准是AMD，主要在前端JS中比较流行。 推荐的导出方式： 一个js文件是一个模块(module)，模块中包含一个或者多个函数， 这些函数写成 exports 对象的属性，就可以被其他js文件引用了： （假设模块文件的文件名为 circle.js ）： const PI = Math . PI ; exports . area = ( r ) => PI * r * r ; exports . circumference = ( r ) => 2 * PI * r ; 需要在其他js文件中使用这些函数时，用下面的方法： （假设函数的使用者文件名为 circle.js ）： let circle = require ( './circle.js' ); circle . area ( 3 . 2 ); circle . circumference ( 3 . 2 ) 不推荐（但是可以运行）的方式是把整个模块定义为一个函数： // in circle . js : module . exports = ( r ) => PI * r * r ; // in main . js : let area = require ( './circle.js' ) area ( 3 . 2 ) 不能运行的方式是： // in circle . js : exports = ( r ) => PI * r * r ; // in main . js : let area = require ( './circle.js' ) area ( 3 . 2 ) exports 只是 module.exports 的一个alias， 当对 exports 重新赋值（而不是增加它的属性）会定义一个新的 exports 对象， 而 module.exports 则保持不变，所以其他文件无法引用这个函数。 参考： JavaScript Module Systems Showdown: CommonJS vs AMD vs ES2015","tags":"Tech","url":"http://leetschau.github.io/nodejsde-mo-kuai-xi-tong.html","loc":"http://leetschau.github.io/nodejsde-mo-kuai-xi-tong.html"},{"title":"Jenkins中在预定时间执行带参数的Job","text":"为了让带参数的Job可以在预定时间build， 首先给Jenkins安装 Parameterized Scheduler 插件，安装完插件后， 在Job的 Build periodically with parameters 里加上： H H ( 3 - 6 ) 10 12 * % target_ip = prod1 ; deploy_type = production H H ( 3 - 6 ) 10 12 * % target_ip = prod2 ; deploy_type = production 这里指定在每年的12月10日，凌晨3点到6点之间做两个build。","tags":"Tech","url":"http://leetschau.github.io/jenkinszhong-zai-yu-ding-shi-jian-zhi-xing-dai-can-shu-de-job.html","loc":"http://leetschau.github.io/jenkinszhong-zai-yu-ding-shi-jian-zhi-xing-dai-can-shu-de-job.html"},{"title":"Lambda and Closure","text":"closure 本身是指 将 一个处于open状态（包含自由变量）的函数转换为closed状态 （所有变量都被绑定） 所需要的 外部环境。 从编程实践角度， closure 是一个对象，包含 一段代码 以及 它被创建时所处的环境。 $ sdk i groovy $ groovysh groovy : 000 > : set interpreterMode true groovy : 000 > def myadd = { x , y -> x + y + 2 } ===> groovysh_evaluate $ _run_closure1 @7f b95505 groovy : 000 > def l1 = [ 1 , 2 , 3 ] ===> [ 1 , 2 , 3 ] groovy : 000 > def l2 = [ 10 , 20 , 30 ] ===> [ 10 , 20 , 30 ] groovy : 000 > res = [ l1 , l2 ]. transpose (). collect ( myadd ) ===> [ 13 , 24 , 35 ] groovy : 000 > res . class ===> class java . util . ArrayList groovy : 000 > exit $ ipython In [ 1 ] : myadd = lambda x , y : x + y + 2 In [ 2 ] : res = map ( myadd , [ 1 , 2 , 3 ], [ 10 , 20 , 30 ]) In [ 3 ] : list ( res ) Out [ 3 ] : [ 13 , 24 , 35 ] In [ 4 ] : exit $ sdk i kotlin $ kotlinc - jvm Ref: http://stackoverflow.com/a/36878651/701420 http://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda https://en.wikipedia.org/wiki/Closure_(computer_programming) https://en.wikipedia.org/wiki/Map_(higher-order_function)#Language_comparison http://stackoverflow.com/questions/35973196/which-kotlin-features-are-not-available-in-statically-compiled-groovy","tags":"Tech","url":"http://leetschau.github.io/lambda-and-closure.html","loc":"http://leetschau.github.io/lambda-and-closure.html"},{"title":"Web App Development with SpringBoot","text":"HelloWorld Install SDKMAN , JDK and Spring: curl - s \"https://get.sdkman.io\" | bash sdk install java sdk install springboot cat << EOF > app . groovy @RestController class ThisWillActuallyRun { @RequestMapping ( \"/\" ) String home () { \"Hello World!\" } } EOF spring run app . groovy firefox localhost : 8080 If port 8080 has been used by other Tomcat instance, use spring run app.groovy -- --server.port=9000 to use another port. See 59. Using the CLI for details. It takes less than 1 minute to start web server on linode VPS (outside GFW), or on my laptop in the morning. But run the same app in the afternoon, it hangs up. Downloading is also very fast (less than 2 minutes) on linode: $ leo@linode:~$ du -sh .sdkman/ 721M .sdkman/ But extremely slow on laptop. Package it as a standalone jar file (with a tomcat server inside): spring jar app . jar app . groovy java - jar app . jar Full Project Create project scaffold with spring init -d=web,jpa --build=gradle --package-name='com.dh' myJavaProject in Java, or spring init -d=web,jpa --build=gradle --package-name='com.dh' -l groovy myGroovyPrj in Groovy. Fix error \"Cannot determine embedded database driver class for database type NONE\": add compile('com.h2database:h2') into $PROJ_HOME/build.gradle, run gradle bootRun . Auto restart when files changed Tow steps: Add compile(\"org.springframework.boot:spring-boot-devtools\") into section dependencies of build.gradle, this makes the server restart when java class file changed. See 20. Developer tools for details; If you use IDEA, press Ctrl-Shift-A and input 'build project', check \"Build project automatically\" in Settings. This make IDEA rebuild project after you save the file. Note: this doesn't work in Eclipse. Don't konw why. STS (eclipse) Add apply plugin: 'eclipse' into build.gradle, create eclipse file: gradle eclipse . Start STS(Spring Tool Suite), import the project into Eclipse: File -> Import... -> Existing Projects into Workspace. Use gradle cleanEclipse to clean eclipse files. Use gradle tasks to list all available tasks. IntelliJ IDEA Add apply plugin: 'idea' into build.gradle, run gradle idea . Start IDEA, open the project as a Gradle project into IntelliJ. IDEA will download all jars specified in gradle automatically. If downloading is slow, you can run it at morning, or adding a proxy. Use gradle cleanIdea to clean IDEA files. Database Management H2 database Visit database with browser: URL: http://localhost:8080/h2-console/ , JDBC URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1 , User Name: sa . Other items leave untouched, and click Connect button. You can use multiple connections at the same time. Get the default H2 JDBC URL from post View content of embedded H2 database started by Spring . I tried to connect to the H2 database using SQuirreL SQL Client with driver H2 , H2 Embedded and H2 In-Memory , but all failed. Configuration In file $PROJ_HOME/src/main/resources/application.propertiesh : server . port = 9000 Ref: 10. Installing Spring Boot","tags":"Tech","url":"http://leetschau.github.io/web-app-development-with-springboot.html","loc":"http://leetschau.github.io/web-app-development-with-springboot.html"},{"title":"vim输入汉字时输入法与normal mode冲突问题解决方法","text":"使用vim输入汉字有个很麻烦的问题，当使用 键退回normal mode后， 输入法会拦截normal mode中的输入，打断正常的书写过程。 例如在汉字状态下按 退出到normal mode后， 如果按 dd 删除一行，输入法会拦截 dd ，显示 dd 的备选汉字单词， 只有再按一次回车，才会删除掉这一行。 在Ubuntu上使用搜狗拼音输入法，这个冲突问题没有理想的解决方法， 只能使用Autokey实现一个变通的解决方案。 实现思路是：在使用 退出编辑模式时，首先用 Ctrl+, 开启输入法， 再关闭输入法。 这样就能保证无论使用 时输入法是否处于开启状态，这两步后都能保证关闭输入法。 下面是具体实现过程： 首先在搜狗拼音的设置里，将 中英文切换 快捷键设置为 Shift , 切换搜狗拼音输入法快捷键 使用默认的 Ctrl + , ; 然后Autokey里对 的行为重新定义。 创建一个新的 Script ： escKey: keyboard . send_keys ( '<ctrl>+,' ) keyboard . send_keys ( '<shift><escape>' ) 其Hotkey设置为 . 为了降低系统开销，可以通过设置 Window Filter ， 要求此脚本只在console或者编辑器中有效： 将 Window Filter 设置为 [.*terminal.*|atom.*] ， 即某桌面应用的'Window Class'中带有 terminal 或者 atom 就采用自动关闭输入法策略， 例如Gnome terminal： gnome-terminal.Gnome-terminal ， Terminator： x-terminal-emulator.X-terminal-emulator ， Atom： atom.Atom 。 这样在其他应用（例如gedit）中使用 键时不执行Autokey脚本。 实验证明，发送组合键一定要用 keyboard.send_keys('A+B') 的形式， 不能用 send_key 。 特殊键的写法参考 Special Keys ， 注意最后一句话： To combine two keys use a + sign - e.g. to press Control+Esc use + 完整文档请参考 Autokey Wiki 。 API文档只能下载源码包（autokey-0.90.4.tar.gz）， 解压后用浏览器打开doc/scripting/index.html文件。","tags":"Tech","url":"http://leetschau.github.io/vimshu-ru-yi-zi-shi-shu-ru-fa-yu-normal-modechong-tu-wen-ti-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/vimshu-ru-yi-zi-shi-shu-ru-fa-yu-normal-modechong-tu-wen-ti-jie-jue-fang-fa.html"},{"title":"解决重新部署容器后DNS失效问题","text":"问题场景 重新部署Elasticsearch容器后，容器IP地址发生变化， 运行 curl -v staging-search_elasticsearch_1:9200 不能正确连接到容器新的IP地址，导致ES查询失败。 问题定位 首先在客户端运行 dig staging-search_elasticsearch_1 ， 返回如下结果： ; <<>> DiG 9 . 10 . 3-P4-Ubuntu <<>> staging-search_elasticsearch_1 ;; global options : + cmd ;; Got answer : ;; - >> HEADER << - opcode : QUERY , status : NXDOMAIN , id : 57550 ;; flags : qr rd ra ; QUERY : 1 , ANSWER : 0 , AUTHORITY : 1 , ADDITIONAL : 1 ;; OPT PSEUDOSECTION : ; EDNS : version : 0 , flags :; udp : 512 ;; QUESTION SECTION : ; staging-search_elasticsearch_1 . IN A ;; AUTHORITY SECTION : . 86397 IN SOA a . root-servers . net . nstld . verisign-grs . com . 2016112401 1800 900 604800 86400 ;; Query time : 59 msec ;; SERVER : 172 . 31 . 99 . 1 # 53 ( 172 . 31 . 99 . 1 ) ;; WHEN : Fri Nov 25 09 : 08 : 31 CST 2016 ;; MSG SIZE rcvd : 134 可以看到DNS服务器是 172.31.99.1 ，是VPN + DNS服务器的IP地址， 说明客户端查询的DNS服务是正确的，但返回结果里没有 ;; ANSWER SECTION: 段， 说明DNS服务没有正确返回DNS结果。 也可以使用 nslookup staging-search_elasticsearch_1 . 原因分析和解决方案 缓存问题？ 由于DNS使用dnsmasq作为服务，猜测可能是由于dnsmasq使用了缓存， 在容器IP地址变化后没有更新导致的，所以在DNS容器上重启了dnsmasq并将其缓存设置为0： pkill dnsmasq dnsmasq - r / etc / resolv . dnsmasq - c 0 相应修改容器启动脚本 entrypoint.sh中的启动dnsmasq命令 ， 在后面加上 -c 0 。 在客户端上，appbuild.py所在目录下启动IPython，运行如下指令： from appbuilder import * am = AppManager ( pm , 'staging' , confs ) am . clean ( confs [ 'services' ][ 'all' ]) am . build_service ( confs [ 'services' ][ 'all' ]) am . clean ([ 'search' ]) am . build_service ([ 'search' ]) 重新部署的容器IP地址始终没有变化，但第二天再次出现找不到IP地址的情况， 说明用调整缓存的方法解决不了问题。 nameserver顺序错误 使用 dnsmasq -8 /var/log/dnsmasq.log -q -r /etc/resolv.dnsmasq 启动dnsmasq， 其中 -8 指定log文件位置， -q 指令要求dnsmasq记录dns query. 然后用 tail -f /var/log/dnsmasq.log 查看dnsmasq收到的dns查询， 发现DNS周期性失效的原因是：dns cache超出TTL后，需要重新查询， 在/etc/resolv.dnsmasq内容如下： nameserver 127 . 0 . 0 . 11 nameserver 8 . 8 . 8 . 8 nameserver 8 . 8 . 4 . 4 当客户端查询 staging-search_elasticsearch_1 时， dnsmasq没有查询第一位的上游nameserver 127.0.0.11 ， 而是 8.8.8.8 ，返回结果为'NXDOMAIN‘，存入cache，在后续收到查询有继续返回'NXDOMAIN‘， 解决方案是只使用一个nameserver 127.0.0.11 . 由于系统默认的/etc/resolv.conf符合这个要求，用下面的方法启动dnsmasq: dnsmasq -8 /var/log/dnsmasq.log -q . Debug Alpine系统中默认没有 curl ，可以用 wget -qO- staging-search_elasticsearch_1:9200 代替， 其中 -q 表示不输出进度条等信息， -O- 是 -O - 的简写，表示输出到stdout. 跟踪DNS跳转： Alpine上： traceroute staging-search_elasticsearch_1 Ubuntu上： tracepath staging-search_elasticsearch_1 dnsmasq 日志分析 以下日志是在一台VPN内网服务器上执行 curl -v staging-search_elasticsearch_1:9200 后， 从dnsmasq所在Alphi容器的/var/log/messages中截取的日志，显示一次完整的容器名称查询过程： 2016 - 11 ... : query [ A ] staging - search_elasticsearch_1 . localdomain from 172.31.99.100 2016 - 11 ... : cached staging - search_elasticsearch_1 . localdomain is NXDOMAIN 2016 - 11 ... : query [ AAAA ] staging - search_elasticsearch_1 . localdomain from 172.31.99.100 2016 - 11 ... : forwarded staging - search_elasticsearch_1 . localdomain to 127.0.0.11 2016 - 11 ... : forwarded staging - search_elasticsearch_1 . localdomain to 8.8.8.8 2016 - 11 ... : forwarded staging - search_elasticsearch_1 . localdomain to 8.8.4.4 2016 - 11 ... : reply staging - search_elasticsearch_1 . localdomain is NXDOMAIN 2016 - 11 ... : query [ A ] staging - search_elasticsearch_1 . pek2 . qingcloud . com from 172.31.99.100 2016 - 11 ... : cached staging - search_elasticsearch_1 . pek2 . qingcloud . com is NODATA - IPv4 2016 - 11 ... : query [ AAAA ] staging - search_elasticsearch_1 . pek2 . qingcloud . com from 172.31.99.100 2016 - 11 ... : forwarded staging - search_elasticsearch_1 . pek2 . qingcloud . com to 127.0.0.11 2016 - 11 ... : reply staging - search_elasticsearch_1 . pek2 . qingcloud . com is NODATA - IPv6 2016 - 11 ... : query [ A ] staging - search_elasticsearch_1 from 172.31.99.100 2016 - 11 ... : cached staging - search_elasticsearch_1 is 172.18.2.5 2016 - 11 ... : query [ AAAA ] staging - search_elasticsearch_1 from 172.31.99.100 2016 - 11 ... : forwarded staging - search_elasticsearch_1 to 127.0.0.11 客户端的/etc/resolv.conf内容： nameserver 172 . 31 . 99 . 1 nameserver 127 . 0 . 1 . 1 search localdomain pek2 . qingcloud . com","tags":"Tech","url":"http://leetschau.github.io/jie-jue-zhong-xin-bu-shu-rong-qi-hou-dnsshi-xiao-wen-ti.html","loc":"http://leetschau.github.io/jie-jue-zhong-xin-bu-shu-rong-qi-hou-dnsshi-xiao-wen-ti.html"},{"title":"Develop Python Codes with IPython","text":"Configurations Config IPython to make it loading autoreload extension automatically, and quit without confirmation: $ cat << EOF > ~/ . ipython / profile_default / startup / 50 - autoreload . ipy %load_ext autoreload %autoreload 2 %config TerminalInteractiveShell . confirm_exit = False EOF If not config it globally, you can run commands above in IPython shell. Autoreload make the change to function and class method reloaded automatically after the file saved. Workflow Basic workflow The basic workflow is: IPython console + editor (vim), and optionally tmux (or i3wm, etc). Define one-line statements and expressions in IPython console; Define and update function or class in IPython console with %edit magic; Visualize data with: % matplotlib import matplotlib.pyplot as plt plt . plot ( ... ) With tmux, you can create an editor pane and an IPython console pane in a tmux window. In IPython shell, import all functions in the developed file (name it myfile.py for example) with from myfile import * , and you can use all functions of myfile in IPython shell. Ref: https://ipython.org/ipython-doc/3/config/extensions/autoreload.html Live development \"Live development\" means writing codes at the \"developing point\" (DP) in the runtime, with all variables, environments and data loaded. In PyCharm No need to add stub codes into the source file. But you need a PyCharm IDE, which is not very keyboard friendly, and remote develop (via SSH) is complicated. Write a unit test (with unittest or pytest) to cover the DP; Add a breakpoint at the DP; \"Debug\" the test, then the process stops at the DP; Write new codes, add them to your source file; Change the DP, start the next iteration of live development. In IPython console You need only IPython console and an editor, minimal, fast and keyboard friendly. Both OK for local and remote development. You can exploit full functionality of IPython console, such as tab-completion, running any valid statements and evaluating any expressions. You can define and edit a function with %edit my_func magic of IPython. Display the function body with ??my_func . After the function is fulfilled, copy it to your source code. But you need insert some stub codes into your source codes, and comment out or remove them when the functions is fulfilled. Write a unit test (with unittest or pytest) to cover the DP; Add embed() at the DP (and from IPython import embed ); Run the test with python -m unittest your_module.YourClassTest.test_your_func , then the process stops at the DP and an IPython console is fired; Test your expressions in the console, if OK add them to your source file; Change the DP, start the next iteration of live development. With ipdb ipdb in IPython console is more \"live\" than IPython console decribed above, for you can run the program step by step. And the tab-completion still works well in the debugger. But you can't use magic here. So you can't edit function with %edit , and can't run system command with ! . See ipdb section in dsnote Debug Python Script . Debug Install ipdb with sudo pip3 install ipdb . Add from ipdb import set_trace and set_trace() into myfile, the line before the the breakpoint. In IPython shell, run %pdb and the function. It will stopped at the set_trace() . Use h for available commands. You can add multiple set_trace() for multiple breakpoints. Use c to jump to the next breakpoint. Other tips %autocall : with %autocall 2 , you can run len mylist instead of len(mylist) , or df.info instead of df.info() , to save typing; %load : Copy text from source file into IPython console. You can load specific line ranges: %load -r start:end myscript.py . Or load specific functions or classes: %load -s myfunc,MyClass myscript.py . See %load? for details; %quickref shows a quick reference sheet; ll to list files in current directory; %cd changes working directory; %who and %whos list all interactive variables; _ is the last command output; Use _oh to see all output; %edit edit a string and run it, for example: edit _ ; %time is the shell command time equivalent; Run shell command: ! only executes a shell command. With !! , you can store the command output for later use. Reference the output with _<no> , for example _38 . Rerun some codes multiple times with rerun The following codes show the command history and rerun the first to 3rd line: %hist - n %rerun 1 : 3 Rerun some codes multiple times with macro The following codes defines a macro named \"my_macro\" which contains the first to third line, the 5th and the 8th lines in history. And run it: %hist - n macro my_macro 1 - 3 5 8 my_macro List functions with wildcard >>> import numpy as np >>> np .* load * ? np . __loader__ np . load np . loads np . loadtxt np . pkgload Run scripts in Current environment The variables aa , bb defined outside the script can be loaded into the script with run -i magic: $ cat << EOF > demo . py def func2 ( x , y ) : return bb * x + y print ( func2 ( aa , 4 )) EOF $ ipython >>> aa , bb = 3 , 4 >>> run - i demo . py 16 Ref: https://ipython.org/ipython-doc/3/interactive/magics.html","tags":"Tech","url":"http://leetschau.github.io/develop-python-codes-with-ipython.html","loc":"http://leetschau.github.io/develop-python-codes-with-ipython.html"},{"title":"容器应用自动更新","text":"自动更新的流程是：push代码 -> 重新生成docker image -> 重新部署应用。 deploy staging 参与方 app-docker-code-repo: git repo, 产品代码 + Dockerfile, start.sh in staging docker-image-repo: 跟踪app-docker-code-repo develop branch, webhook指向container service的 重新部署 webhook; container service: 定义了 重新部署 webhook; 流程 app-docker-code-repo: push to develop branch; docker-image-repo: rebuild image on develop branch; container service: re-deploy application. deploy beta 参与方 app-code-repo: git repo, 产品代码 docker-code-repo: Dockerfile + start.sh + production certificates + release history docker-image-repo: 跟踪docker-code-repo master branch, webhook指向container service的 重新部署 webhook; container service: 定义了 重新部署 webhook; 流程 Jenkins job: release app code from develop to master branch in app-code-repo Jenkins job: 由上一个job触发，在docker-code-repo/release-history.md文件结尾追加一行发布时间记录； push to master branch of docker-code-repo; docker repo: 用docker-code-repo的Dockerfile, 证书, 启动脚本等替换掉app-code-repo master banch上的对应的文件， （master branch上的这些文件是从develop分支上合并过来的，适用于staging环境） rebuild image on master branch from app-code-repo; container service: re-deploy production application, publish a beta domain name: beta.mysite.com ; deploy production Use the same docker image of beta app, just publish a production domain name: www.mysite.com . Production and beta app shara all auxiliary apps, such as mongodb, elasticsearch, schedule, console, etc. Fix submodule issue 在阿里云的 镜像服务 上， 由于目前该服务不支持私有submodule，下载代码后会马上执行 submodule update ， 对于没有私有submodule的权限，导致update失败。 目前是重新创建一遍image，就神奇地不报错了。 另外还有一个变通的方法：把包含submodule的git repo转化为不包含submodule的repo， 流程是： push代码 -> Jenkins job转换 -> push到无submodule repo -> 重新生成docker image -> 重新部署应用。 在Jenkins上创建转换任务 创建了运行在阿里云容器服务上的Jenkins服务：leo, nojs216 http://jen.cb048496dfcb04cc2bca25858c276ca9e.cn-beijing.alicontainer.com/job/transGitSubmodule/ convert submodule to plain repo git clone ... newfairs cd newfairs git checkout develop git submodule init git submodule update git submodule foreach --recursive 'git checkout develop' git submodule foreach --recursive 'git pull' mkdir tmp mv packages/ tmp/ git submodule deinit . git rm -r packages/ mv tmp/ packages/ rm -r tmp packages/ /.git sed -i '/packages/d' .gitignore git add -A git commit -m 'some comments' 代码push后自动转换为无submodule版本 Push代码后自动执行Jenkins任务：https://code.aliyun.com/incubator/newfairs-code-docker/hooks 在阿里云code代码库里设置的webhook在代码push后不生效，发现阿里云dev可以连接bitbucket， 于是到bitbucket里创建了项目，测试webhook后报 Error 403 No valid crumb was included in the request 错误，还是不能实现代码push后自动重新构建。webhook的url http : // leo : 1512 d10620f83ab438a541445a10aece @jen . cb048496dfcb04cc2bca25858c276ca9e . cn - beijing . alicontainer . com / job / transGitSubmodule / build ? token = transGitSubmodule 在命令行里用 curl 发送能够出发Jenkins任务。 用 RequestBin 测试后发现aliyun code可以在push后正确发送http request，可能Jenkins remote api遇到了与bitbucket一样的错误？ 基本可以确定aliyun code和bitbucket没问题，问题出在了Jenkins一端。 原因是Jenkins默认打开 Prevent Cross Site Request Forgery exploits ，在 Manage Jenkins -> Configure Global Security 里取消勾选这一项，就OK了。 但这样似乎不太安全，最好还是打开一个功能，找到crumb，加入到HTTP请求里。 发现bitbucket的webhook是个很好的调试工具，可以返回错误信息。 无submodule版本push触发docker image rebuild 容器重新部署 通过将docker image 的 webhook 指向应用的 重新部署 webhook， 实现docker image rebuild 后重新部署应用。","tags":"Tech","url":"http://leetschau.github.io/rong-qi-ying-yong-zi-dong-geng-xin.html","loc":"http://leetschau.github.io/rong-qi-ying-yong-zi-dong-geng-xin.html"},{"title":"CopyQ Notes","text":"在 CopyQ 主页上下载Ubuntu 14.04 64bit 安装包 （copyq_2.7.1_Ubuntu_14.04_amd64.deb）并安装。 2017.1.24补充：在Windows 10虚拟机上下载copyq-v2.8.2-setup.exe并安装， 使用方法与Linux版本一样。 定义快捷键 CopyQ系统栏图标右键 -> Preferences -> Shortcuts -> Custom Actions and Global Shortcuts ... 使用全局快捷键 Ctrl-Alt-z 显示/隐藏剪贴板历史： Add -> Show/hide main window : Type of action: Global ; Shortcuts: Ctrl-Alt-z 使用全局快捷键 Ctrl-Shift-x 粘贴纯文本： Add -> Paste clipboard as plain text Type of action: Global ; Shortcuts: Ctrl-Shift-x 首先 Alt-Ctrl-z 显示剪贴板历史，选择好要粘贴的条目后按 Shift-Enter 粘贴纯文本： Add -> Paste as Plain Text : Type of action: In Menu ; Shortcut: Shift-Return 常用命令 Copy console command output to copyq clipboard: cat somefile | copyq add - . Copy to a new tab in copyq: cat somefile | copyq tab tab-name add - , replace tab-name with your favorite name. Copy file full path to clipboard: readlink -f <filename>|copyq add - . Ref: http://stackoverflow.com/questions/5265702/how-to-get-full-path-of-a-file","tags":"Tech","url":"http://leetschau.github.io/copyq-notes.html","loc":"http://leetschau.github.io/copyq-notes.html"},{"title":"Clone Git Repo in Jenkins Container","text":"运行在物理机/虚拟机里的Jenkins服务，clone某个git repo时， 可以不指定credential，只要把Jenkins服务所在的OS的SSH公钥加入到git repo所在 管理系统（例如Github, Aliyun Code，Bitbucket等）的SSH公钥列表里就可以了。 这种方法的缺点是如果有多个Jenkins服务，代理管理系统里的公钥会有很多，不方便管理； 另外Jenkins没有自己的credential，可移植性不好，换一台服务器就不能正常工作了。 更好的方法是保存一对SSH秘钥，其中的公钥加入到代码管理系统里， 在Jenkins里创建一个类型为 Username with private key 的Credential， 其中 Username 是目标代码管理系统中的用户名， Private Key 选择 Enter directly ， 把私钥内容粘贴进去。 这样就可从目标代码管理系统中clone代码了。 但有个限制，如果git repo带submodule， git submodule update 时会失败。 这是由于credential只用于super repo，下面的package也需要，但拿不到这个credential， 这种情况只能老老实实在容器系统的~/.ssh里面把之前保存的密钥对加进去， 且要把私钥读写权限改成 600 : 进入容器： docker exec -it global-jenkins_global-jenkins_1 bash ， cd 到 $HOME/.ssh 下创建 id_rsa 和 id_rsa.pub ，再 chmod 600 id_rsa ， 这样Jenkins就可以clone代码库了。","tags":"Tech","url":"http://leetschau.github.io/clone-git-repo-in-jenkins-container.html","loc":"http://leetschau.github.io/clone-git-repo-in-jenkins-container.html"},{"title":"Notes on Functional Python Programming","text":"Chapter 2 If we provide two methods with the same name, the second one is retained because of the strict evaluation order. 在一个类中，如果定义了两个名称一样的方法，后一个会覆盖前一个， 下面是一个示例： $ cat << EOF > test . py class Test : def ma ( self ): print ( 'm1' ) def ma ( self ): print ( 'm2' ) test_same_method = ''' >>> Test().ma() m2 ''' __test__ = { 'Same_method' : test_same_method } def test (): import doctest doctest . testmod () if __name__ == \"__main__\" : test () EOF $ python3 test . py ... Test passed . Chapter 3 doctest doctest能够将函数的docstring作为测试依据，非常方便， 基本的方法是 doctest.testmod() ， testmod是test module的意思。 不用参数特别指定的情况下， testmod 测试当前模块中所有的函数， 以及在 __test__ 字典里定义的测试。 __test__ 的结构是： { 'test_name1': 'test_str1', 'test_name2': 'test_str2', ... } . 其中 test_str 是一段完整的测试docstring，参考第2章中的示例。 如果 testmod() 中不带 verbose 参数，只有在测试失败时才打印测试报告， 如果 doctest.testmod(verbose=True) ，则不论成功失败都打印测试报告。 Python用 python -i <fileanme.py> 把脚本加载到console中，以方便生成测试docstring. IPython有个 %doctest_mod ，方便进行doctest，具体Google 'ipython doctest mode'. namedtuple namedtuple 对象是一组key-value对，key是字符串， value可以是任何类型的对象（namedtuple的定义中并不指定value的类型）， 所以既可以给namedtuple对象属性赋值tuple或者namedtuple形成一个完全immutalbe的对象， 也可以给namedtuple对象属性赋值list或者dict，形成一种\"半可变\"对象， 例如下面就是一个半可变对象： >>> Pet = namedtuple ( 'Pet' , 'name age' ) >>> kitty = Pet ( 'kitty' , 3 ) >>> puppy = Pet ( 'puppy' , 5 ) >>> People = namedtuple ( 'People' , 'name age pets' ) >>> leo = People ( 'Leo' , 23 , [ kitty , puppy ]) >>> leo People ( name = 'Leo' , age = 23 , pets = [ Pet ( name = 'kitty' , age = 3 ), Pet ( name = 'puppy' , age = 5 )]) >>> leo . name 'Leo' >>> leo . age = 33 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AttributeError : can 't set attribute >>> leo.pets [Pet(name=' kitty ', age=3), Pet(name=' puppy ', age=5)] >>> leo.pets[1].name ' puppy ' >>> leo.pets.append(' panda ') >>> leo.pets [Pet(name=' kitty ', age=3), Pet(name=' puppy ', age=5), ' panda ' ] namedtuple对象leo的name和age是不可变的， pets属性则是可变的list，可以在上面append任意类型数据。 与dict相比，namedtuple的优势首先是immutable的，其次可以使用点号引用属性。 根据文档，声明namedtuple的key列表 field_names 时， 既可以写成 'name age' ，也可以写成 ['name', 'age'] ，二者是等价的。 JavaScript ES6中的 const 关键字能够防止变量被rebinding， 不能保证变量本身不变，例如给一个const对象添加属性是合法的： const foo = {} ; foo . bar = 42 ; console . log ( foo . bar ); // 42 所以const只能保证简单变量如果数值、字符串不变（不能rebinding），无法保证对象不变 （但声明为const的对象在可读性性上仍然有优势）。 Python无法保证简单量不变（没有防止rebinding的机制）， 但可以用namedtuple生成严格意义上的immutable object，二者各有千秋。 函数参数列表中的星号 怎样理解下面代码中的 Pair(*row[n*2:n*2+2]) ？ from collections import namedtuple Pair = namedtuple ( \"Pair\" , ( \"x\" , \"y\" )) def series ( n , row_iter ): for row in row_iter : yield Pair ( * row [ n * 2 : n * 2 + 2 ]) 首先看如何在调用函数时使用星号： def myfunc ( foo , bar ): print ( 'foo: %s ' % foo ) print ( 'bar: %s ' % bar ) pms = [ 'p1' , 'p2' ] test_same_method = ''' >>> myfunc(*pms) foo: p1 bar: p2 ''' __test__ = { 'Same_method' : test_same_method } def test (): import doctest doctest . testmod () if __name__ == \"__main__\" : test () 可知星号的作用是把作为输入参数的list展开成多个参数， 再被送给函数处理。 上面代码中 row[n*2:n*2+2] 的值是一个长度为2的list，假设是 [2.32 8.23] ， 那么 Pair(*row[n*2:n*2+2]) 实际上是 Pair(2.32, 8.23) 。 Chapter 4 iterable vs list iterable 是可迭代的对象，可以通过 iter() 或者自己的 __iter__() 方法转变为迭代器(iterator). iterable 可以是有状态的，也可以是无状态的，例如字符串和list都是iterable， 但前者是无状态的（immutale)，后者是mutable的。 iterator 是迭代器，是有状态的，它的内部指针记录了当前值， iterator 也是一种 iterable 。 每次 next(iterator1) ，就返回 iterator1 的内部指针指向的当前元素，然后指针后移一位。 类似于FIFO的队列，而list的 pop() 方法可以看作是LIFO的栈， 它们之间的关系是： 对 iterable 使用 iter() 函数，得到lazy的 iterator ， 对 iterator 使用 list() 函数，得到eager的list，即： iter ( iterable ) -> iterator ( lazy ) list ( iterator ) -> list ( eager ) 而生成器(generator)是迭代器的一种， 生成器(generator)包含两种子类型：generator function, generator expression. 前者是包含 yield 关键字的函数，后者是形如 (x*x for x in range(3)) 这样的表达式， List comprehension, such as mylist = [x*x for x in range(3)] is just a syntax sugar for my_ge = ( x * x for x in range ( 3 )) mylist = list ( my_ge ) ` 由于generator是一种iterator，所以可以用下面的方法对其取值： In [ 1 ]: aa = ( x * x for x in range ( 3 )) In [ 2 ]: aa ? Type : generator String form : < generator object < genexpr > at 0 x7f226a1184c8 > Docstring : < no docstring > In [ 3 ]: next ( aa ) Out [ 3 ]: 0 In [ 4 ]: list ( aa ) Out [ 4 ]: [ 1 , 4 ] In [ 5 ]: list ( x * x for x in range ( 3 )) Out [ 5 ]: [ 0 , 1 , 4 ] In [ 6 ]: list (( x * x for x in range ( 3 ))) Out [ 6 ]: [ 0 , 1 , 4 ] 参考： What exactly are Python's iterator, iterable, and iteration protocols? : Iterables vs. Iterators vs. Generators 下面代码演示了二者的关系， In [ 1 ]: s = ' cat ' In [ 2 ]: sit = s . __iter__ () In [ 3 ]: next ( sit ) Out [ 3 ]: ' c ' In [ 4 ]: next ( sit ) Out [ 4 ]: ' a ' In [ 5 ]: sit2 = iter ( s ) In [ 6 ]: next ( sit2 ) Out [ 6 ]: ' c ' In [ 7 ]: next ( sit2 ) Out [ 7 ]: ' a ' In [ 8 ]: sit ? Type : str_iterator String form : < str_iterator object at 0 x7fdc48a19940 > Docstring : < no docstring > In [ 9 ]: sit2 ? Type : str_iterator String form : < str_iterator object at 0 x7fdc48a1add8 > Docstring : < no docstring > 下面是对P68代码的分析： $ ipython Python 3 . 4 . 3 ( default , Nov 17 2016 , 01 : 08 : 31 ) In [ 1 ]: def legs ( lat_lon_iter ) : ...: begin = next ( lat_lon_iter ) ...: print ( ' begin: %s ' % begin ) ...: for end in lat_lon_iter : ...: print ( ' end: %s ' % end ) ...: yield begin , end ...: print ( ' begin, end after yield: %s, %s ' % ( begin , end )) ...: begin = end ...: print ( ' begin, end after begin=end: %s, %s ' % ( begin , end )) ...: In [ 2 ]: list ( legs ( x for x in range ( 3 ))) begin : 0 end : 1 begin , end after yield : 0 , 1 begin , end after begin = end : 1 , 1 end : 2 begin , end after yield : 1 , 2 begin , end after begin = end : 2 , 2 Out [ 2 ]: [ ( 0 , 1 ) , ( 1 , 2 ) ] In [ 3 ]: list ( legs ( iter ( [ 0 , 1 , 2 ] ))) begin : 0 end : 1 begin , end after yield : 0 , 1 begin , end after begin = end : 1 , 1 end : 2 begin , end after yield : 1 , 2 begin , end after begin = end : 2 , 2 Out [ 3 ]: [ ( 0 , 1 ) , ( 1 , 2 ) ] In [ 4 ]: list ( legs ( [ 0 , 1 , 2 ] )) --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) < ipython - input - 4 - 543 b79d86b01 > in < module > () ----> 1 list ( legs ( [ 0 , 1 , 2 ] )) < ipython - input - 1 - 53 eedac44550 > in legs ( lat_lon_iter ) 1 def legs ( lat_lon_iter ) : ----> 2 begin = next ( lat_lon_iter ) 3 print ( ' begin: %s ' % begin ) 4 for end in lat_lon_iter : 5 print ( ' end: %s ' % end ) TypeError : ' list ' object is not an iterator In [ 5 ]: myit = legs ( x for x in range ( 3 )) In [ 6 ]: next ( myit ) begin : 0 end : 1 Out [ 6 ]: ( 0 , 1 ) In [ 7 ]: next ( myit ) begin , end after yield : 0 , 1 begin , end after begin = end : 1 , 1 end : 2 Out [ 7 ]: ( 1 , 2 ) In [ 8 ]: next ( myit ) begin , end after yield : 1 , 2 begin , end after begin = end : 2 , 2 --------------------------------------------------------------------------- StopIteration Traceback ( most recent call last ) < ipython - input - 8 - 410 d07518a3f > in < module > () ----> 1 next ( myit ) StopIteration : In [ 9 ]: Chapter 5 range object P95. range in Python 3 is lazy, immutable. It is not a generator, and can be used multiple times. See If range() is a generator in Python 3.3, why can I not call next() on a range? for details. Chapter 7 关于 Spearman rank-order correlation 一节的计算公式和具体含义，参考 Spearman's rank correlation coefficient 的 Example 一节，给出了一个智商和看电视时间长度关系的例子很直观。 第1版第157页示例代码错误： rank_x= tuple(ranker(pairs, key=lambda x:x[0] )) 和 rank_xy= (ranker(rank_x, key=lambda x:x[1] )) 中的 ranker 函数应为 rank_data 。 rank_data 函数分析 rank_data 函数的职责是做pattern matching： 用 if 分支语句将输入数据转为 rerank 函数的输入格式交给 rerank 函数处理； 将 rerank 函数返回结果第1项（ float 类型的rank排序值）插入到返回结果第2项 （ Rank_Data 对象）的 rank_seq 属性中。 rerank 函数分析 输入是由 Rank_Data 组成的tuple，输出是一个iterator， 元素形如 (2.5, Rank_Data(rank_seq=(), raw=(3, 1.2))) ，验证如下： $ cd $ FPP_CODE_SAMPLE / Chapter_7 $ ipython In [ 4 ]: from ch07_ex4 import * In [ 10 ]: key = lambda obj : obj In [ 30 ]: pairs = (( 2 , 0.8 ), ( 3 , 1.2 ), ( 5 , 1.2 ), ( 7 , 2.3 ), ( 11 , 18 )) In [ 31 ]: ranked = tuple ( Rank_Data ((), d ) for d in pairs ) In [ 32 ]: ranked Out [ 32 ]: ( Rank_Data ( rank_seq = (), raw = ( 2 , 0.8 )), Rank_Data ( rank_seq = (), raw = ( 3 , 1.2 )), Rank_Data ( rank_seq = (), raw = ( 5 , 1.2 )), Rank_Data ( rank_seq = (), raw = ( 7 , 2.3 )), Rank_Data ( rank_seq = (), raw = ( 11 , 18 ))) In [ 33 ]: reRank = rerank ( ranked , key ) In [ 34 ]: list ( reRank ) Out [ 34 ]: [( 1.0 , Rank_Data ( rank_seq = (), raw = ( 2 , 0.8 ))), ( 2.0 , Rank_Data ( rank_seq = (), raw = ( 3 , 1.2 ))), ( 3.0 , Rank_Data ( rank_seq = (), raw = ( 5 , 1.2 ))), ( 4.0 , Rank_Data ( rank_seq = (), raw = ( 7 , 2.3 ))), ( 5.0 , Rank_Data ( rank_seq = (), raw = ( 11 , 18 )))] In [ 36 ]: reRank_y = rerank ( ranked , lambda x : x [ 1 ]) In [ 37 ]: list ( reRank_y ) Out [ 37 ]: [( 1.0 , Rank_Data ( rank_seq = (), raw = ( 2 , 0.8 ))), ( 2.5 , Rank_Data ( rank_seq = (), raw = ( 3 , 1.2 ))), ( 2.5 , Rank_Data ( rank_seq = (), raw = ( 5 , 1.2 ))), ( 4.0 , Rank_Data ( rank_seq = (), raw = ( 7 , 2.3 ))), ( 5.0 , Rank_Data ( rank_seq = (), raw = ( 11 , 18 )))] In [ 42 ]: list ( reRank_y ) Out [ 42 ]: [] 更详细的分析见 rerank函数docstring . Coroutine in Python $ cat << EOF > coro . py import itertools def fib (): n , a , b = 0 , 0 , 1 while True : yield b a , b = b , a + b n = n + 1 fg = fib () f10 = itertools . islice ( fg , 10 ) print ( list ( f10 )) $ python coro . py [ 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] Chapter 8 本章用到的函数示例： http://docspy3zh.readthedocs.io/en/latest/library/itertools.html#module-itertools P169: 演示打开多个文件的源代码多出一行，在译文中被去掉： readers = map ( lambda f : csv . reader ( f , delimiter = '\\t' ), files ) 因为这行代码在本页下面被提出来，上面不应该先写出来， 且一段代码中有相邻的两个 readers 变量也不合理。 P170， groupby() 函数只能处理按 key 排好序的序列， 如果没有排好序， groupby() 将返回错误结果，示例： from itertools import groupby things = [( \"animal\" , \"bear\" ), ( \"plant\" , \"cactus\" ), ( \"vehicle\" , \"speed boat\" ), ( \"vehicle\" , \"school bus\" ), ( \"animal\" , \"duck\" )] types = groupby ( things , lambda x : x [ 0 ]) for key , group in types : print ( '-------- a new type ---------' ) for thing in group : print ( 'key: %s , thing: %s ' % ( key , thing )) sortedthings = sorted ( things , key = lambda x : x [ 0 ]) sortedtypes = groupby ( sortedthings , lambda x : x [ 0 ]) for key , group in sortedtypes : print ( '-------- a sorted type ---------' ) for thing in group : print ( 'key: %s , thing: %s ' % ( key , thing )) P175: filterfalse = lambda pred , iterable : filter ( lambda x : not pred ( x ), iterable ) 上面代码中， pred 和 iterable 是输入参数，返回值是 filter(lambda x: not pred(x), iterable) . 参考 filter函数定义 , 上面的返回值可以写为： mypred = lambda x : not pred ( x ) ( item for item in iterable if mypred ( item )) P178: 对 take 的表述有误， function(0) 和 function(1) 后面还有更多值， 见https://docs.python.org/2/library/itertools.html#recipes consume() 函数用法比较特别，它类似于 listobj.append() 函数， 最终结果不是通过返回值得到，而是直接修改输入参数的状态（例如上面的listobj对象）： myiter = iter ( range ( 15 )) consume ( myiter , 7 ) list ( myiter ) 而不是： myiter = iter ( range ( 15 )) res = consume ( myiter , 7 ) list ( res ) Chapter 9 像素数据格式 pixel_subset 是一个tuple，其中每个元素又是一个tuple， 包含两部分：坐标和颜色值（用RGB三元组表示）。 In [ 41 ]: pixel_subset Out [ 41 ]: ((( 0 , 0 ), ( 92 , 139 , 195 )), (( 0 , 1 ), ( 92 , 139 , 195 )), (( 0 , 2 ), ( 92 , 139 , 195 )), (( 0 , 3 ), ( 91 , 138 , 194 )), (( 0 , 4 ), ( 91 , 138 , 194 )), (( 0 , 5 ), ( 91 , 138 , 194 )), (( 0 , 6 ), ( 91 , 138 , 194 )), (( 0 , 7 ), ( 91 , 138 , 194 )), (( 0 , 8 ), ( 92 , 139 , 195 )), (( 0 , 9 ), ( 93 , 140 , 196 ))) combinations() vs combinations_with_replacement() 早晨翻译了一页FPP，为了对比 itertools 模块中 combinations() 和 combinations_with_replacement() 函数的区别 （首先参考了 itertools doc ）， 在华硕笔记本上安装了 Python3 版本的 miniconda ( choco install miniconda3 )， 安装完后 conda 不会被加进 %PATH% ，而是在启动菜单里新建了一个快捷方式， 内容为 %windir%\\system32\\cmd.exe \"/K\" C:\\ProgramData\\Miniconda3\\Scripts\\activate.bat C:\\ProgramData\\Miniconda3 ， 启动它进入的是 conda 的 root 环境，新建一个 fpp 环境， 用 conda 安装 python 和 ipython 就可以使用 IPython 了 （比安装完整的 Anaconda 更精简），下面是两个函数的对比： In [ 1 ]: from itertools import combinations , combinations_with_replacement In [ 3 ]: list ( combinations ( range ( 4 ), 2 )) Out [ 3 ]: [( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 3 )] In [ 4 ]: list ( combinations ( range ( 4 ), 3 )) Out [ 4 ]: [( 0 , 1 , 2 ), ( 0 , 1 , 3 ), ( 0 , 2 , 3 ), ( 1 , 2 , 3 )] In [ 5 ]: list ( combinations_with_replacement ( range ( 4 ), 2 )) Out [ 5 ]: [( 0 , 0 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 1 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 2 ), ( 2 , 3 ), ( 3 , 3 )] make_color_map() 函数分析 colors = get_colors() 从\"crayola.gpl\"文件中加载颜色值， colors 是一个tuple， 元素形如： Color(rgb=(247, 83, 148), name='Violet Red') best = ( min (( euclidean ( rgb , c ) , rgb , c ) for c in colors ) for rgb in product ( bit3 , bit3 , bit3 )) 这里 best 的含义是：对每一个给定的 rgb 值，与 colors 中的每种颜色（的RGB值） 逐一比较，求出其中距离最短的值。这里利用了 min() 函数比较tuple时的取值特点： min((x0, y0, z0), (x1, y1, z1), …, (xn, yn, zn)) 返回的tuple是x值最小的那个元素， 而与y, z的大小无关，例如 » >> min (( 1 , 20 , 30 ), ( 1 , 2 , 3 ), ( 0 . 2 , 1 , 1 )) ( 0 . 2 , 1 , 1 ) 然后利用for语句生成与每个RGB颜色最接近的Crayola颜色的值，例如下面的 best 的一个 元素表达的是：对RGB颜色 (0, 0, 0) ，与它最接近的Crayola颜色是名字为'Black'， RGB为 (0, 0, 0) 的颜色： » >> best . next () ( 0 . 0 , ( 0 , 0 , 0 ) , Color ( rgb = ( 0 , 0 , 0 ) , name = ' Black ' )) 接下来以RGB颜色为key，以对应的Crayola颜色为value形成一个数据字典： color_map = dict((b[1], b[2].rgb) for b in best) ，例如： » >> color_map [( 0 , 64 , 64 )] ( 26 , 72 , 118 ) 运行以上测试的方法为： python -m Chapter_9.ch09_ex1 . permutations & combinations >>> from itertools import permutations , combinations >>> list ( permutations ( range ( 3 ))) [( 0 , 1 , 2 ), ( 0 , 2 , 1 ), ( 1 , 0 , 2 ), ( 1 , 2 , 0 ), ( 2 , 0 , 1 ), ( 2 , 1 , 0 )] >>> list ( combinations ( range ( 4 ), 2 )) [( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 3 )] >>> list ( enumerate (( 3 , 7 , 2 , 1 , - 4 , 5 ))) [( 0 , 3 ), ( 1 , 7 ), ( 2 , 2 ), ( 3 , 1 ), ( 4 , - 4 ), ( 5 , 5 )] permutations() 返回序列的所有排列， combinations() 返回序列的所有组合， enumerate() 返回一组二元tuple，其中第一个元素是序列值的下标，第二个元素是序列值。 'Generating all combinations' 一节代码分析 对应源代码为 Chapter_9/ch09_ex3.py . s7, s43等数据源都是一维list，格式为 ['', '2001', …, '2017', '', 'X', '1.2', …, '83', '', 'Y', '123', …, '93.6'] 详见http://www.tylervigen.com/view_correlation?id=7 但实际上是一个3行(n + 1)列的表格，第一行是表头，第二行是变量X的值， 第三行是变量Y的值，每一列是一个具体的年份，例如： | 2001 | 2002 | 2003 | 2017 ---- | ---- | ---- | ---- | ---- X | 1.2 | 24.3 | 3.8 | 83 Y | 123 | 4.3 | 382 | 93.6 被 column_data() 处理后变为如下形式： >>> from pprint import pprint >>> source = list ( column_data ( s7 , s3890 , s43 )) >>> pprint ( source ) [( 'year' , 'Per capita consumption of cheese (US)Pounds (USDA)' , 'Number of people who died by becoming tangled in their bedsheetsDeaths ' '(US) (CDC)' , 'year' , 'Per capita consumption of mozzarella cheese (US)Pounds (USDA)' , 'Civil engineering doctorates awarded (US)Degrees awarded (National ' 'Science Foundation)' , 'year' , 'US crude oil imports from VenezuelaMillions of barrels (Dept. of Energy)' , 'Per capita consumption of high fructose corn syrup (US)Pounds (USDA)' ), ( '2000' , '29.8' , '327' , '2000' , '9.3' , '480' , '2000' , '446' , '62.6' ), ( '2001' , '30.1' , '456' , '2001' , '9.7' , '501' , '2001' , '471' , '62.5' ), ( '2002' , '30.5' , '509' , '2002' , '9.7' , '540' , '2002' , '438' , '62.8' ), ( '2003' , '30.6' , '497' , '2003' , '9.7' , '552' , '2003' , '436' , '60.9' ), ( '2004' , '31.3' , '596' , '2004' , '9.9' , '547' , '2004' , '473' , '59.8' ), ( '2005' , '31.7' , '573' , '2005' , '10.2' , '622' , '2005' , '449' , '59.1' ), ( '2006' , '32.6' , '661' , '2006' , '10.5' , '655' , '2006' , '416' , '58.2' ), ( '2007' , '33.1' , '741' , '2007' , '11' , '701' , '2007' , '420' , '56.1' ), ( '2008' , '32.7' , '809' , '2008' , '10.6' , '712' , '2008' , '381' , '53' ), ( '2009' , '32.8' , '717' , '2009' , '10.6' , '708' , '2009' , '352' , '50.1' )] 也就是3个数据源纵向合并形成一个二维表。 multi_corr(source) 函数计算 source 中 任意两列的相关系数（其中3个重复的 year 列彼此间的相关系数为1，被去掉）， 计算结果格式为（元素中第3个值为相关系数）： [('X1', 'X2', 0.98), ('X3', 'X5', 0.96), … ] . 完整代码： >>> results = list ( multi_corr ( source )) >>> results [ 0 ] ( 'year' , 'Per capita consumption of cheese (US)Pounds (USDA)' , 0 . 9630127825658988 ) >>> print ( \"{2: 4.2f}: {0} vs {1}\" . format ( * results [ 0 ]) ) 0 . 96 : year vs Per capita consumption of cheese ( US ) Pounds ( USDA ) product() 与 permutations() 的区别 >>> list ( product ( range ( 3 ), range ( 4 ))) [( 0 , 0 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 0 ), ( 1 , 1 ), ( 1 , 2 ), ( 1 , 3 ), ( 2 , 0 ), ( 2 , 1 ), ( 2 , 2 ), ( 2 , 3 )] >>> list ( permutations ( range ( 3 ), 2 )) [( 0 , 1 ), ( 0 , 2 ), ( 1 , 0 ), ( 1 , 2 ), ( 2 , 0 ), ( 2 , 1 )] 可以看到 product() 的参数是 n 个集合， permutations() 的参数是一个集合和一个长度值， 前者可以看作多个集合组成的多重 for 循环，后者返回一个几个内部的所有排列。","tags":"Tech","url":"http://leetschau.github.io/notes-on-functional-python-programming.html","loc":"http://leetschau.github.io/notes-on-functional-python-programming.html"},{"title":"Ubuntu 14.04 apt Update Failure","text":"$ sudo apt-get update ... W: Failed to fetch http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu/dists/trusty/main/binary-amd64/Packages Hash Sum mismatch W: Failed to fetch http://archive.canonical.com/ubuntu/dists/trusty/partner/source/Sources Hash Sum mismatch W: Failed to fetch http://archive.canonical.com/ubuntu/dists/trusty/partner/binary-amd64/Packages Hash Sum mismatch W: Failed to fetch http://archive.canonical.com/ubuntu/dists/trusty/partner/binary-i386/Packages Hash Sum mismatch E: Some index files failed to download. They have been ignored, or old ones used instead. 首先启动全局代理再update一下，如果仍然有错尝试下面的命令： sudo apt - get clean sudo apt - get autoclean sudo apt - get autoremove sudo rm - rf / var / lib / apt / lists /* 再次执行 sudo apt-get update 如果错误依然存在， 将 apt-get 升级到最新版本(for Ubuntu 14.04) ： curl - s https : // packagecloud . io / install / repositories / computology / apt - backport / script . deb . sh | sudo bash sudo apt - get install apt = 1 . 2 . 10 再次执行 sudo apt-get update 如果错误依然存在，按照报错的内容， 在 /etc/apt/sources.list 文件中注释掉了包含 canonical 的项， 在 /etc/apt/sources.list.d/ 下把 hzwhuang-ss-qt5-trusty.list 重命名为 hzwhuang-ss-qt5-trusty.list.old ，再次执行 sudo apt-get update 通过。","tags":"Tech","url":"http://leetschau.github.io/ubuntu-1404-apt-update-failure.html","loc":"http://leetschau.github.io/ubuntu-1404-apt-update-failure.html"},{"title":"将node.js v0.10.40部署服务器升级到v4.4.7","text":"上午尝试把staging服务器上的node版本从0.10.40改成4.4.7，主要过程如下： 停止原来的 forever 进程： forever stopall 安装构建工具： sudo apt update sudo apt install -y make gcc g++ build-essential python python-pip \\ python-dev imagemagick sudo apt autoremove -y 安装node-v4.4.7： wget http://jenkins:8080/userContent/node-v4.4.7-linux-x64.tar.gz sudo mv node-v4.4.7-linux-x64.tar.gz /opt cd /opt sudo tar zxf node-v4.4.7-linux-x64.tar.gz 将node 4.4.7加入$PATH： sudo echo 'export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin' > /etc/profile.d/nodejs.sh 安装forever： sudo /opt/node-v4.4.7-linux-x64/bin/npm i -g forever 部署newfairs master版本。 Fabric部署脚本更新包括： 修改了测试环境证书在node环境下的位置； 把生产环境证书放到了部署脚本里，部署过程中，解压后把证书放进去，然后启动node服务。 npm install 失败问题 sudo / opt / node - v4 . 4 . 7 - linux - x64 / bin / npm install - g cnpm --registry=https://registry.npm.taobao.org cnpm install 然后再次部署。","tags":"Tech","url":"http://leetschau.github.io/jiang-nodejs-v01040bu-shu-fu-wu-qi-sheng-ji-dao-v447.html","loc":"http://leetschau.github.io/jiang-nodejs-v01040bu-shu-fu-wu-qi-sheng-ji-dao-v447.html"},{"title":"Use Matplotlib in Python 3 on Ubuntu","text":"On Ubuntu 14.04, Python 3.4.3. cd / path / to / your / project sudo apt - get install python3 . 4 - venv libfreetype6 - dev python3 - tk python3 - m venv pyplot source . / pyplot / bin / activate pip install --upgrade setuptools # optional? pip install matplotlib Verify installation: cd / path / to / your / project / pyplot cat << EOF > plot . py import matplotlib.pyplot as plt plt . plot ([ 1 , 23 , 2 , 4 ]) plt . ylabel ( 'some numbers' ) plt . show () EOF source ./ pyplot / bin / activate python plot . py Use matplotlib in shell script: cat << EOF > plot . sh #!/ bin / bash source / path / to / your / project / pyplot / bin / activate python / path / to / your / project / plot . py EOF chmod 755 plot . sh . / plot . sh Ref: http://stackoverflow.com/questions/25674612/ubuntu-14-04-pip-cannot-upgrade-matplotllib http://stackoverflow.com/questions/11425106/python-pip-install-fails-invalid-command-egg-info http://stackoverflow.com/questions/8605847/how-to-install-matplotlib-with-python3-2 http://stackoverflow.com/questions/36327134/matplotlib-error-no-module-named-tkinter","tags":"Tech","url":"http://leetschau.github.io/use-matplotlib-in-python-3-on-ubuntu.html","loc":"http://leetschau.github.io/use-matplotlib-in-python-3-on-ubuntu.html"},{"title":"理解IP地址和CIDR","text":"以 172.16.0.0/12 为例， 12 表示网络ID的位数，由于IPv4地址由4个8位二进制数字组成， 所以后面20位就是主机ID了，也就是： 0000 0000.0000 0000.0000 0000.0000 0000 -------------- ------------------------ 网络ID 主机ID 172.16.0.0/12 第二段 16 写成二进制是 0001 0000 ，所以这个地址代表的主机IP地址 范围是： ( 172 ). 0001 0000 . 0000 0000 . 0000 0000 ~ ( 172 ). 0001 1111 . 1111 1111 . 1111 1111 也就是 172.16.0.0 ~ 172.31.255.255 . 同理可知： 172.16.0.0/24 表示的IP地址范围是： 172.16.0.0 ~ 172.16.0.255 . 172.16.0.0/16 表示的IP地址范围是： 172.16.0.0 ~ 172.16.255.255 . 参考： 如何计算IP地址及CIDR","tags":"Tech","url":"http://leetschau.github.io/li-jie-ipdi-zhi-he-cidr.html","loc":"http://leetschau.github.io/li-jie-ipdi-zhi-he-cidr.html"},{"title":"保证Docker的输入参数可执行","text":"写Docker的entrypoint时有个问题是： Docker启动后如果用户的cmd参数以可执行命令开头， 这个命令覆盖entrypoint中的可执行命令，否则执行的是 entrypoint cmd 。 怎样实现entrypoint对cmd是否可执行的判断？ appropriate/docker-curl 中的 latest/entrypoint.sh脚本给出了一种实现方法： 1 2 3 4 5 6 7 8 9 #!/bin/sh set -e # Prepend \"curl\" if the first argument is not an executable if ! type -- \" $1 \" & > /dev/null ; then set -- curl \" $@ \" fi exec \" $@ \" 这段脚本的功能是：如果用户在run这个image时，cmd是以可执行命令（或者文件）开头 （例如cmd是 curl www.google.com ），那么执行这个cmd，否则 （例如cmd是 www.google.com ）给这个cmd前面加上 curl 再执行。 根据 set manpage ， 上面脚本第2行 set -e 的意思是如果执行过程中出现错误直接退出。 第5行用于判断cmd的第一部分是否为可执行命令，如果是跳到最后一行直接执行cmd整体， 否则在 $@ 前面加上 curl ，然后再执行。 第5行中的 -- 的作用是避免 $1 以横杠开头时干扰 type 的判断，在bash中做如下实验： $ type ls &> / dev / null # return 0 $ type - p ls &> / dev / null # return 0 $ type -- - p ls &> / dev / null # return 1 可以看到，当cmd是 -p ls 时（第2条语句），如果不加 -- ， 整个 type -p ls 的返回结果是0（因为 -p 被当成了 type 的选项）， 但 -p 显然不是可执行命令，所以 -- 是必需的。 & 将命令变为后台运行， > /dev/null 去掉所有输出，二者组合起来的意思是： 不要任何输出，只告诉我命令执行是否成功了（返回值0表示成功，否则表示失败）。 做如下实验（假设当前目录下有 docs 子目录，没有 aaa 子目录）： cd docs cd docs & cd docs &>/ dev / null cd aaa cd aaa & cd aaa &>/ dev / null","tags":"Tech","url":"http://leetschau.github.io/bao-zheng-dockerde-shu-ru-can-shu-ke-zhi-xing.html","loc":"http://leetschau.github.io/bao-zheng-dockerde-shu-ru-can-shu-ke-zhi-xing.html"},{"title":"为vim增加undo功能","text":"vim 7.3+后对undo功能有了很大改进，配合 undotree 可以实现完全记录本地改动。 安装和配置 手工创建vim的undo持久化目录： mkdir -p $HOME/.vim/undo . 在.vimrc中增加： \" undo & undotree configs set undodir=$HOME/.vim/undo/ \" make sure this folder exists set undofile cabbrev ut UndotreeToggle < CR > Plugin 'mbbill/undotree' 并安装： vim +PluginClean +PluginInstall . 使用 使用 :ut 打开/关闭undotree窗体； 在undotree窗体中，用 ? 打开/关闭帮助信息。 查看完整的使用说明： :h undotree.txt Note 由于使用纯vimscript而不是Python，undotree比 Gundo 更轻便。 在.vimrc中可以通过 undolevels 和 undoreload 设置，默认值似乎是100. 参考： http://vimdoc.sourceforge.net/htmldoc/options.html#'undolevels' http://stackoverflow.com/questions/5700389/using-vims-persistent-undo gVim on Windows Windows上的gVim默认将持久化的undo文件放在当前文件夹里， myfile.txt 的undo文件名为 .myfile.txt.un~ ，会把文件夹搞得很乱， 增加版本管理系统的负担。 一种解决方法是不让gVim生成undo文件，这样不太好， 另一种是学习Linux把undo文件放在专门的文件夹下，具体过程如下。 在Windows用户根目录（C:\\Users\\ ）下创建 .vim\\undo 目录， Windows用户根目录下的.vimrc文件中添加： set undodir = $ HOME / . vim / undo / set undofile set undolevels = 1000 set undoreload = 10000","tags":"Tech","url":"http://leetschau.github.io/wei-vimzeng-jia-undogong-neng.html","loc":"http://leetschau.github.io/wei-vimzeng-jia-undogong-neng.html"},{"title":"启动Console后自动进入tmux","text":"如果希望启动Console后自动进入tmux环境，可以将这个Console的起始命令设置为 自动attach到一个名为 default 的tmux session里。 这么做的好处是每次启动Console后，就进入了 default session，避免每次手工attach tmux, 坏处是这个Console彻底与tmux绑定，除了修改profile，无法进入没有tmux的状态 （因为退出tmux也就退出了Console）。 所以推荐的做法是除了系统自带的Console软件（Ubuntu上是 gnome-terminal ）， 再安装一个专门用来配合tmux的Console软件，我用的是 terminator ， 大多数情况下使用terminator + tmux，只有在ssh到其他服务器上使用tmux的时候， 启动系统自带的Console， 配置terminator启动自动进入tmux session default : 在terminator的 Preferences -> Profiles -> Command 标签页中： check Run a custom command instead of my shell ， 并输入 Custom command : tmux new -A -s default （确认已经预先安装了 tmux ）。 但是这样配置导致无法创建新的tmux session，所以暂时不使用这种方法。","tags":"Tech","url":"http://leetschau.github.io/qi-dong-consolehou-zi-dong-jin-ru-tmux.html","loc":"http://leetschau.github.io/qi-dong-consolehou-zi-dong-jin-ru-tmux.html"},{"title":"翻译书籍的步骤","text":"制作生词表 通读全书并记录生词。找到的生词记在这本书的repo下面的 newords 文件里， 每行一个，通读时朗读，加深对全书的印象； 排序、剃重并生成释义。保存在 exp.txt 文件中： paste <(cat newwords|sort|uniq) <(cat newwords|sort|uniq|trans -b :zh) > exp.txt 修改错误。大多数错误是 translate-shell 找不到待翻译词（词组）的释义， 返回了原文，例如 noumena ，是 noumenon 的复数形式； 排版。打开文本文件： libreoffice exp.txt ，主菜单 Format -> Columns 中选择两列， 字体调整为 Ubuntu 13号 ； 打印。生成PDF文件：主菜单 File -> Export as PDF ，然后打印此文件； 合并编辑的修改 图灵社区的编辑使用MS Office Word对译稿做审批，所以我也需要用Word来接受/拒绝这些审批。 在Word里修改好的译稿对着原始的md文档，把格式标识符加上，比如标注段落的 # ， 标注源代码的反引号等等，也就是把Word中的文字当纯文本对待，然后拷贝到md文档里。 OCR Linux 试了几个OCR软件， gocr 是OCR引擎，识别出来的文字错误太多；OCRFeeder是OCR GUI， 后端可以使用gocr和tesseract。安装了ocrad，提示无法识别png文件，换成bmp还是不行。 tesseract 的识别正确率较高，但遇到页面字体有变形（比如书页的里侧）时效果会变得很差。 sudo apt install tesseract - ocr ocrfeeder 使用 命令行 tesseract - l eng att1 . png stdout 图形界面 启动 OCRFeeder ，在主菜单里： Tools -> OCR Engines 里面点击 detect 按钮， 找到 tesseract 引擎，在 Edit -> Preferences -> Tools -> OCR Engines 里选择 tesseract .","tags":"Tech","url":"http://leetschau.github.io/fan-yi-shu-ji-de-bu-zou.html","loc":"http://leetschau.github.io/fan-yi-shu-ji-de-bu-zou.html"},{"title":"使用markdown编写技术文档","text":"使用markdown编写技术文档的要求是： 能导出为PDF文件； 能编写数学公式， 能在保存md文件后实时看到修改后的渲染效果。 下面的几款工具都是web server，将md文档渲染为html页面， 定稿后通过浏览器的打印为PDF功能导出为PDF文件。 markmon markmon 是一款基于node的实时预览工具。 优点是配合pandoc，可以识别mathjax格式的数学公式 它本身没有markdown和mathjax parser，需要单独安装： apt install pandoc （pandoc内置了对mathjax的支持）， node.js 建议通过 nvm 安装，这些准备好后开始安装markmon： mkdir ~/ apps / markmon cd ~/ apps / markmon npm install markmon 在~/.bash_aliases中加入： alias mkm = \"node $HOME/apps/markmon/node_modules/markmon/bin/markmon\" 预览markdown文档： mkm myfile.md 启动一个node web服务，监听 localhost:3000 端口， 用浏览器打开就可以看到渲染效果了。 下面是一个示例myfile.md文件，其中的数学公式和多层列表都可以被正确解析： # Chapter 1 This is chapter 1 . > some quotes here Equation 1 : $\\ Delta w_j = \\ eta ( y &#94; { ( i ) } - \\ hat { y } &#94; { ( i ) } ) x &#94; { ( i ) } _j$ Equation 2 : $ f ( x ) = \\ sum_ { n = 0 } &#94; \\ infty \\ frac { f &#94; { ( n ) } ( a ) }{ n ! } ( x - a ) &#94; n$ Equation 3 : $$\\ sum_ { i = 0 } &#94; n i &#94; 2 = \\ frac { ( n &#94; 2 + n )( 2 n + 1 ) }{ 6 }$$ This is conclusion . # Chapter 2 1 . line 1 i . subline 1 i . subline 2 i . subline 3 i . subline 4 i . subline 5 i . subline 6 1 . line 2 grip grip 是一个预览markdown文件的工具， 通过 pip install grip 安装，字体渲染效果比markmon好，但不能识别数学公式。 这是一个Server/Client结构的应用，使用 grip myfile.md 启动web服务， 保存修改后的md文件会自动在 http://localhost:6419 上反映出来。 适合两个屏幕一个写md文件，一个开web browser预览效果。 配合 Dark Reader 和 Morpheon Dark 这两个Chrome插件， 浏览器也变成了暗色。 在Evince (PDF viewer)里，用快捷键 Ctrl-I 切换明暗配色。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-markdownbian-xie-ji-zhu-wen-dang.html","loc":"http://leetschau.github.io/shi-yong-markdownbian-xie-ji-zhu-wen-dang.html"},{"title":"加速pip下载速度","text":"有时候使用 pip 安装第三方库时，下载速度很慢，导致经常因为超时安装失败。 解决方法是修改 pip 安装源，指向一个本地的安装源，下面以安装csvkit库为例说明。 打开 PyPI Mirror Status ，选择一个本地（北京）的安装源； 打开对应的网址，例如 豆瓣的pip镜像 ，下面会有一个 名为 simple 的文件夹，看下面有没有 csvkit 目录，如果有，说明这个源可用， 简单的方法是在源的URL后直接加 simple/csvkit ： https://pypi.doubanio.com/simple/csvkit 看这个地址是否存在； 确认源存在后，加 -i 参数安装： pip install --user -i https://pypi.doubanio.com/simple/ csvkit ; 说明： 用 pip install --help 查看参数使用说明。网上有说加 --use-mirrors 参数自动选择镜像， 但Ubuntu 16.04上安装的 pip 并没有 --use-mirrors 这个参数（用 pip -V 查询： pip 8.1.2 on Python 2.7）。","tags":"Tech","url":"http://leetschau.github.io/jia-su-pipxia-zai-su-du.html","loc":"http://leetschau.github.io/jia-su-pipxia-zai-su-du.html"},{"title":"Multiple Cursors in Vim","text":"Use plugin vim-multiple-cursors . Install this plugin with adding Plugin 'terryma/vim-multiple-cursors' into .vimrc. The default key mappings is C-n for start multiple cursors and move to next, C-p for previous, C-x to skip, and for quit. For C-n conflicts with nerdtree, modify the nerdtree trigger to C-i : nnoremap < C - i > : NERDTreeTabsToggle < CR > Note: Do not map 'next/previous' to C-j/k as follows: \" multiple cursors configs let g : multi_cursor_next_key = '<C-j>' let g : multi_cursor_prev_key = '<C-k>' for C-j/k is mapped to keys jumping between windows.","tags":"Tech","url":"http://leetschau.github.io/multiple-cursors-in-vim.html","loc":"http://leetschau.github.io/multiple-cursors-in-vim.html"},{"title":"Install YouCompleteMe for vim","text":"Install Install YCM on Ubuntu 14.04: sudo apt install build - essential cmake sudo apt install python - dev python3 - dev # Add ` Plugin 'Valloric/YouCompleteMe' ` into . vimrc . vim + PluginClean + PluginInstall cd ~/ . vim / bundle / YouCompleteMe . / install . py Take about one hour (16:44 ~ 17:44 ) when running vim +PluginClean +PluginInstall (about 200MB for the repo). If your vim version is lower than 7.4.143, you must install a newer version vim: sudo add - apt - repository ppa : pkg - vim / vim - daily sudo apt - get update sudo apt - get install vim dpkg - s vim | grep 'Version' # should be greater than 7 . 41 Or the following error occurs: Error detected while processing function youcompleteme # Enable .. < SNR > 74 _OnBufferRead : line 17 : E117 : Unknown function : UltiSnips # SnippetsInCurrentScope Press ENTER or type command to continue Error detected while processing function youcompleteme # Enable .. < SNR > 74 _OnBufferRead : line 17 : E15 : Invalid expression : UltiSnips # SnippetsInCurrentScope ( 1 ) Ref: https://github.com/Valloric/YouCompleteMe/issues/2335 Config To change the default color of the autocomplete window of YCM, add the following codes into .vimrc after syntax on : \" autocomplete window color for plugin YouCompleteMe highlight Pmenu ctermfg = white ctermbg = black highlight PmenuSel ctermfg = green ctermbg = black nnoremap < leader > y : let g : ycm_auto_trigger = 0 < CR > nnoremap < leader > Y : let g : ycm_auto_trigger = 1 < CR > Use Y/y to turn on/off autocomplete. Notes Remove vim daily PPA Remove vim daily PPA with: $ sudo add - apt - repository - r ppa : pkg - vim / vim - daily $ apt - key list / etc / apt / trusted . gpg . d / pkg - vim - vim - daily . gpg -------------------------------------------- pub 4096 R / D31525A0 2014 - 10 - 15 uid Launchpad PPA for pkg - vim $ sudo apt - key del D31525A0 Use apt-get with proxy: When it's very slow when running apt update , add Defaults env_keep = \"http_proxy https_proxy ftp_proxy\" after Defaults env_reset with sudo visudo . Then run: export http_proxy = http : // duotai : 7 jSF81tGRYK @conrad . h . xduotai . com : 15617 export https_proxy = $ http_proxy sudo apt update The proxy url in above export command is provide by 多态 . Fix error in apt update Fix the following error with sudo apt update uk-keyring : Reading package lists ... Done W : GPG error : http : // archive . ubuntukylin . com : 10006 xenial InRelease : The following signatures couldn ' t be verified because the public key is not available : NO_PUBKEY 8 D5A09DC9B929006 This error is introduced by Sogou Pinyin, in file: /etc/apt/sources.list.d/sogoupinyin.list . Ref: http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=25955","tags":"Tech","url":"http://leetschau.github.io/install-youcompleteme-for-vim.html","loc":"http://leetschau.github.io/install-youcompleteme-for-vim.html"},{"title":"Linux上下载和观看中英文电影字幕","text":"搜索字幕 ShooterSubPyDownloader git clone git @github . com : leetschau / ShooterSubPyDownloader . git python ShooterSubPyDownloader / Main . py ~/ Downloads / Jason . Bourne .2016 . HC . HDRip . XviD . AC3 - EVO . avi 其他工具 SMPlayer: 自带到 OpenSubtitles.org 搜索字幕功能，上面没有中文字幕，英文字幕下载失败； subdownloader (install with sudo apt install subdownloader ): 只能搜索opensubtitles.org； subliminal subliminal 用下面的命令安装并下载了Jason Bourne的英文字幕： mkdir subliminal && cd subliminal virtualenv venv . venv / bin / activate pip install subliminal subliminal download - l en ~/ Downloads / Jason . Bourne . 2016 . HC . HDRip . XviD . AC3 - EVO . avi 观看影片 试了几个Linux上的视频播放器，对中文字体支持似乎不好，有些字幕是乱码， 有些干脆不显示，目前还没有找到理想的播放器。","tags":"Tech","url":"http://leetschau.github.io/linuxshang-xia-zai-he-guan-kan-zhong-ying-wen-dian-ying-zi-mu.html","loc":"http://leetschau.github.io/linuxshang-xia-zai-he-guan-kan-zhong-ying-wen-dian-ying-zi-mu.html"},{"title":"用format参数获取docker inspect输出的指定部分","text":"参考 Package template in Go programming . 基本规则：用 . 号取map的值，用 index 取数组的值。 index 的用法： index <array-name> <index-number> range 的用法： {{range pipeline}} T1 {{end}} 表达式 pipeline 返回值（必须是一个map或者array）的各个元素赋给 T1 中的 . ， 例如下面的例子中， {{.NetworkSettings.Networks}} 的返回值是一个key为 bridge 的map对象， 它被赋给 T1 （这里是 {{.IPAddress}} ）中的 . ，所以 {{.IPAddress}} 的值是\"172.31.254.3\". 示例： root @ node1 : ~ # docker inspect angry_wing [ { \" Id \" : \" e30f58ac1610c8607205d612b4389b361c5f6745e999bb5c8086f11f4b4e5903 \" , \" Config \" : { \" Hostname \" : \" e30f58ac1610 \" , \" Env \" : [ \" PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \" , \" DEBIAN_FRONTEND=noninteractive \" , \" DEBCONF_NONINTERACTIVE_SEEN=true \" ], \" Entrypoint \" : [ \" /entrypoint.sh \" ] }, \" NetworkSettings \" : { \" Networks \" : { \" bridge \" : { \" IPAddress \" : \" 172.31.254.3 \" } } } } ] root @ node1 : ~ # docker inspect -- format = ' {{.NetworkSettings.Networks}} ' angry_wing map [ bridge : 0 xc8200aa3c0 ] root @ node1 : ~ # docker inspect -- format = ' {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}} ' angry_wing 172 . 31 . 254 . 3 root @ node1 : ~ # docker inspect -- format = ' {{.NetworkSettings.Networks.bridge.IPAddress}} ' angry_wing 172 . 31 . 254 . 3 root @ node1 : ~ # docker inspect -- format = ' {{.Config.Entrypoint}} ' angry_wing [ / entrypoint . sh ] root @ node1 : ~ # docker inspect -- format = ' {{range .Config.Entrypoint}}{{.}}{{end}} ' angry_wing / entrypoint . sh root @ node1 : ~ # docker inspect -- format = ' {{index .Config.Env 0}} ' angry_wing PATH =/ usr / local / sbin : / usr / local / bin : / usr / sbin : / usr / bin : / sbin : / bin root @ node1 : ~ # docker inspect -- format = ' {{range .Config.Env}}{{.}}; {{end}} ' angry_wing PATH =/ usr / local / sbin : / usr / local / bin : / usr / sbin : / usr / bin : / sbin : / bin ; DEBIAN_FRONTEND=noninteractive; DEBCONF_NONINTERACTIVE_SEEN=true;","tags":"Tech","url":"http://leetschau.github.io/yong-formatcan-shu-huo-qu-docker-inspectshu-chu-de-zhi-ding-bu-fen.html","loc":"http://leetschau.github.io/yong-formatcan-shu-huo-qu-docker-inspectshu-chu-de-zhi-ding-bu-fen.html"},{"title":"使用minibufferexpl管理vim buffer","text":"使用Vundle安装： Plugin 'fholgado/minibufexpl.vim' . 配置mbe 隐藏mbe状态栏： TODO 在.vimrc中添加： cabbrev mt MBEToggle < CR > cabbrev mru MBEToggleMRU < CR > cabbrev vb vert sb 常用快捷键 打开buffer: 用ctrlp或者nerdtree插件； 删除编号为n的buffer： :bdn ; 切换到编号为n的buffer: :bn ; 在水平分割窗口中打开编号为n的buffer： :sbn ; 在垂直分割窗口中打开编号为n的buffer： :vb n ; 打开/关闭mbe窗口; :mt ; 打开/关闭 MRU (most recently used) 模式： :mru Note MRU模式开启时最近用过的buffer排在最前面，关闭时buffer list顺序保存不变。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-minibufferexplguan-li-vim-buffer.html","loc":"http://leetschau.github.io/shi-yong-minibufferexplguan-li-vim-buffer.html"},{"title":"Make an Application AutoStart in Linux Desktop","text":"For Linux Mint Xfce Desktop In [Start( Win key) > Settings Manager > Session and Startup > Application Autostart], click Add button, input Name and Command . The Command can be any executable command in terminal. For example, /home/leo/apps/WizNote-2.5.9-x86_64.AppImage (standalone appimage), copyq (installed with Software Manager ). xmodmap /home/leo/.Xmodmap (to swap ESC and Capslock). For Unity Desktop To make an application autostart in Unity, you can define it in \"Startup Applications\" in Dash (start with win key). When you want to define it with more options (delay time after startup, for example), or want to create it with shell scripts, you can add a \"desktop\" file under ~/.config/autostart/ . For example, execute a shell script to swap Capslock and ESC key: $ cat $ HOME / . config / autostart / . desktop [ Desktop Entry ] Name = WizNote Comment = WizNote Icon = WizNote Exec = WizNote Terminal = false Type = Application X - GNOME - Autostart - Delay = 7 Here we set the delay to 7 seconds after login. Verified in Ubuntu 14.04, Dell E7450 laptop. See note \"Define Keymap on Ubuntu and Windows\" for an example of autostarting shell script.","tags":"Tech","url":"http://leetschau.github.io/make-an-application-autostart-in-linux-desktop.html","loc":"http://leetschau.github.io/make-an-application-autostart-in-linux-desktop.html"},{"title":"Execute sudo without password","text":"Tom (username: tom) want to execute sudo command without input password. For example: sudo cat /etc/sudoers . Append tom ALL=(ALL:ALL) NOPASSWD:ALL to /etc/sudoers. Logout (the desktop if you are in the desktop environment) and login to make the rule works. If the tmux server is created before the modification of the sudoers files, quit the tmux server (which means quit all it's sessions) and the new rule will works in the new session. Note Q: Why not add this line right after root ALL=(ALL:ALL) ALL ? A: Because in this way the rule tom ... will be overwritten by the rule below (): %sudo ALL = ( ALL : ALL ) ALL This rule make all users in sudo group run sudo command with password. When tom is a member of group 'sudo', he will have to input password when sudo a command. You can remove tom from 'sudo' group to make things work. But this is not as elegant as put tom All... at the bottom of the file. Q: Why does rule of tom overwritten by rule of sudo group? A: Because /etc/sudoers is a script, a posterior command overwrites preceding commands.","tags":"Tech","url":"http://leetschau.github.io/execute-sudo-without-password.html","loc":"http://leetschau.github.io/execute-sudo-without-password.html"},{"title":"Sync a Fork on Gibhub","text":"I've forked a github repo \"https://github.com/tom/project1.git\". Several days later there are some new commits on this repo. How to sync these commits into my forked repo? cd < repo - home > git remote - v # verify if the upstream repo will be added git remote add upstream https : // github . com / tom / project1 . git git remote - v git checkout master git fetch upstream # if use pull instead of fetch , merge is needed as well git merge upstream / master git push origin Ref: Syncing a fork","tags":"Tech","url":"http://leetschau.github.io/sync-a-fork-on-gibhub.html","loc":"http://leetschau.github.io/sync-a-fork-on-gibhub.html"},{"title":"Elasticsearch的相关度计算方法和排序规则","text":"期望搜索效果 Q: 我想首先按相关度排序，然后再根据时间进行倒序排列 A: 同一个查询问题，每个结果的匹配度是不用的，例如，搜索\"俄罗斯五金机械\"，得到如下三个结果： 2017俄罗斯莫斯科机械，设备技术与产品展览会 2017俄罗斯机械设备展 2016俄罗斯五金机械展 以上三个例子中，相关度最好的是\"俄罗斯五金机械展\"， 原因是同时包含所有关键词，并且长度最短。 由于这3个结果的匹配度各不相同，不可能\"再根据时间进行倒序排列\"。 只有匹配度相同的多个展会，才能按照时间顺序二次排列。 Q: 可是竞争对手（例如展酷）就能做出这样的效果 A: 搜一两个关键词效果好不难，难的是各种类型的搜索效果都不太差。 用下面列出来的关键词进行搜索，看看他们的搜索结果有多不靠谱。 Q: 可是百度，Google的搜索结果就很靠谱，这种技术已经相当普及了，为什么我们不能实现？ A: 国内用户被盗版惯坏了，以为世界上并不存在\"软件研发成本\"这种事，真的该醒醒了。 软件产品的研发成本是巨大的，免费的软件要么是人家太有钱不跟你计较，顺便整死竞争对手， 要么是靠植入广告流氓插件挣钱，要么是开源，然而Google、百度、展酷、牛展网……没有一个愿意开源。 现在展会搜索用户体验不够好，希望大家多提意见和建议，帮助我们向高水平看齐，持续改进。 搜索效果检查关键词 下面列出的查询语句用于测试搜索效果的好坏： 2016五金 2016科隆五金 五金2016 五金机械2016 相关度计算方法 指标定义和公式 相关度指搜索问题(query, q)与搜索目标域(field, f)之间的匹配程度。 例如搜索 中文名称 中有\"五金机械\"的展会，这里\"中文名称\"对应的数据库字段 nameZHCN 就是目标域，\"五金机械\"就是问题。问题可以被拆分成多个关键词(term, t)，例如五金机械 包含 五金 和 机械 两个关键词。 根据以下指标计算问题和目标域之间的相关度: tf (term frequency): 表示关键词出现的频率的高低，关键词出现的频率越高， 匹配程度越高，例如查询\"五金机械\"，\"2016俄罗斯五金机械展\"比\"2017俄罗斯机械设备展\"匹配度高。 计算公式： tf(q in f) = sqrt(frequency) ， 其中 frequency 指field中包含的term数量，例如\"2016俄罗斯五金机械展\"的frequency是2（五金，机械）， 所以 tf(\"五金机械\" in \"2016俄罗斯五金机械展\") = sqrt(2) = 1.414 ， tf(\"五金机械\" in \"2017俄罗斯机械设备展\") = sqrt(1) = 1 . idf (inverse document frequency): 一个关键词在所有文档中出现的频率越高， 则其匹配权重越低，例如搜索\"五金机械展\"，\"2017俄罗斯五金机械博览会\"(A) 和 \"2016俄罗斯五金机械展\"(B)哪个匹配度高？ 我们认为A高于B，因为\"展\"这个词太常见了，匹配到\"展\"的价值显然小于匹配\"五金\"的价值。 怎么把这个特点用算法表达出来？就要用到idf。计算公式： idf(t) = 1 + ln(maxDoc / (matchedDoc + 1)) . 其中 maxDoc 是所有文档数量， matchedDoc 是包含关键词 t 的文档的数量。 例如整个type包含3422个文档，其中40个包含关键词\"五金\"，则 idf(\"五金\") = 1 + ln(3422 / (40 + 1)) = 5.4244 ， idf(\"展\") = 1 + ln(3422 / (2410 + 1)) = 1.35018 。 另外，A和B的tf是一样的：分别包含3个term（五金，机械，展）中的两个。 fn (field-length norm): 域越长，匹配度越低，实际上反映了\"关键词密度\"的高低， 域越长，关键词密度越低。例如搜索\"2017俄罗斯五金机械\"，\"2017俄罗斯五金机械展\" 的匹配度高于\"2017俄罗斯莫斯科机械，设备技术与五金产品展览会\"。 计算公式： fn(f) = 1 / sqrt(numTerm) . 其中 numTerm 是域 f 包含的关键词数量。 例如 fn(\"2017年土耳其国际门及门锁五金机械博览会\") = 1 / sqrt(10) = 0.3162 ， numTerm = 10 是域被中文分词后词的数量。 qn (query norm): 这个指标没什么用，可以忽略，计算公式： qn(f) = 1 / sqrt(idf1&#94;2 + idf2&#94;2 + ...) ， 其中 idf1 ， idf2 ... 是 f 中包含的每个关键词的idf值。 例如 qn(\"2017年土耳其国际门及门锁五金机械博览会\") = 1 / sqrt(5.4244&#94;2 + 4.2476&#94;2) = 0.1451 实例分析 搜索\"五金机械\"，我们来看看它的相关度2.1818347是怎么算出来的： api = 'api.newfairs.com' idx = production type = Fair http -b POST \"https:// $api / $type /_search?explain=1&pretty=1&search_type=dfs_query_then_fetch\" query: = '{\"bool\":{\"must\":[{ \"match\": { \"recurrence.nameZHCN\": \"五金机械\" }}]}}' sort: = '[{ \"_score\": { \"order\": \"desc\" }}, {\"recurrence.timeStart\": {\"order\" : \"desc\", \"mode\": \"max\"}}]' size = 1 | jq -r '.hits.hits[] | \"\\(._score): \\(._source.recurrence[0].nameZHCN), \\(._source.recurrence[0].timeStart), \\(._explanation)\"' 2 .1818347: 2017年土耳其国际门及门锁五金机械博览会, 2017 -01-04T16:00:00.000Z, { \"value\" : 2 .1529999, \"description\" : \"sum of:\" , \"details\" : [ { \"value\" : 2 .1529999, \"description\" : \"sum of:\" , \"details\" : [ { \"value\" : 1 .3346298, \"description\" : \"weight(recurrence.nameZHCN:五金 in 3005) [PerFieldSimilarity], result of:\" , \"details\" : [ { \"value\" : 1 .3346298, \"description\" : \"score(doc=3005,freq=1.0), product of:\" , \"details\" : [ { \"value\" : 0 .7873329, \"description\" : \"queryWeight, product of:\" , \"details\" : [ { \"value\" : 5 .4244084, \"description\" : \"idf(docFreq=40, maxDocs=3422)\" , \"details\" : [] } , { \"value\" : 0 .14514631, \"description\" : \"queryNorm\" , \"details\" : [] } ] } , { \"value\" : 1 .6951276, \"description\" : \"fieldWeight in 3005, product of:\" , \"details\" : [ { \"value\" : 1 , \"description\" : \"tf(freq=1.0), with freq of:\" , \"details\" : [ { \"value\" : 1 , \"description\" : \"termFreq=1.0\" , \"details\" : [] } ] } , { \"value\" : 5 .4244084, \"description\" : \"idf(docFreq=40, maxDocs=3422)\" , \"details\" : [] } , { \"value\" : 0 .3125, \"description\" : \"fieldNorm(doc=3005)\" , \"details\" : [] } ] } ] } ] } , { \"value\" : 0 .81837, \"description\" : \"weight(recurrence.nameZHCN:机械 in 3005) [PerFieldSimilarity], result of:\" , \"details\" : [ { \"value\" : 0 .81837, \"description\" : \"score(doc=3005,freq=1.0), product of:\" , \"details\" : [ { \"value\" : 0 .61652803, \"description\" : \"queryWeight, product of:\" , \"details\" : [ { \"value\" : 4 .2476315, \"description\" : \"idf(docFreq=132, maxDocs=3422)\" , \"details\" : [] } , { \"value\" : 0 .14514631, \"description\" : \"queryNorm\" , \"details\" : [] } ] } , { \"value\" : 1 .3273848, \"description\" : \"fieldWeight in 3005, product of:\" , \"details\" : [ { \"value\" : 1 , \"description\" : \"tf(freq=1.0), with freq of:\" , \"details\" : [ { \"value\" : 1 , \"description\" : \"termFreq=1.0\" , \"details\" : [] } ] } , { \"value\" : 4 .2476315, \"description\" : \"idf(docFreq=132, maxDocs=3422)\" , \"details\" : [] } , { \"value\" : 0 .3125, \"description\" : \"fieldNorm(doc=3005)\" , \"details\" : [] } ] } ] } ] } ] } , { \"value\" : 0 , \"description\" : \"match on required clause, product of:\" , \"details\" : [ { \"value\" : 0 , \"description\" : \"# clause\" , \"details\" : [] } , { \"value\" : 0 .14514631, \"description\" : \"_type:Fair, product of:\" , \"details\" : [ { \"value\" : 1 , \"description\" : \"boost\" , \"details\" : [] } , { \"value\" : 0 .14514631, \"description\" : \"queryNorm\" , \"details\" : [] } ] } ] } ] } 分析上面的 _explanation 的输出： 计算结果图示 上面的搜索命令中，搜索URL后面的 ?explain=1&pretty=1&search_type=dfs_query_then_fetch 是什么意思？ 主要为了解决ES的sharding效果带来的计算结果不一致问题， 详见参考文献\"How scoring works in Elasticsearch\"的\"The Sharding Effect\"一节。 参考文献 How scoring works in Elasticsearch Theory Behind Relevance Scoring What Is Relevance? 搜索结果的排序方法 观察上面的搜索命令，其中排序部分是： sort : = '[{ \"_score\": { \"order\": \"desc\" }}, {\"recurrence.timeStart\": {\"order\" : \"desc\", \"mode\": \"max\"}}]' 其中包含两个排序指令： 按照相关度逆序排列； 对于匹配度相同的展会，按照展会开始时间逆序排列 参考文献： Sorting","tags":"Tech","url":"http://leetschau.github.io/elasticsearchde-xiang-guan-du-ji-suan-fang-fa-he-pai-xu-gui-ze.html","loc":"http://leetschau.github.io/elasticsearchde-xiang-guan-du-ji-suan-fang-fa-he-pai-xu-gui-ze.html"},{"title":"为Elasticsearch服务添加中文分词功能","text":"业务目标： ES服务中的index \"production\"需要增加中文分词， 具体效果见下面查询命令输出的对比。 实现过程 将数据从mongoDB导入到临时index中； 从这个index生成mappings文件； 基于上面生成的mappings文件，添加中文分词功能，具体方法见后面\"修改mappings文件\"; 根据这个mappings创建index \"production\"; 将数据从mongoDB导入到\"production\"中。 下面是代码实现： es_ip = 192 . 168 . 100 . 90 es = \" $es_ip:9200 \" mongo_ip = ' 192.168.xxx.xxx ' tmp_idx = old_production idx = production type = Fair mapping_file = ' newfairs-mappings.json ' git clone https : // github . com / leetschau / mongo2es . git && cd mongo2es mongoexport - h $ mongo_ip - d $ idx - c $ type - u xxx - p xxx - o fairs . json python3 uploadES . py fairs . json $e s_ip $ tmp_idx $ type http - b -- pretty = format $e s / $ idx / _mapping / $ type > $ mapping_file # add \" analyzer \" into this mapping , see notes below for details http - b PUT $e s / $ idx mappings : = @$ mapping_file python3 uploadES . py fairs . json $e s_ip $ idx $ type http - b POST $e s / $ tmp_idx / $ type / _search query : = ' {\"bool\":{\"must\":[{ \"match\": { \"recurrence.nameZHCN\": \"五金机械\" }}]}} ' sort : = ' [{\"recurrence.timeStart\": {\"order\" : \"desc\", \"mode\": \"max\"}}] ' size = 10 | jq - r ' .hits.hits[] | \"\\(._id): \\(._source.recurrence[0].nameZHCN), \\(._source.recurrence[0].timeStart)\" ' G79B2vwBrHunwkXC6 : 国际林业机械和新产品博览会, 2020 - 06 - 01 T00 : 00 : 00 . 000 Z yXsohQLuRkBXuu8sz : 奥地利林业机械及设备展, 2019 - 10 - 08 T00 : 00 : 00 . 000 Z uYcC2zMvw9FDutcwk : 金融服务国际展会, 2019 - 09 - 26 T00 : 00 : 00 . 000 Z BNzwq3WrkH8N7T7tF : 2019 年欧洲纺织机械展览会, 2019 - 06 - 20 T00 : 00 : 00 . 000 Z pkjZjqbd6CSB62Z37 : 国际冶金技术展暨研讨会, 2019 - 06 - 01 T00 : 00 : 00 . 000 Z Rws7ZnBzCSL4AZCMa : 2019 年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（ 2019 年第 32 届德国国际工程机械博览会）, 2019 - 04 - 01 T00 : 00 : 00 . 000 Z GxjMbDrGoiSDoECEN : 2019 年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（ 2019 年第 32 届德国国际工程机械博览会）, 2019 - 04 - 01 T00 : 00 : 00 . 000 Z Kp83k5ciWCNyCapYb : 2019 美国际冶金铸造展暨北美铸造年会, 2019 - 04 - 01 T00 : 00 : 00 . 000 Z LeWCAmhymxxg7Pn64 : 机械电子、控制、自动化、植入式电子器材, 2018 - 10 - 01 T00 : 00 : 00 . 000 Z yD7RtepqLB9QnCSwj : 德国汉诺威国际金属板材加工展, 2018 - 10 - 01 T00 : 00 : 00 . 000 Z http - b POST $e s / $ idx / $ type / _search query : = ' {\"bool\":{\"must\":[{ \"match\": { \"recurrence.nameZHCN\": \"五金机械\" }}]}} ' sort : = ' [{\"recurrence.timeStart\": {\"order\" : \"desc\", \"mode\": \"max\"}}] ' size = 10 | jq - r ' .hits.hits[] | \"\\(._id): \\(._source.recurrence[0].nameZHCN), \\(._source.recurrence[0].timeStart)\" ' G79B2vwBrHunwkXC6 : 国际林业机械和新产品博览会, 2020 - 06 - 01 T00 : 00 : 00 . 000 Z yXsohQLuRkBXuu8sz : 奥地利林业机械及设备展, 2019 - 10 - 08 T00 : 00 : 00 . 000 Z BNzwq3WrkH8N7T7tF : 2019 年欧洲纺织机械展览会, 2019 - 06 - 20 T00 : 00 : 00 . 000 Z Rws7ZnBzCSL4AZCMa : 2019 年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（ 2019 年第 32 届德国国际工程机械博览会）, 2019 - 04 - 01 T00 : 00 : 00 . 000 Z GxjMbDrGoiSDoECEN : 2019 年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（ 2019 年第 32 届德国国际工程机械博览会）, 2019 - 04 - 01 T00 : 00 : 00 . 000 Z LeWCAmhymxxg7Pn64 : 机械电子、控制、自动化、植入式电子器材, 2018 - 10 - 01 T00 : 00 : 00 . 000 Z 2 RQ65WebsKjsPXzby : 南非国际建筑机械、建材机械、矿山机械及工程车辆展, 2018 - 09 - 01 T00 : 00 : 00 . 000 Z HDj7oxqP92FRHCmfx : 农业机械展（德国）, 2018 - 06 - 01 T00 : 00 : 00 . 000 Z wbPbknwmCeXiYus7w : 德国科隆国际食品加工机械展, 2018 - 03 - 20 T00 : 00 : 00 . 000 Z rF7utm6WC67R6wGgR : 2018 年德国科隆国际五金工具展览会, 2018 - 03 - 03 T16 : 00 : 00 . 000 Z 可以看到临时index的查询结果中，第3、5、8、10项都是没有中文分词导致的错误查询结果， 添加中文分词的正式index中，这些结果都被过滤掉了。 修改mappings文件 使用httpie创建index 为了增加中文分词analyzer: 原有的mappings文件： { \"production\" : { \"mappings\" : { \"Fair\" : { \"properties\" : { \"createdAt\" : { \"format\" : \"strict_date_optional_time||epoch_millis\" , \"type\" : \"date\" } , \"createdBy\" : { ... \"nameZHCN\" : { \"type\" : \"string\" } , ... 修改后的mappings文件： { \"Fair\" : { \"properties\" : { \"createdAt\" : { \"format\" : \"strict_date_optional_time||epoch_millis\" , \"type\" : \"date\" } , \"createdBy\" : { ... \"nameZHCN\" : { \"type\" : \"string\" , \"analyzer\" : \"smartcn\" } , ... 两方面改动： 在 nameZHCN 字段后增加\"analyzer\": \"smartcn\"， 要改掉mappings中的所有的 nameZHCN ，否则可能会报格式冲突； mappings文件的格式有变化：要去掉原文件中外层的index名称和 mappings: ， 但\"mappings\"后面的大括号不要去掉。 在青云上的ES服务上验证通过，他们的ES服务应该安装了 smartcn 插件， 如果是自己搭建的ES服务，需要手工安装这个插件。 参考： https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html 使用curl创建index 使用 curl 时需要把 mappings 放在mapping文件里，也就是只去掉最外层的``： { \"mappings\" : { \"Fair\" : { \"properties\" : { ... 然后用 curl -i -XPUT ${es_url}/$idx @fair-product-mappings.json 基于这个 mapping文件创建名为\"$idx\"的index. 创建多个mappings 如果在创建index时需要指定多个type mappings，需要都放在mappings文件里， 不能分开多次执行，否则报 index已存在 错误。 { \"mappings\" : { \"Fair\" : { \"properties\" : { ... \"Product\" : { ...","tags":"Tech","url":"http://leetschau.github.io/wei-elasticsearchfu-wu-tian-jia-zhong-wen-fen-ci-gong-neng.html","loc":"http://leetschau.github.io/wei-elasticsearchfu-wu-tian-jia-zhong-wen-fen-ci-gong-neng.html"},{"title":"Move Window Between Screens with Keyboard","text":"Run apt-get install compizconfig-settings-manager compiz-plugins-extra , (logout and login again if the following steps failed); In Dash (use Win key), input 'compiz', run 'CompizConfig Settings Manager\"; Click Window Management , then click Put ; In Put window , check Enable Put ; Click the Disable button at the right side of Put to Next Output (with a keyboard icon), set Alt-Shift-u ; That's it. Now use Alt-Shift-u to move window between screens :) Ref: http://askubuntu.com/questions/141752/keyboard-shortcut-to-move-windows-between-monitors","tags":"Tech","url":"http://leetschau.github.io/move-window-between-screens-with-keyboard.html","loc":"http://leetschau.github.io/move-window-between-screens-with-keyboard.html"},{"title":"怎样报bug","text":"工作流程 业务同事在发现网站或者管理控制台有bug时，请按照如下流程报开发解决： 打开Phabricator的相关项目页面； 在Todo列下新建一个Task，把问题的复现过程写在里面。 所谓复现过程，就是我现在打开哪个页面，改的哪条展会的哪一项， 点了哪个按钮，出现了什么问题，让开发看着你的描述能再现一次问题； 把这个task的链接发到微信工作群里或者身边的开发同事； 在他/她复现问题的过程中，遇到不清楚的地方进行解释，完善第2步中创建的复现流程； 确定开发同事已经能够复现问题，你的任务就完成了，等待他的反馈。 Q & A Q: 复现过程要详细到什么程度？ A: 详细到一个完全不懂公司业务、也没有技术背景的人，可以按照你的描述复现问题。 Q: 为什么要搞这么复杂，我截个图发微信上不行吗？ A: 如果是简单的问题，速战速决当然可以，但对于复杂的问题，使用这个流程很有用： 首先，写下来的解决方法才能变成组织财富的一部分， 而不是随着时间的推移和人员的流动，一次一次解决相同或者类似的问题； 其次，写下来的解决方法可以帮助开发新手快速成长，降低公司培养新人的成本， 提高组织整体的效率； 最后，写下来的过程是整理思路的过程，对写文档的人也是一种技能提升。 Q: 我提交的bug总不解决怎么办？ A: 提高任务的重要程度（在priority里设置），如果提高后还是一直未解决， 跟任务的接收人聊一聊，延期的原因是什么，大家一起讨论一下解决方法。","tags":"Tech","url":"http://leetschau.github.io/zen-yang-bao-bug.html","loc":"http://leetschau.github.io/zen-yang-bao-bug.html"},{"title":"在vim中执行shell命令的插件","text":"使用 Python, Haskell, Ruby 的 REPL 时经常需要能够在一个文本文件中将 当前行（或者选中很多行）发送到 REPL 中， 并能够灵活地在文本编辑器（执行编辑好的脚本）和 REPL （手工输入并执行一些一次性的代码）间切换， 下面的几种方法使用不同的工具实现了下列目标： :tn : 创建当前脚本语言对应的 REPL； :tl : 将当前脚本加载到 REPL 中执行； :tg : 显示/隐藏 REPL 窗口； 使用空格键发送当前行，或者选中行到 REPL 中执行； :tt <your command> : 在 REPL 中执行 <your command> ; 基于 neoterm 的方法的优点是不依赖 vim 以外的工具，适合在不能使用 tmux 的场合 （例如使用 i3wm 时由于快捷键冲突无法使用 tmux）。 Based on neoterm Add the following lines into $MYVIMRC : let g : neoterm_default_mod = 'vertical' let g : neoterm_autoscroll = 1 let g : neoterm_direct_open_repl = 1 let g : neoterm_repl_ruby = 'pry' let g : neoterm_repl_python = 'ipython' autocmd FileType haskell let g : neoterm_repl_command = 'stack ghci' autocmd FileType haskell , python , ruby nnoremap < silent > < Space > : TREPLSendLine < CR > autocmd FileType haskell , python , ruby vnoremap < silent > < Space > : TREPLSendLine < CR > autocmd FileType haskell , python , ruby cabbrev tt T autocmd FileType haskell , python , ruby cabbrev tn Tnew autocmd FileType haskell , python , ruby cabbrev tg Ttoggle autocmd FileType haskell cabbrev tl T : load % autocmd FileType python cabbrev tl T run % autocmd FileType ruby cabbrev tl T load '%' Plug 'kassio/neoterm' With above configurations, after open a python or haskell file and press key, for there's no existing terminal window existing, neoterm will create a new one automatically and send the current line into it. Or you can select multiple lines (in visual mode) and send to the terminal window with key. Reload a file with :tl . After the job is done, no need to quit with Tclose , just :qa . If you want input something on-the-fly in the REPL, you have 2 options: :tt :set +m and press Return key. :tt and pressing becomes :T . All characters following is sent to REPL. This is convenient, while you lose the tab-completion functionality in REPL. Jump to the REPL window, switch to insert mode with pressing i , input something (for example filter even [1,2,3] ), leave insert mode with pressing Ctrl-\\ Ctrl-n , finally jump back to editor window. Note: if you want open the terminal window in the bottom instead of right, use let g:neoterm_default_mod = 'botright' . See :h mods in vim for more options. Under the hood If above shortcuts don't work, restart the vim. Or you can run it manually: Open a new terminal window with :sp | terminal Get terminal window ID with :echo b:terminal_job_id Run a command, say ls -la , with :call jobsend(7, \"ls -la\\n\") , where the first parameter 7 of jobsend is from above step. Paste mode in GHCi When send the following lines into repl with neoterm, there are always errors at the line where ... : drink aCup ozDrank = if ozDiff >= 0 then cup ozDiff else cup 0 where oldOz = getOz aCup ozDiff = oldOz - ozDrank The reason is GHCi believe the block is ended after else ... , even you've added :set +m . The solution is add :{ (with :ts :{ ) and :} before and after the block. See How to define a function in ghci across multiple lines? . Based on vim plugin vimux vimux 能够自动检测tmux pane， 基于它的工作流程是： 为vim安装vimux插件并配置好快捷键（例如下面的配置将快捷键设为空格键）后， 在一个 tmux window 中，左/上侧是vim窗口，右/下侧是repl，例如IPython或者GHCi， Normal模式下按空格键，将当前行发送到repl中执行， Visual模式下按空格键，选中的每行被一次发送到repl中执行。 vim的安装配置方法：在 $MYVIMRC 中增加： nnoremap < Space > : call VimuxRunCommand ( getline ( \".\" )) < CR > vnoremap < Space > : call VimuxRunCommand ( getline ( \".\" )) < CR > Plug 'benmills/vimux' 目前这种方法的缺点是响应慢，优点是能正确处理 IPython 由于 autoindent 导致 多行输入时缩进错误问题，以及其他一些辅助功能，例如自动关系repl pane等。 Based on Tmux send-keys 与 vimux 的原理相同，也是在 tmux 中利用 send-keys 命令将当前或者选中的文本 发送到目标 pane 中。 目录结构：当前工作目录下有 sendcmd.vim 和 test.md 两个文件， 前者包含实现功能的 vim 函数，后者是包含要执行命令行的数据文件。 开发环境：tmux window 1 做sendcmd.vim开发，window 2 上下拆分为两个pane ，上面 (ptop) 是命令行，下面的 pane (pbottom) 中用 vim 打开数据文件test.md. 每次修改并保存sendcmd.vim后，在test.md中执行 :so sendcmd.vim ， 然后把光标移动到要执行的命令所在的行上按 F3 键就可以看到命令被发送到ptop里的 执行效果了。 格式探测 这一步要解决的问题是：怎样的字符串，才能被 tmux send-keys 正确地传送出去， 并能正确的执行。 首先要保证运行 tmux send-keys 不报错，如果报错， 将第5行的输出拷贝到一个单独的命令行中运行，解决错误。 这一步通过后，如果命令被传送到 ptop 后报错，根据错误日志解决之。 sendcmd.vim： function ! SendCmd () let curline = getline ( \" . \" ) echom curline let cmd = \" tmux send-keys -t top ' \" . curline . \" ' Enter \" echom cmd echom system ( cmd ) endfunction nnoremap < F3 > : call SendCmd () < CR > 说明： 为什么第4行中 curline 要用单引号（而不是双引号）包裹？ 因为要执行的命令中可能包含变量（如es, idx等），双引号包裹的变量会被求值， 而我们的要求是这些变量不能被求值，要等到被发送到ptop后再被求值。由于这个原因， 第4行包裹外层 tmux send-keys 的命令就只能用双引号包裹。 vimscript如何连接字符串？ 同样参考第4行，用点（ . ）连接。 tmux send-keys -t top 可以将keys从下面的pane发给上面， 也可以从左侧发到右侧，但如果是在右侧pane里执行这个语句，则会被发给自己。 test.md： es = http : // 192 . 168 . 100 . 231 : 9200 api = http : // 192 . 168 . 100 . 231 : 8000 idx = production type = Fair # get elasticsearch version http $ es | jq '.version.number' # list all indices http - b GET $ es '/_cat/indices?v' http - b GET $ es '\"' \"'/_cat/indices?v'\" '\"' # list all types of a index http - b GET $ es / $ idx / _mapping | jq \".$idx.mappings|keys\" # list all properties of a type http - b GET $ es / $ idx / _mapping | jq \".$idx.mappings.$type.properties|keys\" # get objects count in a type http - b GET $ es / $ idx / $ type / _count | jq '.count' http - b GET $ es / $ idx / $ type / _count | jq '\"' \"'.count'\" '\"' # query result count http - b POST $ es / $ idx / $ type / _search query : = '{\"bool\":{\"must\":[{\"query_string\":{\"query\":\"五金机械\"}}]}}' | jq '.hits.total' http - b POST $ es / $ idx / $ type / _search query : = '' { \"bool\" : { \"must\" :[ { \"query_string\" : { \"query\" : \"五金机械\" }} ] }} '' http - b POST $ es / $ idx / $ type / _search query : = '\"' \"'{\" bool \":{\" must \":[{\" query_string \":{\" query \":\" 五金机械 \"}}]}}'\" '\"' http - b POST $ es / $ idx / $ type / _search query : = '\"' \"'{\" bool \":{\" must \":[{\" query_string \":{\" query \":\" 五金机械 \"}}]}}'\" '\"' | jq '\"' \"'.hits.total'\" '\"' 通过不断尝试后，发现用 '\"'\"' 代替 ' 就能正确的发送并执行， 见第10,11行，20,21行，24~27行。 下面以第10行为例分析其结构： 第一个单引号与外层的单引号结合，包裹它们中间的内容 http -b GET $es ， 保证里面的特殊字符（ $ ）不会被求值； 中间的 \"'\" 是一组，实现被 tmux 发送后，最终执行的命令行里仍有一个单引号 （ $es 后面的单引号）； 最后的单引号，与后面的 '\"'\"' 中最左边的单引号组合， 包裹中间的内容 /_cat/indices?v ，如果没有这一组单引号， 里面的问好就会被求值，导致命令无法执行。 这一步实现了在第11、21、27行上按 F3 键可以正确执行。 整合进vim function 这一步将前面的测试结果放进vim函数中，实现在第10、20、24行上能够正确执行。 sendcmd.vim： function ! SendCurLineInTmux () let curline = getline ( \" . \" ) let escstr = substitute ( curline , \" ' \" , \" '\\ \" ' \\\" ' \" , 'g') let cmd = \" tmux send-keys -t right C-u ' \" . escstr . \" ' Enter \" \" echom cmd echom system ( cmd ) endfunction nnoremap < silent > < Space > : call SendCurLineInTmux () < CR > vnoremap < silent > < Space > : call SendCurLineInTmux () < CR > 这里要注意的是 tmux send-keys -t right C-u 中的 C-u ，是为了解决 IPython 的自动缩进问题，在 GHCi 中不存在这个问题，但加一个 Ctrl-u 也无妨。 IPython低版本中可以用 %autoindent 关闭自动缩进，但在6.2版本中这个方法不起作用了。 另外可以用 %cpaste 达到无缩进粘贴的目的，但要用 Ctrl-D 或者 -- 表示输入结束， 都不如在每一行首加 Ctrl-u 方便。 将上面的 sendcmd.vim 中的内容加入到 $MYVIMRC 中就可以了。 制作成插件 当功能基本定型后，可以把脚本变成插件，避免手工修改配置文件。 但对于很小的脚本来说，直接加入配置文件中也不麻烦。 最简单的vim插件，只要在一个目录（tmuxcmd）里创建一个 plugin 目录， 把.vim脚本放进去，然后把目录做成git库就行了： mkdir - p tmuxcmd / plugin mv test . vim tmuxcmd / plugin / tmuxcmd . vim cd tmuxcmd git init git add ...; git commit - m \"...\" 在.vimrc里加入这个插件：增加一行代码： Plugin 'file:///home/leo/temp/tmuxcmd' 安装： vim +PluginInstall 安装过程实际是把代码库clone到~/.vim/bundle下， 修改~/.vim/bundle/tmuxcmd/plugin/tmuxcmd.vim文件在新的vim编辑器中不会生效。 本地插件需要保存一个本地目录，更简单的方法是发布到github上，再用vundle安装： 把代码库push到github上： leetschau/tmuxcmd 在.vimrc中，把原来的 Plugin 'file:///home/leo/temp/tmuxcmd' 换成 Plugin 'leetschau/tmuxcmd'","tags":"Tech","url":"http://leetschau.github.io/zai-vimzhong-zhi-xing-shellming-ling-de-cha-jian.html","loc":"http://leetschau.github.io/zai-vimzhong-zhi-xing-shellming-ling-de-cha-jian.html"},{"title":"Loop over Visual Selection in Vim Script","text":"Create file testPos.vim: function ! GetSelection () echo \" in func \" let start = line ( \" v \" ) echo \" start: \" . start let end = line ( \" . \" ) echo \" end: \" . end let firstLine = line ( \" '< \" ) echo \" start2: \" . firstLine let lastLine = line ( \" '> \" ) echo \" end2: \" . lastLine endfunction noremap < silent > < F4 > : call GetSelection () < CR > In the same folder, open a file with vim, run :so testPos.vim . Move the cursor to line 3, press , get the following output: in func start : 3 end : 3 start2 : 7 end2 : 11 In visual mode, select line 11 to 13, press , the output: in func start : 11 end : 11 start2 : 11 end2 : 13 in func start : 12 end : 12 start2 : 11 end2 : 13 in func start : 13 end : 13 start2 : 11 end2 : 13 The output shows in visual mode, the function will be run several times for each line. So a function need only deal with the current line, with content getline('.') , or line number line('.') . No matter in visual mode or not, the function will work fine.","tags":"Tech","url":"http://leetschau.github.io/loop-over-visual-selection-in-vim-script.html","loc":"http://leetschau.github.io/loop-over-visual-selection-in-vim-script.html"},{"title":"保存Tmux屏幕输出到文件中","text":"保存Tmux的屏幕输出分为两步： 首先用 capture-pane 将屏幕输出保存在buffer里， 然后用 save-buffer 将buffer内容保存到文件里。 在 capture-pane 中可以用 -S 和 -E 指定要保存的屏幕输出的范围， 当前屏幕的最上一行为坐标原点，标记为0，下面一行坐标是1,依次类推； 原点的上一行坐标是-1，再上一行坐标是-2，依次类推。 用 Alt-c 进入copy-mode后，屏幕右上角显示当前屏幕在整个pane中的坐标[X/Y]， 其中X代表当前屏幕最高行的坐标，Y代表最早一行屏幕输出的坐标， 根据坐标确定要保存文本的起止坐标就可以保存了。 例如要保存第3个pane中的一段近5000行的输出， 进入copy-mode后按 g 键，到最早的屏幕输出，右上角显示 [5676/5676] , 用 Ctrl-f 或者 J 键向下滚动屏幕， 当想要保存的第一行处于屏幕最上一行时，坐标显示为 [5557/5676] ， 将想要保存的最后一行滚动到屏幕最上一行，坐标显示为 [642/5676] ， 切换到另一个pane里执行： tmux capture - pane - S - 5557 - E - 642 - t 3 tmux save - buffer output . log 这样这段输出就保存到文件output.log里了，其中 -t 3 指定了要保存的pane的序号。 如果要保存所有历史输出，可以简写为 tmux capture-pane -S - . 除了新开一个pane执行tmux命令，也可以在当前pane用快捷键 Alt-a 进入tmux命令行状态 即command-prompt，然后执行 capture-pane -S -5557 -E -642 .","tags":"Tech","url":"http://leetschau.github.io/bao-cun-tmuxping-mu-shu-chu-dao-wen-jian-zhong.html","loc":"http://leetschau.github.io/bao-cun-tmuxping-mu-shu-chu-dao-wen-jian-zhong.html"},{"title":"Build Data Analysis Toolkit with Anaconda","text":"Download Anaconda installer (Anaconda3-4.3.1-Linux-x86_64.sh) and install it to folder ~/apps/anaconda3 (to uninstall, just remove this folder). Add the following line into ~/.zshenv: PATH =/ home / leo / apps / anaconda3 / bin : $ PATH Create a new environment 'myenv' and executable 'sqlite3' with: conda create -n myenv sqlite . List environments with conda env list . Each environment is a folder under '$ANACONDA_HOME/envs' like which created by virtualenv . Go into this environment with . activate myenv . Now run which sqlite3 , you can see it's under the current environment folder. Leave this environment with . deactivate . Remove this environment with conda remove -n myenv --all . Create a new Python 2.7 virtual environment with conda create -n py27 python=2.7 , make it the current environment with source activate py27 . You can use this command to switching between any conda-managed environment without worrying about nested-virtualenv. If you met an \"no such file or directory: activate\" error when running source activate ... , use the full path ~/apps/anaconda3/bin/activate instead of activate . Anaconda contains many important Python dev tools, including pip, ipython, conda (which can be used as a replacement for pip and virtualenv). If you want use it as the primary Python environment, add $ANACONDA_HOME before the existing $PATH . But Anaconda has no Python 2.x, so at least on Ubuntu 14.04 this is not the recommended way. On Ubuntu 16.04, there is no Python 2.x by default, so use Python 3.5 and pip in Anaconda3 is practical. Do not add $ANACONDA_HOME after the $PATH , which will expose some binary like conda, jupyter , while the other (like python and pip) will be covered by system equivalent. This will lead inconsistent behavior and failure of conda and jupyter . Ref: http://www.ericmajinglong.com/2014/09/23/5-great-things-about-the-anaconda-distribution/","tags":"Tech","url":"http://leetschau.github.io/build-data-analysis-toolkit-with-anaconda.html","loc":"http://leetschau.github.io/build-data-analysis-toolkit-with-anaconda.html"},{"title":"Backup Hosts on QingCloud Regularly","text":"In QingCloud [Console -> Management -> Schedulers] create a new \"Scheduler\" \"rollingBackup\". Create a new \"Task\" in this scheduler: Name: backupJenkins Type: Create Snapshots Resources: click \"Select Instances\" and choose the Jenkins host \"devops\" Question: How to specify the interval of the backup? How to specify the running time of the backup?","tags":"Tech","url":"http://leetschau.github.io/backup-hosts-on-qingcloud-regularly.html","loc":"http://leetschau.github.io/backup-hosts-on-qingcloud-regularly.html"},{"title":"Format Python Code with autopep8","text":"Install with pip install --user autopep8 or conda install -c conda-forge autopep8 . Preview: autopep8 -d <target_file>.py or autopep8 -d src/**/*.py Here -d means print diff . Modify: autopep8 -i <target_file>.py , where -i means in place . More help: autopep8 -h","tags":"Tech","url":"http://leetschau.github.io/format-python-code-with-autopep8.html","loc":"http://leetschau.github.io/format-python-code-with-autopep8.html"},{"title":"用aggregate方法处理MongoDB数据","text":"下面的aggregate方法对Fair0606 collection做如下处理： 用 $match （类似于filter）筛选出recurrence长度不小于2的document (fair). $unwind 类似于flatmap, 将每一个recurrence数组中的元素变成一个document; [ \\(project](http://bit.ly/1UE0BTQ)类似于map,去掉原document的 _id , 保留nameZHCN, website， 创建新字段time，值为recurrence.timeStart, 以及address，值为recurrence.address （路径的写法是路径名前面加\\) ，详见Field Path and System Variables in Aggregation Pipeline Quick Reference ）. 如果希望保留recurrence.timeStart的结构，写成 \"recurrence.timeStart\": 1, . $limit 要求只转换20个document, $out 指定输出collection. db.Fair0606.aggregate([ { $match : { 'recurrence.1' : { $exists : true }}} , { $unwind : \"$recurrence\" } , { $project : { _id : 0 , nameZHCN : 1 , website : 1 , time : \"$recurrence.timeStart\" , address : \"$recurrence.address\" }} , { $limit : 20 } , { $out : \"out1\" } ]) 通过unwind和project，可以实现对MongoDB schema的转换，下一步可以导出为csv 进行更复杂的数据分析，例如使用 Incanter . mongoexport --type=csv -d test -c out1 \\ --fields nameZHCN,website,time,address -o fairs.csv 参考： https://docs.mongodb.com/manual/reference/operator/aggregation/ Clojure for Data Science if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-aggregatefang-fa-chu-li-mongodbshu-ju.html","loc":"http://leetschau.github.io/yong-aggregatefang-fa-chu-li-mongodbshu-ju.html"},{"title":"增强版Python REPL","text":"bpython 语法高亮； 参数列表提示； 方便地查看和修改配置文件； 同时支持Python 2.x和3.x； 方便地在editor和repl间切换； rewind功能方便地在repl里编写多行代码： 在代码块里用快捷键Ctrl-R取消本行，以及之前输入的行 方便地保存repl中脚本到文件中； F1列出所有快捷键 Ubuntu 14.04 Unity上的配置 bpython保存文件的默认快捷键是Ctrl-S，为了解决Ubuntu 14.04 Unity, Tmux环境中， 执行Ctrl-S时出现挂死问题，启动bpython后，F3进入配置文件编辑窗口，将 save 的值改为F4: save = F4 为了解决默认F1启动Gnome terminal帮助，而不是bpython帮助问题，在Terminal菜单 [Edit -> Keyboard Shortcuts -> Contents -> Help]的快捷键用退格键变为\"Disabled\". 如果还不行，在Unity系统的 [System Settings -> Keyboard -> Shortcuts Launchers -> Launch help browser]的 快捷键也Disable掉。 For Python3 Install with sudo pip3 install bpython , start with python3 -m bpython.cli . 另外 ptpython ，功能与bpython类似， 但没有函数的参数列表提示。 IPython notebook也能实现类似的功能，但似乎比较重。","tags":"Tech","url":"http://leetschau.github.io/zeng-qiang-ban-python-repl.html","loc":"http://leetschau.github.io/zeng-qiang-ban-python-repl.html"},{"title":"Clojure Linter in Vim","text":"Clojure Style Guide: bbatsov/clojure-style-guide Linter: venantius/vim-cljfmt and venantius/vim-eastwood . { : user { : plugins [[ lein - try \"0.4.3\" ] [ cider / cider - nrepl \"0.12.0\" ] [ jonase / eastwood \"0.2.3\" ] [ cljfmt \"0.5.1\" ]] }} Add :plugins [[lein-cljfmt \"0.5.3\"]] into your leiningen project, run: lein eastwood lein cljfmt check Install their vim plugins: Add Plugin 'venantius/vim-cljfmt' in .vimrc and install it with vim +PluginClean +PluginInstall . project.clj file: ( defproject sync - with - recur - order \"0.1.0-SNAPSHOT\" : description \"FIXME: write description\" : url \"http://example.com/FIXME\" : license { : name \"Eclipse Public License\" : url \"http://www.eclipse.org/legal/epl-v10.html\" } : dependencies [[ org . clojure / clojure \"1.8.0\" ] [ org . clojure / data . json \"0.2.6\" ] [ lein - cljfmt \"0.5.3\" ]] : plugins [[ lein - cljfmt \"0.5.3\" ]])","tags":"Tech","url":"http://leetschau.github.io/clojure-linter-in-vim.html","loc":"http://leetschau.github.io/clojure-linter-in-vim.html"},{"title":"Fabric中向文件写入特殊字符","text":"场景：需要向/etc/default/docker文件追加一行文字： DOCKER_OPTS = \"$DOCKER_OPTS --registry-mirror=http://b53a2938.m.daocloud.io\" 其中双引号和$是特殊字符，难度主要提现在如何转意这两个字符上。 普通用户通过Shell达到目标的方法是： echo \"DOCKER_OPTS=\\\" \\$ DOCKER_OPTS --registry-mirror=http://b53a2938.m.daocloud.io\\\"\" | sudo tee -a /etc/default/docker root用户使用Shell的方法是： echo \"DOCKER_OPTS=\\\" \\$ DOCKER_OPTS --registry-mirror=http://b53a2938.m.daocloud.io\\\"\" >> /etc/default/docker Fabric的实现方法是： sudo ( 'echo \"DOCKER_OPTS=\\\\\\\\\"\\\\\\$DOCKER_OPTS ' '--registry-mirror=http://b53a2938.m.daocloud.io\\\\\\\\\"\" ' '>> /etc/default/docker' ) 或者用raw string: sudo ( r 'echo \"DOCKER_OPTS=\\\\\"\\\\$DOCKER_OPTS --registry-mirror=' r 'http://b53a2938.m.daocloud.io\\\\\"\" >> /etc/default/docker' )","tags":"Tech","url":"http://leetschau.github.io/fabriczhong-xiang-wen-jian-xie-ru-te-shu-zi-fu.html","loc":"http://leetschau.github.io/fabriczhong-xiang-wen-jian-xie-ru-te-shu-zi-fu.html"},{"title":"Using flake8 as Python Linter","text":"今天写Python脚本时遇到一个问题，重构代码时，修改了一个变量名， 但只改了正常分支中的，忘了改错误处理分支中的，由于没有Linter做未定义变量检查， bug在本机测试时并没有被发现，直到被push到remote repo， 在Jenkins job里运行几次出错后才被发现。 解决方案是安装flake8以及vim插件。 Install it with conda install -c <my-env> flake8 . 命令行中检查文件命令： flake8 syncRecurrences.py . 与 vim 的整合 通过 ALE 插件整合参考 dsnote Python IDE based on vim . 通过 syntastic 插件整合： let g : syntastic_python_python_exec = '/usr/bin/python3' let g : syntastic_python_flake8_exec = 'python3' let g : syntastic_python_flake8_args = [ '-m' , 'flake8' ] 配置好后用vim打开python脚本，保存文件后，在未声明的变量行上会出现下面的错误信息： undefined name 'objId' [ F821 ] 错误代码列表见 Warning / Error codes of flake8. 其中 E , W （分别代表 错误 和 警告）开头的是 PEP 8 定义的， 具体说明见 Error codes . Configurations See Configuring Flake8 for details. User level config $ cat ~/ . config / . flake8 [ flake8 ] ignore = E501 Project level config flake8 will search for tox.ini (recommended), setup.cfg and .flake8 for the configuration. $ cat $ PROJ_HOME / tox . ini [ flake8 ] ignore = E501 File/Line level ignore list Ignoring entire files: adding # flake8: noqa to the file. Ignore errors for a specific line: Ignore some errors: append comment # noqa: <ignore-list> at the line, for example: # noqa: E731,E123 . Ignore all errors: append comment # noqa at the line.","tags":"Tech","url":"http://leetschau.github.io/using-flake8-as-python-linter.html","loc":"http://leetschau.github.io/using-flake8-as-python-linter.html"},{"title":"Jenkins的版本控制","text":"这里使用 SCM Sync configuration plugin 实现Jenkins各项配置的版本控制。 在gitlab上创建了代码库：git@gitlab.com:leechau/newfairs-jenkins.git 安装这个插件后，在 [Manage Jenkins -> System Information -> System Properties -> user.name] 里查到Jenins系统的用户名，一般是jenkins，只有创建了这个用户的ssh key， 下面指定Git repo时才能连接成功，登录Jenkins服务器运行： su - jenkins ssh - keygen git config -- global user . name ' Li Chao ' git config -- global user . email ' leechau @126. com ' 将 cat .ssh/id_rsa.pub 的输出加入到Gitlab的 [Profile settings -> SSH Keys] 里（在右上角搜索框里直接搜索ssh keys）； 删除$JENKINS_HOME/plugins下面所有git开头的插件，重启Jenkins服务； 安装Jenkins的Git插件。配置Jenkins的远端版本库： [Manage Jenkins -> Config System -> SCM Sync configuration -> Git -> Repo URL: git@gitlab.com:leechau/newfairs-jenkins.git] 要从版本库恢复Jenkins配置文件，使用 [Manage Jenkins -> Config System -> SCM Sync configuration -> Reload config from SCM: Reload] 这个插件在 $JENKINS_HOME/scm-sync-configuration/checkoutConfiguration 中 创建了git repo。 怎样将Jenkins的状态返回到之前的某个commit？ 这个插件会在Jenkins Web页面的底部加上 SCM Sync status 提示， 但似乎不太准，比如现在它显示同步失败，但代码库提交历史显示配置能够正常保存并 被push到远端库。 其他： Ubuntu 16.04居然没有预装Python： apt install python apt install python - pip export LC_ALL = en_US . UTF - 8 pip install requests 下午安装的Git插件时，由于本地还没有配置好git用户名和email， 安装过程中出现空指针异常，整个Jenkins服务整个无法启动， 到服务器上plugins文件夹下删除了 git* 后，重启服务才正常；","tags":"Tech","url":"http://leetschau.github.io/jenkinsde-ban-ben-kong-zhi.html","loc":"http://leetschau.github.io/jenkinsde-ban-ben-kong-zhi.html"},{"title":"基于Flask的Python微服务","text":"收发JSON报文 下面基于Flask实现了最简单的JSON报文收发功能，收到请求后打印出内容， 重新组织后返回给客户端。 使用Flask的request.get_json()接收HTTP POST中的JSON报文， 使用json.dumps()发送JSON报文： 创建并启动服务： cat << EOF > server . py from flask import Flask , request import json app = Flask ( __name__ ) @app.route ( '/api/<user>/<uuid>' , methods = [ 'GET' , 'POST' ]) def add_message ( user , uuid ): content = request . get_json () print ( content ) return json . dumps ({ \"user\" : user , \"uuid\" : uuid }) if __name__ == '__main__' : app . run ( host = '0.0.0.0' , port = 3000 , debug = True ) EOF python server . py 用httpie和jq测试： http POST localhost:3000/api/chad/097aa543 head:='{\"a1\":\"bb\",\"c3\":\"dd\"}' body=theBody | jq '.user' 一个简单的Python微服务实现 下面这个服务接收HTTP请求发送来的shell脚本，执行之，并根据用户需求返回控制台输出。 为了保证服务器的安全，生产环境中的这类服务需要校验客户端身份， 并为传入的命令设置白名单。 服务器接收的url包括mode和uuid两个字段，mode分exec和poll两种情况， 前者要求服务器开始执行Post body中的指令，后者查看当前运行指令的控制台输出。 uuid可以用于验证客户端合法性，例如客户端以\"调用者+时间戳\"并加密后生成uuid， 服务器验证调用者和时间戳的有效性。 服务端的配置项包括服务监听的端口以及返回控制台输出的行数。 创建并启动服务： cat << EOF > server . py from flask import Flask , request import json from subprocess import Popen , PIPE from threading import Thread from queue import Queue PORT = 3000 CMD_LINE_NUM = 3 app = Flask ( __name__ ) output_q = Queue ( CMD_LINE_NUM ) cmd_q = [] def save_newest_output ( p , queue , cmds ): while p . poll () is None : line = p . stdout . readline () . decode () . strip () # blocking read if queue . full (): queue . get () # abandon old output silently queue . put ( line ) cmds . clear () @app.route ( '/api/<mode>/<uuid>' , methods = [ 'GET' , 'POST' ]) def run_cmd ( mode , uuid ): if mode == 'exec' : if len ( cmd_q ) > 0 : return json . dumps ({ \"mode\" : mode , \"status\" : \"busy\" }) cmd = request . get_json ()[ 'cmd' ] proc = Popen ( cmd , shell = True , stdout = PIPE ) cmd_q . append ( proc ) t = Thread ( target = save_newest_output , args = ( proc , output_q , cmd_q )) t . daemon = True t . start () return json . dumps ({ \"mode\" : mode , \"status\" : \"accepted\" }) if mode == 'poll' and len ( cmd_q ) > 0 : lines = [] while not output_q . empty (): line = output_q . get_nowait () lines . append ( line ) return json . dumps ({ \"mode\" : mode , \"status\" : \"running\" , \"output\" : ' \\n ' . join ( lines ) }) return json . dumps ({ \"mode\" : mode , \"status\" : \"finished\" }) if __name__ == '__main__' : app . run ( host = '0.0.0.0' , port = PORT , debug = True ) EOF python server . py Shell脚本在一个单独的进程中运行，并由一个独立的Thread读取它的输出， 保证HTTP服务不会被阻塞。 测试客户端： cat << EOF > test . py from time import sleep for i in range ( 28 , 49 ): print ( i , flush = True ) sleep ( 2 ) EOF http POST localhost : 3000 / api / exec / 097 aa543 cmd = 'python3 test.py' # accepted http POST localhost : 3000 / api / exec / 097 aa543 cmd = 'python3 test.py' # busy http POST localhost : 3000 / api / poll / 097 aa543 # realtime output: 30, 31, 32 sleep 10 http POST localhost : 3000 / api / poll / 097 aa543 # realtime output: 37, 38, 39 sleep 40 http POST localhost : 3000 / api / poll / 097 aa543 # status: finished http POST localhost : 3000 / api / exec / 097 aa543 cmd = 'python3 test.py' # accepted 为了保证输出不会被缓存，需要在print函数中增加 flush=True ，只有Python 3支持， 所以运行测试脚本时需要用 python3 test.py . 在Python 3.4.3, Flask 0.10.1上测试通过。 服务管理 这里使用 Supervisor 管理Python进程， 相比于Monit, start-stop-daemon等工具，它的优点是不依赖pidfile，配置方便， 提供日志输出，文档写得好。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-flaskde-pythonwei-fu-wu.html","loc":"http://leetschau.github.io/ji-yu-flaskde-pythonwei-fu-wu.html"},{"title":"部署Python Web应用","text":"部署流程 新部署 部署过程分为以下步骤： 安装依赖组件：git, pip, virtualenv, uwsgi clone代码库(git clone)； 在源代码文件夹里创建wsgi.py和uwsgi.ini文件作为uwsgi的入口和环境定义文件， 这两个文件不要加入到版本控制系统中； 创建服务启动脚本/etc/init/myapp.conf，启动服务； 创建nginx服务实例：绑定监听端口，指向上一步生成的unix socket； 测试并重启nginx服务。 代码更新 同步代码： git pull ; 重启服务： sudo restart myapp . 部署示例 以下步骤基于 How To Set Up uWSGI and Nginx to Serve Python Apps on Ubuntu 14.04 sudo aptitude install python - dev python - pip nginx sudo pip install virtualenv mkdir - p ~/ test / myapp cd ~/ test / myapp virtualenv myappenv source myappenv / bin / activate pip install uwsgi cat << EOF > wsgi . py def application ( environ , start_response ) : start_response ( ' 200 OK ' , [ ( ' Content-Type ' , ' text/html ' ) ] ) return [ \" <h1 style='color:blue'>Hello There!</h1> \" ] EOF # uwsgi -- socket 0 . 0 . 0 . 0 : 8080 -- protocol = http - w wsgi deactivate cat << EOF > myapp . ini [ uwsgi ] module = wsgi : application master = true processes = 5 socket = myapp . sock chmod - socket = 664 vacuum = true EOF sudo cat << EOF > / etc / init / myapp . conf description \" uWSGI instance to serve myapp \" start on runlevel [ 2345 ] stop on runlevel [ ! 2345 ] setuid your - user - name setgid www - data script cd / home / your - user - name / test / myapp . myappenv / bin / activate uwsgi -- ini myapp . ini end script EOF sudo start myapp # ps aux | grep myapp # sudo stop myapp sudo cat << EOF > / etc / nginx / sites - available / myapp server { listen 8080 ; server_name 192 . 168 . 100 . 201 ; location / { include uwsgi_params ; uwsgi_pass unix : / home / your - user - name / test / myapp / myapp . sock ; } } EOF sudo ln - s / etc / nginx / sites - available / myapp / etc / nginx / sites - enabled sudo nginx - t sudo nginx - s reload","tags":"Tech","url":"http://leetschau.github.io/bu-shu-python-webying-yong.html","loc":"http://leetschau.github.io/bu-shu-python-webying-yong.html"},{"title":"Option类型的实现方法比较","text":"Scala的Option类型定义在 scala/scala 的src/library/scala/Option.scala中： sealed abstract class Option [ +A ] final case class Some [ +A ] ( x : A ) extends Option [ A ] case object None extends Option [ Nothing ] 对应的Haskell定义是： data Maybe a = Nothing | Just a","tags":"Tech","url":"http://leetschau.github.io/optionlei-xing-de-shi-xian-fang-fa-bi-jiao.html","loc":"http://leetschau.github.io/optionlei-xing-de-shi-xian-fang-fa-bi-jiao.html"},{"title":"几种常用语言处理文本的效率比较","text":"读一个37264行，大小为81MB的文本文件f4.json，计算每行的单词数，然后打印出总单词数， Python用时0.16秒，Ruby用时1.16秒，Haskell用时13.4秒，分别差一个数量级。 下面是测试脚本和过程： wordcount.py: inp = ' f4.json ' counts = [] with open ( inp ) as f : for line in f : counts . append ( len ( line . split ())) print ( sum ( counts )) wordcount.rb: inp = ' f4.json ' words = [] File . open ( inp ) . each do | line | words . push ( line . split . size ) end puts words . reduce ( 0 , : + ) WordCount.hs: main :: IO () main = do input <- readFile \" f4.json \" print $ sum ( countWords input ) countWords input = map ( length . words ) ( lines input ) 测试过程： ``` wc -l f4.json 37264 f4.json time python wordcount.py 1103404 python wordsum.py 0.14s user 0.01s system 99% cpu 0.157 total time ruby wordsum.rb 1103404 ruby wordsum.rb 1.13s user 0.02s system 99% cpu 1.158 total time runhaskell Main.hs 1105752 runhaskell wordcount.hs 12.64s user 0.76s system 100% cpu 13.395 total","tags":"Tech","url":"http://leetschau.github.io/ji-chong-chang-yong-yu-yan-chu-li-wen-ben-de-xiao-lu-bi-jiao.html","loc":"http://leetschau.github.io/ji-chong-chang-yong-yu-yan-chu-li-wen-ben-de-xiao-lu-bi-jiao.html"},{"title":"青云的告警监控系统","text":"首席创建通知列表： 在[控制台 -> 通知列表]中[创建]一个[通知列表]：\"网站连接超时\" 然后创建告警策略： 在[控制台 -> 管理 -> 告警监控]中[创建]一个[告警策略]， 名称：网站不能连接 资源类型：负载均衡监听器-HTTP协议 规则：[响应延迟时间] > 1000毫秒 通知列表：\"网站连接超时\" 监控资源：选择对应的负载均衡器。","tags":"Tech","url":"http://leetschau.github.io/qing-yun-de-gao-jing-jian-kong-xi-tong.html","loc":"http://leetschau.github.io/qing-yun-de-gao-jing-jian-kong-xi-tong.html"},{"title":"Console Rest Client","text":"httpie + jq httpie + jq 前者是curl的增强版，后者用来处理httpie返回的json结果。 http - b api . newfairs . com / Fair / _search query : = '{ \"match\": { \"nameZHCN\": \"中国上海国际栅栏护栏展览会暨研讨会\" } }' size = 5 fields : = '[\"nameZHCN\"]' http - b api . newfairs . com / Fair / _search query : = '{ \"match\": { \"nameZHCN\": \"中国上海国际栅栏护栏展览会暨研讨会\" } }' size = 5 | jq '.hits.total' http - b api . newfairs . com / Fair / _search query : = '{ \"match\": { \"nameZHCN\": \"中国上海国际栅栏护栏展览会暨研讨会\" } }' size = 5 | jq '.hits.hits[]._source.nameZHCN' http - b api . newfairs . com / Fair / _search query : = '{ \"query\": { \"match\": { \"_id\": \"Ao3Ati9dvWBerBrn8\" } } }' | jq '.hits.hits[]._source.nameZHCN' http - b POST http : // api . newfairs . com / Fair / _search query : = '{\"query\":{\"bool\":{\"must\":[{\"query_string\":{\"query\":\"五金机械\"}}]}}}' | jq '.hits.hits[]._source.recurrence[].timeStart' -b 代表只显示response的body，不显示head，以方便后续jq进行下一步处理， 中括号代表array，例如 jq '.hits.hits[0]' 表示只显示第一个结果， hits[]代表返回数组里的所有结果。 这二者结合fzf，可以实现Postman/Insomnia这类GUI工具的功能。 Insomnia Insomnia : Chrome App. Pros Request和Response窗口是左右排列的，且宽度可以调节； 分级管理Request: Workspace -> Group -> Request， 只能同时打开一个Workspace，比Postman更整洁； 良好的快捷键支持，request body和环境变量编辑窗口中可以使用vi编辑模式； 可以为每个Workspace定义环境变量，然后在url中使用这些环境变量，见下面的演示； 按名称搜索request: 默认快捷键Ctrl-P; Cons 没有云同步，只能本地import/export; Postman Postman : Chrome App. Pros 分级管理request: Collection -> Folder -> Request，可以方便地搜索； Collection实际就是高一级的Folder，当request数量多时，request面板会比较凌乱； 可以同步到云端，在不同机器上方便地同步； Cons Request和Response窗口是上下排列的，当调试Post方法时， 打开的Body窗体基本占满了整个屏幕，而且是最小高度，不能再减小， 导致每次看response内容都要使用滚轮，非常不方便。 Discussion Insomnia的环境变量 例如定义下面的环境变量： { \"api_url\" : \"http://api.newfairs.com\" , \"inner_url\" : \"http://192.168.100.24:9200/\" } 在request的url栏里可以这样定义url: {{api_url}}/Fair/_search ， 点击request名称后面的三角图标并选择\"Export as cURL\"，可以看到url被替换成了 http://api.newfairs.com/Fair/_search . 其他类似工具 Firefox插件：Poster, RESTED, REST Easy, RESTClient. 前三者都不具备多Request管理功能，无法保存多个Request. RESTClient可以定义favorite，但没有单独的窗体，查看不方便。","tags":"Tech","url":"http://leetschau.github.io/console-rest-client.html","loc":"http://leetschau.github.io/console-rest-client.html"},{"title":"MongoDB Schema Analysis","text":"Use variety/variety-cli to analysis mongodb schema. Install with npm npm install variety-cli -g If the command variety is conflict with Variety the Wallpaper Changer , add alias variety='/home/leo/apps/node-v5.4.1-linux-x64/bin/variety' into ~/.bash_aliases. The production database is connected with mongo 192.168.10.89:27017/production -u user -p password . To analyze it, run: variety production/Fair --host 192 .168.10.89 --port 27017 --username user --password password Note you can't use -u instead of --username above. Run with mongo Download variety.js from it's repo and run: mongo 192 .168.10.89:27017/production -u user -p password --eval \"var collection = 'Fair'\" variety.js +------------------------------------------------------------------------------------------------------------------------------+ | key | types | occurrences | percents | | ------------------------------------------------ | ---------------------------------- | ----------- | ---------------------- | | _id | String | 9316 | 100 .000000000000000000 | | recurrence.XX._id | String | 9276 | 99 .570631172176902624 | | recurrence.XX.timeStart | String ( 9180 ) ,Date ( 116 ) | 9275 | 99 .559896951481320571 | Verify it with mongo shell: mongo 192 .168.10.89:27017/production -u dba -p password > db.Fair.count () 9316 > db.Fair.find ({ 'recurrence._id' : { $exists : true }}) .count () 9276 > db.Fair.find ({ $and : [{ 'recurrence' : { $exists : true }} , { 'recurrence._id' : { $exists : false }}]}) .count () 40 // 9316 - 9276 > db.Fair.find ({ 'recurrence.timeStart' : { $exists : true }}) .count () 9275 // > db.Fair.find ({ $and : [{ 'recurrence._id' : { $exists : true }} , { 'recurrence.timeStart' : { $exists : false }}]}) .count () 1 // 9276 - 9275 > db.Fair.find ({ 'recurrence.timeStart' : { $type : 2 }}) .count () 9180 > db.Fair.find ({ 'recurrence.timeStart' : { $type : 9 }}) .count () 116 > db.Fair.find ({ $and : [{ 'recurrence.timeStart' : { $exists : true }} , { 'recurrence.timeStart' : { $not : { $type : 2 }}} , { 'recurrence.timeStart' : { $not : { $type : 9 }}}]}) .count () 0 // there ' s no other data type, all you need to do is converting String to Date For type number, 2 means String, 9 means Date. See their definitions in $type in MongoDB doc . Why 9180 + 116 > 9275? Because all the numbers here is the counts of fairs. While in a single fair there are maybe many recurrences. So if a fair has 2 recurrences, one's timeStart type is String, and the other's type is Date, it will be counted twice, both in 9180 and 116. Unify Schema We need convert the type of \"updatedAt\", \"recurrence. \\(.timeStart\" and \"recurrence.\\) .timeEnd\" from String to Date with mongo script below: db . Fair . find ( { ' recurrence.timeStart ' : {$ type : 2 }} ) . forEach ( function ( fair ) { fair . recurrence . forEach ( function ( rec ) { if ( typeof ( rec . timeStart ) === ' string ' ) { rec . timeStart = new Date ( rec . timeStart ) ; } } ) ; db . Fair . save ( fair ) ; } ) ; db . Fair . find ( { ' recurrence.timeEnd ' : {$ type : 2 }} ) . forEach ( function ( fair ) { fair . recurrence . forEach ( function ( rec ) { if ( typeof ( rec . timeEnd ) === ' string ' ) { rec . timeEnd = new Date ( rec . timeEnd ) ; } } ) ; db . Fair . save ( fair ) ; } ) ; db . Fair . find ( { ' updatedAt ' : {$ type : 2 }} ) . forEach ( function ( fair ) { fair . updatedAt = new Date ( fair . updatedAt ) ; db . Fair . save ( fair ) ; } ) ; if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/mongodb-schema-analysis.html","loc":"http://leetschau.github.io/mongodb-schema-analysis.html"},{"title":"Toggle Syntastic Mode to Speedup Vim","text":"Sometimes syntastic's syntax checker make vim slow down. To speed it up, add cabbrev stm SyntasticToggleMode<CR> into .vimrc. When syntax checker annoying, use :stm to shut it down. And do it again to open it again. BTW: use :ab to list all abbreviations defined in .vimrc.","tags":"Tech","url":"http://leetschau.github.io/toggle-syntastic-mode-to-speedup-vim.html","loc":"http://leetschau.github.io/toggle-syntastic-mode-to-speedup-vim.html"},{"title":"Persist Tmux","text":"Work Flow Persist tmux status automatically or manually; After restarting the computer, all sessions, windows and panes can comes back. Solution First make sure your tmux version >= 1.9 with tmux -V . If not, run: ``` proxychains wget https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz tar zxf tmux-2.3.tar.gz cd tmux-2.3 ./configure && make sudo apt-get install libevent-dev libncurses5-dev libncursesw5-dev sudo apt-get remove tmux sudo make install Then install [ Tmux Plugin Manager ]( https : //github.com/tmux-plugins/tpm), [ Tmux Resurrect ]( https : //github.com/tmux-plugins/tmux-resurrect) and [ tmux - continuum ]( https : //github.com/tmux-plugins/tmux-continuum): git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm ``` Adding the following lines in the end of ~/.tmux.conf (without running tmux server): # List of plugins set - g @plugin 'tmux-plugins/tpm' set - g @plugin 'tmux-plugins/tmux-sensible' set - g @plugin 'tmux-plugins/tmux-resurrect' set - g @plugin 'tmux-plugins/tmux-continuum' set - g @continuum - restore 'on' # Initialize TMUX plugin manager ( keep this line at the very bottom of tmux . conf ) run '~/.tmux/plugins/tpm/tpm' and run tmux source-file .tmux.conf . Start tmux and press prefix + I to install all the plugins. When finished, press prefix + Ctrl-S (key shortcut for saving tmux session) to verifiy the installation. Now the tmux status will be saved to disk every 15 minutes, or save it manually with prefix, Ctrl-S . After restarting computer, run tmux in console, all tmux sessions, windows and panes will be restored automatically (or you can restore them manually with prefix, Ctrl-R ). You can remove the temporary session with tmux kill-session -t 0 , where \"0\" is the name of the temporary session. Note: For more details about tmux plugin manager (update, remove plugin, for example), see README.md of Tmux Plugin Manager . If not install with apt-get , you can install libevent with downloading libevent-2.0.22-stable.tar.gz and install it from source.","tags":"Tech","url":"http://leetschau.github.io/persist-tmux.html","loc":"http://leetschau.github.io/persist-tmux.html"},{"title":"Git Submodule的同步问题","text":"获取更新 git submodule foreach --recursive 'git fetch --all' 列出remote比local新的submodule和所在分支 git submodule foreach --recursive 'git branch --all -vv'|grep behind -B1 查看最新的提交在哪个分支上 git submodule foreach -- recursive ' git for-each-ref --sort=-committerdate --count=1 ' 查询local branch与remote branch之间的关系 这一步的目的是为了避免后面做 git pull --all 时无法确定merge目标branch. git submodule foreach --recursive 'git branch --all -vv' 如果一个repository早已设置好remote和local之间的对应关系（见Note2）， 则可以跳过这一步。 显示origin中每个branch的情况： git submodule foreach -- recursive ' git remote show origin ' 同步到本地分支上 git submodule foreach --recursive 'git pull --all' 如果上面的命令由于Git无法确定merge目标失败，先执行： git submodule foreach --recursive 'git checkout master' 再执行 git pull 命令。 回退 任何时候如果想放弃本地所做的修改，用 git submodule update 返回到初始状态。 切换到工作分支 git submodule foreach -- recursive ' git checkout $(git for-each-ref --count=1 --sort=-committerdate| grep -oE \"[&#94;/]+$\") ' 其中 git for-each-ref 拿到最新的一次commit及其所在分支， 用 grep 命令得到分支名称，在checkout出此分支。 参考： http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field Note Note1 如果希望查询某个时间点后的提交： git --no-pager submodule foreach --recursive 'git log --since=\"2016-03-05\" --pretty=oneline --all --decorate' 这里的 --no-pager 避免 git log 进入\"pager\"（即类似于vim或者less的全屏风格）模式。 Note2 Local branch与remote branch的关系实际上是定义在 .git/config 文件中的， 对于Meteor package, 这个文件是 \" /.git/modules/packages/ /config\"，例如： [branch \"master\"] remote = origin merge = refs/heads/master","tags":"Tech","url":"http://leetschau.github.io/git-submodulede-tong-bu-wen-ti.html","loc":"http://leetschau.github.io/git-submodulede-tong-bu-wen-ti.html"},{"title":"Print First and Last Characters of a Line","text":"Some large files all content are in the same line, there is no newline for the entire file. For them it's very slow to view them with less or vim. Instead we can use head and tail , for example commands below print first and last 50 characters of a large one-line file: cat large - one - line . json | head - c 50 cat large - one - line . json | tail - c 50","tags":"Tech","url":"http://leetschau.github.io/print-first-and-last-characters-of-a-line.html","loc":"http://leetschau.github.io/print-first-and-last-characters-of-a-line.html"},{"title":"Print Some Lines of a File with Head and Tail","text":"$ echo \"1\\n2\\n3\\n4\\n5\\n6\" > test $ cat test 1 2 3 4 5 6 $ tail -n+2 test // remove head ( start from 2nd line ) 2 3 4 5 6 $ head -n-2 test // remove tail ( discard last 2 lines ) 1 2 3 4 $ head -2 test // only head 1 2 $ tail -2 test // only tail 5 6","tags":"Tech","url":"http://leetschau.github.io/print-some-lines-of-a-file-with-head-and-tail.html","loc":"http://leetschau.github.io/print-some-lines-of-a-file-with-head-and-tail.html"},{"title":"Atom Notes","text":"Customize Keyboard Shortcuts I installed a package atom-textile-preview , and want to toggle preview panel with keyboard shortcuts 'Ctrl-Alt-m'. First get the command of the 'toggle' action in file menus/textile-preview.cson in atom-textile-preview : textile-preview:toggle . Open 'keymap.cson' with 'Edit -> Keymap'. Add the following lines in it: 'atom-text-editor' : 'ctrl-alt-m' : 'textile-preview:toggle' No need to restart atom. The shortcut will work after you save 'keymap.cson'. See Keymaps In-Depth for details about shortcuts customization. Import Global Settings ctrl-. : toggle Keybinding Resolver ; ctrl-, : open \"Settings\" panel; Search shortcuts in [Settings -> Keybindings] Packages Management Export to a file: apm list --installed --bare > atom_pkgs.list Install from the file: apm install --packages-file atom_pkgs.list Installed package list (2017.3.16): $ atom -- version Atom : 1.14.3 Electron : 1.3.13 Chrome : 52.0.2743.82 Node : 6.5.0 $ apm list -- installed -- bare clipboard - plus @0.5.1 markdown - preview - plus @2.4.3 pandoc @0.2.2 vim - mode - clipboard - plus @0.2.0 vim - mode - plus @0.82.3 Important Packages Markdown Preview Install markdown-preview-plus (v 2.4.3). Toggle preview window with Ctrl-Shift-M . vim mode Frequently used shortcuts in Vim Mode : ctrl-k s/v: split panel horizontal/vertical; ctrl-w,w: switch focus between 2 panels; ctrl-w, h/j/k/l: switch focus to left/down/up/right panel; ctrl-w,q: close panel; Get all shortcuts in vim mode in ~/.atom/packages/vim-mode/keymaps/vim-mode.cson vim-mode-clipboard-plus Use yy to copy from Atom to outside, and use p to paste from outside into Atom. If you install vim-mode-plus instead of vim-mode, check Use Vim Mode Plus in the Settings of this plugin. ex-mode Use :w , :q , :sv , :sp . Keyboard localization Purpose: use \";\" instead of \":\" in vim-mode to invoke ex-command. Install this package, and create file \"/home/leo/.atom/packages/keyboard-localization/mykeymaps.json\": { \"186\" : { \"unshifted\" : 58 } } Set above path value to [Settings -> Packages -> keyboard-localization]: Settings, \"Use Keyboard Layout From Path\". See Keyboard localization for how to generate above json file. Git Git-Plus . For example: discard all changes from last commit: ctrl - shift - h Run reset --hard HEAD","tags":"Tech","url":"http://leetschau.github.io/atom-notes.html","loc":"http://leetschau.github.io/atom-notes.html"},{"title":"Setup Haskell Develop Environment in Atom","text":"IDE-Haskell is a good choice for haskell editor. Installation $ cabal update $ cabal install ghc-mod stylish-haskell $ ghc-mod --version ghc-mod version 5 .5.0.0 compiled by GHC 7 .10.2 Download Atom 1.5 (atom-amd64.deb), install it with sudo dpkg -i atom-amd64.deb , and run: $ apm install language-haskell haskell-ghc-mod ide-haskell-cabal ide-haskell autocomplete-haskell ide-haskell-repl Open Atom, Ctrl-Shift-P, open \"View Installed Packages\", click \"Settings\" of haskell-ghc-mod, input full path of ghc-mod and ghc-modi in \"Ghc Mod Path\" and \"Ghc Modi Path\", here \"/home/leo/.cabal/bin/ghc-mod\" and \"/home/leo/.cabal/bin/ghc-modi\". Click \"Settings\" of ide-haskell, input full path of stylish-haskell in \"Stylish Haskell Path\", here it's \"/home/leo/.cabal/bin/stylish-haskell\". Restart Atom, open a folder contains haskell .hs files to use ide-haskell. GHCi in Atom Click \"Settings\" of ide-haskell-repl, set \"Command Args\" to \"ghci\", and \"Command Path\" to \"/usr/bin/stack\", when you use stack. (This works fine in Atom 1.5). Set \"Command Args\" to \"repl\", and \"Command Path\" to \"/home/leo/.local/bin/cabal\", when you use cabal. (This doesn't work in Atom 1.5). To load chapter 2 of \"Learning Haskell Data Analysis\" into ide-haskell-repl, you must install required libraries with stack: stack install csv HDBC sqlite HDBC - sqlite3 Then open file \"LearningDataAnalysis02.hs\" in Atom, click [Haskell IDE -> Open REPL] in main menu, now module \"LearningDataAnalysis02\" is loaded into ghci. Input parseCSVFromFile \"all_week.csv\" in repl box, press Shift+Enter to evluate it. See all keybindings in \"Keybindings\" of ide-haskell-repl in Atom package settings. Discussion Ensure ghc-mod version > 5.4. Do NOT install it with apt-get , because its version is 3.x. See https://github.com/atom-haskell/haskell-ghc-mod#configuration for details. If you only install stack instead of cabal, you can install Haskell package with stack install ghc-mod stylish-haskell .","tags":"Tech","url":"http://leetschau.github.io/setup-haskell-develop-environment-in-atom.html","loc":"http://leetschau.github.io/setup-haskell-develop-environment-in-atom.html"},{"title":"Build a Website with Phoenix","text":"Phoenix 是一个基于 Elixir 的Web框架，按照 http://www.phoenixframework.org/docs/up-and-running， 运行 mix phoenix.new hello_world 后询问是否安装依赖，选择Y， mix执行 running mix deps.get 时长时间没有响应。 Ctrl-C中断，进入hello_world文件夹后运行 mix deps.get ，一段时间后报超时错误， 加代理后重新执行顺利完成。 在Ubuntu上安装PostgreSQL，安装后， 根据\"config/prod.secret.exs\"，可知要创建数据库\"hello_world_prod \"： su - postgres psql create database hello_world_prod owner postgres ; 安装后用 sudo passwd postgres 将用户postgres密码设置为postgres， sudo chown leo : leo readable - stream npm install mix phoenix . server 在另一个Console中执行 vi web/templates/page/index.html.eex ，重启phoenix服务， 可以看到修改后的效果。 Note: mix ecto.create 可以跳过。","tags":"Tech","url":"http://leetschau.github.io/build-a-website-with-phoenix.html","loc":"http://leetschau.github.io/build-a-website-with-phoenix.html"},{"title":"Find Corresponding Template from a Page Element in a Meteor Powered Website","text":"Open \"newfairs.com\" in Firefox. Right click of a page element and choose \"inspect element\", for example, here is <p class=\"one-line\"> . Right click it and choose \"New Attribute\", add id=\"mytarget\" . In console, input Blaze.getView(document.getElementById('mytarget')) and press Enter. You get Object { name = \"Template.productListItem\" , _callbacks = { ... } , isCreated = true , more ... } Now you know this element is defined in template \"productListItem\". Because ag can't search text in git submodule with ag Template.productListItem directly, search 'Template.productListItem' in all packages with git --no-pager submodule foreach --recursive 'ag Template.productListItem' Discussion Where does Blaze come from? When connected with the web server, the browser receives many JavaScript files. All html code is generated dynamically from these js files. And Blaze is defined and loaded in these files, too.","tags":"Tech","url":"http://leetschau.github.io/find-corresponding-template-from-a-page-element-in-a-meteor-powered-website.html","loc":"http://leetschau.github.io/find-corresponding-template-from-a-page-element-in-a-meteor-powered-website.html"},{"title":"Jump between Tags in Vim Documentation","text":"In vim doc, use Ctrl-] to jump to the tag under the cursor, use Ctrl-o to jump back. For example, run :h airline (you must have installed vim-airline, see note \"Customize Vim Statusline\" for details). Put the cursor on \"airline-customization\" in section \"CONTENTS\", press Ctrl-] to jump to section \"CUSTOMIZATION\", press Ctrl-o to jump back to section \"CONTENTS\".","tags":"Tech","url":"http://leetschau.github.io/jump-between-tags-in-vim-documentation.html","loc":"http://leetschau.github.io/jump-between-tags-in-vim-documentation.html"},{"title":"Git Branch Note","text":"List the relationship between all local branches and remote branches: git branch -vv . Set an existing local branch to track a remote branch: git checkout master git branch - u origin / master Or put all together: git branch -u origin/master master . Ref: How can I see which git branches are tracking which remote/upstream branch? Make an existing Git branch track a remote branch? Git Branching - What a Branch Is Git Branching - Branches in a Nutshell How does git store files?","tags":"Tech","url":"http://leetschau.github.io/git-branch-note.html","loc":"http://leetschau.github.io/git-branch-note.html"},{"title":"Combine History Commits with Git","text":"Question The commit history is: $ git log --pretty = oneline 52756ce25b26442a21ebfe52655dcf9c6ba9aa98 ch6 changed 41d49f2fbd12c00af99a90b6fbd1e4af18db0103 ch5 changed c24b32555b5fe98d556acc7d32a2bd68346d40ba ch4 changed 4088dde16b47f39d1b5f9553bc902e2afc34bf9a ch3 changed ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem ... You want to combine changes in chapter 3, 4 and 5. Solution git rebase - i ea37405f Here \"ea37405f\" is the commit older than the commits you want to combine. Now in an editor like: pick 4088 dde ch3 changed pick c24b325 ch4 changed pick 41 d49f2 ch5 changed pick 52756 ce ch6 changed Notice the timeline order is reversed compared with that in git log : the newest commit (\"ch6 changed\") is now in the last line, instead of the first. Modify the content like this: pick 4088 dde ch3 changed s c24b325 ch4 changed s 41 d49f2 ch5 changed pick 52756 ce ch6 changed Here \"s\" means squashing the commit into previous ( older ) commit. Save and quit, you now in an editor for new commit message, input: chapter 3 , 4 and 5 changed Save and you get a message \"Successfully rebased and updated refs/heads/master\". Discussion Check the history after rebase: $ git log --pretty = oneline b4463e99ad221f270fd9f51d5bc7e8b348805804 ch6 changed 276932a252b9041085fb30d0d5e4082db8c03584 chapter 3 , 4 and 5 changed ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem You can see the changes in files with git diff <older> <newer> , here it is: git diff HEAD~2 HEAD~ , or git diff ea37405 276932a . If something wrong happens and your rebase process stopped, come back to the place where you started with git rebase --abort .","tags":"Tech","url":"http://leetschau.github.io/combine-history-commits-with-git.html","loc":"http://leetschau.github.io/combine-history-commits-with-git.html"},{"title":"Develop Meteor App with TypeScript","text":"Console Tools Install typescript console tools TypeScript Node : npm install - g ts - node npm install - g typescript Add TypeScript into Meteor App meteor create --example todos cd todos meteor add meteortypescript : compiler (to be continued)","tags":"Tech","url":"http://leetschau.github.io/develop-meteor-app-with-typescript.html","loc":"http://leetschau.github.io/develop-meteor-app-with-typescript.html"},{"title":"3月6日演讲提纲","text":"行业背景 会展行业现状：基本角色介绍； 行业特点：信息不透明，中间环节多，交易成本高，主要靠销售，参展体验差； 与传统B2C领域的区别：交易量小，单笔金额大，多了展会维度； 产品愿景：改变行业现状，提升会展效果，airbnb vs taobao 技术框架选型 外包 vs 自主开发 成本和质量控制，团队建设，备选方案：Magento, ezshop Web框架选型 SSH, LAMP, .NET, Dart, Flask, Play, MEAN, Meteor 开发者背景：Pascal -> Delphi -> Python -> Java -> Scala (Linux) Meteor优势：学习成本低（js: web + db），开发效率高，reactivity 架构演进 原则：自主开发核心商业逻辑，外围功能尽量外包。 第一阶段：站内搜索，基于正则匹配的站内搜索， Deploy: MUP, beta -> production; 单一package，bitbucket，DB + Web Server, 公网IP； 第二阶段：线上搜索 + 线下撮合，以搜索为中心，增加静态广告， DB + Web Server + Console，初步的权限管理； 第三阶段：多品种线上交易，多package，git submodule， DB Cluster + Web Server + Elasticsearch + MongoConnector + Wordpress + Phabricator + Console; AliPay, 私有网络； 第四阶段：单一商品线上交易，精简数据模型， Deploy: staging (Phab + Ansible, auto) -> beta -> production; SSL，AliPay + 银行接入； Meteor待改进的地方 静态分析工具不足，难以排查拼写错误； Package数量增加后，编译速度变慢，受网速影响大； 版本兼容性不好； 多数据源处理复杂； 第三方package兼容性，持续性良莠不齐；","tags":"Tech","url":"http://leetschau.github.io/3yue-6ri-yan-jiang-ti-gang.html","loc":"http://leetschau.github.io/3yue-6ri-yan-jiang-ti-gang.html"},{"title":"Merge Multiple PDF Files in Ubuntu","text":"There's a built-in utility in Ubuntu 14.04 \"pdfunite\". Merge multiple pdf files with it (the last one is the output file name): pdfunite DataMining-ch* AProgrammersGuide2DataMining.pdf .","tags":"Tech","url":"http://leetschau.github.io/merge-multiple-pdf-files-in-ubuntu.html","loc":"http://leetschau.github.io/merge-multiple-pdf-files-in-ubuntu.html"},{"title":"Debug Python Script","text":"Updated for debugging technics when analyzing logistic regression script of \"Data Science from Scratch\", chapter 16 in PyCharm 2017.3. See details in wiznote/diary/2017.12.27. Origin post: Now I want to dubug a script named filteringdata.py . PyCharm Community Edition Its editor (with IdeaVim plugin), linter and debugger is the most powerful and verbose in the 3 candidates. But it's complicated when debugging a remote script. Add the following lines into ~/.ideavimrc: set nocompatible set clipboard = unnamedplus nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; The code navigation shortcut \"Ctrl-Alt-Left/Right\" of the default keymap \"Default for XWin\" (in File -> Settings) is conflict with \"Switch workspace\"'s shortcut key of Ubuntu Unity. So change the \"Keymaps\" to \"Default for GNOME\", whose code navigation key is \"Alt-Shift-Left/Right\". In a debugging session, pause at a breakpoint set beforehand, evaluate multiline scripts in the window created by Evaluate Expression (Alt-F8) button in Debugger window. Editor Setup Setup editor font size: [Font -> Primary font -> Size: 16] Setup editor background to pure dark: [General -> Text -> Default text], click the \"Background\" color icon, set R,G,B to 0, click the \"Foreground\" color icon, set R,G,B to 255. Set right margin : [File -> Settings -> Editor -> Code Style -> General: Right margin (columns)], set it's value to 80 instead of the default value 120. Jump between editor and terminal: modify it to Alt-K (default: Alt-F12) [File -> Settings -> Keymap]: search \"terminal\", double click \"Terminal\", choose \"Add Keyboard Shortcut\". Some Shortcuts Toggle Project View: Alt-1 Split window: Ctrl-Shift-A, input \"split\", select \"Split vertical/horizontal\" Jump between files: Ctrl-Shift-N Jump between editor tabs and split window: Ctrl-Tab Full screen: [View -> Enter Full Screen] Clipboard history: Ctrl-Shift-v Jump to previous/next function: Alt-Up/Down Discussion You can switch easily between \"Console\" and \"Debugger\" panels. The Console panel distinguishes stdout and stderr with different colors, which is particularly useful when debugging some programs with both stdout and stderr outputs. Meanwhile you can evaluate an expression at the runtime in \"Watches\" window. pudb Comparing with ipdb, pudb needn't add stub in source script. Installation: conda install -c conda-forge pudb . Note: installing with conda instead of pip cooperates better with conda environment. Debug Python script: pudb filteringdata.py , or with additional arguments: pudb uploadES.py fairs.json production Fair . Use ? to list all available commands. Focus code window with C (which is the default window focused once you are in pudb), n to step over, s step into , f finish current function (like step out), c continue, o to see the console output (very useful!). Focus variable window with V . In this window: use w to toggle line wrap, [ / ] to grow/shrink relative size of the window, = / - to grow/shrink sidebar. \\ to expand/collapse variable result. Toggle focus on command line with 'Ctrl-x'. To resize the console window, press 'Ctrl-x' to focus console window, then press Right arrow key to focus < Clear > at the bottom-right corner, then use = , - , + and _ keys to resize the window. ipdb without stubs In IPython repl, debug any function on site with %debug -b mypackage.py:23 myfunc(inp) . Here the -b option add a breakpoint at the place you want to stop. Note the command after the %debug can only be function. You can't write it as %debug res = myfunc(inp) (which is a statement). If you want to just activate the debugger AFTER an exception has fired, without having to type ‘%pdb on' and rerunning your code, you can use the %debug magic: %debug myfunc(inp) . Debug a script mymodule.py with %run -d -b26 mymodule.py . Here -d means debug , -b 263 means add breakpoint at line 263 . Activate the debugger AFTER an exception has fired: %pdb on run mymodule . py If you want add a breakpoint in the ipdb session, run b 141 (141 is the line number of current script) or b myscript.py:141 . Using b to list all breakpoints. To add a conditional breakpoint, for example, only stops at line 40 when j equals 50: b 40, j == 50 . See Become a pdb power-user for more details. To clear the break point #3, run cl 3 in ipdb REPL. Clear all breakpoints with cl or clear . If your app script import some other libraries, you can add breakpoints in the imported library files with %run -d -b mylib.py:26 my_app.py There's no need to add set_trace() function in this mode. with stubs There are totally 3 steps when debugging a Python script with ipdb module: install, insert stubs in source codes and debug. First install with sudo pip install ipdb (in Anaconda this is installed by default). Then add from ipdb import set_trace at the head into the script, and add set_trace() at the first place you want the dubugger to stop. Finally start a shell and run: $ ipython ... IPython 4 .0.1 ... ... In [ 1 ] : %run filteringdata.py > /home/leo/docs/playground/pg2dm-python/ch2/filteringdata.py ( 53 ) recommend () 52 # first find nearest neighbor ---> 53 nearest = computeNearestNeighbor ( username, users )[ 0 ][ 1 ] 54 ipdb> h debug test case To debug in a unit test written with unittest , for example the following test in file test_app.py : class TrainerTest ( TestCase ): def setUp ( self ): self . raw = pd . read_csv ( 'ycz6502.csv' , usecols =[ 0 , 4 , 6 ], index_col = 0 ). dropna () def test_trainer_03 ( self ): logging . info ( 'Thresholds between statuses:\\n%s' % train_thresholds ( self . raw , 0.3 )) here the core functionality is implemented in function train_thresholds in file corr_calc.py , start the debugging process with: from unittest import TestCase , defaultTestLoader , TextTestRunner % load - r 1 : 153 test_app . py test_trainer = defaultTestLoader . loadTestsFromName ( 'test_app.TrainerTest.test_trainer_08' ) % debug - b corr_calc . py : 138 TextTestRunner ( verbosity = 1 ) . run ( test_trainer ) Or add the starting script like the following in test_app.py : if __name__ == ' __main__ ' : test_trainer = defaultTestLoader . loadTestsFromName ( ' test_app.TrainerTest.test_trainer_08 ' ) TextTestRunner ( verbosity = 1 ) . run ( test_trainer ) Then in the IPython console, debug with run -d -b corr_calc.py:130 test_app.py Watch variables In ipdb REPL, to watch interested variables, use the display command: Use display var1 , display var2 , etc to add variables, display to list all watched variables, and undisplay to remove watched variables. Now if the variables watched change during c or n , they will be displayed at the console. Use alias to convert long command short. For example, after alias ds display , ds will list all watched variables. Use unalias to remove the alias. Frequently used commands include: display : add / list watched variables ; a : print args of current function ; b : set or list break points . use * cl * to clear breakpoints ; c : continue to next break points ; n : next ; s : step ; p & pp : evaluate and print value of an expression ; pp locals () : pretty - print all local variables ; w : print the stack , useful during multiple function calls q : quit ; Use h a to see the help information about command a . Watching with display in ipdb is more convenient than watch window in pudb or PyCharm, because in repl you can see clear changed history of the variables with interests. When debug recursive functions, you have to use without stubs style, because set_trace() function in the debugged function body will clear the information of higher level function call in the stack.","tags":"Tech","url":"http://leetschau.github.io/debug-python-script.html","loc":"http://leetschau.github.io/debug-python-script.html"},{"title":"Golang Notes","text":"Install Go For Linux, download go1.5.1.linux-amd64.tar.gz from Go homepage , extract it to folder \"/usr/local/go\". Add the following lines into ~/.zshenv: GOROOT =/ usr / local / go PATH = $ PATH :$ GOROOT / bin For Windows, download go1.8.3.windows-amd64.zip and extract to folder c:\\apps*. Create a new folder packages under c:\\apps\\go1.8.3*. Add environment variable GOROOT=c:\\apps\\go1.8.3 and GOPATH=c:\\apps\\go1.8.3\\packages . You can use Rapidee to modify these env variables. Run go env to verify the installation. Install packages Golang repo is blocked by GFW, such as 'https://go.googlesource.com/text/...', 'golang.org/x/...', etc. And go get can only use http proxy. So we have to install cow as the http proxy. First download a release (for me it's cow-win64-0.9.8.zip) and extract to C:\\apps. Add the following lines to its rc.txt: listen = http : // 127 . 0 . 0 . 1 : 7777 proxy = socks5 : // 127 . 0 . 0 . 1 : 1080 Here we use a shadowsocks client as the parent proxy, while cow can use remote ss server directly. Now run commands below to install a go packages (no need to modify git proxy configuration): set HTTP_PROXY = http : // localhost : 7777 set HTTPS_PROXY = http : // localhost : 7777 go get - u github . com / monochromegane / the_platinum_searcher / Note: Using socks5 proxy directly with netsh winhttp set according to Setting a proxy for Windows using the command-line not works.","tags":"Tech","url":"http://leetschau.github.io/golang-notes.html","loc":"http://leetschau.github.io/golang-notes.html"},{"title":"Cabal Notes","text":"Packages Haskell packages can be installed in user level (global, like npm install -g ) or project level (local, like npm install ). The default behavior of cabal is user level: cabal install < package - name > To install package in project level, you need create a sandbox beforehand: cabal sandbox init # run in project root folder cabal install < package - name > The global packages are stored in $HOME/.cabal/packages folder, while local packages are stored in $PROJ_ROOT/.cabal-sandbox/lib folder.","tags":"Tech","url":"http://leetschau.github.io/cabal-notes.html","loc":"http://leetschau.github.io/cabal-notes.html"},{"title":"Phabricator Notes","text":"自定义首页内容 在首页右上角搜索框中输入\"Dashboard\"，进入[Dashboards > Active Dashboards], 点击\"Dashboard 1\"，进入Dashboard 1的页面后，点击右上角的\"Manage Dashboard\", 在这里可以移动首页每个面板的位置，编辑每个面板的内容。 例如在\"W7 Tasks\"面板中，可以用下面的设置做出两个Tab页： Tab 1 Name: My Tasks Tab 1 Panel: W6 My Tasks Tab 2 Name: Recent Tasks Tab 2 Panel: W3 Recent Tasks","tags":"Tech","url":"http://leetschau.github.io/phabricator-notes.html","loc":"http://leetschau.github.io/phabricator-notes.html"},{"title":"Use VIM on Windows","text":"Use cmder as the console. Use Alt-Enter to toggle full screen, Ctrl-T to create new window/pane, Ctrl-D to close window, ls to list files. Follow Vim 101: Using Vundle and Pathogen in Windows , install msysGit. Ref: Vundle for Windows Switch CapsLock and ESC Install AutoHotKey , create file \"switchKey.ahk\": SetTitleMatchMode , 2 # IfWinActive , Cmder CAPSLOCK :: ESC ESC :: CAPSLOCK return Use \"Convert .ahk to .exe\" tool provided by AutoHotKey to convert it to switchCapsESC.exe (see Note 1 for details), and add it to \"Start\" menu. But Vundle is hard to configure on Windows, probably caused by \"runtimepath\" of vim. Note 1: cd C : \\ Program Files \\ AutoHotKey \\ Compiler Ahk2Exe . exe / in switchKey . ahk / out switchCapsESC . exe","tags":"Tech","url":"http://leetschau.github.io/use-vim-on-windows.html","loc":"http://leetschau.github.io/use-vim-on-windows.html"},{"title":"将Master分支上的最后一个Commit移动到Develop分支上","text":"代码库的开发分支是develop，修改代码前没有注意还处在master分支， 修改完并提交后才意识到提交到了master分支上， 需要将这个commit移动到develop分支上： git checkout develop git cherry - pick master git checkout master git reset --hard HEAD~ Ref: git help cherry-pick .","tags":"Tech","url":"http://leetschau.github.io/jiang-masterfen-zhi-shang-de-zui-hou-yi-ge-commityi-dong-dao-developfen-zhi-shang.html","loc":"http://leetschau.github.io/jiang-masterfen-zhi-shang-de-zui-hou-yi-ge-commityi-dong-dao-developfen-zhi-shang.html"},{"title":"Add GUI App into \"Run Application\" List on Ubuntu","text":"There are many GUI apps which started with a shell script, like MongoChef , or SmartGit . The most convenient way to run them in Ubuntu Unity is from \"Run Application\" dialog (shortcut: Alt-F2). Add them into the list with sudo ln -s /home/leo/apps/smartgit/bin/smartgit.sh smartgit . Start them with [Alt-F2, smartgit]. Note the link name shouldn't have extension, like \".sh\".","tags":"Tech","url":"http://leetschau.github.io/add-gui-app-into-run-application-list-on-ubuntu.html","loc":"http://leetschau.github.io/add-gui-app-into-run-application-list-on-ubuntu.html"},{"title":"微信桌面版的Linux解决方案","text":"网页版微信，目前(2016.1.28) 似乎自动退出的问题得到了解决， 页面截图使用Shutter，截图后右键选择\"Copy\"， 粘贴到微信网页版文本框中。","tags":"Tech","url":"http://leetschau.github.io/wei-xin-zhuo-mian-ban-de-linuxjie-jue-fang-an.html","loc":"http://leetschau.github.io/wei-xin-zhuo-mian-ban-de-linuxjie-jue-fang-an.html"},{"title":"Remove key from known_hosts","text":"If you use some virtual host with the same IP, you will always see messages below: $ ssh ansible @ console . newfairs - inc . com Warning : the ECDSA host key for ' console.newfairs-inc.com ' differs from the key for the IP address ' 192.168.100.201 ' Offending key for IP in / home / user / . ssh / known_hosts : 48 Matching host key in / home / user / . ssh / known_hosts : 39 Are you sure you want to continue connecting ( yes / no ) ? Or something like this: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING : POSSIBLE DNS SPOOFING DETECTED ! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ The RSA host key for foo - bar . net has changed , and the key for the corresponding IP address 127 . 0 . 0 . 1 is unchanged . This could either mean that DNS SPOOFING is happening or the IP address for the host and its host key have changed at the same time . Offending key for IP in / home / user / . ssh / known_hosts : 6 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING : REMOTE HOST IDENTIFICATION HAS CHANGED ! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY ! Notice the line \"Offending key for IP in /home/user/.ssh/known_hosts:48\" in the first example, and \".../known_hosts:6\" in the second, it shows the 48th (or 6th) line should be removed from $HOME/.ssh/known_hosts: sed - i '48d' ~/ . ssh / known_hosts Ref: Remove key from known_hosts","tags":"Tech","url":"http://leetschau.github.io/remove-key-from-known_hosts.html","loc":"http://leetschau.github.io/remove-key-from-known_hosts.html"},{"title":"Pretty-print JSON in Command Line","text":"Option 1: npm install - g json echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | json Option 2: echo '{\"foo\": \"lorem\", \"bar\": \"ipsum\"}' | python - m json . tool","tags":"Tech","url":"http://leetschau.github.io/pretty-print-json-in-command-line.html","loc":"http://leetschau.github.io/pretty-print-json-in-command-line.html"},{"title":"Add Executable into Windows 7's PATH","text":"To add stand-alone app notepad2 and ditto into the Windows system path, write below into file \"modifyPath.bat\", and run it \"as administrator\": setx / M PATH \"%PATH%;d:\\apps\\Ditto;d:\\apps\\notepad2_4.2\" Now you can press \"Win\" key, input \"ditto\" (or notepad), you can see \"Ditto\" (or notepad2) program. Open a console, run echo %PATH% , you can see Ditto and notepad2's folder has been added into PATH.","tags":"Tech","url":"http://leetschau.github.io/add-executable-into-windows-7s-path.html","loc":"http://leetschau.github.io/add-executable-into-windows-7s-path.html"},{"title":"mongo-connector Dump Error and Solutions","text":"When I synchronize data from a mongodb to a elasticsearch server with mongo-connector -m 192.168.100.3:27017 -t http://192.168.100.24:9200 -d elastic_doc_manager --admin-username root --password xxx , the mongo-connector process quit with the following logs in \"mongo-connector.log\" (all texts behind \"BulkIndexError\" are in the same line, I rearrange the line for easy to understand): 2016 - 01 - 09 19 : 05 : 52 , 457 [ CRITICAL ] mongo_connector . oplog_manager : 543 - Exception during collection dump Traceback ( most recent call last ) : File \"/usr/local/lib/python2.7/dist-packages/mongo_connector/oplog_manager.py\" , line 495 , in do_dump upsert_all ( dm ) ... BulkIndexError : ( u '10 document(s) failed to index.' , [ { u'index': { u'status': 400, u'_type': u'Fair', u'_id': u'4zWhZTJnqPCd2RK93', u'error': { u'caused_by': { u'reason': u'unknown property [latitude ] ', u' type ': u' illegal_argument_exception '}, u' reason ': u' failed to parse [ recurrence.location ] ', u' type ': u' mapper_parsing_exception '}, u' _index ': u' staging ' } } , ... ] When mongo-connector parse a document with _id: 4zWhZTJnqPCd2RK93 in Collection \"Fair\", it \"failed to parse [recurrence.location]\". From _index: staging , we know collection Fair is in mongodb database \"staging\". List all \"recurrence.location\" of each document in staging database: $ mongo 192 .168.100.3:27017/staging -u xxx -p xxx foba:PRIMARY> db.Fair.find ({} , { \"recurrence.location\" : 1 }) { \"_id\" : \"h7Lo3hGLrFGEb6BK7\" , \"recurrence\" : [ { \"location\" : { \"latitude\" : 22 .53, \"longitude\" : 114 .06 } } ] } { \"_id\" : \"Kd2e9w58P7vAScLDL\" , \"recurrence\" : [ { \"location\" : \"\" } ] } { \"_id\" : \"4zWhZTJnqPCd2RK93\" , \"recurrence\" : [ { \"location\" : { \"latitude\" : 22 .53, \"longitude\" : 114 .06 } } ] } It's now clear that the exception in synchronization is caused by different structure of \"recurrence.location\". To guarantee mongo-connector synchronizing successfully, you must keep all document in a collection share the same schema.","tags":"Tech","url":"http://leetschau.github.io/mongo-connector-dump-error-and-solutions.html","loc":"http://leetschau.github.io/mongo-connector-dump-error-and-solutions.html"},{"title":"Remove Duplicate zsh History","text":"To remove duplicate items in fzf prompt, add the following lines into ~/.zshrc: setopt EXTENDED_HISTORY setopt HIST_EXPIRE_DUPS_FIRST setopt HIST_IGNORE_DUPS setopt HIST_IGNORE_ALL_DUPS setopt HIST_IGNORE_SPACE setopt HIST_FIND_NO_DUPS setopt HIST_SAVE_NO_DUPS setopt HIST_BEEP Ref: Preventing duplicate lines in the history https://github.com/mattjj/my-oh-my-zsh/blob/master/history.zsh zsh options","tags":"Tech","url":"http://leetschau.github.io/remove-duplicate-zsh-history.html","loc":"http://leetschau.github.io/remove-duplicate-zsh-history.html"},{"title":"Ansible Notes","text":"使用源代码版本的ansible 按照 Running From Source , 首先安装依赖包 ( sudo pip install paramiko PyYAML Jinja2 httplib2 six ), clone ansible的github repo, 然后配置环境变量，就可以使用ansible的各个版本了。 git clone git : // github . com / ansible / ansible . git --recursive $HOME/apps 需要使用ansible时，运行： source $ HOME / apps / ansible / hacking / env - setup 默认是devel分支，如果要切换到稳定版分支，首先列出所有分支： git branch -ra ， 然后切换到此分支上： cd $ HOME / apps / ansible git checkout origin / stable - 2 . 0 . 1 source $ HOME / apps / ansible / hacking / env - setup 更新代码库： cd $ HOME / apps / ansible git pull --rebase git submodule update --init --recursive lookup ini plugin 通过pip安装的ansible是1.9.4版本，这一版没有lookup ini plugin. 在 The INI File Lookup 下可以看到 \"New in version 2.0.\". 运行下面的task时， - debug: msg=\"User in integration is {{ lookup ( 'ini' , 'user section=integration file=users.ini' ) }} \" 会报错： lookup plugin (ini) not found 用pip安装后，所有的lookup plugin的安装目录是 /usr/local/lib/python2.7/dist-packages/ansible/runner/lookup_plugins 下面没有ini.py. 解决方法见上节使用源代码版本的ansible. 有了ini lookup plugin, 可以在ansible的roles/ /tasks/main.yml中 引用ansible变量和外部ini文件： - name: download codes to laptop local_action: > command {{ lookup ( 'ini' , 'GIT_REPO section=' + inventory_hostname + ' file=' + env_settings ) }} {{ local_repo }} 相关的文件： cat $ ANSIBLE_PRJ_HOME / roles / deploy / vars / main . yml repo_base : \"~/temp\" timestamp : \"{{ ansible_date_time.epoch }}\" repo_name : \"{{ inventory_hostname }}-{{ timestamp }}\" local_repo : \"{{ repo_base }}/{{ repo_name }}\" target_branch : \"develop\" ext_path : \"{{ ansible_env.HOME }}/{{ repo_name }}\" nodejs_bin_path : \"{{ ansible_env.PATH }}:/opt/node-v0.10.40-linux-x64/bin\" app_settings : \"~/docs/website/v3/settings.json\" env_settings : \"~/docs/website/v3/serverEnv.ini\" cat ~/ docs / website / v3 / serverEnv . ini [ common ] PORT = 3000 [ p21 . newfairs - inc . com ] MONGO_URL = mongodb : //dba:dba@192.168.100.3:27017/production ROOT_URL = http : //www.newfairs.net GIT_REPO = git clone ssh : //git@git.newfairs-inc.com/diffusion/NEWFAIRS/newfairs.git [ p22 . newfairs - inc . com ] MONGO_URL = mongodb : //dba:dba@192.168.100.3:27017/production ROOT_URL = http : //www.newfairs.net GIT_REPO = git clone ssh : //git@git.newfairs-inc.com/diffusion/NEWFAIRS/newfairs.git [ beta - app . newfairs - inc . com ] MONGO_URL = mongodb : //dba:dba@192.168.100.3:27017/production ROOT_URL = http : //beta.newfairs.com GIT_REPO = git clone ssh : //git@git.newfairs-inc.com/diffusion/NEWFAIRS/newfairs.git [ console . newfairs - inc . com ] MONGO_URL = mongodb : //dba:dba@192.168.100.3:27017/console ROOT_URL = http : //console.newfairs-inc.com GIT_REPO = git clone ssh : //git@git.newfairs-inc.com/diffusion/CONSOLE/newfairs-console.git","tags":"Tech","url":"http://leetschau.github.io/ansible-notes.html","loc":"http://leetschau.github.io/ansible-notes.html"},{"title":"Wordpress中文文章详情页无法打开问题","text":"Wordpress Dashboard -> Settings -> Permalinks -> Common Settings: Plain（或者Numeric）。","tags":"Tech","url":"http://leetschau.github.io/wordpresszhong-wen-wen-zhang-xiang-qing-ye-wu-fa-da-kai-wen-ti.html","loc":"http://leetschau.github.io/wordpresszhong-wen-wen-zhang-xiang-qing-ye-wu-fa-da-kai-wen-ti.html"},{"title":"青云的负载均衡器","text":"青云把负载均衡器抽象成了三个概念：一是负载均衡器本身；二是监听器，三是后端主机。 负载均衡器分为 公网 和 私有网络 两种类型， 前者可以同时关联多个公网IP，但它绑定的后端只能是公网服务器/私有网络路由器/公网IP， 后者直接与某个私有网络关联，后端是这个私有网络中某台服务器的某端口。 公网 类型的负载均衡器可以通过路由器的端口映射实现与私有网络某主机端口连接。 监听器代表负载均衡器对外提供的协议类型和端口； 后端主机页面上的\"端口\"指的是后端主机上服务进程监听的端口。 只要用户创建负载均衡器、监听器、主机，就可以在界面里完成负载均衡器的所有操作。 一条转发策略，代表一条从域名到主机和端口的关联规则，所以如果是同一个服务有多个域名， 可以配置在同一个转发策略里。 如果是两个不同的服务，即使是同一IP不同端口，也要配置在不同的转发策略里。 示例 添加第一个服务 需要将内网中的一台服务器作为beta服务器， 外部用户可以通过域名 beta.nufair.com 从公网访问，实现方法： 在青云控制台 [计算与网络 -> 公网IP]中购买IP地址 nufairIP: 123.234.34.5 在域名 (nufair.com) DNS配置中增加一条A记录：beta -> 123.234.34.5 新建 [路由器] nufairRouter, 绑定nufairIP; 新建 [私有网络] nufairNet, 绑定nufairRouter; 新建 [主机] beta-app.nufair.com, IP: 192.168.100.121, 加入 nufairNet; 在 beta-app.nufair.com 中部署应用，服务监听端口 3000; 新建 [负载均衡器] nufairLB, IP：192.168.100.4, 绑定nufairNet; [nufairRouter -> 端口转发]中添加规则 http-route: tcp 80 -> 192.168.100.4 80 [nufairRouter -> 基本属性]中点击[防火墙]，在其中增加规则：允许80端口下行； [nufairLB -> 转发策略] 中新建转发策略: 名称：app-beta 匹配方式：匹配任意规则 及其规则： 规则类型: 按域名转发 规则内容: beta.nufair.com nufairLB 中新建一个[监听器] http-listener, 为其[添加后端]， 名称：beta 网络：受管私有网络 主机：192.168.100.121 端口：3000 创建完成后，在[转发策略]一栏中点击[绑定]，选择[app-beta]. 添加第二个服务 需要将内网中另一台服务器作为生产服务器，通过域名nufair.com和www.nufair.com访问。 青云控制台中购买一台主机，IP: 192.168.100.21, 在上面部署生产应用，服务监听端口3000; 在域名 (nufair.com) DNS配置中增加两条A记录： @ -> 123.234.34.5 www -> 123.234.34.5 [nufairLB -> 转发策略] 中新建转发策略: 名称：app-production 匹配方式：匹配任意规则 及其规则： 规则类型: 按域名转发 规则内容: nufair.com www.nufair.com nufairLB -> http-listener -> 添加后端 : 名称：prod 网络：受管私有网络 主机：192.168.100.21 端口：3000 创建完成后，在[转发策略]一栏中点击[绑定]，选择[app-production]. 说明： 转发策略的规则里，如果是按域名转发，注意一级域名，如nufair.com， 它实际上是 *.nufair.com ，当监听器的某个后端绑定了这样的规则后， 它后面的后端再绑定这个一级域名下的二级域名将无效， 例如将test.nufair.com指向100.21服务器的4500端口， [nufairLB -> 转发策略] 中新建转发策略: 名称：app-test 匹配方式：匹配任意规则 及其规则： 规则类型: 按域名转发 规则内容: test.nufair.com 名称：test 网络：受管私有网络 主机：192.168.100.21 端口：4500 创建完成后，在[转发策略]一栏中点击[绑定]，选择[app-test]. 应用修改后，test.nufair.com仍然指向3000端口上的服务， 原因是它作为nufair.com的二级域名，被app-production中的一级域名覆盖了， 解决方法是，从app-production中去掉\"nufair.com\". 修改负载均衡器IP地址后需要注意： 要相应修改路由器中端口转发中目标（也就是负载均衡器）的IP地址。 参考： 青云QingCloud：云上最强负载均衡服务 负载均衡器指南","tags":"Tech","url":"http://leetschau.github.io/qing-yun-de-fu-zai-jun-heng-qi.html","loc":"http://leetschau.github.io/qing-yun-de-fu-zai-jun-heng-qi.html"},{"title":"Move Some Commit from One Repo to Another","text":"We need move all commit between origin/develop to develop in an old repo to a new repo. Export all commits in old repo: cd / path / to / old - repo git format - patch origin / develop .. develop Now you have many .patch files in old repo. Each patch file represents a commit between origin/develop and develop. Apply these patches in new repo: cd / path / to / new - repo git checkout develop git am / path / to / old - repo /*.patch Ref: Getting started with git-am","tags":"Tech","url":"http://leetschau.github.io/move-some-commit-from-one-repo-to-another.html","loc":"http://leetschau.github.io/move-some-commit-from-one-repo-to-another.html"},{"title":"WebSocket Error 400 in Meteor App","text":"I deploy a Meteor app, and proxy it with nginx. When connect to the app server, there's a websocket error: WebSocket connection to 'ws://prod-app-192-168-100-21.newfairs-inc.com/sockjs/311/ud_4e5xf/websocket' failed: Error during WebSocket handshake: Unexpected response code: 400 Solution: cat / etc / nginx / sites-enabled / newfairs server { server_name prod-app-192-168-100-21.newfairs-inc.com ; location / { proxy_pass http : // localhost : 3000 / ; proxy_http_version 1.1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection \"upgrade\" ; } } Ref: Meteor WebSocket handshake error 400 with nginx WebSocket proxying http://stackoverflow.com/questions/30171179/meteor-websocket-connection-to-ws-websocket-failed-error-during-websock","tags":"Tech","url":"http://leetschau.github.io/websocket-error-400-in-meteor-app.html","loc":"http://leetschau.github.io/websocket-error-400-in-meteor-app.html"},{"title":"Install Wordpress on Ubuntu 14.04","text":"MySQL database is installed on the host when installing Phabricator. We use this database as backend of our new Wordpress service. $ sudo useradd - m - s / bin / bash wordpress $ sudo su - wordpress $ mysql - u root - p ' NewFairs0910 ' > CREATE DATABASE wordpress ; > CREATE USER nfadmin @ localhost IDENTIFIED BY ' nfMysQL2015 ' ; > GRANT ALL PRIVILEGES ON wordpress . * TO nfadmin @ localhost ; > FLUSH PRIVILEGES ; > exit $ wget http : // wordpress . org / latest . tar . gz $ tar zxf latest . tar . gz $ sudo apt - get update $ sudo apt - get install php5 - gd libssh2 - php $ cd ~/ wordpress $ cp wp - config - sample . php wp - config . php Modify wp-config.php according to above values for mysql: define ( 'DB_NAME' , 'wordpress' ); define ( 'DB_USER' , 'nfadmin' ); define ( 'DB_PASSWORD' , 'nfMysQL2015' ); define ( 'DB_HOST' , 'localhost' ); Create file /etc/apache2/sites-available/wordpress.conf: <VirtualHost *:80 > ServerName cms.newfairs-inc.com DocumentRoot /home/wordpress/wordpress </VirtualHost> <Directory \"/home/wordpress/wordpress\" > Require all granted </Directory> Enable it: cd / etc / apache2 / sites - enabled ln - s / etc / apache2 / sites - available / wordpress . conf wordpress . conf Then restart apache server: sudo service apache2 restart . Open \"cms.newfairs-inc.com\" in browser, start wordpress installation. website title : Newfairs CMS username : nfcms pwd : nEwfAIrsAt6102 Note: A \"Forbidden. You don't have permission to access /\" error appears without \"Require all granted\". After installation, install wordpress plugin \"WordPress REST API (Version 2)\" with wp-cli.phar : curl - O https : // raw . githubusercontent . com / wp - cli / builds / gh - pages / phar / wp - cli . phar chmod 755 wp - cli . phar mv wp - cli . phar / usr / local / bin / wp wp --info sudo su - wordpress cd wordpress wp plugin list wp plugin search rest wp plugin install rest - api Note: We can't install plugin \"WordPress REST API (Version 2)\" through \"Plugin -> Add New\" in Wordpress web page. It need ssh/ftp username and password. And the ssh port must be 22. While our ssh port is 222. Ref: https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-14-04 Reset Wordpress Admin password su - wordpress cd $ HOME / wordpress # which is $ WP_HOME wp user list # where you can find the administrator ' s name is nfcms wp user update nfcms --user_pass=nEwfAIrsAt6102 Ref: Resetting Your Password","tags":"Tech","url":"http://leetschau.github.io/install-wordpress-on-ubuntu-1404.html","loc":"http://leetschau.github.io/install-wordpress-on-ubuntu-1404.html"},{"title":"A Lightweight Message Queue","text":"RSMQ RSMQ is a lightweight message queue based on Redis. Setup Redis Server on Docker Start Redis server on docker: docker run --name myredis -d redis ------- A Connect to the server with: docker run -it --link myredis:redis --rm redis bash -c 'redis-cli -h redis' ------- ----- ----- A B B or the full version: docker run -it --link myredis:redis --rm redis bash -c 'exec redis-cli -h \"$REDIS_PORT_6379_TCP_ADDR\" -p \"$REDIS_PORT_6379_TCP_PORT\"' . Now in redis console, use info to get the server's version; keys * to list all keys; set mykey \"hello\" to add a key/value pair. get mykey to fetch the key's value. Note: Names labled with \"A\" is the container's name of Redis server. Names labled with \"B\" is the name alias of Redis server container used by Redis client container. Setup Redis on Metal Host Install Redis on Ubuntu 14.04 with: apt-get install -y python-software-properties # optional add-apt-repository -y ppa:rwky/redis apt-get update apt-get install -y redis-server Install rsmq: in project root folder, run npm install rsmq ; Install rsmq-cli: npm install -g rsmq-cli ; rsmq config ls rsmq create - q payment // create a new queue named \" payment \" rsmq ls // list all queues rsmq stats - q payment // print stats of queue \" payment \" rsmq send \" pay $1000 \" - q payment // send a message to \" payment \" rsmq receive - q payment // receive a message from \" payment \"","tags":"Tech","url":"http://leetschau.github.io/a-lightweight-message-queue.html","loc":"http://leetschau.github.io/a-lightweight-message-queue.html"},{"title":"Linux上的API文档搜索工具","text":"Devdocs Mac上的Dash是一款很方便的API文档搜索工具，经过一番查找， 发现了 devdocs 这个很好的替代品。 devdocs是一款浏览器插件，可以安装在Chrome或者Firefox上， 所以不论那种操作系统，只要能安装这两款浏览器就可以使用它。 支持地址栏搜索：在地址栏输入\"dev\"，出现\"devdocs.io\"自动补全时，按Tab键， 再输入\"meteor createuser\"并回车，就可以直接跳转到Meteor的 Accounts.createUser()方法上。 支持离线下载和自动更新，有夜间模式。 常用的快捷键包括： ESC: 重新搜索； Tab: 二次筛选，例如输入javascript ，再输入map，则只在JavaScript中寻找map. Enter: 执行搜索； 完整的快捷键和说明文档见 Help . Zeal 2019.1.28: 通过PPA 方式安装的 Zeal 0.6.1 在 Ubuntu 16.04 i3wm 下运行良好， Zeal 使用 Tab 补全，例如要搜索 Haskell 的 filter 函数的 API， 先输入 h<Tab> ，自动被补全为 haskell: ，再输入 filter 就定位到了目标函数。 当需要搜索另一个函数时，按一次 ESC 退出当前函数，但仍在当前语言内， 再按一次 ESC 退出当前语言。 类似 'Haskell: h' 这样的Tab自动补全简写，还有： 'Markdown: m' 'Pandas: p' 'Bash: b' 'Vim: v' 'R: r' 'Python: py' 增加新的Docsets的方法：Tools -> Docsets. 可以在 Edit > Perferences 下切换为 dark theme，调整字体、字号，配置网络代理服务器等。 可以关闭至系统托盘，默认使用 Meta-z （即 Win-z）键从托盘区激活程序窗口。 不使用 PPA，直接 apt install 在 Ubuntu 16.04 下安装的是 0.2.1. 2015.11: 2015.11.20发布的Zeal v0.2.1在Ubuntu 14.04 Unity下运行正常， 但下载一些docset后无法启动，原因不明。","tags":"Tech","url":"http://leetschau.github.io/linuxshang-de-apiwen-dang-sou-suo-gong-ju.html","loc":"http://leetschau.github.io/linuxshang-de-apiwen-dang-sou-suo-gong-ju.html"},{"title":"Use Postman as the RESTful Tools","text":"Find Postman in chrome web store. Install it. Open \"chrome://apps\" in chrome, click Postman's icon. That's it. To send a post with Postman,","tags":"Tech","url":"http://leetschau.github.io/use-postman-as-the-restful-tools.html","loc":"http://leetschau.github.io/use-postman-as-the-restful-tools.html"},{"title":"MongoDB Client","text":"MongoChef MongoChef is a cross platform MongoDB GUI client. Its free version only for non-commercial use. It's the best choice I found so far. RockMongo Install and Setup RockMongo is a PHP MongoDB client. It can't update complicated (nested) data structure, useless. Install bitnami Nginx Stack; Run $STACK_HOME/php/bin/pecl install mongo ; Add extension=mongo.so into $STACK_HOME/php/etc/php.ini ; Run mkdir $STACK_HOME/apps/rockmongo ; Download rockmongo-1.1.7.zip, extract to $STACK_HOME/apps/rockmongo ; and mv rockmongo-1.1.7 htdocs ; In folder $STACK_HOME/apps , run cp -r demo/conf rockmongo/ ; In folder $STACK_HOME/apps , replace all demo in rockmongo/conf/nginx-prefix.conf to rockmongo ; Add include \"/home/leo/apps/nginxstack-1.9.7-0/apps/rockmongo/conf/nginx-prefix.conf\"; into $STACK_HOME/nginx/conf/bitnami/bitnami-apps-prefix.conf ; Modify mongodb connection parameters in $STACK_HOME/apps/rockmongo/htdocs/config.php : modify \"mongo_name\", \"mongo_host\" and \"mongo_port\" as your target value, modify \"mongo_auth\" and \"ui_hide_system_collections\" to \"true\". Start nginx server: $STACK_HOME/ctlscript.sh start ; Open \"localhost:8080/rockmongo\" in your browser, login with your mongodb auth params. You can add a new mongodb with codes below in apps/rockmongo/htdocs/config.php: $ MONGO [ \"servers\" ][ $ i ][ \"mongo_name\" ] = \"AliDB\" ; $ MONGO [ \"servers\" ][ $ i ][ \"mongo_host\" ] = \"123.57.188.18\" ; $ MONGO [ \"servers\" ][ $ i ][ \"mongo_port\" ] = \"15515\" ; $ MONGO [ \"servers\" ][ $ i ][ \"mongo_auth\" ] = true ; $ MONGO [ \"servers\" ][ $ i ][ \"ui_hide_system_collections\" ] = true ; $ i ++ ; And validate with ./ctlscript.sh restart nginx . Note: The nginx listening port (here is 8080) is defined in $STACK_HOME/nginx/conf/bitnami/bitnami.conf ; If you logged in with a previous user in browser, click \"logout\" button in upper-right corner to logout. Specify target username, passowrd and database in login page. Usage You have to write regex query in this way: { \"chnName\": { \"$regex\": \"98\" } } , and it didn't accept this form: { \"chnName\": /98/ } . Specify which fields will be shown in the results at the \"Fields\" dropdown list below the query box. UMongo UMongo can only setup 1 connection, and if the user is not root, it will give a auth failed error. MongoVUE Only for Windows. I tested v1.6.9 on Windows 7 64bit. It can't connect to mongo replica set. (Always auth failed). When connected with a local mongodb server, searching and \"copy as json text\" function is ok. But crash and quit when copy a part in a document.","tags":"Tech","url":"http://leetschau.github.io/mongodb-client.html","loc":"http://leetschau.github.io/mongodb-client.html"},{"title":"Clear Chrome DNS Cache","text":"Problem: When open \"cms.nzw.com\" with Chrome, it always jump to \"localhost\". But open the same address in Firefox, it works good. Possible reason: Chrome cache some DNS or sockets information, which should be cleaned. Solution: Open \"chrome://net-internals/#dns\" in Chrome, click \"Clear host cache\". Open \"chrome://net-internals/#sockets\", click \"Close idle sockets\" and \"Flush socket pools\". Restart Chrome. Ref: How to Clear the Google Chrome DNS cache on Windows","tags":"Tech","url":"http://leetschau.github.io/clear-chrome-dns-cache.html","loc":"http://leetschau.github.io/clear-chrome-dns-cache.html"},{"title":"Linux的图形化Git客户端","text":"这里的客户端不包括只有浏览功能的viewer，比如gitk, gitg等。 下面两个客户端都需要安装JRE. 不需要安装，解压后直接使用。 GitEye 需要在repo里增加一个.project文件，然后在.gitignore里加入这个文件，不够clean。 SmartGit 商业应用付费，非商业用途免费；","tags":"Tech","url":"http://leetschau.github.io/linuxde-tu-xing-hua-gitke-hu-duan.html","loc":"http://leetschau.github.io/linuxde-tu-xing-hua-gitke-hu-duan.html"},{"title":"Move Window Between Multiple Screens via Tmux","text":"When developing in terminal you often have to open several Tmux windows at the same time: server: mongod, Meteor, Elasticsearch, etc... client: mongo, elasticsearch, etc... editor: template.html, template.js, router.js, server.js, etc... In most cases, you edit in editor window, save the file, switch to server window to see the result, switch back to editor window for editing again... Now you have the second screen, say, a Windows laptop, ssh to your Linux machine via MobaXterm or Kitty. It will be more efficient if you can put the server window on the screen of the Windows machine, and keep editing on your Linux machine screen, for saving you from so many annoying switching between the screens. It's easy for Tmux to achieve this. Start a new session on your Linux machine, named as you like, for now, \"search\". Start a new session in the terminal of the second screen named v (\"viewer for short). If you want to see the server and editor windows at the same time, switch to the server window and run link-window -t v (see note 1 below for details). Now you can switch back to the editor window, while keep server window on the other screen. To cancel the link between the sessions, switch to server window and run unlink-window -t v . Note 1: If you define a \"command-prompt\" shortcut in ~/.tmux.conf: bind -n M-a command-prompt , run tmux command linkw -t v means: press \"M-a\", input lin<Tab> -t v then press . Note 2: link-window shares a window between multiple sessions. To move a window to another session, switch to the server window and run tmux command move-window -t v . To move it back, run move-window -s v:shell , where v is the target session name defined by tmux new -s v .","tags":"Tech","url":"http://leetschau.github.io/move-window-between-multiple-screens-via-tmux.html","loc":"http://leetschau.github.io/move-window-between-multiple-screens-via-tmux.html"},{"title":"Synchronize Data From MongoDB to Elasticsearch","text":"Your mongo replica set and elasticsearch are hosted on 2 servers. The mongo server is on \"mip:mport\". The ES server is on \"esip:esport\". On another server, install mongo-connector with pip install mongo-connector . If there are some errors, it may be caused by absence of gcc. On Ubuntu, install them with sudo apt-get install build-essential python-dev . mongo - connector - m mip : mport - t esip : esport - d elastic_doc_manager --admin-username root --password rootPwd That's it! Now when you insert documents into MongoDB, you can see it on elasticsearch. We've studied Mongo River and Mongoosatic, neither is better than this. Note 1 (2015.11.15): 阿里云服务器上，用普通用户es启动es服务( bin/elasticsearch )，同一用户启动mongo-connector后，报 \"AttributeError: 'IndicesClient' object has no attribute 'delete_mapping'\"错误， es版本为2.0，mongo-connector版本为2.1，将es版本改为1.7，mongo-connector改为1.3后， 仍然出现这一错误，原因是MongoDB中删除了test库中的一个Collection，但ES中仍然有，就会出现这个错误， 解决方法是清空ES的test重新同步一遍： curl -XDELETE http://123.57.188.18:9322/test . Ref: https://github.com/mongodb-labs/mongo-connector/issues/349 Note 2: Use root to sync is unsafe. We create an user with \"clusterManager\" role to do this work. Login with root, and run: use admin db . createUser ( { user : \"clustermgr\" , pwd : \"cmpwd\" , roles : [ \"clusterManager\" ] } ) But run the command mongo-connector -m 119.254.211.28:15515 -t localhost:9200 -d elastic_doc_manager --admin-username clustermgr --password cmpwd will be the error OperationFailure: database error: not authorized for query on local.oplog.rs .","tags":"Tech","url":"http://leetschau.github.io/synchronize-data-from-mongodb-to-elasticsearch.html","loc":"http://leetschau.github.io/synchronize-data-from-mongodb-to-elasticsearch.html"},{"title":"Elasticsearch River for MongoDB","text":"According to Deprecating Rivers , river is not supported any more. Mongo River http://backslash451.github.io/articles/Running-ElasticSearch-with-MongoDB-and-Kibana/ Buy a mongodb on QingCloud . Connect to database with mongo 119.254.211.28:15515 --authenticationDatabase admin -u root -p nodeJS@2015 . and run rs.status() to verify the replica set is working. Setup Elasticsearch See note \"Elasticsearch Notes\". Setup Kibana See note \"Kibana Notes\". Install River Plugin Follow ichardwilly98/elasticsearch-river-mongodb . Run bin/plugin install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.9 at $ES_HOME. List plugins: bin/plugin list . Get help: bin/plugin -h . When install in 2.0.0, there is an error: ERROR: Could not find plugin descriptor 'plugin-descriptor.properties' in plugin zip . For now, use elasticsearch 1.7.3 with river. List plugins in v1.7.3: sudo /usr/share/elasticsearch/bin/plugin --list .","tags":"Tech","url":"http://leetschau.github.io/elasticsearch-river-for-mongodb.html","loc":"http://leetschau.github.io/elasticsearch-river-for-mongodb.html"},{"title":"Session Management in Web Browser","text":"Session is a group of tabs, which is relevant to a specific problem, for example: how to use ElasticSearch with MongoDB, or background information about TV show \"The Wire\". Firefox Save: right click on the tab bar and select \"Bookmark All Tabs\" (Shift + Ctrl + D); Restore: click \"Show your bookmarks\" button on toolbar, navigate to the folder and click \"Open all Tabs\" at the bottom. Chrome Install extension \"Session Buddy\". It will help you to save and restore all open tabs as a \"Session\". To sync sessions between browsers of different hosts, use \"Settings -> Export\" to save the session into a json file, copy this file to the target host, use \"Settings -> Import\" to import the session.","tags":"Tech","url":"http://leetschau.github.io/session-management-in-web-browser.html","loc":"http://leetschau.github.io/session-management-in-web-browser.html"},{"title":"将Meteor应用完整从1.2版本降级到1.1版本","text":"当前版本的mup不支持Meteor 1.2，对1.1支持很好。 一位开发者用 meteor update 升级了Meteor,然后push到代码库中， 其他开发者同步代码后发现无法使用mup部署， 这个问题不能简单地使用 meteor --releae 1.1 处理， 因为从1.1到1.2，Metoer很多核心包的版本发生了变化，并增删了很多包， meteor --release 1.1 只能还原Meteor自身版本， 无法还原核心包，必须将.meteor目录下所有文件复原。 使用git的patch功能可以方便地实现针对一个目录的复原。 首先找到包含正确文件（旧Meteor版本和包定义）的commit，例如 15c9f125630， 然后找到要复原的目标commit，一般是develop branch的HEAD，例如 f13b84f6c55， 做一个反向patch： git diff f13b84f6c55 15c9f125630 .meteor > reverseDotMeteor.patch ; 正常的 git diff 是旧版本在前，新版本在后，这样生成的patch反映的是文件内容随着时间发生的改变， 这里将新的commit放在前面，生成的patch就能起到回到过去的作用。 checkout目标commit并加载patch: git apply reverseDotMeteor.patch . 测试mup是否能正常工作，如果能，提交修改。 参考：http://stackoverflow.com/questions/1191282/how-to-see-the-changes-between-two-commits-without-commits-in-between","tags":"Tech","url":"http://leetschau.github.io/jiang-meteorying-yong-wan-zheng-cong-12ban-ben-jiang-ji-dao-11ban-ben.html","loc":"http://leetschau.github.io/jiang-meteorying-yong-wan-zheng-cong-12ban-ben-jiang-ji-dao-11ban-ben.html"},{"title":"Kibana Notes","text":"Following Getting Started with Kibana . Setup Kibana Download kibana tar package file (kibana-4.2.0-linux-x64.tar.gz) and extract to $KIBANA_HOME. Modify $KIBANA_HOME/config/kibana.yml, uncomment elasticsearch.url: \"http://localhost:9200\" (if elasticsearch server is on localhost). Start server with bin/kibana . Import Data Import accounts with curl -XPOST 'localhost:9200/accounts/account/_bulk?pretty' --data-binary @accounts.json instead of curl -XPOST 'localhost:9200/bank/_bulk?pretty' --data-binary @accounts.json . curl - XPOST 'localhost:9200/accounts/account/_bulk?pretty' --data-binary @accounts.json head - 1 accounts . json { \"index\" :{ \"_id\" : \"1\" }} curl - XPOST 'localhost:9200/shakespeare/_bulk?pretty' --data-binary @shakespeare.json head - 1 shakespeare . json { \"index\" :{ \"_index\" : \"shakespeare\" , \"_type\" : \"act\" , \"_id\" : 0 }} So if the index and type is not defined in json file, it should be defined when imported with curl.","tags":"Tech","url":"http://leetschau.github.io/kibana-notes.html","loc":"http://leetschau.github.io/kibana-notes.html"},{"title":"Validate Data Defined by Simple-Schema","text":"// the object need to be validate according to the schema: var fair = { ... }; var mycon = NewfairsCore.Schemas.Fair.namedContext(); // this method returns true if the object is valid according to the schema // or false if it is not: mycon.validate(fair); // this method lists all invalid keys: mycon.invalidKeys();","tags":"Tech","url":"http://leetschau.github.io/validate-data-defined-by-simple-schema.html","loc":"http://leetschau.github.io/validate-data-defined-by-simple-schema.html"},{"title":"Play Meteor with Elasticsearch","text":"Install elasticsearch; Follow the instructions in meteor-elasticsearch Choose plugin version according to https://github.com/richardwilly98/elasticsearch-river-mongodb. Get elasticsearch version: curl -XGET 'localhost:9200' So mongo river plugin version 2.0.9 is installed: cd / usr / share / elasticsearch sudo bin / plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0 sudo bin / plugin --remove com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0 sudo bin / plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.9 Start elasticsearch server: sudo /usr/share/elasticsearch/bin/elasticsearch --default.path.conf=/etc/elasticsearch/ Create a Meteor app with external mongodb connection, and verify it; Add ES package: meteor add bigdata:elasticsearch ; Add the setting file \"settings.json\"; Start the meteor server: MONGO_URL=\"mongodb://user:pwd@ip:port/db\" meteor --settings settings.json Problem: the ES variable is undefined.","tags":"Tech","url":"http://leetschau.github.io/play-meteor-with-elasticsearch.html","loc":"http://leetschau.github.io/play-meteor-with-elasticsearch.html"},{"title":"Customize Dell Ubuntu Laptop Turn Off Screen and Lock","text":"In [System Settings -> Brightness & Lock], set \"Turn screen off when inactive for\" to \"Never\" and turn off \"Lock\".","tags":"Tech","url":"http://leetschau.github.io/customize-dell-ubuntu-laptop-turn-off-screen-and-lock.html","loc":"http://leetschau.github.io/customize-dell-ubuntu-laptop-turn-off-screen-and-lock.html"},{"title":"Fix GUI App Start Failure With No Display Found","text":"When running gitg in Ubuntu terminal, I got errors below: (gitg:29283): WARNING : Could not open X display (gitg:29283): Gtk-WARNING **: cannot open display: localhost:10.0 Solution: check you $DISPLAY value, if it's not \":0.0\", run export DISPLAY=:0.0 . Ref: http://askubuntu.com/questions/438451/could-not-open-display-null-error-how-can-i-fix-this To test keycode of the same key in different OS, I ssh to my Linux laptop with Kitty on Windows. When I run xev , I got an error: xev: unable to open display '' . Open GUI of Remote Server on Client's Screen I ssh to a my Ubuntu laptop with ssh -X -v user@192.168.1.4 or ssh -Y -v user@192.168.1.4 and run DISPLAY=:0.0 gedit , the gedit window opens on the screen of the laptop. The reason is in the output of who : $ who leo :0 2018 -01-15 07 :19 ( :0 ) leo pts/8 2018 -01-15 07 :20 ( :0 ) leo pts/1 2018 -01-15 07 :53 ( 192 .168.1.14 ) You can see the display (:0) attached to pts/8 . While there's no display attached to the remotely connected client pts/1 . There's an environment variable XAUTHORITY to be set as well.","tags":"Tech","url":"http://leetschau.github.io/fix-gui-app-start-failure-with-no-display-found.html","loc":"http://leetschau.github.io/fix-gui-app-start-failure-with-no-display-found.html"},{"title":"Git Submodule","text":"Git submodule as Meteor package We have a parent (container) Meteor application \"niufour\", now we want to add a new package \"nf-search\" to niufour. Make sure if packages/ has been added into .gitignore. Push the nf-search (outside of niufour folder) to remote repo, here we use a Phabricator server, with address . Under the root of niufour, run: git submodule add < remote - repo - url > packages / nf - search While \"packages/\" is always in niufour/.gitignore, you should add module with: git submodule add - f < remote - repo - url > packages / nf - search The common form is: git submodule add <remote-repo-url> <local-path> , where the is where you want to put your submodule. To add it into the niufour package list, add nfcommerce:nf-search into file /.meteor/packages. After your partner push new codes into the repo, run commands below to synchronize: git pull origin develop git submodule update --init --recursive Use git submodule status to list current commit of each subpackage. Keep demo state in parent project A demo need both codes and data at the exact state of the verified time. So if your project has not submodules, use commit and tag to record the demo state. Otherwise, you can use commits in parent project to record demo state. In the example above, suppose niufour has another submodule \"nf-core\". In the development process, commit on \"develop\" branch in each submodule, without commit on niufour. Only when PM (project manager) verified the demo, and all developers have committed and pushed in each submodule, PM commits, tags and pushes in parent project by himself: cd / path / to / niufour git add - A git commit - m \" this is for demo of 2015.11.04 \" git tag \" demo-2015.11.04 \" git push origin develop Then pm dump the database ( mongodump for MongoDB) to a folder with the same name of the tag name (here it's \"demo-2015.11.04\"). At the demo day, the PM restore the data into a new database ( mongorestore for example), then run commands below to restore the codes for demo: git clone < url - of - niufour > git checkout demo - 2015 . 11 . 04 git submodule init git submodule update Note: To demonstrate the usage of git submodule, use example in \"Git权威指南\", 23.1 ~ 23.3, by 蒋鑫.","tags":"Tech","url":"http://leetschau.github.io/git-submodule.html","loc":"http://leetschau.github.io/git-submodule.html"},{"title":"Elasticsearch Notes","text":"Server setup Download tar package of ealsticSearch and install: aptitude update aptitude install openjdk - 7 - jdk wget https : // download . elasticsearch . org / elasticsearch / release / org / elasticsearch / distribution / tar / elasticsearch / 2 . 0 . 0 / elasticsearch - 2 . 0 . 0 . tar . gz tar zxf elasticsearch - 2 . 0 . 0 . tar . gz cd elasticsearch - 2 . 0 . 0 bin / elasticsearch Or you can install it as a service with deb package wget https : // download . elastic . co / elasticsearch / elasticsearch / elasticsearch - 1 . 7 . 3 . deb sudo dpkg - i elasticsearch - 1 . 7 . 3 . deb sudo / etc / init . d / elasticsearch restart Start in foreground: sudo /usr/share/elasticsearch/bin/elasticsearch --default.path.conf=/etc/elasticsearch/ . If you omit the option \"--default.path.conf\", you'll get an error: org.elasticsearch.ElasticsearchException: Failed to load logging configuration . When you want start the 2nd node in the same machine, always start it this way with the same command above. Or run it in background: /usr/share/elasticsearch/bin/elasticsearch -d --default.path.conf=/etc/elasticsearch/ ; Data manipulation in client Create a new index: curl - XPUT 'localhost:9200/blogs' - d ' { \"settings\" : { \"number_of_shards\" : 3, \"number_of_replicas\" : 1 } }' List all indexes: curl 'localhost:9200/_cat/indices?v' ; For a index named \"test\": List all data in an index: curl -XGET 'http://localhost:9200/test/_search?pretty' ; Remove an index: curl -XDELETE 'http://localhost:9200/test/' , wild card can be used here: curl -XDELETE 'http://localhost:9200/logstash*/' , or many indexes at once: curl -XDELETE 'http://localhost:9200/website,shakes*/' , separated by comma. Put the result as well-formatted json: npm install - g json curl 'localhost:9200/megacorp/employee/_search?pretty' | json Notes You can use curl 'localhost:9200/megacorp/employee/_search?pretty' | python -m json.tool in command line or :%!python -m json.tool in vim to format json string. But it will sort your keys, and maybe not friendly to Unicode characters. Do NOT delete \"mongodb_meta\" index in ES, or you will get an error when starting mongo-connector : AttributeError: 'IndicesClient' object has no attribute 'delete_mapping' If you had deleted it, restart ES server to rebuild this index. ?petty sometimes will be invalid url. Format json in vim: :%!json . Ref: http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json https://pascalprecht.github.io/2014/07/10/pretty-print-json-in-vim/ Security Ref: Security for Elasticsearch . Under directory \"/home/es/apps/elasticsearch-2.0.0\", run: bin / plugin install elasticsearch / license / latest bin / plugin install elasticsearch / shield / latest bin / elasticsearch bin / shield / esusers useradd es_admin - r admin // input admin pwd : es @Newfairs2015 Elasticsearch authentication will affect kibana and mongo-connector, make things too complicated. So I decided to remove authentication. First stop elasticsearch server, then run: bin / plugin --help bin / plugin list bin / plugin remove shield bin / plugin remove license bin / elasticsearch Finally start mongo-connector and kibana.","tags":"Tech","url":"http://leetschau.github.io/elasticsearch-notes.html","loc":"http://leetschau.github.io/elasticsearch-notes.html"},{"title":"Use Google Font Locally","text":"For example, we want use Open Sans locally. On Google Fonts , in \"Open Sans\", click \"Add to Collection\". and click \"use\". Under \"Choose the styles you want:\", check all items, under \"Choose the character sets you want:\", check \"Latin\" and \"Latin Extended\". Open the url in the 3rd step, here it is: https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic . Now you get a css file, save it into $WEBSITE_HOME/client/stylesheets/font/opensans.less, delete all sections other than \"latin\" and \"latin-ext\", download","tags":"Tech","url":"http://leetschau.github.io/use-google-font-locally.html","loc":"http://leetschau.github.io/use-google-font-locally.html"},{"title":"JavaScript Code Folding","text":"Add codes below to ~/.vimrc and run vim +PluginClean +PluginInstall +qa : \" JavaScript code folding set foldmethod = syntax set foldlevelstart = 3 let javaScript_fold = 1 Plugin 'pangloss/vim-javascript' Frequently used folding shortcuts: zr/zm: decrease/increase the foldlevel by one; zR/zM: open/close all folds; zo/zc: open/close fold at cursor; zO/zC: open/close all folds; Ref: http://stackoverflow.com/questions/4789605/how-do-i-enable-automatic-folds-in-vim https://www.linux.com/learn/tutorials/442438-vim-tips-folding-fun","tags":"Tech","url":"http://leetschau.github.io/javascript-code-folding.html","loc":"http://leetschau.github.io/javascript-code-folding.html"},{"title":"Vim Snippet Plugins","text":"Add codes below into ~/.vimrc: let g : UltiSnipsEditSplit = 'vertical' Plugin 'SirVer/ultisnips' Plugin 'honza/vim-snippets' Plugin 'mattn/emmet-vim' Run vim +PluginClean +PluginInstall +qa . The folder of UltiSnips is about 6.1MB, emmet-vim is about 1.6MB. UltiSnips is a vim snippet engine, while vim-snippets is a bunch of snippets definitions. Use UltiSnipsEdit to add a new snippet. Use cl<TAB> in a js file, to make it expand to console.log(...); . emmet-vim is a html editing tool. For example open a new html file with html:5 , and press <C-y>, , you get a full html skeleton, which means emmet installed OK.","tags":"Tech","url":"http://leetschau.github.io/vim-snippet-plugins.html","loc":"http://leetschau.github.io/vim-snippet-plugins.html"},{"title":"Search String Pattern in Git History","text":"List commits where the patterns changes git log -p --all -G 'pattern' : search a string in git history. -G search for all editing activity with \"pattern\", while -S only search for creation and removal of \"pattern\", the results of -S is the subset of results of -G . When the \"pattern\" is in the current commit, there will be only 1 result of -S , where the pattern is added into the texts. When the \"pattern\" is removed in current commit, there will be 2 results of -S : the first (which is newer) is where the pattern is removed, the second is where the pattern is added. -p denotes --patch , which will print the editing details. If you only want to know the commit name which deal with the \"pattern\", omit this option. --all search in all branches. List all the commits where pattern exists git rev-list --all | xargs git grep moveImage The oldest commit(last line of the output) in git log ... is the same with the oldest commit in git rev-list... . The newest commit in git log ... is the child of the newest commit in git rev-list ... . Ref: Search all of Git history for a string? Git history - find lost line by keyword","tags":"Tech","url":"http://leetschau.github.io/search-string-pattern-in-git-history.html","loc":"http://leetschau.github.io/search-string-pattern-in-git-history.html"},{"title":"Tab and Session Management in vim","text":"Session management is provided by tpope/vim-obsession . Tab rename function is provided by gcmt/taboo.vim . In ~/.vimrc: \" Customize tabline hi TabLineFill term=bold cterm=bold ctermbg=0 hi TabLine ctermfg=Yellow \" Taboo set sessionoptions += tabpages , globals cabbrev tr TabooRename \" tab switching shortcuts noremap <leader>1 1gt noremap <leader>2 2gt noremap <leader>3 3gt noremap <leader>4 4gt noremap <leader>5 5gt noremap <leader>6 6gt noremap <leader>7 7gt noremap <leader>8 8gt noremap <leader>9 9gt noremap <leader>0 :tablast<cr> \" Add these into Vundle section Plugin 'gcmt/taboo.vim' Plugin 'tpope/vim-obsession' Now open file in a new tab with: Ctrl-P , select a file and Ctrl-O, t . Open file in a virtical split window with: Ctrl-P , select a file and Ctrl-O, v . Rename tab with: :tr<Space>new name<Enter> . Jump to the 3rd window with ,3 . Note: I also tried xolox/vim-session , but it can't persist tab name created by Taboo. For tab easy switch, I've tried noremap <unique> <C-1> 1gt based on Switching to a particular tab in VIM , where changes M-Num to C-Num, because M-Num is assigned to tmux window switch. However C-Num can't work, see .vimrc mapping for control key not working for explanations. So I adopted noremap <leader>1 1gt style based on In vim, how can I quickly switch between tabs? . Mapping long Ex commands with cabbrev is a very useful for convenient. Use or instead of to enable abbreviation in cabbrev . See :h :ca , Can I (re-) map commands in vim? and Aliasing a command in vim for details. With cabbrev tr TabooRename , you can use :tr<Space>1:tests to rename current tab into \"1:tests\". Here you have to add tab index manually to make <leader><number> style switching more convenient. To make tabline more readable, I customized the color of it. See How do you change the background color of the empty tab space in vim? and Customising the colours of vim's tab bar for details.","tags":"Tech","url":"http://leetschau.github.io/tab-and-session-management-in-vim.html","loc":"http://leetschau.github.io/tab-and-session-management-in-vim.html"},{"title":"Reaction Notes","text":"Accounts reaction-core的用户存在users表和Accounts表，下面是初始化Reaction后得到的Owner用户表结构。 用户与业务有关的信息存在Accounts表中，其余的放在了users表中， server/methods/accounts.js:Accounts.onCreateUser()可以看到 Accounts中的用户是首先clone Meteor user，然后在上面添加新属性后insert到Accounts表中。 这里users中的用户作用有两个： 基于Meteor accounts包管理用户的注册、验证、登录等动作； 基于alanning/meteor-roles定义用户角色； 下面是从数据库中得到的一组实例： > db . users . find (). pretty () { \"_id\" : \"Jyt46yndz8e5tCWgN\" , \"createdAt\" : ISODate ( \"2015-10-06T03:43:17.711Z\" ), \"services\" : { \"password\" : { \"bcrypt\" : \"$2a$10$Oj.qa9YmYdQazg3WkvqlbOf2FM2.SI5V0a6Ar8kW8qGEc.dRhzHXe\" } } , \"username\" : \"Owner\" , \"emails\" : [ { \"address\" : \"asy6nklv@localhost\", \"verified\" : false, \"provides\" : \"default\" } ] , \"roles\" : { \"8jbLoDao7BaLhmCog\" : [ \"guest\", \"account/profile\", \"owner\", \"admin\", \"dashboard\", \"dashboard/settings/shop\", \"dashboard/orders\", \"createProduct\", \"dashboard/accounts\", \"core\", \"shipping\", \"reaction-shipping\", \"paypal\", \"reaction-paypal\", \"braintree\", \"reaction-braintree\", \"stripe\", \"reaction-stripe\", \"authnet\", \"reaction-auth-net\", \"social\", \"reaction-social\", \"reactionAnalytics\", \"reaction-analytics\" ] , \"__global_roles__\" : [ \"owner\", \"admin\", \"dashboard\" ] } } > db . Accounts . find (). pretty () { \"_id\" : \"Jyt46yndz8e5tCWgN\" , \"createdAt\" : ISODate ( \"2015-10-06T03:43:17.733Z\" ), \"emails\" : [ { \"address\" : \"asy6nklv@localhost\", \"verified\" : false, \"provides\" : \"default\" } ] , \"userId\" : \"Jyt46yndz8e5tCWgN\" , \"shopId\" : \"8jbLoDao7BaLhmCog\" , \"acceptsMarketing\" : false , \"state\" : \"new\" }","tags":"Tech","url":"http://leetschau.github.io/reaction-notes.html","loc":"http://leetschau.github.io/reaction-notes.html"},{"title":"Meteor Development Environment on Windows","text":"If you want develop Meteor on Windows machine, it's inconvenient to install meteor, mongodb, vim, etc. on Windows. My choice is use VM as develop environment. First install VirtualBox , Vagrant , Executor . Add the Meteor Dev vagrant box to system vagrant box add meteorBox mybox.box . The box is based on Ubuntu 14.04 LTS (Trusty), with provisioned Meteor, MongoDB, git, tmux, vim and its plugins. Create the VM: vagrant init meteorBox ; There are different SSH clients: MobaXterm Download MobaXterm and extract it to app folder, say d:\\Apps\\MobaXterm_v7.7. Create a new session in MobaXterm named \"localvm\", with username \"vagrant\" and port 2222; In Executor, add the following keywords: keyword : vmStart Command : vagrant Parameters : up Start in : e :\\ Docs \\ MeteorBox \\ sysClone \\ vm keyword : vmSuspend Command : vagrant Parameters : suspend Start in : e :\\ Docs \\ MeteorBox \\ sysClone \\ vm Keyword : vmLogin Command : MobaXterm_Personal_7 . 7 . exe Parameters : - bookmark localvm - exitwhendone Start in : d :\\ Apps \\ MobaXterm_v7 . 7 Keyword : vmStart & Login Command : vmStart || vmLogin Now you can use [win-z, vmStart&Login] to start VM and login. Before you shutdown Windows machine, remember use [win-z, vmSuspend] to suspend VM (which is always impossible). Below is the procedure of getting a project into the VM: win - z : vmstart win - z : vmlogin # in the VM ssh - keygen # copy $ ( cat . ssh / id_rsa . pub ) to http : // phab . yourdomain . com / settings / panel / ssh mkdir docs ; cd docs git clone ssh : // git @phab . yourdomain . com / diffusion / YOURREPO / yourRepo . git cd yourRepo git submodule init git submodule update Note: to add or edit keywords in Executor, use shortcut [win-z, Ctrl-k], see Executor documents for details. Kitty If you prefer Kitty (portable version of Putty) to MobaXterm, Add a new Session \"localvm\" in Kitty: Host name : localhost Port : 2222 Connection -> Data -> Auto - login username & password : vagrant Window -> Behavior : check \"Full screen on Alt-Enter\" The corresponding \"vmLogin\" will be: Keyword : vmLogin Command : kitty . exe Parameters : - load localvm Start in : d :\\ Apps \\ Kitty ConEmu + Kitty You can even wrap Kitty into ConEmu , which is a good Windows console alternative. In ConEmu, add a task in Settings -> Startup -> Tasks: Name : Kitty Hotkey : Win + Alt + X Task parameters : blank Commands : d :\\ Apps \\ Kitty \\ kitty . exe - new_console - load \"VagrantLinux\" And set Kitty as the auto startup task: Set Settings -> Startup -> Startup options -> Specified named task to \"Kitty\". Add a new Executor keyword for ConEmu: Keyword : vmLogin Command : d :\\ Apps \\ ConEmu \\ ConEmu . exe (or use [Win + Alt + X] to login to VM manually in ConEmu).","tags":"Tech","url":"http://leetschau.github.io/meteor-development-environment-on-windows.html","loc":"http://leetschau.github.io/meteor-development-environment-on-windows.html"},{"title":"Use Git in Vim with fugitive","text":"Install Add Plugin 'tpope/vim-fugitive' into ~/.vimrc and run vim +PluginClean +PluginInstall +qa . Get Help :help fugitive Frequently Use Commands Action Name Meaning Close Window with :Gblame show info of each line q :Gdiff show diff in vim :q :Gstatus show git status q In Gstatus In \":Gst\" window, you can use \"-\" to add/remove a file in/out stage area, \"cc\" to commit, \"U\" to reset (discard local changes), you may need reload the file with :e \"dv\" to diff in vertical split, \"ds\" or \"D\" to diff in horizontal split ( :q to quit from diff) \"g?\" to see all available actions. To see the file changes history: :Git log --stat . Working with nerdtree Add Plugin 'Xuyuanp/nerdtree-git-plugin' into .vimrc.","tags":"Tech","url":"http://leetschau.github.io/use-git-in-vim-with-fugitive.html","loc":"http://leetschau.github.io/use-git-in-vim-with-fugitive.html"},{"title":"A Meteor Package Test Demo","text":"Generating Test Data with Meteor Factory and Fake The following tests set up with meteor-factory . First create Meteor app, install packages, define collections and start server: meteor create testApp cd testApp meteor add dburles : factory meteor add babrahams : constellation cat << EOF > collections . js Authors = new Meteor . Collection ( 'authors' ); Books = new Meteor . Collection ( 'books' ); EOF # Authors and Books must be defined in both servers and client # or ` Factory . create ( \"books\" ); ` will fail . # So they can ' t be defined in browser console MONGO_URL = \"mongodb://localhost:27017/test\" meteor Then open http://localhost:3000/ in browser, Open constellation console with Ctrl-C. Open browser console (with F12), run codes below: Factory . define ( ' author ' , Authors , { name : ' John Smith ' } ) ; // all authors created through Factory have the same \" name \" Factory . define ( ' book ' , Books , { authorId : Factory . get ( ' author ' ) , name : ' A book ' , year : function () { return _ . random ( 1900 , 2014 ) ; } } ) ; Now each time you run Factory.create('author'); , a new document is inserted into the collection \"authors\". You can see it on the constellation console under \"authors\" section. If you want create user with different names, add a new package meteor-fake with meteor add anti:fake , and modify above definitions as follows: Factory . define ( ' author ' , Authors , { name : function () { return Fake . user ( { fields : [ ' name ' ]} ) . name ; } } ) ; Factory . define ( ' book ' , Books , { authorId : Factory . get ( ' author ' ) , name : function () { return Fake . sentence ( 4 ) ; }, year : function () { return _ . random ( 1900 , 2014 ) ; } } ) ; When enable the \"Autopublish\" tab, you can see all the collections even after the autopublish package removed from Meteor app. Used in Package The container app is named \"mininf\", which has a package named \"nfcore\". There will be 3 roles of user in this scenario, Add, Sub and Multi. Users with Add role can only ask addition questions, with Sub can only ask substraction questions, with Multi can only ask multiplication questions. A user without a role can't ask any questions. The users and their roles will be created with alanning/meteor-roles . There are 2 collections, accounts and questions, whose schemas are defined with simple-schema . Target: Run the container app, use constellation to watch it's data; Define data schema with simple-schema; Use factory to insert user and question to collections; Run test on container app, see the result. The implementation steps: Create mininf and nfcore; Add simple-schema and roles in the package definition of mininf; Add jasmine and velocity in the package test definition of mininf; Create schemas of users and questions in package; Create collections in package and attach schemas on them; Create tests; meteor create mininf cd mininf meteor create --package leo:nfcore cat << EOF > packages/nfcore/package.js Package.describe({ name: 'leo:nfcore', version: '0.0.1', summary: '', git: '', documentation: 'README.md' }); Package.onUse(function(api) { api.versionsFrom('1.2.0.2'); api.use('ecmascript'); // this makes nfcore itself can use variable \"SimpleSchema\" in the source code api.use(\"aldeed:simple-schema@1.3.3\"); api.use(\"alanning:roles\"); // this makes any packages using nfcore can use \"SimpleSchema\" api.imply(\"aldeed:simple-schema\"); api.imply(\"alanning:roles\"); api.addFiles('nfcore.js'); api.export(\"NFCore\"); }); Package.onTest(function(api) { api.use('ecmascript'); api.use('sanjo:jasmine@0.19.0'); api.use('anti:fake'); api.use('underscore'); api.use(\"dburles:factory@0.3.10\"); api.use('velocity:html-reporter@0.9.0'); api.use('velocity:console-reporter@0.1.3'); api.use('leo:nfcore'); api.addFiles('nfcore-tests.js'); }); EOF mkdir -p {common/{schemas,collections},tests,client,server} cat << EOF > common/globals.js NFCore = {}; NFCore.Schemas = {}; NFCore.Collections = {}; EOF cat << EOF > common/schemas/accounts.js NFCore.Schemas.Accounts = new SimpleSchema({ name: { type: String } }); EOF cat << EOF > common/schemas/accounts.js NFCore.Schemas.Questions = new SimpleSchema({ owner: { type: Meteor.Collection.ObjectID }, content: { type: String } }); EOF cat << EOF > common/collections/collections.js NFCore.Collections.Accounts = new Mongo.Collection(\"accounts\"); NFCore.Collections.Accounts.attachSchema(NFCore.Schemas.Accounts); NFCore.Collections.Questions = new Mongo.Collection(\"questions\"); NFCore.Collections.Questions.attachSchema(NFCore.Schemas.Questions); EOF Errors, Questions and Solutions E: meteor object [object object] has no method 'attach schema'. S: Add api.use(\"aldeed:collection2@2.5.0\"); and api.imply(\"aldeed:collection2@2.5.0\"); into Package.onUse() of package.js. E: insert failed: Access denied. No allow validators set on restricted collection for method 'insert'. S: Add \"server\" as the 2nd parameter in package.js -> Package.onTest -> api.addFiles( ): api.addFiles('tests/accounts.js', 'server'); . Q: In package I use Factory.create() to insert a doc into a collection, but I can't find the collection. S: Add environment \"MONGO_URL\" into the test command: VELOCITY_TEST_PACKAGES=1 MONGO_URL=\"mongodb://localhost:27017/test\" meteor test-packages --driver-package velocity:html-reporter leo:nfcore .","tags":"Tech","url":"http://leetschau.github.io/a-meteor-package-test-demo.html","loc":"http://leetschau.github.io/a-meteor-package-test-demo.html"},{"title":"Notes of Learn You a Haskell for Great Good","text":"Notes for Learn You a Haskell for Great Good . Modules The following code snippet demonstrate how to import and use Haskell submodule. Save the following codes into a shell script and run it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/bin/bash mkdir Geometry cat << EOF > Geometry/Sphere.hs module Geometry.Sphere ( volume , area ) where volume :: Float -> Float volume radius = (4.0 / 3.0) * pi * (radius &#94; 3) area :: Float -> Float area radius = 4 * pi * (radius &#94; 2) EOF cat << EOF > app.hs import Geometry.Sphere main = print $ volume 3 EOF runghc app.hs The result should be \"113.097336\". Making Our Own Types and Typeclasses Value constructor is also called \"data constructor\". Ref: Constructor Haskell Type vs Data Constructor Applicative Functors 下面的代码，转换 [1,2,3,4] 时，可以用 map 代替 fmap ，转换 Just 4 就不行： Prelude > fmap ( replicate 3 ) [ 1 , 2 , 3 , 4 ] [[ 1 , 1 , 1 ],[ 2 , 2 , 2 ],[ 3 , 3 , 3 ],[ 4 , 4 , 4 ]] Prelude > map ( replicate 3 ) [ 1 , 2 , 3 , 4 ] [[ 1 , 1 , 1 ],[ 2 , 2 , 2 ],[ 3 , 3 , 3 ],[ 4 , 4 , 4 ]] Prelude > fmap ( replicate 3 ) ( Just 4 ) Just [ 4 , 4 , 4 ] Prelude > map ( replicate 3 ) ( Just 4 ) < interactive > : 45 : 20 : Couldn ' t match expected type ‘[a]' with actual type ‘Maybe Integer' Relevant bindings include it :: [[ a ]] ( bound at < interactive > : 45 : 1 ) In the second argument of ‘ map ', namely ‘ ( Just 4 ) ' In the expression : map ( replicate 3 ) ( Just 4 ) map是一个函数，通过一个将a类型变为b类型的函数， 将元素类型为a类型的数组转换为元素类型为b的数组； Prelude > : t map map :: ( a -> b ) -> [ a ] -> [ b ] fmap是一个函数，通过一个将a类型变为b类型的函数， 将一个类型为\"f a\"的值，变为一个类型为\"f b\"的值。 Prelude > : t fmap fmap :: Functor f => ( a -> b ) -> f a -> f b Maybe 是一个实现了(instance)函子(Functor)类型类(class)的类型构造器(type constructor)。 类型构造器类似于Java的泛型，例如\"数组\" [] 就是类型构造器， \"元素为整数的数组\" [Int] 是一个具体类型，这里的整型 Int就充当了数组类型构造器的参数， 用函数做类比，数组是个\"类型函数\"，参数是具体类型 Int，返回具体类型 [Int]。 Prelude > : k [] [] :: * -> * 这里 :k 表示取数组的kind值，kind可以理解为是类型构造器的类型。 * 表示某个具体类型（而不是类型构造器）。 Just 是一个函数，将a类型值转换为 Maybe a 类型值， 例如 Just 4 将Int类型值 (4)，转换为 Maybe Int ， 或者更准确地表述为：将Num类型值转为 Num a => Maybe a 类型。 Prelude > : k Maybe Maybe :: * -> * Prelude > : t Just Just :: a -> Maybe a Prelude > : t Just 4 Just 4 :: Num a => Maybe a 由于 Just 4 的类型 Maybe Integer 不符合 map 第二个参数类型 [a] 的要求，所以报错。 Prelude > : t replicate 3 replicate 3 :: a -> [ a ] Prelude > : t fmap ( replicate 3 ) ( Just 4 ) fmap ( replicate 3 ) ( Just 4 ) :: Num a => Maybe [ a ] 在上面的计算过程中， (replicate 3) 是 fmap 的第一个参数 (a -> b) ， 这里由于 (replicate 3) 类型是 (a -> [a]) ，所以 b 就是 [a] 。 (Just 4) 是第二个参数 f a ，代入 Just 4 的类型 Maybe a ， 可知 Functor f 就是 Maybe . 所以最终 f b 就是 Maybe [a] 。","tags":"Tech","url":"http://leetschau.github.io/notes-of-learn-you-a-haskell-for-great-good.html","loc":"http://leetschau.github.io/notes-of-learn-you-a-haskell-for-great-good.html"},{"title":"Meteor Test with Velocity and Jasmine","text":"Create jasmine tests and run them as the following codes: $ meteor create jasmineEx $ cd jasmineEx $ meteor create --package newfairscommerce:add-number $ rm packages/add-number/add-number-tests.js $ mkdir -p packages/add-number/tests/ { server,client } $ cat << EOF > packages/add-number/tests/example-spec.js describe('sanjo:jasmine on client and server', function() { it('works', function() { expect(it).toBeDefined(); }) }) EOF $ cat << EOF > packages/add-number/tests/client/example-spec.js describe('sanjo:jasmine on client', function() { it('works', function() { expect(it).toBeDefined(); }) }) EOF $ cat << EOF > packages/add-number/tests/server/example-spec.js describe('sanjo:jasmine on server', function() { it('works', function() { expect(it).toBeDefined(); }) }) EOF And replace Package.onTest in packages/add-number/package.js with the following codes: Package . onTest ( function ( api ) { api . use ( ' sanjo : jasmine @0.18.0 ' ); api . use ( ' velocity : html - reporter @0.9.0 ' ); api . use ( ' velocity : console - reporter @0.1.3 ' ); api . addFiles ( ' tests / server / example - spec . js ' , ' server ' ); api . addFiles ( ' tests / client / example - spec . js ' , ' client ' ); api . addFiles ( ' tests / example - spec . js ' , [ ' server ' , ' client ' ]); }); Now run VELOCITY_TEST_PACKAGES=1 meteor test-packages --driver-package velocity:html-reporter newfairscommerce:add-number under the root directory of jasmineEx project, you can get the following output: ... => App running at : http : // localhost : 3000 / I20151003 - 18 : 23 : 56 . 465 ( 8 ) ? jasmine - server - integration : 2 tests passed ( 11 ms ) I20151003 - 18 : 24 : 07 . 849 ( 8 ) ? jasmine - client - integration : 2 tests passed ( 3 ms ) And you can get the test results in browser with url \"http://localhost:3000\". Questions: When running the following codes, it runs into a interactive shell: npm install - g velocity - cli velocity test - package newfairscommerce : add - number","tags":"Tech","url":"http://leetschau.github.io/meteor-test-with-velocity-and-jasmine.html","loc":"http://leetschau.github.io/meteor-test-with-velocity-and-jasmine.html"},{"title":"Add a Local Meteor Package from a Existing Repo","text":"newfairs-v3 is the container project. newfairs-core is a package. meteor create newfairs - v3 cd newfairs - v3 meteor create --package newfairscommerce:core cp - r .. / newfairs - core packages mv packages / core / { package . js , README . md } packages / newfairs - core / rm - rf package / core meteor add newfairscommerce : core Then you have to define dependencies for this package with adding some api.use() and loading order by adding some api.addFiles(...) in packages/newfairs-core/package.js.","tags":"Tech","url":"http://leetschau.github.io/add-a-local-meteor-package-from-a-existing-repo.html","loc":"http://leetschau.github.io/add-a-local-meteor-package-from-a-existing-repo.html"},{"title":"Stack Notes","text":"Updated in 2018.9. Install and List Global Packages Run stack install <pkg-name> outside a stack project folder to install a global package. Like npm install -g <pkg-name> or pip install <pkg-name> for a global pip . For example, install Idris with stack install idris . If it's blocked by GFW, run export https_proxy=... http_proxy=... before stack install . You can find the installed binary in folder ~/.local/bin. List all installed global packages with stack exec ghc-pkg -- list outside a stack project folder. Project Management Create a new project from scratch with: stack new GetProgrammingWithHaskell new-template -p \"author-email:leetschau@gmail\" -p \"author-name:Li Chao\" -p \"category:Study\" -p \"github-username:leetschau\" You can choose a resolver (other than the default one chosen by stack , see its explanation in the next section) with stack new --resolver lts-12.17 my-project ... . List available reslovers with stack ls snapshots . Project Structure Now you get a folder named my-project . There are 3 config files in the project folder: stack.yaml: the definition of your project , used by stack; package.yaml: the definition of the package you are working on, in the format of hpack . hpack is a \"modern alternative to the Cabal package format and follows different design principles\"; my-project.cabal: generated by hpack based on package.yaml , This file is used by stack, so should be added in git ignore file; Concepts According to stack.yaml vs cabal package file : A project has: A resolver, which tells it about a snapshot (more on this later) Extra dependencies on top of the snapshot 0 or more local Cabal packages Flag and GHC options configurations And a bunch more Stack configuration A package has: A name and version 0 or 1 libraries 0 or more executables A cabal file (or, as mentioned above, an hpack package.yaml that generates a cabal file) And a bunch more A project has 1 or more packages. The packages belonging to the project is listed in the packages: section in the stack.yaml. The default value is . , which means the project root folder. Workflow Create a new stack project based on an existing .cabal file: stack init . Print the compiler version for an existing project: stack exec -- ghc --version or stack ghc -- --version . Here stack ghc is a shortcut for stack exec ghc . The -- after exec tells Stack to pass the rest of the command line arguments to the specified program instead of parsing them itself. You can also find the versions of resolver and compiler in the output of stack path . Compile a Haskell script and create an executable: stack ghc -- Main.hs . Run a Haskell script: stack runghc -- Main.hs . If your script has no arguments, the -- in above command can be omitted. Run a script with the compiler of specific version, and external packages: stack --resolver lts-6.15 --install-ghc runghc --package http-conduit http.hs . Note that we also included --install-ghc to make sure that the correct GHC is downloaded and installed if necessary. Run Haskell script as a shell script: $ cat << EOF > hello . hs # !/ usr / bin / env stack -- stack -- resolver lts - 12 . 5 script main = do print \" What is your name? \" name <- getLine print ( \" Hello \" ++ name ++ \" ! \" ) EOF $ stack hello . hs $ chmod 755 hello . hs $ . / hello . hs Start a REPL in current project root: stack ghci . Start a REPL in current project root with external package loaded: stack ghci --package http-client . The external library (here is http-client ) files will be downloaded and compiled in both $PROJ_HOME/.stack-work/install and ~/.stack/snapshots folders. Compile the whole project and create executable file with stack build . Run the executable with stack exec <exe-name> , for example: stack exec Code0103 . Documentation Viewer View the documentation of a function, say \"nub\", with hoogle -i nub . Install it with apt install hoogle . Or you can use hoogle with stack hoogle -- -i nub . Here -- means all parameters followed are the parameters of hoogle instead of stack . This command is a shorthand of stack hoogle -- search --info nub . See the full Documentation of hoogle with stack hoogle -- --help , and doc for search subcommand with stack hoogle -- search --help . There's a problem: which version's documentation of nub you are querying? In the cabal scenario, you have only a fixed version of ghc and cabal. So this isn't a problem. But for stack, it's reasonable to worry about it. When you run stack hoogle inside a stack project, the version is specified by the resolver directive in the file stack.yaml. When you run stack hoogle outside a stack project, stack treat it as in a global-project whose configuration files in folder ~/.stack/global-project . So you'd better modify resolver directive of the file ~/.stack/global-project/stack.yaml to a mainstream version (for now, it is \"lts-12.17\"), then initialize this project with running command stack init (or stack init --force if the former failed) in ~/.stack/global-project (or any folder outside a stack project). For convenience, add hg='stack hoogle -- -i' into ~/.bash_aliases . Now you can run hg <function-name> anywhere happily. Quick Doc in vim Add autocmd FileType haskell nnoremap <C-q> :execute ':!stack hoogle -- -i <cword>'<cr> into $MYVIMRC. Here <cword> means word at cursor , see :help cword for more forms. You can also define quick doc via abbreviations with autocmd FileType haskell cabbrev qd execute ':!stack hoogle -- -i <cword>' , but this has more keystrokes than the map command above. And you have to press manually after :qd , instead of adding it into the shortcut (in this case you can't see the output of the command). Haskell package management Stack has different resolver according to different version of GHC . You can see all available resolvers at Stackage . For example, if you want to use compiler GHC 8.2.2, the corresponding resolver is LTS Haskell 11.22 (ghc-8.2.2) . In the webpage of this resolver you can find a package base-4.10.1.0 , which means the base package in this resolver has the version 4.10.1.0. Each resolver contains packages with specific versions compatible with each other. You can read its package list at above mentioned Stackage , or in file ~/.stack/build-plan/lts- .yaml . The resolver version is defined in stack.yaml file in a project's root folder. So the package manager need not resolve package version when building. Stack saves each compiler ( GHC executable) and libraries in folder ~/.stack/programs. The package.yaml (or my-package.cabal) file defines which packages are used as dependencies by your package. While stack.yaml file specifies precisely which version for each dependency to be used during the building process with the versions of the resolver and extra-deps (packages outside the resolver). The stack.yaml file serves a purpose similar to npm-shrinkwrap.json file, while project-name.cabal serves like the packages.json for a node.js project. In some ways the style of stack is like pipenv : The environment is defined at project level (each project has a stack.yaml and a .cabal file), in contrast with the conda style (the environment is defined at system level) The actual environment files are saved in a system-level folder ~/.stack, in contrast with the node.js style: save all files in node_modules folder inside the project. stack install always install packages at the system-level, so there's no distinction between npm install and npm install -g . Multiple Haskell projects can share one resolver, like conda, while is a better stratagy than pipenv and npm (libraries can't be shared between projects). Ref: stack.yaml file & .cabal file differences? How to Build with Stack What is the difference between Cabal and Stack? How to Build with Stack Build your Haskell project continuously YAML Configuration","tags":"Tech","url":"http://leetschau.github.io/stack-notes.html","loc":"http://leetschau.github.io/stack-notes.html"},{"title":"Using Webstorm as Meteor IDE","text":"Terminal In editor, use \"Alt-F12\" to activate terminal. In terminal, use \"Shift-ESC\" or \"Alt-F12\" to go back to editor. Double click terminal title bar to maximize the terminal panel. Only run Meteor server in Webstorm's terminal. Run all other terminal work (such as mongod, git, etc) in a external terminal. Use \"Alt-Tab\" to switch between external terminal and Webstorm. Navigattion Toggle file browse pane with \"Alt-1\". Focus editor with \"ESC\". Editor Split vertically/horizontally; Vim Plugin Install IdeaVim in [Settings -> Plugins] (open it with Ctrl-Shift-A). Open/close it in [Tools -> Vim Emulator], or \"Alt-T Ctrl-Alt-V\". Close editor tab: :q Frequently Used Shortcuts Double shift: search everything; Shift-Ctrl-N: search and open files; Shift-Ctrl-A: search and run commands; Alt-Left/Right: switch between editor tabs; Ctrl-Shift-Enter: complate statement; See [Help -> Default Keymap Reference] for all.","tags":"Tech","url":"http://leetschau.github.io/using-webstorm-as-meteor-ide.html","loc":"http://leetschau.github.io/using-webstorm-as-meteor-ide.html"},{"title":"Autosave in Webstorm","text":"Autosave related settings of Webstorm 10.0.4 are mostly in [Settings -> Appearance & Behavior -> System Settings -> Synchronization]. By default the \"Save files automatically ...\" is unchecked. So Webstorm will not save file changes before you press Ctrl-S. But \"Save files on frame deactivation\" is checked. So if you switch to another application other than Webstorm, all changes unsaved will be saved to disk. However , when you modify file A without save, and switch to another tab to edit file B, file A will not be saved, because this is not \"frame deactivation\" (why?). This is convenient for Meteor development. You can modify many files without save. As you switch to browser, Webstorm will save all changes to disk, then Meteor detects file changes and refreshes pages in browser. In Webstorm 10.0.4 the Linux version, the blue color of changed tabs is subtle (compared with that on Windows or Mac), check \"Mark modified tabs with asterisk\" in [Settings -> Editor -> General -> Editor Tabs] to make unsaved tabs easier to identify. Finally note that \"Ctrl-S\" in Webstorm is \"save all\" instead of \"save\".","tags":"Tech","url":"http://leetschau.github.io/autosave-in-webstorm.html","loc":"http://leetschau.github.io/autosave-in-webstorm.html"},{"title":"Convert a Folder into Meteor App in Webstorm","text":"You've cloned a repo from remote host into foler \"$HOME/docs/myapp\". So you can't use meteor create myapp to build a new Meteor app. You can create this \"myapp\" under /tmp, and cp -r /tmp/myapp/.meteor $HOME/docs/myapp/ . Now open $HOME/docs/myapp in Webstorm, it's been a Meteor app already.","tags":"Tech","url":"http://leetschau.github.io/convert-a-folder-into-meteor-app-in-webstorm.html","loc":"http://leetschau.github.io/convert-a-folder-into-meteor-app-in-webstorm.html"},{"title":"Generate Random Date After a Specified Date","text":"The following codes can display a random date within a month after the specified fair date. $ meteor create randomDate $ cd randomDate $ meteor add momentjs : moment $ cat randomDate . html < head > < title > Random Date </ title > </ head > < body > 在 展会日期 输入框中输入日期，例如： 2015 - 05 - 25 ，然后点击 评论 按钮。 < hr > {{ > DatePanel }} </ body > < template name = \" DatePanel \" > < label > 展会日期： </ label > < input type = \" text \" id = \" fairDate \" > < button > 评论 </ button > < p > 评论添加日期：{{ commentDate }} </ p > </ template > $ cat randomDate . js if ( Meteor . isClient ) { Template . DatePanel . helpers ( { commentDate : function () { return Session . get ( ' commentDate ' ) ; } } ) ; Template . DatePanel . events ( { ' click button ' : function ( e , t ) { var dateStr = t . find ( \" #fairDate \" ) . value ; var fairDate = moment ( dateStr ) ; var randomDays = Math . floor (( Math . random () * 30 ) + 1 ) ; var commentDate = fairDate . add ( randomDays , ' days ' ) ; var commStr = commentDate . format ( \" YYYY-MM-DD \" ) ; Session . set ( ' commentDate ' , commStr ) ; } } ) ; } $ meteor","tags":"Tech","url":"http://leetschau.github.io/generate-random-date-after-a-specified-date.html","loc":"http://leetschau.github.io/generate-random-date-after-a-specified-date.html"},{"title":"A JavaScript Closure Demo","text":"下面的代码演示了JavaScript中的闭包： $ cat test . js x = 100 ; inc = function () { var x = 0 ; return function () { console . log ( x ++ ) ; } ; } ; inc1 = inc () ; inc2 = inc () ; $ node > require ( ' ./test.js ' ) {} > x 100 > inc [ Function ] > inc1 [ Function ] > inc2 [ Function ] > inc1 () 0 undefined > inc1 () 1 undefined > inc1 () 2 undefined > inc2 () 0 > inc2 () 1 undefined > inc2 () 2 undefined > inc2 () 3 undefined > inc2 () 4 undefined > inc1 () 3 undefined > inc () [ Function ] > inc ()() 0 undefined > inc ()() 0 undefined 可以看到inc2()最后一次执行时内部x值为4， inc1不受影响，执行时依然从上次的2开始增加变成3， 所以，不同的闭包（这里是inc1和inc2）保存了自己单独的内部变量x， 其中一个变化不会影响另一个的值。 由于每次执行inc()返回一个新的function，所以每次执行 inc()() 都打印0。 参考： javascript的闭包的概念和ruby的闭包的概念有何异同？ . \"Load and execute external js file in node.js with access to local variables?\" on StackOverflow.","tags":"Tech","url":"http://leetschau.github.io/a-javascript-closure-demo.html","loc":"http://leetschau.github.io/a-javascript-closure-demo.html"},{"title":"JSDoc Notes","text":"JSDoc is a documentation generator similar to JavaDoc or PHPDoc. JSDoc Install JSDoc with npm install -g jsdoc . Generate docs with jsdoc **/*.js . YUIDoc YUIDoc is suitable for generate documentation for YUI , a JavaScript library, and no longer actively maintained. It can only list modules and classes on the homepage, which is not very suitable for general purpose jsdoc. Install it with npm install -g yuidocjs . Run it with yuidoc . . It creates a folder named \"out\" by default in the current directory. Open the index.html in \"out\" folder to see the doc. Editor vim with scrooloose/nerdcommenter . Use <leader>cs to add block comment. But note that the block generated by this plugin is started by /* , which is invalid for jsdoc and yuidoc. You have to add an asterisk behind it as /** .","tags":"Tech","url":"http://leetschau.github.io/jsdoc-notes.html","loc":"http://leetschau.github.io/jsdoc-notes.html"},{"title":"Push to Github Repository with SSH Keys","text":"I want push to github repository without input username and password. Add pub key to github account [profile -> settings -> SSH keys]; Set up git default user name and email address with git config --global user.name and git config --global user.email ; Test ssh connection: ssh -T git@github.com ; Modify remote repo address: from https://github.com/USERNAME/OTHERREPOSITORY.git to git@github.com:USERNAME/OTHERREPOSITORY.git , where first replace https:// with git@ , then replace github.com/ with github.com: . Now you can push to github repo ( git push origin master ) without input username and password. Ref: Git push requires username and password Set Up Git Generating SSH keys Changing a remote's URL","tags":"Tech","url":"http://leetschau.github.io/push-to-github-repository-with-ssh-keys.html","loc":"http://leetschau.github.io/push-to-github-repository-with-ssh-keys.html"},{"title":"Change SSH Port on Linux","text":"Modify /etc/ssh/sshd_config: Port 22 -> 222 PermitRootLogin yes -> no PasswordAuthentication yes -> no","tags":"Tech","url":"http://leetschau.github.io/change-ssh-port-on-linux.html","loc":"http://leetschau.github.io/change-ssh-port-on-linux.html"},{"title":"Translate English Words in Browser and Console","text":"Everytime I want to get the meaning of a english word, I have to copy the word, open dict.cn, paste the word into the box and get the meaning, which is boring. Here we demonstrate with the word \"spoiler\". Chrome Right click in Chrome's address bar, and select \"Edit search engines\". Find \"dict.cn\", set its title to \"dict.cn\" (in the 1st column), set the shortcut name to \"dc\" (the 2nd column, whose origin value is \"dict.cn\"), remain the command as http://dict.cn/%s (in the 3rd column). Now input \"dc\" in address bar and press Space key, the address bar title is now \"Search Dict.CN\", and input \"spoiler\". BTW: With the same method, define Google with shortcut \"gg\" and command \"https://www.google.com/search?q=%s\", and press \"Make default\". Now input a word in address bar and press Enter, you will get the search result from Google. Console Translate Shell Install Translate Shell : gawk --version # should above 4.0 wget git . io / trans - O ~/ . local / bin / trans chmod 755 ~/ . local / bin / trans trans - V # print versions trans - H # print help message trans : zh muse # translate with default engine : google trans - S # list translation engines trans - e bing : zh muse # search with MS Bing trans - T # list available languages trans - U # upgrade this program trans - I # shell mode , useful when reading a paper Using Configuration to change its default behavior: cat << EOF > ~/ . config / translate - shell / init . trans { : verbose true : hl \"en\" : tl \"zh\" } EOF Now trans muse equals to 'trans :zh muse'. If you want using the brief mode as the default behavior ( trans -b :zh muse ), change :verbose in 'init.trans' to false . ici Install ici with sudo pip install ici , run it with ici spoiler . Firefox While there're some google translate extensions of firefox, but they are slow and not very complete. For example: the word meaning of \"spoiler\" in \"This synopsis may contain spoilers.\" on page Synopsis for Memento . So I have to build my own translate extension based on dict.cn. Steps Install Greasemonkey extension in Firefox. Build a new script with the following codes. Select some text and press \"\\\" key. // ==UserScript== // @name TranslateIt // @namespace LeoScript // @include * // @version 1 // @grant none // ==/UserScript== // document.addEventListener('mouseup', getSel, false); document.addEventListener('keypress', transIt, false); function transIt(e) { // console.log(e.key); if (e.key !== '\\'){ return; } var sel = document.getSelection().toString(); if (sel) { window.open('http://dict.cn/' + sel); } } Sometimes the popuped windows will be blocked by the browser. Add the website into the whitelist of the blocked sites. To debug the script, modify and save the script, reload the web page, and test the script. References: Greasemonkey Tutorial for Beginners Get selected text: greasemonkey: addEventListener questions HTML DOM addEventListener() Method Test if ctrl or alt key is pressed on clicking: JavaScript: Check if CTRL button was pressed search 'altKey' in HTML DOM Events Open a URL in a new tab using JavaScript","tags":"Tech","url":"http://leetschau.github.io/translate-english-words-in-browser-and-console.html","loc":"http://leetschau.github.io/translate-english-words-in-browser-and-console.html"},{"title":"Detect Website Information","text":"Based on How do you determine what technology a website is built on? . Website: BuiltWith . W3Techs . Browser plugins: Wappalyzer for firefox and chrome.","tags":"Tech","url":"http://leetschau.github.io/detect-website-information.html","loc":"http://leetschau.github.io/detect-website-information.html"},{"title":"Underscore Highlights Problem in vim Markdown Documents","text":"Install GFM plugin for vim To fix the highlight problem, use Plugin 'jtratner/vim-flavored-markdown' instead of Plugin 'plasticboy/vim-markdown' in .vimrc, and run vim +PluginClean +PluginInstall +qall . Use Atom as Editor Install Atom and modify the value of \"EDITOR\" in $DSNOTE_HOME/notes.sh to \"atom -f\". Run in foreground dsnot works in sync manner, while the default Atom working flow is async. So use \"atom -f\" instead of \"vim\" for the value of variable \"EDITOR\". Chinese character support Verified on Ubuntu 14.04 LTS. First install font \"文泉驿正黑\": sudo aptitude install ttf - wqy - microhei sudo aptitude install ttf - wqy - zenhei Then press \"Ctrl+,\" to open settings panel: Set [Settings -> Editor Settings -> Font Family] as: DejaVu Sans Mono , 文泉驿正黑 But Chinese characters can't be displayed in preview window. Toggle Tree View Use ctrl-\\ to toggle tree view. alt-\\ or ctrl-0 to focus it. Markdown editing and preview Use Ctrl-Shift-M to toggle preview panel. Install some advanced packages: apm search vim apm install vim - mode apm install markdown - scroll - sync apm install markdown - writer apm install markdown - preview - plus apm install markdown - format","tags":"Tech","url":"http://leetschau.github.io/underscore-highlights-problem-in-vim-markdown-documents.html","loc":"http://leetschau.github.io/underscore-highlights-problem-in-vim-markdown-documents.html"},{"title":"PHPStorm Notes","text":"On Linux (Ubuntu 14.04 LTS), openjdk-7-jdk must be installed before running PhpStorm 9.0. To startup PHPStorm, Alt-F2, input pstorm . Important Shortcuts Double Shift: search everything; Shift - Ctrl - N: open file in project (fuzzy find); Alt - F12: switch focus between editor and terminal (you can use fzf and autojump in terminal); Shift - ESC: hide navigation bar; Alt-1: Toggle and focus navigation bar; ESC: focus editor; Editor IdeaVim :q : close file; :vs : split vertical; Ref: Keyboard Shortcuts You Cannot Miss ;","tags":"Tech","url":"http://leetschau.github.io/phpstorm-notes.html","loc":"http://leetschau.github.io/phpstorm-notes.html"},{"title":"eCommerce Framework","text":"Magento : PHP, Zend Framework, bitnami Node extension with Magento: spree : Ruby on Rails Magento","tags":"Tech","url":"http://leetschau.github.io/ecommerce-framework.html","loc":"http://leetschau.github.io/ecommerce-framework.html"},{"title":"Share One Users Collection between Multiple Meteor Apps","text":"We are running a website and a backend data management system, both are meteor web servers. The backend needs fetch data from the website. So they have to share one database, and the same \"users\" collection for both. That means one can register on the website and login to the backend, which is obviously unacceptable. To distinguish users of the website and the backend, I choose package alanning/meteor-roles . All the backend users will have roles ['backend', 'admin'] , while website users haven't. In \"safe\" environment, backend has its own user registration entry. Users registered there will be given above roles automatically. Put the following codes into server side JavaScript files to achieve above goal (based on examples/rolesWithAccountsUI on meteor-roles): var ROLE_NAME = ' editor ' ; var GROUP_NAME = ' backend ' ; Meteor . publish ( ' mallData ' , function () { if ( Roles . userIsInRole ( this . userId , ROLE_NAME , GROUP_NAME )) { console . log ( ' pass check ' ) ; return Mall . find () ; } else { console . log ( ' not pass check ' ) ; this . stop () ; return ; } } ) ; Meteor . startup ( function () { Accounts . onCreateUser ( function ( options , user ) { Roles . setRolesOnUserObj ( user , ROLE_NAME , GROUP_NAME ) ; if ( options . profile ) { user . profile = options . profile } return user ; } ) ; } ) ; Roles . setRolesOnUserObj = function ( users , roles , group ) { if ( ! users ) throw new Error ( \" Missing 'users' param \" ) if ( ! roles ) throw new Error ( \" Missing 'roles' param \" ) if ( group ) { if ( ' string ' !== typeof group ) throw new Error ( \" Roles error: Invalid parameter 'group'. Expected 'string' type \" ) if ( ' $ ' === group [ 0 ] ) throw new Error ( \" Roles error: groups can not start with '$' \" ) // convert any periods to underscores group = group . replace ( / \\. / g , ' _ ' ) } // ensure arrays to simplify code if ( ! _ . isArray ( users )) users = [ users ] if ( ! _ . isArray ( roles )) roles = [ roles ] // remove invalid roles roles = _ . reduce ( roles , function ( memo , role ) { if ( role && ' string ' === typeof role && role . trim () . length > 0 ) { memo . push ( role . trim ()) } return memo }, [] ) // if roles is empty , quit if ( roles . length === 0 ) return // ensure all roles exist in ' roles ' collection existingRoles = _ . reduce ( Meteor . roles . find ( {} ) . fetch () , function ( memo , role ) { memo [ role . name ] = true return memo }, {} ) _ . each ( roles , function ( role ) { if ( ! existingRoles [ role ] ) { Roles . createRole ( role ) } } ) // ensure users is an array of objects _ . each ( users , function ( user ) { if ( ' object ' !== typeof user ) { throw new Error ( \" Expected 'users' argument to be an object or array of objects \" ) } } ) // Set the roles on the actual user object if ( group ) { // roles is a key / value dict object _ . each ( users , function ( user ) { user . roles = {} user . roles [ group ] = roles } ) } else { // roles is an array of strings _ . each ( users , function ( user ) { user . roles = roles } ) } } Now any user outside 'backend' group, or without 'editor' role, can't get any data from server. Unfortunately Internet is unsafe at all. So the registration entry has to be removed from the accounts-ui: Meteor . startup ( function () { Accounts . config ( { forbidClientAccountCreation : true } ); } ); Now if you want give a website personnel rights to edit data through backend, first he should register on the website, then you define his role manually in mongo console: > db . users . find ({ \"emails.0.address\" : \"user@123.com\" }, { \"emails\" : 1 }) > db . users . update ({ _id : \"PM36t6eRmuC9oELdu\" }, { $ set : { roles : { \"backend\" : [ \"editor\" ]} } }) First find the id of the user (here is \"user@123.com\") by his email address. Then add group and roles to the user (say the id of the user is \"PM36t6eRmuC9oELdu\").","tags":"Tech","url":"http://leetschau.github.io/share-one-users-collection-between-multiple-meteor-apps.html","loc":"http://leetschau.github.io/share-one-users-collection-between-multiple-meteor-apps.html"},{"title":"Autopubsh and Insecure Package in Meteor","text":"Collection definitions in root directory autopublish package exists: data can be seen and updated; Remove autopublish package: data can't be seen; Add publish method in server js file, and subscribe methods in client js file: data can be seen and updated; # in server : Meteor . publish ( ' mallData ' , function () { return Mall . find () ; } ) ; # in client : Meteor . subscribe ( ' mallData ' ) ; Remove insecure package: data can be seen, but can't be updated; Add an allow rule in js file in root directory: only \"status\" field can be updated. Mall . allow ( { update : function ( userId , doc , fieldNames , modifier ) { if (( fieldNames . length === 1 ) && ( fieldNames [ 0 ] === ' status ' )) { return true ; } } } ) ; Meanwhile inserting and remvoing operations will be denied by the server. Ref: METEOR SECURITY 101 by Josh Owens.","tags":"Tech","url":"http://leetschau.github.io/autopubsh-and-insecure-package-in-meteor.html","loc":"http://leetschau.github.io/autopubsh-and-insecure-package-in-meteor.html"},{"title":"Meteor实施案例","text":"国外 blonk : 找工作，移动APP，iOS, Android, 双方在感兴趣的对方上点Yes，如果匹配成功开始聊天； respond.ly : 基于Twitter的客户服务和协作平台； Flowkey : 教育类，钢琴在线教学，web, iOS, Android，音频对比，反馈建议，用户量：50,000+ verso : 教育类，移动APP，iOS, Android，教师添加视频，学生写反馈，100多个国家的几千所学校； Workpop : 找/应聘小时工，Web App; Classcraft : 教学类应用，平台：Web, iOS，学习变为角色扮演，老师定义学生角色，获取经验值； Lookback : 移动应用用户体验反馈软件，原理：屏幕录制（记录手指位置和拖动），然后发送；平台：Web, iOS, Mac, Android； Tuniliv : 突尼斯货运与物流系统； Telescope : 软件平台，论坛模板； 国内 牛展网 : 会展服务； 毛豆网 : 在线教育/外包； 生态系统 [node.js] [mongodb] [bootstrap] [meteoric] 参考资料 What are the larger examples of Meteor? 关于Meteor的5个误解 https://www.meteor.com/case-studies/build-apps-with-meteor","tags":"Tech","url":"http://leetschau.github.io/meteorshi-shi-an-li.html","loc":"http://leetschau.github.io/meteorshi-shi-an-li.html"},{"title":"Meteor Development Collaboration","text":"Meteor developer Tom and Bob are in different location. Tom is the main coder and Bob is the mentor. Their remote collaboration mode is: Voice talk through Moxtra/QQ/Skype; Code and browser sharing through a VPS on Internet; VPS Configuration The IP address of the VPS is 100.101.102.103. Add a user \"nf\" as the SSH forwarding user: useradd - m nf passwd nf To allow remote port forwarding to bind to non-loopback addresses, add GatewayPorts yes into /etc/ssh/sshd_config (NOT ssh_config), then service ssh reload . Without this, the listening port on VPS is bind to \"127.0.0.1\" instead of \"0.0.0.0\". You can find out it with netstat -lnput|grep 3000 , when the forwarding port is 3000. Before adding GatewayPorts yes : root @iZ25459xzbtZ : ~ # netstat - lnput | grep : 3000 tcp 0 0 127.0.0.1 : 10022 0.0.0.0 : * LISTEN 24588 / 1 After adding GatewayPorts yes : root @iZ25459xzbtZ : ~ # netstat - lnput | grep : 3000 tcp 0 0 0.0.0.0 : 10022 0.0.0.0 : * LISTEN 24588 / 1 The 4th item (binding IP) is changed from loopback (127.0.0.1) to public interface (0.0.0.0). Code editor sharing Tom install tmux on his Linux OS. And start up a tmux session as the develop environment: tmux new - s myWebsite To make Bob ssh to his laptop, Tom need run the following command on his laptop: ssh - g - R 10022 : localhost : 22 nf @100.101.102.103 where -g means \"Allows remote hosts to connect to local forwarded ports\", -R means a \"Remote\" port forwarding is created with this ssh connection (which means when this ssh connection closed, the port forwarding will be dropped, too). In \"10022:localhost:22\", the first part is the port number on remote host, the second and third is the hostname and port number of local machine. So the whole command means: Tom ssh to server 100.101.102.103 as user nf, while creating a port forwarding. So all connect to 10022 on remote host, will be forwarded to Tom's laptop on port 22. After login, the forwarding tunnel is created. On VPS, verify port 3000 is bind to public interface instead of loopback: netstat - lnput | grep 3000 Bob need run the following command to join Tom: ssh - p 10022 tom @100.101.102.103 tmux attch - t myWebsite Notice that the user name is \"tom\" instead of \"nf\" in above command. And the password is tom's on his laptop, instead of nf's on the VPS. So if Bob want to review Tom's codes, he should: Get a VPS with a public IP \"100.101.102.103\", create a user (say, nf); On the VPS, copy Tom's SSH public key into /home/nf/.ssh/authorized_keys. Let Tom run ssh -g -R 10022:localhost:22 nf@100.101.102.103 ; SSH to Tom's host with ssh -p 10022 tom@100.101.102.103 ; and start a tmux session: tmux new -s foo ; Let Tom attach to the session: tmux attach -t foo ; After job is done, let Tom logout from the VPS; Web serer sharing Tom run this command to create the tunnel: ssh - g - R 3000 : localhost : 3000 nf @100.101.102.103 Bob can visit the web server with url \"100.101.102.103:3000\". Ref: http://serverfault.com/questions/379344/selecting-interface-for-ssh-port-forwarding https://juliansimioni.com/blog/howto-access-a-linux-machine-behind-a-home-router-with-ssh-tunnels/","tags":"Tech","url":"http://leetschau.github.io/meteor-development-collaboration.html","loc":"http://leetschau.github.io/meteor-development-collaboration.html"},{"title":"Chinese Characters Can't Be Displayed Correctly in git log","text":"On Ubuntu 14.04, cat can display Chinese characters correctly. But in vi and less Chinese characters can't display correctly. Solution: Run export LC_ALL=en_US.UTF-8 before git log . If it works, add this line into /etc/environment. If it doesn't work, run export LANG=en_US.UTF-8 . If it doesn't work, run apt-get install language-pack-en-base . In vim, run set enc=utf-8 . Ref: http://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue http://stackoverflow.com/questions/5166652/how-to-view-utf-8-characters-in-vim-or-gvim","tags":"Tech","url":"http://leetschau.github.io/chinese-characters-cant-be-displayed-correctly-in-git-log.html","loc":"http://leetschau.github.io/chinese-characters-cant-be-displayed-correctly-in-git-log.html"},{"title":"Development Collaboration with Pull Request","text":"Say your partner is Tom. Fork Tom's repository; Clone your forked repository to your laptop; Commit modificatioins to your laptop repository; Push modifications to your forked repository; Send a pull request in your forked repository on github website; Tom accept your request and merges into his repository; In your laptop repository, add upstream repository as a remote source; Sync with the upstream repository with git fetch and git merge ; This is a whole cycle. Repeat above steps to collaborate with Tom. Ref: How to update GitHub forked repository? Pushing to a remote Syncing a fork","tags":"Tech","url":"http://leetschau.github.io/development-collaboration-with-pull-request.html","loc":"http://leetschau.github.io/development-collaboration-with-pull-request.html"},{"title":"Running Meteor and Node App on Ubuntu 14.04 VPS","text":"Setup Environment with MUP On your laptop, install mup with npm install -g mup . In a new directory, create a mup project with mup init . Set \"setupMongo\", \"setupNode\" and \"setupPhantom\" to \"true\" in mup.json, and run mup setup . Run Apps To install the first Meteor app, mup deploy . To install the second (there has been a Meteor app is running) or more, set \"setupMongo\", \"setupNode\" and \"setupPhantom\" to \"false\" in mup.json, change \"appname\", \"app\" and values in \"env\" accordingly. Finally run mup deploy . For Node app, first get the source code with git, then run it with forever, which is installed by mup: aptitude install git git clone ... projHome cd projHome npm install # confirm port number in config . js forever start app . js # when the main script is \"app.js\" Get the app status with forever list . If the app can't start, print logs with forever logs 1 (if the target app's index in forever list is 1). Setup Routes Note: MUP requires Node v0.10.36 or later. So do NOT install node with aptitude install nodejs .","tags":"Tech","url":"http://leetschau.github.io/running-meteor-and-node-app-on-ubuntu-1404-vps.html","loc":"http://leetschau.github.io/running-meteor-and-node-app-on-ubuntu-1404-vps.html"},{"title":"基于ionic的移动网页开发","text":"meteor-ionic Guide 是整体框架的说明。 文档中心： Ionic Documentation ， 常用的包括界面组件 CSS Components 和 图标库 ionicons （可以输入名称搜索对应图标，如\"telephone\", \"home\"等）。 Header, Footer字体太小问题 在 ... 里增加下面两行代码： < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" > < link href = 'http://fonts.googleapis.com/css?family=Roboto:400,300,500' rel = 'stylesheet' type = 'text/css' > Header上登录注册按钮覆盖退回按钮问题 下面的代码不会出现覆盖问题： {{ # contentFor \"headerButtonLeft\" }} {{ > ionNavBackButton }} {{ / contentFor }} {{ # contentFor \"headerTitle\" }} <div class= \"col text-right\" > <button class= \"button button-clear button-stable\" > 登录 </button> <button class= \"button button-clear button-stable\" > 注册 </button> </div> {{ / contentFor }} 如果在 <div class=\"col text-right\"> 外面加上一层 <div class=\"bar bar-header bar-positive\"> ， 则会覆盖\"headerButtonLeft\"中定义的返回按钮。 另： {{> ionNavBackButton}} 中可以添加path（返回指定route）和text（按钮说明文字）属性。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-ionicde-yi-dong-wang-ye-kai-fa.html","loc":"http://leetschau.github.io/ji-yu-ionicde-yi-dong-wang-ye-kai-fa.html"},{"title":"Manage Nodejs App with Forever","text":"forever is A simple CLI tool for ensuring that a given script runs continuously. For now it only supports nodejs scripts. It provides functions like nohup in shell, but much more. To start your script, run forever start -w app.js instead of node app.js . The \"-w\" option will watch the file changes. So update website is simply run git pull ... on your production host, forever will find the changes in your sources and restart server (like Meteor app in develop mode). List all running forever managed scripts with forever list . Find out their logs location with forever logs . Then you can use tail -f to watch the log of a script in real time. Print the log of a script with forever logs <script-index> , for example: forever logs 0 . You get the index from the output of forever logs .","tags":"Tech","url":"http://leetschau.github.io/manage-nodejs-app-with-forever.html","loc":"http://leetschau.github.io/manage-nodejs-app-with-forever.html"},{"title":"Transport JavaScript Objects between Meteor Pages via URI","text":"Tips object -> String -> object: JSON.stringify -> encodeURI -> | another page | -> decodeURI -> JSON.parse Use \"&\" to connect multiple query items in uri; Code Demo On page 1: var filterObj = { year : '2016' , pos : '中国' } ; var filterStr = JSON . stringify ( filterObj ); var enc = encodeURI ( filterStr ); console . log ( enc ); var myRoute = \"/results/2015/pages/1?type=basic&filter=\" + enc Router . go ( myRoute ); On page 2: var queryType = this . params . query . type ; var filterStr = this . params . query . filter ; var dec = decodeURI ( filterStr ); var filterObj = JSON . parse ( dec ); console . log ( filterObj ); Ref matejkramny's answer in String to object in JS ; JavaScript decodeURI() Function ; vartec's answer in How to pass multiple parameters in a querystring ;","tags":"Tech","url":"http://leetschau.github.io/transport-javascript-objects-between-meteor-pages-via-uri.html","loc":"http://leetschau.github.io/transport-javascript-objects-between-meteor-pages-via-uri.html"},{"title":"Learning Resources for Programming Language Theory","text":"A practical theory of programming ; Programming language theory on Wikipedia ; Programming Language Pragmatics by Michael L. Scott ;","tags":"Tech","url":"http://leetschau.github.io/learning-resources-for-programming-language-theory.html","loc":"http://leetschau.github.io/learning-resources-for-programming-language-theory.html"},{"title":"Trace File Change History in Git Repository","text":"The website need hide some menu items under developing, by comment out the html codes (at line 19~24 in file \"client/comTemp.html\"). But last night we found they reappeared in the newest version. Apparently someone used the older version (in which they were not commented out) overwrite the latest version by error (without intention). How to find out who, at which commit make this mistake? Step 1 : get the error version. $ git blame -L 19,24 client/comTemp.html dc7d385a (Tom 2015-06-26 17:39:28 +0800 19) <li> 8b64184a (Bob 2015-05-04 19:32:43 +0800 20) <a href= \"/mall\" > Mall </a> 6bb3ba70 (Franky 2015-05-04 15:45:50 +0800 21) </li> 6bb3ba70 (Franky 2015-05-04 15:45:50 +0800 22) <li> 8b64184a (Bob 2015-05-04 19:32:43 +0800 23) <a href= \"/services\" > Services </a> dc7d385a (Tom 2015-06-26 17:39:28 +0800 24) </li> Here the line 19 should be <!--<li> and line 24 should be </li>--> , to hide \"Mall\" and \"Services\", which are under developing. Step 2 : get the newest right version. The wrong commit is \"dc7d385a\", so we have to find the nearest change before it: $ git blame -L 19,24 'dc7d385a&#94;' -- client/comTemp.html 96269db1 (Bob 2015-06-10 15:36:31 +0800 19) <!--<li> 8b64184a (Bob 2015-05-04 19:32:43 +0800 20) <a href=\"/mall\">Mall</a> 6bb3ba70 (Franky 2015-05-04 15:45:50 +0800 21) </li> 6bb3ba70 (Franky 2015-05-04 15:45:50 +0800 22) <li> 8b64184a (Bob 2015-05-04 19:32:43 +0800 23) <a href=\"/services\">Services</a> 96269db1 (Bob 2015-06-10 15:36:31 +0800 24) </li>--> So we know Mall and Services were commented out at commit 96269db1, 2015-06-10, and uncommented by error at commit dc7d385a, 2015-06-26, by Tom. Step 3 : show code changes. $ git show dc7d385a -- client / comTemp . htm ... - <!--< li > + < li > < a href = \" /mall \" > Mall </ a > </ li > < li > < a href = \" /services \" > Services </ a > - </ li >--> + </ li > ... It shows in commit dc7d385a, two lines were deleted: \" \", while two lines were added: \" \" and \" \". Step 4 (optional) : revert the commit git revert dc7d385a Ref: http://stackoverflow.com/questions/14836696/delete-last-commit-in-bitbucket","tags":"Tech","url":"http://leetschau.github.io/trace-file-change-history-in-git-repository.html","loc":"http://leetschau.github.io/trace-file-change-history-in-git-repository.html"},{"title":"Control Linux Server with Tmux on Windows Client","text":"I've tried Kitty and MobaXterm as SSH client. But under tmux, the right \"Alt\" key doesn't work, while it works good in Git Bash.","tags":"Tech","url":"http://leetschau.github.io/control-linux-server-with-tmux-on-windows-client.html","loc":"http://leetschau.github.io/control-linux-server-with-tmux-on-windows-client.html"},{"title":"Meteoric Notes","text":"meteor create ionicEx cd ionicEx meteor add iron:router fourseven:scss@2.0.0 meteoric:ionic-sass meteoric:ionicons-sass meteoric:ionic","tags":"Tech","url":"http://leetschau.github.io/meteoric-notes.html","loc":"http://leetschau.github.io/meteoric-notes.html"},{"title":"Tails System","text":"Tails 1.4 can not be installed with YUMI. It will cause a \"setup chroot failure\". There is a bug report on Tails for this: Chroot browsers don't work when Tails is manually installed with YUMI . After start up with USB key, press after the \"BOOT\" prompt. I tried all 3 options. Only \"menu_486\" could boot the system. Once logged in, connect WiFi, use \"unsafe_browser\" to check the internet connection. If it's OK, use Tor browser.","tags":"Tech","url":"http://leetschau.github.io/tails-system.html","loc":"http://leetschau.github.io/tails-system.html"},{"title":"Tmux Configurations for Unity Desktop","text":"Verified on Ubuntu 14.04, 2015-6-18. Prefix M-f will activate the Unity HUB, so use M-q as tmux prefix: set -g prefix M-q . Get Help List all shortcuts: prefix ? List all commands: tmux list-commands Open a new Window/Pane bind -n M-/ split-window -h bind -n M-- split-window -v bind -n M-n new-window Resize Pane in a Window Use Ctrl- arrow key to resize pane: bind - n - r &#94; Left resize - pane - L 5 bind - n - r &#94; Down resize - pane - D 5 bind - n - r &#94; Up resize - pane - U 5 bind - n - r &#94; Right resize - pane - R 5 Use M-z to maximize/restore a pane: bind -n M-z resize-pane -Z . Rotate Panes in a Window Use default settings: prefix + Space Jump between Window and Pane Alt-(1~9): jump between windows; Alt-h/j/k/l: jump between panes; bind - n M - 1 select - window - t 1 bind - n M - 2 select - window - t 2 bind - n M - 3 select - window - t 3 bind - n M - 4 select - window - t 4 bind - n M - 5 select - window - t 5 bind - n M - 6 select - window - t 6 bind - n M - 7 select - window - t 7 bind - n M - 8 select - window - t 8 bind - n M - 9 select - window - t 9 bind - n M - k select - pane - U bind - n M - j select - pane - D bind - n M - h select - pane - L bind - n M - l select - pane - R Move Window Moving window behaves different with i3wm. If the target window exists, you have to use join-pane , otherwise break-pane . I use if-shell to test if the target window exists. Then add target window number provided by user (%1, which means the first user-input parameter) after \"-t\" option of join-pane . The default target format is #{session_name}:#{window_index}.#{pane_index} . See man tmux for details. bind - n M - i command - prompt - p \" move current pane to window: \" \" if-shell 'tmux list-windows |grep \\ \" &#94;% 1 \\ \" :' 'join-pane -t:\\ \" % 1 \\ \" ' 'break-pane' \" Other helpful resources Use &#94;A to represent \"Ctrl-A\". Shutdown visual alerts: setw - g monitor - activity on set - g visual - activity off Commands clock-mode : display a large clock on the terminal Shortcuts bind - n M - a command - prompt bind - n M - r command - prompt - p \"rename window name to:\" \"rename-window '%%'\" bind r source - file ~/ . tmux . conf \\ ; display \"Reloaded!\"","tags":"Tech","url":"http://leetschau.github.io/tmux-configurations-for-unity-desktop.html","loc":"http://leetschau.github.io/tmux-configurations-for-unity-desktop.html"},{"title":"Video Player on Linux","text":"SMPlayer 9/0: volume down/up; Ctrl-P: preferences; Ctrl-L: toogle play list; ,/.: play previous/next (need modify) Customize hotkeys: Options -> Preferences -> Hotkeys VLC Ctrl-P: preferences; Ctrl-L: toogle play list; Customize hotkeys: Preferences -> Hotkeys Hotkeys: f: toogle full screen; t: show time; m: toogle mute;","tags":"Tech","url":"http://leetschau.github.io/video-player-on-linux.html","loc":"http://leetschau.github.io/video-player-on-linux.html"},{"title":"Ubuntu 14.04中通过ADSL连接网络","text":"有时不方便使用无线网络，需要通过有线连接的方式通过ADSL上网。 下面的方法在Ubuntu 14.04上验证通过（2015年6月10日于百万庄15楼）。 Unity桌面环境 在Ubuntu 14.04的Unity桌面上，右上角点击网络图标，弹出菜单上点击最后一项：Edit Connections... 弹出\"Network Connections\"对话框，点击\"Add\"按钮， \"Choose a Connection Type\"中选择\"Hardware -> DSL\"，点击\"Create\"按钮， 在弹出的\"Edit DSL ...\"对话框中，在\"Connection name\"里填上连接名称，比如\"MyDSL\"， 然后在\"DSL\"标签页中，\"Username\"和\"Password\"分别填上ADSL的帐号名和密码， \"Service\"项留空，点击\"Save\"按钮。 确认网线已插入，点击桌面右上角网络图标，网络列表里可以看到\"MyDSL\"，点击之，就连接上了ADSL网络。 参考： How to create DSL (PPPoE) connection on Ubuntu - YouTube i3wm命令行环境下 首先运行 pppoeconf （注意不是pppconfig），输入ADSL的用户名和密码，其他选型都使用默认值。 安装完成后运行 ip addr 可以看到多了一个\"ppp0\"网卡，用 plog 可以查询状态。 用 ps aux|grep ppp 可以看到多了一个pppd服务。 配置好后，再次连接ADSL网络时， 使用 pon dsl-provider 启动服务，可以在输入 pon 后使用 键列出可用的选项。 使用 sudo poff 断开ADSL网络。 参考： ADSLPPPoE","tags":"Tech","url":"http://leetschau.github.io/ubuntu-1404zhong-tong-guo-adsllian-jie-wang-luo.html","loc":"http://leetschau.github.io/ubuntu-1404zhong-tong-guo-adsllian-jie-wang-luo.html"},{"title":"MongoDB数据管理平台产品定义和选型","text":"目标定位和用户定义 数据管理平台是商业网站的产品数据支持系统，它的用户是企业的业务人员，没有技术背景， 无法使用MongoDB的命令行工具以及GUI客户端（如Robomongo等）操作数据。 需要通过浏览器维护产品数据，对数据进行增删改查操作， 功能需求 数据管理平台的用户是网站数据的维护者，与商业网站的用户完全不同； 数据管理平台是一个Web服务; 每个用户有自己的权限，包括能够访问哪些collection，以及这个collection中的哪些documents； 目前这个系统只针对MongoDB; 能够通过Web界面对目标MongoDB进行数据的增删改查操作； 实现方法 使用Meteor作为Web框架； 系统是一个独立的Meteor项目，而不是一个package； 系统选型 目前试用了两个Meteor package，两个node.js包，均不符合要求。 yogiben/meteor-admin : 登录界面上的注册(sign-up)功能有问题， 点击\"Register\"按钮界面僵死;登录后版式混乱重叠； Houston : 安装简单，添加包后就可以使用了， 主要问题是使用产品库的Users表，与网站用户混在了一起； 添加数据页面不能根据数据的Schema定义，只能模仿库里现有的document的结构； KeyStoneJS : Nodejs包，部署和使用相对比较方便，主要问题见 我的问题 ; mongo-express : nodejs包，启动后浏览器访问时报404错误，原因未知； 其他说明 系统不是使用MongoDB的GUI客户端，是因为使用这些客户端需要了解MongoDB语句，不符合用户定义。","tags":"Tech","url":"http://leetschau.github.io/mongodbshu-ju-guan-li-ping-tai-chan-pin-ding-yi-he-xuan-xing.html","loc":"http://leetschau.github.io/mongodbshu-ju-guan-li-ping-tai-chan-pin-ding-yi-he-xuan-xing.html"},{"title":"Penetrate GFW with sshuttle","text":"Comparing with shadowsocks, sshuttle is a much lightweight, open source alternative. All you need is a ssh server outside GFW. To install, git clone its repository from github, or use pip install . Then run the following command on client: sshuttle --dns -r username@sshServer -x 192.168.0.0/16 -x 127.0.0.1 -D 0/0 . Here option \"--dns\" is necessary to avoid DNS pollution inside GFW. Add -v or -vv option ONLY for debug purpose, for it decreases connecting speed a lot. -r means \"remote\", so add your remote host outside GFW after it. -x means excluding all IPs in 192.168.x.x and localhost from forwarding. -D means start server as a daemon. The last part of this command specifies which connections on client to use by this proxy, \"0/0\" means all connections, which is the most common case. For convenience, add the following lines into ~/.bash_aliases: alias sv = \"sshuttle --dns -r username@sshServer -x 192.168.0.0/16 -x 127.0.0.1 -D 0/0\" alias lv = \"pgrep sshuttle\" alias kv = \"pkill sshuttle\" Now you can use sv to start the vpn, lv to list vpn, and kv to kill vpn.","tags":"Tech","url":"http://leetschau.github.io/penetrate-gfw-with-sshuttle.html","loc":"http://leetschau.github.io/penetrate-gfw-with-sshuttle.html"},{"title":"Store Small Images in MongoDB via Base64","text":"The following codes save a image file first. Then encoding it into Base64 string, and decoding it back into binary data (image). Both images are the same. So the encoding/decoding works. var fs = require ( \"fs\" ); var image_origial = \"logo.png\" ; fs . readFile ( image_origial , 'binary' , function ( err , original_data ){ fs . writeFile ( 'image_orig.png' , original_data , 'binary' , function ( err ) {}); var base64Image = new Buffer ( original_data , 'binary' ). toString ( 'base64' ); console . log ( \"base64 str:\" ); console . log ( base64Image ); console . log ( base64Image . length ); var decodedImage = new Buffer ( base64Image , 'base64' ). toString ( 'binary' ); console . log ( \"decodedImage:\" ); console . log ( decodedImage ); fs . writeFile ( 'image_decoded.png' , decodedImage , 'binary' , function ( err ) {}); }); Display Base64 string in html: <template name= \"myform\" > <img id= \"fromBase64\" src= \"data:image/png;base64, {{ getPic }} \" > </template> Corresponding JavaScript code: Template . myform . helpers ( { getPic : function () { return \" iVBORw0KGgoAAAANSUhEUgAAAO8AAAB3CAIAAABkJ4DAAAAAA3NCSVQICAjb4U/gAAAAEHRFWHRTb2Z0d2FyZQBTaHV0dGVyY4LQCQAABkhJREFUeNrt3f1XUnccwPHvBbygPKlApCZyHJhSK52nddzD2VZznbmH07/gX9bv237ZD+vsoZ2zzpa2s1yd0kpXCZYikYCKyoMX9gNgCogIWKjv10/Xyy0z3nz93CugtBhZE8CRoOK/ANQMUDNAzQA1g5oBagaoGaBmgJpBzQA1A9QMUDOoGaDmOpJOxeOJ9YSS4o49ljRHImJlyb8wNRf0heKb2V1qs9XicrT32htliXv5uJAO+2tPUrHQnYknU8tK0Vvl1vZP+x0dOopm0qj/lDeCN/+a3i1lIUQitPDr2LP5ZJp7mprrm7I+OfHEm8h9JfrWc2d7v/q4/+oHns887ad0ucNiYV+08kH62vXxott7Hgzm5r0CjkdfriqZlTYZeX53Jbtf3+H+8l2rMfvYbGxpNjs7bTOT0+PzMU1r22mT+oD+PYX55u0ZHRkiMmoufrq34X/688P1/N1Gx/BZq1ElUvHo8+BaUjY6bE2yuqnn/EDPubSQDnBoJlbOAiuvOeq9/31+zapTg4PDdo2y6v/lljeQEkIIrd317YDNUMUYVXpmyIu46MGEztpcAW2bQS2E8mr2RSA3HscDL6bXLIPGynPeavHa9fGi2xX0DWre8Z3E4Dw/6tzPRY+1hR9v+iI7d7Z63vvGqa3t+S/5UnMNqa3dHXa/L6AIIYR8ouO0XiWESEaXVw/+czNUMDfXTCqdVkmSECIVj869jCa1xi6bXpaEUDYejN27U5DznmtzOQvt9vGDxKm5FpS1B/9M3QmlzB3dl86eaN5+IS4Vn52c+uNFPHOmaO9x92dvlrRGg0V7UBfaS8zWoOaSMUdmfxhbzF7j0JnPdJ/sam3USZurkfB/swveaO5HgCbH1aGOFnW1dRaWuucqTtnUXK50cnn8z4fTsZIHyZaPP3S5GlVVplzO0svCTM3VDc3xyMS/M5Ph4k/V0JjbPxnsdOhUFXS828pa9KatRZqaqbnKJVpZ8i9M+oK+cDwXtdrQ0uLqaj/TpucZodR8WLNOJJRNoZJljYaIjx/N0XpsqmWtWuZePa54XSCoGaBmgJoBagY1A9QMUDNAzQA1g5oBagaoGaBmUDNAzQA1A9QMUDOoGaBm4M2rr9dse/2vuEtQsaP1fhpg0gCoGaBmgJoBagY1A9QMUDNAzQA1g5oBagaoGaBmUDNAzQA1A9QMFHMkfpdrWokEA4/nI0vR+HpK1dTY2Gq19na2tDTw24mPl8P+usB0PLI4dtfr3Si8SdvV5/7IaeS3xlPz4Ug5EfL9dNsf2f0Ik9PzdZ9ZS9DMzXW/LIfHJl6n3GBs7XM73+891WdvasjtXPFO31pMpLmfmZvrWyrk9c0ms49J++kzl7sNuTX41EBk4ffbc4GUEELxPfKH7F2Wih62166Pj44MFW7nHVPibyj6R8DavJOy8Ww+ltmU7a5Lr1MWQkja5vZLAxZt5qNYcGZFqf4Tjo4M7Rbu6MhQptrCDbA2lzFmJNcD2ZjVnc5mXf5kLOmsJ7vkpZmEECIZXNlMN6v3OzwXLsa7BbpVeeEGqLmMmpXN5NbAXPQsT5JNshAJIYTYjKfSQlR2KlhiPS6a+G4DCah5V5JGI2c3E5FYWhgK5+pEOJ77IrWVLMzlDL5FW8/bSdzUvFfNDfqTTeLluhAi9fxpaM1i0+8INr0WmPdlV29tm1kj7TPl7VNyiXNBFmZqrsnpq87V2Xh/ekMIoSw9/e2RZri3RZ89p02vB3037kc2Mx/pbS7j/k52KyiycGIma2reR85mR3evb+pxTAiRDnsff+c3Ou1Go1pZXQ57Q4ncYQ1uT1tzdVduMuv0nnVuP4CzQGrepwbThQtdkTHfYub6W3zVO7eaV7ytp/eiTVOrHwWWbppV+e2vcIf7sWhsv3zRYVcXH62tbs/wO4aGWnyicgLdPlsTFmtzJeTmjs8viht/zwV2/IREsrg9X7iMNXyGxr6GDYJ+O9cGjsZ76yci89uClixuzxWXqcqU865sFA23nGoZPKi54qAli8tzxW3ieXPUfMiDXvbfC+n7nSae00zNwOHG6wJBzQA1A9QMUDOoGaBmgJoBagaoGdQMUDNAzQA1g5oBagaoGaBmgJpBzQA1A29efb3Xkdf/irsEFeMdCMCkAdSf/wFhi3LQYkpm9QAAAABJRU5ErkJggg== \" ; } } ) ; Ref: Base64 on Wikipedia ; http://base64online.org/ https://gist.github.com/gabomdq/5415569","tags":"Tech","url":"http://leetschau.github.io/store-small-images-in-mongodb-via-base64.html","loc":"http://leetschau.github.io/store-small-images-in-mongodb-via-base64.html"},{"title":"Meteor基础知识之系统篇","text":"课程目标 理解Meteor的运行环境和安装过程； 获得Linux； 能够在Linux系统中进行简单的文件操作； 为什么是Linux 请大家思考一个问题：Windows的知名度、用户数和\"易用性\"都比Linux高很多， 为什么要选择Linux作为开发和部署环境？ 要回答这个问题，首先得搞清楚：操作系统作为人类发明的数不清的工具中的一种， Windows和Linux各自的定位是什么，或者说它们的目标用户是谁？ 回顾二者的历史，不难发现Windows的目标用户是普通计算机用户， 使用计算机主要用来完成日常工作和娱乐；Linux是一群程序员为自己开发的操作系统， 设计目标是为自己和世界提供一个新的选择，一个完全自由、可定制的系统。 本质上，Windows是一件商品，它的首要目标是创造利润（养活生产者），其次是易于使用； Linux是一件自制工具，它的首要目标是易于制造（方便生产者），其次是易于使用。 这段话似乎比较虚，但你一定要记在心里，因为后续各种差异，都是这个区别的表象， 理解了这个区别，可以帮助你避免无数纠结和口水战，把宝贵的生命用在创造上，而不是选择和争论上。 Windows推崇封闭（为什么？），用户只要用它做事情就好，不需要也不能深入到系统内部，了解它的机制， Linux推崇开放，所有的东西尽可能公开，用户可以方便地了解它的运行机制， 融入自己的理解，把它变成自己喜欢的样子。 落实到实现层面，Windows喜欢二进制文件，Linux喜欢文本文件（为什么？） 用Gancarz的话说，Linux是基于文本的操作系统，Windows是基于图形的操作系统。 Windows这种风格给许多人造成的一个误解：所有的数据都需要通过某个软件来编辑、展现， 如果你不会用某个软件，那么很遗憾对应的数据你就没法用了。 这显然是很荒谬的，写在磁盘上的数据与写在纸上的数据没有任何区别， 阅读它们唯一需要的是我们的眼睛， 如果某个软件商告诉你还需要借助他们搞出来的某个软件， 那只是他们惯于使用的无中生有创造利润的伎俩而已。 所以，作为一名开发者，你有权利了解你手里的工具是怎么工作的， 你需要把自己培养成赤手空拳也能在森林里活下去的特种兵， 而不是只会用别人给你的工具按部就班生产的流水线工人。 P.S.: 这里的Linux是\"基于Linux内核的操作系统\"的简称。 获得Linux 参考 Win7下在虚拟机中安装Ubuntu14.04及硬盘下win7+Ubuntu 14.04双系统的安装的方法 . 熟悉Linux环境 首先了解一下Linux与Windows最直观的不同之处： Linux只有一个根目录，它没有\"盘符\"的概念，但仍然可以将多个逻辑分区组织在一起（它是怎样做到的？） Linux的文件夹和文件名都区分大小写； Linux的命令行（严格来说这货叫shell）是全能选手，Web开发的全部工作都可以在命令行里进行； Linux有一个神奇的文本编辑器叫vim，不同于Windows的文本编辑器，比如记事本、Word等等，它会彻底颠覆你对\"文本编辑\"这件事的理解； 下面我们结合Meteor的几个命令来初步认识一下你未来的工作环境： curl https://install.meteor.com/ | sh 命令格式说明； 管道符的作用和用法； curl ... | sh 是一种常用的远程安装范式； meteor create simple-todos 复杂命令的格式说明 Linux的简单文件操作 数据管理四项基本内容：增删改查。 ls cat echo mkdir cd rm vi 最简vi使用教程 在领略vi博大精深的文本编辑能力之前，不妨先用记事本的方法使用它： 按\"i\"键进入编辑模式； 当记事本用，但没有鼠标哦，方向键移动光标，Del/Backspace删除； 编辑完后按\"ESC\"键返回标准模式； 按下 :x 两个键保存内容并退出vi； 总结 掌握了这部分内容，你就初步理解了Meteor的开发和部署环境， 认识了Linux这个有趣的操作系统， 这是成为Meteor开发高手的第一步，难度不大，但需要你改变过去的一些习惯， 刚开始可能会不适应，但随着时间的流逝，你会越来越确信：这些付出是值得的。","tags":"Tech","url":"http://leetschau.github.io/meteorji-chu-zhi-shi-zhi-xi-tong-pian.html","loc":"http://leetschau.github.io/meteorji-chu-zhi-shi-zhi-xi-tong-pian.html"},{"title":"Run MongoDB Server on Docker in VPS","text":"Use docker mongo server and client // start server and run in background : $ docker run -- name mongoserver - d mongo : 3 . 2 // start client , quit with Ctrl - d , the container will be removed when quit : $ docker run - it -- link mongoserver : mongo -- rm mongo : 3 . 2 sh - c ' exec mongo \"$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test\" ' // stop server : $ docker stop mongoserver // start server again : $ docker start mongoserver // stop and remove server and all the data $ docker stop mongoserver $ docker rm - vf mongoserver // start a new server and run in background : $ docker run -- name mongoserver - d mongo : 3 . 2 $ docker run -- link mongoserver : mongo -- rm mongo : 3 . 2 sh - c ' exec echo \"$MONGO_PORT_27017_TCP_ADDR\" ' 172 . 17 . 0 . 4 Ref: https://hub.docker.com/_/mongo/ Use native mongo client Install mongodb client: sudo aptitude install mongodb-org-shell ; Install mongodb server and connect to it: sudo usermod - aG docker leo docker run -- name mongo3 - p 27017 : 27017 - d daocloud . io / mongo mongo > db . version () > exit Stop and restart mongodb server: docker stop mongo3 docker start mongo3 Remove mongodb completely: docker ps - a docker stop mongo3 docker rm mongo3 docker images docker rmi daocloud . io / mongo Note: You can also pull mongodb image from docker hub with docker run --name mongo3 -d mongo , but it's very slow.","tags":"Tech","url":"http://leetschau.github.io/run-mongodb-server-on-docker-in-vps.html","loc":"http://leetschau.github.io/run-mongodb-server-on-docker-in-vps.html"},{"title":"Git初体验","text":"本文是毛豆网微课程\"Git初体验\"的文稿。 Git初体验 Git有什么用？ Git是Linux创造者Linus Torvalds编写的、目前人气最旺的版本控制工具。 那么版本控制是做什么的？ 写代码免不了修修改改，比如经过一天的奋斗，你完成了一个\"寻找最萌妹子\"算法， 刚向死党炫耀，就发现选出来的居然是最萌喵星人，太没面子了，回去仔细研究一番， 发现漏了一层筛选条件，于是通宵达旦修改算法，天蒙蒙亮的时候，你发现自己的方法行不通， 需要回退到修改前的状态，换一种算法实现。但这一晚上修改了4、5个文件， 改动散布在不下十处地方，怎么把代码恢复到修改前的状态？ 这个时候，是不是希望有哆啦A梦的时光飞毯，帮你回到昨天晚上？ 是的，Git就是你要找的时光飞毯。 当然它的功能不止是在代码历史上跳跃，还有很多更炫酷的功能，但千里之行始于足下，让我们从最基本的功能开始吧！ 用Git做简单的版本控制 Git最基本的用法是在命令行环境中通过执行Git命令的方式完成的。 比如你NB闪闪的算法保存在一个叫\"zuiMeng\"的文件夹里， 第一步要做的，是启动命令行环境，用 cd 命令把\"zuiMeng\"设置为当前目录， 然后执行： git init ，这样你的\"zuiMeng\"目录就具备回到过去的魔力了。 现在你可以随意修改文件了，修改、删除都随你（当然你要作死把\"zuiMeng\"这个文件夹都删了Git就帮不了你了）， 如果对修改满意，提交你的改动到代码库： git add - A git commit - m \"commit message\" \"commit message\"一般是这次修改包含的内容，比如\"增加了过滤宠物功能\"之类的。 如果对改动不满意呢？ 执行 git reset --hard HEAD ，搞定！ 什么？你后悔了，要找回刚才的修改？ 这个Git还真能满足你，不过这就不是本课程的范围啦， 记住你现在还是个菜鸟，改代码前多动动脑子想清楚没坏处。 这样周而复始，提交了很多次，这时可以用 git log 来查看你的提交历史。 如果想回到其中的某一次，首先需要在 git log 界面中记下目标commit的hash值， 这个值很长，只记下前6位就行了，假设这个值是\"ef5a5b\"，那么要跳转到这次提交， 执行 git checkout ef5a5b ，看看你的文件，是不是变回到那次提交时的模样了？ 如果想跳回最后一次提交，除了重复上面的过程外，还有更简单的方法： git checkout master ，这是因为\"master\"是一个特殊标记，代表你的最后一次提交。 好，这就是Git的基本用法了，总结一下： 初始化代码库： git init ; 修改文件； 提交改动到代码库： git add -A ， git commit ； 查看版本历史： git log ； 回退到历史版本： git checkout <hash> . Git还能做什么？ 分布式开发 比如你在北京，刚在广州找到一位创业小伙伴，有了Git，就不用搬到广州去啦， 也不必像Subversion那样，在公网架设代码库，只要在 github 上创建一个公共代码库， 走遍天涯海角，你需要就是一个WiFi接入点了。 如果你不希望大家都能看到你们的代码，推荐把公共代码库放在 bitbucket 上。 并行开发 不管你的团队有多少开发者，大家可以同时开发不同的功能，然后合并在一起。 当然会存在冲突的风险，这里推荐一个高逼格程序员必备神器 git-flow ， 用它武装你的开发团队吧，从此妈妈再也不用担心我们代码冲突啦~ Git FAQ 我只会用Windows，能用Git吗？ 没问题！下载 msysgit 安装包，一路Next安装好之后就可以用了，除了基本的命令行，还附带了一个图形界面工具，是不是很贴心？ 那些命令记不住，能推荐一款纯图形界面的Git工具吗？ 当然可以。如果用Windows，上面介绍的msysgit的图形界面工具就很好了；如果用Linux，Git自带了gitk工具，Mac俺没用过，自己搜搜吧。 我英语不好，能给点中文资料吗？ 这个真帮不了你了，虽说Git中文资料蛮丰富的，可你的目标不是变成靠Copy/Paster大法挣千把块钱30岁以后转行产品经理的苦逼码农吧？ 如果你希望通过写代码打开一段崭新的人生，从现在开始阅读官网文档吧， 我带过那么多小弟小妹被我逼着看文档，现在他们自己混饭吃，没有一个用Baidu找中文文档看的。","tags":"Tech","url":"http://leetschau.github.io/gitchu-ti-yan.html","loc":"http://leetschau.github.io/gitchu-ti-yan.html"},{"title":"Run mongo Scripts in Shell","text":"You can query a remote mongoDB with a mongo script, print output to stdout. Then manipulate the output data with other shell utilities. For example, the following scripts get all fair names from a remote server, compare them with a local fair name set, to find out which are conflicted with the existing fair names in the local name. Some key points: \"db\" is a built-in global variable refers to the connected database, specified by the -h, -d options in mongo command line. It can be override by \"connect\" function. For example, with or without the first line, the script produce the same result when running mongo test.js : $ cat test . js // db = connect ( \" localhost/test \" ) print ( db . getCollectionNames ()) db . myCollection . find () . forEach ( function ( item ) { print ( item . name ) } ) Use \"print\" function to print result to stdout. To get command line arguments in mongo script, you must compose the evaluation string before(outside) mongo command, and you must add double quotes surrounding $exp. 1 2 3 4 5 6 7 8 9 10 #!/bin/bash TargetDB = $1 TargetCol = $2 TargetField = $3 exp = \"db. ${ TargetCol } .find().forEach( function(item) \\ { print(item. $TargetField ); });\" mongo localhost/ $TargetDB --eval \" $exp \" Ref: Write Scripts for the mongo Shell http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file","tags":"Tech","url":"http://leetschau.github.io/run-mongo-scripts-in-shell.html","loc":"http://leetschau.github.io/run-mongo-scripts-in-shell.html"},{"title":"Find Verified User in MongoDB","text":"Find a user whose email is verified. The \"emails\" field is an array. The function of \"$elemMatch\" operator is: Find a element in an array (here is emails), whose feature obey the value after \"$elemMatch\" (here its \"verified\" key is \"true\"). The code: > db . users . findOne ({ ' emails ' : { $ elemMatch : { verified : true }}}) { \"_id\" : \"rKawn5jCiuGcsPHdP\" , \"createdAt\" : ISODate ( \"2015-05-07T01:04:23.375Z\" ), \"services\" : { \"password\" : { \"bcrypt\" : \"$2a$10$T07N74DUrVrRtVGPT9dzleZlpRTlULfb9OrlWveW4NbcNpi.HkiAK\" }, \"resume\" : { \"loginTokens\" : [ { \"when\" : ISODate ( \"2015-05-07T01:04:23.902Z\" ), \"hashedToken\" : \"Xbt2ASQF61artSmrYX1Gn6DLUNvbIrz9DW0sE4tbJh4=\" } ] }, \"email\" : { \"verificationTokens\" : [ ] } }, \"emails\" : [ { \"address\" : \"leechau@126.com\" , \"verified\" : true } ] }","tags":"Tech","url":"http://leetschau.github.io/find-verified-user-in-mongodb.html","loc":"http://leetschau.github.io/find-verified-user-in-mongodb.html"},{"title":"Calculate String Length Containing Chinese Characters","text":"I want to remove all lines with only 1 Chinese character. The origin file is very large, so I have to filter out all lines with 1 character. And remove them together. Sort all lines in the file by their length is a easy way to achieve this. The content of file origin.txt is: 一十一 一十二 一十三 一十四 一十五 一十六 一十七 一十八 一十九 二十 Shell awk '{print length, $0}' origin . txt | sort - n | cut - d \" \" - f2 - | uniq > target . txt Python Node","tags":"Tech","url":"http://leetschau.github.io/calculate-string-length-containing-chinese-characters.html","loc":"http://leetschau.github.io/calculate-string-length-containing-chinese-characters.html"},{"title":"CoffeeScript Notes","text":"Format Function call line wrap: if the first parameter is an object, it can be written at the next line, with an indent. Otherwise, the first parameter must be written at the same line with the function name. The following parameters can be written at the next line with an indent.","tags":"Tech","url":"http://leetschau.github.io/coffeescript-notes.html","loc":"http://leetschau.github.io/coffeescript-notes.html"},{"title":"Git GUI Clients on Linux","text":"gitg Very intuitive branch model. You can select different branch, which will be displayed as the left-most line in the branch view panel. Cover the functions of giggle. gitk Come with git. See all branches: gitk --all . Not intuitive for branching information. git gui Install with aptitude install git-gui . Use gitk's branch-browsing interface. SmartGit SmartGit is free for non-commercial use. You have to download the installer, extract it and run. giggle Install with aptitude install giggle . You can browse the history of a file. git cola Install with aptitude install git-cola . Like git gui, use gitk's branch-browsing interface, too. Summary gitg is the first choice. SmartGit is good except its license restriction.","tags":"Tech","url":"http://leetschau.github.io/git-gui-clients-on-linux.html","loc":"http://leetschau.github.io/git-gui-clients-on-linux.html"},{"title":"Build a Simple Meteor Package","text":"Build the package $ cd ~/ docs / tmp $ meteor create -- package leechau : segmentation $ cd segmentation $ cat << EOF > segmentation . js Seg = ' segment results in Chinese ' ; Seg2 = function ( inp ) { return inp . toUpperCase () ; } EOF $ cat << EOF > package . js Package . describe ( { name : ' leechau:segmentation ' , version : ' 0.0.1 ' , // Brief , one - line summary of the package . summary : ' for chinese segmentation ' , // URL to the Git repository containing the source code for this package . git : ' https://github.com/leetschau/meteorSegmentation ' , // By default , Meteor will default to using README . md for documentation . // To avoid submitting documentation , set this field to null . documentation : ' README.md ' } ) ; Package . onUse ( function ( api ) { api . versionsFrom ( ' 1.1.0.2 ' ) ; api . addFiles ( ' segmentation.js ' , ' client ' ) ; api . export ( [ ' Seg ' , ' Seg2 ' ], ' client ' ) ; } ) ; Package . onTest ( function ( api ) { api . use ( ' tinytest ' ) ; api . use ( ' leechau:segmentation ' ) ; api . addFiles ( ' segmentation-tests.js ' ) ; } ) ; EOF $ cd ~/ docs / tmp $ meteor create testpkg $ cd testpkg $ mkdir packages $ ln - s ~/ docs / tmp / segmentation packages / segmentation Add the following lines into 'click button' of testpkg.js file: console . log ( Seg ); console . log ( Seg2 ( 'axd' )); Note: api.export is necessary in Package.onUse function of package.js file. The soft link does not contains the username part, to compare with atmospherejs.com publishing doc . So the package you created is \"leechau:segmentation\" in meteor create --package . While the soft link is \"segmentation\", not \"leechau:segmentation\".","tags":"Tech","url":"http://leetschau.github.io/build-a-simple-meteor-package.html","loc":"http://leetschau.github.io/build-a-simple-meteor-package.html"},{"title":"QGIS的坐标系和缓冲区","text":"一个图层文件(shp）有自己的坐标系，通过【右键->属性->通用->坐标参照系】查看。 直接修改坐标系导致图层对象消失，原因不明。 在图层上【右键->另存为】，在坐标系中搜索2154，选择\"EPSG:2154\"，保存在另一个shp文件中。 在QGIS窗口右下角状态栏中显示的坐标系只作显示用，与图层自己的坐标系无关。 当生成图层对象的缓冲区（主菜单->矢量->地学数据处理工具->缓冲区分析）时， 其中【缓冲距离】的单位是图层自身坐标系确定的单位， 例如WGS84的单位是degree，具体含义尚不清楚，大致是地球这个球体上两点与球心形成夹角的角度， \"EPSG:2154\"坐标系的单位是米。","tags":"Tech","url":"http://leetschau.github.io/qgisde-zuo-biao-xi-he-huan-chong-qu.html","loc":"http://leetschau.github.io/qgisde-zuo-biao-xi-he-huan-chong-qu.html"},{"title":"Penetrate GFW with ShadowSocks","text":"To browse internet with shadowsocks , Server setup You need a VPS (buy it from linode or digitalocean, etc, as the outlet), to run the server with root (say its IP address is \"123.234.23.45\"): # aptitude install python-pip # pip install shadowsocks # ssserver -p 2043 -k er@20 -m aes-256-cfb --user nobody -d start See the logs: tail - f / var / log / shadowsocks . log Or start it in foreground: # ssserver - p 2043 - k testpwd Client Client is the machine you want to bypass the GFW. Windows Download the client package (Shadowsocks-win-dotnet4.0-2.3.1.zip for now), extract it, and run. You can check its \"System Proxy\" option, which is convenient for all browsers and terminal. Linux Install For Ubuntu/Mint: $ sudo aptitude install python-pip $ sudo pip install shadowsocks Now you have a socks5 proxy. If you want convert it into a http proxy: $ sudo aptitude install polipo $ service polipo stop $ sslocal -s 123 .234.23.45 -p 2043 -b 127 .0.0.1 -l 1080 -k testpwd $ sudo polipo socksParentProxy = localhost:1080 Now setup the http proxy of your browser as localhost:8123. To use the proxy in terminal, add prefix \"http_proxy=http://localhost:8123\", for example: http_proxy = http : // localhost : 8123 curl www . xys . org Or use a text-based web browser: http_proxy = http : // localhost : 8123 lynx rsf . org where 8123 is the default port number of polipo. Using Shadowsocks with Command Line Tools in shadowsocks wiki use proxychains to achieve proxy in terminal, which didn't work for me. To summarize, you need 3 processes to access blocked website on Linux: The shadowsocks server on the VPS abroad; The shadowsocks client on your machine; The polipo to convert a socks proxy into a http proxy.","tags":"Tech","url":"http://leetschau.github.io/penetrate-gfw-with-shadowsocks.html","loc":"http://leetschau.github.io/penetrate-gfw-with-shadowsocks.html"},{"title":"Resolving merge conflicts in Git","text":"Edit the conflicted files manually. Remove \"<<<<<<<\", \"=======\" and \">>>>>>>\", then add and commit the modified files to resolve the conflict. When using git-flow, if a conflict appears when finishing a release, after resolve and commit the conflicted files, run git flow release finish 0.2.0 again. Ref: Resolving merge conflicts in Git","tags":"Tech","url":"http://leetschau.github.io/resolving-merge-conflicts-in-git.html","loc":"http://leetschau.github.io/resolving-merge-conflicts-in-git.html"},{"title":"Take Screenshot with Shutter on Linux","text":"Shutter is a multi-tab screenshot application. It save picture to disk automatically, or copy it to clipboard, as your configurations, which is very convenient. Install On Linux Mint: sudo aptitude install shutter libgoo - canvas - perl the second one is for editing the screenshot. On Ubuntu 14.04: sudo aptitude install shutter Usage Take a screenshot with shutter -s -d 5 -o output.png -e , which has a 5s delay with option -d 5 , -s means Selection method, -e means exit after capture . Start shutter with shutter . In \"Edit > Preferences > Main > Save\" check \"Automatically copy screenshot to clipboard\". In i3wm Add bindsym Print exec shutter -s -d 2 -e into file ~/.i3/config. Now you can use the Print Screen key to copy a screenshot to clipboard. The -d 2 option let you have time to open a context menu before the screenshot is taken. In Desktop Environment Add a keyboard shortcut with the same command above in i3wm.","tags":"Tech","url":"http://leetschau.github.io/take-screenshot-with-shutter-on-linux.html","loc":"http://leetschau.github.io/take-screenshot-with-shutter-on-linux.html"},{"title":"Manage Vagrant-Created VMs on Linux Mint","text":"After installation of Virtualbox, specify the VM files location in VirutalBox: [File -> Preferences -> General -> Default Machine Folder] to \"$HOME/docs/vms\"; Add alias vb='VBoxManage' into ~/.bash_aliases; List all existing VMs: vb list vms ; List all running VMs: vb list runningvms ; Print the details of a VM: vb showvminfo xxx , where xxx is one item name in output of vb list vms ;","tags":"Tech","url":"http://leetschau.github.io/manage-vagrant-created-vms-on-linux-mint.html","loc":"http://leetschau.github.io/manage-vagrant-created-vms-on-linux-mint.html"},{"title":"Checkout Remote Git Branch","text":"We clone a remote repository, check out a remote branch. $ git clone https://github.com/limingth/meteor-master-classes.git $ cd meteor-master-classes $ git branch -r origin/HEAD -> origin/master origin/fanjinhui origin/lichao origin/limingth origin/master origin/sean origin/tianchao So the remote repository's name is \"origin\". First check the initial status of the repository: $ git branch * master $ git remote show origin * remote origin Fetch URL : https : // github . com / limingth / meteor - master - classes . git Push URL : https : // github . com / limingth / meteor - master - classes . git HEAD branch : master Remote branches : fanjinhui tracked lichao tracked limingth tracked master tracked sean tracked tianchao tracked Local branch configured for ' git pull ' : master merges with remote master Local ref configured for ' git push ' : master pushes to master ( up to date ) Now checkout the remote branch: $ git fetch $ git checkout lichao Check the status of the repository after checked out: $ git br * lichao <--- master $ git remote show origin * remote origin Fetch URL : https : // github . com / limingth / meteor - master - classes . git Push URL : https : // github . com / limingth / meteor - master - classes . git HEAD branch : master Remote branches : fanjinhui tracked lichao tracked limingth tracked master tracked sean tracked tianchao tracked Local branches configured for ' git pull ' : lichao merges with remote lichao <--- master merges with remote master Local refs configured for ' git push ' : lichao pushes to lichao ( up to date ) <--- master pushes to master ( up to date ) You can see there are 2 kinds of relationship between local and remote branches: pull and push. Branch \"lichao\" and \"origin/lichao\" was linked bidirectional after checked out. Some notes: The name of the remote branch to be checked out is its full name except the \"origin/\" part, like \"lichao\" in git checkout lichao ; git fetch synchronize your local repository with remote side. So it's not necessary if you don't want sync with remote. You can verify this by git branch -avv . Ref: http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git http://stackoverflow.com/questions/1783405/checkout-remote-git-branch","tags":"Tech","url":"http://leetschau.github.io/checkout-remote-git-branch.html","loc":"http://leetschau.github.io/checkout-remote-git-branch.html"},{"title":"Build Local Package for Meteor","text":"Ref: meteor: local packages","tags":"Tech","url":"http://leetschau.github.io/build-local-package-for-meteor.html","loc":"http://leetschau.github.io/build-local-package-for-meteor.html"},{"title":"4月17日讲座文字稿","text":"嗨大家好，没有想到今天来了这么多人，非常感谢大家来捧场。下面我把今天想谈的话题发给大家，然后按这个顺序一个一个说。说完一个话题停下来大家讨论，聊到后面话题的时候，前面的问题如果大家想问，也非常欢迎发问，好的谢谢大家。 今天主要想跟大家聊聊这几个方面： 技术成长路线； 对Web技术和Meteor的理解； 关于技术创业。 首先跟大家说说自己的一个成长经历吧。我从高中的时候编程，最早接触的是Pascal，现在好多比较年轻的同学都不熟悉这个名字，后来又写了几年Delphi，实际上就是objective的Pascal。工作了之后主要用的是Java和Python，后来转向了数据分析领域，用Scala语言，计算平台是Apache的Spark，大家可能都听说过Hadoop这些分布式计算平台，但目前分布式计算方向的是从Hadoop这种磁盘落地的方式向内存计算，也就是Apche Spark的方向发展，所以又做了一段时间的Scala。 大概是从2014年的年底的时候，开始着手做Web开发，因为我在接触Web之前的已经写了很多年的代码，有一些写代码的感触，所以当时考察了很多Web开发框架，包括Ruby on Rails，也就是RoR，Java的SSH，Google的Dart，最后找到了Meteor这类纯JS的架构，一直用到现在，大概不到半年的时间。 我接触的编程语言比较多，对这个领域比较感兴趣，工作期间使用过很多种语言，包括函数式风格的Erlang和Haskell，包括像面向对象的Ruby。用语言写代码，写出来的代码能完成一定的任务，对这件事情本身非常感兴趣，所以在这方面投入了不少精力，大家可以看下我的技术博客，上面各种语言都有，杂而不精，哪位高手看到我写的比较粗浅，可别笑话我。 好，现在我们来聊聊第二方面吧！ 关于Web这块儿，我接触的时间比较短，算上前面东看西看也就一年时间，资历比较浅，所以只是谈一些个人看法，肯定是比较幼稚的。我觉得Web发展到今天，从1.0那个时代侧重于页面展示，向完全桌面应用的方向发展，比如咱们用的Meteor就是一个非常典型的一个代表，我们可以完全在客户端开发，把所有功能都放在客户端，然后等到功能测试好了之后，再把那些数据，也就是企业核心的资源了，放到Server端。 在比较了各种Web技术栈之后呢，我有个比较突出的感觉，因为我Web的背景不是很强，对HTTP协议细节也不是很了解，我看到很多技术栈的后端，对HTTP的嵌入还是比较深，如果开发人员不懂Request和Response这些概念的话，很难把自己的业务放进去，很难对开发过程有深入理解，而Meteor这个技术呢，可以让程序员只关注业务逻辑，不需要去关心网络传输协议，完全不跟HTTP协议打交道。 实际上Meteor使用了一个叫DDP的传输协议。在应用层，也就是七层协议的最高层中，DDP协议更适于做Web app的开发，比如说它的状态保持，比如说服务端向客户端推送消息，这些优势使得在它上面做开发，会天然地比基于HTTP协议的框架容易很多。 学习Meteor时做最简单的那个Tutorial的时候，如果同时开两个那个浏览器，在其中一个里面改了数据，另外一个就跟着变了，这个效果如果在一些传统的Web架构上做，可能要用到比较高深的技术，但是在Meteor上，大家可以看到完全是一种非常自然方式，没有任何人工干预就自然而然就实现了，所以这个App的体验就会比传统架构好很多。 从我们程序员的角度出发，会有一种顾虑，认为Web技术发展这么快，会不会有一天Meteor也像RoR那样，曾经一统江湖，现在已经不再高速发展了，大家会有一种疑问，Meteor会不会下一个RoR呢？ 这个问题我的理解是，技术是在不断变化的，但思想是持续的。比如Ruby on Rails吧，实际上是MVC架构，MVC这个思想其实早在上世纪七十年代，施乐公司做图形界面的时候就已经有了，所以RoR在开发思想的开创性方面不是特别强。 但是反观Meteor这个架构，它不仅仅是用纯JS写代码，实际上是在倡导一种思维方式。以前我们普遍认为网站就是一些个页面，后来用Ajax技术和其他Web 2.0技术增强了互动性。但并没有摆脱页面导向的思维，仍然会明确的区分客户端和服务端。但是Meteor实际上已经不明确进行区分了。 在这个架构下，完全可以按以前我们写桌面程序的思维方式，先在客户端把功能完全实现，再把我们需要隐藏数据和业务逻辑，挪到服务端去。这样一来，从思维方式上已经跟传统的区分这个客户端和服务端的方法不一样了。这种思维会持续地发挥它的效果，即便说过个三五年，Meteor不像现在这样爆发式增长了，即便出现新的技术栈，也会吸收这种先进的思想。 Meteor还有一个非常好的特点就是轻量化。从Java时代开始，做Web开发起码先要装一个Eclipse这种很牛的IDE，上面添加各种框架，如果你的电脑配置不高，Eclipse得起个三五分钟的，先双击一下图标，然后去喝杯茶，洗个澡，回来这个IDE终于起来了。但是我们看Meteor开发，完全在命令行里面，带一个vi这样的文本编辑器，然后再有个Firefox之类的浏览器就能搞定。 那么从GUI图形用户界面向命令行转变到底有什么好处呢？我个人的理解是：Web技术本身是一种文字展现。以前说网站做的非常的炫，各种弹窗、各种服务窗口、包括鼠标怎么追也关不掉的那种窗口，我们说做得非常炫。但后来我们发现Web逐渐发展为扁平式设计，把文字提到一个比较高的位置，对文本的打磨远高于对图形的要求，比如对字体、字号，文字风格与场景的搭配非常重视。 真正能够给我们带来价值或者说高效率传递价值的，是文字，图片只起辅助文字的作用。在Web开发当中，传来传去的就是文字，传图片也可以采用某种技术把它压缩成字符串进行传递。那么我们开发工具的文本化，实际上暗合了Web应用的这种发展趋势，所以我个人是比较推荐这种基于文字界面的开发方式。 好的，技术这块儿就先说这么多，大家感兴趣的话我们私底下交流。 下面谈一下关于搞技术的人创业的思考。 大概是去年的十月十一月份吧，我的一个同学找到我，希望能够一起来创业，他在会展行业做了很多年。 在工作当中了他感受到会展行业由于信息交流不畅，导致了很多问题，随着移动互联网出现，之前他感受到的所谓行业痛点，现在已经可以解决了。 加上之前一个做金融的同学和一个做运营的朋友，我们成立了创业团队，一起做牛展网（newfairs.com），这个网站简单理解就是会展领域的淘宝，我的理解可能不是很到位，大概就是这么一个角色。 很多同学对技术在创业当中如何发挥作用非常感兴趣，建议大家看下子柳写的那本《淘宝技术这十年》，这本书非常好地再现了淘宝发展过程中，技术所发挥的作用。 技术圈里会流传着很多硅谷的几个技术天才，用一种世人仰望的语言，做了一个横扫一切市场对手的应用，创造了财富，实现了个人财务自由。但是我在看《淘宝技术这十年》的过程当中，没有感受到这一点。初创团队所犯的那些错误，淘宝犯的也不少。所以我感觉，不要相信那些传言。现实世界中没有那么多的一刀毙命这种古龙风格的东西，技术所面临的问题，还是要认认真真一点一点地去解决的。 现在国家层面也很鼓励创业。大家可以看到创业团队如雨后春笋般出现。一夜之间到处大家都在谈创业。个人的想法的确是创业的开始，但其实并不特别重要，因为但凡你的创意靠谱，凡是你能想到的，基本上别人也能想到。 那么所谓的创意是什么？我认为是这样的：我们想到一个点，这个点可能是以前的一个问题，现在靠新技术或者新模式，能够解决它，也就是所谓的行业痛点。 当有了这个想法之后，在头脑当中的就会有一个对这个产品的构想，一个大概的框架，将来做出这个产品的话，大概希望能达到什么程度，解决什么问题。但它只是给自己设置的一个终点，而且还是个虚无缥缈不一定在哪儿的终点。那么我认为，至少需要有这么几方面帮你到达这个终点： 一个是运营，就是怎么才能让别人知道这个产品，让那些真正需要这个东西的人，能够看到有这么一个产品。 下面一个是资金，至少包括财务和这个金融两方面。一开始的时候如果只是几个人做为一种业余爱好，可能不存在怎么发展的问题，能不能挣钱也无所谓，但如果是严肃地把它当成一个事业来做的话，现金流在其中起的是像空气一样的作用，如果现金流断了，这件事儿可能就不了了之了，所以肯定要有个比较专业的人士来做这方面的工作。 最后，重要的内容当然得放后面，当然就技术了对吧！所有的想法都需要通过技术去实现，比如笑傲江湖里面，剑宗和气宗都觉得对方不怎么样。但至少剑宗比较重视剑招，不管高手低手，还能在外行面前糊弄两下，但是气宗，如果你什么都不拿，那你水平再高也没用。 创业过程中技术所发挥的作用，就像一个坚固的底盘，是所有一切想法、一切运营、资金流转，最后落实的东西。你的产品究竟怎么样，是好是坏，最后要通过技术的手段来做出实在的东西，传递到用户手上，最后形成一个闭环。 从开发者的角度，技术不仅仅是一个产品的承载平台这么一个角色，技术本身就是一个非常吸引人的领域，它不仅有是冰冷的代码，严密的理论。它的背后包含有丰富的文化背景。我们回望上世纪六七十年代到现在，Unix和Linux系统的发展历程，各种爱恨情仇，江湖恩怨，勾心斗角，忠诚和背叛，各种高大上和狗血的情节，在技术圈里都能看到。 那么好，上面几个方面我都基本上介绍了一下，如果大家还有什么问题的话，欢迎大家过来跟我互动。谢谢！","tags":"Tech","url":"http://leetschau.github.io/4yue-17ri-jiang-zuo-wen-zi-gao.html","loc":"http://leetschau.github.io/4yue-17ri-jiang-zuo-wen-zi-gao.html"},{"title":"Linux Mint System Backup and Restore","text":"Use this note to build a development environment quickly on a fresh Ubuntu/Mint os. Packages First make sure <deb-url>/dists/<dist-name> of your distro exists. To Ubuntu Trusty, it's http://mirrors.ustc.edu.cn/ubuntu/dists/trusty/main or universe, restricted, etc. Then add the following lines to /etc/apt/sources.list: deb http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse deb-src http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse Next run aptitude update and install the following packages with aptitude : zsh git vim autojump curl tree tmux The following packages are only needed on physical metal, not on virtual host: i3 i3status dmenu openssh - server parcellite udevil where udevil is for USB management. Apps installed manually dsnote oh-my-zsh pathogen sysClone Power management script: pm, see note Build Working Environment With I3 and Mint vim plugins plasticboy/vim-markdown ctrlp System configurations to be synchronized Prototype of sysClone : backupConf () { rsync - av --update --ignore-missing-args $HOME/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.oh-my-zsh/themes/lichao.zsh-theme,.xsessionrc} confs/ rsync - av --update --ignore-missing-args $HOME/.i3/config confs/.i3.config } restoreConf () { rsync - av --update confs/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.xsessionrc} $HOME rsync - av --update confs/lichao.zsh-theme $HOME/.oh-my-zsh/themes rsync - av --update confs/.i3.config $HOME/.i3/config } I use an array of tuples to combine above 2 scripts. For details of its methods in shell, see Bash For Loop Array: Iterate Through Array Values and http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash Firefox plugins Downthemall vimfx","tags":"Tech","url":"http://leetschau.github.io/linux-mint-system-backup-and-restore.html","loc":"http://leetschau.github.io/linux-mint-system-backup-and-restore.html"},{"title":"fzf让命令行更方便","text":"fzf 是一个命令行工具，目前支持bash和zsh。 fzf配合autojump和vim，可以方便地在多层目录下进行文本编辑。 Before install fzf, download go binary package (go1.4.2.linux-amd64.tar.gz for now) extract it, and add its bin folder to $PATH. Then install fzf with git. 首先运行 j demo 跳转到项目根目录下，项目文件结构如下： $ tree . ├── both │ ├── collections.coffee │ └── router.coffee ├── client │ ├── index.html │ ├── layout.coffee │ ├── layout.html │ ├── registerHelpers.coffee │ ├── stylesheets │ │ └── app.scss │ └── templates │ ├── addPost │ │ ├── addPost.coffee │ │ ├── addPost.html │ │ └── addPost.scss │ ├── editPost │ │ ├── editPost.coffee │ │ └── editPost.html │ ├── lists │ │ ├── lists.coffee │ │ └── lists.html │ ├── postView │ │ ├── postView.coffee │ │ └── postView.html │ ├── sharePost │ │ ├── sharePost.coffee │ │ └── sharePost.html │ ├── sideMenu │ │ └── sideMenu.html │ └── userAccounts │ ├── accountsConfig.coffee │ ├── userAccounts.coffee │ └── userAccounts.html ├── LICENSE ├── newnote.tmp ├── packages ├── README.md └── server └── seeds.js 13 directories, 26 files 配置 全局定义：~/.fzf.zsh 默认快捷键可以在.fzf/shell/key-bindings.zsh中修改。 推荐将默认的文件搜索快捷键从Ctrl-T改成了Ctrl-J，需要避免使用的配置有： Ctrl-I: 代表 键，虽然可以触发目录搜索，但 键的自动补全功能不能用了； Ctrl-M: 回车键的键值，如果改成了它，将导致回车键不可用，可以用Ctrl-Enter临时代替回车； Ctrl-N: 下一条历史命令的快捷键。 使用 文件搜索 要编辑client/templates/lists/lists.coffee文件，只要在命令行中输入 vi 然后按Ctrl-j， 就进入了fzf搜索界面，只要输入任意层目录中的几个字符，就可以匹配到目标文件， 例如上面lists.coffee文件，只要输入 listco 就可以匹配到了。 其中当输入到list时，就匹配到了lists文件夹以及下面的两个文件， 这时可以继续输入\"co\"，直接命中目标，也可以用Ctrl-j/k在列表中上下选择目标。 实际上fzf进行目录文件匹配的快捷键是Ctrl-T，但对vi进行了特殊定义，使得用 也可以出发fzf搜索。 按Alt-C，选择好目录，可以直接切换到目标目录，相当于 cd <Ctrl-T> 的快捷版。 Ctrl-R在命令行历史使用 模糊 匹配。 历史命令搜索 Ctrl-r激活搜索列表，然后模糊匹配； 可以使用多种配置格式，例如前缀、后缀、取反、严格一致等等， 例如搜索单词 date （而不是包含 d,a,t,e 的任何字符串），在Ctrl-R后输入 'date , 详见文档对\"extended-search mode\"的说明。 进程搜索 输入 kill 然后按Tab键显示系统进程列表，开始模糊搜索；","tags":"Tech","url":"http://leetschau.github.io/fzfrang-ming-ling-xing-geng-fang-bian.html","loc":"http://leetschau.github.io/fzfrang-ming-ling-xing-geng-fang-bian.html"},{"title":"How to Sync a Fork on Github","text":"I forked flask repository to my own account . After several months, there are many new commits to the original flask repo. How to sync these new commits to my fork? Option 1: In Github Web UI Three steps: compare, send pull request, and merge. See Olufemi Israel Olanipeku's answer of How can I keep my fork in sync without adding a separate remote? for details. Option 2: In Terminal You can do it via your local clone: Clone leetschau/flask to local machine; Add mitsuhiko/flask as a remote repo; Pull new commit from mitsuhiko/flask to your local machine; Push your local repo to leetschau/flask. See Syncing a fork for details.","tags":"Tech","url":"http://leetschau.github.io/how-to-sync-a-fork-on-github.html","loc":"http://leetschau.github.io/how-to-sync-a-fork-on-github.html"},{"title":"Python的Generator和yield","text":"下面的代码演示了 yield 的一个使用场景： def fab ( max ) : n , a , b = 0 , 0 , 1 while n < max : yield b # print b a , b = b , a + b n = n + 1 for n in fab ( 5 ) : print ( n ) 简单地讲， yield 的作用就是把一个函数变成一个Generator， 带有 yield 的函数不再是一个普通函数，Python解释器会将其视为一个Generator， 调用 fab(5) 不会执行fab函数，而是返回一个iterable对象。 在for循环执行时，每次循环都会执行fab函数内部的代码，执行到 yield b 时， fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行， 而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行， 直到再次遇到 yield 。 上面的 fab 函数也可以返回一个List，与Generator相比，缺点是内存使用量会很大， 比如要读取一个10GB的文件，如果直接使用f.read()会把整个文件加载到内存中， 用Generator代替List，可以保证内存使用量是固定的，例如下面的1024字节： def read_file ( fpath ) : BLOCK_SIZE = 1024 with open ( fpath , ' rb ' ) as f : while True : block = f . read ( BLOCK_SIZE ) if block : yield block else : return 上面的文件读取是为了演示yield的用法，在实际读取文件时， 如果是大文件，不能一次性载入所有内容，使用for循环，一次载入一行到内存： with open ( ' workfile ' , ' r ' ) as f : for line in f : print ( line ) 反之，如果文件比较小，需要一次性载入内存，使用 readlines() 方法： with open ( 'workfile' , 'r' ) as f : lines = f . readlines () 参考： Python yield 使用浅析 7. Input and Output in The Python Tutorial","tags":"Tech","url":"http://leetschau.github.io/pythonde-generatorhe-yield.html","loc":"http://leetschau.github.io/pythonde-generatorhe-yield.html"},{"title":"Manipulate PSD Files in Linux","text":"gimp is preinstalled on Mint. $ gimp target.psd","tags":"Tech","url":"http://leetschau.github.io/manipulate-psd-files-in-linux.html","loc":"http://leetschau.github.io/manipulate-psd-files-in-linux.html"},{"title":"Convert MS Word File to PDF Files","text":"On Ubuntu/Mint, when we receive MS Word documents (.doc or .docx), convert it to pdf, then open it with evince. sudo apt - get install unoconv doc2pdf target . docx doc2pdf save output pdf file into .pdf by default. Ref: Convert docx to PDF","tags":"Tech","url":"http://leetschau.github.io/convert-ms-word-file-to-pdf-files.html","loc":"http://leetschau.github.io/convert-ms-word-file-to-pdf-files.html"},{"title":"Scrapy Notes","text":"Install on Ubuntu/Mint: sudo apt - get install python - twisted python - libxml2 python - simplejson sudo pip install scrapy Create an alias in ~/.bash_aliases for convenience: alias sa='scrapy' . Crawl website in shell: $ scrapy shell http://myexpo.com/exhibition/32191.html ... [ 1 ] name = response.xpath ( '//h1/text()' ) .extract ()[ 0 ] [ 2 ] time = response.xpath ( '//div[@class=\"location\"]/span[1]/text()' ) .extract ()[ 0 ] .split ( '\\r\\n' )[ 1 ] .strip () [ 3 ] addr = response.xpath ( '//div[@class=\"location\"]/span[2]/text()' ) .extract ()[ 0 ] .split ( '\\r\\n' )[ 1 ] .strip () Crawl my blog $ sa startproject myblog Ref: scrapy研究探索（二）——爬w3school.com.cn Unicode character in Python 2.x You have to add u'' prefix to a unicode string in Python 2.x. Their raw value is in '\\u' format. To see them in human friendly format, use print() function. In [ 85 ]: ex = u '中国2015年3月' In [ 86 ]: ex Out [ 86 ]: u '\\u4e2d\\u56fd2015\\u5e743\\u6708' In [ 87 ]: print ( ex ) 中国 2015 年 3 月 In [ 88 ]: ex . find ( u '年' ) Out [ 88 ]: 6 See more detailed contents about this topic in note \"Unicode and File I/O in Python 2.X and 3.X\". XPath Grammar Ref: XPath 语法","tags":"Tech","url":"http://leetschau.github.io/scrapy-notes.html","loc":"http://leetschau.github.io/scrapy-notes.html"},{"title":"优化网站加载速度的方法","text":"Google PageSpeed 在页面中输入要测试的url，然后就可以运行测试了，给出的是综合评分和各项改进措施。 YSlow 在Firefox里以plugin方式安装YSlow，运行YSlow需要首先安装Firebug。 在FireFox中打开要测试的网站，然后开启Firebug，切换到最右侧的YSlow页面，点击测试按钮开始测试。 可惜YSlow在Firefox 40以后的版本中不能运行。 Google PageSpeed只能测试有公共IP的网站，YSlow可以测试本地运行的网站，而且结果似乎更为详细。","tags":"Tech","url":"http://leetschau.github.io/you-hua-wang-zhan-jia-zai-su-du-de-fang-fa.html","loc":"http://leetschau.github.io/you-hua-wang-zhan-jia-zai-su-du-de-fang-fa.html"},{"title":"Deploy Meteor Application Manually","text":"首先在 阿里云 上购买一台\"云服务器ECS\"， 然后进入通过SSH连接VPS。 作为Meteor应用的生产环境，只需要安装mongoDB和Node.js就可以了，不需要安装Meteor. 通过aptitude安装的mongoDB虽然版本比较老(2.4)，但不接受本机以外的连接， 安全性有保障。 # aptitude update # aptitude install mongodb - server # aptitude install software - properties - common # add - apt - repository ppa : chris - lea / node . js # aptitude update # aptitude install nodejs Then create a start script \"startMeteor\": 1 2 3 4 5 6 #!/bin/bash export PORT = 80 export MONGO_URL = mongodb://localhost:27017/newfairs export ROOT_URL = http://www.newfairs.biz node /root/bundle/main.js > /root/meteorApp.log Now build Meteor application package on developing computer, and transfer it to production machine: cd / path / to / meteorProjectRoot meteor build . scp newfairsweb . tar . gz alivps : ~/ On production machine, extract Meteor package and install it as a node app: cd / root tar zxf newfairsweb . tar . gz cd bundle / programs / server npm install 将VPS恢复到初始状态的方法是：在云服务器ECS主页的\"实例\"页下， 对应主机最右边，\"管理 升级 续费 更多\"中点击\"更多\"， 首先点击\"停止\"来停止实例运行，然后点击\"重新初始化磁盘\"， 将系统盘和数据盘都初始化。","tags":"Tech","url":"http://leetschau.github.io/deploy-meteor-application-manually.html","loc":"http://leetschau.github.io/deploy-meteor-application-manually.html"},{"title":"Deploy Meteor App with MUP","text":"Create VPS First build a vps on DigitalOcean , and name it \"MeteorUpEx\". Get its IP address \"128.199.72.xxx\" at the home page of the droplet. Get its root password in you email. Add the following section into ~/.ssh/config: Host do Hostname 128 . 199 . 72 . 206 User root Add ssh auto login with ssh-copy-id do . Publish Meteor App Install Meteor Up with npm install -g mup . Create a mup project: cd ~/ docs / tmp mkdir nfDeploy cd nfDeploy mup init Now you can see a mup.json file, edit it as follows: { \"servers\" : [ { \"host\" : \"128.199.72.xxx\" , \"username\" : \"root\" , \"pem\" : \"~/.ssh/id_rsa\" } ], \"setupMongo\" : true , \"setupNode\" : true , \"nodeVersion\" : \"0.10.36\" , \"setupPhantom\" : true , \"appName\" : \"newfairs\" , \"app\" : \"/home/chad/docs/tmp/newfairs/newfairsweb\" , \"env\" : { \"PORT\" : 80 , \"ROOT_URL\" : \"http://niufairs.biz\" } , \"deployCheckWaitTime\" : 15 } Note that the \"appName\" is also the database name used by Meteor app in mongoDB. \"app\" is the path of your Meteor app source code folder on your local computer. mup will bundle codes in it, and publish them to host on vps. You can only use key authentication. If you use password, an \"sshpass required for password based authentication\" error occurs. Setup production environment: mup setup ; Delpoy app: mup deploy ; If you use external mongodb, add \"MONGO_URL\" into \"env\" section of mup.json. For example: \"MONGO_URL\" : \"mongodb://104.237.135.xxx:27017/meteor\" After changing the mongo url, run mup reconfig to validate the new config and restart the Meteor app. Import Data First dump data from database \"meteor\" in source mongoDB server to local machine: mongodump - h 104 . 237 . 135 . xxx - d meteor - o mynf scp - r mynf do : ~/ ssh do cd mynf mongorestore - d newfairs meteor Now verify data in mongoDB of the vps with mongo newfairs .","tags":"Tech","url":"http://leetschau.github.io/deploy-meteor-app-with-mup.html","loc":"http://leetschau.github.io/deploy-meteor-app-with-mup.html"},{"title":"Web Scanning Notes","text":"Discovery Scanning This step find the IP address of a website, most frequently with ping or nmap . For example we want scan all hosts in 10.255.1.*: sudo apt install nmap nmap - sn 10 . 255 . 1 . 0 / 24 Port scanning This step find the openning ports on a host. Stealth scan On Windows, install nmap with choco install nmap . Test a specified port: Here is port 22 for SSH on host 106.184.7.58 22, equals to nc -zv 106.184.7.58 22 : nmap -sS -O -p22 106.184.7.58 Scan commonly used 1000 ports (preconfigured by nmap) of a host: nmap -sS <target-ip> ; Scan all port of a host: nmap -sS <target-ip> -p 0-65535 ; Example: $ sudo nmap - sS xxx . xxx . xxx . 143 - p 27010 - 27020 Starting Nmap 6 . 40 ( http : // nmap . org ) at 2015 - 03 - 18 09 : 01 CST Nmap scan report for newfairs . com ( xxx . xxx . xxx . 143 ) Host is up ( 0 . 30 s latency ) . PORT STATE SERVICE 27010 / tcp closed flexlm10 27011 / tcp closed unknown 27012 / tcp closed unknown 27013 / tcp closed unknown 27014 / tcp closed unknown 27015 / tcp closed unknown 27016 / tcp closed unknown 27017 / tcp open unknown 27018 / tcp closed unknown 27019 / tcp closed unknown 27020 / tcp closed unknown Nmap done : 1 IP address ( 1 host up ) scanned in 5 . 66 seconds Port 27017 (used by mongoDB) is detected. Connection scan Command: nmap -sT <target-ip> ; Compared with connection scan, stealth scan won't be logged by the target. So it's more safe. Banner grabbing This step get the banner of a service on a specific port (here is 21): sudo nmap - sT xxx . xxx . xxx . 234 - p 21 -- script = banner Starting Nmap 6 . 40 ( http : // nmap . org ) at 2015 - 03 - 18 09 : 30 CST Nmap scan report for xxx . xxx . xxx . 234 Host is up ( 0 . 064 s latency ) . PORT STATE SERVICE 21 / tcp open ftp | banner : 220 - FileZilla Server v0 . 9 . 33 beta \\ x0D \\ x0A220 - written by Tim Kos | _se ( Tim . Kosse @ gmx . de ) \\ x0D \\ x0A220 Please visit http : // sourceforge . net ... So this is a FileZilla server, version 0.9.33, which implies the OS is probably Windows. Service identification This step detect what service is running on a specific port of a host. This is the detection on port 3389: sudo nmap xxx.xxx.xxx.234 -p 3389 -sV ; Example: sudo nmap xxx . xxx . xxx . 234 - p 80 - sV Starting Nmap 6 . 40 ( http : // nmap . org ) at 2015 - 03 - 18 09 : 23 CST Nmap scan report for xxx . xxx . xxx . 234 Host is up ( 0 . 072 s latency ) . PORT STATE SERVICE VERSION 80 / tcp open http Apache httpd 2 . 2 . 17 (( Win32 ) PHP / 5 . 3 . 5 ) Operating system identification Command: nmap <target-ip> -O ; Example: $ sudo nmap xxx . xxx . xxx . 143 - O Starting Nmap 6 . 40 ( http : // nmap . org ) at 2015 - 03 - 18 08 : 43 CST Nmap scan report for xxx . com ( xxx . xxx . xxx . 143 ) Host is up ( 0 . 32 s latency ) . Not shown : 984 closed ports PORT STATE SERVICE 22 / tcp open ssh 80 / tcp open http 135 / tcp filtered msrpc 139 / tcp filtered netbios - ssn 445 / tcp filtered microsoft - ds 593 / tcp filtered http - rpc - epmap 901 / tcp filtered samba - swat 1068 / tcp filtered instl_bootc 1723 / tcp filtered pptp 3000 / tcp open ppp 3128 / tcp filtered squid - http 4444 / tcp filtered krb524 5800 / tcp filtered vnc - http 5900 / tcp filtered vnc 6129 / tcp filtered unknown 6667 / tcp filtered irc Aggressive OS guesses : Linux 3 . 2 - 3 . 6 ( 96 % ) , Linux 2 . 6 . 32 - 2 . 6 . 39 ( 94 % ) , Linux 2 . 6 . 32 - 3 . 0 ( 93 % ) , Linux 3 . 5 ( 92 % ) , Linux 2 . 6 . 32 ( 92 % ) , IPFire firewall 2 . 11 ( Linux 2 . 6 . 32 ) ( 92 % ) , Linux 2 . 6 . 15 - 2 . 6 . 26 ( likely embedded ) ( 90 % ) , Linux 2 . 6 . 32 - 2 . 6 . 33 ( 90 % ) , Linux 2 . 6 . 32 - 2 . 6 . 35 ( 90 % ) , Linux 2 . 6 . 18 ( 90 % ) No exact OS matches for host ( test conditions non - ideal ) . Network Distance : 23 hops OS detection performed . Please report any incorrect results at http : // nmap . org / submit / . Nmap done : 1 IP address ( 1 host up ) scanned in 83 . 20 seconds Ref: \"Kali Linux Network Scanning Cookbook\" by Justin Hutchens.","tags":"Tech","url":"http://leetschau.github.io/web-scanning-notes.html","loc":"http://leetschau.github.io/web-scanning-notes.html"},{"title":"Convert a CVS Repo to SVN Repo","text":"Download cvs2svn-2.4.0.tar.gz from cvs2svn and extract it. We get a folder named \"cvs2svn-2.4.0\". The cvs repo to be converted is at $HOME/Desktop/goat. There's a \"CVSROOT\" and \"dev/GOAT\" folder in it. Change CWD to cvs2svn-2.4.0 and run ./cvs2svn --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/goatsvn ~/Desktop/goat . After convertion, you get your subversion repo at $HOME/Desktop/goatsvn. Check it with svn ls file://$HOME/Desktop/goatsvn , and svn log HEAD file://$HOME/Desktop/goatsvn and svn cat file://$HOME/Desktop/goatsvn/... . If you encouter this error: \"ERROR: A CVS repository cannot contain both repo/path/file.txt,v and repo/path/Attic/file.txt,v\": ./cvs2svn --retain-conflicting-attic-files --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/dev2SVN ~/Desktop/ARENA/dev2 Next add this repo to a existing repository: Ref: Google for \"subversion format 5\". http://serverfault.com/questions/277441/difference-between-the-format-and-db-format-files-in-a-subversion-repository http://stackoverflow.com/questions/3420741/cvs-comma-v-files-in-attic-and-directory http://cvs2svn.tigris.org/faq.html#atticprob","tags":"Tech","url":"http://leetschau.github.io/convert-a-cvs-repo-to-svn-repo.html","loc":"http://leetschau.github.io/convert-a-cvs-repo-to-svn-repo.html"},{"title":"Update Data in MongoDB","text":"Say you want to update data in updated.csv into \"fairs\" collection of \"meteor\" database in MongoDB. Convert data to be updated in csv file to json file: csvjson updated.csv rawdata.json ; Load this file in a js script \"my-script\" with var data = require('./rawdata.json'); ; Check and convert data content in my-script, and write the reulst into another json file \"result.json\": var fs = require ( 'fs' ); fs . writeFile ( 'result.json' , JSON . stringify ( result )); Run my-script with node my-script ; Import result.json into a new collection \"tmp\" of MongoDB database with mongoimport -d $TargetDB -c $TargetCol --type json --file result.json --jsonArray ; Update collection fairs while traversing collection tmp; db = connect ( \" localhost:27017/meteor \" ) ; cursor = db . tmp . find () ; while ( cursor . hasNext () ) { db . fairs . save ( cursor . next ()) ; } Save above script into update.js; Update data with mongo update.js ; Ref: Write Scripts for the mongo Shell","tags":"Tech","url":"http://leetschau.github.io/update-data-in-mongodb.html","loc":"http://leetschau.github.io/update-data-in-mongodb.html"},{"title":"Website Server Provsion","text":"Work flow Install packages: tree, curl, git; Create user chad, add it to sudoers; Install Meteor: curl https://install.meteor.com | /bin/sh ; download mongoDB package (mongodb-linux-x86_64-rhel62-3.0.0.tgz for now) from mongoDB ; Extract mongoDB package to $HOME/apps, add $MONGO_HOME/bin to $PATH (in file ~/.bash_profile); Config mongoDB: save the following codes into $HOME/docs/mongoRepo/mongo.conf: net : bindIp : 127.0 . 0.1 port : 27017 storage : dbPath : dbHome systemLog : destination : file path : \"mongodb.log\" logAppend : true Start mongod: mongod --config mongo.conf , or in background: nohup mongod --config mongo.conf & ; Ansible Managing Node Install ansible with sudo pip install ansible . Provision of remote host On remote host, create user with sudo useradd -m chad and set password: sudo passwd chad . On manging node, add ssh automatic login of chad and root on remote host with ssh-copy-id . For a vagrant host, run the following commands in project's root directory: vagrant ssh sudo passwd // set password for root ... sudo useradd - m chad sudo passwd chad // set password for chad ... exit ssh - copy - id chad @ localhost - p 2222 ssh - copy - id root @ localhost - p 2222 // Install Node.js, MongoDB, Install mms with installing its rpm package, you can remove it later with: # service --status-all # rpm - qa | grep mongo mongodb - mms - automation - agent - manager - 1 . 6 . 2 . 960 - 1 . x86_64 # rpm - e mongodb - mms - automation - agent - manager - 1 . 6 . 2 . 960 - 1 . x86_64 # service --status-all Change host name: Add \"newfairs.biz\" after \"127.0.0.1 \", before \"localhost\" in /etc/hosts. Restart mms agent: service mongodb-mms-automation-agent restart .","tags":"Tech","url":"http://leetschau.github.io/website-server-provsion.html","loc":"http://leetschau.github.io/website-server-provsion.html"},{"title":"Setup MongoDB Server on Aliyun","text":"For version 3.0. Install On VPS (ip: 123.56.18.18), download MongoDB binary package for Ubuntu 14.04 and extract: wget https : // fastdl . mongodb . org / linux / mongodb - linux - x86_64 - ubuntu1404 - 3 . 0 . 3 . tgz cd / opt tar zxf ~/ mongodb - linux - x86_64 - ubuntu1404 - 3 . 0 . 3 . tgz mkdir - p / data / db Authentication Management Start mongod without auth on VPS (ip: 123.56.18.18): mongod ; Connect to server with mongo 123.56.18.18 ; Create system user administrator: use admin db . createUser ( { user : \"superuser\" , pwd : \"12345678\" , roles : [ \"root\" ] } ) Create user in current database: use products db . createUser ( { user : \" dba \" , pwd : \" dba \" , roles : [ \" readWrite \" ]} ) show users Verify with db.getUsers() . Create a production config file mongo.conf: net : # bindIp : 10 . 251 . 212 . 248 port : 15515 systemLog : destination : file path : \"mongo.log\" logAppend : true security : authorization : enabled Stop and restart mongod with nohup mongod --config mongo.conf & ; Connect to server as a database user: mongo 123.56.18.18:15515/products -u niufair -p nfsecret . You can show collections , db.doc.insert() , etc. Start Meteor app with MONGO_URL=\"mongodb://niufair:nfsecret@123.56.18.18:15515/products\" meteor . Connect to server as administrator: mongo 123.56.18.18:15515/admin -u leo -p leoisadmin . Use db.getUsers() (or show users ) and db.dropUser(\"username\") to list and remove the user. Create a new database under authentication Say we want to create a new database named \"bakdb\": mongo 123 . 56 . 18 . 18 : 15515 / admin - u leo - p leoisadmin use bakdb db . createUser ( { user : \"niufair\" , pwd : \"nfsecret\" , roles : [ \"readWrite\" ] } ) Verify: mongo -u niufair -p nfsecret 123.56.18.18:15515/bakdb ; Ref: Enable Authentication after Creating the User Administrator Add a User to a Database Create an Administrative User with Unrestricted Access Enable Client Access Control Built-In Roles http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb MMS Connect mongodb server without authentication: mongo <ip>:<port> ;","tags":"Tech","url":"http://leetschau.github.io/setup-mongodb-server-on-aliyun.html","loc":"http://leetschau.github.io/setup-mongodb-server-on-aliyun.html"},{"title":"Manage Website Remotely","text":"Prerequisite Managing Node // Install Fabric with sudo pip install fabric . Install ansible with sudo pip install ansible . Provision of remote host Create user with sudo useradd -m chad , then add ssh-auto-login with ssh-copy-id ... . // Install Node.js, MongoDB, Backup MongoDB Import new data Update website codes","tags":"Tech","url":"http://leetschau.github.io/manage-website-remotely.html","loc":"http://leetschau.github.io/manage-website-remotely.html"},{"title":"Website Monitor for Meteor Application","text":"Google Analytics Add tracking code ( ... ) into the \" ... \" (commonly in head.html) of your meteor app. You can find your tracking codes at Admin -> User Management -> Tracking Info -> Tracking Code. Get real-time data (such as on-site user number) at Reporting -> Real-Time -> Overview. Kadira meteor add meteorhacks : kadira Add the following codes into server/kadira.js: Kadira . connect ( ' <App ID> ' , ' <App Secret> ' ) ; get your AppID and App secret at Kadira -> [Your App] -> Settings. Then see read-time statistics on its dashboard.","tags":"Tech","url":"http://leetschau.github.io/website-monitor-for-meteor-application.html","loc":"http://leetschau.github.io/website-monitor-for-meteor-application.html"},{"title":"System Monitor Tools for Linux Server","text":"sar On CentOS 6.5, install sysstat with yum install sysstat . And the cron jobs will be created in /etc/cron.d/sysstat. The default routines defined in this file is running system activity accounting every 10 minutes, and generating a daily summary of process accounting at 23:53 each day. Now you can see system memory usage hisory with sar -r 2 5 , which means display memory usage every 2 seconds, 5 times totally. To see the memory history: sar -r -f /var/log/sa/sa28 , the total free memory is the sum of 3 items: kbmemfree, kbbuffers, kbcached. Refs: https://www.thomas-krenn.com/en/wiki/Collect_and_report_Linux_System_Activity_Information_with_sar http://serverfault.com/questions/85470/meaning-of-the-buffers-cache-line-in-the-output-of-free. dstat On CentOS 6.5, install dstat with yum install dstat . Log the memory usage with dstat --output memlog.csv -t -m 600 500 , which will log totally 500 times, with a 10-minute interval. Glances Install it with curl -L http://bit.ly/glances | /bin/bash . This only works on Linode node. It failed on my loptop with message \"connection reset by peer\". On the Linode node, the installation failed with \"yum\" and \"pip\". It seems the reason is the dependencies are not met. Use it with glances with root, or glances -w as a web server. Then you can see the status of your server with url \"http://104.237.135.143:61208\". For keep a system log, use glances -t 600 --export-csv /tmp/glances.csv , which means write a csv-format log every 10 minutes (3 seconds by default) to /tmp/glances.csv. P.S.: There's also a Munin . It seems the installation is complex, so I gave up. collectl Install with yum install collectl . Print memeory usage with collectl -i 2 -c 5 -sm . Print all subsystems with collectl --showsubsys . Log output information with \"-f\" options: collectl -sm -i 2 -c 5 -f mylog . It creates a gz file, which you have to extract with gzip -d mylog... . Ref: http://lintut.com/best-command-line-tools-for-linux-performance-monitring/","tags":"Tech","url":"http://leetschau.github.io/system-monitor-tools-for-linux-server.html","loc":"http://leetschau.github.io/system-monitor-tools-for-linux-server.html"},{"title":"The Algorithm of Related Fairs","text":"For a given fair A, it's major category are a set of its cat.major subdocuments. For example, for the fair: { cat : [ { major : \"abc\" , minor : [ 1 , 23 , 3 ] } , { major : \"xyz\" , minor : [ 3 , 23 , 583 ] } ] } its major categories are set [\"abc, \"xyz\"]. Here we say the major categories of fair X is majorCat(X) . If the intersection of set majorCat(X) and majorCat(Y) are not empty, we say fair X and Y are related . So for a given fair X, how to find all its related fairs in a collection? Here is the demonstration: In mongodb, create a test collection with the following codes: db . cats . insert ( { cat : [ { major : \"abc\" , minor : [ 1 , 23 , 3 ] } , { major : \"xyz\" , minor : [ 3 , 23 , 583 ] } ] } ); db . cats . insert ( { cat : [ { major : \"abcd\" , minor : [ 1 , 23 , 3 ] } , { major : \"xyzu\" , minor : [ 87 , 987 , 343 ] } ] } ); db . cats . insert ( { cat : [ { major : \"bcd\" , minor : [ 1 , 23 , 3 ] } , { major : \"abc\" , minor : [ 3 , 23 , 876 ] } ] } ); db . cats . insert ( { cat : [ { major : \"xyz\" , minor : [ 8 , 83 , 5 ] } , { major : \"axc\" , minor : [ 34 , 3 , 76 ] } ] } ); Create a new Meteor app with meteor create relatedFairs , and its files: relatedFairs.html <head> <title> relatedFairs </title> </head> <body> <h1> Find related fairs </h1> {{ > hello }} </body> <template name= \"hello\" > <ul> {{ # each allFairs }} <li> <b> {{ _id._str }} : </b> {{ # each cat }} {{ major }} , {{ / each }} </li> {{ / each }} </ul> {{ # with related }} <p> Related fairs of the first fair {{ firstID }} </p> <ul> {{ # each relatedFairs }} <li> <b> {{ _id._str }} : </b> {{ # each cat }} {{ major }} , {{ / each }} </li> {{ / each }} </ul> {{ / with }} </template> relatedFairs.js: Fairs = new Mongo . Collection ( \" cats \" ) ; if ( Meteor . isClient ) { Template . hello . helpers ( { allFairs : function () { return Fairs . find () ; }, related : function () { var theXrd = 0 , theFair = Fairs . findOne ( {}, { skip : theXrd } ) ; if ( ! theFair ) { return null ; } var majors = _ . map ( theFair . cat , function ( i ) { return i . major ; } ); var rels = Fairs . find ( { cat : { $e lemMatch : { major : { $ in : majors } } }, _id : { $ ne : theFair . _id } } ) ; return { firstID : theFair . _id . _str , relatedFairs : rels } ; } } ) ; } Here we use Underscore.js , so install this package with meteor add underscore to run our demo app (with MONGO_URL=\"mongodb://localhost:27017/test\" meteor in project root folder). Modify the value of \"theXrd\" above, you can see the related fairs of each fair. To make a demo in a production collection, in fair \"A\" we find a major category called \"垃圾车与运输车\"， then choose a fair B, whose id is \"54e71a5642fb549b1389ae6f\". Let's add the major cateory to fair B: db . fairs . update ( { _id : ObjectId ( \"54e71a5642fb549b1389ae6f\" ) } , { $ push : { category : { major : \"垃圾车与运输车\" } } } ); Now fair A and B is related. Test them on your web site. If the test is past, remove the test data from fair B: db . fairs . update ( { _id : ObjectId ( \"54e71a6642fb549b1389ae6f\" ) } , { $ pop : { category : 1 } } );","tags":"Tech","url":"http://leetschau.github.io/the-algorithm-of-related-fairs.html","loc":"http://leetschau.github.io/the-algorithm-of-related-fairs.html"},{"title":"Test Underscore Functions of Meteor App","text":"When you add some underscore functions to your meteor app, you can't test it in browser console. So we need test it somewhere else. Create a new folder as the test project root; Install underscore package locally, which means the package is specific for this project; Create a node script to test the underscore functions. The whole work flow is like this: $ mkdir myapp $ cd myapp $ npm install underscore $ cat << EOF > myfunc . js var _ = require ( ' underscore ' ) ; var res = _ . map ( [ 1 , 2 , 3 ], function ( num ) { return num * 3 ; }); console . log ( res ) ; EOF $ node myfunc [ 3 , 6 , 9 ] You can't use var _ = require('underscore'); in node REPL shell, for node shell use \"_\" to hold the last result. Note: See Why can't npm just put everything in one place, like other package managers? on npm's FAQ for the reason why npm not install pakcage globally like pip. For node, how to determine install a package locally or globally? According to npm 1.0: Global vs Local installation i. If you're installing something that you want to use in your program, using require('whatever'), then install it locally, at the root of your project. i. If you're installing something that you want to use in your shell, on the command line or something, install it globally, so that its binaries end up in your PATH environment variable. For example, install bower with npm install bower -g .","tags":"Tech","url":"http://leetschau.github.io/test-underscore-functions-of-meteor-app.html","loc":"http://leetschau.github.io/test-underscore-functions-of-meteor-app.html"},{"title":"Import Data for Newfairs.com","text":"Prerequisites First install MongoDB, node.js and csvkit. For node.js, download node binary package (node-v0.10.33-linux-x64.tar.gz in my case) from its website, extract and add binary folder into $PATH. For example, add the following line into ~/.zshenv: PATH = $ HOME / apps / node - v0 . 10 . 33 - linux - x64 / bin : $ PATH For MongoDB, download its binary package (mongodb-linux-x86_64-2.6.5.tgz in my case) from its website, extract and add binary folder into $PATH: PATH = $ HOME / apps / mongodb - linux - x86_64 - 2 . 6 . 5 / bin : $ PATH Install csvkit with sudo pip install csvkit . Preparation Convert Excel (xls/xlsx) file to csv file: in2csv data.xls > data.csv ; (Optional) Convert file encoding: iconv -f gbk -t utf8 data20150218.csv > input.csv ; Examine data: head input.csv | csvjson -i 4 ; Start MongoDB server for importing data: mongod ; Import Data In case you want to overwrite old data, you need backup old collection: start a mongodb client, make a copy of the old collection (the original collection is \"fairs\"): $ mongo > db.fairs.renameCollection ( 'fairsBak' ) P.S. You can make a copy of a collection with db.fairs.copyTo('fairsBak') . Now import new data to collection \"fairs\": . / importdata Under the hood importdata: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash # convert the csv file encoding with: # iconv -f gbk -t utf8 xxx.csv > input.csv INP = 'input.csv' TargetDB = 'test' TargetCol = 'fairs' RAW = 'rawdata.json' RES = 'result.json' if [[ ! -f $INP ]] ; then echo File input.csv not exists! exit 1 fi rm -rf $RAW $RES csvjson $INP > $RAW node checkTransform mongoimport -d $TargetDB -c $TargetCol --type json --file $RES --jsonArray rm -rf $RAW $RES checkTransform.js: var data = require ( ' ./rawdata.json ' ) ; var fs = require ( ' fs ' ) ; var result = [] data . forEach ( function ( elem ) { var aFair = JSON . parse ( JSON . stringify ( elem ) ) ; aFair . indexStr = {} ; aFair . indexStr [ ' name ' ] = ( elem . chnName + ' ' + elem . engName ) . trim () ; aFair . indexStr [ ' sponsor ' ] = elem . sponsor ; aFair . indexStr [ ' undertaker ' ] = elem . undertaker ; aFair . indexStr [ ' category ' ] = elem . category ; aFair . indexStr [ ' simpleSearch ' ] = elem . chnName + ' ' + elem . engName + ' ' + elem . position + ' ' + elem . time + ' ' + elem . category ; if ( elem . sponsor ) { aFair [ ' sponsor ' ] = [] ; elem . sponsor . split ( ' | ' ) . forEach ( function ( spr ) { var aSponsor = {} ; var sps = spr . split ( ' $ ' ) ; aSponsor [ ' name ' ] = sps [ 0 ] ; aSponsor [ ' tel ' ] = sps [ 1 ] ; aSponsor [ ' fax ' ] = sps [ 2 ] ; aSponsor [ ' email ' ] = sps [ 3 ] ; aSponsor [ ' website ' ] = sps [ 4 ] ; aFair . sponsor . push ( aSponsor ) ; } ) ; } if ( elem . undertaker ) { aFair [ ' undertaker ' ] = [] ; elem . undertaker . split ( ' | ' ) . forEach ( function ( udt ) { var aUndertaker = {} ; var uds = udt . split ( ' $ ' ) ; aUndertaker [ ' name ' ] = uds [ 0 ] ; aUndertaker [ ' tel ' ] = uds [ 1 ] ; aUndertaker [ ' fax ' ] = uds [ 2 ] ; aUndertaker [ ' email ' ] = uds [ 3 ] ; aUndertaker [ ' website ' ] = uds [ 4 ] ; aFair . undertaker . push ( aUndertaker ) ; } ) ; } if ( elem . category ) { aFair [ ' category ' ] = [] ; elem . category . split ( ' | ' ) . forEach ( function ( catStr ) { var aCat = {} ; var cats = catStr . split ( ' $ ' ) ; aCat [ ' major ' ] = cats [ 0 ] === ' ? ' ? '' : cats [ 0 ] ; aCat [ ' minor ' ] = cats . slice ( 1 ) ; aFair . category . push ( aCat ) ; } ) ; } result . push ( aFair ) ; } ) ; fs . writeFile ( ' result.json ' , JSON . stringify ( result )) ;","tags":"Tech","url":"http://leetschau.github.io/import-data-for-newfairscom.html","loc":"http://leetschau.github.io/import-data-for-newfairscom.html"},{"title":"超链接中data-toggle属性使用新的Session","text":"如果在超链接中将\"data-toggle\"属性设为\"modal\"，如下所示，则超链接所指向的窗体将使用新的Seesion。 <a href= \"/register\" data-toggle= \"modal\" > 注册新帐号 </a> 比如我们想在每次跳转后将当前url记录在Session变量\"currentUrl\"中， 但是在url以\"login\"和\"register\"结尾时不更新\"currentUrl\"： Router . onAfterAction ( function () { if ( ! ( Router . current () && Router . current () . url ) ) { return ; } var currentUrl = Router . current () . url ; if ( ( currentUrl . indexOf ( ' login ' ) < 0 ) && currentUrl . indexOf ( \" register \" ) < 0 ) { Session . set ( \" currentUrl \" , currentUrl ) ; } } ) ; 然后在登录或者注册成功后取出这个缓存的变量，利用callback函数跳转回之前的页面： Accounts . createUser ( { email : t . find ( \" #userEmail \" ) . value , password : t . find ( \" #userPwd \" ) . value , profile : { nickname : t . find ( \" #userNickname \" ) . value , role : userRole . value , gender : gender . value , desc : userDesc } }, function ( error ) { if ( error ) { alert ( \" something wrong, registration failed. \" ) ; } else { alert ( \" 注册并登录成功！ \" ) ; var currentUrl = Session . get ( \" currentUrl \" ) ; var tmp = document . createElement ( ' a ' ) ; tmp . href = currentUrl ; var currentPath = tmp . pathname + tmp . search ; Router . go ( currentPath ) ; } } ) ; 那么当点击上面的超链接时，所有Session对象都被清空，\"currentUrl\"值变为\"undefined\"， 如果用 Session.setDefault(\"currentUrl\", \"aabb\"); 设置默认值， 则点击上面的超链接后\"currentUrl\"值变为\"aabb\"， 然后再执行Router.onAfterAction中的callback函数。 这样前面利用缓存变量跳转回原来页面的设计就失效了，页面跳转到\"/undefined\"页面， 解决办法很简单：去掉超链接中的data-toggle属性，变为一个普通超链接： <a href= \"/register\" > 注册新帐号 </a>","tags":"Tech","url":"http://leetschau.github.io/chao-lian-jie-zhong-data-toggleshu-xing-shi-yong-xin-de-session.html","loc":"http://leetschau.github.io/chao-lian-jie-zhong-data-toggleshu-xing-shi-yong-xin-de-session.html"},{"title":"使用星星图标获取用户评分","text":"使用一个数组，评分为3对应着： html: {{ # each rankicons }} <span class= \"glyphicon {{ . }} text-danger\" ></span> {{ / each }} js: Template . UserEvaluations . helpers ( { rankicons : function () { return [ ' glyphicon-star ' , ' glyphicon-star ' , ' glyphicon-star ' , ' glyphicon-star-empty ' , ' glyphicon-star-empty ' ] ; } } ) ; Ref: http://stackoverflow.com/questions/14189672/meteor-iterate-list-in-template","tags":"Tech","url":"http://leetschau.github.io/shi-yong-xing-xing-tu-biao-huo-qu-yong-hu-ping-fen.html","loc":"http://leetschau.github.io/shi-yong-xing-xing-tu-biao-huo-qu-yong-hu-ping-fen.html"},{"title":"在Meteor应用中计算用户评分平均值","text":"以下方法使用的客户端展现代码(html)是一样的： <h2>展会评分：<span class=\"label label-success\">{{rankAverage}}</span></h2> . 使用MapReduce MapReduce一次性将所有展会的用户评分平均值计算出来，优点是每次用户请求页面时不需要计算，直接从计算结果中取值。 缺点是实时性差，由于MapReduce计算比较耗时，且计算结果存储在一个单独的collection中， 新的计算结果会覆盖旧的，所以不能一次只计算一个展会的平均值（因为计算结果collection会覆盖掉有来包含所有结果的collection）， 只能在服务清闲的时间（比如凌晨）进行一次批量计算。 在MongoDB中运行mapReduce： db . userComments . mapReduce ( function () { emit ( this . fairId , this . rank ) ; }, function ( key , values ) { return Array . avg ( values ) ; }, { out : \" rank_avg \" } ) ; 客户端控制器(js): UserAvgRank = new Mongo . Collection ( \" rank_avg \" ) ; Template . UserComments . helpers ( { rankAverage : function () { var rec = UserAvgRank . findOne ( { _id : Router . current () . params . _id } ) ; return Math . round ( rec . value * 10 ) / 10 ; } } ) ; aggregate计算平均值 使用MongoDB collection的aggregate方法在用户请求时实时计算平均值，优缺点与MapReduce方法正好相反。 在Meteor 1.0.3版本中，不支持collection的aggregate方法， 可以通过安装meteorhacks:aggregate包的方法解决这个问题，但这个方法也只能运行在服务端。 Template . UserComments . helpers ( { rankAverage : function () { var rec = Comments . aggregate ( [ {$ match : { fairId : Router . current () . params . _id } }, { $ group : { _id : \" $fairId \" , avgRank : { $a vg : \" $rank \" }} } ] ) ; return Math . round ( rec . avgRank * 10 ) / 10 ; } } ) ; JavaScript手工计算 也是一种实时计算方法，代码量最大，但版本依赖性小。 Template . UserComments . helpers ( { rankAverage : function () { var rateNum = Comments . find () . count () ; if ( rateNum === 0 ) return false ; var total = 0 ; Comments . find ( {} ) . forEach ( function ( elem ) { total = total + elem . rank ; } ) ; var avg = total / rateNum ; return Math . round ( avg * 10 ) / 10 ; } } ) ;","tags":"Tech","url":"http://leetschau.github.io/zai-meteorying-yong-zhong-ji-suan-yong-hu-ping-fen-ping-jun-zhi.html","loc":"http://leetschau.github.io/zai-meteorying-yong-zhong-ji-suan-yong-hu-ping-fen-ping-jun-zhi.html"},{"title":"A Meteor Modal Window","text":"modal login 登录 × 登录 Email 密码 记住我 还没有帐号？ 注册新帐号 登录 取消 user login control if (Meteor.isServer) { Meteor.startup(function () { Accounts.onLogin(function(userObj) { Router.go(\"/\"); }); Accounts . onLoginFailure ( function ( userObj ) { console . log ( \" wrong pwd for \" + userObj . user . profile . nickname ) ; } ) ; }); }","tags":"Tech","url":"http://leetschau.github.io/a-meteor-modal-window.html","loc":"http://leetschau.github.io/a-meteor-modal-window.html"},{"title":"几款开源文本编辑器比较","text":"Brackets Brackets 是一款面向Web开发的文本编辑器； 通过插件管理器实现vim模式支持，效果好； 修改字号方便：ctrl + =/-; 不修改项根目录； 不能像atom那样在命令行中将工作目录作为参数传入，比如在启动后设置； 打开文件夹快捷键：ctrl-alt-o; 打开文件快捷键：ctrl-shift-o, 在当前目录中模糊匹配； 分割窗口只有\"不分割\"，\"横向分割\"，\"纵向分割\"3种方式，且只能用鼠标操作，不方便； 在html中实时修改css文件：ctrl-e; 推荐插件： Brackets Vim: vim模式插件，可以使用ex命令（冒号开头的命令，如:w,:q等），需要与外界粘贴/拷贝文本，需要先在[File -> Enable Vim]中关闭vim模式，再用鼠标选择文本，再ctrl-c/v; Command line shortcuts: 可以将命令行定义成快捷键； Brackets Key Remapper: 目录[Debug -> Open Preferences File]，打开配置文件，修改默认快捷键，\"view.hideSidebar\"改为ctrl-alt-m； Theme: 增加暗色方案； Display Shortcuts: 显示可用的所有快捷键，可以搜索，很方便, ctrl-alt-/; Atom Atom 由Github出品，未来可能不完全开源; 启动速度慢； 对窗口分割、窗口尺寸切换的支持不太好； 全局搜索快捷键：Ctrl-Shift-P; 打开文件快捷键：Ctrl-P; vi模式不能使用ex命令，操作不流畅； Zed 体积比atom小一半，解压后直接运行，但其暗色主题都是灰色的，对比度不够； 会在项目根目录下创建一个.zeddata文件，如果使用git做项目管理的话，需要把这个文件加入到ignore列表中； 没有tab，可以水平分割为1～3个窗口，可以方便地在窗口间转移，这一点比atom强很多； 自动保存功能使得:w不再需要，但最Meteor这样自动更新的环境，自动保持会使应用频繁更新； 自带Vim模式，可以方便地使用vi快捷键； LightTable LightTable是一个Clojure开发环境，但也能作为一款通用文本编辑器； 打开命令自动搜索：ctrl-space; 安装vim插件：ctrl-space -> show plugin manager -> 输入vim，安装之，ex命令可用；与外部copy/paste需要在插入模式中用鼠标完成； 打开文件：ctrl-o; 总体而言无法替代vim；","tags":"Tech","url":"http://leetschau.github.io/ji-kuan-kai-yuan-wen-ben-bian-ji-qi-bi-jiao.html","loc":"http://leetschau.github.io/ji-kuan-kai-yuan-wen-ben-bian-ji-qi-bi-jiao.html"},{"title":"Full Text Search for Meteor App","text":"For Meteor 1.0.3, the built-in database is mongodb 2.4, which is not support full text search by default. So we need install a stand-alone MongoDB 2.6, create a \"meteor\" database, and let Meteor to use it as backend database: First start MongoDB server: mongod --dbpath ~/docs/mongodb-repo ; Then create a new database \"meteor\" for Meteor app backend: $ mongo > show dbs > use meteor Next start Meteor server and connect it with the Mongodb server: $ MONGO_URL = \"mongodb://localhost:27017/meteor\" meteor > db.zips.getIndexes () > db.zips.dropIndex ( \"forsearch_text\" ) > db.zips.ensureIndex ( { city: \"text\" , state: \"text\" } ) > db.zips.find ( { $text : { $search : \"lee ma\" }} ) .count () 488 Here use meteor create a new database in MongoDB (if it doesn't exists yet) and use it as the current database. Use db to get the current database name. Ref: Getting Started with MongoDB Text Search Tutorials of MongoDB 2.6.7 ; $text query operator of MongoDB 2.6.7 Checking if a field contains a string","tags":"Tech","url":"http://leetschau.github.io/full-text-search-for-meteor-app.html","loc":"http://leetschau.github.io/full-text-search-for-meteor-app.html"},{"title":"Meteor应用中简单查询的实现方法","text":"简单搜索要求多个检索词能够以任意顺序出现在多个字段中，目前的解决方法有两种思路： 一是创建一个额外的检索项，把所有要检索的字段用字符串方式组合起来放在检索项中， 然后用正则表达式匹配； 这种方式实际上有信息冗余，所以原始数据变化后一定要及时更新检索项； 二是用第三方包实现这种功能。 自定义搜索：检索词放在单独Collection中 优点是检索词单独存放，需要去掉或者更新检索词时， 只要简单地drop掉检索词Collection即可，适于存储大量记录； 缺点有两个： 首先显示查询结果比较麻烦，需要先在检索项集合中搜出命中目标的 _id ， 然后再查询原始数据表显示完整信息； 其次这种数据结构对组合查询支持不好，比如要查询\"名称\"字段中含有\"abc\"， 并且\"类别\"字段中含有\"xyz\"的展会，由于\"类别\"字段是一个复杂对象， 需要事先组合成一个字符串，这一项如果放在单独的collection中， 需要查询两个不同的集合，然后取它们的并集。 首先在MongoDB中，创建用于简单搜索的新collection \"simpleSearch\": db . fairs . find () . forEach ( function ( elem ) { var searchStr = elem.chnName + elem.engName + elem.position ; db.simpleSearch.save({ _id : elem . _id , searchBody : searchStr } ); } ) 然后定义路由处理函数： Fairs = new Mongo . Collection ( \" fairs \" ) ; SimpleSearch = new Mongo . Collection ( \" simpleSearch \" ) ; Router . route ( ' /results/:inp ' , function () { // basic search url : / results / abc ? type = basic // complex search url : / results / ? type = complex ? name = xxx ? time = xxx ? position = xxx ? category = xxx var fullStr = this . params . inp ; var searchType = this . params . query . type ; if ( searchType === \" basic \" ) { var parts = fullStr . trim () . split ( \" \" ) ; for ( i = 0 ; i<parts.length; ++i) { parts [ i ] = \" (?=.* \" + parts [ i ] + \" ) \" ; } var queryPtn = new RegExp ( \" ( \" + parts . join ( \"\" ) + \" ) \" , \" i \" ) ; var ids = [] ; SimpleSearch . find ( { searchBody : queryPtn }, { fields : { searchBody : 0 }} ) . forEach ( function ( elem ) { ids . push ( elem . _id ) ; } ) ; this . render ( ' SearchResults ' , { data : function () { return Fairs . find ( { _id : { $ in : ids } } ) ; } } ) ; } else if ( searchType === \" complex \" ) { ... } } ) ; 这里首先查询SimpleSearch集合，将查询得到的展会 _id 存入临时容器ids数组中， 然后在Fairs集合中通过\"$in\"操作符取得所有ids数组中 _id 对应的展会对象。 自定义搜索：检索词放在原始信息文档中 这个方法把原始信息和检索项放在同一个集合中，几个检索项放在集合的一个key下面， 集合会比较臃肿，但查询和显示都方便，适用于尺寸不大的数据库。 控制器定义： Fairs = new Mongo . Collection ( \" fairs \" ) ; Router . route ( ' /results/:inp ' , function () { // basic search url : / results / abc ? type = basic // complex search url : / results / ? type = complex ? name = xxx ? time = xxx ? position = xxx ? category = xxx var fullStr = this . params . inp ; var searchType = this . params . query . type ; if ( searchType === \" basic \" ) { var parts = fullStr . trim () . split ( \" \" ) ; for ( i = 0 ; i<parts.length; ++i) { parts [ i ] = \" (?=.* \" + parts [ i ] + \" ) \" ; } var queryPtn = new RegExp ( \" ( \" + parts . join ( \"\" ) + \" ) \" , \" i \" ) ; this . render ( ' SearchResults ' , { data : function () { return Fairs . find ( { \" indexStr.simpleSearch \" : queryPtn } ) ; } } ) ; } else if ( searchType === \" complex \" ) { ... } } ) ; 基于Search Source的实现方法 这个搜索基于 search-source . 通过 meteor add meteorhacks:search-source 添加到meteor中， 代码参照了 meteor-instant-search-demo . 准备数据源 导入数据 下载 zips.json ； 参考 Is there a sample MongoDB Database along the lines of world for MySql? . 导入Meteor数据库中：启动meteor服务，然后在另一个shell里运行： ~/apps/mongodb-linux-x86_64-2.6.5/bin/mongoimport -h localhost:3001 --db meteor --collection zips --type json --file zips.json ; 增加搜索字段：由于简单搜索要求输入可能匹配任意字段， 能达到这个要求的唯一方法就是将被查询的字段连接成一个完整的\"搜索\"字符串， 输入的各项可以以任何顺序出现在这个搜索字符串（这里这一项名为\"forsearch\"）中， 下面增加这一项： db . zips . find (). forEach ( function ( elem ) { db . zips . update ( { _id : elem . _id } , { $ set : { forsearch : elem . city + ' ' + elem . state }} ); } ); db . fairs . find (). forEach ( function ( elem ) { var cat_minor = _ . reduce ( elem . category . minor db . fairs . update ( { _id : elem . _id } , { $ set : { forsearch : elem . chnName + ' ' + elem . engName + ' ' + elem . time + ' ' + elem . position + catStr }} ); } ); 参考 Update MongoDB field using value of another field . 搜索逻辑 下面\"/\"都指项目根目录。 数据集定义 在/collections.js中定义数据集和索引： Zips = new Mongo . Collection ( ' zips ' ) ; if ( Meteor . isServer ) { Zips . _ensureIndex ( { city : 1 , state : 1 } ) ; } 服务端 在/server/server.js中定义： SearchSource . defineSource ( ' zips ' , function ( searchText , options ) { var options = { sort : { isoScore : - 1 }, limit : 20 } ; if ( searchText ) { var regExp = buildRegExp ( searchText ) ; var selector = { forsearch : regExp } ; return Zips . find ( selector , options ) . fetch () ; } else { return Zips . find ( {}, options ) . fetch () ; } } ) ; function buildRegExp ( searchText ) { var parts = searchText . trim () . split ( / [ \\ - \\:] +/ ) ; for ( i = 0 ; i<parts.length; ++i) { parts [ i ] = \" (?=.* \" + parts [ i ] + \" ) \" ; } var res = new RegExp ( \" ( \" + parts . join ( \"\" ) + \" ) \" , \" i \" ) ; return res ; } buildRegExp函数中的正则表达式 (?=.*A)(?=.*B) 可以实现对A和B任意顺序的匹配， 即既能匹配A. B，又能匹配B. A， 参考 match string in any word order regex . 客户端：搜索输入框框即时响应 搜索框是通用控件，所以定义在了/client/comTemp.js中，定义了对框中keyup事件的响应： Template . Header . events ( { \"keyup #search-input\" : _ . throttle ( function ( e ) { var text = $ ( e . target ). val (). trim (); ZipSearch . search ( text ); } , 200 ) } ); 客户端：搜索结果展示页面 定义在/client/results.html中。 < template name = \" SearchResults \" > < div id = \" search-result \" class = \" container content \" > < div id = \" search-meta \" > {{# if isLoading }} searching ... {{ / if }} </ div > {{# each getZips }} < div class = \" package \" > < h4 class = \" name \" > {{{ city }}} </ h4 > < div class = \" description \" > {{{ state }}}, {{{ pop }}} </ div > </ div > {{ / each }} </ div > </ template > 客户端：搜索结果的数据控制 定义在/client/results.js中。 var options = { keepHistory : 1000 * 60 * 5 , localSearch : true } ; var fields = [ ' forsearch ' ] ; // 这里定义要搜索的字段 ZipSearch = new SearchSource ( ' zips ' , fields , options ) ; // 这里的 zips 要与服务端 SearchSource . defineSource 中定义的名字一致 Template . SearchResults . helpers ( { getZips : function () { return ZipSearch . getData ( { transform : function ( matchText , regExp ) { console . log ( \" matchText: \" + matchText ) ; console . log ( \" regExp: \" + regExp ) ; var res = matchText . replace ( regExp , \" <b>$&</b> \" ) ; console . log ( \" res is: \" + res ) ; return res ; }, sort : { isoScore : - 1 } } ) ; }, isLoading : function () { return ZipSearch . getStatus () . loading ; } } ) ; Template . SearchResults . rendered = function () { ZipSearch . search ( '' ) ; } ;","tags":"Tech","url":"http://leetschau.github.io/meteorying-yong-zhong-jian-dan-cha-xun-de-shi-xian-fang-fa.html","loc":"http://leetschau.github.io/meteorying-yong-zhong-jian-dan-cha-xun-de-shi-xian-fang-fa.html"},{"title":"git-flow Notes","text":"git is a powerful version control tool, while its large amount of commands and options make it hard to use. So git-flow was created to make git mush convenient. It's a high level branching tools for git. Fist install it with apt-get install git-flow on Debian-family distros. Usage Workflow on a single feature The following paragraphs is from [Why aren't you using git-flow?}(http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/). Branch \"master\" is always \"production ready\" code. Commits are never made directly to master. Rather, code on master only gets there after a production release branch is created and \"finished\" (more on that in a sec). Thus the code on master is always able to be released to production. Also, master is always in a predictable state, so you never need to worry if master (and thus production) has changes one of your other branches doesn't. \"develop\" is the branch you'll be doing most of your work off of; it's also the branch that represents the code to be deployed in the next release. feature branches represent non-trivial features and fixes that have not yet been deployed (a completed feature branch is merged back into develop). Updating master is done through the creation of a release. Most of your work is done on the develop branch. This branch contains all of the completed features and bug fixes yet to be released; nightly builds or continuous integration servers should target develop, as it represents the code that will be included in the next release. For one-off commits, feel free to commit to develop directly. Use git flow help or git flow feature help to list all available commands. $ git flow init // Convert an existing git repo to git - flow style : $ git flow feature start < feature - name > $ git commit - m \" now finish this feature \" // if you want cancel this feature : $ git flow feature // list the current feature name , here is \" searchSource \" $ git flow feature delete searchSource // or do it manually $ git checkout develop // switch to \" develop \" branch $ git branch // list current branches $ git branch - d feature /< feature - name > // \" feature/ \" is the default prefix of all feature branches $ git branch // verify the feature is deleted // push feature to remote repository $ git flow feature publish // get feature commit from remote repository $ git flow feature pull // after the feature is finished and tested $ git flow feature finish < feature - name > Note that do not add \"feature/\" prefix before feature name. This command merge feature branch back into develop branch, so the feature branch disappear from now on. If you don't want save your feature branch into remote repo, push to remote AFTER you finish your feature with this \"finish\" command. There is a corresponding \"release\" command: $ git flow release start v0.1.0 $ git flow release finish v0.1.0 See git-flow cheatsheet for details of git-flow. Switching between multiple features Say you now have finished version 1.0 and tag it with \"1.0\". Next you will add function A to the product. You have two methods to achieve function A, \"search source\" and \"full text\". You want to experiment them one by one, so create the first test branch with git flow feature start searchSource , After some commits, now you want to evaluate the second. You can't git flow feature finish searchSource for two reasons: First you may switching back to this feature in the future. If you finish this feature, this branch disappeared. Second you need experiment \"full text\" based on version 1.0. But if you \"finish\" feature \"search source\", the modifications will be added to branch develop. If you git flow feature start fullText , the codes won't be that in version 1.0. So what you want is working on multiple branches simultaneously: $ git flow feature start searchSource ... // some developments on branch searchSource $ git commit -m \"finish a milestone by method search source\" $ git flow feature start fullText ... // some developments on branch fullText $ git commit -m \"finish a milestone by method full text\" $ git flow feature list $ git flow feature checkout searchSource ... // some developments on branch searchSource $ git commit -m \"finish the 2nd milestone by method search source\" $ git flow feature checkout fullText ... // some developments on branch fullText $ git commit -m \"finish the 2nd milestone by method full text\" If you have some casual modifications which you don't want to commit, use git stash instead of git commit . Use git stash list to list all stashed changes, and git stash pop to take the stashed codes out. Or git stash apply to take codes out without removing saved stash record. Finally you choose \"full text\" to achieve function A. So add it to your develop code base: git flow feature finish fullText . And leave the branch \"search source\" alone. If you are sure \"search source\" are useless any more, print all existing features with git flow feature list , then remove it with git flow feature delete searchSource . There is a GUI tool called gitk , which can be installed with apt-get install gitk . See commits on current branch with gitk , or see all branches with gitk --all . There is also a git-flow-completion tool for zsh. Install it if you like. Download _git and replace /usr/share/zsh/functions/Completion/Unix/_git; Download git-flow-completion.zsh , save it as ~/.git-flow-completion.zsh; Add \"source ~/.git-flow-completion.zsh\" into ~/.zshrc;","tags":"Tech","url":"http://leetschau.github.io/git-flow-notes.html","loc":"http://leetschau.github.io/git-flow-notes.html"},{"title":"Meteor Development Styles","text":"Naming Styles Template, class, enum name use BigCamelCase; File, identifier, function name use smallCamelCase; CSS class name: css-class-name; Constant value name: CONSTANT_VALUES_LIKE_THIS; Ref: Meteor Style Guide Googe JavaScript Naming rules : use functionNamesLikeThis, variableNamesLikeThis, ClassNamesLikeThis, EnumNamesLikeThis, methodNamesLikeThis, CONSTANT_VALUES_LIKE_THIS, foo.namespaceNamesLikeThis.bar, and filenameslikethis.js. Airbnb JavaScript Style Guide Small Project Structure with Iron Router The following is the file structure of small meteor app, which put all files into root folder, to simplify file editing and browsing. head.html: contains \" ... \"; layout.html: defines layouts of the app, each in a \" \", you can put multiple layouts in this file; router.js: defines all routes and layouts. Put all javascript codes starting with \"Router.\" (such as Router.route, Router.configure) into this file; collections.js: define persistent collections, or models of application; style.css: defines global css styles here; comTemp.html: defines global common templates here; page triad: consists of a view (html), a controller (js) and a formatter (css). So the home page triad consists of home.html, home.js and home.css; Large Project Structures Microscope of Discover Meteor is a good example: $ git clone https://github.com/DiscoverMeteor/Microscope.git $ cd Microscope $ tree -L 3 . ├── client │ ├── helpers │ │ ├── config.js │ │ ├── errors.js │ │ └── handlebars.js │ ├── main.html │ ├── main.js │ ├── stylesheets │ │ └── style.css │ └── templates │ ├── application │ ├── comments │ ├── includes │ ├── notifications │ └── posts ├── lib │ ├── collections │ │ ├── comments.js │ │ ├── notifications.js │ │ └── posts.js │ ├── permissions.js │ └── router.js ├── LICENSE.txt ├── README.markdown ├── README.nitrous.md └── server ├── fixtures.js └── publications.js Ref: Structuring your application in Meteor Docs iron-router official guide google \"iron router layout\"; Iron-Router Tutorial Meteor Iron Router layout template Meteor Iron-Router Layout Rendering Set Up Navigation With Iron Router and Bootstrap A Beginner's Guide to Iron Router, Part 1 on Meteor Tips","tags":"Tech","url":"http://leetschau.github.io/meteor-development-styles.html","loc":"http://leetschau.github.io/meteor-development-styles.html"},{"title":"离线保存网页","text":"首先试用了Firefox的\"Save as PDF\"这个插件，发现对于内容复杂的网页，保存总出错。 又试了\"Screengrab!\"这个插件，把整个网页保存成一改png文件，效果不错， 即使网页超出了一屏，也可以保存为一个完整的图片。","tags":"Tech","url":"http://leetschau.github.io/chi-xian-bao-cun-wang-ye.html","loc":"http://leetschau.github.io/chi-xian-bao-cun-wang-ye.html"},{"title":"Encrypt and Remove Encryption in Vim","text":"To encrypt a file with vim, use :X when saving the file. To remove the encryption, run :set key= in vim, make some modifications in text, then save file with :x . Note that if you didn't make any modifications in text, The encryption will not be removed.","tags":"Tech","url":"http://leetschau.github.io/encrypt-and-remove-encryption-in-vim.html","loc":"http://leetschau.github.io/encrypt-and-remove-encryption-in-vim.html"},{"title":"A Simple Search Homepage","text":"The key points in this web page is: How to position a absolute centering with CSS; How to add a footer sticky to page bottom: add background-image: none; into navbar's CSS definitions; How to align text centering in a row: text-align: center; ; How to specify font properties, including font-family, font-size and font-weight; How to add a image; Now build this page: $ meteor create searchHome $ cd searchHome $ ln -s ../client $ tree . ├── searchHome.css ├── searchHome.html ├── searchHome.js ├── client -> ../client └── public └── logo.png $ tree client client ├── css │ └── bootstrap.min.css └── lib └── bootstrap.min.js $ cat < < EOF > searchHome.html <head> <title> NewFairs </title> </head> <body> <div class= \"container\" > {{ > header }} {{ > simpleSearchBox }} </div> <div id= \"content\" class= \"container\" > {{ > hello }} </div> <div id= \"footer\" > <nav class= \"navbar navbar-fixed-bottom\" > <div class= \"container\" > Here is the Footer </div> </nav> </div> </body> <template name= \"header\" > <div class= \"header\" align= \"right\" > {{ > loginButtons }} <div class= \"btn-group\" > <button type= \"button\" class= \"btn btn-default\" > Action </button> <button type= \"button\" class= \"btn btn-default dropdown-toggle\" data-toggle= \"dropdown\" aria-expanded= \"false\" > <span class= \"caret\" ></span> <span class= \"sr-only\" > Toggle Dropdown </span> </button> <ul class= \"dropdown-menu\" role= \"menu\" > <li><a href= \"#\" > 汉语 </a></li> <li><a href= \"#\" > English </a></li> </ul> </div> </div> </template> <template name= \"simpleSearchBox\" > <div class= \"fixed-search-form\" > <div class= \"row logo\" > <img src= \"/logo.png\" alt= \"logo\" /> 牛展网 </div> <div class= \"row\" > <input type= \"text\" > <button> 搜索 </button> </div> </div> </template> <template name= \"hello\" > <button id= \"addline\" > Add a line </button> <button id= \"rmline\" > Remove a line </button> <div> {{ # each samples }} <li> Item No: {{ this }} </li> {{ / each }} </div> </template> EOF $ cat < < EOF > searchHome.css html { position: relative; min-height: 100%; } #content { padding-bottom: 70px; } .fixed-search-form { margin: auto; position: absolute; top:0; left:0; bottom:0; right:0; height: 60%; width: 60%; text-align: center; font-size: x-large; font-family: Verdana, \"Microsoft YaHei\", \"微软雅黑\", \"WenQuanYi Micro Hei\"; } .search-form .logo { font-size: 200%; font-weight: bold; } #footer .navbar { position: absolute; background-image: none; } EOF Note1: the website logo image logo.png is created online, and download to local disk. See note \"创建简单的网站Logo\" for details. Note2: in \"font-family\", \"Verdana\" is english font, \"Microsoft YaHei\" is Chinese font for Windows platform, \"WenQuanYi Micro Hei\" for Linux platform. search and show this font with aptitude search wqy , aptitude show fonts-wqy-microhei . See note \"Build Working Environment with i3 and Mint\" for details of this font on Linux. Refs: How to vertically center a div for all browsers? 中文字体网页开发指南 字体笔记","tags":"Tech","url":"http://leetschau.github.io/a-simple-search-homepage.html","loc":"http://leetschau.github.io/a-simple-search-homepage.html"},{"title":"Bootstrap 3的栅格系统","text":"Bootstrap 3的栅格(grid)系统以浏览器的屏幕宽度为指标，从小到大分为4级：xs, sm, md, lg (extra small, small, medium, large). 4个级别之间的宽度分隔点（即breakpoint size）分别是768px, 992px和1200px。 例如，当屏幕宽度为1000px（像素）时，使用md标准，800px使用sm标准， 假设我们需要在一行上从左到右顺序放置A,B,C共3个元素，宽度比为1:2:1，由于栅格系统将每行分为12列， 不难算出这3个元素依次应占据3，6和3列，下面是测试代码： $ meteor create grids $ cd grids $ cat << EOF > grids . html < head > < title > Bootstrap Grids </ title > </ head > < body > < h1 > Bootstrap Grid System Demo </ h1 > {{ > getDim }} < hr > < div class = \" container \" > < div class = \" row \" > < div class = \" col-sm-3 \" > . col - md - 3 </ div > < div class = \" col-sm-6 \" > . col - md - 6 </ div > < div class = \" col-sm-3 \" > . col - md - 3 </ div > </ div > </ div > </ body > EOF < template name = \" getDim \" > < div > Browser window width : {{ bro_wid }} </ div > < div > Browser window height : {{ bro_hei }} </ div > < div > Screen width : {{ scr_wid }} </ div > < div > Screen height : {{ scr_hei }} </ div > </ template > $ cat << EOF > grids . css . col - sm - 3 { background - color : # ccc ; } . col - sm - 6 { background - color : # cf0 ; } $ cat << EOF > grids . js if ( Meteor . isClient ) { Session . setDefault ( \" bro_wid \" , $ ( window ) . width ()) ; Session . setDefault ( \" bro_hei \" , $ ( window ) . height ()) ; Session . setDefault ( \" scr_wid \" , screen . width ) ; Session . setDefault ( \" scr_hei \" , screen . height ) ; Meteor . startup ( function () { $ ( window ) . resize ( function ( e ) { Session . set ( \" bro_wid \" , $ ( window ) . width ()) ; Session . set ( \" bro_hei \" , $ ( window ) . height ()) ; Session . set ( \" scr_wid \" , screen . width ) ; Session . set ( \" scr_hei \" , screen . height ) ; } ) ; } ) ; Template . getDim . helpers ( { bro_wid : function () { return Session . get ( \" bro_wid \" ) ; }, bro_hei : function () { return Session . get ( \" bro_hei \" ) ; }, scr_wid : function () { return Session . get ( \" scr_wid \" ) ; }, scr_hei : function () { return Session . get ( \" scr_hei \" ) ; } } ) ; } 浏览器初始宽度为1284px，属于lg，用慢慢拖动鼠标减小窗口宽度， 这时行元素 (.row) 两端的页边距(padding)不断缩小， 当窗口宽度低于1200px时，此行中每列 (.col) 元素的宽度整体减小了一级，同时行的边距恢复初始值， 继续减小窗口宽度，边距持续减小，直到992像素时行中各列元素宽度减小，边距恢复； 当宽度低于768像素时，行中的3个列元素改为纵向排列，即stack方式。 结合Bootstrap 3官网文档中 Grid system 的说明： Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. Therefore, e.g. applying any .col-md- class to an element will not only affect its styling on medium devices but also on large devices if a .col-lg- class is not present. 上面我们定义的是sm，所以比它宽的md和lg都使用它的定义：3-6-3，比它小的xs没有定义，所以使用了默认的纵向排列方式。 可以用两种方法验证这一点，首先我们把html和css中的\"sm\"都改为\"lg\"，例如下面： <div class= \"container\" > <div class= \"row\" > <div class= \"col-lg-3\" > .col-md-3 </div> <div class= \"col-lg-6\" > .col-md-6 </div> <div class= \"col-lg-3\" > .col-md-3 </div> </div> </div> 当宽度低于1200px时，列元素直接变成了纵向排列。 假设我们的需求变为：在大屏lg和中屏md上保持原有布局，即A,B,C共3个元素在同一行按1:2:1放置， 在xs和sm屏上变为两行，其中A和B按照1:2放在同一行上，C放在第二行上，占屏幕宽度一半，相应地修改代码： $ cat grids.html ... <div class= \"container\" > <div class= \"row\" > <div class= \"col-md-3 col-xs-4\" > .col-md-3 </div> <div class= \"col-md-6 col-xs-8\" > .col-md-6 </div> <div class= \"col-md-3 col-xs-6\" > .col-md-3 </div> </div> </div> ... $ cat grids.css ... .col-xs-4 { background-color: #f00; } .col-xs-8 { background-color: #0f0; } 可以看到，在最小的屏幕上，A和B也是在同一行里的。所以对于同一个row里的col来说，超过12的col会自动放在下一行， 例如上面的xs配置中，4和8已经占据了一行，所以下来C的col-xs-6就显示在下一行，且宽度为屏幕的一半，与文档所述吻合： If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.","tags":"Tech","url":"http://leetschau.github.io/bootstrap-3de-zha-ge-xi-tong.html","loc":"http://leetschau.github.io/bootstrap-3de-zha-ge-xi-tong.html"},{"title":"基于Bootstrap 3的页眉页脚控制","text":"对网页上页眉(header)、页脚(footer)的位置要求是： 当网页正文内容短于一页时，不论浏览器窗口尺寸如何，页眉要在顶端，页脚在底端，不能出现页脚下面还有空白的情况； 当网页正文内容长于一页时，不论浏览器窗口尺寸如何，页眉页脚不能遮挡住正文内容，当使用滚轮上下滚动时，页眉页脚要随之滚动； 也就是sticky header/footer效果。下面是符合此要求的一个精简Meteor实现： $ meteor create stickyHeaderFooter $ cd stickyHeaderFooter $ ln - s .. / client $ tree client client ├── css │ └── bootstrap . min . css └── lib └── bootstrap . min . js $ cat << EOF > stickyHeaderFooter . html < head > < title > Sticky Header & Footer </ title > </ head > < body > < nav class = \" navbar navbar-default navbar-static-top \" > < div class = \" container \" > Here is Header </ div > </ nav > < h1 > Sticky Header & Footer </ h1 > < div id = \" content \" class = \" container \" > {{ > hello }} </ div > < div id = \" footer \" > < div class = \" navbar navbar-fixed-bottom \" > < div class = \" container \" > Here is the Footer </ div > </ div > </ div > </ body > < template name = \" hello \" > < button id = \" addline \" > Add a line </ button > < button id = \" rmline \" > Remove a line </ button > < div > {{# each samples }} < li > Item No : {{ this }} </ li > {{ / each }} </ div > </ template > EOF $ cat << EOF > stickyHeaderFooter . css html { position : relative ; min - height : 100 % ; } # content { padding - bottom : 70 px ; } # footer . navbar { position : absolute ; } EOF $ cat << EOF > stickyHeaderFooter . js if ( Meteor . isClient ) { Session . setDefault ( \" sample \" , [ 1 , 2 , 3 ] ) ; Template . hello . helpers ( { samples : function () { return Session . get ( \" sample \" ) ; } } ) ; Template . hello . events ( { ' click #addline ' : function () { var sl = Session . get ( \" sample \" ) ; sl . push ( sl [ sl . length - 1 ] + 1 ) ; Session . set ( \" sample \" , sl ) ; }, ' click #rmline ' : function () { var sl = Session . get ( \" sample \" ) ; if ( sl . length > 1 ) { sl . pop () ; } Session . set ( \" sample \" , sl ) ; } } ) ; } $ meteor Meteor服务启动完毕后，运行 firefox localhost:3000 ，通过点击\"Add a line\"增加正文长度，点击\"Remove a line\"减小正文长度，同时改变浏览器窗口大小，验证代码是否符合上面的要求。 这里面页眉的设置相对简单，用Bootstrap 3的navbar-static-top就能够达到要求。 页脚基于Bootstrap 3的\"navbar navbar-fixed-bottom\"实现，但这个类本身的功能是把页脚固定在浏览器底部，而不论正文内容长短， 所以要通过在css文件中设置格式的方法实现sticky footer效果， 在css文件的3段设置中，前两段负责避免正文与页脚重叠，第3段的作用是保证页脚始终在正文之后，而不是固定在浏览器窗口底端。 Html文件中的container属性是bootstrap 3网格系统的容器，用来对齐各个行元素中的各列，并自动控制行、列元素的页边距， 这里使用container是为了避免在css中手工设定padding值。 本文的实现方法借鉴了 Flushing footer to bottom of the page, twitter bootstrap 中Régis B.的回答， 但对其答案进行了精简。 container部分基于 When should I use class container and row? 。 说明：实例代码用软链接引入Bootstrap文件，是为了节约空间，也可以直接把client文件夹拷贝到当前目录中。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-bootstrap-3de-ye-mei-ye-jiao-kong-zhi.html","loc":"http://leetschau.github.io/ji-yu-bootstrap-3de-ye-mei-ye-jiao-kong-zhi.html"},{"title":"创建简单的网站Logo","text":"比如要创建一个网址为niufairs.com的网站logo，就用其英文首字母\"NF\"， 找一个在线英文艺术字网站，这里用的是 skyfont.com ， 输入NF，字体选择\"Action Jackson\"，大小选择16，字体颜色选择了类似搜狗logo的橙红色#F7642B， 背景设置为白色#FFFFFF，样式为默认，点击生成，满意的话保存为图片就可以了。","tags":"Tech","url":"http://leetschau.github.io/chuang-jian-jian-dan-de-wang-zhan-logo.html","loc":"http://leetschau.github.io/chuang-jian-jian-dan-de-wang-zhan-logo.html"},{"title":"Preferred Web Browser Resolution When Developing a Website","text":"According to Why is 1366x768 considered by some to be the standard widescreen for modern laptops? , screen resolution 1366x768 is most frequently used from desktop , the 2nd frequently used resolution is 1024x768. So for a web UI designer, 1024x768 is the safe solution, because a 1024-pixels-width web page on a wider screen (1366 pixels) looks ok, while people have to scroll horizontally to view a 1366-pixels-wide web page on a 1024 screen. For Axure RP, 960 pixels width is preferred: right click on the wireframe window of a page, select \"Grid and Guides -> Create Guides -> Presets: 960 Grid 12 Column\". The following is a Meteor app that detect screen and browser size on the fly. $ cat getDimension . js if ( Meteor . isClient ) { Session . setDefault ( \" bro_wid \" , $ ( window ) . width ()) ; Session . setDefault ( \" bro_hei \" , $ ( window ) . height ()) ; Session . setDefault ( \" scr_wid \" , screen . width ) ; Session . setDefault ( \" scr_hei \" , screen . height ) ; Meteor . startup ( function () { $ ( window ) . resize ( function ( e ) { Session . set ( \" bro_wid \" , $ ( window ) . width ()) ; Session . set ( \" bro_hei \" , $ ( window ) . height ()) ; Session . set ( \" scr_wid \" , screen . width ) ; Session . set ( \" scr_hei \" , screen . height ) ; } ) ; } ) ; Template . getDim . helpers ( { bro_wid : function () { return Session . get ( \" bro_wid \" ) ; }, bro_hei : function () { return Session . get ( \" bro_hei \" ) ; }, scr_wid : function () { return Session . get ( \" scr_wid \" ) ; }, scr_hei : function () { return Session . get ( \" scr_hei \" ) ; } } ) ; } $ cat getDimension . html < head > < title > Window Size Detector </ title > </ head > < body > < h1 > Window Size Detector </ h1 > < div > < b > Resize your browser window ... </ b > < hr > </ div > {{ > getDim }} </ body > < template name = \" getDim \" > < div > Browser window width : {{ bro_wid }} </ div > < div > Browser window height : {{ bro_hei }} </ div > < div > Screen width : {{ scr_wid }} </ div > < div > Screen height : {{ scr_hei }} </ div > </ template > Ref: Get the size of the screen, current web page and browser window In Search of the Holy Grail How to Make My Website Fit Any Resolution","tags":"Tech","url":"http://leetschau.github.io/preferred-web-browser-resolution-when-developing-a-website.html","loc":"http://leetschau.github.io/preferred-web-browser-resolution-when-developing-a-website.html"},{"title":"Using Windows VM in Linux","text":"i3wm In Linux Mint i3wm, first build a Windows vm in VirtualBox. Then get the UUID of the guest OS with: $ VBoxManage list vms \"Win7Office\" { 35cd049b-7242-4db4-8329-2eb05149f5cf } ... The UUID will be used to start the vm with script. Save the following line in /usr/local/bin/win7: VBoxManage startvm 35 cd049b - 7242 - 4 db4 - 8329 - 2 eb05149f5cf --type gui Add executing permission: sudo chmod 755 /usr/local/bin/win7 ; Now start Windows vm with dmenu: alt-d -> win7. Make the vm full screen: press \"Home\" key, (here is right ctrl key), followed by alt-f. To leave the guest system to the #2 workspace: right ctrl, alt-2. In Ubuntu Unity desktop environment it's almost the same with that in i3wm, but use alt-f2 instead of alt-d to run the script. Use alt-tab instead of alt-2 to leave the Windows vm. Ubuntu Unity In System Settings -> Keyboard -> Shortcuts , add a new Custom Shortcuts : Name: startWin10 Command: VBoxManage startvm f65b33af-ffd7-41ac-bac4-228256cb51a1 --type gui Shortcut: Alt-Shift-F7","tags":"Tech","url":"http://leetschau.github.io/using-windows-vm-in-linux.html","loc":"http://leetschau.github.io/using-windows-vm-in-linux.html"},{"title":"Transfer Archive Files containing Chinese Filenames between Linux and Windows","text":"From Windows to Linux Download 7-Zip Windows installer (7z920-x64.msi for now) and install it. Create archive file in \"7z\" format. On Linux, extract it with 7z x mypkg.7z . Or test it with 7z l mypkg.7z . Note: You can create zip file with 7-Zip as well, but it can't handle Chinese filename correctly on Linux. From Linux to Windows Install 7-Zip on Mint: sudo aptitude install p7zip-full ; p7zip is command line port of 7-Zip for POSIX systems, including Linux. Create archive file \"myPkg.zip\" from path \"targetPath\": 7z a filename.zip targetPath ; 7z and zip format both handle Chinese filename correctly. On Windows, install 7-Zip (see above section), and extract it with it.","tags":"Tech","url":"http://leetschau.github.io/transfer-archive-files-containing-chinese-filenames-between-linux-and-windows.html","loc":"http://leetschau.github.io/transfer-archive-files-containing-chinese-filenames-between-linux-and-windows.html"},{"title":"Download Blocked Resource with RTorrent","text":"Today I need download a file via bt seed on kickass . However here BitTorrent protocol is blocked. So I install rtorrent on the Linode virtual host via sudo yum install rtorrent . Start it with rtorrent , press Backspace, and paste torrent file url in the text box. The file is downloaded to current folder. Finally download this file to my computer with scp myVirtualHost:~/theFile.zip . .","tags":"Tech","url":"http://leetschau.github.io/download-blocked-resource-with-rtorrent.html","loc":"http://leetschau.github.io/download-blocked-resource-with-rtorrent.html"},{"title":"Linux命令行中删除特殊名字的文件","text":"今天下载了一个zip文件，解压后出现一个文件名为\"-==(czRGsl)==-.mp4\"的文件，删除时出现下面的错误： [ chad @ chadleebj ~ ]$ rm * . mp4 rm : invalid option -- ' = ' Try ` rm . / ' -==(czRGsl)==-.mp4 '' to remove the file `-==(czRGsl)==-.mp4 ' . Try ` rm -- help ' for more information 加单引号和转义符都无效： [ chad @ chadleebj ~ ]$ rm ' -==(czRGsl)==-.mp4 ' rm : invalid option -- ' = ' Try ` rm . / ' -==(czRGsl)==-.mp4 '' to remove the file `-==(czRGsl)==-.mp4 ' . Try ` rm -- help ' for more information. [ chad @ chadleebj ~ ]$ rm \\ - \\ = \\ = \\ ( czRGsl \\ ) \\ = \\ =- . mp4 rm : invalid option -- ' = ' Try ` rm . / ' -==(czRGsl)==-.mp4 '' to remove the file `-==(czRGsl)==-.mp4 ' . Try ` rm -- help ' for more information 错误原因是将文件名的第一个字符\"-\"当成了选项符号，又没有\"=\"这个选项造成的，所以首先要在rm后加\"--\"告诉命令后面的\"-\"不是选项符号： [ chad@chadleebj ~ ] $ rm -- -==(czRGsl)==-.mp4 - bash : syntax error near unexpected token ` ( ' 其中的括号需要转义： [ chad@chadleebj ~ ] $ rm -- -==\\(czRGsl)==-.mp4 - bash : syntax error near unexpected token ` ) ' [ chad@chadleebj ~ ] $ rm -- -==\\(czRGsl\\)==-.mp4 搞定。","tags":"Tech","url":"http://leetschau.github.io/linuxming-ling-xing-zhong-shan-chu-te-shu-ming-zi-de-wen-jian.html","loc":"http://leetschau.github.io/linuxming-ling-xing-zhong-shan-chu-te-shu-ming-zi-de-wen-jian.html"},{"title":"PDF Margin Trimming Tools","text":"I am looking for a tool to trim the margin of pdf files, to be more convenient to reading on my 10.0 inch tablet. Briss do the work well. It's a java program, so jvm need to be installed beforehand. Download it (briss-0.9.tar.gz) and extract, run it with java -jar briss-0.9.jar , or java -jar briss-0.9.jar <target.pdf> , see README.txt for details. After several tries, I found the right process is NOT open pdf directly with briss. The following is the recommended way: First open the target pdf with evince <target.pdf> , see if the margin area is the same. If not, remember the special page numbers. For example, the first 6 pages, including cover, copy right page, etc, are different with the remaining pages. When starting briss, input \"1-6\" when asked for \"Enter pages to be excluded from merging\". Briss open page 1 to 6 respectively, and put all odd and even pages into 2 other \"clusters\". A cluster is group of pages share the same margin settings. So all odd pages use the same margin settings, and all even pages use same margin settings, (which may be different with the odd cluster). Use mouse to set the rectange in each cluster, then [Action -> Preview], if it's ok, [Action -> Crop PDF]. For convenience, add the following codes into ~/.bash_aliases: function briss () { java - jar $ HOME / apps / briss - 0 . 9 / briss - 0 . 9 . jar $ 1 } So now crop pdf with briss <target.pdf> . If define alias with alias briss='java -jar $HOME/apps/briss-0.9/briss-0.9.jar' , tab-completion doesn't work. So here we use function. I also tried pdfcrop, which is installed with sudo apt-get install texlive-extra-utils . After cropped, the page index information is lost. And page size vary with the text area. So it's not recommended.","tags":"Tech","url":"http://leetschau.github.io/pdf-margin-trimming-tools.html","loc":"http://leetschau.github.io/pdf-margin-trimming-tools.html"},{"title":"网站线框图绘制工具","text":"纸和笔 修改比较麻烦，复制成本高，表达能力强。 软件工具 Pencil Pencil 可以通过下载Firefox插件或者deb包的方式在Linux上安装，接近于手画，目前找到的唯一一个开源软件。 开发过程中，需要安装它的Dojo Widgets，其中包含按钮，文本框等一些必需的控件， Pencil只能导出为单页html文件，试验发现其TabNav和jQuery两个模板导出的html网页可以比较好地模拟多页html效果。 Dojo widgets和TabNav, jQuery两个模板都可以在官网的 Stencils 页面上找到下载信息。 这里下载到的是Dojo.GUI_v6.zip, TabNav.zip和JQUERY.zip这3个文件。 Cacoo Cacoo 是一个在线工具，基于flash开发，优点是有比较好的模板，可以直接在上面改，缺点是必须有网络，运行速度略慢，不能导出源代码，免费版有数量限制。 Axure RP Pro Axure RP 大概是国内知名度最高的原型开发工具了，功能强大，学习资料多，绿色版运行需要先安装Microsoft .NET framework 4.0. 其他还有很多在线线框图制作网站，一般都是收费的，或者限制功能版免费，功能类似于Cacoo，搜索\"wireframing tool quora\"可以找到一些比较好的推荐文章。","tags":"Tech","url":"http://leetschau.github.io/wang-zhan-xian-kuang-tu-hui-zhi-gong-ju.html","loc":"http://leetschau.github.io/wang-zhan-xian-kuang-tu-hui-zhi-gong-ju.html"},{"title":"Manipulating CSV Files in Command Line","text":"csvkit Here we manipulate csv files with csvkit . It's developed with Python. So install it with sudo pip install csvkit ; Convert xls, xlsx file into csv file: in2csv input.xlsx > data.csv ; List column titles of a csv file: csvcut -n data.csv ; Print statistic information for each columns in a csv file: csvstat data.csv ; Pretty print the first 3 columns, first 5 rows of data: csvcut -c 1-3 agenda.csv | head -6 | csvlook . Print the first, second, 11th, 16th column of first 9 records (another one for headline): csvcut -c 1,2,11,16 data.csv|head ; If there are newline characters in records, add \"-l\" option to make it clear: csvcut -l -c 1,2,11,16 data.csv|head ; Convert to json file with csvjson:, head fairData150104.csv|csvjson -i 4 , where \"-i\" specify how many indent spaces, default is no indent. Or select some collomns to show: csvcut -c 1,2,11,16 fairData150104.csv|head|csvjson -i 4 Select some columns and save to a new file: csvcut -c <col-index> input.csv > output.csv . For example, save the 2nd and 3rd columns of file 276107.csv to file windspeed.csv : csvcut -c 2,3 276107.csv > windspeed.csv . csvtool Install: sudo aptitude install csvtool ; Pretty print the first 3 columns, first 5 rows of data: csvtool col 1-3 agenda.csv | head -6 | csvtool readable - . csvtool sub data.csv: Take a square subset of the CSV, top left at row , column , which is deep and wide. and count from 1, or from 0 if -z option is given. Example: csvtool sub 1 16 1 1 data.csv csvtool take data.csv: take first rows of the csv, like \"head\" in shell; csvtool drop data.csv: drop the first rows and return the rest (if any). See csvtool -h for details. To print the n th record easily, add the following function into ~/.bash_alias file: function ctls () { if test $# - eq 3 ; then csvtool drop $2 $1 | csvtool take $3 - else echo ctls : csvtool list specified record echo Synopsis : ctls ' <filename> <startNo> <count> ' fi } Now print the 3rd record of data.csv with ctls data.csv 3 1 . The \"-\" in \"csvtool take\" means \"get input from stdin instead of a file\". Select some columns and save to a new file: csvtool col <col-index> input.csv > output.csv . For example, save the 1,2,3 and 6th columns of input file to output file: csvtool col 1-3,6 input.csv > output.csv . Join some files column-wise: $ cat aa.csv col1,col2 11 ,21 12 ,22 $ cat bb.csv col3,col4 31 ,41 32 ,42 $ csvtool paste aa.csv bb.csv col1,col2,col3,col4 11 ,21,31,41 12 ,22,32,42 Put them together Count the number of records which the 7th field is empty: csvgrep -c 7 -r \"&#94;$\" data.csv | csvtool height - ; Count the number of records which the 7th field is NOT empty: csvgrep -c 7 -r \"&#94;.+$\" data.csv | csvtool height - ; Pretty print all rows whose 3rd column is Bob in file agenda.csv : csvgrep -c 3 -m 'Bob' agenda.csv| csvcut -c 1-3 | csvtool readable - Print data on screen without line wrap: less -S <filename> ;","tags":"Tech","url":"http://leetschau.github.io/manipulating-csv-files-in-command-line.html","loc":"http://leetschau.github.io/manipulating-csv-files-in-command-line.html"},{"title":"Compare Users in 2 Days with Spark","text":"We have 2 log files. One contains logs created in 2014.11.22, the other all in 2014.11.23. Each have about 240 million logs in it, with file size 30GB. The log in these files are like this: \"460015482006002\",\"深圳市\",\"广东省\",\"2014-12-22 16:46:04\",\"2014-12-22 16:46:04\",\"42705\",\"16111\",\"460014270516111\",\"MAP\" The number in the first column \"460015482006002\" represents a unique user, which is called \"IMSI\". We need to find all IMSI number only exists in 2014.11.22. Given the huge size of log files, we compute with Apache Spark. Create only22.scala: import java.util.Date import java.util.Calendar import java.util.concurrent.TimeUnit val SIG_DATA1 = \"datamine/drawdata_20141122_cs.utf8.csv\" val SIG_DATA2 = \"datamine/drawdata_20141123_cs.utf8.csv\" val USER_ID_POS = 1 def get_users ( data : String ): Set [ String ] = { val raw_data = sc . textFile ( data ) . map ( _ . split ( \" \\\" \" ) . toList ) val raw_sig_map = raw_data . filter ( x => x . size > 17 ) val users = raw_sig_map . map ( _ ( USER_ID_POS )) . distinct return users . toArray . toSet } val u1 = get_users ( SIG_DATA1 ) val u2 = get_users ( SIG_DATA2 ) val only22 = u1 -- u2 scala . tools . nsc . io . File ( \"only22.txt\" ) . writeAll ( only22 . toString ) Run it: spark-shell --master spark://cloud142:7077 --driver-memory 6g --driver-cores 5 --total-executor-cores 28 --executor-memory 20g -i only22.scala In file only22.txt, all elements in the set are written in one line. So we have to replace all \",\" with newline character: sed -i 's/,/\\n/g' only22.txt ;","tags":"Tech","url":"http://leetschau.github.io/compare-users-in-2-days-with-spark.html","loc":"http://leetschau.github.io/compare-users-in-2-days-with-spark.html"},{"title":"将中文字符串转换为拼音首字母串","text":"下面的Python脚本将任意汉字和英文、数字混合字符串转换为拼音首字母组成的字符串， 注意：有些汉字不能查找到首字母，例如\"深圳东莞\"的\"圳\"和\"莞\"两个字，原因不明。 需要在vi中用\"/\\<[A-Z]>搜索这种情况。 实现过程是：首先尝试用unicode, utf8和gbk解码字符串，然后用GBK编码字符串，利用GBK汉字是按拼音顺序编码的原理查出其首字母。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #!/usr/bin/env python # -*- coding: utf-8 -*- def get_word_initial ( inp ): if isinstance ( inp , unicode ): unicode_str = inp else : try : unicode_str = inp . decode ( 'utf8' ) except : try : unicode_str = inp . decode ( 'gbk' ) except : print 'unknown coding' return init_list = [ get_char_initial ( i ) for i in unicode_str ] return \"\" . join ( init_list ) def get_char_initial ( unicode1 ): gbkStr = unicode1 . encode ( 'gbk' ) try : ord ( gbkStr ) return gbkStr except : asc = ord ( gbkStr [ 0 ]) * 256 + ord ( gbkStr [ 1 ]) - 65536 if asc >= - 20319 and asc <= - 20284 : return 'A' if asc >= - 20283 and asc <= - 19776 : return 'B' if asc >= - 19775 and asc <= - 19219 : return 'C' if asc >= - 19218 and asc <= - 18711 : return 'D' if asc >= - 18710 and asc <= - 18527 : return 'E' if asc >= - 18526 and asc <= - 18240 : return 'F' if asc >= - 18239 and asc <= - 17923 : return 'G' if asc >= - 17922 and asc <= - 17418 : return 'H' if asc >= - 17417 and asc <= - 16475 : return 'J' if asc >= - 16474 and asc <= - 16213 : return 'K' if asc >= - 16212 and asc <= - 15641 : return 'L' if asc >= - 15640 and asc <= - 15166 : return 'M' if asc >= - 15165 and asc <= - 14923 : return 'N' if asc >= - 14922 and asc <= - 14915 : return 'O' if asc >= - 14914 and asc <= - 14631 : return 'P' if asc >= - 14630 and asc <= - 14150 : return 'Q' if asc >= - 14149 and asc <= - 14091 : return 'R' if asc >= - 14090 and asc <= - 13119 : return 'S' if asc >= - 13118 and asc <= - 12839 : return 'T' if asc >= - 12838 and asc <= - 12557 : return 'W' if asc >= - 12556 and asc <= - 11848 : return 'X' if asc >= - 11847 and asc <= - 11056 : return 'Y' if asc >= - 11055 and asc <= - 10247 : return 'Z' return '' if __name__ == \"__main__\" : str_input = '广州火车站A2c' print ( get_word_initial ( str_input )) 下面是一个完整的使用场景，利用上面的代码为小区的地理位置表添加ID字段。 首先将上面的代码保存在chnInit.py中，然后相同目录下创建一个addID.py文件： import chnInit import sys target = sys . argv [ 1 ] inclID = sys . argv [ 2 ] with open ( target , 'r' ) as src : with open ( inclID , 'w' ) as dst : for content in src : line = content . strip () cgi = line . split ( ' ,' )[ 0 ] node = line . split ( ' ,' )[ 1 ] . split ( ' ' )[ 0 ] city = line . split ( ' ,' )[ 1 ] . split ( ' ' )[ 1 ] nodeID = chnInit . get_word_initial ( node ) cityID = chnInit . get_word_initial ( city ) dst . write ( cgi + ' ,' + city + ' ' + cityID + ' ' + node + ' ' + nodeID + ' \\n ' ) 相同目录下保存输入文件input.csv，然后运行脚本： $ head input.csv 460010973309433 ,白云国际机场 广州 ... $ python addID.py input.csv loc_map.csv $ head loc_map.csv 460010973309433 ,广州 GZ 白云国际机场 BYGJJC ... 根据Python文档7.2.1节：\"Methods of File Objects\"中的描述： For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code: with open ( target , ' r ' ) as f : for line in f : ... 这种方式比较节省内存，适于处理大文件。 当处理小文件时，可以用下面的方法将完整内容保存在一个变量中： with open ( 'workfile' , 'r' ) as f : read_data = f . read ()","tags":"Tech","url":"http://leetschau.github.io/jiang-zhong-wen-zi-fu-chuan-zhuan-huan-wei-pin-yin-shou-zi-mu-chuan.html","loc":"http://leetschau.github.io/jiang-zhong-wen-zi-fu-chuan-zhuan-huan-wei-pin-yin-shou-zi-mu-chuan.html"},{"title":"Frequent Used Commands in Mongodb Shell","text":"The foloowing codes demonstrate the creation (C), query (R), update (U) and delete (D) operations on mongodb collections. It also shows how to rename collections and keys of documents. $ mongo db . fairs . insert ( { ' name ' : ' bikeShow ' , ' time ' : ' 2014.12.24 ' , ' location ' : ' Beijing ' , ' products ' : [ ' bike ' , ' car ' , ' truck ' ]} ) db . fairs . insert ( { ' name ' : ' clothShow ' , ' time ' : ' 2014.2.14 ' , ' location ' : ' Shanghai ' , ' products ' : [ ' silk ' , ' wood ' , ' paper ' ]} ) db . fairs . insert ( { ' name ' : ' MyFruits ' , ' time ' : ' 2011.4.18 ' , ' location ' : ' Guangzhou ' , ' products ' : [ ' berry ' , ' apple ' , ' banana ' ]} ) db . newfairs . find ( {}, { name : 1 } ) db . newfairs . find ( {}, { ' name.chn ' : 1 } ) db . fairs . renameCollection ( ' newfairs ' ) db . newfairs . update ( {}, {$ rename : { ' time ' : ' date ' } }, { multi : true } ) db . newfairs . update ( {}, {$ rename : { ' name ' : ' names ' } }, { multi : true } ) db . newfairs . update ( {}, {$ rename : { ' names ' : ' name.chn ' } }, { multi : true } ) db . newfairs . update ( {}, {$ unset : { ' date ' : \"\" }}, { multi : true } ) db . newfairs . remove ( {} ) db . newfairs . drop () exit You can't use {$rename: {'name': 'name.chn'}} directly for \"$rename must not be on the same path\". Find docs whose \"website\" field is not null: db.fairs.findOne({$where: \"this.website.length > 0\" } ) ; Remove all docs whose \"position\" field is an empty string: db.fairs.remove( { $where: \"this.position.length == 0\" } ) ;","tags":"Tech","url":"http://leetschau.github.io/frequent-used-commands-in-mongodb-shell.html","loc":"http://leetschau.github.io/frequent-used-commands-in-mongodb-shell.html"},{"title":"遍历Javascript对象属性的方法","text":"启动node.js命令行，创建一个最简单的对象，然后遍历其属性： $ node > var myobj = { k1 : \" p1 \" , k2 : ' p2 ' } > for ( var key in myobj ) { ... console . log ( key ) ; ... console . log ( myobj . key ) ; ... console . log ( myobj [ key ] ) ; ... } k1 undefined p1 k2 undefined p2 > myobj . k1 ' p1 ' > var ak = ' k4 ' undefined > myobj . ak = ' p4 ' ' p4 ' > myobj { k1 : ' p1 ' , k2 : ' p2 ' , ak : ' p4 ' } > myobj [ ak ] = ' p4 ' ' p4 ' > myobj { k1 : ' p1 ' , k2 : ' p2 ' , ak : ' p4 ' , k4 : ' p4 ' } > myobj [ nk ] = ' p5 ' ReferenceError : nk is not defined at repl : 1 : 8 at REPLServer . self . eval ( repl . js : 110 : 21 ) ... > myobj [ ' nk ' ] = ' p5 ' ' p5 ' > myobj { k1 : ' p1 ' , k2 : ' p2 ' , ak : ' p4 ' , k4 : ' p4 ' , nk : ' p5 ' } 点操作符 (myobj.key) 和中括号 (myobj[key]) 都能用于获取和添加对象属性， 二者的区别在于，点操作符后面的属性名称按照字面量处理， 中括号中的属性名称按照变量名处理。 如果想通过变量名读写对象属性，必须用中括号操作符， 如果想不写引号直接引用属性名称，必须用点操作符。 搜索\"javascript object dot square bracket\"查找相关文章。","tags":"Tech","url":"http://leetschau.github.io/bian-li-javascriptdui-xiang-shu-xing-de-fang-fa.html","loc":"http://leetschau.github.io/bian-li-javascriptdui-xiang-shu-xing-de-fang-fa.html"},{"title":"清理/usr/local/bin目录","text":"为一个用户增加可执行文件通常有两种方法， 第一种是将可执行文件所在的目录添加到命令行自启动文件中（例如~/.profile，~/.bashrc，~/.zshenv等）， 这种方法的优点是无需root权限，绿色无污染， 缺点是只对命令行有效，只对一个用户有效， 并且不适用于从全局启动目录（如i3wm的dmenu命令行）中启动图形界面程序； 另一种是把可执行文件添加到/usr/local/bin目录中，这个目录一般用来存放用户自定义的全局可执行命令， 优缺点与上面修改自启动文件的方式相反； 一段时间后/usr/local/bin下可能会有很多文件，清理的方法根据来源不同而不同： 对于链接，直接删除； 对非链接文件，用 dpkg -l 确认是否为apt-get或者dpkg安装的，然后用 apt-get remove 删除； 如果不是上面的情况，用 pip list|grep <filename> 检查是否用pip安装的，若是，用 pip uninstall 删除。","tags":"Tech","url":"http://leetschau.github.io/qing-li-usrlocalbinmu-lu.html","loc":"http://leetschau.github.io/qing-li-usrlocalbinmu-lu.html"},{"title":"Run Java Program in Java Program","text":"Usually we can run shell command in Java program with Runtime.getRuntime.exec(shellName); . But if the shell command is java -cp \"lib/*\" MainClass , you can't get any output from \"line = reader.readLine()\". You have to use ProcessBuilder instead of Runtime.exec to execute these commands. Maybe the reason is the double quotes after \"-cp\" option is mandatory, which are conflict with double quotes in parameters of Runtime.exec. public static final String USER_PLUGIN_PATH = \" plugins \" ; public static final String USER_CLASSPATH = USER_PLUGIN_PATH + \" /lib/* \" ; public void runJavaProgram ( String mainClass ) { logger . info ( \" Running java program in class: \" + mainClass ) ; try { ProcessBuilder pb = new ProcessBuilder ( \" java \" , \" -cp \" , USER_CLASSPATH , mainClass ) ; pb . redirectErrorStream ( true ) ; Process process = pb . start () ; // Process process = Runtime . getRuntime () . exec ( \" java -cp \" + USER_CLASSPATH + mainClass ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ())) ; String line = \"\" ; String output = \"\" ; while (( line = reader . readLine ()) != null ) { logger . debug ( line ) ; output += line + System . getProperty ( \" line.separator \" ) ; } process . waitFor () ; } catch ( IOException e ) { e . printStackTrace () ; } catch ( InterruptedException e ) { e . printStackTrace () ; } }","tags":"Tech","url":"http://leetschau.github.io/run-java-program-in-java-program.html","loc":"http://leetschau.github.io/run-java-program-in-java-program.html"},{"title":"Linux System Memory Probe","text":"Using top Run top then press \"M\" (which means \"Shift-m\"). Press \"P\" for sorting by CPU usage. Press \"f\" to define which columns you want to display or hide on screen. You can also try \"x\", \"<\", \">\" to demonstrate their functions. Using \"R\" to determine sort styles between high-to-low and low-to-high sorts. See \"SORTING of task window\" in section 4c of man top for details. GUI Utility On Ubuntu 14.04, press Win key then input \"system\" to run \"System Monitor\". In \"Processes\" tab page, click \"Memeory\" column. Using smem smem is a tool that can give accurate reports on memory usage of one/all process(es) on Linux systems. Install it with apt install smem or yum install smem . Pandas 和 PySpark 内存使用情况分析 本地纯 Pandas 实现的算法，使用 pytest 运行测试用例： smem -k -t -c \"pid name command user pss\" -P pytest 基于 PySpark + Pandas 方案运行： smem -k -t -c \"pid name command user pss\" -P spark 其中 -k 表示显示数字单位， -t 表示现实汇总值， -c 指定输出哪些列， -P 表示用后面的关键字过滤线程，这里线程的名字可以通过 htop 或者 ps 查出来。 Notes: Copy from http://www.selenic.com/smem/: List all process's memory consumption of a user: smem -u <username> Show basic process information: smem Show library-oriented view: smem -m Show user-oriented view: smem -u Show system view: smem -R 4G -K /path/to/vmlinux -w Show totals and percentages: smem -t -p Show different columns: smem -c \"name user pss\" Sort by reverse RSS: smem -s rss -r Show processes filtered by mapping: smem -M libxml Show mappings filtered by process: smem -m -P [e]volution Read data from capture tarball: smem --source capture.tar.gz Show a bar chart labeled by pid: smem --bar pid -c \"pss uss\" Show a pie chart of RSS labeled by name: smem --pie name -s rss","tags":"Tech","url":"http://leetschau.github.io/linux-system-memory-probe.html","loc":"http://leetschau.github.io/linux-system-memory-probe.html"},{"title":"Mongodb Notes","text":"Install on Linux Run Mongodb with Bitnami This is the recommended way to use mongodb for dev purpose, especially on laptop. First download bitnami mongodb installer, for example, bitnami-mongodb-3.4.0-0-linux-x64-installer.run , from MongoDB Stack . Run it to install in a local folder, say (MONGODB_HOME*. Modify bind_ip to 0.0.0.0 and auth to false in *\\) MONGODB_HOME/mongodb/mongodb.conf to make it can be accessed from remote, and turn off authentication. Run ./ctlscript.sh restart to reload the new conf. Install as a service Install, run and uninstall mongodb with aptitude. Ref: Install MongoDB on Ubuntu Start mongodb server as a common user The default data path of Mongodb is /data/db, which you have to create as root. If you just want play around mongodb with some test data, you can create a temporary folder as data directory: $ mkdir ~/docs/tmp/mongodb-repo $ cd ~/apps/mongodb-linux-x86_64-2.6.5 $ bin/mongod --dbpath ~/docs/tmp/mongodb-repo // in a new shell $ ~/apps/mongodb-linux-x86_64-2.6.5/bin/mongo For convenience, add PATH=$HOME/apps/mongodb-linux-x86_64-2.6.5/bin:$PATH into ~/.zshenvr, and alias mongod='mongod --dbpath /home/chad/docs/tmp/mongodb-repo' into ~/.bash_alias. Make sure the following lines exist in ~/.zshrc: if [ - f ~/ . bash_aliases ] ; then . ~/ . bash_aliases fi Now we can start mongo server and client anywhere in a shell. Run mongod via sudo Extract MongoDB package to /opt as root and mkdir -p /data/db ; Add MongoDB path into common user's .zshenv: PATH=$PATH:/opt/mongodb-linux-x86_64-ubuntu1404-3.0.3/bin ; Add alias mongod='sudo env PATH=$PATH mongod' into .bash_aliases; Now as a common user, start mongodb service with mongod , run client via mongo . Note: Do NOT add alias sudo='sudo env PATH=$PATH' into .bash_aliases, as suggested in http://stackoverflow.com/questions/257616/sudo-changes-path-why# For this will modify sudo's PATH globally. And the auto-completion won't work. For example: sudo apti<Tab> can't be converted to sudo aptitude . on Windows Install with choco install mongodb . Start server with mongod --dbpath \"C:\\Users\\lee_c\\AppData\\Local\\Temp\" in folder C:\\Program Files\\MongoDB\\Server\\3.4\\bin . Database Management First start mongo server mongod . Then start the client with mongo . All the following commands is running in mongo shell, whose prompt is '> '. List all existing database: show dbs ; Create a new database \"meteor\" and switch to it: use meteor ; Remove database \"mydb\": use mydb , then db.dropDatabase() ; Backup and Restore Backup a database to a directory: mongodump -d <db_name> -o <bak_dir> ; Backup a collection: mongodump -d <db_name> -c <collection_name> ; Restore a collection: mongorestore -d <target_db_name> -c <target_collection_name> <target_collection_name>.bson ; Sync Database Remotely Here we backup database \"test\" in local mongodb, transfer it to a remote host (we name it \"ld\"), and restore this database into host's mongodb. # on local host cd mongodump - d test - c fairs scp - r dump ld : ~/ rm - rf dump # on remote host ld cd ~/ dump mongorestore - d meteor test In the last command, the \"meteor\" is the target database, the following \"test\" is a folder name contains dumped data from local host. Data Refinement Remove duplicated documents in a collection (\"fairs\") based on a key (\"chnName\"): db.fairs.ensureIndex({chnName:1}, {unique : true, dropDups : true}) ; map-reduce example: the \"mapReduce\" function has 3 arguments: the mapper, the reducer, and the definition of input (query) and output (out). The \"emit\" function has 2 arguments, the first is the \"key\", the 2nd is the value. In the following demo, the first mapReducer calculates the average of all ranks of fair with id \"54cef40a191f3bb2ef12bdf7\", the second mapReducer calculates every fair's average of user ranks. The result of mapReduce is put into a new collection, instead of returning a object. > db . userComments . find () { \" _id \" : \" 5fSQFR4kSLGLc9nLk \" , \" fairId \" : \" 54cef40a191f3bb2ef12bdf7 \" , \" userId \" : \" gpxst3JwJNPT33maf \" , \" rank \" : 4 } { \" _id \" : \" oRmXmdPnsvSQNSNK3 \" , \" fairId \" : \" 54cef40a191f3bb2ef12bdf7 \" , \" userId \" : \" yiio2r3fQ64nqAC4j \" , \" rank \" : 5 } { \" _id \" : \" DePtvHcNvwMpLPdq8 \" , \" fairId \" : \" 54cef40a191f3bb2ef12bdf8 \" , \" userId \" : \" yiio2r3fQ64nqAC4j \" , \" rank \" : 2 } { \" _id \" : \" eX9jWZt74cHMg3jAe \" , \" fairId \" : \" 54cef40a191f3bb2ef12bdf8 \" , \" userId \" : \" gpxst3JwJNPT33maf \" , \" rank \" : 5 } { \" _id \" : \" xntPL4Pnyasen2jcx \" , \" fairId \" : \" 54cef40a191f3bb2ef12bdf8 \" , \" userId \" : \" bc3iNrRpN7Wdi26zP \" , \" rank \" : 4 } > db . userComments . mapReduce ( function () { emit ( this . fairId , this . rank ) ; }, function ( key , values ) { return Array . avg ( values ) ; }, { query : { fairId : \" 54cef40a191f3bb2ef12bdf7 \" }, out : \" rank_avg \" } ) ; { \" result \" : \" rank_avg \" , \" timeMillis \" : 60 , \" counts \" : { \" input \" : 2 , \" emit \" : 2 , \" reduce \" : 1 , \" output \" : 1 }, \" ok \" : 1 } > db . rank_avg . find () { \" _id \" : \" 54cef40a191f3bb2ef12bdf7 \" , \" value \" : 4 . 5 } > db . userComments . mapReduce ( function () { emit ( this . fairId , this . rank ) ; }, function ( key , values ) { return Array . avg ( values ) ; }, { out : \" rank_avg \" } ) ; > db . rank_avg . find () { \" _id \" : \" 54cef40a191f3bb2ef12bdf7 \" , \" value \" : 4 . 5 } { \" _id \" : \" 54cef40a191f3bb2ef12bdf8 \" , \" value \" : 3 . 6666666666666665 } Update a element of an array: db.Fair.update( { \"nameZHCN\": /117/ }, {$set: {\"recurrence.0.expomap\": \"ZoimfczNHGMefysvt\" } } ) ; Note the double quotes of \"recurrence.0.expomap\" is mandatory. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/mongodb-notes.html","loc":"http://leetschau.github.io/mongodb-notes.html"},{"title":"CentOS服务器根目录空间被占满的解决方法","text":"60和61服务器根目录(/)50G空间全被占满，用 du -shx /* 查看，非挂载目录的空间加起来远达不到50GB， 查了一下，怀疑原因是原来挂在/mnt下的data1和data2目录下的两块大容量磁盘由于某种原因没有挂载上， 但cloudera manager管理的hadoop和hdfs系统仍然在向这两个目录下存放大文件，导致空间被耗光， 验证方法是用 mount 命令检查/mnt下是否有挂载，如果有，将它们卸载掉，看/mnt下是否还有文件， 有的话删除掉就好了。 如果不是这个原因，还可能是被删除的大文件没有释放，用 lsof|grep \"deleted\" 检查； 参考： Disk full, du tells different. How to further investigate? du vs. df difference How do I find out what is using up all the space on my / partition? What do I do when my root filesystem is full? Centos , /dev/root is getting full. Cannot find disk space usage","tags":"Tech","url":"http://leetschau.github.io/centosfu-wu-qi-gen-mu-lu-kong-jian-bei-zhan-man-de-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/centosfu-wu-qi-gen-mu-lu-kong-jian-bei-zhan-man-de-jie-jue-fang-fa.html"},{"title":"HTML笔记","text":"HTML 布局原理 HTML元素分为块级元素(block element)和行内元素(inline element)， 前者独占一行，也就是元素的头和尾会被自动加上换行符，如 , , , , 等； 后者不会独占一行，如 , , , , 等； CSS布局原理： CSS Box Model . 一个CSS box从外向内分为4部分：margin, border, padding, content. 除了最内部的内容部分(content)，其他3部分都可以设置宽度， 其中margin是块级元素边界(border)之外的透明区域； border是边界线，默认宽度为0，即不可见； padding是内容(content)到边界之间的透明区域； 将下面的代码保存在一个html文件中，可以看到各部分的作用： <! DOCTYPE html > < html > < head > < style > div { background - color : lightgrey ; width : 300 px ; padding : 15 px ; border : 5 px solid navy ; margin : 25 px ; } </ style > </ head > < body > < div > Lorem ipsum dolor sit amet , consectetur adipiscing elit , sed do eiusmod . Ut enim ad minim veniam , quis nostrud exercitation ullamco laboris nisi . Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur . Excepteur sint occaecat cupidatat non proident , sunt in culpa qui officia deserunt . </ div > </ body > </ html > HTML5 测试浏览器对HTML5的支持度：用待测浏览器打开 HTML5test ，该网页会列出浏览器对HTML5每一项特性支持与否。 Semantic Element Ref: HTML5 Semantic Elements","tags":"Tech","url":"http://leetschau.github.io/htmlbi-ji.html","loc":"http://leetschau.github.io/htmlbi-ji.html"},{"title":"Build Executable Jar in Command Line","text":"Build a executable jar file using external jars: $ find . ./ Mod1 . java ./ mf ./ lib ./ lib / commons - io - 2.4 . jar $ cat Mod1 . java import org.apache.commons.io.FileUtils ; import java.io.File ; public class Mod1 { public static void main ( String [] args ) { String [] scriptExt = new String [] { \"scala\" }; System . out . println ( \"List all scala files: \" + FileUtils . listFiles ( new File ( \"/home/chad/docs/tmp\" ), scriptExt , false )); } } $ cat mf Class - Path : lib / commons - io - 2.4 . jar Main - Class : Mod1 $ javac - cp lib /* Mod1 . java $ jar cfm pkg . jar mf Mod1 . class $ java - jar pkg . jar List all scala files : [ / home / chad / docs / tmp / sf2 . scala , / home / chad / docs / tmp / lookup . scala , / home / chad / docs / tmp / spark - filter . scala , / home / chad / docs / tmp / hw . scala , / home / chad / docs / tmp / newDel . scala , / home / chad / docs / tmp / scalaTime . scala , / home / chad / docs / tmp / sf3 . scala ] Note that classpath wildcard can't be used in manifest file (here is mf), which means \"Class-Path: lib/*\" doesn't work. See 5 things you didn't know about ... JARs for explanations. The \"-cp\" option or \"CLASSPATH=...\" is invalid in java -jar xxx.jar . So if you don't want to create manifest file by hand, run java program with java -cp ... MainClass : $ tree . ├── com │ └── boco │ └── example │ └── Example . java └── lib └── commons - io - 2.4 . jar 4 directories , 2 files $ cat com / boco / example / Example . java package com . boco . example ; import org.apache.commons.io.FileUtils ; import java.io.File ; import java.util.Collection ; import org.apache.commons.io.filefilter.DirectoryFileFilter ; import org.apache.commons.io.filefilter.TrueFileFilter ; public class Example { public static void main ( String [] args ) { Collection < File > found = FileUtils . listFiles ( new File ( \".\" ), TrueFileFilter . INSTANCE , DirectoryFileFilter . DIRECTORY ); System . out . println ( \"List files with apache-commons.FileUtils:\" ); for ( File f : found ) { System . out . println ( f ); } System . out . println ( \"--- OVER ---\" ); } } $ javac - cp lib / commons - io - 2.4 . jar com / boco / example / Example . java $ jar cf example . jar com $ mv example . jar lib $ tree . ├── com │ └── boco │ └── example │ ├── Example . class │ └── Example . java └── lib ├── commons - io - 2.4 . jar └── example . jar 4 directories , 4 files $ java - cp \"lib/*\" com . boco . example . Example List files with apache - commons . FileUtils : ./ com / boco / example / Example . java ./ com / boco / example / Example . class ./ lib / example . jar ./ lib / commons - io - 2.4 . jar --- OVER ---","tags":"Tech","url":"http://leetschau.github.io/build-executable-jar-in-command-line.html","loc":"http://leetschau.github.io/build-executable-jar-in-command-line.html"},{"title":"Deploy Web Server on Linode","text":"Setup Virtual Host Buy a Linode instance on linode . Note its IP address on the home page in your user account. Install a Linux system and secure it . Ref: Getting Started for instructions. To build a new VPS, in Linodes -> Rebuild, select OS (\"Ubuntu 14.04 LTS\" for now), set root password, and click \"rebuild\" button, it will create disks and configuration profile automatically. Then click \"boot\" button under configuration profile. After system startup (see progress in \"Dashboard -> Host Job Queue\"), Connect to the VPS with SSH according to commands in \"Remote Access\". Or you can create disks, then configuration profile manually in \"Dashboard\". Create new disks under \"Disks\", usually a boot part (3GB), a home part and a swap (same capacity with memory). Connect domain name and IP address Here we link multiple Domain names to the same IP address. Then direct different domain requests to its corresponding port using nginx. First register (purchase) a domain name, if you haven't already. Here I used niufairs.com and \"niufairs.cn purchased on net.cn . Set IP address in \"进入会员中心 -> 我的域名 -> niufairs.com -> 域名解析 -> 解析设置 -> 设置网站解析 -> 把域名指向我的网站-添加IP地址\", add your Linode instance IP address as \"A\" record, Then wait up to 24 hours for the changes to take effect. I waited about 30 minutes to take effect. Next set your domain name to use Linode's name servers (\"ns1.linode.com\" to \"ns5.linode.com\") in \"我的域名 -> niufairs.com -> 基本管理 -> DNS修改/创建 -> DNS服务器 -> 修改域名DNS\". On Linode, come to \"DNS Manager\" in Linode dashboard, click \"Add a domain zone\". Set \"Domain\" as your purchased domain name, for example, \"niufairs.com\". Set \"SOA Email\" the email address of the administrator, for example, \"lc@126.com\". Then click \"Add a Master Zone\". Setting Reverse DNS On linode instance dashboard -> Remote access -> Reverse DNS, enter \"niufairs.com\", and press \"Look up\". Ref: Hosting a website . Config Relationship betwwen domain and port Fist install nginx (with aptitude on Ubuntu). Edit /etc/nginx/nginx.conf as follows: events { worker_connections 1024 ; } http { server { server_name niufairs.cn ; location / { proxy_pass http : // localhost : 3000 / ; } } server { server_name niufairs.com ; location / { proxy_pass http : // localhost : 4000 / ; } } log_format main '$remote_addr - $remote_user [ $time_local ] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"' ; access_log / var / log / nginx / access . log main ; } Test if this conf is right: nginx -t ; If test ok, reload conf: nginx -s reload ; Now start 2 meteor app on port 3000 and 4000, and you can use niufairs.cn and niufairs.com to visit them respectively. If you want server some static files, add a new \"server\" section in \"http\" of nginx.conf: http { server { server_name newfairs . cn ; location / { root / data / www ; } location / images / { root / data ; } } server { ... } } Configure Email Server I bought an business account on FastMail , and configure 3 places to make the mail server functional: In FastMail masteruser@niufairs.com account, add \"niufairs.com\" in \"Domains\" section in \"Manage\" panel. Add the following record on net.cn (website's registrar): 记录类型: MX, 主机记录: @, 记录值: in1-smtp.messagingengine.com, MX优先级: 1, TTL: 10分钟. Add the following record on \"niufairs.com\" on Linode.com: MX Records -> Mail Server: in1-smtp.messagingengine.com, Preference: 10, TTL: Default. Refs: Nginx proxy several domains to different ports Serving Static Content","tags":"Tech","url":"http://leetschau.github.io/deploy-web-server-on-linode.html","loc":"http://leetschau.github.io/deploy-web-server-on-linode.html"},{"title":"CSS and LESS Notes","text":"CSS selector rules: CSS Selectors CSS Combination rules: CSS Combinators Addition to the above rules, you can use \"element.class\" to specify a specified elment. For example, \"p.bluecolor\" will select \"all p elements with class bluecolor\". A will not be included. See Class selectors for details. LESS introduction: LESS Is More: Make Your CSS Coding Easier with LESS","tags":"Tech","url":"http://leetschau.github.io/css-and-less-notes.html","loc":"http://leetschau.github.io/css-and-less-notes.html"},{"title":"Meteor MongoDB Notes","text":"Connect to a mongodb of a Meteor app: run meteor at the project root. Start another shell, go to this folder, and run meteor mongo ; List all available commands: help ; List DB operation methods: db.help() ; List all existing collection names: show collections ; List all available commands of a collection: db.<collection-name>.help() ; Show collection information: db.<collection-name>.stats() ; Print all \"name\" field of collection \"fairs\": db.fairs.find({}, {name_chn: 1}) ; Print all fields except \"name_chn\" of collection \"fairs\": db.fairs.find({}, {products: 0}) ;","tags":"Tech","url":"http://leetschau.github.io/meteor-mongodb-notes.html","loc":"http://leetschau.github.io/meteor-mongodb-notes.html"},{"title":"Meteor Resources","text":"Learning Resources Published Books Instant Meteor JavaScript Framework Starter by Gabriel Manricks of PACKT, 2013; Getting Started with Meteor.js JavaScript Framework by Isaac Strack of PACKT, 2012; Upcoming Books Beginning Meteor by Aaron Gray of APress, march 25, 2015; Building Single-page Web Apps with Meteor by Fabian Vogelsteller of PACKT, december 26, 2014; Free Resources Bulletproof Meteor The Meteor Chef Evented Mind Meteor Tips Build Your First Real-Time Web Application with MeteorJS Josh Owen's Meteor Club Paid Resources Discover Meteor Ref: 9 Ways Meteor 1.0 Will Take You Out of This World For Meteor Jobs We Work Meteor Test Tools Kadira","tags":"Tech","url":"http://leetschau.github.io/meteor-resources.html","loc":"http://leetschau.github.io/meteor-resources.html"},{"title":"Scala的模式匹配","text":"下面是一个RDD，每一个元素是一个Array，这个Array由几个tuple组成， 现在需要将其中第二个元素是13的tuple（比如(-36522769,13)）的一个元素后面追加字符串\".000\"，其余不变， 实现方法如下： val data = RDD [ Array [( String , Int )]] = RDD ( Array (( - 36522769 , 13 ), ( 8014 , 14 ), ( 2014 - 09 - 19 00 : 10 : 47 , 17 ), ( 3 , 18 ), ( FF - 693960651 , 134 )), Array (( - 905910021 . 0000000000 , 13 ), ( 200 , 14 ), ( 2014 - 09 - 19 00 : 02 : 11 , 17 ), ( 3 , 18 ), ( FF --112226702,134)), Array (( - 2033866158 . 0000000000 , 13 ), ( 200 , 14 ), ( 2014 - 09 - 19 00 : 07 : 12 , 17 ), ( 3 , 18 ), ( FF --112226702,134)), Array (( 1712341836 . 0000000000 , 13 ), ( 200 , 14 ), ( 2014 - 09 - 19 00 : 07 : 06 , 17 ), ( 3 , 18 ), ( FF --112226702,134)), Array (( - 896432680 . 0000000000 , 13 ), ( 8014 , 14 ), ( 2014 - 09 - 19 00 : 12 : 17 , 17 ), ( 3 , 18 ), ( FF - 693960651 , 134 )), Array (( - 1205034451 . 0000000000 , 13 ), ( 200 , 14 ), ( 2014 - 09 - 19 00 : 07 : 21 , 17 ), ( 3 , 18 ), ( FF --112226702,134)), Array (( - 2117505875 . 0000000000 , 13 ), ( 15089 , 14 ), ( 2014 - 09 - 19 00 : 41 : 47 , 17 ), ( 2 , 18 ), ( FF - 1139491304 , 134 ))) val res = data . map ( x => x . map { case ( y , 13 ) => ( y + \".000\" , 13 ) case z => z } ) 如果把13变为一个变量，比如 val BAD_NUM = 13 , 这时直接改写为 case (y, BAD_NUM) => ... ，将出现错误， 因为解析器将BAD_NUM视为一个自由变量，而不是外部等于13的那个变量，解决方法是用反引号把BAD_NUM扩起来，写为： case ( y , `BAD_NUM` ) => ( y + \".000\" , BAD_NUM ) 推荐文章： Playing with Scala's pattern matching ; Pattern Matching in Scala Documenation Pattern matching section in Scala cheatsheet","tags":"Tech","url":"http://leetschau.github.io/scalade-mo-shi-pi-pei.html","loc":"http://leetschau.github.io/scalade-mo-shi-pi-pei.html"},{"title":"网站配色技术","text":"颜色有多种表示方式，印刷业常用的CMYK方法是4种颜料的组合值表示一种颜色， RGB常用于显示器，用3原色的值表示一种颜色。 HSL是用色调hue，纯度Saturation（也叫饱和度）和亮度lightness组合表示一种颜色， 其中色调是平时所说的颜色； 纯度可以理解为颜料的浓度，最小值是灰色（没有颜料），最大值是最纯净的颜色（比如完全的红色，完全的绿色等）； 亮度是明亮程度，最小值是黑色，最大值的白色。 RGB与HSL的相互关系可以在 Colour Contrast Check 上面通过拖动各个滑块来观察， 这个网站主要用于检查背景色和文字颜色的对比度，用户输入两种颜色的值，它计算出亮度差(brightness difference)，色调差(color difference)，颜色是否匹配(color compliant)，以及是否符合WCAG 2规范等。 亮度差和色调差的具体计算方法可以搜索关键词\"calculate color brightness difference\". 搜索关键词 website color shemes text background contrast calculator 文字 背景 对比 配色理论和实践 How to Calculate Color Contrast from RGB Values 网页配色技巧：不同背景下文字颜色搭配 40 Stunning Website Designs with Great Color Schemes 50 Beautiful Color Palettes for Your Next Web Project 配色工具和软件 gpick Creating color schemes with Gpick 10 colour contrast checking tools to improve the accessibility of your design Colour Contrast Check ; paletton.com","tags":"Tech","url":"http://leetschau.github.io/wang-zhan-pei-se-ji-zhu.html","loc":"http://leetschau.github.io/wang-zhan-pei-se-ji-zhu.html"},{"title":"Build Color Theme for Website with Gpick","text":"First install with sudo aptitude install gpick , and start it with gpick ; Build a color theme based on existing web page Choose \"Color picker\" tag. Select a slot in color picker swatch (the six hexagons mark by 1 ~ 6). Start color picker by shortcut Ctrl-p, move mouse to the location, press SPACE to put the color into the slot. The highlighted slot become the next slot automatically. So you can select another color, and put it into the current highlighted slot by press SPACE. Right click the color picker swatch and select \"Add to palette\" or \"Add all to palette\" to put these color into the color palette on the right-hand side. Generate Color theme based on existing color Right click one or more colors in the color palette, select \"Generate...\". Set \"Colors\" to 3, \"Type\" to \"triadic\", you can find the triadic color group in \"Preview\" panel. If this is what you want, press \"OK\" button. In the same way you can build complementary color group with: Type: Complementary, Colors: 2. Build a color theme from scratch Choose \"Scheme Generation\" tag in upper-left corner. After you've decided the value of hue, saturation, lightness and type, right click the color block and select \"Add to palette\" or \"Add all to palette\". Find all built-in shortcuts on the \"HELP\" section of gpick's website . Ref: Creating color schemes with Gpick ;","tags":"Tech","url":"http://leetschau.github.io/build-color-theme-for-website-with-gpick.html","loc":"http://leetschau.github.io/build-color-theme-for-website-with-gpick.html"},{"title":"Connect to Wireless Network in Linux Mint Command Line","text":"Show current network status of the computer: nmcli c status , nmcli nm and nmcli d ; List all available Wi-Fi access points: nmcli dev wifi . The first column is the SSID Name which will be used in the following steps. Connect to a new (unconnected before) access point: nmcli dev wifi connect <SSIDName> password <ThePassword> . Or specify the NIC name: nmcli dev wifi con <SSIDName> password <ThePassword> iface wlan0 . replace \"wlan0\", \"SSIDName\" and \"MyPassword\" with yours. Connect to a used (connected before) access point: nmcli con up id <SSIDName> . Turn off current connected wifi: nmcli nm wifi off . Next time when connected this wifi, turn on with nmcli nm wifi on . Other unverified versions: nmcli d wifi connect < WiFi - ESSID > password < WiFi - Password > iface wlan0 iwconfig wlan0 essid < WiFi - ESSID > key < WiFi - Password > Note: iwlist wlan0 scan|grep ESSID only list the connected Wifi, instead of all available Wi-Fi access points. Ref: man nmcli ; connect to wifi from command line ;","tags":"Tech","url":"http://leetschau.github.io/connect-to-wireless-network-in-linux-mint-command-line.html","loc":"http://leetschau.github.io/connect-to-wireless-network-in-linux-mint-command-line.html"},{"title":"Connect Windows Remote Desktop from Linux Mint","text":"On Windows server, check \"Allow connections only from computers running Remote Desktop with Network Level Authentication (more secure).\" in Remote desktop settings. On client, run sudo apt install remmina freerdp-x11 remmina-plugin-rdp . Start Remmina, create a new connection. Under \"Basic\" tab: set \"Server\" to the IP address of the Windows host, \"User name\" and \"Password\" is the Windows account name and password. Leave \"Domain\" blank, set \"Color depth\" to \"True color (24 bpp)\" (or \"32 bpp\") Set \"Resolution\" to \"Use client resolution\". To enable sound, under \"Advanced\" tab, set the \"Sound\" to \"Remote\". Note this will make the sound from the Windows machine. Click \"Connect\" button to connect to the Windows host. After connected, disable \"Grab all keyboard events\" on toolbar, so you can use Ctrl-Alt-Left/Right to switch between Windows and Linux directly. But if you want use keyboard shortcuts defined in Windows you have to enable this option. To disable auto-sleep function of the Windows host, in [控制面板 -> 硬件和声音 -> 电源选项 -> 编辑计划设置], set the value of [使计算机进入休眠状态] in scenario [接通电源] to \"Never\", while keep the value in scenario [用电池] as \"30 minutes\". When connect to Windows 10, use the username (here the username is the first 5 characters of my email address) and password of your Microsoft account.","tags":"Tech","url":"http://leetschau.github.io/connect-windows-remote-desktop-from-linux-mint.html","loc":"http://leetschau.github.io/connect-windows-remote-desktop-from-linux-mint.html"},{"title":"Import Data from Files into Mongodb","text":"From CSV File Here I use mongoDB's mongoimport tool to import csv file into Meteor app's Mongodb. First download mongodb package (mongodb-linux-x86_64-2.6.5.tgz) from mongoDB , extract it into ~/apps folder. Next start the Meteor app. Open a new terminal window, in project root folder, run meteor mongo . You can see something like \"connecting to: 127.0.0.1:3001/meteor\". This tells us database server is listening on port 3001, and database name is \"meteor\". Save the following codes into app's $HOME/private folder as importdb.sh: mongoimport - h localhost : 3001 -- db meteor -- collection fairs -- type csv -- file fairs . csv -- headerline Here \"-d\" equals to \"--db\", \"-c\" equals to \"--collection\". And the source csv file is saved in file private/fairs.csv. It's headerline (first line of csv file) is also comma-seperated: Name , Age , Job Bob , 35 , Cooker Tom , 28 , Coder ... Now in the Meteor app, add Fairs = new Meteor.Collection(\"fairs\"); into js file to use the data. From JSON File Json Lint Validate the json file with jsonlint . You need install node.js, then install jsonlint with npm install jsonlint -g . Next check the json file with jsonlint myfile.json . Import from Json File Use the following commands to import json objects from a file: mongoimport - h localhost : 3001 - d meteor - c fairs -- type json -- jsonArray -- file demo . json Or if your mongod is running on localhost, use the following line to import (no need to create the target database and collection before import): mongoimport - d meteor - c fairs -- type json -- file first31 . json -- jsonArray This is a sample of the imported json file: [ { name : \"Widget 1\" , desc : \"This is Widget 1\" } , { name : \"Widget 2\" , desc : \"This is Widget 2\" } ] If the \"--jsonArray\" option is omitted, the json file have to keep each object in one line, like this: { name : \"Widget 1\" , desc : \"This is Widget 1\" } { name : \"Widget 2\" , desc : \"This is Widget 2\" } See mongoimport --help for details.","tags":"Tech","url":"http://leetschau.github.io/import-data-from-files-into-mongodb.html","loc":"http://leetschau.github.io/import-data-from-files-into-mongodb.html"},{"title":"Text Box Autocomplete in Meteor","text":"Autocomplete function in text box provides instant response to user input text, which is very powerful and user-friendly. For meteor, this function is called typeahead. Run meteor search typeahead , you can find sergeyt:typeahead . Clone it to your computer with git, in the \"demo\" subfolder, run meteor and open http://localhost:3000/. When typing in the first text box (\"NBA teams\" in it), it will provide instant response. sergeyt:typeahead's Bootstrap counterpart is called typeahead, too. That of jQuery is called \"Autocomplete\". The following is a minimal working demo of sergeyt:typeahead: $ meteor create meteorapp $ cd meteorapp $ meteor add sergeyt : typeahead $ cat meteorapp . html < head > < title > meteorapp </ title > </ head > < body > < h1 > input \" p \" in the following text box </ h1 > {{ > sti }} </ body > < template name = \" sti \" > < input class = \" form-control typeahead \" name = \" team \" type = \" text \" placeholder = \" NBA teams \" autocomplete = \" off \" spellcheck = \" off \" data - source = \" nba \" /> </ template > $ cat meteorapp . js Nba = new Meteor . Collection ( \" nba \" ) ; if ( Meteor . isClient ) { Template . sti . helpers ( { nba : function () { return Nba . find () . fetch () . map ( function ( it ) { return it . name ; } ) ; } } ) ; Meteor . startup ( function () { Meteor . typeahead . inject () ; } ) ; } if ( Meteor . isServer ) { Meteor . startup ( function () { Nba . insert ( { name : ' Philadelphia 76ers ' } ) ; Nba . insert ( { name : ' Detroit Pistons ' } ) ; Nba . insert ( { name : ' Portland Trail Blazers ' } ) ; } ) ; } Note: Every time start the server, the 3 items will be added into collection Nba. So if you don't clear data (with meteor reset ), you will see many identical items in candidate list; No matter \"on\" or \"off\" of the value of the \"autocomplete\" attribute of the text box, the autocomplete function always works. So what is the function of this attribute?","tags":"Tech","url":"http://leetschau.github.io/text-box-autocomplete-in-meteor.html","loc":"http://leetschau.github.io/text-box-autocomplete-in-meteor.html"},{"title":"Username Disappeared in Meteor Official Tutorial","text":"In the 9th step (Adding user accounts) of official tutorial \"simple-todos\" of Meteor 1.0, if you start server while leaving some old data (todo items) created in previous steps, you will find that there's no username before the todo text. But if you clear all old data (click remove button on web page, or use meteor reset ), and create new todo items with a signed in username, you will find the username appear. Data binding between Template and Collection The following modified version simple-todos works: simple-todos.html: < head > < title > Todo List </ title > </ head > < body > < div class = \" container \" > < header > < h1 > Todo List </ h1 > < label class = \" hide-completed \" > < input type = \" checkbox \" checked = \" {{hideCompleted}} \" /> Hide Completed Tasks </ label > {{ > loginButtons }} {{# if currentUser }} < form class = \" new-task \" > < input type = \" text \" name = \" text \" placeholder = \" Type to add tasks \" /> </ form > {{ / if }} </ header > < ul > {{# each todoitems }} {{ > todo }} {{ / each }} </ ul > </ div > </ body > < template name = \" todo \" > < li class = \" {{#if checked}}checked{{/if}} \" > < button class = \" delete \" >& times ;</button> < input type = \" checkbox \" checked = \" {{checked}} \" class = \" toggle-checked \" /> < span class = \" text \" >< strong > {{ username }} </ strong > - {{ text }} at {{ creDate }} </ span > </ li > </ template > simple-todos.js: Tasks = new Mongo . Collection ( \" tododb \" ) ; if ( Meteor . isClient ) { Template . body . helpers ( { todoitems : function () { if ( Session . get ( \" hideCompleted \" )) { return Tasks . find ( { checked : {$ ne : true }}, { sort : { createdAt : - 1 }} ) ; } else { return Tasks . find ( {}, { sort : { createdAt : - 1 }} ) ; } }, hideCompleted : function () { return Session . get ( \" hideCompleted \" ) ; } } ) ; Template . body . events ( { \" submit .new-task \" : function ( event ) { var text = event . target . text . value ; Tasks . insert ( { text : text , createdAt : new Date () , owner : Meteor . userId () , username : Meteor . user () . username } ) ; event . target . text . value = \"\" ; return false ; }, \" change .hide-completed input \" : function ( event ) { Session . set ( \" hideCompleted \" , event . target . checked ) ; } } ) ; Template . todo . helpers ( { creDate : function () { return this . createdAt ; } } ) ; Template . todo . events ( { \" click .toggle-checked \" : function () { Tasks . update ( this . _id , {$ set : { checked : ! this . checked }} ) ; }, \" click .delete \" : function () { Tasks . remove ( this . _id ) ; } } ) ; Accounts . ui . config ( { passwordSignupFields : \" USERNAME_ONLY \" } ) ; } if ( Meteor . isServer ) { Meteor . startup ( function () { // code to run on server at startup } ) ; } So we can conclude (the left hand side of \"<=>\" is template in html file, while js codes on the right hand side): The name after #each is a helper function which defined in js file, and returns a subset of a collection: {{ # each todoitems }} <=> Template.body.helpers -> todoitems: function () {...}; Variables in {{...}} in a template is the attributes of the object in collection, represented by the template: <strong> {{ username }} </strong> - {{ text }} < => Tasks.insert({ text: text, ..., username: Meteor.user().username }); or a helper function ({{creDate}} here). \"this\" in helper function refers to the template the function based on.","tags":"Tech","url":"http://leetschau.github.io/username-disappeared-in-meteor-official-tutorial.html","loc":"http://leetschau.github.io/username-disappeared-in-meteor-official-tutorial.html"},{"title":"Meteor Codes Auto Completion in Vim","text":"On ArchLinux Install node.js: sudo pacman -S nodejs ; Install tern_for_vim : $ cd ~/.vim/bundle $ git clone https://github.com/marijnh/tern_for_vim.git $ cd tern_for_vim $ npm install Install meteor plugin for tern tern-meteor : download meteor.js from this site to folder ~/.vim/bundle/tern_for_vim/node_modules/tern/plugins; Create a meteor project, create a .tern-project file under the project home: { \"libs\" : [ \"browser\" , \"jquery\" , \"underscore\" ], \"loadEagerly\" : [ \"*.js\" , \"*/*.js\" , \"*/*/*.js\" , \"*/*/*/*.js\" ], \"dontLoad\" : [ \".meteor\" ], \"plugins\" : { \"meteor\" : {} } } Now when you edit .js file, use C-x,C-o to trigger autocompletion. Ref: Installing Node.js via package manager ;","tags":"Tech","url":"http://leetschau.github.io/meteor-codes-auto-completion-in-vim.html","loc":"http://leetschau.github.io/meteor-codes-auto-completion-in-vim.html"},{"title":"Use Template.dynamic to Create Dynamic Pages for Meteor Application","text":"For a SPA (single page app), it's a common practice to switch between templates instead of pages. The following codes demonstrate how to switching between 2 templates according to 2 buttons' clicking events. $ meteor create multipage $ cd multipage $ cat << EOF > multipage . html < head > < title > multiple - view - example </ title > </ head > < body > < button class = \" pageHome \" > Home </ button > < button class = \" pageAbout \" > About </ button > {{ > Template . dynamic template = whichOne }} </ body > < template name = \" home \" > < p > Home !</ p > </ template > < template name = \" about \" > < p > About !</ p > </ template > EOF $ cat << EOF > multipage . js if ( Meteor . isClient ) { Meteor . startup ( function () { Session . set ( \" page \" , \" home \" ) ; console . log ( \" session key: \" + Session . get ( \" page \" )) ; } ) ; Template . body . helpers ( { whichOne : function () { console . log ( \" session key: \" + Session . get ( \" page \" )) ; return Session . get ( \" page \" ) ; } } ) ; Template . body . events ( { \" click .pageHome \" : function () { Session . set ( \" page \" , \" home \" ) ; }, \" click .pageAbout \" : function () { Session . set ( \" page \" , \" about \" ) ; } } ) ; } if ( Meteor . isServer ) { Meteor . startup ( function () { } ) ; } EOF $ meteor Open http://localhost:3000, clicking \"Home\" button, the \"home\" template is shown. While clicking \"about\" button, the \"about\" template is shown. Template.dynamic is better than Meteor's route package, for it's a built-in function of Meteor. No need to install a package with meteor add ... . And you can put big templates into a new html file, which make the struture more flexible. Ref: http://stackoverflow.com/questions/12968808/dynamically-loading-templates-in-meteor-js","tags":"Tech","url":"http://leetschau.github.io/use-templatedynamic-to-create-dynamic-pages-for-meteor-application.html","loc":"http://leetschau.github.io/use-templatedynamic-to-create-dynamic-pages-for-meteor-application.html"},{"title":"Use Bootstrap Themes in Meteor","text":"Meteor is awesome for build dynamic web apps. However it's a \"baremetal\" without templates. On the other hand, Bootstrap is a powerful front-end framework with many beautiful themes. So we have to combine these two. First of all we need to get the bootstrap.min.js from the latest precompiled version of bootstrap release package (bootstrap-x.x.x-dist.zip). Bootswatch provides free bootstrap themes. Download \"bootstrap.min.css\" file with clicking \"Download\" button of prefered theme, and put it under client folder of meteor app. Then all DOM element will be styled. cd ~/ docs / tmp meteor create mywebapp cd mywebapp rm * . js * . css * . html mkdir - p { server , client / { css , lib }} wget https : // github . com / twbs / bootstrap / releases / download / v3 . 3 . 1 / bootstrap - 3 . 3 . 1 - dist . zip unzip bootstrap - 3 . 3 . 1 - dist . zip - d bootstrap cp bootstrap / dist / js / bootstrap . min . js client / lib rm - rf bootstrap * wget http : // bootswatch . com / readable / bootstrap . min . css client / css / bootstrap . min . css cat << EOF > client / mywebapp . html < head > < title > sousouzhan </ title > </ head > < body > < h1 > Welcome to Meteor !</ h1 > {{ > hello }} </ body > < template name = \" hello \" > < button type = \" button \" class = \" btn btn-default \" > Click Me </ button > < div class = \" searchform \" > < form role = \" form \" > < div class = \" form-group \" > < label for = \" exampleInputEmail1 \" > Email address </ label > < input type = \" email \" class = \" form-control \" id = \" exampleInputEmail1 \" placeholder = \" Enter email \" > </ div > < div class = \" form-group \" > < label for = \" exampleInputPassword1 \" > Password </ label > < input type = \" password \" class = \" form-control \" id = \" exampleInputPassword1 \" placeholder = \" Password \" > </ div > < div class = \" form-group \" > < label for = \" exampleInputFile \" > File input </ label > < input type = \" file \" id = \" exampleInputFile \" > < p class = \" help-block \" > Example block - level help text here . </ p > </ div > < div class = \" checkbox \" > < label > < input type = \" checkbox \" > Check me out </ label > </ div > < button type = \" submit \" class = \" btn btn-default \" > Submit </ button > </ form > </ div > < p > You ' ve pressed the button {{counter}} times.</p> </ template > EOF meteor Then open http://localhost:3000 to view the result.","tags":"Tech","url":"http://leetschau.github.io/use-bootstrap-themes-in-meteor.html","loc":"http://leetschau.github.io/use-bootstrap-themes-in-meteor.html"},{"title":"Jump between Tabs in Firefox with Keyboard Shortcuts","text":"Go to specific tab with text by extension \"Tabhunter\" Setup the invoking key in its preference page. I use F1 as the key. Every time F1 is pressed, input some text to activate the corresponding tab. Current version (2015/03/27) is 1.0.5. Jump betwwen tabs with ctrl+tab In a new tab, type about:config in the address bar and press Enter. Click the button promising to be careful. Set browser.ctrlTab.previews to true ; Now use ctrl+tab to jump between two tabs; Or use extension \"Ctrl-Tab\" to achieve the same functionality. Jump between tab groups with ctrl+` Create and manage tab groups with ctrl+shift+e (see Use Tab Groups to organize a lot of tabs for details). And use ctrl+` to jump between two tab groups.","tags":"Tech","url":"http://leetschau.github.io/jump-between-tabs-in-firefox-with-keyboard-shortcuts.html","loc":"http://leetschau.github.io/jump-between-tabs-in-firefox-with-keyboard-shortcuts.html"},{"title":"vim as a HTML Editor","text":"Jump between matching HTML and XML tags In normal mode, use \"vat\" to select all texts between these matching tags, then use \"o\" to jump between matching tags. In \"vat\", \"v\" means select, \"a\" means including tags themselves(comparing with \"i\"), \"t\" means tags. So we have \"cat\" (change outer), \"yat\" (copy outer), \"cit\" (change inner), \"dit\" (delete inner), etc. Fold/Unfold HTML Tags Fold a html tag: zfit ; Toggle fold/unfold tags: za ; Unfold all tags: zR ; See vim how to fold an html tag for other methods. Auto complete opened tags xmledit plugin Install with git clone https://github.com/sukima/xmledit.git ~/.vim/bundle/xmledit . But it only works with .xml files. Not working with .html files. To fix this, cd ~/.vim/bundle/xmledit/ftplugin; cp xml.vim html.vim (overwrite the existing html.vim file). No plugins Add \"inoremap \" into ~/.vimrc. Now after \" some text\", press F8, it will be converted to \" some text \". ragtag plugin Install ragtag plugin for vim with git clone https://github.com/tpope/vim-ragtag.git into ~/.vim/bundle. :h ragtag in vim for help. When editing a .html file, in insert mode, after input \"div\", press Ctrl-x,Space, it will be convert to \" | \". If press Ctrl-x,Enter, it will be converted to: <div> | </div> where \"|\" marks the cursor position. Other plugins There are some more powerful plugins for xml/html editing, but they are more complicated. Like surround.vim , closetag.vim , and emmet-vim .","tags":"Tech","url":"http://leetschau.github.io/vim-as-a-html-editor.html","loc":"http://leetschau.github.io/vim-as-a-html-editor.html"},{"title":"Using Empathy as Local Network Instant Messaging Tool","text":"LinuxMint sudo aptitude install empathy telepathy-gabble telepathy-salut telepathy-rakia","tags":"Tech","url":"http://leetschau.github.io/using-empathy-as-local-network-instant-messaging-tool.html","loc":"http://leetschau.github.io/using-empathy-as-local-network-instant-messaging-tool.html"},{"title":"Add Customized Files and Folders into Deployed Zip File Created by Gradle","text":"Creating deployed zip file with gradle is very convenient. But what if I want to add some customized files and folders into this file? According to Deploy additional files in Gradle Application Plugin , creat a \"dist\" folder under \"src\" in the root of project. Then everything under \"dist\" will be copied to zip file created by gradle distZip or gradle installApp . $ pwd /home/chad/docs/GDEP-0811 $ mkdir -p src/dist/plugins $ echo \"pwd\" > src/dist/plugins/autocmd.sh $ echo \"config1: value1\" > src/dist/dep.conf $ tree src/dist src/dist ├── dep.conf └── plugins └── autocmd.sh $ gradle clean installApp $ tree build/install/gdep build/install/gdep ├── bin │ ├── gdep │ └── gdep.bat ├── dep.conf ├── lib │ ├── commons-configuration-1.10.jar │ └── ... └── plugins └── autocmd.sh $ gradle clean distZip $ unzip -l build/distributions/gdep-0.4.zip Archive: build/distributions/gdep-0.4.zip Length Date Time Name --------- ---------- ----- ---- 0 2014 -11-19 15 :35 gdep-0.4/ 132 2014 -09-29 17 :01 gdep-0.4/dep.conf 0 2014 -11-19 15 :20 gdep-0.4/plugins/ 6 2014 -11-19 15 :13 gdep-0.4/plugins/autocmd.sh 0 2014 -11-19 15 :35 gdep-0.4/lib/ 7255 2014 -11-19 15 :35 gdep-0.4/lib/gdep-0.4.jar 76643 2014 -08-14 08 :40 gdep-0.4/lib/... 0 2014 -11-19 15 :35 gdep-0.4/bin/ 5369 2014 -11-19 15 :35 gdep-0.4/bin/gdep 2727 2014 -11-19 15 :35 gdep-0.4/bin/gdep.bat --------- ------- 2180116 20 files Here the file \"dep.conf\" and folder \"plugins\" is copied directly from $PROJ_ROOT/src/dist .","tags":"Tech","url":"http://leetschau.github.io/add-customized-files-and-folders-into-deployed-zip-file-created-by-gradle.html","loc":"http://leetschau.github.io/add-customized-files-and-folders-into-deployed-zip-file-created-by-gradle.html"},{"title":"Using pub of Dart with Jayproxy","text":"Dart's pub tool is blocked by GFW. So we have to use it with the help of a proxy. Modify pubspec.yaml at the root of a Dart project. Then run the following commands at this position: export http_proxy = http : //< username > : < password > @us . jayproxy . net : 6000 export https_proxy = http : //< username > : < password > @us . jayproxy . net : 6000 pub get","tags":"Tech","url":"http://leetschau.github.io/using-pub-of-dart-with-jayproxy.html","loc":"http://leetschau.github.io/using-pub-of-dart-with-jayproxy.html"},{"title":"Virtualizations Based on XenServer","text":"Today I tried to build a vm groups on my PC with XenServer. Server Download XenServer 6.2.0 installation iso (XenServer-6.2.0-install-cd.iso) from XenServer.org . Use this iso to install on the bare metal OS of VM host. Setup network with dhcp. After installation and reboot, the Configuration window of XenServer 6.2 appears. Under \"Network and Management Interface\", I got the IP of the host is 10.31.4.89. Client So far the linux client is much poor than its Windows couterpart. For example, the \"console\" tab and context menu (right click menu) can't work properly on OpenXenManager. It's recommended to use XenCenter on Windows as GUI tool, and xe command on host as CLI tool to perform VM management, Use xe help --all to list all available subcommands. xl is also a good tool. Linux Client On LinuxMint 17, install OpenXenManager with sudo aptitude install openxenmanager ; Start it with openxenmanager , create a new server with \"Hostname\" 10.31.4.89, \"User name\" root, and \"Password\" the one set previously. Connect to this server. On my laptop, run following commands to add a new SR (storage repository) to provide guest installation ISO files. $ ssh root @10.31.4.89 # mkdir /vms # xe sr-create name-label=Local type=iso device-config:legacy_mode=true content-type=iso device-config:location=/vms # exit $ scp ~/ warez / OS / CentOS - 6.5 - x86_64 - minimal . iso root @10.31.4.89 :~/ vms / $ ssh root @10.31.4.89 # openxenmanager You can use xe sr-detach , then xe sr-forget to remove SR. Use lvs to list LVM information about vm's disks. Windows Client Download XenCenter Windows Management Console (XenServer-6.2.0-XenCenter.msi) from Download page of XenServer.org . Install and start it.","tags":"Tech","url":"http://leetschau.github.io/virtualizations-based-on-xenserver.html","loc":"http://leetschau.github.io/virtualizations-based-on-xenserver.html"},{"title":"JavaScript Development Environment Setup","text":"vim Update at 2015-9-12: (Optional) Install node.js and jshint (with npm install -g jshint ). Now you can check syntax with jshint myfile.js . Then install lint plugin scrooloose/syntastic for vim: add Plugin 'scrooloose/syntastic' into ~/.vimrc; Run vim +PluginInstall , there are totally 6.0MB for its repo, so you have to wait quite a while; Now open a js file, and do some editing. When file saved, syntastic will mark the lines with errors. To verify which checker is enabled when editing, run :SyntasticInfo in vim. Check \"2.1. Requirements\" in syntastic page above for details. google/closure-linter To install google/closure-linter as the checker: git clone https : // github . com / google / closure - linter . git cd closure - linter sudo python . / setup . py install cd .. sudo rm - rf closure - linter Now you can use gjslint myfile.js as the checker in terminal. To make syntastic use gjslint, add let g:syntastic_javascript_checkers = ['gjslint'] into ~/.vimrc. jshint Ref: jshint docs Update at 2015-5-11: See Equipping Vim for JavaScript . The plugin YouCompleteMe is very big (about 200MB for now). You have to wait quite a while when install this plugin using Vundle. When install plugin with Vundle, you have to save .vimrc and quit , then run PluginInstall or PluginClean in a new vim window. Note: To remove a plugin managed by Vundle in vim, remove declaration in .vimrc, then run PluginClean in vim. --- Old Post --- Install nvm; Install node with nvm; Install jshint with npm, which is a tool in node: npm install -g jshint ; Check syntax with jshint myfile.js ; Check html syntax with Tidy, which is installed on Ubuntu with apt-get install tidy ; Ref: VIM + JSLint? Eclipse Eclipse's javascript development tools JSDT is part of WTP (web tools platform), which is a built-in plugin of \"Eclipse JEE\" (Eclipse for Java EE Developers). Its editor has auto syntax checker. Config it in [Window -> Preferences -> JavaScript -> Editor]. Config its code style (tab size, for example) at [Window -> Preferences -> JavaScript -> Code Style -> Formatter].","tags":"Tech","url":"http://leetschau.github.io/javascript-development-environment-setup.html","loc":"http://leetschau.github.io/javascript-development-environment-setup.html"},{"title":"Spark任务自动执行脚本","text":"当前目录下创建两个脚本，运行脚本runJobs.sh和WFP任务脚本模板wfp-origin： runJobs: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash BMIN_CNT_WEI_LIST = '0.5 0.3' MIN_SUP_LIST = '0.004 0.0002' rm -rf { result,script } mkdir { result,script } origin_job = wfp-origin for bmin_cnt_wei in $BMIN_CNT_WEI_LIST ; do for min_sup in $MIN_SUP_LIST ; do echo MIN_SUP is: $min_sup , Bmin count weight is: $bmin_cnt_wei new_script_name = wfp-bmin- ${ bmin_cnt_wei } -sup- ${ min_sup } sed \"4s/xxx/ $min_sup /\" $origin_job > script/tmp sed \"11s/xxx/ $bmin_cnt_wei /\" script/tmp > script/ $new_script_name rm script/tmp echo Run shell script/ $new_script_name spark-shell -i script/ $new_script_name echo ------Calc is over------ done done wfp-origin: import Math.ceil import scala.io val MIN_SUP = xxx val MIN_CONF = 0.1 val MAX_RELATION_ORDER = 3 val DATA_FILE = \"input\" val SEP = \" \\001 \" val WEI_IDX = 5 val MIN_INT_ID_LEN = 5 val BMIN_CNT_WEI = xxx val RES_FILE = \"result/wfp-result-bmin-\" + BMIN_CNT_WEI . toString + \"-sup-\" + MIN_SUP . toString val rawData = sc . textFile ( DATA_FILE ) . distinct val data = rawData . filter ( x => x . split ( SEP )( 1 ) . split ( \"_\" )( 0 ) . size > MIN_INT_ID_LEN ) val item_count = data . map ( _ . split ( SEP )( 1 )) . map ( w => ( w , 1 )) . reduceByKey ( _ + _ ) val wids = data . map ( _ . split ( SEP )( 0 )) val MAX_ITEM = wids . map ( w => ( w , 1 )) . reduceByKey ( _ + _ ) . map ( _ . _2 ) . max val T = wids . distinct . count val weight = data . map ( x => ( x . split ( SEP )( 1 ), x . split ( SEP )( WEI_IDX ) . toFloat )) . distinct val rule_sets = weight . top ( 2000 ) scala . tools . nsc . io . File ( RES_FILE ) . writeAll ( rule_sets . map ( _ . toString ) . reduce ( _ + \" \\n \" + _ )) exit 这里的wfp-orgin只是一个示例，根据自己的脚本调整具体内容，但最后一行\"exit\"必须有，否则不能退出spark shell执行后面的任务。 需要修改的参数用空格分开定义在一个字符串里，例如上面的BMIN_CNT_WEI_LIST和MIN_SUP_LIST， 脚本创建script目录，保存新生成的脚本，以及result目录，保存计算结果。 配合tmux，可以在tmux上运行runJobs.sh，下班时从tmux上detach出来，第二天上班时在attach上去看结果。","tags":"Tech","url":"http://leetschau.github.io/sparkren-wu-zi-dong-zhi-xing-jiao-ben.html","loc":"http://leetschau.github.io/sparkren-wu-zi-dong-zhi-xing-jiao-ben.html"},{"title":"SparkR in Action","text":"Getting online manual: > help(map) sc <- sparkR.init(\"local\") lines <- textFile(sc, \"/home/boco/datamine/alarm_bd_05.txt\") count(lines) 14/11/03 09:45:43 INFO FileInputFormat: Total input paths to process : 1 [1] 7963078","tags":"Tech","url":"http://leetschau.github.io/sparkr-in-action.html","loc":"http://leetschau.github.io/sparkr-in-action.html"},{"title":"Customize Login Screen of LinuxMint 17","text":"I think the default LinuxMint login screen is not cool, need a new backgroud picture. How to change this backgroud picture? In LinuxMint 17 this is done by creating a new login \"Theme\" and use it. According to Custom Login Screen Background On Linux Mint 17 there is 3 steps to achieve this: Create a new theme based on the default theme; Pack this theme; Set it as the login theme. Firstly I choose a picture from Variety's Favorites folder as the new backgroud. Then run following commands: sudo cp - r / usr / share / mdm / html - themes / Mint - X ~/ StarWorld cp ~/ . config / variety / Favorites / fbdgbcb_ - _imgur . jpg ~/ StartWorld / bg . jpg cp ~/ . config / variety / Favorites / fbdgbcb_ - _imgur . jpg ~/ StartWorld / screenshot . jpg # modify name & description in ~/ StarWorld / theme . info tar czf star - world . tar . gz ~/ StarWorld Next login to Xfce desktop, startup \"Login Manager\", add a new theme, choose star-world.tar.gz. Now logout and see the effect.","tags":"Tech","url":"http://leetschau.github.io/customize-login-screen-of-linuxmint-17.html","loc":"http://leetschau.github.io/customize-login-screen-of-linuxmint-17.html"},{"title":"Xen on LinuxMint","text":"This morning I tried to install Debian 7.6 64bit on the DELL PC, but it failed due to some hardware problems. Then I installed LinuxMint 17 Xfce 64bit on this machine, and partition disk following Xen Project Beginners Guide : chad@chadpc ~ $ df -h Filesystem Size Used Avail Use% Mounted on /dev/sda1 276M 45M 218M 17% /boot /dev/sda2 15G 4.1G 9.8G 30% / ... where /dev/sda1 is formated as ext2, and /dev/sda2 is formated as ext3, and leave /dev/sda4 unused. After reboot and login LinuxMint, modify apt mirror list according to Official Archive Mirrors for Ubuntu , adding the following lines into /etc/apt/sources.list: deb http://mirrors.zju.edu.cn/ubuntu/ trusty main deb-src http://mirrors.zju.edu.cn/ubuntu/ trusty main deb http://ubuntu.cnssuestc.org/ubuntu/ trusty main deb-src http://ubuntu.cnssuestc.org/ubuntu/ trusty main Then run commands as root: apt - get update apt - get install openssh - server apt - get install lvm2 pvcreate / dev / sda4 vgcreate vg0 / dev / sda4 apt - get install bridge - utils brctl addbr xenbr0 brctl addif xenbr0 eth0 dhclient xenbr0 aptitude - P install xen - system # not xen - linux - system dpkg - divert --divert /etc/grub.d/08_linux_xen --rename /etc/grub.d/20_linux_xen update - grub reboot # you can find now \"Ubuntu GNU/Linux, with Xen hypervisor\" is the default startup item in grub boot menu Build DomU apt - get install xen - tools Using xen-create-image xen - create - image --hostname=ch1 --memory=1024gb --vcpus=2 --lvm=vg0 --dhcp --pygrub --dist=wheezy Using xl Follow Debian Guest Installation Using Debian Installer . Here we download 2 net-install disk (which is very small) and install the guest system via Internet. So the host machine need to connected with Internet, or can connect to another machine which can access Internet, and defining a proxy when installing. Select a mirror ftp.cn.debian.org/debian/ in Debian worldwide mirror sites . And download vmlinuz and initrd.gz (from http://ftp.cn.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/xen/) to local folder /home/chad/warez/xen-images-debian. Create a config file /root/deb.cfg: name = \" debian-installer \" memory = 1024 disk = [ ' phy:/dev/vg0/debian-installer,xvda,w ' ] vif = [ ' ' ] kernel = \" /home/chad/warez/xen-images-debian/vmlinuz \" ramdisk = \" /home/chad/warez/xen-images-debian/initrd.gz \" extra = \" debian-installer/exit/always_halt=true -- console=hvc0 \" Then run following commands as root: lvcreate - L 4 G - n debian - installer / dev / vg0 xl create - c / root / deb . cfg Once installation has completed the guest will shutdown and exit. Remove the kernel, initrd and extra lines from the guest configuration, here remove the last 3 lines in deb.conf and replace them with simply: bootloader = \"pygrub\" Now the deb.conf became: name = \"debian-installer\" memory = 1024 disk = [ 'phy:/dev/vg0/debian-installer,xvda,w' ] vif = [ ' ' ] bootloader = \"pygrub\" Startup the guest system with xl create -c deb.cfg . List all running vms with xl list in dom0. Connect this vm with xl console debian-installer . List all available subcommands of xl with xl help . Shutdown this vm with xl shutdown debian-installer Post installation The \"brctl\" and \"dhclient\" commands above only build the network interface during system session. After system reboot, the bridge interface disappears, thus startup vm will failed. So we need define the bridge in /etc/network/interfaces, add the following lines into this file: auto eth0 iface eth0 inet dhcp auto xenbr0 iface xenbr0 inet dhcp bridge_ports eth0 If after reboot, the eth0 can't get IP address, use ifdown eth0 and ifup eth0 to refresh eth0. Update 2014.10.31: these settings cause network connection failed. After removing \"auto xenbr0...\" section, everything goes fine. So use brctl and dhclient to setup bridge after system startup. Notes: Use lsblk -f to see the volume group and logical volumes. pvcreate means \"create physical volume\", vgcreate means \"create volume group\", lvcreate means \"create logical volume\". Use lvremove /dev/vg0/debian-installer to remove the logical volume created before. Use dpkg-divert --list to list all diversions, and dpkg-divert --remove /etc/grub.d/20_linux_xen to remove a diversion. Ref: Xen Project Beginners Guide Xen on Debian Wiki","tags":"Tech","url":"http://leetschau.github.io/xen-on-linuxmint.html","loc":"http://leetschau.github.io/xen-on-linuxmint.html"},{"title":"DMShell Up and Running","text":"The dmshell is a web server accepting a shell command string, and run it on web server host. Setup DataBase Fix Derby Server Startup Failed When start Derby server with /home/chad/apps/jdk1.6.0_45/db/bin/startNetworkServer , the following error raised: access denied (\"java.net.SocketPermission\" \"localhost:1527\" \"listen,resolve\") Solution: Find out system's JRE. On my laptop, it's /usr/lib/jvm/java-7-openjdk-amd64/jre Add the following codes into file lib/security/java.policy in this folder: grant { permission java.net.SocketPermission \" localhost : 1527 \", \" listen \" ; } ; Ref: http://stackoverflow.com/questions/21154400/unable-to-start-derby-database-from-netbeans-7-4 Create Database and Table Run ~/apps/jdk1.6.0_45/db/bin/ij and run following commands: connect ' jdbc:derby://localhost:1527/dmdb;create=true ' ; create table shellstatus ( id int not null generated by default as identity ( start with 1 , increment by 1 ) , shellname varchar ( 40 ) , starttime timestamp , endtime timestamp , status int ) ; Then you can use select * from shellstatus; to list all data in this table.","tags":"Tech","url":"http://leetschau.github.io/dmshell-up-and-running.html","loc":"http://leetschau.github.io/dmshell-up-and-running.html"},{"title":"A Spark Job Runner in Web Browser","text":"I wrote a Spark script. Now I need adding a web interface for it. Thus users can input parameters of the script in web browser, run the script, and see the calculation results in browser. JEE Download apache tomcat 7.0.56 core (apache-tomcat-7.0.56.tar.gz) and extract it to ~/apps; Download Eclipse IDE for Java EE Developers (eclipse-jee-luna-SR1-linux-gtk-x86_64.tar.gz) and extract it to ~/apps; Start Eclipse IDE for Java EE Developers, build a new Web project: [File -> New -> Web -> Dynamic Web Project]; Specify \"Project\" as \"SparkRunner\", \"Target runtime\" as \"Apache Tomcat v7.0\". If the default runtime has not existed yet, build a new one: Type of runtime environment: Apache -> Apache Tomcat v7.0). Check \"Generate web.xml deployment descriptor\" at the last step and click \"Finish\". Add the following texts into \"web-app\" of web.xml under $PROJECT_HOME/WebContent/WEB-INF: <servlet> <servlet-name> JobRunner </servlet-name> <servlet-class> com.boco.dm.JobRunner </servlet-class> </servlet> <servlet-mapping> <servlet-name> JobRunner </servlet-name> <url-pattern> /JobRunner </url-pattern> </servlet-mapping> Ref: The Deployment Descriptor: web.xml","tags":"Tech","url":"http://leetschau.github.io/a-spark-job-runner-in-web-browser.html","loc":"http://leetschau.github.io/a-spark-job-runner-in-web-browser.html"},{"title":"告警资源过滤算法","text":"从告警报文中挖掘出关联规则后，保存在下面的RDD data中， 每一条规则包含4项：支持度、置信度、规则前项和规则后项。 前项和后项分别是一个字符串，是一个逗号分隔的多个网元列表， 例如一条规则 (0.2, 0.3, \"a,b\", \"c\") 表示\"网元a,b上的告警导致网元c上告警发生的支持度是0.2，置信度是0.3。 也就是a,b,c在所有告警中发生的概率是20%，当a,b已经发生时，c发生的比率是30%。 在另一张资源表中，每一行包含一对网元，保存在下面的RDD res_data中， 例如\"a,c\"这一行表示网元a和c有资源上的关联关系，可能是物理链路连接，可能是同一物理位置等等。 所谓的资源过滤就是只有在资源表中的规则才算有效规则， 资源关系是没有顺序的，不论规则(a => c)还是(c => a)都符合(a,c)这一资源约束， 对于规则(x1, x2, ..., xm => y1, y2, ..., yn)，只有前项和后项的所有笛卡尔积 ( x1 , y1 ), ( x1 , y2 ), ... ( x1 , yn ) ... ( xm , y1 ), ( xm , y2 ), ... ( xm , yn ) 都在资源表中，才表明这一条规则通过了资源过滤。 例如对于规则(a,b => c)，只有a与c，a与b都有资源关系（即(a,b)和(a,c)都在资源表中），这条规则才有效。 实现算法是：对于一条规则R1，求出其所有笛卡尔积R2，然后求R2与资源表的交集R3，如果 下面是描述这一筛选过程的Spark代码: val data = sc . parallelize ( List (( 0 . 2 , 0 . 3 , \"a,b\" , \"c\" ), ( 0 . 5 , 0 . 2 , \"b,c\" , \"a,d\" ))) val combine_pre_suf = data . flatMap ( x => ( x . _3 . split ( \",\" ). flatMap ( y => ( x . _4 . split ( \",\" ). map ( z => ( y + \",\" + z , x )))))) val suf_pre = combine_pre_suf . map ( x => ( x . _1 . split ( \",\" )( 1 ) + \",\" + x . _1 . split ( \",\" )( 0 ), x . _2 )) val double_pre_suf_rule = suf_pre ++ combine_pre_suf val res_data = sc . parallelize ( List ( \"a,c\" , \"b,c\" , \"c,e\" , \"c,d\" )) val res_join_double = res_data . map ( x => ( x , 1 )). join ( double_pre_suf_rule ) val rule_in_res_cnt = res_join_double . map ( x => ( x . _2 . _2 , x . _2 . _1 )). reduceByKey ( _ + _ ) val flt_res_rules = rule_in_res_cnt . filter ( x => x . _1 . _3 . split ( \",\" ). size * x . _1 . _4 . split ( \",\" ). size == x . _2 ) 将这段代码保存在文件res-filter.script中，运行 spark-shell -i res-filter.script 。","tags":"Tech","url":"http://leetschau.github.io/gao-jing-zi-yuan-guo-lu-suan-fa.html","loc":"http://leetschau.github.io/gao-jing-zi-yuan-guo-lu-suan-fa.html"},{"title":"Swap Mouse Buttons on Linux","text":"LinuxMint If you login in terminal, add the following line into ~/.xinitrc before \"exec i3\": xmodmap - e \"pointer = 3 2 1\" If you login with Xfce GUI, add above line into ~/.xsessionrc. If you want to change to right-hand style mouse buton, run the following command in console: xmodmap - e \"pointer = 1 2 3\" Ref: https://askubuntu.com/questions/151819/how-do-i-swap-mouse-buttons-to-be-left-handed-from-the-terminal","tags":"Tech","url":"http://leetschau.github.io/swap-mouse-buttons-on-linux.html","loc":"http://leetschau.github.io/swap-mouse-buttons-on-linux.html"},{"title":"\"Key could not be imported\" Error when Full update ArchLinux System","text":"Today I update my ArchLinux system with pacman -Syu , when check for package key, I got following errors: :: Proceed with installation? [Y/n] (211/211) checking keys in keyring [########################################] 100% downloading required keys... :: Import PGP key 1024D/, \"Fabio Castelli muflone@vbsimple.net \", created: 2009-07-04? [Y/n] error: key \"Fabio Castelli muflone@vbsimple.net \" could not be imported error: required key missing from keyring error: failed to commit transaction (unexpected error) Errors occurred, no packages were upgraded. The solution is pretty simple. We need to first update archlinux-keyring before proceeding to update other packages. $ sudo pacman -Syy $ sudo pacman -S archlinux-keyring $ sudo pacman -Syu Ref: Error: Key could not be imported .","tags":"Tech","url":"http://leetschau.github.io/key-could-not-be-imported-error-when-full-update-archlinux-system.html","loc":"http://leetschau.github.io/key-could-not-be-imported-error-when-full-update-archlinux-system.html"},{"title":"Notes of Data Science at the Command Line","text":"\"A Real-World Use Case\" in Chapter 1 In this case a GUI window need to be displayed based on data extracted from \"New York Times\". So we have to connect to the VM with X forwarded: ssh vagrant@localhost -p 2222 -X . I registered the NYT developer keys . So the run following commands to extract data: parallel - j1 --progress --delay 0.1 --results results \"curl -sL 'http://api.nytimes.com/svc/search/v2/articlesearch.json?q=New+York+Fashion+Week&begin_date={1}0101&end_date={1}1231&page={2}&api-key=13fdd3f29a9479f92ef74c26166fda3a:16:60048486'\" ::: {2009..2013} ::: {0..99} > /dev/null cat results / 1 /*/2/*/stdout | jq -c '.response.docs[] | {date: .pub_date, type: .document_type,title: .headline.main }' | json2csv -p -k date,type,title > fashion.csv < fashion.csv Rio -ge 'g + geom_freqpoly(aes(as.Date(date), color=type), ''binwidth=7) + scale_x_date() + labs(x=\"date\", title=\"Coverage of New York'' Fashion Week in New York Times\")' | display Now a GUI window named ImageMagick appears, and display the data in file fashion.csv.","tags":"Tech","url":"http://leetschau.github.io/notes-of-data-science-at-the-command-line.html","loc":"http://leetschau.github.io/notes-of-data-science-at-the-command-line.html"},{"title":"MEAN Devlopment on Linux","text":"ArchLinux sudo pacman - S nodejs mongodb sudo systemctl enable mongodb . service sudo systemctl start mongodb . service // verify with command \"mongo\" sudo npm install - g meanio sudo npm install - g bower sudo npm install - g grunt - cli mean init myApp cd myApp && npm install grunt Now browse http://localhost:3000.","tags":"Tech","url":"http://leetschau.github.io/mean-devlopment-on-linux.html","loc":"http://leetschau.github.io/mean-devlopment-on-linux.html"},{"title":"Virtualization with Vagrant on ArchLinux","text":"Firstly install Virtualbox and Vagrant: sudo pacman - S virtualbox vagrant If you met the following warning, and vagrant can't start: The vboxdrv kernel module is not loaded. Either there is no module available for the current kernel (3.16.4-1-ARCH) or it failed to load. run following commands to compile kernel module vboxdrv and load it: sudo pacman - S linux - headers virtualbox - host - dkms sudo dkms install vboxhost / 4 . 3 . 18 sudo modprobe vboxdrv Verify the module is loaded successfully with lsmod |grep vboxdrv . Ref: VirtualBox on ArchWiki .","tags":"Tech","url":"http://leetschau.github.io/virtualization-with-vagrant-on-archlinux.html","loc":"http://leetschau.github.io/virtualization-with-vagrant-on-archlinux.html"},{"title":"ArchLinux Sound Control on Thinkpad T440p","text":"$ sudo pacman -S alsa-utils $ alsamixer The \"Card\" value on the left-upper corner is \"HDA Intel HDMI\". This is not right. Press F6, a list appear: - (default) 0 HDA Intel HDMI 1 HDA Intel PCH 29 ThinkPad Console Audio Control This means there are totally 3 playback devices. And currently \"0 HDA Intel HDMI\" is the default one. However this is a wrong one. The right audio output device should have \"dB gain...\" in its \"Item\" value. If we choose \"1 HDA Intel PCH\", on the upper-left corner there will be a line: \"Item: Master [dB gain: 0.00]\". So this is the right one, and its id is \"1\". In window of this device, tab to \"Master\", use \"m\" key to toogle its status from \"MM\" (means mute) to \"OO\" (means open this device). Then use up arrow key to increase its volume, until the \"dB gain\" is zero. Quit it with \"ESC\" key. Create a new file ~/.asoundrc: defaults . ctl . card 1 defaults . pcm . card 1 Now test it with speaker-test -c 2 . Ref: \"No sound when S/PDIF video card is installed\" section in Advanced Linux Sound Architecture .","tags":"Tech","url":"http://leetschau.github.io/archlinux-sound-control-on-thinkpad-t440p.html","loc":"http://leetschau.github.io/archlinux-sound-control-on-thinkpad-t440p.html"},{"title":"Install WPS on 64bit ArchLinux","text":"Now WPS is a 32bit application. It's can't run on 64bit ArchLinux. So firstly we should open the multilib repository of the system. Then install WPS with yaourt. Uncomment the following lines in /etc/pacman.conf: [multilib] Include = /etc/pacman.d/mirrorlist Install WPS: yaourt -S wpsoffice ; Install printer drivers: pacman -S libcups ; Install fonts: download wps-office_8.1.0.3724~b1p2_x86.tar.xz from WPS website, unpack it, run ./install_fonts ; Chinese input: yaourt -S fcitx-wps . Modify \"kingsoft-office\" with \"wpsoffice\" in pkgbuild file of fcitx-wps, because kingsoft-office doesn't exits now. Ref: Multilib on Arch Wiki WPS Office on Arch Wiki","tags":"Tech","url":"http://leetschau.github.io/install-wps-on-64bit-archlinux.html","loc":"http://leetschau.github.io/install-wps-on-64bit-archlinux.html"},{"title":"Define Key Binding with xbindkeys on Linux","text":"Install Install xbindkeys: * For ArchLinux: pacman -S xbindkeys ; * For i3 on Ubuntu: sudo apt install xbindkeys xbacklight . Usage Start xbindkeys when X startup: for ArchLinux: add xbindkeys before \"exec i3\" in ~/.xinitrc; for i3 on Ubuntu: add xbindkeys into ~/.xsessionrc; Get a template: xbindkeys -d > ~/.xbindkeysrc ; Detect key definition: xbindkeys -k ; Add output from last command to ~/.xbindkeysrc; Reload new configs: pkill xbindkeys; xbindkeys ; Verify the setup. As an example, add the following lines into ~/.xbindkeysrc to increase and decrease LCD brightness of Thinkpad T440p: \"xbacklight -dec 10\" XF86MonBrightnessDown \"xbacklight -inc 10\" XF86MonBrightnessUp Ref: Xbindkeys http://www.butlerpc.net/blog/2011/01/using-xbindkeys-on-ubuntu-linux-to-remap-key-commands/","tags":"Tech","url":"http://leetschau.github.io/define-key-binding-with-xbindkeys-on-linux.html","loc":"http://leetschau.github.io/define-key-binding-with-xbindkeys-on-linux.html"},{"title":"Install Fcitx IM on ArchLinux and i3wm","text":"After installation of i3wm complete, it's time for install Chinese input method for ArchLinux. $ sudo pacman -S fcitx fcitx-im fcitx-ui-light fcitx-libpinyin fcitx-sunpinyin $ sudo pacman -S ttf-dejavu adobe-source-han-sans-otc-fonts $ cat .xinitrc ... export GTK_IM_MODULE = fcitx export QT_IM_MODULE = fcitx export XMODIFIERS = \"@im=fcitx\" ... $ sudo reboot To verify, run fcitx in terminal, check if there is any warns or errors. Then run fcitx-configtool . If there isn't input methods under \"Input Method\" tab, run sudo pacman -S fcitx-cloudpinyin fcitx-sunpinyin fcitx-googlepinyin fcitx-libpinyin . Ref: Fcitx on Arch Wiki .","tags":"Tech","url":"http://leetschau.github.io/install-fcitx-im-on-archlinux-and-i3wm.html","loc":"http://leetschau.github.io/install-fcitx-im-on-archlinux-and-i3wm.html"},{"title":"Remove Linux from a Windows-Linux Dual-booting Computer","text":"I installed Linux Mint on Thinkpad T440p laptop. Now I need to remove the Linux from this computer. Download mbrfix.zip from \"Download\" channel on sysint.no . Login the Windows on the laptop, unzip mbrfix.zip, copy MbrFix.exe to C drive; Open a console as administrator, run MbrFix /drive 0 fixmbr /win7 /yes ; Format Linux partition; Reboot, bingo.","tags":"Tech","url":"http://leetschau.github.io/remove-linux-from-a-windows-linux-dual-booting-computer.html","loc":"http://leetschau.github.io/remove-linux-from-a-windows-linux-dual-booting-computer.html"},{"title":"Dart Development on Linux","text":"Linux Mint 64bit Today I tried Dart official tutorial Avast, Ye Pirates: Write a Web App . When I run dartium in \"Step 1: Run the skeleton app\", I met the following errors: Could not launch browser - process terminated while trying to connect. Try closing and running Dartium instances.: Dartium stdout: /home/xxx/Apps/dart/chromium/chrome:error while loading share libraries: libudev.so.0: cannot open shared object file: No such file or directory The official solution PreparingYourMachine on dart wiki is somewhat complicated. For I've installed Chrome, there is a simple way to resolve this problem: sudo ln - s / opt / google / chrome / libudev . so . 0 / usr / lib / x86_64 - linux - gnu / libudev . so . 0 Verified on Linux Mint 17 x86_64. Notes: I met a \"404 not found\" error when install libudev-dev with aptitude. To install chrome, download google-chrome-stable_current_amd64.deb from Chrome official website . ArchLinux Download Dart complete bundle (darteditor-linux-x64.zip) on Dart website . Extract it, and start dart editor with ./DartEditor. However, when running a dart project with \"Run in dartium\" context menu, an \"libgconf.so.4 no exist\" error raises. So we have to install dart sdk to provide this library file: sudo pacman -S dart . You can also install dart-editor and dartium from AUR: yaourt - S dart - editor dartium - bin But it's very slow.","tags":"Tech","url":"http://leetschau.github.io/dart-development-on-linux.html","loc":"http://leetschau.github.io/dart-development-on-linux.html"},{"title":"Config Environment Variables on Linux","text":"System-wide environment variables Add global environment variables in file /etc/environment . This file is specifically meant for system-wide environment variable settings. It is not a script file, but rather consists of assignment expressions, one per line: JAVA_HOME =/ usr / lib / jvm / default - java So do not add \"export\" before assignments. Variable expansion does not work in this file. User specific environment variables Add user level environment variables in file ~/.zshenv . For example, to override system PATH: export PATH = $ HOME / apps / spark - 1 . 0 . 2 - bin - hadoop2 / bin : $ PATH User aliases setup For bash there is a ~/.bash_aliases file, so we define aliases in this file, and load it in zsh with adding following codes into ~/.zshrc: if [ - f ~/ . bash_aliases ] ; then . ~/ . bash_aliases fi Some example in ~/.bash_aliases: alias gst = 'git status' alias dn = '$HOME/apps/dsnote/donshell.sh' Refs: EnvironmentVariables on UBUNTU wiki . Zsh on ArchLinux Wiki . What should/shouldn't go in .zshenv, .zshrc, .zlogin, .zprofile, .zlogout? . What is the correct target for the JAVA_HOME envrionment variable for a Linux OpenJDK debian-based distribution? .","tags":"Tech","url":"http://leetschau.github.io/config-environment-variables-on-linux.html","loc":"http://leetschau.github.io/config-environment-variables-on-linux.html"},{"title":"Restart WIFI on Mint","text":"On i3wm of Linux Mint, sometimes the wifi can't refresh automatically when available. Use following commands to refresh wifi connection manually: nmcli nm wifi off nmcli nm wifi on","tags":"Tech","url":"http://leetschau.github.io/restart-wifi-on-mint.html","loc":"http://leetschau.github.io/restart-wifi-on-mint.html"},{"title":"Clojure Web Development","text":"Paredit ParEdit , a.k.a. \"structured editing\", is some special editing operations for S-expression coding, like Lisp or Clojure. Mainstream IDEs all have support for paredit. Eclipse Install clojure IDE plugin counterclockwise . It's default shortcuts is listed in Editor Keyboard Shortcuts ; Cursive Cursive: install IntelliJ and Cursive plugin, see default shortcuts definition at Structural editing ; REPL for Ring Application Say the application name is \"guestbook\" (based on \"Web Development with Clojure\" by Dmitri Sotnikov). Eclipse The counterclockwise plugin need to be installed beforehand. Build a new \"Clojure Project\" with name \"guestbook\", set \"Leiningen template\" as \"compojure-app\"; Open guestbook.routes.home.clj, and run menu item [Clojure -> Load file in REPL]; In REPL window (the window title is \"REPL @ nrepl://127.0.0.1:xxxx(guestbook.routes.home)\", run (use 'guestbook.repl) and (start-server), you can use Ctrl+Up/Down to navigate in command history; See homepage with url \"http://localhost:8080\"; Modify codes, refresh web page to see the result. If this doesn't work, close the REPL window and restart server; Cursive In terminal: lein new compojure-app mybook ; In Cursive, import \"mybook\" via \"Import Project\", choose \"Leiningen\" for \"Import project from external model\"; Open \"Terminal\" window in Cursive, run lein repl , (use 'guestbook.repl) and (start-server); See homepage with url \"http://localhost:8080\"; Modify codes, refresh web page to see the result. If this doesn't work, restart server in \"Terminal\" window; Note: I've tried Light Table . It can open the guestbook project created by leiningen, but can't connect to it. So I give it up, and use Eclipse instead.","tags":"Tech","url":"http://leetschau.github.io/clojure-web-development.html","loc":"http://leetschau.github.io/clojure-web-development.html"},{"title":"dmenu Notes","text":"Add executables to dmenu path We add executables to dmenu path via adding a soft link into /usr/local/bin, which is a dmenu search path. You can use absolute path: sudo ln -s $HOME/apps/eclipse-java-luna-R-x86_64/eclipse /usr/local/bin/eclipse . If you're already in the executable's folder, create links via realpath : sudo ln -s $(realpath DartEditor) /usr/local/bin/dartEditor .","tags":"Tech","url":"http://leetschau.github.io/dmenu-notes.html","loc":"http://leetschau.github.io/dmenu-notes.html"},{"title":"A Simple Ring Server","text":"The simple web server is based on example 16-1 in \"Clojure Programming\" by Chas Emerick. I add it into a clojure project created by leiningen. $ lein new app ring-server $ cd ring-server // Add \"[ring \" 1.0 .0 \"]\" into \":dependencies\" of project.clj $ vi src/ring-server/core.clj $ cat src/ring-server/core.clj (ns ring-server.core (:gen-class)) (use ' [ ring.adapter.jetty :only (run-jetty) ] ) (defn app [{ :keys [ uri query-string ]}] { :body (format \"You requested %s with query %s\" uri query-string) } ) (defn -main \"this is a ring server\" [ port ] (run-jetty # 'app { :port (bigdec port) :join? false } )) $ lein run -m ring-server.core 8082 Now open http://localhost:8082/hello?at=china in your browser, you can see \"You requested /hello with query at=china\".","tags":"Tech","url":"http://leetschau.github.io/a-simple-ring-server.html","loc":"http://leetschau.github.io/a-simple-ring-server.html"},{"title":"Xen on CentOS 6","text":"Ref: Xen4 CentOS6 QuickStart & Xen4 Libvirt for CentOS 6 . Build Xen Server The IP address of the Xen server (a Dell PC) is 10.32.1.112. First install CentOS 6.4 via Minimal CD (or LiveDVD) and install Xen on the new OS; yum update yum groupinstall Virtualization yum install centos - release - xen // unnecessary if install OS with LiveDVD yum install xen bridge - utils / usr / bin / grub - bootxen . sh reboot yum install libvirt python - virtinst libvirt - daemon - xen yum install rsync wget vim - enhanced openssh - clients // unnecessary if install OS with LiveDVD reboot uname - r // the kernel should be 3 . x xm info useradd - m chad groupadd remote - libvirt usermod - G remote - libvirt chad cat > / etc / polkit - 1 / localauthority / 50 - local . d / 50 - libvirt - remote - access . pkla << EOF [ Remote libvirt SSH access ] Identity = unix - group : remote - libvirt Action = org . libvirt . unix . manage ResultAny = yes ResultInactive = yes ResultActive = yes EOF Config network Modify dom0 host file /etc/xen/xend-config.sxp: Comment out \"(network-script /bin/true)\" to \"(network-script 'network-bridge bridge=virbr0 netdev=eth0')\". Build Xen Client We usually do not work on a Xen dom0 server. So here we install xen client on a Mint OS, and control Xen server with it: GUI Client First install with sudo aptitude install virt-manager , then run it with virt-manager . The \"Virtual Machine Manager\" window appears. [File -> Add Connection]: Hypervisor: Xen, check \"Connect to remote host\", Method: SSH, Username: root, Hostname: 10.32.1.112, click \"Connect\". [Edit -> Connect Details -> Storage], Location: /var/lib/libvirt/images. So copy an OS image file (here it's CentOS-6.5-x86_64-minimal.iso) to this folder, and press the refresh button after \"Volumns\", the ISO file appears. Click \"New\" on toolbar, Name: Cloud21, check \"Local install media\" -> Use ISO image: /var/lib/libvirt/images/CentOS-6.5-x86_64-minimal.iso, OS type: Linux, Version: Red Hat Enterprise Linux 6 -> Memory: 1024 MB, CPUs: 1 -> Create a disk image ...: 8.0 GB. Now install CentOS with Minimal ISO file. Console Client sudo aptitude install libvirt - bin virsh - c xen + ssh : //chad@10.32.1.112","tags":"Tech","url":"http://leetschau.github.io/xen-on-centos-6.html","loc":"http://leetschau.github.io/xen-on-centos-6.html"},{"title":"Lightweight Web Browser dwb","text":"List all shortcuts: ga, then click \"Keys\" Open homepage: ga Open links of current page in current tab: f Open links of current page in new tab: F Open a url by input manually in current tab: o Open a url by input manually in a new tab: O Close tab: d Save current page to bookmark: M Show all Bookmarks: ga Save current page to quickmark: m Open quick mark: b Zoom in: + Zoom out: - Yank web page title: yt Yank web page url: yy Go to next tab: J Go to previous tab: K Go to previous page (history): H Go to next page: L Insert text: i","tags":"Tech","url":"http://leetschau.github.io/lightweight-web-browser-dwb.html","loc":"http://leetschau.github.io/lightweight-web-browser-dwb.html"},{"title":"Set Time Synchronization on ArchLinux","text":"Find out if current system time and time zone services status: timedatectl status . If your \"Time zone\" is correct (Hongkong, in my case), and the \"NTP enabled\" is \"no\", then you should open time synchronization service. Run the following commands as root to set correct timezne and sync time with Internet. # ln - s / usr / share / zoneinfo / Hongkong / etc / localtime # hwclock --systohc --utc # systemctl enable systemd - timesyncd . service # systemctl start systemd - timesyncd . service Ref: Time - ArchWiki","tags":"Tech","url":"http://leetschau.github.io/set-time-synchronization-on-archlinux.html","loc":"http://leetschau.github.io/set-time-synchronization-on-archlinux.html"},{"title":"Linux From Scratch Notes","text":"Linux from Scratch (LFS) version: 7.5. Host: Dell PC, ArchLinux. Partition Scheme The host is GPT, so use cgdisk to create 2 new partitions (after 2 existing partitions): root 10GB, and swap 4GB. When asked for partition type, input \"L\", it will list all type code, where code of linux swap is 8200. Reboot and build as root: mkfs . ext4 / dev / sda3 mkswap / dev / sda4 export LFS =/ mnt / lfs mkdir - pv $ LFS mount - v - t ext4 / dev / sda3 $ LFS swapon - v / dev / sda4 mkdir $ LFS / sources chmod - v a + wt $ LFS / sources mkdir - v $ LFS / tools groupadd lfs useradd - s / bin / bash - g lfs - m - k / dev / null lfs passwd lfs chown - R lfs : lfs $ LFS chown - v lfs $ LFS / tools ln - sv $ LFS / tools / chown - v lfs $ LFS / sources su - lfs cat > ~/ . bash_profile << \" EOF \" exec env - i HOME = $ HOME TERM = $ TERM PS1 = ' \\u:\\w\\$ ' / bin / bash EOF cat > ~/ . bashrc << \" EOF \" set + h umask 022 LFS =/ mnt / lfs LC_ALL = POSIX LFS_TGT = $ ( uname - m ) - lfs - linux - gnu PATH =/ tools / bin : / bin : / usr / bin export LFS LC_ALL LFS_TGT PATH EOF wget - O wget - list http : // www . linuxfromscratch . org / lfs / downloads / stable / wget - list wget - i wget - list - P $ LFS / sources cd $ LFS tar xf sources / binutils - 2 . 24 . tar . bz2 cd binutils - 2 . 24 . / configure -- prefix =/ tools -- with - sysroot = $ LFS -- with - lib - path =/ tools / lib -- target = $ LFS_TGT -- disable - nls -- disable - werror make mkdir - v / tools / lib ln - sv lib / tools / lib64 make install cd $ LFS tar xf sources / gcc - 4 . 8 . 2 . tar . bz2 tar xf sources / mpfr - 3 . 1 . 2 . tar . xz tar xf sources / gmp - 5 . 1 . 3 . tar . xz tar xf sources / mpc - 1 . 0 . 2 . tar . xz mv mpfr * mpfr mv gmp * gmp mv mpc * mpc mv mpfr gmp mpc gcc - 4 . 8 . 2 cd gcc - 4 . 8 . 2 cat > runme . sh << EOF for file in $ ( find gcc / config - name linux64 . h - o - name linux . h - o - name sysv4 . h ) do cp - uv $f ile {,. orig } sed - e ' s@/lib\\(64\\)\\?\\(32\\)\\?/ld@/tools&@g ' \\ - e ' s@/usr@/tools@g ' $f ile . orig > $f ile echo ' # undef STANDARD_STARTFILE_PREFIX_1 # undef STANDARD_STARTFILE_PREFIX_2 # define STANDARD_STARTFILE_PREFIX_1 \" /tools/lib/ \" # define STANDARD_STARTFILE_PREFIX_2 \"\" ' >> $file touch $f ile . orig done EOF chmod 755 runme . sh . / runme . sh","tags":"Tech","url":"http://leetschau.github.io/linux-from-scratch-notes.html","loc":"http://leetschau.github.io/linux-from-scratch-notes.html"},{"title":"Xen on ArchLinux","text":"Today I bought a new hard disk, and tried to install xen on it. Install Base ArchLinux Start computer with USB key, choose x86_64, NBD; This is not UEFI boot: an error raised when efivar -l ; Install system: rmmod tg3 modprobe broadcom modprobe tg3 systemctl stop dhcpcd.service dhcpcd enp2s0 sgdisk --zap-all /dev/sda cgdisk /dev/sda // choose GPT partitions type, /dev/sda1: 50G, /dev/sda2: 300G, 581G free mkfs.ext4 /dev/sda1 mkfs.ext4 /dev/sda2 mount /dev/sda1 /mnt mkdir /mnt/home mount /dev/sda2 /mnt/home vi /etc/pacman.d/mirrorlist export http_proxy=http://10.32.1.154:8888 export https_proxy=http://10.32.1.154:8888 // add the ip into \"allow\" list tinyproxy.conf pacstrap -i /mnt base base-devel genfstab -U -p /mnt >> /mnt/etc/fstab vi /etc/locale.gen locale-gen echo LANG=en_US.UTF-8 > /etc/locale.conf export LANG=en_US.UTF-8 ln -s /usr/share/zoneinfo/Hongkong /etc/localtime hwclock --systohc --utc echo xenserver > /etc/hostname vi /etc/hosts systemctl enable dhcpcd@enp2s0.service passwd export http_proxy=http://10.32.1.154:8888 export https_proxy=http://10.32.1.154:8888 pacman -S openssh systemctl enable sshd.service pacman -S gptfdisk // use syslinux boot loader for GPT installed previously pacman -S syslinux syslinux-install_update -iam vi /boot/syslinux/syslinux.cfg // modify sda3 to sda1 in \"APPEND root=/dev/sda3\" exit reboot Customize System After reboot, login as root and run: # useradd - m chad # passwd chad # passwd - l root // disable root login , use can remove this by ` sudo passwd - u root ` # export http_proxy = http : // 10 . 32 . 1 . 154 : 8888 # export https_proxy = http : // 10 . 32 . 1 . 154 : 8888 # pacman - Syu # pacman - S xorg - server xorg - server - utils xorg - xinit i3 dmenu xf86 - video - intel terminator ttf - dejavu firefox # su - chad $ echo exec i3 > ~/ . xinitrc $ startx Install Xen First make sure the host can access internet, then enable multilib repository, uncomment following lines in /etc/pacman.conf: [multilib] Include = /etc/pacman.d/mirrorlist Install yaourt, see note \"Yaourt Notes\" for details. Then run yaourt -S xen . If failed, install it manually: Download xen.tar.gz, and run: tar xf xen . tar . gz cd xen makepkg sudo pacman - U xen - 4 . 4 . 1 - 1 - x86_64 . pkg . tar . xz Config network: # cd / etc / netctl # cp examples / bridge xenbridge - dhcp # vi xenbridge - dhcp # netctl start xenbridge - dhcp # brctl show # netctl enable xenbridge - dhcp Config services: sudo systemctl enable xenstored . service sudo systemctl enable xenconsoled . service sudo systemctl enable xendomains . service Config boot loader. Add following stanza to /boot/syslinux/syslinux.cfg: LABEL xen MENU LABEL Xen KERNEL mboot . c32 APPEND .. / xen - 4 . 4 . 1 . gz --- ../vmlinuz-linux console=tty0 root=/dev/sda1 ro --- ../initramfs-linux.img And make sure there is a \"mboot.c32\" file in folder /boot/syslinux, or you have to copy it: cp /usr/lib/syslinux/bios/mboot.c32 /boot/syslinux/ . Note: If there is file conflicting errors, use sudo pacman -U --force xen-4.4.1-1-x86_64.pkg.tar.xz to install it. Reboot, choose \"Xen\" at boot screen, then run sudo xl list (list all xen domains), you can see a \"Domain-0\" item. If you boot with ArchLinux, run sudo xl list will report an error. Install Guest OS on Xen See Xen Configuration File Options for full syntax of xen domU config files. CentOS 6.5 minimal PV Not succeed yet. Maybe we should use CentOS as dom0 system. $ mkdir ~/ docs / cloud60 $ cd ~/ docs / cloud60 $ dd if =/ dev / zero of = cloud60 . img bs = 1 M count = 10240 $ mkfs . ext4 cloud60 . img $ sudo mount - o loop CentOS - 6 . 5 - x86_64 - minimal . iso / mnt $ cat cloud60 . conf // ??? $ sudo xl create - c cloud60 . conf HVM $ sudo pacman - S mesa - libgl bluez - libs tigervnc $ mkdir ~/ docs / cloud60 $ cd ~/ docs / cloud60 $ dd if =/ dev / zero of = cloud60 . img bs = 1 M count = 10240 $ mkfs . ext4 cloud60 . img $ sudo mount - o loop CentOS - 6 . 5 - x86_64 - minimal . iso / mnt $ cat cloud60 . conf name = \" hvmcentos \" builder = \" hvm \" memory = 1024 disk = [ \" file:/home/chad/docs/cloud60/cloud60.img,xvda,w \" , \" file:/home/chad/warez/CentOS-6.5-x86_64-minimal.iso,xvdb:cdrom,r \" ] vif = [ \" bridge=xenbr0 \" ] vnc = 1 vnclisten = \" 0.0.0.0 \" vncdisplay = 1 $ sudo xl create cloud60 . conf $ sudo xl vncviewer hvmcentos Or you can use vncviewer localhost:5901 to connect to the guest OS, here the \"1\" in \"5901\" is determined by the value of \"vncdisplay\" in guest OS config file. After connecting to the guest OS, install system, then reboot and connect it with vncviewer again. You can use xl's subcommands \"list\", \"top\" and \"info\" to probe domU systems. Using Xen Based on Xen on Arch Wiki . Use Debian as dom0: Xen Project Beginners Guide ; Use CentOS as dom0: Xen4 CentOS6 QuickStart ; Use Ubuntu as dom0: Xen in Ubuntu Community ; Other patterns see Guest Install ;","tags":"Tech","url":"http://leetschau.github.io/xen-on-archlinux.html","loc":"http://leetschau.github.io/xen-on-archlinux.html"},{"title":"Run Spark Tasks on ArchLinux","text":"Install Install JDK: sudo pacman -S jdk7-openjdk ; Download pre-build package (spark-1.1.0-bin-hadoop2.4.tgz) from Apache Spark website ; Extract and add path: tar xf spark-1.1.0-bin-hadoop2.4.tgz ; Run Spark script","tags":"Tech","url":"http://leetschau.github.io/run-spark-tasks-on-archlinux.html","loc":"http://leetschau.github.io/run-spark-tasks-on-archlinux.html"},{"title":"在Linux上播放带中文字幕的电影","text":"今天从 Kickass 上下载了黄秋生1996年主演的电影\"伊波拉病毒\"(Ebola Syndrome)，粤语版听不懂，于是想下载中文字幕，Windows上的射手播放器可以自动下载字幕，Linux上貌似没有这么好用的播放器，于是从 射手网 上下载了字幕文件，用 iconv -f gbk -t utf8 ebola_chs.srt 将编码转为utf8，然后 sudo aptitude install mplayer 安装了MPlayer，发现无法正常播放中文字幕，按照网络上的介绍将默认编码设为UTF-8仍然是乱码，于是 sudo aptitude install smplayer ，然后 smplayer 启动，在[Preferences -> Subtitles -> Subtitles -> Encodings]中，将\"Default subtitle encoding\"设为为\"UTF-8 (UTF-8)\"，将\"Autoload -> Autoload subtitle files\"设置为\"All subs containing movie names\"，并勾选\"Select first available subtitle\"，现在视频文件名是Ebola_LKRG.avi，字幕是Ebola_LKRG_chs.srt，播放视频文件时能够自动加载中文字幕，无乱码，另外[Preferences -> Subtitles -> Subtitles -> Font and colors -> Font]默认值为Arial，在MPlayer中同样设为Arial，中文字幕仍为乱码，可见造成乱码的原因很可能是程序本身不支持UTF8编码的多字节字符。 调整字幕延时： 如果某句对白在字幕文件中的时间标记是13s，但在影片中应该在第32s出现，则在[SMPlayer -> Subtitles -> Set delay...]中的值应设为-19000，即字幕向后推迟19秒。 搜索字幕： [SMPlayer -> Subtitles -> Find subtitles on Opensubtitles.org]. 或者安装subdownloader: sudo aptitude install subdownloader ，但这样软件连接服务器速度很慢，不是很好用。 使用amule( sudo aptitude install amule )也可以搜索到这部影片，但下载速度很慢。","tags":"Tech","url":"http://leetschau.github.io/zai-linuxshang-bo-fang-dai-zhong-wen-zi-mu-de-dian-ying.html","loc":"http://leetschau.github.io/zai-linuxshang-bo-fang-dai-zhong-wen-zi-mu-de-dian-ying.html"},{"title":"Two Java Building Tools","text":"I need build a java project to compare performance of apache log4j and Logback . The following codes are the building procedures based on [Gradle]http://www.gradle.org/) and sbt . sbt mkdir myproject cd myproject cat << EOF > build . sbt name : = \"MyProject\" version : = \"0.1\" EOF mkdir project echo 'addSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"2.5.0\")' > project / plugins . sbt sbt eclipse Note that the blank line between \"name\" & \"version\" in build.sbt is mandatory for Scala syntax. Now start eclipse, import this proect, create new packages (com.boco.logb) and Java files (LoggerOneThread.java) in \"src/main/java\" folder, and config files (log4j.properties and logback.xml) in src/resources folder. slf4j looks for log implementations based on jars in classpath instead of conifg files, so we add both 2 config files into resource folder. The LoggerOneThread.java file: package com . boco . logb ; import java.util.concurrent.TimeUnit ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class LoggerOneThread { public static final long TOTAL_TIMES = 4000 * 1000 ; private static final Logger logger = LoggerFactory . getLogger ( LoggerOneThread . class ); public static void main ( String [] args ) { long start = System . nanoTime (); for ( int i = 1 ; i < TOTAL_TIMES ; i ++ ) { logger . debug ( \"This is a test message. This is another test message.\" ); } long estimatedTime = TimeUnit . NANOSECONDS . toSeconds ( System . nanoTime () - start ); System . out . println ( \"Write \" + TOTAL_TIMES + \" logs takes time \" + estimatedTime + \" s.\" ); } } Log4j config file log4j.properties: log4j . rootLogger = DEBUG , FILE log4j . appender . FILE = org . apache . log4j . RollingFileAppender log4j . appender . FILE . File = log4j . log log4j . appender . FILE . Append = true log4j . appender . FILE . MaxFileSize = 50 MB log4j . appender . FILE . MaxBackupIndex = 10 log4j . appender . FILE . layout = org . apache . log4j . PatternLayout log4j . appender . FILE . layout . ConversionPattern =% d { MM - dd HH : mm : ss . SSS } [ % t ] % p % c - % m % n Logback config file logback.xml: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <appender name= \"FILE\" class= \"ch.qos.logback.core.rolling.RollingFileAppender\" > <file> logback.log </file> <rollingPolicy class= \"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\" > <fileNamePattern> logback.log.%i </fileNamePattern> <minIndex> 1 </minIndex> <maxIndex> 11 </maxIndex> </rollingPolicy> <triggeringPolicy class= \"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\" > <maxFileSize> 50MB </maxFileSize> </triggeringPolicy> <encoder> <pattern> %date{MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n </pattern> </encoder> </appender> <root level= \"DEBUG\" > <appender-ref ref= \"FILE\" /> </root> </configuration> Add following dependencies into build.sbt.log4j: libraryDependencies ++= Seq ( \"org.slf4j\" % \"slf4j-api\" % \"1.7.7\" , \"org.slf4j\" % \"slf4j-log4j12\" % \"1.7.7\" , \"log4j\" % \"log4j\" % \"1.2.17\" ) And the following into build.sbt.logback: libraryDependencies ++= Seq ( \"org.slf4j\" % \"slf4j-api\" % \"1.7.7\" , \"ch.qos.logback\" % \"logback-classic\" % \"1.1.2\" , \"ch.qos.logback\" % \"logback-core\" % \"1.1.2\" ) Now delete .classpath file under project home folder, run sbt eclipse again to refresh classpath. When coding completed, copy build.sbt.log4j (or build.sbt.logback) as build.sbt, run sbt run to run this project. Run sbt package to create jar file under target folder. Some other settings in build.sbt: organization : = \"org.leechau\" Gradle Install gradle plugin for Eclipse, and create a Gradle Project \"MyProject\" in Eclipse, choose \"Java Quickstart\" as Sample project; Add following lines into auto-created build.gradle file for log4j test: apply plugin : 'application' dependencies { compile 'org.slf4j:slf4j-api:1.7.7' , 'log4j:log4j:1.2.17' , 'org.slf4j:slf4j-log4j12:1.7.7' } mainClassName = \"com.boco.logb.LoggerOneThread\" Refresh dependencies: [Gradle -> Refresh Dependencies] in context menu; Run log4j test: cp build . gradle build . gradle . log4j gradle clean run For logback test, create a new file build.gradle.logback based on build.gradle.log4j, but use the following dependencies: compile 'org.slf4j:slf4j-api:1.7.7' , 'ch.qos.logback:logback-classic:1.1.2' , 'ch.qos.logback:logback-core:1.1.2' The config files log4j.properties and logback.xml, and Java file LoggerOneThread.java are identical to that in sbt section. Run logback test: cp build . gradle . logback build . gradle gradle clean run Eclipse Interface How to creat Eclipse setting files (.classpath and .project) so that we can import this project into Eclipse, editing and debuging in it. For gradle, add apply plugin: 'eclipse' into build.gradle and run gradle cleanEclipse eclipse ; For sbt, add addSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"2.5.0\") (for sbt 0.13) into $PROJECT_HOME/project/plugins.sbt, and run sbt eclipse ; Run Program gradle // run log4j test cp build . gradle . log4j build . gradle gradle clean run // run logback test cp build . gradle . logback build . gradle gradle clean run sbt // run log4j test cp build . sbt . log4j build . sbt sbt clean run // run logback test cp build . sbt . logback build . sbt sbt clean run If you have multiple main entry in source files, you can use 'runMain com.boco.logb.LoggerOneThread' instead of \"run\" to run a specific program. Conclusion Gradle is mainly for building of Groovy and Java project, while sbt is mainly for building of Scala and Java project. So far Gradle has better support for building Java project. For example, it's very convenient to build production zip or tar files with Gradle's application plugin (via the \"distZip\" task), while there's no corresponding plugin in sbt. It's convenient to add or remove dependencies within Eclipse with the Gradle plugin of Eclipse (not the eclipse plugin of Gradle), while there's no sbt plugin of Eclipse (sbteclipse of typesafehub is a eclipse plugin of sbt). So we have to refresh build path of dependencies manually when developing a project in Eclipse created by sbt.","tags":"Tech","url":"http://leetschau.github.io/two-java-building-tools.html","loc":"http://leetschau.github.io/two-java-building-tools.html"},{"title":"Package Repository Management on Ubuntu and Mint","text":"Add repository: 'sudo apt-add-repository ppa:kernel-ppa/ppa` List all repositories: ls /etc/apt/sources.list.d Remove repository: sudo apt-add-repository --remove ppa:kernel-ppa/ppa . If you can't get the PPA name, do it manually with sudo rm /etc/apt/sources.list.d/theppa.list . For desktop version, say Ubuntu 14.04 Unity, you can also manage PPAs in GUI: System Settings -> Software & Updates -> Other Software You can see all PPAs are listed here. When an item is unchecked, say \"http://repo.mongodb.org/apt/ubuntu\", under the hood the line \"deb http://...\" in /etc/apt/sources.list.d/mongodb-org-3.0.list is commented out.","tags":"Tech","url":"http://leetschau.github.io/package-repository-management-on-ubuntu-and-mint.html","loc":"http://leetschau.github.io/package-repository-management-on-ubuntu-and-mint.html"},{"title":"Build BVT System Based on Docker","text":"System: ArchLinux 64bit, IP address: 10.32.1.18. Build sudo docker - p 8080 : 8080 --name myjenkins jenkins Now you can access jenkins server in browser. List running containers: sudo docker ps (so you can get the container's name for stoping and restarting later); Stop jenkins server: sudo docker stop myjenkins ; Restart this server: sudo docker start myjenkins ; Backup and Restore Backup image: sudo docker save -o jenkins-docker.tar jenkins ; Restore image: sudo docker load -i jenkins-docker.tar ; Backup container: ( optional ) sudo docker stop jenkins sudo docker export myjenkins > mybvt - system . tar scp mybvt - system . tar chad @laptop : ~/ ssh chad @laptop cat mybvt - system . tar | sudo docker import - exampleimagelocal : new But where is the imported container?","tags":"Tech","url":"http://leetschau.github.io/build-bvt-system-based-on-docker.html","loc":"http://leetschau.github.io/build-bvt-system-based-on-docker.html"},{"title":"Automount USB Disk on Linux","text":"ArchLinux Install: sudo pacman -S udiskie ; Start service: run udiskie & manually when system startup, or add \"udiskie &\" into ~/.xinitrc; Now when you plug USB key into computer, it will be automount to /media folder. Unmount USB disk Create an executable script in /usr/local/bin: $ cat / usr / local / bin / unmount # !/ bin / sh # Global variables TITLE = \" Unmount Utility \" COLUMNS = 3 # TARGET , SOURCE , FSTYPE # IFS = $ ' \\n ' # Populate list of unmountable devices deviceList = ( $ ( findmnt - Do TARGET , SOURCE , FSTYPE | grep - e \" sd[b-z] \" )) deviceCount = $ (( ${# deviceList [@]} / $C OLUMNS )) # Start of program output echo $ TITLE # Display list of devices that can be unmounted for (( device = 0 ; device<${#deviceList[@]}; device+=COLUMNS)) do printf \" %4s) %-25s%-13s%-10s \\n \" \\ \" $(($device / $COLUMNS)) \" \\ \" ${deviceList[$device]} \" \\ \" ${deviceList[$(($device + 1))]} \" \\ \" ${deviceList[$(($device + 2))]} \" done printf \" %4s) Exit \\n \" \" x \" # Get input from user read - p \" Choose a menu option: \" input # Input validation if [ \" $input \" = \" X \" ] || [ \" $input \" = \" x \" ] then echo \" Exiting \" exit 0 fi if (( $ input >= 0 )) && (( $ input < $de viceCount )) then echo \" Unmounting: ${deviceList[$(($input * $deviceCount))]} \" sudo umount \" ${deviceList[$(($input * $deviceCount))]} \" exit 0 else echo \" Invalid menu choice \" exit 1 fi $ chmod 755 / usr / local / bin / unmount Now when eject USB disk, run unmount , and choose a menu item to eject. See USB storage devices for details. Or use udiskie-umount -a to unmount it manually. See man udiskie for more information. Mint Install: sudo apt install udevil ; Start service: run devmon in dmenu when system startup, or add \"devmon &\" into ~/.xsession; After plug USB key into computer, it will be automount to /media folder. If you do not startup devmon in background, you can run devmon -a to mount the USB key. Run devmon -c to unmount the USB key. See man devmon for more information. Difference between .xinitrc and .xsession: If you startup your system with display manager , where you get a graphical login screen, it will read ~/.xsession. In case of you startup your system without display manager and login to shell, startup i3 (or other wm) with startx , then the xinit program will read ~/.xinitrc; See What is \".xsession\" for? for details. See Arch boot process for how Getty manage login process in system boot process.","tags":"Tech","url":"http://leetschau.github.io/automount-usb-disk-on-linux.html","loc":"http://leetschau.github.io/automount-usb-disk-on-linux.html"},{"title":"Docker Notes","text":"Ubuntu 14.04 Install with wget This method is easy for install and update, but not for uninstall. wget - qO - https : // get . docker . com / | sh sudo usermod - aG docker leo sudo reboot # optional docker run hello - world docker ps docker ps - a docker rm < id - listed - by - ps > docker images To stop all containers: docker stop $(docker ps -a -q) . To remove all containers: docker rm $(docker ps -a -q) . To update docker, run wget .. again. To uninstall: sudo apt - get purge lxc - docker sudo apt - get autoremove --purge lxc-docker Ref: http://stackoverflow.com/questions/31313497/how-to-remove-docker-installed-using-wget. Install with apt Follow instructions of Docker official documents . Meteor Server with Docker Mint # sudo aptitude update # sudo aptitude install docker . io aufs - tools cgroup - lite apparmor - utils # sudo ln - sf / usr / bin / docker . io / usr / local / bin / docker # sudo sed - i '$acomplete -F _docker docker' / etc / bash_completion . d / docker . io # docker run ubuntu : 14.04 echo 'hello ubuntu' # docker version Client version : 0.9.1 Go version ( client ) : go1 .2.1 Git commit ( client ) : 3600720 Server version : 0.9.1 Git commit ( server ) : 3600720 Go version ( server ) : go1 .2.1 Last stable version : 1.2.0 , please update docker ArchLinux Docker is only available on X86_64 repository so far. # pacman - S docker # systemctl enable docker # systemctl start docker # docker run ubuntu : 14 . 04 echo ' hello world ' # docker run - i - t ubuntu : 14 . 04 / bin / bash # lsb_release - a Distributor ID : Ubuntu Description : Ubuntu 14 . 04 . 1 LTS Release : 14 . 04 Codename : trusty # exit # docker version Client version : 1 . 2 . 0 Go version ( client ) : go1 . 3 . 1 OS / Arch ( client ) : linux / amd64 Server version : 1 . 2 . 0 Server API version : 1 . 14 Go version ( server ) : go1 . 3 . 1 So you can see at least for now Docker is much newer and easy to use on Arch than on Mint (Ubuntu). If you install \"tree\" with apt-get in the container, logout and relogin, you will find the \"tree\" command disappeared.","tags":"Tech","url":"http://leetschau.github.io/docker-notes.html","loc":"http://leetschau.github.io/docker-notes.html"},{"title":"Spark Notes","text":"Spark Shell Shutdown info log in spark-shell: cd $ SPARK_HOME / conf // here it 's ~/apps/spark-1.0.2-bin-hadoop2/conf cp log4j.properties.template log4j.properties sed -i ' 2 s / INFO / WARN / g ' log4j . properties The sed command here replace \"INFO\" with \"WARN\" in the second line of log4j.properties. on cloud61 Modify /opt/cloudera/parcels/CDH-5.2.0-1.cdh5.2.0.p0.36/lib/spark/conf/log4j.properties, add: log4j . appender . filelog = org . apache . log4j . RollingFileAppender log4j . appender . filelog . layout = org . apache . log4j . PatternLayout log4j . appender . filelog . File = sparkShell . log log4j . appender . filelog . layout . ConversionPattern =% d { yy / MM / dd HH : mm : ss } % p % c { 1 } : % m % n Customize shell parameters master and memory spark-shell --master spark://cloud60:7077 --driver-memory 2g --executor-memory 2g -i wfp-spark.script","tags":"Tech","url":"http://leetschau.github.io/spark-notes.html","loc":"http://leetschau.github.io/spark-notes.html"},{"title":"Build Redis on CentOS 6","text":"This server can't access Internet. We have to download source tarball (redis-2.8.2.tar.gz) and build from source. tar xf redis - 2 . 8 . 2 . tar . gz cd redis - 2 . 8 . 2 // if you run \" sudo make install \" directly , // it gives a \" zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory \" error . cd deps sudo make hiredis jemalloc linenoise lua cd .. sudo make install Ref: jemalloc and other errors making redis on centos 6.4","tags":"Tech","url":"http://leetschau.github.io/build-redis-on-centos-6.html","loc":"http://leetschau.github.io/build-redis-on-centos-6.html"},{"title":"Build Working Environment with i3 and Mint","text":"Base System Install Linux Mint 17 Xfce with Live DVD (USB key created by YUMI 2.0.5) on Asus X84H laptop. The \"/\" partition is 30GB, while the \"/home\" partition is 50GB. No need to install any hardware drivers. It simply works! Window Manager sudo apt install i3 - wm dmenu i3status i3lock Basic Configuration cp /etc/i3status.conf ~/.config/i3status/config and modify the ethernet and wireless NIC name from _first_ to the actual name, for example the default ethernet name of Linux Mint 18.3 is eno1 , and the default wireless card name is wlp2s0 . Both the order line and the command line need to be modified. Frequently Used Commands Reload i3 configuration: i3-msg reload ; Restart i3 environment (preserves current layout/session, opened apps): i3-msg restart ; Startup Configurations MDM Mint's default graphical login manager is MDM, see New features in Linux Mint 17 Xfce . Logout of Xfce desktop. In login manager, you can find \"i3\", choose it, and login i3 environment. Its user level auto startup script is ~/.xsessionrc. It should be the same with .xinitrc. So make a link from it with ln -s ~/.xinitrc ~/.xsessionrc . See /etc/mdm/Xsession for variable definitions, such as USERXSESSION, USERXSESSIONRC, etc. See CustomXSession for more. The example ~/.xsessionrc : setxkbmap - option caps : swapescape $ HOME / apps / Shadowsocks - Qt5 - 3 . 0 . 0 - x86_64 . AppImage & $ HOME / apps / electronic - wechat - linux - x64 / electronic - wechat & $ HOME / apps / WizNote - 2 . 5 . 9 - x86_64 . AppImage & copyq & xbindkeys Here xbindkeys is used for keyboard shortcuts for hardware. For example, volume up/down, screen brightness up/down, etc. See dsnote Define Key Binding with xbindkeys on Linux for details. devmon for USB key management, see dsnote Automount USB Disk on Linux for details. xinit See note \"Run Linux Without Desktop Environment\". Its user level auto startup script is ~/.xinitrc. User Defined Key Shortcuts Add the following key bindings into ~/.i3/config : bindsym $ mod + Shift + c exec / home / leo / . local / bin / chrom bindsym $ mod + Shift + f exec / home / leo / apps / firefox / firefox Here Chrome is used with shadowsocks, Firefox is used without proxy: cat ~/ . local / bin / chrom export http_proxy = http : // localhost : 1080 export https_proxy = http : // localhost : 1080 chromium - browser Input Method Add the following lines into ~/.xinitrc before \"exec i3\": export GTK_IM_MODULE = xim export QT_IM_MODULE = xim export XMODIFIERS = \"@im=fcitx\" fcitx & Power Management in i3 Check if \"pm-utils\" has been installed via dpkg -l|grep pm-utils . If not, install it with sudo apt install pm-utils ; Add file /usr/local/bin/pm and chmod 755 /usr/local/bin/pm : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/bin/sh lock () { i3lock -c 000000 } case \" $1 \" in lk ) lock ;; logout ) i3-msg exit ;; ssd ) lock && sudo pm-suspend-hybrid ;; hibernate ) lock && sudo pm-hibernate ;; rbt ) sudo reboot ;; shd ) sudo poweroff ;; * ) echo \"Usage: $0 {lk|logout|ssd|hibernate|rbt|shd}\" exit 2 esac exit 0 The \"-c\" option of i3lock command specifies the screen color, where \"000000\" is black. Now any user belonging to sudo group can run pm lk|ssd|rbt|shd to lock, suspend, reboot or shutdown computer without input password. If the user is not a sudoer, run usermod -aG sudo username with root. Verify user's group with id , groups or groups username . The following is not needed (modified at 2018.7.3): Add the following line into /etc/sudoers: %sudo ALL = ( ALL ) NOPASSWD : / sbin / poweroff , / sbin / reboot , / sbin / shutdown , / usr / sbin / pm - suspend , / usr / sbin / pm - suspend - hybrid Lock Screen On Mint Cinnamon (verified on 19), lock screen with Ctrl-Alt-l . On i3wm, add bindsym $mod+Control+l exec pm lk into ~/.i3/config and run i3-msg reload . Now you can lock screen with the same shortcut, Ctrl-Alt-l , in Cinnamon. Note you need define pm command (see above section) beforehand. Ref: http://askubuntu.com/questions/168879/shutdown-from-terminal-without-entering-password http://askubuntu.com/questions/159007/how-do-i-run-specific-sudo-commands-without-a-password http://askubuntu.com/questions/2214/how-do-i-add-a-user-to-the-sudo-group http://www.cyberciti.biz/faq/howto-linux-add-user-to-group/ http://linuxers.org/article/difference-between-primary-and-secondary-groups-linux Config System Font List all available fonts installed: fc-list . For example, when run fc-list|grep wqy , we got the name of this pre-installed Chinese font: \"WenQuanYi Micro Hei\". Edit config file ~/.i3/config: replace \"font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\" with \"font pango:WenQuanYi Micro Hei 11\".","tags":"Tech","url":"http://leetschau.github.io/build-working-environment-with-i3-and-mint.html","loc":"http://leetschau.github.io/build-working-environment-with-i3-and-mint.html"},{"title":"Install New Locale on Linux Mint","text":"After installing a new Linux (Mint 17, xfce), I need to install Chinese input method, so I have to install Chinese locale at first. List all installed locales: locale -a ; View all supported locales on your system: less /usr/share/i18n/SUPPORTED , and \"zh_CN.UTF-8 UTF-8\" is what I want to install; Add this locale into locale list file: echo \"zh_CN.UTF-8 UTF-8\" >> /var/lib/locales/supported.d/local ; Regenerate locale list: sudo dpkg-reconfigure locales ; Ref: How do I add locale to ubuntu server?","tags":"Tech","url":"http://leetschau.github.io/install-new-locale-on-linux-mint.html","loc":"http://leetschau.github.io/install-new-locale-on-linux-mint.html"},{"title":"Qtile on ArchLinux","text":"Install // Before install qtile , you need download python2 - setuptools manually , and install it : $ sudo pacman - U python2 - setuptools - 1 _5 . 7 - 1 - any . pkg . tar . xz $ yaourt - S qtile - git $ mkdir ~/ . config / qtile $ cp / usr / share / doc / qtile - git / default_config . py ~/ . config / qtile / config . py $ echo \" exec qtile \" > ~/ . xinitrc $ python2 - m py_compile ~/ . config / qtile / config . py // check syntax for config . py $ qsh > restart > quit $ Configuration Something import in config.py: mod = \" mod4 \" # the Win key as mod key Key ( [ mod ], \" Return \" , lazy . spawn ( \" xterm \" )) , # start a shell , you can modify it as another virtual terminal , such as \" xfce4-terminal \" Key ( [ mod ], \" w \" , lazy . window . kill ()) , # close a application Key ( [ mod , \" control \" ], \" r \" , lazy . restart ()) , # reload Qtile after modify config . py Key ( [ mod , \" control \" ], \" q \" , lazy . shutdown ()) , # quit Qtile","tags":"Tech","url":"http://leetschau.github.io/qtile-on-archlinux.html","loc":"http://leetschau.github.io/qtile-on-archlinux.html"},{"title":"Closure in Different Languages","text":"The following code snippets compare closures in several languages. First is closure in javascript. Here I use nvm to run javascript code. $ cat closure . js function extent () { var n = 0 ; return function () { n ++ ; console . log ( \" n= \" + n ) ; } } extent ()() ; extent ()() ; f = extent () ; console . log ( \" ----- \" ) ; // console . log ( extent . uniqueId ()) ; f () ; f () ; $ nvm alias default 0 . 10 $ nvm run closure . js Running node v0 . 10 . 30 n = 1 n = 1 ----- n = 1 n = 2 In above example, the closure is function() { n++; console.log... } . It's bound to variable \"f\". The local variable \"n\" is \"closed\" into closure. Its lifetime is the same with \"f\". So after the first execution of f, its inner state is saved. For Python, nested function can only access variables in outer scope, but can't reassign (modify) them. So I use list as a workaround. In Python 3, there is a new keyword \"nonlocal\" to remove this restriction. $ cat closure . py2 . py def extent () : n = [ 0 ] def afun () : n [ 0 ] += 1 print ( ' n= ' + str ( n [ 0 ] )) return afun extent ()() extent ()() print ( ' ----- ' ) f = extent () f () f () print ( \" type of f is %s, its id is %d \" % ( type ( f ) , id ( f ))) $ python closure . py2 . py n = 1 n = 1 ----- n = 1 n = 2 type of f is < type ' function ' > , its id is 140403684898408 $ cat closure . py3 . py def extent () : n = 0 def afun () : nonlocal n n += 1 print ( ' n= ' + str ( n )) return afun extent ()() extent ()() f = extent () print ( ' ---- ' ) f () f () print ( \" type of f is %s, its id is %d \" % ( type ( f ) , id ( f ))) [ 0 ] python3 closure . py3 . py n = 1 n = 1 ---- n = 1 n = 2 type of f is < class ' function ' > , its id is 139914425096528 The Ruby environment used here is RVM . Ruby version is 2.1.2. $ rvm use 2 . 1 . 2 -- default $ cat closure . rb def extent n = 0 lambda { n += 1 printf \" n=%d \\n \" , n } end extent () . call () extent () . call () f = extent () puts ' ------ ' f . call () f . call () puts \" class of f is #{f.class.name}, its id is #{f.object_id} \" $ ruby closure . rb n = 1 n = 1 ------ n = 1 n = 2 class of f is Proc , its id is 6724520 Two versions of Scala, define functions via \"def\" and \"val\" give different results: $ diff *.scala 1c1 < def extent = { --- > val extent = { $ cat closure-def.scala def extent = { var n = 0 () = > { n += 1 println ( \"n=\" + n ) } } extent () extent () val f = extent println ( \"------\" ) f () f () println ( s \"Class of f is ${ f .getClass } , its id is ${ f .hashCode } \" ) $ scala closure-def.scala n = 1 n = 1 ------ n = 1 n = 2 Class of f is class Main $$ anon $1$$ anonfun $extent$1 , its id is 8970973 $ cat closure-val.scala val extent = { var n = 0 () = > { n += 1 println ( \"n=\" + n ) } } extent () extent () val f = extent println ( \"------\" ) f () f () println ( s \"Class of f is ${ f .getClass } , its id is ${ f .hashCode } \" ) $ scala closure-val.scala n = 1 n = 2 ------ $ scala closure-val.scala n = 1 n = 2 ------ n = 3 n = 4 Class of f is class Main $$ anon $1$$ anonfun $1 , its id is 8970973","tags":"Tech","url":"http://leetschau.github.io/closure-in-different-languages.html","loc":"http://leetschau.github.io/closure-in-different-languages.html"},{"title":"Ruby Build Tools","text":"gem (as a command) is a tool to download and install gems from RubyGems . It's Python counterpart should be pip in global environment. It installs some global gems (files), such as rake, bundler, etc. Use gem list to list these system-level gems. Use gem env to print environment setup, notice INSTALLATION PATH and GEM PATHS in the output. Or gem env gemdir for gem path. \"gem\" (as a file on disk), such as \"bundler-1.6.1.gem\" is a package which has the same standard structure. It's text (not binary) but not readable, like minified js file for JavaScript, jquery.min.js for example. bundler is used to manage project-level gems, it read the Gemfile of a project and install these gems in project environment. It works based on a spec file named \"Gemfile\" at project's root directory. It's \"ivy.xml\" of Ivy configurations for Java. rake is a build tool of Ruby. You can define many tasks and their dependencies in the file \"Rakefile\" in the project's root directory. And run these tasks with rake <task-name> . It's Ant for Java, or make for Linux. Functions of Maven or Gradle for Java covers bundler and rake.","tags":"Tech","url":"http://leetschau.github.io/ruby-build-tools.html","loc":"http://leetschau.github.io/ruby-build-tools.html"},{"title":"Install ArchLinux on Old ASUS A3000 Laptop","text":"My old ASUS A3 laptop is bought at 2004. It CPU is Intel Celeron 1.33GHz, 490MB memory. Download install media: archlinux-2014.04.01-dual.iso; Write this ISO to USB stick with YUMI ; Plugin a usb-netcard (because the netcard of A3000 doesn't work) and startup A3000 with this USB key; When \"Boot> \" appeared, press , then input \"pxe\", then press again, input \"nohave64\"; After ArchLinux i686 startup, setup ADSL connection with pppoe-setup (I install ArchLinux at home via ADSL): NIC: enp0s29f7u2 Username: 100002172688 Password: k4... DNS: server and use default values for other items. Install arch system. After setup hostname: pacman -S rp-pppoe openssh grub grub-install --target=i386-pc --recheck /dev/sda Shutdown system, unpluged USB key, restart system. A \"GRUB load failed... no such partition...\" error raise Install arch system. After setup hostname: pacman -S rp-pppoe openssh grub grub-install --target=i386-pc --recheck /dev/sda Using USB wireless card to replace USB wired netcard: pacman -S iw gnome-keyring . The USB wireless card is TP-LINK TL_WN725N, bought at jd.com 2013.2.18. Install video driver: the video card is Intel checked by lspci|grep VGA , so pacman -S xf86-video-intel ; Config SSH servive: systemctl enable sshd ; Shutdown system, unplug USB key, restart system. A \"GRUB load failed... no such partition...\" error raise. List partition UUID with blkid , compare them with that in /boot/grub/grub.cfg. They dismatch. Startup system with USB key. After arch-chroot , run grub-mkconfig -o /boot/grub/grub.cfg to rebuild grub file; Restart laptop. Arch load successfully.","tags":"Tech","url":"http://leetschau.github.io/install-archlinux-on-old-asus-a3000-laptop.html","loc":"http://leetschau.github.io/install-archlinux-on-old-asus-a3000-laptop.html"},{"title":"Run MapReduce Jobs on Spark","text":"Interactive Mode Follow Quick Start of Spark 1.0.2 on Apache Spark website . # hadoop fs -put alarm_data_for_explore-0501-0505.txt alarm_data_for_explore-0501-0505.txt # hadoop fs -ls ... - rw - r -- r -- 3 root root 260780698 2014 - 08 - 15 16 : 45 alarm_data_for_explore - 0501 - 0505. txt # wc -l alarm_data_for_explore-0501-0505.txt 1362005 # head -1 alarm_data_for_explore-0501-0505.txt - 2117657102 | 102 | 1000012276 | License ...| 3 | 4 | 102 | # grep 007-002-00-000592 alarm_data_for_explore-0501-0505.txt | wc -l 12 # mv alarm_data_for_explore-0501-0505.txt aaa.txt // this local file is unnecessary any more # spark-shell scala > val textFile = sc . textFile ( \"alarm_data_for_explore-0501-0505.txt\" ) textFile : org . apache . spark . rdd . RDD [ String ] = MappedRDD [ 1 ] at textFile at < console > : 12 scala > textFile . count () ... res5 : Long = 1362005 scala > textFile . first () ... res8 : String = - 2117657102 | 102 | 1000012276 | License ...| 3 | 4 | 102 | scala > textFile . filter ( line => line . contains ( \"007-002-00-000592\" )) . count () ... res12 : Long = 12 scala > import java.lang.Math import java.lang.Math scala > textFile . map ( line => line . split ( \"|\" ) . size ) . reduce (( a , b ) => Math . max ( a , b )) ... res13 : Int = 372 Run Spark Script $ cat wfp-spark val MIN_SUP = 0 .0003 val MIN_CONF = 0 val MAX_RELATION_ORDER = 3 val DATA_FILE = \"input\" val textFile = sc.textFile ( DATA_FILE ) val weight = textFile.map ( x = > x -> x.split ( \",\" )( 5 ) .toFloat ) .cache val data = textFile.groupBy ( x = > x.split ( \",\" )( 0 )) $ spark-shell -i wfp-spark ... Now you are in a spark shell, all variables such as MIN_SUP, MIN_CONF are accessible. Batch Mode Follow Running Spark Applications in CDH 5 Installation Guide . # locate spark - defaults . conf // find out where is $ SPARK_HOME / etc / spark / conf . cloudera . spark / spark - defaults . conf ... # ll / etc / spark / conf . cloudera . spark ... - rw - r --r-- 1 root root 883 Aug 14 10:12 spark-env.sh # cat / etc / spark / conf . cloudera . spark / spark - env . sh ... export SPARK_HOME =/ opt / cloudera / parcels / CDH - 5 . 1 . 0 - 1 . cdh5 . 1 . 0 . p0 . 53 / lib / spark ... # source / etc / spark / conf . cloudera . spark / spark - env . sh // load $ SPARK_HOME , etc # spark - submit --class org.apache.spark.examples.SparkPi --deploy-mode client --master yarn $SPARK_HOME/examples/lib/spark-examples_2.10-1.0.0-cdh5.1.0.jar 10","tags":"Tech","url":"http://leetschau.github.io/run-mapreduce-jobs-on-spark.html","loc":"http://leetschau.github.io/run-mapreduce-jobs-on-spark.html"},{"title":"Build Gradle Project in Netbeans","text":"Rename project: edit project name in settings.gradle, then right click project, choose \"Reload Project\"; Modify dependencies: edit build.gradle, then right click project, choose [Tasks -> buildDependents]; The jVi plugin is not support Netbeans 8, so its editing is not very convenient like in Eclipse.","tags":"Tech","url":"http://leetschau.github.io/build-gradle-project-in-netbeans.html","loc":"http://leetschau.github.io/build-gradle-project-in-netbeans.html"},{"title":"Underscore in Scala","text":"val name = \"abc\" println(name.exists(_.isUpper)) Here \"_.isUpper\" is an anoymous function, which equals to \"x => x.isUpper\". Ref: Scala placeholder syntax Anonymous Function Syntax Scala underscore magic","tags":"Tech","url":"http://leetschau.github.io/underscore-in-scala.html","loc":"http://leetschau.github.io/underscore-in-scala.html"},{"title":"Solve Integral Equation Set with Python","text":"The equation set is provided by 鲍珂 at 2014-8-12. Host: Windows 7 VM: CentOS 6.5 minimal, python 2.6.6 Start VM, make sure its ssh service start with service sshd status ; Then connect it with Putty or Kitty; Install yum install wget wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm rpm -ivh epel-release-6-8.noarch.rpm yum update // optional desktop environment, start with startxfce4 yum groupinstall Xfce yum groupinstall Fonts yum install xorg-x11-fonts-Type1 xorg-x11-fonts-misc yum install python-pip yum install vim-enhanced yum install python-ipython.noarch pip install argparse pip install sympy pip install mpmath pip install scipy Symbolic Method from sympy import * var('x y s') integrate(gamma(x+y)/(gamma(x)+gamma(y)) s (x-1)*(1-s) (y-1), (s, 0, 0.6)) integrate(gamma(x+y)/(gamma(x)+gamma(y)) s (x-1)*(1-s) (y-1), (s, 0.9, 1)) Ref: http://docs.sympy.org/0.7.0/tutorial.html http://scipy-lectures.github.io/advanced/sympy.html#integration http://docs.sympy.org/dev/modules/integrals/integrals.html http://docs.sympy.org/0.7.1/modules/mpmath/functions/gamma.html Numeric Method from future import division from scipy.optimize import fsolve from scipy.special import gamma from scipy.integrate import fixed_quad def myfunc(x, y, theta): gmp = gamma(x+y) / (gamma(x)+gamma(y)) return gmp * theta (x-1) * (1-theta) (y-1) def equations(p): x, y = p intg1 = fixed_quad(myfunc, 0, 0.6, args=(x, y)) intg2 = fixed_quad(myfunc, 0.9, 1, args=(x, y)) return (intg1[0] - 0.05, intg2[0] - 0.05) xr, yr = fsolve(equations, (1, 1)) print equations((xr, yr)) Ref: http://stackoverflow.com/questions/8739227/how-to-solve-a-pair-of-nonlinear-equations-using-python http://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve","tags":"Tech","url":"http://leetschau.github.io/solve-integral-equation-set-with-python.html","loc":"http://leetschau.github.io/solve-integral-equation-set-with-python.html"},{"title":"Build Java Project with Eclipse, Gradle and Git","text":"Install and Usage The order should be: Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc; Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc; Install Eclipse: download, extract; Install Gradle plugin for eclipse via \"Market Place\" in Eclipse, because it's inconvenient to run gradle tasks in console while edit files in Eclipse; Configure Gradle plugin: set its working JDK; Build a new Gradle project in Eclipse, add git version control; Run Gradle tasks: right click \"build.gradle\" file, then select \"Gradle -> Tasks Quick Launcher\" (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name. That's it. Frequently Used Tasks Some need adding apply plugin: 'application' and mainClassName = 'com.boco.gdep.Probe' into build.gradle. Read Gradle Application Plugin for details. clean check test compileJava run startScripts: create start scripts for your application; distZip: build final deploy package, find zip file under build/distributions folder; installApp: install package created in \"distZip\" into build/install folder; Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle's test task (using Shift + Ctrl + Alt + R, then input \"test\" and ). All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my GDEP project. Debug Gradle with println Add the following scripts into build.gradle, then run \"check\" task. println \"--------\" println project . name println \"--------\" Customize project name Add a new file \"settings.gradle\" at the root of the project, add a string \"rootProject.name = 'myProj'\" into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc. First install gradle, then run the following commands: $ mkdir myproj $ cd myproj $ gradle init --type java-library $ mkdir src/main/resources $ mkdir src/test/resources Now the project layout is ready. If you want to develop this project in Eclipse, add \"apply plugin: 'eclipse'\" into build.gradle, then run: $ gradle eclipse Then open this project with Eclipse. The default project layout (file structure) of \"java\" plugin is described in \"Project layout\" section of Gradle User Guide : src/main/java: Production Java source src/main/resources: Production resources src/test/java: Test Java source src/test/resources: Test resources src/sourceSet/java: Java source for the given source set src/sourceSet/resources: Resources for the given source set Add git version control with: $ cd myproj $ git init In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse. Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore: $ cat .gitignore build .gradle gradle ... Three Eclipse component \".settings\", \".project\" and \".classpath\" should be added to git repository. Merge Github Project and Eclipse Gradle Project git clone https://github.com/leetschau/GDEP.git gdep2 In Eclipse, build a new Gradle project \"GDEP-0811\" with \"Quick start\" template; Move all files and folders in gdep2 to GDEP-0811; Refresh project in Eclipse; Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter \"build\", and press . If you encounter a \"Cannot find System Java Compiler\" error, set Gradle's Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select \"Workspace JRE\": jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).","tags":"Tech","url":"http://leetschau.github.io/build-java-project-with-eclipse-gradle-and-git.html","loc":"http://leetschau.github.io/build-java-project-with-eclipse-gradle-and-git.html"},{"title":"Serial Device Debug on Linux","text":"The device name is \"Prolific Technology, Inc. PL2303 Serial Port\", you can use lsusb to get its name. Then install gtkterm for communicating with it. $ sudo apt-get install gtkterm Now use syslog to get the device name of pl2303. $ tail -f /var/log/syslog ... ... usb 3 -2: pl2303 converter now attached to ttyUSB0 ... So its device name is /dev/ttyUSB0. Now you can connect it with gtkterm: $ sudo gtkterm -p /dev/ttyUSB0 -s 57600 View -> Send hexadecimal data: 41 54 2B 53 43 41 4E minicom # apt - get install minicom But I don't know how to send command via this application.","tags":"Tech","url":"http://leetschau.github.io/serial-device-debug-on-linux.html","loc":"http://leetschau.github.io/serial-device-debug-on-linux.html"},{"title":"Java Development Environment on Eclipse","text":"Eclipse Luna for Java Developer, file name: eclipse-java-luna-R-linux-gtk-x86_64.tar.gz Gradle plugin Download gradle-2.0-all.zip, extract it to ~/apps; Add following lines into ~/.zshrc and run source ~/.zshrc : export GRADLE_HOME=/home/chad/apps/gradle-2.0 export PATH= \\(PATH:\\) GRADLE_HOME/bin Install \"Gradle IDE 3.6.0\": searching \"gradle\" in Eclipse Marketplace and install it; Vim mode plugin Download vrapper_0.44.0_20140601.zip from its website ; Extract it under $ECLIPSE_HOME/dropins; Start Eclipse; if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/java-development-environment-on-eclipse.html","loc":"http://leetschau.github.io/java-development-environment-on-eclipse.html"},{"title":"Run Python MapReduce on Hadoop Cluster","text":"Based on Writing an Hadoop MapReduce Program in Python . Create mapper and reducer script and make them executable with chmod 755 *.py : mapper.py: 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import sys # input comes from STDIN (standard input) for line in sys . stdin : # remove leading and trailing whitespace line = line . strip () # split the line into words words = line . split () # increase counters for word in words : # write the results to STDOUT (standard output); what we output here will be the input for the Reduce step, i.e. the input for reducer.py tab-delimited; the trivial word count is 1 print ' %s \\t %s ' % ( word , 1 ) reducer.py: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env python from operator import itemgetter import sys current_word = None current_count = 0 word = None # input comes from STDIN for line in sys . stdin : # remove leading and trailing whitespace line = line . strip () # parse the input we got from mapper.py word , count = line . split ( ' \\t ' , 1 ) # convert count (currently a string) to int try : count = int ( count ) except ValueError : # count was not a number, so silently ignore/discard this line continue # this IF-switch only works because Hadoop sorts map output by key (here: word) before it is passed to the reducer if current_word == word : current_count += count else : if current_word : # write result to STDOUT print ' %s \\t %s ' % ( current_word , current_count ) current_count = count current_word = word # do not forget to output the last word if needed! if current_word == word : print ' %s \\t %s ' % ( current_word , current_count ) Get input text file and put them into hdfs: download the text version of The Outline of Science, Vol. 1 (of 4) by J. Arthur Thomson , The Notebooks of Leonardo Da Vinci and Ulysses by James Joyce . Then upload them to hdfs: $ hadoop fs -mkdir gutenberg $ hadoop fs -put pg .txt gutenberg/ $ hadoop jar /usr/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop- streaming .jar -file /home/hduser/mapper.py -mapper /home/hduser/mapper.py -file /home/hduser/reducer.py -reducer /home/hduser/reducer.py -input /user/hduser/gutenberg/ -output /user/hduser/gutenberg-output You have to make sure the \"gutenberg-output\" folder has not existed. When finished, you can see the result with: $ hadoop fs -ls gutenberg-output $ hadoop fs -cat gutenberg-output/part-00000 Verified on CDH 4.3, built on 8 CentOS 6.3 64bit host, Python 2.6.6, 2014-8-7.","tags":"Tech","url":"http://leetschau.github.io/run-python-mapreduce-on-hadoop-cluster.html","loc":"http://leetschau.github.io/run-python-mapreduce-on-hadoop-cluster.html"},{"title":"Scala Development on Linux","text":"vim + repl This is the most light-weight solution which only scala and vim needed. First write your Scala script \"NewList.scala\": sealed trait List [ +A ] case object Nil extends List [ Nothing ] case class Cons [ +A ]( head : A , tail : List [ A ]) extends List [ A ] object List { def sum ( ints : List [ Int ]) : Int = ints match { case Nil => 0 case Cons ( x , xs ) => x + sum ( xs ) } def apply [ A ]( as : A* ) : List [ A ] = if ( as . isEmpty ) Nil else Cons ( as . head , apply ( as . tail : _ * )) // added by me def test () = { println ( sum ( List ( 3 , 20 , 1 , 2 ))) } } Note there can not be package definition in the script, or :load will fail. Then start a REPL: scala scala> :load NewList.scala scala> List.test After modification in NewList.scala, run :load ... and List.test again. Use tmux to make this process smooth Create an executable shell script ~/.tmux/myscripts/refresh-scala-repl.sh: #!/bin/bash tmux send-keys -t .1 ':load NewList.scala' tmux send-keys -t .1 Enter tmux send-keys -t .1 'List.test' tmux send-keys -t .1 Enter Here \".1\" means \"send keys to the 1st pane of the current session, current window\". The full format is #{session_name}:#{window_index}.#{pane_index} . So if your editor pane is above (or on the left side of) Scala REPL pane, you should use \".2\" instead of \".1\" in above script. In vim, run :autocmd BufWritePost *.scala silent !/home/leo/.tmux/myscripts/refresh-scala-repl.sh . Now every time you save the Scala script, :load and List.test will be run automatically in Scala REPL. Here \"silent\" will prevent vim from redrawing the screen. Sometimes you have to use scalac & scala to run your codes like this: sealed trait MyOption [ +A ] { def mymap [ B ]( f : A => B ) : MyOption [ B ] = this match { case MyNone => MyNone case MySome ( a ) => MySome ( f ( a )) } } case class MySome [ +A ]( get : A ) extends MyOption [ A ] case object MyNone extends MyOption [ Nothing ] object MyOption { } object Main extends App { assert ( Some ( 3 ). mymap ( _ * 2 ) == Some ( 6 )) } The corresponding autocmd is rerun-option.sh: #!/bin/bash tmux send-keys -t .2 'scalac MyOption.scala && scala Main' tmux send-keys -t .2 Enter Ref: http://stackoverflow.com/questions/19313807/tmux-send-keys-syntax Autocommands in \"Learn Vimscript the Hard Way\" http://vi.stackexchange.com/questions/3060/suppress-output-from-a-vim-autocomand Use ScalaIDE ScalaIDE is based on Eclipse, which contains Scala compiler and runtime as a plugin. So you needn't install Scala any more. It can check syntax error and code completion on the fly. But you have to create a Scala project, add your script in it. In above example, after modifying codes in editor, use Ctrl-A then Ctrl-Shift-X (shortcut of toolbar button \"Run Selection in Scala Interpreter\", can be modified in Window -> Preferences -> General -> Keys: Send Selection to Scala Interpreter) to reload script (like :load in REPL). Then focus Scala Interpreter with mouse, and use Ctrl-Up then Ctrl-Enter to run List.test . sbt + vim Download sbt package (sbt-0.13.5.deb for Mint 17 64bit) or use PPA and apt update from sbt website ; Install it, then start sbt repl with sbt in shell; This will install sbt (sbt shell in folder /usr/share/sbt-launcher-packaging , all jars needed in folder ~/.ivy2/cache/org.scala-xxx ). Now you can run scala repl with sbt console in shell, or run console within sbt repl. Script REPL Create a file \"Hi.scala\": object Hi extends App { println ( \"Hi, there\" ) } Then run this script within sbt: $ sbt ... > run ... [ info ] Running Hi Hi , there You can use tilde prefix to detect source change automatically, just use \"~run\" instead of \"run\" in above example.","tags":"Tech","url":"http://leetschau.github.io/scala-development-on-linux.html","loc":"http://leetschau.github.io/scala-development-on-linux.html"},{"title":"Manage Python Versions with Pyenv","text":"pyenv is python equivalent of rvm of ruby. It can replace the virtualenvwrapper, and there's no need to install virtualenv before pyenv. It will install virtualenv automatically. On ArchLinux, you just install it according its documents on the website: $ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash But on Mint 17, you have to install libraries beforehand: $ sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl Then run \"curl ...\" to install it. Then add \"export ... eval ...\" into ~/.zshrc according to its prompt at the end of the installation. Usage $ pyenv commands // list all available commands $ pyenv install -l // list all available versions to install $ pyenv install 2 .6.6 $ pyenv rehash // run this command after install a new version $ pyenv versions // list all installed versions $ pyenv shell 2 .6.6 // set python version to 2 .6.6 in this session ( shell ) $ pyenv local 2 .6.6 // create a .python-version file under CWD, it will use 2 .6.6 afterwards according to this file $ pyenv shell system // go back to use the system python version $ pyevn which python // check the python path in current environment $ pyenv uninstall 2 .6.6 No Special Package Nedded If your python project need no special dependency packages, use pyenv local 2.6.6 is a good idea. It only create a .python-version under the folder. Very clean. Need Install Package If your project need some package, which you don't want to put into system environment, use $ pyenv virtualenv 2 .6.6 myproj Now you have a INDEPENDENT python environment based on 2.6.6. You can verify this by run: $ cd myproj $ pyenv activate myproj $ pyenv which python /home/chad/.pyenv/versions/myproj/bin/python $ pyenv deactivate Fabric on ArchLinux Fabric uses library paramiko, which is incompatible with Python 3.x. After fabric installed on ArchLinux with pip, when you run fab test , a \"cannot import name isMappingType\" error occurs. So we need install a Python 2.7, then install fabric based on it: pyenv install 2 . 7 . 8 pyenv shell 2 . 7 . 8 pip install fabric Now create a test fabfile.py: def test (): print ( \"hello world\" ) And run it: fab test . In a new shell, run fabric with pyenv shell 2.7.8; fab test .","tags":"Tech","url":"http://leetschau.github.io/manage-python-versions-with-pyenv.html","loc":"http://leetschau.github.io/manage-python-versions-with-pyenv.html"},{"title":"List All Possible Sort Result of a List","text":"The following Python codes gives all possible sort result of a list: def mysort ( data ) : if len ( data ) == 1 : return [ data ] res = [] tail = data . pop () all_sort = mysort ( data ) for one_sort in all_sort : for i in range ( 0 , len ( one_sort )) : res . append ( one_sort [: i ] + [ tail ] + one_sort [ i :] ) return res aa = [ 1 , 2 , 3 , 4 , 5 ] print ( mysort ( aa ))","tags":"Tech","url":"http://leetschau.github.io/list-all-possible-sort-result-of-a-list.html","loc":"http://leetschau.github.io/list-all-possible-sort-result-of-a-list.html"},{"title":"Build C Development Environment with VirtualBox","text":"Host: Win7, VM: CentOS 6.5 minimal VM setup setup network and share folders in Settings of VM. Network setup In settings of VM: the first NIC is host-only, second is bridged. Start VM, create /etc/sysconfig/network-scripts/ifcfg-eth1 based on ifcfg-eth0, the hardware address is from /etc/udev/rules/70-persistent.network; reboot; Install Guest Addons In VM: # yum update # yum install gcc # yum install kernel - devel # mount / dev / scd0 / media / cdrom # sh / media / VBOXADDITIONS_4 . 0 . 12 _72916 / VBoxLinuxAdditions . run Now you can visit share folders in /media/sf_ .","tags":"Tech","url":"http://leetschau.github.io/build-c-development-environment-with-virtualbox.html","loc":"http://leetschau.github.io/build-c-development-environment-with-virtualbox.html"},{"title":"VirtualBox on ArchLinux","text":"Follow VirtualBox on Arch Wiki . Install VirtualBox: pacman -S virtualbox virtualbox-host-modules qt4 ... ; Load VirtualBox kernel driver manually: modprobe vboxdrv ; Download \"VirtualBox 4.3.14 Oracle VM VirtualBox Extension Pack\" (file name: Oracle_VM_VirtualBox_Extension_Pack-4.3.14-95030.vbox-extpack) from its official website; Install it with root: vboxmanage extpack install Oracle_VM_VirtualBox_Extension_Pack-4.3.14-95030.vbox-extpack ; Start Virtualbox as user chad: VirtualBox ; Import VM template (Win7Office.ova), modify shared folder, start it. Ref: Installing VirtualBox extensions: error getting authority Download VirtualBox","tags":"Tech","url":"http://leetschau.github.io/virtualbox-on-archlinux.html","loc":"http://leetschau.github.io/virtualbox-on-archlinux.html"},{"title":"Edit fstab Manually to Monnt A Specific Partition","text":"On the old Mint OS, create a new partition with \"Disk\" tools, copy \"apps\", \"docs\", etc folders to the new partition; Login Arch OS as root; Get the UUID (and label) of the \"home\" partition with command blkid or lsblk -f ; Create user chad: useradd -m chad ; Modify /etc/fstab of the Arch OS, $ cat /etc/fstab ... UUID=... /home/chad ext4 ... 0 2 Reboot; You can specify section in fstab (the first column) with \"LABEL=...\" instead of \"UUID=...\". Use e2label /dev/sda1 <label> to set partition label. But using UUID is a more reliable way. Ref: Field definitions in fstab on Arch Wiki","tags":"Tech","url":"http://leetschau.github.io/edit-fstab-manually-to-monnt-a-specific-partition.html","loc":"http://leetschau.github.io/edit-fstab-manually-to-monnt-a-specific-partition.html"},{"title":"A Remote Execution Tool Without Installation","text":"The following is a question I want to post to StackOverflow.com: I am developing a environment detection tools, which gather information of many hosts and compare them with some standards. However it's not allowed to install anything on these hosts. So my plan is running some shell scripts remotely on these hosts via ssh, such as \"free\", \"df\", \"java -version\", etc. There are many tools for deployment automation, such as Salt, Puppet, CFEngine, etc. But they all need to install something all the client. I found Fabric meet my needs, but the function is a little limited. So my question is: Are there any remote execution tools without installation on client, like Fabric?","tags":"Tech","url":"http://leetschau.github.io/a-remote-execution-tool-without-installation.html","loc":"http://leetschau.github.io/a-remote-execution-tool-without-installation.html"},{"title":"Install ArchLinux as 2nd OS on Dell PC","text":"There has been an OS Mint 16 on the /dev/sda1 of the PC's disk. Now I need to install the 2nd OS, ArchLinux. First create a new partition, then install Arch on it. Install Network The ethernet card can't be detected (there is no enp... in output of ip addr ). So the first step is fix this problem. root @archiso # lspci - v ... 02 : 00.0 Ethernet controller : Broadcom Corporation NetLink BCM57780 Gigabit Ethernet PCIe ( rev 01 ) Subsystem : Dell Device 0400 Flags : fast devsel , IRQ 16 Memory at ... Capabilities : ... ... Capabilities : ... Kernel modules : tg3 root @archiso # dmesg | grep tg3 ... [ 3.129088 ] tg3 . c : v3 .136 ( Jan 03 , 2014 ) [ 3.137277 ] libphy : tg3 mdio bus : probed [ 3.137281 ] tg3 0000 : 02 : 00.0 : No PHY devices [ 3.137316 ] tg3 0000 : 02 : 00.0 : Problem fetching invariants of chip , aborting root @archiso # uname - a Linux archiso 3.15.3 - 1 - ARCH #1 SMP PREEMPT Tue Jul 1 07 : 34 : 20 CEST 2014 i686 GNU / Linux So I google \"kernel 3.15.3 tg3 bcm57780\" and got No Connection with BCM57780 After Installing and BCM57760 don't work with Arch for me : # rmmod broadcom # rmmod tg3 # modprobe broadcom # modprobe tg3 # systemctl stop dhcpcd . service // got the NIC name enp2s0 # dhcpcd enp2s0 # ping www . baidu . com Create Partition & Install System # fdisk / dev / sda m // for help p n ... // press < Enter > to accept default values Partition number ( 1 - 4 , default 3 ) : press < Enter > ... // press < Enter > to accept default values Last sector , ...: + 40 G // the volume of the new partition is 40 GB p // verify the new scheme w // write to disk Note the new partition is /dev/sda3. # mkfs . ext4 / dev / sda3 # mount / dev / sda3 / mnt # mkdir / mnt / home # mount / dev / sda1 / mnt / home # vi / etc / pacman . d / mirrorlist // only choose 163 and ustc , delete others # pacstrap - i / mnt base base - devel # genfstab - U - p / mnt >> / mnt / etc / fstab # arch - chroot / mnt / bin / bash # vi / etc / locale . gen # locale - gen # echo LANG = en_US . UTF - 8 > / etc / locale . conf # export LANG = en_US . UTF - 8 # ln - s / usr / share / zoneinfo / Hongkong / etc / localtime # hwclock -- systohc -- utc # echo pcserver > / etc / hostname # systemctl enable dhcpcd @ enp2s0 . service # passwd # exit # reboot Start system with Mint, and run update-grub as root. Then reboot, you get the \"Arch\" entry in Grub menu. Make Second the First OS Some days past, your Arch works well, and you think the first OS Mint 16 is no longer useful. So now we remove it and make Arch the only OS. # pacman - S grub # grub - install --target=i386-pc --recheck /dev/sda After this step, you can find folder \"/boot/grub/i386-pc\" is created. The \"stage 2\" file /boot/grub/i386-pc/core.img, which invoked by \"stage 1\" file boot.img in MBR during system boot procedure, is created as well. See GNU GRUB for details. # grub - mkconfig - o / boot / grub / grub . cfg Now reboot to verify the new grub works. If it is, you can format /dev/sda1 to remove Mint OS, then regenerate grub: # mkfs . ext4 / dev / sda1 # grub - install --target=i386-pc --recheck /dev/sda # grub - mkconfig - o / boot / grub / grub . cfg Reboot, that's it. If you want to resize this partition, you can remove then create it again: # fdisk / dev / sda d ... n ... If you delete /dev/sda1 without recreating it, an error will araise when regenerating grub.","tags":"Tech","url":"http://leetschau.github.io/install-archlinux-as-2nd-os-on-dell-pc.html","loc":"http://leetschau.github.io/install-archlinux-as-2nd-os-on-dell-pc.html"},{"title":"Share Files Between Linux Hosts with NFS","text":"Server # sudo apt - get install nfs - kernel - server nfs - common portmap # cat / etc / exports ... / home / chad / warez 10 . 32 . 1 . 6 ( ro , async , subtree_check ) # service nfs - kernel - server start Client # apt - get install nfs - common # cat / etc / hosts ... 10 . 32 . 1 . 154 laptop # mount laptop : / home / chad / warez / mnt / netshare Now you can read all files under /mnt/netshare, because the flag \"ro\" specified in /etc/exports on server host. Unmount it with umount /mnt/netshare .","tags":"Tech","url":"http://leetschau.github.io/share-files-between-linux-hosts-with-nfs.html","loc":"http://leetschau.github.io/share-files-between-linux-hosts-with-nfs.html"},{"title":"Install Hadoop with CDH on CentOS","text":"Define hostname on every node Add \"HOSTNAME=cloud60\" into file /etc/sysconfig/network on host 10.12.2.60. Then reboot system. Do this with it's own hostname on every node. Add host name to every node Add /etc/hosts to every node: 10 . 12 . 2 . 60 cloud60 10 . 12 . 2 . 61 cloud61 10 . 12 . 2 . 62 cloud62 10 . 12 . 2 . 63 cloud63 10 . 12 . 2 . 90 cloud90 10 . 12 . 2 . 91 cloud91 10 . 12 . 2 . 92 cloud92 10 . 12 . 2 . 93 cloud93 where 10.12.2.60 is the manager node (where the cloudera manager is installed). Local Repository Copy DVD iso file to manager node, mount it. Create a link of /mnt/cdrom to /var/www/html with httpd: # mkdir / mnt / cdrom # mount - o loop / path / to / CentOS6 . 3 - DVD . iso / mnt / cdrom # cd / var / www / html # ln - s / mnt / cdrom cdrom Then add file cdrom.repo under /etc/yum.repos.d/: [cdrom] name = CDROM baseurl = http://10.12.2.60/cdrom/ gpgcheck = 0 Other notes Add user \"boco\" to \"sudoers\" on all nodes: add \"boco ALL=(ALL) NOPASSWD: ALL\" to /etc/sudoers; The manager node can ssh to any other node with no password (ssh-copy-id ...); SSH from normal node to manager node to remove \"are you sure you want to continue connecting (yes/no)?\" prompt; Shutdown iptables on all nodes: service iptables stop and chkconfig iptables off ;","tags":"Tech","url":"http://leetschau.github.io/install-hadoop-with-cdh-on-centos.html","loc":"http://leetschau.github.io/install-hadoop-with-cdh-on-centos.html"},{"title":"Reset Forgotten Password in Linux","text":"CentOS When system booting, press Space bar to interrupt the GRUB process; Press \"a\" and ; When see \"rhgb quiet\", add \" 1\" after \"quiet\" and press ; Now CentOS boot in single user mode, you login as root, use passwd to reset password. Mint When system booting to the GRUB 2 menu, select the system entry you want to recover, press \"e\"; In the start script, find the line \"linux ... ro quiet splash $vt_handoff\"; Modify \"ro\" to the end of line to \"rw init=/bin/bash\"; Press Ctrl-x to continue system start; Now you are in root shell, reset root password with passwd ; Press Ctrl-Alt-Del to restart machine; Verified on Linux Mint 17. Ref: Reset forgotten/lost main user password in Linux Mint 12+","tags":"Tech","url":"http://leetschau.github.io/reset-forgotten-password-in-linux.html","loc":"http://leetschau.github.io/reset-forgotten-password-in-linux.html"},{"title":"Fix NIC Name of Cloned CentOS VMs","text":"Sometimes the NIC name in output of ip addr or ifconfig is not the same with that defined in /etc/sysconfig/network-scripts/ifcfg-eth0, for example, in ifcfg-eth0, the first line is: DEVICE = \"eth0\" but the output of ip addr is: 2 : eth1 : < BROADCAST ... This is because the source of ip addr is /etc/udev/rules.d/70-persistent-net.rules. Edit this file to correct the NIC name. The total step to fix network of a centos VM is: vi /etc/sysconfig/network // fix hostname and gateway IP vi /etc/sysconfig/network-scripts/ifcfg-eth0 // fix NIC name, host IP and netmask vi /etc/udev/rules.d/70-persistent-net.rules // NIC name and hardware address should be the same with that in file ifcfg-eth0 reboot Update 2014-9-19 The MAC address is determined by ifconfig -a , so copy IP address after \"HWaddr\" in command output, and modify \"HWADDR\" in /etc/.../ifcfg-eth0, then sudo service network restart .","tags":"Tech","url":"http://leetschau.github.io/fix-nic-name-of-cloned-centos-vms.html","loc":"http://leetschau.github.io/fix-nic-name-of-cloned-centos-vms.html"},{"title":"Linux发行版的更新方式","text":"之前一直以为Mint 14像Windows一样，过期之后还可以一直用，后来发现Linux和Windows的一个很大的不同，就是由于Linux是通过Repo安装和更新软件的，所以一旦发行版制作者不再维护这个版本，就会把该版本的Packages从Repo中移除，比如Mint 14是今年（2014年）5月份生命周期结束的(End of Life, EOL)，之后除非下载deb包安装，否则用\"apt-get update\"和\"apt-get install ...\"都会报错，因为Repo中已经没有Nadia和Quantal的目录了，手工升级的方法是： 到/etc/apt/source.list中的地址看看哪些版本还在，比如在http://mirrors.ustc.edu.cn/ubuntu/dists/ , http://security.ubuntu.com/ubuntu/dists/ 和 http://archive.ubuntu.com/ubuntu/dists/ 下面可以看到，比Nadia高的有saucy和trusty两个版本，因为saucy距离nadia比较近，升级成功的可能性大，所以我们先升级到saucy，由于这个版本马上也要到期了，我们在升级完后可以再次升级到trusty，就可以用到2019年4月了； 确定了升级的目标版本，把/etc/apt/source.list中的nadia都该为petra，quantal改为saucy，参考 Linux Mint Releases 确定Mint的对应版本代码； sudo apt-get update ，如果出现错误，修复之，比如出现了一个PuppetLab更新错误，是由于之前曾把puppetlabs的ppa加入进来了，运行 rm sources.list.d/puppetlabs.list 删除之，重新apt-get update，直到没有错误为止； sudo apt-get dist-upgrade , 这一步很慢，比如nadia升价到petra下载了2GB多安装包，所以网络一定要够快，否则就只能整夜下载了；安装过程中会询问是否更新版本号，我认为还是更新好，否则真实的版本与/etc/issue和lsb_release的结果不符会造成困惑；下载完成后的安装也很慢，整个升级过程大约2小时左右（网速大约1MB/s），远比用新的Live盘安装慢多了，而且如果版本间间隔大，还存在升级失败的风险，所以还是应该把/home做到一个单独的分区上，然后用目标版本的Live盘安装新系统，如果只能用apt升级的方法，建议找一本有意思的书，守在电脑旁，因为升级过程中时不时会要求用户决定使用哪个配置文件（这次升级过程中我所有的项目都输入Y，即使用新版本的配置文件），所以无法做到完全自动化； sudo apt-get upgrade ; reboot ; 验证： lsb_release -a ; 整个执行过程可以通过ssh登录到服务器上运程执行； 重启后登录屏幕是黑屏，但SSH能够正常登录，貌似是Linux Mint的登录管理器MDM出了问题，卸载了相关的两个模块： # dpkg - P mdm # dpkg - P mint - mdm - themes 重启后变为字符登录界面，登录后运行 startxfce4 可以启动xfce环境。 一个收获是升级后RabbitVCS可以用了； Debian的更新方法类似，也是先改source.list，然后\"apt-get dist-upgrade\"； CentOS不同，小版本之间的升级用\"yum update\"就搞定了，大版本之间只能用重装的方法升级； ArchLinux属于纯正的rolling release，没有版本的概念，好处是不需要大升级，坏处是有时更近之后系统会起不来；","tags":"Tech","url":"http://leetschau.github.io/linuxfa-xing-ban-de-geng-xin-fang-shi.html","loc":"http://leetschau.github.io/linuxfa-xing-ban-de-geng-xin-fang-shi.html"},{"title":"Build Multiple OS on A Host","text":"Rearrange Disk Partitions Start computer with gparted LiveCD and start GParted. The data partition is \"/dev/sda1\". Use \"Resize/Move\" to move /dev/sda1 partition to the end of the disk, before the swap partition. Shrink 928GB to 295GB, where 87GB are used. It took about 5 hours. You can only shrink the partition without moving them to the end, which will be faster than the previous \"shrink + move\" method. Right click /dev/sda1 -> Manage Flags, uncheck the \"boot\" flag. Create a new 50GB partition /dev/sda3 with EXT4 format, label it as \"system1\" and quit GParted; Start computer with new system (Mint 17 64bit here) LiveCD; Install Mint, select \"Something else\" when asked for \"Installation type\"; Select /dev/sda3, click \"change\", then choose \"Ext4 journaling file system\" in \"Use as\", then choose \"/\" as the \"Mount point\", set /dev/sda1 mounted at /home and the old swap partition as swap; Install the system, then reboot; Transfer old data The old partition is mounted on /home, so the old home folder is now /home/home/chad. So we need: Move sub-folders of /home/home/chad to /home/chad; After some days when it's sure all data have been transfered, delete all folders and files under /home except \"chad\" (new $HOME folder); Now on /dev/sda3, there is only one folder \"chad\". When install the second system, just mount /dev/sda3 to /home, everything will be ok. Supported methods for disk partition management Start \"Terminal\" on LiveCD. Detect disk: gdisk /dev/sda , notice your detection target is the whole disk instead of a partition, so \"sda\" can't be written as \"sda1\", or there will no MBR be found. Backup MBR: sfdisk -d /dev/sda > parts.txt , you can recover MBR with sfdisk /dev/sda < backup-sda.sfdisk , or with \"dd\" command: Backup: # dd if=/dev/sda of=/backup/mbr_sda.bak bs=512 count=1 Restore: # dd if=/backup/mbr_sda.bak of=/dev/hda bs=512 count=1 Install the Second OS Backup MBR and grub.cfg: Install centOS 6.5 Minimal with USB stick; Choose \"Create Custom Layout\", create a new partititon, mounted at /, and mount sdb1 as /home; Uncheck \"Install boot loader on /dev/sdb\"; Reboot system. There is no change in boot menu, startup origin system (Mint 17), run update-grub with root. Reboot, you can see the CentOS is in boot menu. Note: If you don't want an OS in your boot menu, rename its \"boot\" folder as \"boot.old\" (or anything else). Ref: How to Move Your Home Folder to Another Partition Google: Linux系统启动过程 Linux系统启动过程 6 Stages of Linux Boot Process (Startup Sequence) How To Backup & Restore Master Boot Record (MBR) In Linux Linux: Copy Master Boot Record (MBR) Manpage of sfdisk. Boot loader Grub: how to repair, adapt or remove it","tags":"Tech","url":"http://leetschau.github.io/build-multiple-os-on-a-host.html","loc":"http://leetschau.github.io/build-multiple-os-on-a-host.html"},{"title":"Build Working Environment on CentOS Minimal","text":"System Install CentOS with CentOS-6.5-i386-minimal.iso; Choose \"Install system with basic video driver\"; Network After Installation, login as root, modify \"NM_CONTROLLED\" to \"no\" and \"ONBOOT\" to \"yes\", and \"BOOTPROTO\" to \"dhcp\" in file /etc/sysconfig/network-scripts/ifcfg-eth0; run service network restart , verify network with ip addr and ping www.baidu.com ; Desktop Environment Install epel repository: on x84_64 host: # rpm - Uvh http : // dl . fedoraproject . org / pub / epel / 6 / x86_64 / epel - release - 6 - 8 . noarch . rpm Instead \"x86_64\" above with \"i386\" on x86 (32bit) host. # yum update # yum groupinstall Xfce Fonts # useradd - m chad Reboot and login as chad, run startxfce4 and the Desktop Environment start (you can't run this command when you switch from another user via \"su\"). Other # yum install git zsh tmux # yum install rabbitvcs - thunar rabbitvcs - cli // a tortoise - svn like subversion & git client , start repo browser with ` rabbitvcs browser ` or right - click in a thunar window Define Shortcuts Alt-F2 -> xfce4-appfinder -> keyboard -> Application Shortcuts -> Add: Command: xfce4-appfinder; ShortCut: Alt-[","tags":"Tech","url":"http://leetschau.github.io/build-working-environment-on-centos-minimal.html","loc":"http://leetschau.github.io/build-working-environment-on-centos-minimal.html"},{"title":"RabbitVCS Notes","text":"ArchLinux Get dependencies: search \"rabbitvcs\" on AUR, and the \"Dependencies\" of it contains: git pygtk python2 - configobj python2 - dulwich python2 - gobject2 python2 - gtkspellcheck python2 - pysvn python2 - simplejson Install rabbitvcs: yaourt -S git pygtk python2-configobj python2-dulwich python2-gobject2 python2-gtkspellcheck python2-pysvn python2-simplejson rabbitvcs If any errors occurs during the installation, use yaourt to install it. Ubuntu Unity sudo add - apt - repository ppa : rabbitvcs / ppa && sudo apt - get update sudo apt - get install rabbitvcs - core rabbitvcs - nautilus rabbitvcs - cli","tags":"Tech","url":"http://leetschau.github.io/rabbitvcs-notes.html","loc":"http://leetschau.github.io/rabbitvcs-notes.html"},{"title":"Fix Repository Update Failure Due to PGP Signature","text":"Scenario: [ chad@blackpad rabbitvcs ] $ sudo pacman - Syu │·············· error : GPGME error : No data │·············· error : GPGME error : No data │·············· error : GPGME error : No data │·············· :: Synchronizing package databases ... │·············· error : GPGME error : No data ... Solutions: # rm / var / lib / pacman / sync /*db.sig* # pacman-key --init # pacman-key --populate archlinux # pacman -Syy # pacman -Syu If \"File ... is corrupted (invalid or corrupted package (PGP signature))\" occured during install a package, when pacman asked \"Do you want to delete it? (Y/n)\", press to delete the file, then run \"pacman -S ...\" again to reinstall it. I fixed these errors today.","tags":"Tech","url":"http://leetschau.github.io/fix-repository-update-failure-due-to-pgp-signature.html","loc":"http://leetschau.github.io/fix-repository-update-failure-due-to-pgp-signature.html"},{"title":"Yaourt Notes","text":"Yaourt is a community-contributed wrapper for pacman which adds seamless access to the AUR, allowing and automating package compilation and installation from your choice of the thousands of PKGBUILDs in the AUR, in addition to the many thousands of available Arch Linux binary packages. Install $ sudo pacman -S --needed base-devel // download package-query package from AUR to ~/Downlaods manually $ cd ~/Downloads $ tar zxvf package-query.tar.gz $ cd package-query $ makepkg $ sudo pacman -U package-query-1.4-1-i686.pkg.tar.xz // download yaourt package from AUR to ~/Downlaods manually $ tar zxvf yaourt.tar.gz $ cd yaourt $ makepkg $ sudo pacman -U yaourt-1.5-1-any.pkg.tar.xz Usage Sync with repo: yaourt -Syua ; Query package: yaourt -Ss customizepkg ; Install package: yaourt -S customizepkg ; Query local installed packages: yaourt -Q package-query ; Remove package: yaourt -R customizepkg See yaourt --help for details.","tags":"Tech","url":"http://leetschau.github.io/yaourt-notes.html","loc":"http://leetschau.github.io/yaourt-notes.html"},{"title":"Add Xfce Desktop Environment for ArchLinux","text":"After install ArchLinux and awesome, in console, run following as root: pacman - S xfce4 xfce4 - goodies variety networkmanager network - manager - applet xfce4 - notifyd gnome - keyring systemctl enable NetworkManager systemctl start NetworkManager Without gnome-keyring, you can find wireless hot-point, but you will disconnecting from it immediately. Add \"exec startxfce4\" in ~/.xinitrc. Then run \"startx\" in console. Dell PC Video You need install video drivers and fonts for this DELL PC. Firstly, use lspci|grep VGA to get video driver information, for example, for \"Intel Corporation 4 Series Chipset Integrated Graphics Controller\", you need to install \"xf86-video-intel\", see Intel Graphics on Arch Wiki . Font Use \"dajavu\" to make font in Xfce desktop nicer, the second make system display Chinese character properly. pacman - S ttf - dejavu adobe - source - han - sans - otc - fonts // or adobe - source - han - sans - cn - fonts for only Chinese character pacman - S ttf - ubuntu - font - family // good - looking fonts for Variety : Ubuntu Condensed Time # timedatectl status # timedatectl list - timezones # timedatectl set - timezone Asia / Hong_Kong Web browser # pacman - S firefox // chromium can ' t display Chinese character properly Other # pacman - S git openssh Input Method # pacman - S fcitx - im fcitx - configtool fcitx - googlepinyin fcitx - libpinyin Search \"archlinux fcitx\" on Arch Wiki for installation details. For now fcitx is much better than ibus. # pacman - S ibus - libpinyin # su - chad $ ibus - setup Then select \"Chinese - Intelligent Pinyin\" under \"Input Method\" tab, and click \"Preferences\" to customize it. The package \"ibus-sunpinyin\" is OK, too. \"ibus-pinyin\" can't work properly. \"ibus-rime\" can only input traditional Chinese. Ref: Xfce Installation on ArchWiki NetworkManager on ArchWiki","tags":"Tech","url":"http://leetschau.github.io/add-xfce-desktop-environment-for-archlinux.html","loc":"http://leetschau.github.io/add-xfce-desktop-environment-for-archlinux.html"},{"title":"Hello R Language Notes","text":"Install On Archlinux $ sudo pacman -Syu r $ yaourt -S rstudio-desktop-bin Usage In REPL $ R > ints = 1 :100 > doubleInts = sapply ( ints, function ( x ) 2 *x ) > head ( doubleInts ) [ 1 ] 2 4 6 8 10 12 > quit () Run R Script $ cat r-ex ints = 1 :100 doubleInts = sapply ( ints, function ( x ) 2 *x ) head ( doubleInts ) $ Rscript r-ex [ 1 ] 2 4 6 8 10 12 Run with RStudio Start RStudio with rstudio-bin , then input commands like in normal REPL.","tags":"Tech","url":"http://leetschau.github.io/hello-r-language-notes.html","loc":"http://leetschau.github.io/hello-r-language-notes.html"},{"title":"Windows and CentOS Dual Boot on PC","text":"Install Windows 7; Install CentOS 6.4, choose \"Basic Storage Devices -> ... -> Create Custom Layout\", delete extended partition, create a root partition and a swap partition for CentOS; Verify the startup list; After installation of CentOS, login the system, you can edit /boot/grub/menu.lst to modify defaut startup system, default timeout, etc. During system startup, press up/down key before countdown over to activate the system boot menu to choose Windows or CentOS for startup. That's it.","tags":"Tech","url":"http://leetschau.github.io/windows-and-centos-dual-boot-on-pc.html","loc":"http://leetschau.github.io/windows-and-centos-dual-boot-on-pc.html"},{"title":"Fix Only Root Can Login on ArchLinux","text":"After a new installation of ArchLinux, I created a user \"chad\", and set his password via command passwd. But when the system start, I can only login as root. If I login as chad, it complains the password is incorrect, which it IS correct. Through some search on Internet, I realize it's maybe caused by wrong path of initial shell of chad. So I re-define his initial shell via root: chsh - s / bin / bash chad Now everything is OK. To avoid this problem, run useradd -D . If the path of \"SHELL\" is \"/bin/bash\", then you can use \"useradd -m chad\" to create user. If you create user with useradd -s /usr/bin/bash -m chad , chad can't login, because the path of bash can only be \"/bin/bash\".","tags":"Tech","url":"http://leetschau.github.io/fix-only-root-can-login-on-archlinux.html","loc":"http://leetschau.github.io/fix-only-root-can-login-on-archlinux.html"},{"title":"Connect Internet via Wired Network for Arch Linux","text":"After start up Arch Linux host, plugin the ethernet cable, the lights of network interface card is off. Now run command ip link set enp0s25 up the lights will turned on. Then run dhcpcd enp0s25 Now the host will get a IP. If you can ping 8.8.8.8 (which is google's dns server), but not www.baidu.com, you have to assign a valid DNS provider. Using OpenDNS is a safe solution. So add the following lines into /etc/resolv.conf: nameserver 208 . 67 . 222 . 222 nameserver 208 . 67 . 220 . 220","tags":"Tech","url":"http://leetschau.github.io/connect-internet-via-wired-network-for-arch-linux.html","loc":"http://leetschau.github.io/connect-internet-via-wired-network-for-arch-linux.html"},{"title":"Import Apache Subversion Repositories into VisualSVN","text":"wait","tags":"Tech","url":"http://leetschau.github.io/import-apache-subversion-repositories-into-visualsvn.html","loc":"http://leetschau.github.io/import-apache-subversion-repositories-into-visualsvn.html"},{"title":"Wallpaper Changer for Linux Mint","text":"Today I try to use Wallch as alternative for Variety , but it's hard to install and config. So I switch back to Variety. In Preferences of Variety -> Effects -> Clock, you can add a desktop clock using Variety. So conky is no longer needed. The default position of this clock is \"SouthEast\", you can modify it in ~/.config/variety/variety.conf. If you modify \"gravity\" paramater in \"clock_filter\" to \"NorthEast\", the clock will be placed in higher right corner. See full description of customization of this clock in Configuring the Clock . On Ubuntu 14.04 Unity desktop, I choose \"Dejavu Sans Mono 70\" for clock font, and \"汉仪楷体 24\" or \"\" for date font.","tags":"Tech","url":"http://leetschau.github.io/wallpaper-changer-for-linux-mint.html","loc":"http://leetschau.github.io/wallpaper-changer-for-linux-mint.html"},{"title":"Guake as Terminal Emulator on Linux Mint Xfce 14","text":"You can use F12 to call or hide Guake . Install sudo apt - get install guake If you use guake in Awesome, you can activate/deactivate the guake window with \"Win + Enter\" as well as F12.","tags":"Tech","url":"http://leetschau.github.io/guake-as-terminal-emulator-on-linux-mint-xfce-14.html","loc":"http://leetschau.github.io/guake-as-terminal-emulator-on-linux-mint-xfce-14.html"},{"title":"Build Technical Blog Website from dsnote","text":"GitBook Login to GitBook , create a book. Clone to local, modify (all markdown files), push. That's it! But now it's unstable. Some notes can't be converted. The build ofen fails. Octopress Install Ref: Octopress Setup . sudo apt - get update curl - L https : // get . rvm . io | bash - s stable --ruby rvm install 2 . 2 rvm rubygems latest Then install nvm, here I use node.js v6.9.1. cd ~/ apps git clone git : // github . com / imathis / octopress . git octopress cd octopress gem install bundler bundle install rake install Note1: Do NOT use ruby 2.1.1, it can't install bundler, while ruby 2.1.2 is OK. Note2: Ruby 1.9.3 in pre-installed on Ubuntu 14.04. An \"Permission denied\" error occurs when gem install bundler . You have to rvm install 2.1.2 to build a non-root ruby environment to install bundler. Note3: If bundle install runs slow or stucked (in common case it takes less than 5s for installing a component), cancel it with Ctrl-C and rerun this command. Usage Setup First create a new repo named \" .github.io\" on GitHub , \"leetschau.github.io\" for example. Then build the blog website framework: rake setup_github_pages . When asked for the repository URL, provide the SSH one for convenient. Configuration Modify _config.yml to customize blog's title, subtitle, author and blog descriptions. Under \"3rd Party Settings\", set \"github_user\" as \" \". Post new blog Run the following command to create a new post, and edit post content: rake new_post [ \"Hello World\" ] vi source / _posts / 2014 - 08 - 18 - hello - world . markdown Preview blog website Run the following command to generate new post and preview them: rake generate rake watch // optional rake preview If it complains no javascript rumtime found, run nvm use 0.10 , where version number \"0.10\" is determined by nvm list . Now preview with url \"http://localhost:4000\". Deploy to Github Run generate and deploy tasks: rake generate If it complains no javascript rumtime found, run nvm use 0.10 . rake deploy You need provide username (without @gmail.com) and password of your github account. If you use a new octopress, but deploy to an existing github blog, you'll encounter a push failure when rake deploy . Go to $OCTOPRESS_HOME/_deploy and run: git pull origin master git add - A git ci - m \"merge conflict manually\" Run rake deploy again in $OCTOPRESS_HOME, your blogs should be synchronized to github. There are many other Static site generators . Some based on Python such as Pelican looks lighter than Octopress.","tags":"Tech","url":"http://leetschau.github.io/build-technical-blog-website-from-dsnote.html","loc":"http://leetschau.github.io/build-technical-blog-website-from-dsnote.html"},{"title":"Add Security Mark for Many Excel Files","text":"Build macro for batch manipulate Excel Files Now I have to add a security mark for many many excel files. I use the following the following VBA codes to achieve this. Run Excel 2010, save the new blank file as \"Excel Macro-Enabled Workbook\", named \"AddMark.xlsm\" (via [File -> Save as]); Open \"Developer\" ribbon: [File -> Options -> Customize ribbon], check \"Developer\" in right panel, press \"OK\" to close the dialog, you can see \"Developer\" ribbon now; In \"developer\" ribbon, click \"Visual Basic\" to open the VBA IDE (or use shortcut \"Alt-F11\"); In visual basic IDE, add \"Microsoft Scripting Run-time\" and \"Microsoft Scriptlet Library\" in [Tools -> References] of main menu; Add the following codes to [VBAProject -> Microsoft Excel Objects -> This Workbook]: Option Explicit Sub InsertMark2Excels() Dim fso As New FileSystemObject Dim folder As Object Set folder = fso.GetFolder(ActiveWorkbook.Path) LoopFolder folder Call WriteLog(\"Creation Date: \" & Now) Call WriteLog(\"Log over.\") End Sub Sub LoopFolder(FF As Scripting.folder) Dim F As Scripting.File Dim SubF As Scripting.folder Dim fso As New FileSystemObject For Each F In FF.Files Dim fext As String fext = fso.GetExtensionName(F) If fext = \"xls\" Or fext = \"xlsx\" Then InsertMark F.Path End If Next F For Each SubF In FF.SubFolders LoopFolder SubF Next SubF End Sub Sub InsertMark(target As String) Workbooks.Open target ActiveWorkbook.Sheets(1).Activate ActiveWorkbook.Sheets(1).Rows(\"1:1\").Select Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove Range(\"A1\").Select ActiveCell.FormulaR1C1 = \"保密\" ActiveWorkbook.Save ActiveWorkbook.Close Call WriteLog(\"Insert mark to \" & target) End Sub Sub WriteLog(log As String) Open ActiveWorkbook.Path & \"\\insertmark.log\" For Append As #1 Print #1, log Close #1 End Sub Add shortcut for macro \"InsertMark2Excels\": in ribbon Developer -> Macro, then click \"Options\", assign Ctrl-d to this macro; Now you can copy AddMark.xlsm to another host, open this file, press Ctrl-d to run the macro. Open Office Macro in LibreOffice Open xlsm file with LibreOffice Calc, or simply thunar filename.xlsm ; Tools -> Macros -> Organize Macros -> LibreOffice Basic, select [AddMark.xlsm -> VBA Project -> Document Objects -> ThisWorkbook] in \"Macro from\", then select a macro in \"Existing macros\", then click \"Edit\" button.","tags":"Tech","url":"http://leetschau.github.io/add-security-mark-for-many-excel-files.html","loc":"http://leetschau.github.io/add-security-mark-for-many-excel-files.html"},{"title":"Manipulate Word and Excel Files in a Folder","text":"Ref: 21. VBA Tips - List Files In A Folder","tags":"Tech","url":"http://leetschau.github.io/manipulate-word-and-excel-files-in-a-folder.html","loc":"http://leetschau.github.io/manipulate-word-and-excel-files-in-a-folder.html"},{"title":"Convert Markdown Files to PDF Files on Linux","text":"Use pandoc to convert a markdown file to MS Word file on Linux system: sudo apt - get install pandoc pandoc input . md - o output . docx To convert it to pdf file, you have to install texlive first: sudo apt - get install texlive // this is a big package , 281 MB to download sudo apt - get install texlive - xetex lmodern etoolbox pandoc MyResume . md - o Resume . pdf --latex-engine=xelatex -V mainfont='WenQuanYi Micro Hei' Get all installed fonts with fc-list on Linux Mint. Note1: If there no Unicode characters (such as Chinese characters) in the markdown file, use 'DejaVu Sans Mono' instead of WenQuanYi, much better than the latter. Note2: pandoc myresume.md -s -o test1.pdf met \"Error producing PDF from TeX source. ! Package inputenc Error...\" on Linux Mint 17, i3wm. Note3: The page margin of the default pdf file is too large. Don't know how to set margin yet. Note4: The wkhtmltopdf can't convert hyperlinks in html to pdf files properly. So this is not a valid options. To convert a resume file (markdown) to html: $ pandoc myresume.md -f markdown -t html -s -o resume.html or simply \"pandoc myresume.md -s -o resume.html\", the \"-s\" option is necessary, or Chinese characters will be massed up. The personal information section (name, address, email, mobiles, etc) is left-aligned, while they should be centered. However there isn't \"centering\" format in markdown, so I have to add this format manually in created html files: $ vi resume.html // add \" <DIV ALIGN= CENTER > \" before the centering section // add \" </DIV> \" after the centering section","tags":"Tech","url":"http://leetschau.github.io/convert-markdown-files-to-pdf-files-on-linux.html","loc":"http://leetschau.github.io/convert-markdown-files-to-pdf-files-on-linux.html"},{"title":"Get Overall CPU Usage on Linux","text":"Run the following command to get the overall CPU usage from command line: top - bn2 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* *id.*/\\1/\" | awk '{print 100 - $1 \"%\"}' | sed - n 2 p You can see the result is extracted from \"top\" command. You can study this command section by section. The first step is top -bn2 , which print 2 frame of \"top\" command to console instead of to curses window. Here we use \"-bn2\" instead of \"-bn1\" is because the first ouput is always inaccurate. See comments in How to get overall CPU Usage (e.g. 57%) on Linux for details. The second step is top -bn2|grep \"Cpu(s)\" , the 3rd step is top -bn2|grep \"Cpu(s)\"|sed \"s/.*, *\\([0-9.]*\\)%* *id.*/\\1/\" , etc.","tags":"Tech","url":"http://leetschau.github.io/get-overall-cpu-usage-on-linux.html","loc":"http://leetschau.github.io/get-overall-cpu-usage-on-linux.html"},{"title":"Virtual Windows on Xpra","text":"I want run a virtual machine (Windows 7 system, named \"Win7Office\") on a remote PC (10.32.1.81). Modify VM config Start VirtualBox GUI (locally via physical monitor and keyboard connected with host 81, or via VNC). Check \"Auto-resize Guest Display\" in vm's Settings -> View menu. Then start Win7Office, verify if vm run properly. Once OK, close this vm. Use VM remotely On client, run following commands: ssh 81 xpra start : 111 -- start - child = \" VBoxManage startvm Win7Office \" exit xpra attach ssh : 81 : 111 Once done, use xpra detach ssh:81:111 to detach from this VM.","tags":"Tech","url":"http://leetschau.github.io/virtual-windows-on-xpra.html","loc":"http://leetschau.github.io/virtual-windows-on-xpra.html"},{"title":"CoLinux  Failed on Windows","text":"I downloaded coLinux-0.7.9.exe, installed it, then run command: cd c : \\ Program Files \\ coLinux ; colinux - daemon . exe @example . conf The computer restart. So I uninstalled CoLinux.","tags":"Tech","url":"http://leetschau.github.io/colinux-failed-on-windows.html","loc":"http://leetschau.github.io/colinux-failed-on-windows.html"},{"title":"Customize Vim Statusline","text":"Here vim-airline/vim-airline (formerly \"bling/vim-airline\") is used to customize vim's statusline. Install with Vundle Add the following lines into ~/.vimrc: Plugin 'vim-airline/vim-airline' Plugin 'vim-airline/vim-airline-themes' Customize Statusline Add the following 2 lines to ~/.vimrc: set laststatus = 2 let g : airline_theme = 'badwolf' Discussion List all availale themes with: ls ~/ . vim / bundle / vim - airline - themes / autoload / airline / themes Use :AirlineTheme dark to apply theme \"dark\" on the fly in vim. To add full path to vim's statusline, add this into .vimrc: let g : airline_section_c = '%F' See :h laststatus for the meaning of \"laststatus\". See \"CUSTOMIZATION\" section of :h airline for the meaning of every section and its default contents. See :h statusline for the meaning of \"%F\" and the name of all statusline items.","tags":"Tech","url":"http://leetschau.github.io/customize-vim-statusline.html","loc":"http://leetschau.github.io/customize-vim-statusline.html"},{"title":"Run GUI Application on Remote Linux Server","text":"SSH X-Forwarding X 是 Linux 的图形显示服务，基于 Client/Server 架构，因此可以方便地实现 远程图形应用显示，其原理是一个图形应用（例如火狐浏览器）是一个 X client， 当这个 client 连接本机上的 X server，并在本地图形界面上显示时， 就是我们绝大多数情况下使用图形界面应用的场景。 当 client 连接远程的 server 时，就可以在远程图形界面上显示。 在 SSH X-Forwarding 场景中，我们首先通过 SSH 登录远程服务器， 启动服务器上的图形应用，但指定它的 X server 为我们本地的显示界面， 就实现了远程启动 GUI 应用的目标。 在笔记本上执行 ssh -X <host_name> 登录到服务器上后，如果 echo $DISPLAY 返回空值，就不能显示服务器上的 GUI 程序，解决方法： SSH登录前先设置本机 DISPLAY 变量： export DISPLAY = 127 . 0 . 0 . 1 : 0 ssh - X < host_name > 如果登录后仍然没有 DISPLAY ，说明 SSH 客户端没有 X 系统， 如果使用 Windows 系统，可以用 Moba Xterm 作为 SSH client。 DISPLAY 命名格式 hostname:X.Y 其中 hostname 可以是IP地址， X 表示一个 输入/输出 群组序号，从0开始， 由一个键盘以及一个或者多个显示器组成， Y 表示群组 X 中显示器的序号， 也是从0开始。 在服务器上后执行 who -a 命令 xrdp On Ubuntu/Mint server, run: sudo apt install xrdp openbox obconf ttf - wqy - microhei ttf - wqy - zenhei xfonts - wqy On Windows laptop, start a remote desktop , use your Linux system user account as the login username/password in remote desktop . After connected, you login to the openbox environment. Use right click to start terminal, browser, or quit the openbox environment. You can also move, maximize, minimize, resize the window like in other desktop environment. And use Alt-tab to loop focus between all the windows. OpenBox have not a built-in taskbar. You can install fbpanel or lxpanel for a simple taskbar. xpra Install: apt-get install xpra ; I want to run Thunderbird on host 10.32.1.81: ssh chad @10.32.1.81 xpra start : 100 -- start - child = thunderbird xpra attach ssh : 10.32.1.81 : 100 Now Thunderbird window appears. You can use \"Attach\" to add attachment from the disk of remote server, which means all GUIs from the \"root\" GUI can be accessed remotely. When it's done, press \"Ctrl-c\" in the terminal window to close Thunderbird window. Do not click \"close\" button, it will kill the Thunderbird window in DISPLAY 100, and you can't visit it any more. If you want visit this window later: ssh chad @10.32.1.81 xpra list // so you get the $DISPLAY number 100 xpra attach ssh : 10.32.1.81 : 100 // run this command in AppFinder (Alt-F2) instead of terminal xpra detach ssh : 81 : 100 // run this command in AppFinder (Alt-F2) instead of terminal If you want clear all: ssh chad @10.32.1.81 xpra stop : 100 // run this command on remote server If you want to attach to a xpra server on localhost, run xpra attach :100 ; Add a SSH alias for convenience: Add 81 as alias of \"chad@10.32.1.81\" in ~/.ssh/config. Then you can use xpra in the following way: ssh 81 xpra start : 111 --start-child=gedit xpra attach ssh : 81 : 111 ssh 81 xpra list ssh 81 xpra stop : 111","tags":"Tech","url":"http://leetschau.github.io/run-gui-application-on-remote-linux-server.html","loc":"http://leetschau.github.io/run-gui-application-on-remote-linux-server.html"},{"title":"Dual Monitors on Linux","text":"Connect VGA cable to laptop; List all monitors' name: xrandr -q , or ls /sys/class/drm/ when \"-q\" doesn't work. Open this monitor: xrandr --output VGA1 --auto , now there should be same output on VGA1 and laptop screen; Put screen of laptop (LVDS1) under the screen of 19 inches monitor (VGA1): xrandr --output LVDS1 --below VGA1 --auto . If the external monitor connected via HDMI (named 'HDMI1') is at the right side of laptop's screen (eDP1), to open laptop's screen, run xrandr --output eDP1 --left-of HDMI1 --auto . To open the external monitor's screen, run xrandr --output HDMI1 --auto --left-of eDP1 . Move an i3 workspace to monitor VGA1: i3-msg move workspace to output VGA1 , use any monitor name instead of \"VGA1\". Use a i3 shortcut instead of command to move workspace between monitors: add the following codes into ~/.i3/config # move workspace to left / right screen bindsym $ mod + Shift + Left move workspace to output left bindsym $ mod + Shift + Right move workspace to output right bindsym $ mod + Shift + Up move workspace to output up bindsym $ mod + Shift + Down move workspace to output down Close a monitor: xrandr --output VGA1 --off ; These settings worked both on Xfce and i3 wm .","tags":"Tech","url":"http://leetschau.github.io/dual-monitors-on-linux.html","loc":"http://leetschau.github.io/dual-monitors-on-linux.html"},{"title":"Virtual BVT System","text":"Prerequisites The host server of the environment is 10.0.2.47; Install vagrant on server 47; Add vagrant box of precise x86_64: vagrant box add ... ; Create a directory named \"bvt-package\" under ~/warez, which contains: apache-ant-1.9.3-bin.tar.bz2 cobertura.jar hamcrest-core-1.3.jar jdk-6u45-linux-x64.bin jenkins-1.544.war junit-4.8.1.jar sonar-3.6.1.zip svn_amd64_ubuntu12.04 libapr1_1.4.6-1_amd64.deb libaprutil1_1.3.12+dfsg-3_amd64.deb libdb4.8_4.8.30-11ubuntu1_amd64.deb libneon27-gnutls_0.29.6-1_amd64.deb libsvn1_1.6.17dfsg-3ubuntu3_amd64.deb subversion_1.6.17dfsg-3ubuntu3_amd64.deb unzip_6.0-4ubuntu1_amd64.deb zip_3.0-4_amd64.deb The demo product codes in subversion repository is GNDP ; Build BVT Environment $ cd / home / bvt / docs $ take mybvt $ vagrant box list $ vagrant init precise64 // Add the following texts into Vagrantfile after the line 'config.vm.box = \"precise64\":' config . vm . define \"bs\" do | bvtserver | bvtserver . vm . hostname = \"bvt-server\" bvtserver . vm . network \"private_network\" , ip : \"192.168.50.3\" , virtualbox__intnet : \"testnet\" bvtserver . vm . provider : virtualbox do | vbox | vbox . customize [ \"modifyvm\" , : id , \"--natnet1\" , \"10.3/16\" ] vbox . customize [ \"modifyvm\" , : id , \"--memory\" , 1000 ] end bvtserver . vm . provision : shell , path : \"provision.sh\" , privileged : false bvtserver . vm . network \"forwarded_port\" , guest : 9000 , host : 9000 bvtserver . vm . network \"forwarded_port\" , guest : 8088 , host : 8088 end $ scp - r bvt @10.0.2.47 :/ home / bvt / warez / bvt - package packages $ vagrant up bs Use This Environment Open Sonarqube website , login with \"admin/admin\", in Settings -> Qualify Profiles, add rules \"TongYong\" with import \"tyrules.xml\" on local disk (the next section its content);; Open Jenkins website ; Create Jenkins project: create a project named \"GNDP\" and add a \"shell\" build step: \"/vagrant/bvt-gndp.sh\"; Build this project; You get the build log on jenkins website and code analysis results on sonarqube website; Needed Scripts Vagrant provision script This is the environment building script executed during the vagrant provision period, so it's cited in Vagrantfile. $ cat /home/bvt/docs/mybvt/provision.sh #!/bin/sh sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime sudo dpkg -i /vagrant/packages/svn_amd64_ubuntu12.04/*.deb sudo dpkg -i /vagrant/packages/zip_3.0-4_amd64.deb sudo dpkg -i /vagrant/packages/unzip_6.0-4ubuntu1_amd64.deb APP_HOME = /home/vagrant/apps mkdir $APP_HOME cd $APP_HOME chmod 755 /vagrant/packages/jdk-6u45-linux-x64.bin sh /vagrant/packages/jdk-6u45-linux-x64.bin tar jxf /vagrant/packages/apache-ant-1.9.3-bin.tar.bz2 unzip /vagrant/packages/sonar-3.6.1.zip export PATH = $PATH :/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin export LC_ALL = en_US.UTF-8 export JENKINS_HOME = /home/vagrant/jenkinshome mkdir $JENKINS_HOME sonar-3.6.1/bin/linux-x86-64/sonar.sh start nohup java -jar /vagrant/packages/jenkins-1.544.war --httpPort = 8088 1 >jenkins.log 2 >jenkins-err.log & BVT shell script This script checkout the source code to be built, then invoke the Ant script. It's cited in Jenkins project definition. $ cat /home/bvt/docs/mybvt/bvt-gndp.sh #!/bin/sh export PATH = $PATH :/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin export LC_ALL = en_US.UTF-8 svnprefix = 'svn co --non-interactive --no-auth-cache --username bvt_common --password password' svnroot = 'http://10.0.2.59:8118/svn/gcp/Development-Area' prod = GNDP $svnprefix ${ svnroot } /3-SCL/Trunk/ $prod /vagrant/codes/ $prod rm -rf /vagrant/codes/*.zip cd /vagrant/codes/ $prod ; ant Ant build script This script resides in the root folder of the source project GNDP in subversion repository. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project name= \"MyJavaProj\" basedir= \"./\" default= \"coverage_report\" > <property name= \"build.dir\" value= \" ${ basedir } /build\" /> <target name= \"init\" > <delete dir= \" ${ build . dir } \"/ > <mkdir dir= \" ${ build . dir } \"/ > </target> <property name= \"src.dir\" value= \" ${ basedir } /src\" /> <property name= \"src.class.dir\" value= \" ${ build . dir } /class\" /> <target name= \"compile-src\" depends= \"init\" > <mkdir dir= \" ${ src . class . dir } \"/ > <javac srcdir= \" ${ src . dir } \" destdir= \" ${ src . class . dir } \" encoding= \"UTF-8\" debug= \"true\"/ > </target> <taskdef classpath= \"cobertura.jar\" resource= \"tasks.properties\" /> <property name= \"instrumented.class.dir\" value= \" ${ build . dir } /instrumented-class\" /> <property name= \"cobertura.data.file\" value= \" ${ instrumented . class . dir } /cobertura.ser\" /> <target name= \"instrument\" depends= \"compile-src\" > <cobertura -instrument datafile= \" ${ cobertura . data . file } \" todir= \" ${ instrumented . class . dir } \" > <fileset dir= \" ${ src . class . dir } \" > <include name= \"**/*.class\" /> </fileset> </cobertura-instrument> </target> <property name= \"test.dir\" value= \" ${ basedir } /test\" /> <property name= \"test.class.dir\" value= \" ${ build . dir } /test\" /> <target name= \"compile-test\" depends= \"instrument\" > <mkdir dir= \" ${ test . class . dir } \"/ > <javac srcdir= \" ${ test . dir } \" destdir= \" ${ test . class . dir } \" > <classpath> <pathelement location= \" ${ instrumented . class . dir } \"/ > <pathelement location= \" ${ src . class . dir } \"/ > </classpath> </javac> </target> <property name= \"unittest.report.dir\" value= \" ${ build . dir } /unittest_report\" /> <property name= \"lib.dir\" value= \" ${ basedir } /lib\" /> <target name= \"unittest\" depends= \"compile-test\" > <mkdir dir= \" ${ unittest . report . dir } \"/ > <junit printsummary= \"yes\" fork= \"yes\" > <sysproperty key= \"net.sourceforge.cobertura.datafile\" file= \" ${ cobertura . data . file } \" /> <classpath> <pathelement location= \" ${ instrumented . class . dir } \"/ > <pathelement location= \" ${ src . class . dir } \"/ > <pathelement location= \" ${ test . class . dir } \"/ > <pathelement location= \" ${ src . dir } \"/ > <path refid= \"lib.path\"/ > </classpath> <formatter type= \"xml\"/ > <batchtest todir= \" ${ unittest . report . dir } \" haltonerror= \"no\" > <fileset dir= \" ${ test . dir } \" > <include name= \"**/*.java\" /> </fileset> </batchtest> </junit> </target> <property name= \"coverage.report.dir\" value= \" ${ build . dir } /coverage_report\" /> <target name= \"coverage-report\" depends= \"unittest\" > <cobertura -report datafile= \" ${ cobertura . data . file } \" srcdir= \" ${ src . dir } \" destdir= \" ${ coverage . report . dir } \" format= \"xml\" /> </target> <property name= \"sonar.jdbc.url\" value= \"jdbc:h2:tcp://localhost:9092/sonar\" /> <property name= \"sonar.jdbc.username\" value= \"sonar\" /> <property name= \"sonar.jdbc.password\" value= \"sonar\" /> <property name= \"sonar.projectKey\" value= \"com.doco.gif.MyModule\" /> <property name= \"sonar.projectName\" value= \"My Unit Test Project Demo\" /> <property name= \"sonar.projectVersion\" value= \"2.1\" /> <property name= \"sonar.language\" value= \"java\" /> <property name= \"sonar.sources\" value= \"src\" /> <property name= \"sonar.tests\" value= \"test\" /> <property name= \"sonar.binaries\" value= \" ${ src . class . dir } , ${ test . class . dir } , ${ build . instrument . dir } \" /> <property name= \"sonar.dynamicAnalysis\" value= \"reuseReports\" /> <property name= \"sonar.surefire.reportsPath\" value= \" ${ unittest . report . dir } \" /> <property name= \"sonar.core.codeCoveragePlugin\" value= \"cobertura\" /> <property name= \"sonar.cobertura.reportPath\" value= \" ${ coverage . report . dir } /coverage.xml\" /> <target name= \"sonar\" depends= \"coverage-report\" > <taskdef classpath= \"sonar-ant-task-2.1.jar\" uri= \"antlib:org.sonar.ant\" resource= \"org/sonar/ant/antlib.xml\"/ > <sonar:sonar xmlns:sonar= \"antlib:org.sonar.ant\" /> </target> </project> Code Static check rules This file defines the static check rules used by Sonarqube. It's imported manually from file \"tyrules.xml\" on local hard disk. $ cat ~/docs/tyrules.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"> <module name= \"Checker\" > <property name= \"severity\" value= \"warning\" /> <module name= \"TreeWalker\" > <metadata name= \"net.sf.eclipsecs.core.lastEnabledSeverity\" value= \"inherit\" /> <property name= \"fileExtensions\" value= \"java\" /> <module name= \"MethodLength\" > <property name= \"max\" value= \"200\" /> </module> <module name= \"NestedIfDepth\" > <property name= \"max\" value= \"5\" /> </module> <module name= \"CyclomaticComplexity\" /> <module name= \"ParameterNumber\" > <property name= \"max\" value= \"6\" /> </module> </module> <module name= \"StrictDuplicateCode\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"min\" value= \"75\" /> </module> <module name= \"FileLength\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"max\" value= \"1000\" /> </module> </module> For Unit Test copy junit-4.*.jar, cobertura.jar and hamcrest-core-1.3.jar to $ANT_HOME/lib;","tags":"Tech","url":"http://leetschau.github.io/virtual-bvt-system.html","loc":"http://leetschau.github.io/virtual-bvt-system.html"},{"title":"Awesome on Arch Linux","text":"Install # pacman - S awesome # pacman - S terminator # pacman - S firefox # pacman - S gvim # su - chad $ echo \" exec awesome \" > ~/ . xinitrc $ mkdir - p ~/ . config / awesome / $ cp / etc / xdg / awesome / rc . lua ~/ . config / awesome / // modify value of \" terminal \" from \" xterm \" to \" terminator \" in ~/ . config / awesome / rc . lua $ startx Or: # pacman - S awesome guake chromium gvim ... Frequently Used Shortcuts M-r: run command M- : run terminal defined in ~/.config/awesome/rc.lua M- : change to next layout M-Shift-c: close window M-Ctrl-r: reload awesome config Alt- : full screen Ref: awesome in arch linux ; some frequently used shortcuts ;","tags":"Tech","url":"http://leetschau.github.io/awesome-on-arch-linux.html","loc":"http://leetschau.github.io/awesome-on-arch-linux.html"},{"title":"Replay Recent Executed Commands","text":"Replay recent executed 15 commands: fc -l -15 ; Replay recent executed 15 commands in reverse order: fc -lr -15 ; Replay recent executed 15 commands without list number: fc -ln -15 ; Replay recent executed commands from \"man ...\": fc -ln man ; Edit some last commands (from No.14 to No.24) and execute them: fc -e vi 14 24 ; You can also use \"-s\" options to modify commands ant execute, see man fc for details. Clear history: history -c .","tags":"Tech","url":"http://leetschau.github.io/replay-recent-executed-commands.html","loc":"http://leetschau.github.io/replay-recent-executed-commands.html"},{"title":"Import Subversion Repository from Subversion Dump File","text":"Overall steps Get dump file from FTP: Build repository based on the dump file; Authorize user of this repository. Operation details On Windows # get dump file with TotalCmd ; cd K : \\ svn svnadmin create ALARM svnadmin load ALARM < f : \\ tmp \\ ALARM - dumpfile # add the following text into file \"c:\\Program Files\\Apache Group\\Apache2\\svnaccessfile\" ALARM - dev = user1 , user2 , user3 #### [ ALARM:/Development-Area ] @ALARM - dev = rw @QA = rw @Manager = r bvt_common = r * = [ ALARM:/Management-Area ] @ALARM - dev = rw @QA = rw @Manager = r * = [ ALARM:/Release-Area ] @ALARM - dev = rw @Manager = r @QA = rw test = r * = [ ALARM:/Test-Area ] @ALARM - dev = r @QA = rw @Manager = r * = # add following text into file \"c:\\Program Files\\Apache Group\\Apache2\\passwd\" user1 : pwd1 user2 : pwd2 user3 : pwd3 On Linux ftp 123 . xxx . xxx . xxx > get ALARM - dumpfile > bye cd $ SVN_REPO_HOME svnadmin create ALARM svnadmin load ALARM < ~ \\ ALARM - dumpfile # edit file svnaccessfile & passwd the same way with in Windows Note: The default auth rule is \"everyone can access everything\" like the following text in svnaccessfile: [ / ] * = r @Manager = rw @QA = rw @Dev = rw @TEST - all = rw then define more detailed rules to override the default one, notice the last line: [ALARM:/Development-Area] @ALARM-dev = rw ... * = But we can define auth rules in another way: [/] * = [ALARM:/Development-Area] @ALARM-dev = rw ...","tags":"Tech","url":"http://leetschau.github.io/import-subversion-repository-from-subversion-dump-file.html","loc":"http://leetschau.github.io/import-subversion-repository-from-subversion-dump-file.html"},{"title":"Group Substitution in Vim","text":"The origin text is: sqoop export --columns int_id,date_time,mr_count,ecno_pollution,rscp_0,rscp_1,rscp_2,rscp_3,rscp_4,rscp_5,load_time --input-field The target text is: sqoop export --columns int_id,date_time,mr_count,ecno_pollution,rscp0,rscp1,rscp2,rscp3,rscp4,rscp5,load_time --input-field We want remove all underscore in \"rscp_3\", which means converting it to \"rscp3\". The real text has ninety more items, so we can't do substitutions manually. And other items also use underscore, so you can't only remove all underscores. Solution: :s/rscp_\\(\\d\\+\\)/rscp\\1/gc . We use \"(\" and \")\" to mark a group, use \"\\1\" to represent it in the new strings.","tags":"Tech","url":"http://leetschau.github.io/group-substitution-in-vim.html","loc":"http://leetschau.github.io/group-substitution-in-vim.html"},{"title":"Join Ragged Columns im Vim","text":"I need to format some texts copied from a PDF file: a ab abc cd e => => => => => x xy xyz pq p The target form is: a => x ab => xy abc => xyz cd => pq e => p I want to select the whole last section (x...p) in visual block mode, and paste them after the 2nd section (=>). But in visual block mode (triggered by Ctrl-v), I can't select all of last section. Because there's only one character \"p\" in the last line, so only \"x\" in the 3rd line (xyz) will be selected. The solution is set \"virtualedit\" mode to \"all\" with \":set ve=all\". Now the cursor is free to anywhere no matter if there's a character. After the joining, we have to remove all trailing spaces. So the overall process is: :set ve=all :'<,'>s/\\s*//g :set ve=","tags":"Tech","url":"http://leetschau.github.io/join-ragged-columns-im-vim.html","loc":"http://leetschau.github.io/join-ragged-columns-im-vim.html"},{"title":"Ragged Array in Java","text":"Ragged array is a multi-dimensional array, whose elements has different length: $ cat Test . java public class Test { public static void main ( String [] args ) { int [][] aa ; aa = new int [ 3 ][] ; // notice the unique way of it's initialization aa [ 0 ] = new int [ 2 ] ; aa [ 1 ] = new int [ 4 ] ; aa [ 2 ] = new int [ 5 ] ; aa [ 1 ][ 3 ] = 34 ; for ( int i = 0 ; i < aa.length; i++) { for ( int j = 0 ; j < aa[i].length; j++) { System . out . println ( \" element aa[ \" + i + \" ][ \" + j + \" ] is: \" + aa [ i ][ j ] ) ; } } } } $ javac Test . java $ java Test element aa [ 0 ][ 0 ] is : 0 element aa [ 0 ][ 1 ] is : 0 element aa [ 1 ][ 0 ] is : 0 element aa [ 1 ][ 1 ] is : 0 element aa [ 1 ][ 2 ] is : 0 element aa [ 1 ][ 3 ] is : 34 element aa [ 2 ][ 0 ] is : 0 element aa [ 2 ][ 1 ] is : 0 element aa [ 2 ][ 2 ] is : 0 element aa [ 2 ][ 3 ] is : 0 element aa [ 2 ][ 4 ] is : 0","tags":"Tech","url":"http://leetschau.github.io/ragged-array-in-java.html","loc":"http://leetschau.github.io/ragged-array-in-java.html"},{"title":"Convert an Integer to a Long Value in Java","text":"When you convert an integer to a long, you must convert the integer to a long before any calculations, or it will give the wrong result. $ cat Test.java public class Test { public static void main ( String [] args ) { int io = Integer.MAX_VALUE ; int ir = io + 1 ; long la = io + 1 ; long lb = (( long ) io ) + 1 ; System.out.println ( \"Value of int variable io is: \" + io ) ; System.out.println ( \"Value of int variable ir is: \" + ir ) ; System.out.println ( \"Value of long variable la is: \" + la ) ; System.out.println ( \"Value of long variable lb is: \" + lb ) ; } } $ javac Test.java $ java Test Value of int variable io is: 2147483647 Value of int variable ir is: -2147483648 Value of long variable la is: -2147483648 Value of long variable lb is: 2147483648 So only the 3rd form (lb) gives the right result.","tags":"Tech","url":"http://leetschau.github.io/convert-an-integer-to-a-long-value-in-java.html","loc":"http://leetschau.github.io/convert-an-integer-to-a-long-value-in-java.html"},{"title":"Use VimIM as Chinese Input Method","text":"Website: xhh/vimim Install $ cd ~/docs/tmp $ git clone https://github.com/xhh/vimim.git $ mkdir -p /home/chad/.vim/bundle/vimim/plugin $ cp vimim/trunk/plugin/vimim.vim /home/chad/.vim/bundle/vimim/plugin $ cp vimim/vim/vimfiles/plugin/vimim.txt /home/chad/.vim/bundle/vimim/plugin Config OneKey Mode Add \"let g:vimim_tab_as_onekey=1\" into ~/.vimrc; Usage See manual vimim/vimim.html Add custom datafile VimIM only accept one dictionary file: vimim.txt above. So you can only add items into it, while can't build a new dictionary file. Add new item into dictionary Add \"jiqun 集群\" directly into /home/chad/.vim/bundle/vimim/plugin/vimim.txt. The vimim.txt must be sorted, so you have to add your items in order. You can keep the edit window of vimim.txt open. While the file saved, the item will take effect at once without re-open the vim instance using VimIM. Query current status of VimIM Under insert mode of vim, input \"vimim\", then press or tab. Problems 分词功能有问题，比如要输入\"和部署\"，在hebushu后按tab键时，给出的选项是\"何不\"和\"何\"，要打出\"和\"，必须先删除bushu，在he后面按tab键，这种操作太复杂了； 不能实时显示结果，当写比较长的一段话时，要把整句话打完按tab才能开始转换中文，一旦中间有拼写错误，就得重写； 词库太小，不仅无法跟搜狗拼音比，也无法跟ibus-pinyin比； 联系困难，google code被屏蔽的厉害，文档里也没有作者联系方式；","tags":"Tech","url":"http://leetschau.github.io/use-vimim-as-chinese-input-method.html","loc":"http://leetschau.github.io/use-vimim-as-chinese-input-method.html"},{"title":"Check Battery Status from Terminal in Linux","text":"List device name of the battery: upower -e , I got the name is \"/org/freedesktop/UPower/devices/battery_BAT0\"; Print the status of the battery: upower -i /org/freedesktop/UPower/devices/battery_BAT0 ; Only print the charge persent of the battery: upower -i /org/freedesktop/UPower/devices/battery_BAT0|awk '/&#94;\\s*percentage:/ {print $2}'","tags":"Tech","url":"http://leetschau.github.io/check-battery-status-from-terminal-in-linux.html","loc":"http://leetschau.github.io/check-battery-status-from-terminal-in-linux.html"},{"title":"Use x-tile Manage Windows on Linux Desktop Environment","text":"Install Download deb package \"x-tile_2.5-1_all.deb\" from x-tile website ; sudo dpkg -i x-tile_2.5-1_all.deb ; Verify: x-tile -h with user who has loged into the desktop environment. User root has no desktop environment, so if you run x-tile as root, you get a \"Client failed to connect to the D-BUS daemon\" error. Usage Use the following command in terminal or input box of the collapsed xfce4-appfinder(Alt-F2): x-tile g 2 3 : tile all opened window with 2 rows and 3 columns; x-tile g == x-tile g 0 0 : tile all opened window with automatic rows and columns; x-tile y : cycle the order of last tiling operation; x-tile m : maximize all opened window; x-tile M : unmaximize all opened window; x-tile h : tile all opened window horizontally; x-tile v : tile all opened window vertically;","tags":"Tech","url":"http://leetschau.github.io/use-x-tile-manage-windows-on-linux-desktop-environment.html","loc":"http://leetschau.github.io/use-x-tile-manage-windows-on-linux-desktop-environment.html"},{"title":"A Good Tutorial about C++ Syntax and Points","text":"The whole tutorial C++ Language is concise and helpful. The section Pointers is a good introduction of pointers. It distinguishes many myth of pointers, for example: It distinguishes \"pointer declaration\" of \"dereference operation\". They use both the same operator \"*\", but are different things. Pointer and array are largely the same, but an import difference: pointer can be reassigned, while array variable can't. Incrementation of a pointer produce different result regarding to the data type it referenced. Say a pointer p has the address 1000, according to its referenced type, the incrementation results are: char * p; p = 1000; p++ is 1001; short * p; p = 1000; p++ is 1002; long * p; p = 1000; p++ is 1004;","tags":"Tech","url":"http://leetschau.github.io/a-good-tutorial-about-c-syntax-and-points.html","loc":"http://leetschau.github.io/a-good-tutorial-about-c-syntax-and-points.html"},{"title":"Mechanical Keyboard","text":"Compared with regular membrane keyboard, mechanical keyboard are more suitable for power PC users, like coders and game players. Brand: Cherry Keycool Filco Ref: Mechanical Keyboards: Should You Switch? Mechanical Keyboard FAQ: Pick the Right Switch","tags":"Tech","url":"http://leetschau.github.io/mechanical-keyboard.html","loc":"http://leetschau.github.io/mechanical-keyboard.html"},{"title":"Python Console Debugger","text":"Create a python file and debug it in gdb style with pdb: $ pdb testpdb . py > / home / chad / docs / tmp / testpdb . py ( 1 ) < module > () -> aa = 3 ( Pdb ) help ... ( Pdb ) help l ... ( Pdb ) l 1 -> aa = 3 2 bb = 4 3 cc = aa + bb 4 print ( cc ) [ EOF ] ( Pdb ) w / usr / lib / python2 . 7 / bdb . py ( 400 ) run () -> exec cmd in globals , locals < string > ( 1 ) < module > () > / home / chad / docs / tmp / testpdb . py ( 1 ) < module > () -> aa = 3 ( Pdb ) n > / home / chad / docs / tmp / testpdb . py ( 2 ) < module > () -> bb = 4 ( Pdb ) b 4 Breakpoint 1 at / home / chad / docs / tmp / testpdb . py : 4 ( Pdb ) c > / home / chad / docs / tmp / testpdb . py ( 4 ) < module > () -> print ( cc ) ( Pdb ) w / usr / lib / python2 . 7 / bdb . py ( 400 ) run () -> exec cmd in globals , locals < string > ( 1 ) < module > () > / home / chad / docs / tmp / testpdb . py ( 4 ) < module > () -> print ( cc ) ( Pdb ) p bb 4 ( Pdb ) c 7 The program finished and will be restarted > / home / chad / docs / tmp / testpdb . py ( 1 ) < module > () -> aa = 3 ( Pdb ) q The command is exactly the same with gdb. On some OS like ArchLinux, there isn't \"pdb\" command, so you have to find the location of \"pdb.py\", then define an alias in ~/.zshrc: $ locate pdb.py ... /usr/lib/python3.4/pdb.py ... $ echo 'alias pdb=\"/usr/lib/python3.4/pdb.py\"' >> ~/.zshrc Now you can use \"pdb \" as in Mint.","tags":"Tech","url":"http://leetschau.github.io/python-console-debugger.html","loc":"http://leetschau.github.io/python-console-debugger.html"},{"title":"Modify SSH Welcome Message of Linux","text":"The ssh welcome message of a Linux OS is stored in file /etc/motd. So modify it for customization.","tags":"Tech","url":"http://leetschau.github.io/modify-ssh-welcome-message-of-linux.html","loc":"http://leetschau.github.io/modify-ssh-welcome-message-of-linux.html"},{"title":"Reminder Application on Linux","text":"Alarm Clock sudo apt-get install alarm-clock Alt-F2: alarmclock, or alarmclock & from command line; Of course Thunderbird is a solution, but is a heavy one.","tags":"Tech","url":"http://leetschau.github.io/reminder-application-on-linux.html","loc":"http://leetschau.github.io/reminder-application-on-linux.html"},{"title":"Install Raspberry Pi","text":"硬件系统的安装、配置和启动 2014.5.24 在淘宝上买了一个红版树莓派（树莓派官方授权中国制造商仅在中国销售的版本） model B，售价278元，512M内存，单核 CPU 700MHz，无 WiFi。 这个配置应该是2012年上市的 Model B 第1代产品。 晚上 32GB ScanDisk SD 卡到货，下载了 RASPBIAN STRETCH WITH DESKTOP AND RECOMMENDED SOFTWARE (2018-11-13-raspbian-stretch-full.zip), 用 Etcher 写入到 SD 卡上，笔记本原来有C和D盘，制作完成后出现E和F盘， 在 Git Bash 执行下面的命令开启板载系统的 SSH 服务 （在系统盘根目录下创建一个名称为 ssh 的空文件）： cd / e touch ssh 关闭 Windows 格式化F盘的提示，右键E盘选择 弹出 ，然后拔出SD卡。 SD卡插入树莓派，网线连接无线路由器（联通赠送的）LAN口和 Pi 的网线插口， 最后插上 miniUSB 线后 Pi 启动，在 http://192.168.1.1/ 登录路由器管理页面， 在 状态 > 用户侧信息 > LAN用户信息 > 有线设备 中找到 Pi 的 IP 地址： 192.168.1.23，Git Bash 中执行 ssh pi@192.168.1.23 ， 输入密码 raspberry 后登录成功。硬件信息如下： pi @raspberrypi : ~ $ ip a 1 : lo : < LOOPBACK , UP , LOWER_UP > mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link / loopback 00 : 00 : 00 : 00 : 00 : 00 brd 00 : 00 : 00 : 00 : 00 : 00 inet 127.0.0.1 / 8 scope host lo valid_lft forever preferred_lft forever inet6 :: 1 / 128 scope host valid_lft forever preferred_lft forever 3 : eth0 : < BROADCAST , MULTICAST , UP , LOWER_UP > mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link / ether b8 : 27 : eb : 60 : db : 5 b brd ff : ff : ff : ff : ff : ff inet 192.168.1.23 / 24 brd 192.168.1.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80 : : 4 a92 : 13 a4 : 3 be6 : ce7c / 64 scope link valid_lft forever preferred_lft forever pi @raspberrypi : ~ $ uname - a Linux raspberrypi 4.14.79 + #1159 Sun Nov 4 17 : 28 : 08 GMT 2018 armv6l GNU / Linux pi @raspberrypi : ~ $ lscpu Architecture : armv6l Byte Order : Little Endian CPU ( s ) : 1 On - line CPU ( s ) list : 0 Thread ( s ) per core : 1 Core ( s ) per socket : 1 Socket ( s ) : 1 Model : 7 Model name : ARMv6 - compatible processor rev 7 ( v6l ) CPU max MHz : 700.0000 CPU min MHz : 700.0000 BogoMIPS : 697.95 Flags : half thumb fastmult vfp edsp java tls pi @raspberrypi : ~ $ free - h total used free shared buff / cache available Mem : 433 M 76 M 194 M 4.2 M 163 M 304 M Swap : 99 M 0 B 99 M pi @raspberrypi : ~ $ df - h Filesystem Size Used Avail Use % Mounted on / dev / root 30 G 4.5 G 24 G 17 % / devtmpfs 213 M 0 213 M 0 % / dev tmpfs 217 M 0 217 M 0 % / dev / shm tmpfs 217 M 3.1 M 214 M 2 % / run tmpfs 5.0 M 4.0 K 5.0 M 1 % / run / lock tmpfs 217 M 0 217 M 0 % / sys / fs / cgroup / dev / mmcblk0p1 44 M 23 M 22 M 51 % / boot tmpfs 44 M 0 44 M 0 % / run / user / 1000 常用软件 系统自带 git, Python 2.7 和 3.5，node.js 8.11，ruby 2.3，curl, wget, htop。 将 /etc/apt/sources.list 改为 deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui 并 apt update 后可以使用 apt 安装包（例如 zsh ）。 使用 curl 安装 oh-my-zsh 成功，theme 设置为 ys ： ZSH_THEME=\"ys\" 。 neovim for Linux 64 不能用于 Raspi。 Pi 的 vim 只有 vim-tiny，大部分 vimrc 中的配置不能用，只能做简单的编辑操作。 安装 tmux: apt install tmux 笔记软件可以装 dsnote，Joplin 需要 node.js 8+，暂时先不安装了， 采用SSH登录服务器上使用命令行版本的方法。 VPN 安装 OpenVPN： apt install openvpn 将证书和密码文件拷贝到 /etc/openvpn/client 文件夹下，启动服务： sudo openvpn --config /etc/openvpn/client/rtr-7gl9ym6n.conf --daemon --cd /etc/openvpn/client 待解决问题 如何将树莓派打造成家庭影院系统？搜索 OpenELEC Written at 2015.5.27: Format the SD card with \"FAT' format; Download Noob.zip from raspi's website, unzip all files to the SD card, no need to \"dd\" or something else; Insert SD card, power line, keyboard, mouse and HDMI cable to TV; Open TV, switch to \"AIR-LINE\" mode, then it will be the Screen; Check the OS you want to install, Respbian in my case, and it will install it on the SD card; After the installation, the raspi-config interface appears, it's a TUI, use keyboard finish some settings, such as modify user password; After reboot, login with username \"pi\" and password \"raspberry\" if you didn't modify it at the previous step; Now you can start GUI with \"startx\", the default desktop environment is LXDE; The ssh server is installed by default; That's it.","tags":"Tech","url":"http://leetschau.github.io/install-raspberry-pi.html","loc":"http://leetschau.github.io/install-raspberry-pi.html"},{"title":"Debug Binary File Reading C++ Codes with gdb","text":"We need debug a C++ file, which read and analyze a binary file. We use gdb and xxd in this case. In tmux, split a window horizontally, run gdb in the upper bigger pane, and list file content in lower smaller pane. $ tmux new - s basic A - f , - // split window, I define <prefix> of tmux as A-f in ~/.tmux.conf: set -g prefix M-f A - f , JJ // make upper pane larger $ xxd - l 33 < input - binary - file > . dat // print first 32 bytes of this file 0000000 : 202 a 463 b 862 e d108 2100 ab55 8006 f407 * F ;.... ! .. U .... 0000010 : 0000 0000 0 a0e 0401 0102 1800 5201 0501 ............ R ... 0000020 : 15 A - f , k // jump to upper window $ cat readfile . cc #include <fstream> #include <iterator> #include <iostream> #include <vector> #include <string> using namespace std ; typedef unsigned char BYTE ; BYTE * read_section ( FILE * istream , int * length ); int main () { string filename = \"/home/chad/docs/eclipsews/MrParser/doc/ns-output/1296_2014_04_25_10_00_MR.dat\" ; char * fn = const_cast < char *> ( filename . c_str ()); FILE * rstream = fopen ( fn , \"rb\" ); // 打开.dat文件 BYTE * buffer = NULL ; int length = 0 ; buffer = read_section ( rstream , & length ); fclose ( rstream ); printf ( \"Read file length: %d \\n \" , length ); return 0 ; } BYTE * read_section ( FILE * istream , int * length ) { int count = 0 ; size_t ret = 0 ; BYTE buf [ 128 ]; BYTE * buffer = NULL ; ret = fread ( buf , sizeof ( char ), 8 , istream ); if ( 8 != ret ) return NULL ; ret = fread ( buf , sizeof ( char ), 2 , istream ); if ( 2 != ret ) return NULL ; * length = buf [ 1 ] * 256 + buf [ 0 ]; if ( 0 == * length ) return NULL ; buffer = new BYTE [ * length ]; fseek ( istream , - 10 , SEEK_CUR ); ret = fread ( buffer , sizeof ( char ), * length , istream ); if ( * length != ret ) { delete [] buffer ; return NULL ; } return buffer ; } $ g ++ - g readfile . cc - o rr $ gdb rr l // list source code, we want to probe the content of variable \"buffer\" after the \"fread\" operation. So we add a breakpoint after that line b 37 r ( gdb ) p / x * buffer @33 $ 1 = { 0x20 , 0x2a , 0x46 , 0x3b , 0x86 , 0x2e , 0xd1 , 0x8 , 0x21 , 0x0 , 0xab , 0x55 , 0x80 , 0x6 , 0xf4 , 0x7 , 0x0 , 0x0 , 0x0 , 0x0 , 0xa , 0xe , 0x4 , 0x1 , 0x1 , 0x2 , 0x18 , 0x0 , 0x52 , 0x1 , 0x5 , 0x1 , 0x15 } p / x buffer [ 0 ] $ 2 = 0x20 c q where l=list, r=run, p/x means \"print value in hex format\", c=continue, q=quit. You can see the bytes of \"buffer\" is exactly the same with the output of xxd command: 0x20, 0x2a, ..., 0x15. The format of gdb's print see 8.4 Output formats for details.","tags":"Tech","url":"http://leetschau.github.io/debug-binary-file-reading-c-codes-with-gdb.html","loc":"http://leetschau.github.io/debug-binary-file-reading-c-codes-with-gdb.html"},{"title":"Develop with tmux in Linux","text":"tmux is a terminal multiplexer. Its 3-level architecture \"session-window-pane\" is very flexible and powerful. Sessions are independent. Windows are different \"tabs\" in a session. And panes are different parts in a window. The multiplexer means if different hosts attach to the same session, they share the same screen, the same input and output, which like they sit together, use the same computer, so making pair-programming a breeze. You can detach from a session while it's still kept by tmux server in background. This is very useful on servers. You use laptop attaching to a tmux server running a server machine, work for a while, then detach from this server, shutdown your laptop. Next time when you attach to it, all the works are kept from last detach, as if you didn't leave them. You can move window between sessions, which is convinient for collaboration. For example, Bob works on session \"bob\" and Tom works on \"tom\", Bob write some codes and want Tom to complete it. Then he can move his window to Tom's session. If he want pair-programming with Tom, he can tell Tom to detach from his own session \"tom\" and attach to \"bob\". When finished, Tom detach from \"bob\" and attach to \"tom\" to continue his work. Ref: \"tmux - Productive Mouse-Free Development\" by Brian P. Hogan. Install With internet connected, install tmux with sudo yum install tmux or sudo apt-get install tmux . Without internet connection, download tmux package on RepoForge , then install it with sudo rpm -ivh tmux-1.6-1.el6.rf.x86_64.rpm . Getting help List all binding keys tmux list-keys or use shortcuts: \"bind-key ?\". So if you know a shortcut, say [prefix]!, and want know the corresponding command, you can run tmux list - keys | grep ! then you get bind - key ! break - pane So the corresponding command is \"break-pane\". List all commands tmux list - commands Define tmux startup shortcuts in Xfce, Mint Application Finder(Alt-F3) -> Keyboard -> Application shortcuts: Add Command: exo-open --launch TerminalEmulator xfce4-terminal --fullscreen -x tmux new -s basic Shortcut: Alt-[ Frequently used shortcuts According to the defualt shortcuts and above modifications: List all shortcuts: prefix ? List existing sessions: tmux ls Attach to a session: tmux attach -t , if there's only one window, you can use tmux a for short; Switch to next window: prefix n Jump to last window: prefix l (easy for jump between 2 windows) Detach from a session: prefix d Jump to previous/next session: prefix (/) Jump to last session: prefix L (easy for jump between 2 sessions) Create new window: prefix c Rename current window: prefix Jump to a window according to it's number: prefix (see tmux's status line to get its number) Split current window horizontally/vertically: prefix -/| Jump to another pane(sub-window): prefix h/j/k/l Jump to next pane: prefix o Maximum/Restore a pane: prefix z (tmux version >= 1.8, use tmux -V to get the version) Move window to another session: prefix .(period) Switch to next layout: prefix Window-Pane Management You can run tmux ... directly within tmux-managed sessions and windows, no need to detach from tmux environment beforehand. The only exception is tmux attach , which will produce a recursive attached tmux session, and messed up things. All command of tmux has auto-completion, so it's very convenient to run tmux command within tmux window. The equivalent way of running tmux command without command-line(like that in vi) is using shortcut \"prefix :\". Turning a window into a pane In the destination window: tmux join-pane -s [source-window-number] ; In the source window: tmux join-pane -t [destination-window-number] ; Specify source and destination windows both: tmux join-pane -s [src-window-number] -t [dst-window-number] ; Turning a pane into a window Use shortcuts \"prefix, !\" in the pane. Keep the window name fixed Add \"set-option -g allow-rename off\" into ~/.tmux.conf. Kill zombie window tmux kill-window -t [n] , where [n] is the window number. Clipboard Management Select/copy/paste text with shortcuts Modify default key of opening copy mode to M-c; Move cursor: h/j/k/l; Begin select: v End select and copy to clipboard: y or quit copy mode with ; Paste text: prefix, p To enable copy/paste between tmux buffer and system clipboard, install xsel, and add codes below into ~/.tmux.conf: bind - t vi - copy y copy - pipe \"xsel -i -p -b\" bind p run \"xsel -o | tmux load-buffer - ; tmux paste-buffer\" Here \"bind\" is the alias of \"bind-key\". \"-t\" specifies the type is \"vi-copy\" instead of \"emacs-copy\". In copy mode of tmux, use \"y\" to copy selected text into system clipboard, then paste the text with Ctrl-V in GUI application, or Shift-Ctrl-V in terminal, or \"p\" in vim. Ref: X clipboard integration on ArchLinux Wiki. Path share between windows I want to copy all files in window #1 to directory in window #2. The workflow is: prefix 2 tmux setb $ PWD prefix 1 cp * [ prefix p ] / The trick is using tmux setb to copy working directory to buffer of tmux, then use [prefix p] to paste the path into the copy command. Don't forget the trailing slash at the end of cp command, it's necessary. If parcellite is installed, there is a little simpler way to achieve this: prefix 2 pwd | parcellite prefix 1 cp * [ Ctrl - Alt - v ] / You can use ls -l|parcellite to add command output to parcellite buffer. Multiple Buffers Copy & Paste tmux maintains a stack of copied buffers. So you can copy multiple times, and paste selected buffers in arbitrary order, with the help of following commands: list-buffer, show-buffer, choose-buffer, save-buffer. Copy all the texts in the current pane with \"capture-pane\"(not including scrolled out texts). Customize status bar Add battery status in tmux status bar Add the following line into ~/.tmux.conf: set - g status - right \"%R #[fg=black bg=white]%Y %b %d#[fg=white bg=black] #(/home/chad/apps/getBatteryStuatus)\" And create a shell script named \"getBatteryStuatus\" under /home/chad/apps: upower - i / org / freedesktop / UPower / devices / battery_BAT0 | awk '/&#94;\\s*percentage:/ {print $2}' Disable Mouse Scrolling Enable mouse scrolling will copy selected text into tmux clipboard. So it's impossible to copy text in tmux and paste it outside tmux environment. To disable it, add \"set -g mode-mouse off\" into ~/.tmux.conf. To scrolling window in tmux, first go into copy mode, then use Ctrl-K/J to move up/down. To make this smooth, add the following into .tmux.conf: # Copy mode unbind [ bind - n C - j copy - mode bind p paste - buffer bind - t vi - copy 'v' begin - selection bind - t vi - copy 'y' copy - selection Deal with Nested Tmux Session If you run tmux a inside a tmux window, you attach to a nested tmux session. If the prefix definition of both tmux are the same, you can't send keys to inner session directly. For example, if you press \"prefix d\", if will detach from the outer session. How to detach from inner session? First press \"prefix :\", you get the tmux command prompt of outer session. Then input \"send-prefix\", press ,then press d. Or you can use \"send-keys\" command. First press \"prefix :\", you get the tmux command prompt of outer session, like above. Then input \"send-keys M-q d\", press . Here we suppose your prefix is \"M-q\". The format of keys after \"send-keys\" is defined in section \"KEY BINDINGS\" in man tmux . Make tmux more convenient Add the follow aliases into ~/.bash_aliases: alias tl = 'tmux ls' alias ta = 'tmux attach -t' You can use for session name auto-completion after ta . Get tmux version: tmux -V . My configuration file $ cat ~/.tmux . conf # Set the default terminal mode to 256 color mode set - g default - terminal \"screen-256color\" # run zsh # set - option - g default - command \"reattach-to-user-namespace -l $SHELL -l\" # disable mouse scroll set - g mode - mouse off # fix the window name set - option - g allow - rename off # Setting the prefix from C - b to Alt - f set - g prefix M - q # Free the original Ctrl - b prefix keybinding unbind C - b # quick window switching , - n means no need to use prefix bind - n C - h select - window - t :- bind - n C - l select - window - t :+ # quick window creation bind - n C - k new - window # quick pane expansion # bind - n M - u break - pane # quick window joining bind - n M - i command - prompt \"join-pane -s %1\" # enable vi keys . setw - g mode - keys vi # Set the base index for windows to 1 instead of 0 set - g base - index 1 # Set the base index for panes to 1 instead of 0 setw - g pane - base - index 1 # setting the delay between prefix and command set - sg escape - time 1 #set - sg repeat - time 1000 # Reload the file with Prefix r bind r source - file ~/.tmux . conf \\ ; display \"Reloaded!\" # Split window bind | split - window - h bind - split - window - v # moving between panes bind h select - pane - L bind j select - pane - D bind k select - pane - U bind l select - pane - R # Pane resizing , - r means you can repeat this key bindings bind - r H resize - pane - L 5 bind - r J resize - pane - D 5 bind - r K resize - pane - U 5 bind - r L resize - pane - R 5 # Copy mode unbind [ bind - n C - j copy - mode bind p paste - buffer bind - t vi - copy 'v' begin - selection bind - t vi - copy 'y' copy - selection # Update the status bar every sixty seconds set - g status - interval 60 # set the status line's colors set -g status-fg white set -g status-bg black # Status line left side set -g status-left-length 40 set -g status-left \"#[fg=green]session: #S #[fg=yellow]#I #[fg=cyan]#P\" set -g status-utf8 on # enable activity alerts setw -g monitor-activity on set -g visual-activity off # Center the window list set -g status-justify centre # set the color of the window list setw -g window-status-fg cyan setw -g window-status-bg default setw -g window-status-attr dim # set colors for the active window tag in window list setw -g window-status-current-fg white setw -g window-status-current-bg blue setw -g window-status-current-attr bright # Status line right side set -g status-right \"%R #[fg=black bg=white]%F#[fg=white bg=black] #(/home/chad/apps/myscripts/getBatteryStuatus)\" #set -g status-right \"%R #[fg=black bg=white]%Y %b %d\" # setw -g status-right-attr bright # Command / message line set -g message-fg white set -g message-bg black set -g message-attr bright # Execute a command in a new window bind C command-prompt \"new-window -n %1 ' %1'\" bind S command - prompt \"new-window -n %1 'ssh %1'\" The last line shows that you can use parameters in key bindings. When you press prefix S, tmux propmt you to input a parameter, I input \"47\" and press , it will open a new window named \"47\", and run command \"ssh 47\". If your .tmux.conf doesn't take effect, run the following command to load config file explicitly (or find errors in file): tmux new tmux source - file ~/ . tmux . conf The format strings in status line are interpreted as the followings: %X: date-time sign, such as %R is time, %F is date, etc. See full list in \"FORMAT controls the output\" section in man date ; ...: maybe the output of a shell command, or color of foreground/background, or an attribute. See full list in \"status-left\" of man tmux . These meta-data can be used both in status-left and status-right;","tags":"Tech","url":"http://leetschau.github.io/develop-with-tmux-in-linux.html","loc":"http://leetschau.github.io/develop-with-tmux-in-linux.html"},{"title":"Python Syntax and Style Check in vim","text":"Pylint Pylint is a static Python syntax and style checker. It works well with vim's generic syntax checker front-end syntastic. Install it with pip install pylint . Remove it with pip uninstall pylint . Or download pylint-1.0.0.tar.gz from it's old website . Unzip it, and run sudo python setup.py install . Not use apt-get, the version is old. # apt - get install pylint // install pylint 0 . 25 . 1 , so uninstall it # apt - get purge pylint # apt - get purge python - logilab - astng # apt - get purge python - logilab - common Now you can use pylint --version and pylint <module>.py to check your source code. syntastic Syntastic is a generic syntax checker front-end of vim. Install it: cd ~/ . vim / bundle git clone https : // github . com / scrooloose / syntastic . git See docs: :h syntastic :SyntasticInfo Syntastic : active mode enabled Syntastic version : 3 . 4 . 0 - 69 Info for filetype : python Available checker ( s ) : pylint python Currently enabled checker ( s ) : python pylint You can see pylint is recognized as a checker. Now you can check with pylint: : SyntasticCheck","tags":"Tech","url":"http://leetschau.github.io/python-syntax-and-style-check-in-vim.html","loc":"http://leetschau.github.io/python-syntax-and-style-check-in-vim.html"},{"title":"Speed up Apt with Fastest Mirror","text":"Ubuntu Use 163 mirror for Ubuntu: Download sources.list file from Ubuntu镜像使用帮助 . Mint First you need find out your OS release version: $ cat /etc/issue Linux Mint 14 Nadia From Linux Mint Releases we know the corresponding Ubuntu version of Nadia is Quantal, 12.10. Then add the follow text to the head of /etc/apt/sources.list: deb mirror://mirrors.ubuntu.com/mirrors.txt quantal main restricted universe multiverse deb mirror://mirrors.ubuntu.com/mirrors.txt quantal-updates main restricted universe multiverse deb mirror://mirrors.ubuntu.com/mirrors.txt quantal-backports main restricted universe multiverse deb mirror://mirrors.ubuntu.com/mirrors.txt quantal-security main restricted universe multiverse Modify \"quantal\" to other code name according to your system version. Or you can specify mirror manually: choose mirror geographically close to your location from Official Archive Mirrors for Ubuntu from Official Archive Mirrors for Ubuntu . I choose USTC Linux User Group . On this page choose \"Quantal 12.10\", then add sources.list entries to the head of /etc/apt/sources.list. Add sources entries of BJTU the same way, so totally it should be: deb http://mirror.bjtu.edu.cn/ubuntu/ quantal main deb-src http://mirror.bjtu.edu.cn/ubuntu/ quantal main deb http://mirrors.ustc.edu.cn/ubuntu/ quantal main deb-src http://mirrors.ustc.edu.cn/ubuntu/ quantal main Then comment out \"deb http://packages.medibuntu.org/ quantal free non-free\" in sources.list. It causes errors when upate. Now run apt-get update , you can find it's much faster than before.","tags":"Tech","url":"http://leetschau.github.io/speed-up-apt-with-fastest-mirror.html","loc":"http://leetschau.github.io/speed-up-apt-with-fastest-mirror.html"},{"title":"Convert MS Visual Studio C++ Project to makefile","text":"This morning I converted a Microsoft Visual Studio 2008 C++ solution to a Linux makefile with MakeItSo . The process: On a Windows host with VS2008 installed, download MakeItSo_1.2.2.zip from its website, unzip it; In the unzipped folder, run MakeItSo.exe -file=c:\\docs\\myproject\\myproj.sln ; In the root folder of the solution, a Makefile is generated. A .makefile is generated at each project folder (where the .vcproj file resides). Copy the solution folder to a Linux host with \"make\" installed (verified with make --version ), run make to build the whole solution or make <project-name> to build a specific project. That's it. Note: Another coverting tool sln2mak is also tried this morning, but failed.","tags":"Tech","url":"http://leetschau.github.io/convert-ms-visual-studio-c-project-to-makefile.html","loc":"http://leetschau.github.io/convert-ms-visual-studio-c-project-to-makefile.html"},{"title":"Compile ASN Module 25331-690 with Erlang","text":"Split the origin ASN file(25331-690.txt): there are 5 modules in this file, so we need split it into 5 modules: Class-definitions.asn PDU-definitions.asn InformationElements.asn Constant-definitions.asn Internode-definitions.asn Each has the same structure: < module - name > DEFINITIONS AUTOMATIC TAGS :: = BEGIN ... END Compile modules according their dependencies. The order is: Constant-definitions -> InformationElements -> PDU-definitions -> Class-definitions -> Internode-definitions The compile method is: in erlang shell( $ erl ), run \"asn1ct:compile(\"PDU-definitions\", [per, verbose]).\".","tags":"Tech","url":"http://leetschau.github.io/compile-asn-module-25331-690-with-erlang.html","loc":"http://leetschau.github.io/compile-asn-module-25331-690-with-erlang.html"},{"title":"mutt notes","text":"# apt - get install mutt Gmail $ cat ~/ . muttrc set imap_user = \"leetschau@gmail.com\" set imap_pass = \"v...\" set smtp_url = \"smtp://leetschau@smtp.gmail.com:587/\" set smtp_pass = \"v...\" set from = \"leetschau@gmail.com\" set realname = \"Li Chao\" set folder = \"imaps://imap.gmail.com:993\" set spoolfile = \"+INBOX\" set postponed = \"+[Gmail]/Drafts\" set header_cache = ~/ . mutt / cache / headers set message_cachedir = ~/ . mutt / cache / bodies set certificate_file =~/ . mutt / certificates $ mutt BOCO $ mutt -v | grep POP // you should get \"+USE_POP\" , which means your mutt support POP3 protocol $ mkdir ~/.mutt $ touch ~/.mutt/Mail $ export MAIL = /home/chad/Mail $ cat ~/.muttrc set pop_host = \"boco.com.cn\" set pop_user = \"lichao1@boco.com.cn\" set pop_pass = \"abaqus67\" set smtp_url = \"smtp://boco.com.cn:25\" set smtp_pass = \"abaqus67\" set from = \"lichao1@boco.com.cn\" set realname = \"Li Chao\" set header_cache = ~/.mutt/cache/headers set message_cachedir = ~/.mutt/cache/bodies set certificate_file = ~/.mutt/certificates $ mutt G // receive mails","tags":"Tech","url":"http://leetschau.github.io/mutt-notes.html","loc":"http://leetschau.github.io/mutt-notes.html"},{"title":"Some ASN.1 Java Resouces","text":"BinaryNotes JAC ASN.1 for java Better ASN Both poor documents. Some do not support PER.","tags":"Tech","url":"http://leetschau.github.io/some-asn1-java-resouces.html","loc":"http://leetschau.github.io/some-asn1-java-resouces.html"},{"title":"Encode and Decode ASN.1 in Erlang","text":"Firstly a template asn file (PP.asn here) was created. Then it's be used to encode some text, creating a segment binary data(stored in variable Bin), then Bin was decoded based on PP.asn. We can also store binaries into a file, then read from it. $ cat PP . asn PP DEFINITIONS AUTOMATIC TAGS :: = BEGIN TGSN :: = INTEGER ( 0 .. 14 ) Persons :: = SEQUENCE { name PrintableString , location INTEGER { home ( 0 ) , field ( 1 ) , roving ( 2 ) }, age INTEGER OPTIONAL } END $ erl Erlang / OTP 17 [ erts - 6 . 0 ] [ source - 07 b8f44 ] [ smp : 2 : 2 ] [ async - threads : 10 ] [ hipe ] [ kernel - poll : false ] Eshell V6 . 0 ( abort with &#94; G ) 1 > asn1ct : compile ( \" PP \" , [ ber , verbose ] ) . Erlang ASN . 1 compiler 3 . 0 Compiling : \" PP.asn \" Options : [ ber , verbose ,{ i , \" . \" }] -- { generated , \" PP.asn1db \" } -- -- { generated , \" PP.hrl \" } -- -- { generated , \" PP.erl \" } -- ok 2 > Rockstar = { ' Persons ' , \" Some Name \" , roving , 50 }. { ' Persons ' , \" Some Name \" , roving , 50 } 3 > { ok , Bin } = ' PP ' : encode ( ' Persons ' , Rockstar ) . { ok , << 48 , 17 , 128 , 9 , 83 , 111 , 109 , 101 , 32 , 78 , 97 , 109 , 101 , 129 , 1 , 2 , 130 , 1 , 50 >> } 4 > { ok , Persons } = ' PP ' : decode ( ' Persons ' , Bin ) . { ok ,{ ' Persons ' , \" Some Name \" , roving , 50 }} 5 > file : write_file ( \" test \" , Bin ) . ok 6 > { ok , Bin2 } = file : read_file ( \" test \" ) . { ok , << 48 , 17 , 128 , 9 , 83 , 111 , 109 , 101 , 32 , 78 , 97 , 109 , 101 , 129 , 1 , 2 , 130 , 1 , 50 >> } 7 > { ok , Persons } = ' PP ' : decode ( ' Persons ' , Bin2 ) . { ok ,{ ' Persons ' , \" Some Name \" , roving , 50 }}","tags":"Tech","url":"http://leetschau.github.io/encode-and-decode-asn1-in-erlang.html","loc":"http://leetschau.github.io/encode-and-decode-asn1-in-erlang.html"},{"title":"bitstring in Erlang","text":"bitstring is the bit sequence literals in Erlang. It's powerful and convenient due to the Erlang's telecom background. Now we have a bit sequence \"0110 0101 1000 1111 1010 0010\", whose corresponding hex literal is: \"0x65 0x8f 0xa2\". To express it with Erlang: 1 > Bin = << 16 # 65 , 16 # 8 f , 16 # a2 >> . << 101 , 143 , 162 >> Every segment divided by comma is called a \"segment\", it's default size is 8. But we want divide this sequence in this way: \"011 0010 1100 011 1110 10 0010\", which can be expressed as \"< >\": 2 > Bin2 = << 3 : 3 , 2 : 4 , 16 # c : 4 , 3 : 3 , 16 # e : 4 , 2 : 2 , 2 : 4 >> . << 101 , 143 , 162 >> So that's why 3 > << 3 , 17 , 23 : 16 >> . << 3 , 17 , 0 , 23 >> 4 > << 3 , 17 , 3323 : 16 >> . << 3 , 17 , 12 , 251 >> The third segment \" :16\" consists of 16 bits. So it's 8-bit \"normal\" literals is: 0 * 256 + 23 = 23 12 * 256 + 251 = 3323 That's it.","tags":"Tech","url":"http://leetschau.github.io/bitstring-in-erlang.html","loc":"http://leetschau.github.io/bitstring-in-erlang.html"},{"title":"i3 Window Manager on CentOS 6","text":"Make a usb key with dd command and CentOS-6.5-i386-LiveDVD.iso; Install CentOS 6.5 on Dell PC; Run firefox and install H3C client to connect to internet; After installation, run yum update and install epel; Search i3 in CentOS repository: yum list i3 => i3.i686 yum install i3.i686 ; yum install i3lock.i686 ; modify /etc/inittab, set the runlevel to 3; create ~/.xinitrc for user chad: echo \"exec i3\" > ~/.xinitrc ; reboot; Login as user chad; startx ;","tags":"Tech","url":"http://leetschau.github.io/i3-window-manager-on-centos-6.html","loc":"http://leetschau.github.io/i3-window-manager-on-centos-6.html"},{"title":"ASN.1 Tools","text":"pyasn1 $ pip install pyasn1 Ref: ASN.1 for Python .","tags":"Tech","url":"http://leetschau.github.io/asn1-tools.html","loc":"http://leetschau.github.io/asn1-tools.html"},{"title":"Use Command Line Dictionary on Linux","text":"$ sudo apt-get install dictd dict dict-gcide $ dict -I $ dict -d gcide computer Ref: How to look up dictionary via command line on Linux","tags":"Tech","url":"http://leetschau.github.io/use-command-line-dictionary-on-linux.html","loc":"http://leetschau.github.io/use-command-line-dictionary-on-linux.html"},{"title":"Living in Window Manager","text":"Input Method $mod+d, ibus-daemon Calendar In terminal: cal Dictionary Use goldendict: $mod+d, goldendict Use dictd; USB Detect usb device name and type: fdisk -l . For all available device type, see man mount , search \"vfstype\"; Mount it: mount -t ntfs /dev/sdc1 /media/chad ; copy something; Unmount it: umount /media/chad ;","tags":"Tech","url":"http://leetschau.github.io/living-in-window-manager.html","loc":"http://leetschau.github.io/living-in-window-manager.html"},{"title":"Lightweight Image Edition on Linux","text":"Resize image file on Ubuntu/Mint in console: sudo apt - get install imagemagick convert < input - file > - resize 50 % < output - file > Or use built-in GUI programe 'gthumb' (install with sudo aptitude install gthumb ) for some basic image manipulations, such as crop, rotate, resize, convert format (for example, convert jpg image to png). Click \"Edit file\" button on the right-hand side of toolbar, then select \"Crop\". Add Lock Wallpaper to i3lock: First test i3lock with i3lock -i /home/chad/.i3/wallpaper.png . If succeeds, add the following line into ~/.i3/config: bindsym $ sup + l exec \" i3lock -i /home/chad/.i3/wallpaper.png \"","tags":"Tech","url":"http://leetschau.github.io/lightweight-image-edition-on-linux.html","loc":"http://leetschau.github.io/lightweight-image-edition-on-linux.html"},{"title":"Run Linux Without Desktop Environment","text":"RRM-based Linux On rpm-based Linux, runlevel 3 means text mode, 5 means X desktop mode. So if you want only start OS without desktop environment, modify runlevel from 5 to 3. You can do this as root with command: init 3 , or modify /etc/inittab file and reboot: from: id : 5 : initdefault : to: id : 3 : initdefault : Need verified. Linux Mint Open file /boot/grub/grub.cfg, in section \"### BEGIN /etc/grub.d/10_linux ###\", and then \"menuentry ...\", there's a command \"linux /boot/vmlinuz...\", replace string \"quiet splash\" with \"text\", save file and reboot. Here \"quiet\", \"splash\" and \"text\" are all starting options. If you want only display Mint splash window, without printing boot messages, and finally start into console (not the login manager, GDM), use \"quiet splash text\". Verified 2014/5/5. Note: /etc/inittab is a config file originally used by init of Unix system V, which is deprecated by most Linux distros now. It's replaced by upstart or systemd. Ref: Boot directly into terminal - no GUI Chapter 15. Controlling Access to Services Upstart","tags":"Tech","url":"http://leetschau.github.io/run-linux-without-desktop-environment.html","loc":"http://leetschau.github.io/run-linux-without-desktop-environment.html"},{"title":"Start GUI Application on Another Screen","text":"On host A, start up a desktop environment like gnome or window manager like i3, start a terminal, run echo $DISPLAY , then you get the display number of this screen, like \":0\". Open a terminal on host B and ssh to the previous one, run following command: $ export DISPLAY=:0 $ gvim Then you can see the gvim open in the screen of the host A. In most cases the remote display is \":10\". So on host A, if you set DISPLAY as \":10\", you will display a GUI window on the screen of host B. Running the codes below on host A, you can find the display number of hosts ssh to it: netstat - lnt | awk ' sub(/.*:/,\"\",$4) && $4 >= 6000 && $4 < 6100 { print ($1 == \"tcp6\" ? \"ip6-localhost:\" : \"localhost:\") ($4 - 6000) }' For example: localhost:10 ip6-localhost:10 means the remote display is \":10\". Ref: http://askubuntu.com/questions/47642/how-to-start-a-a-gui-software-on-a-remote-linux-pc-via-ssh http://unix.stackexchange.com/questions/17255/is-there-a-command-to-list-all-open-displays-on-a-machine","tags":"Tech","url":"http://leetschau.github.io/start-gui-application-on-another-screen.html","loc":"http://leetschau.github.io/start-gui-application-on-another-screen.html"},{"title":"Install i3 on Ubuntu Server","text":"Install i3 on Ubuntu Server # echo \"deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe\" >> / etc / apt / sources . list # apt - get update // don ' t worry error messages at this stage # apt - get --allow-unauthenticated install sur5r-keyring # apt - get update # apt - get install xinit # apt - get install i3 # apt - get install tilda // a light - weight terminal # useradd - m chad # su - chad $ startx Quit i3 and edit ~/.i3/config, specify tilda as the default termial: bindsym $ mod + Return exec tilda Start i3 again, you can use $mod+Return to start tilda window now. Make executable searchable by dmenu Add PATH=\"$PATH:$HOME/.local/bin\" into ~/.zshenv . For example: cat << EOF > ~/ . local / bin / chrom export http_proxy = https : // localhost : 1080 export https_proxy = https : // localhost : 1080 chromium - browser EOF chmod 755 ~/ . local / bin / chrom Now chrom will appear in dmenu 's list. \"warning: no locale support\" error in dmenu If the shortcut for dmenu $mod+d not work, start dmenu_run in console. If it returns \"warning: no locale support\" and quit, add export LC_ALL=\"en_US.UTF-8\" into /usr/bin/dmenu_run and that's all. Verified on 2018.7.19, i3wm, Ubuntu Server 16.04. Install i3 on a Host can't access Internet Install i3 on a Ubuntu Server VM; copy the /var/cache/apt/archives folder of this VM to the blocked host; On blocked host: cd /var/cache/apt/archives dpkg -i *.deb In the future if you want install something else (say, firefox), move all deb files in another folder, than apt-get install firefox , then copy all deb files in archives folder to the blocked host, than dpkg -i *.deb again. Install i3 on a H3C blocked Host This is the best method among these three. It's easy and fast to install, easy to switch back to desktop environment. If you already has data on the disk, they will be kept. Install a full version Linux (include Desktop environment to install i3 online), only i386 version can work with H3C now. Only live DVDs which can install without internet can work here Here I use Mint Xfce. Install Mint Xfce with LiveDVD without Internet; After installation, login, get online with firefox, install H3C client, and run: echo \"deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe\" >> /etc/apt/sources.list apt-get update // don't worry error messages at this stage apt-get --allow-unauthenticated install sur5r-keyring apt-get update apt-get install i3 // dmenu and i3lock will be installed together useradd -m chad passwd chad vi /boot/grub/grub.cfg // add \"text\" after \"quiet splash\" Reboot, login as chad, run: $ echo \" exec i3 \" > ~/ . xinitrc $ startx To enable ibus-pinyin, $mod+D: ibus-setup. To add a \"green\" application in dmenu, say \"~/apps/eclipse-java-juno-SR2/eclipse\", edit ~/.zshrc, add its path: export PATH = $ PATH : / home / chad / apps / eclipse - java - juno - SR2 then quit i3 ($mod+Shift+e), run $ source ~/.zshrc $ startx Now you can see \"eclipse\" in dmenu.","tags":"Tech","url":"http://leetschau.github.io/install-i3-on-ubuntu-server.html","loc":"http://leetschau.github.io/install-i3-on-ubuntu-server.html"},{"title":"Set Static IP on Linux","text":"Ubuntu You need to know the static IP, netmask and gateway IP. To test your network, set static IP temporarily: # ip addr // get the interface name : eth0 # ifconfig eth0 10 . 32 . 22 . 10 netmask 255 . 255 . 255 . 0 # route add default gw 10 . 32 . 22 . 254 eth0 Then test network with \"ping\" command. If it's OK, set it permanently: # cat / etc / network / interfaces // before modification : dhcp auto eth0 iface eth0 inet dhcp # cat / etc / network / interfaces // after modification : static IP auto eth0 iface eth0 inet static address 10 . 32 . 22 . 10 netmask 255 . 255 . 255 . 0 gateway 10 . 32 . 22 . 254 Now reboot the static IP will take effect. Note that the value of \"gateway\" is determined by route -n , the value in column \"Gateway\" after destination \"0.0.0.0\". Arch Linux # ip addr flush enp2s0 # ip addr add 10 . 32 . 22 . 10 / 24 dev enp2s0 # ip route add default via 10 . 32 . 22 . 254","tags":"Tech","url":"http://leetschau.github.io/set-static-ip-on-linux.html","loc":"http://leetschau.github.io/set-static-ip-on-linux.html"},{"title":"Install 32bit Arch Linux","text":"Partition Disk and Install 32bit Arch Linux Create usb install key: $ dd bs=4M if=warez/archlinux-2014.04.01-dual.iso of=/dev/sdb && sync Startup laptop with usb key and select \"Boot Arch Linux (i686)\"; Connect wifi: wpa_supplicant -B -i wlp5s0 -c <(wpa_passphrase TP-LINK_PocketAP_8344C2 py25) dhcpcd wlp5s0 Partition disk: sgdisk --zap-all /dev/sda cgdisk /dev/sda // create 20G, 50G, 20G, 50G, 20G, 50G, 20G, 50G, 105G, totally 9 partitions // This is a gpt partition, where can't install Windows, because Windows only support MBR partition parted /dev/sda print // print the partition tables mkfs.ext4 /dev/sda1 mkfs.ext4 /dev/sda2 lsblk -f // display the current partition layout Mount partition: mount /dev/sda1 /mnt mkdir /mnt/home mount /dev/sda2 /mnt/home Select a mirror: vi /etc/pacman.d/mirrorlist Install the base system: (so cool~) pacstrap -i /mnt base Create fstab and chroot: genfstab -U -p /mnt >> /mnt/etc/fstab arch-chroot /mnt /bin/bash Set locale: vi /etc/locale.gen // uncomment en_US.UTF-8 & zh_CN.UTF-8 locale-gen echo LANG=en_US.UTF-8 > /etc/locale.conf export LANG=en_US.UTF-8 setfont Lat2-Terminus16 (optional) Set time zone: ln -s /usr/share/zoneinfo/Hongkong /etc/localtime // now date command will give corrent time hwclock --systohc --utc Set hostname: echo blackpad > /etc/hostname vi /etc/hosts Config wireless (modify the wireless name based on your machine): pacman -S iw wpa_supplicant dialog wpa_actiond systemctl enable netctl-auto@wlp5s0.service Set root passwd: passwd Install and configure a bootloader: pacman -S gptfdisk pacman -S syslinux // install syslinux boot loader because we create gpt partition earlier. Install grub will produce an error. syslinux-install_update -i -a -m vi /boot/syslinux/syslinux.cfg // modify \"APPEND root=/dev/sda1 rw\" in \"LABEL arch\" section Shutdown, unplugged usb key and restart laptop; Start wifi connection: wifi-menu wlp5s0 // get interface name with iw dev Choose a SSID, enter the key, press \"OK\", then you can see \"Interface wlp5s0 is controlled by netctl-auto\", use ip addr or ping ... to verify network. Install SSH service: pacman -Syu openssh systemctl start sshd systemctl enable sshd.service Install the second System Start laptop with YUMI usb key; Startup a openSUSE 13.1 live dvd, install system on /dev/sda3 and /dev/sda4, reboot; startup laptop, it prints: multiple active partitions, start failed; Startup labtop with Arch USB key, delete openSUSE partitions, reboot, Arch is back; Startup a CentOS live DVD, install system on /dev/sda3 and /dev/sda4, rebuild boot loader, reboot; Startup laptop, only CentOS can start, it print \"boot error\" when choose \"Arch Linux\" to start; Startup labtop with Arch USB key, delete CentOS partitions, reboot, only a GNU Grub command line; This experiment failed. Install i3 # useradd - m - s / usr / bin / bash chad # pacman - S xorg - server xorg - server - utils xorg - xinit # pacman - S dmenu i3 # pacman - S gnome // this big one ( almost 1 GB ) is necessary , only gnome - shell can ' t work # pacman - S xf86 - video - intel xf86 - input - synaptics // video and touchpad driver , there will be a \" could not open module intel \" error without them // they take effect after installation without reboot # su - chad $ echo \" exec i3 \" > ~/ . xinitrc $ startx Install Chinese IM # pacman - S ibus - libpinyin # su - chad $ ibus - setup Then select \"Chinese - Intelligent Pinyin\" under \"Input Method\" tab, and click \"Preferences\" to customize it. The package \"ibus-sunpinyin\" is OK, too. \"ibus-pinyin\" can't work properly. \"ibus-rime\" can only input traditional Chinese.","tags":"Tech","url":"http://leetschau.github.io/install-32bit-arch-linux.html","loc":"http://leetschau.github.io/install-32bit-arch-linux.html"},{"title":"Gentoo Notes","text":"Install Follow Gentoo Linux x86 Handbook . Download gentoo install CD install-x86-minimal-20140415.iso from its website x86 minimal site ; Create USB installer: dd bs=4M if=warez/archlinux-2014.04.01-dual.iso of=/dev/sdb && sync ; Use this usb key start the laptop; Create a wpa_supplicant conf file: $ cat /etc/wpa_supplicant/wpa_supplicant.conf network={ ssid=\"TP-LINK...\" psk=\"py...\" scan_ssid=1 proto=WPA2 } Connect WiFi: /etc/init.d/wpa_supplicant start , verify: ping another host in your wifi network; Test network with ping www.baidu.com , if you can't connect to it, config network: ifconfig wlp5s0 down ifconfig wlp5s0 192.168.1.103 broadcast 192.168.1.255 netmask 255.255.255.0 up route add default gw 192.168.1.253 // get gateway IP with route -n on another host If you still can't ping a internet website, run dhcpcd wlp5s0 to generate nameservers(stored in /etc/resolv.conf); Partition disk; The command \"emerge-webrsync\" in step \"Configuring Portage\" which download Portage snapshot from 163.com is very slow(about 15 minutes); Config kernel manually: make menuconfig : Processor type and features -> Processor family: Core 2/newer Xeon, but there are many errors due to hardware info mismatch. So I give up and use \"genkernel\" utility to compile the kernel. It takes about 25 minutes; ls /boot/kernel* : /boot/kernel-genkernel-x86-3.12.13-gentoo; ls /boot/initr* : /boot/initramfs-genkernel-x86-3.12.13-gentoo Install vim with emerge vim ; emerge sys-boot/grub is slow; After reboot, only loopback nic is detected wiht ifconfig command. modprobe wlp5s0 modprobe: FATAL: Module wlp5s0 not found ifconfig wlp5s0 up wlp5s0: ERROR while getting interface flags: No such device dmesg | grep iwlwifi ... request for firmware file 'iwlwifi-1000-5.ucode' failed. ... genkernel --menuconfig all mark \"Intel Wireless WiFi MVM Firmware support\" Device Drivers -> Network device support (NETDEVICES) -> Wireless LAN (WLAN) -> IEEE 802.11 for Host AP -> Support downloading firmw -> ISDN Support -> Siemens Gigaset support -> Ethernet driver support: all intel ethernet drivers emerge -v iwlwifi-1000-5.ucode Start with usb key, Create a wpa_supplicant conf file; # / etc / init . d / wpa_supplicant start // connect to wifi . # mount / dev / sda4 / mnt / gentoo // 4 . f : Mounting # mkdir / mnt / gentoo / boot # mount / dev / sda2 / mnt / gentoo / boot # mount - t proc proc / mnt / gentoo / proc // 6 . a . Chrooting : Mounting the necessary Filesystems ; # mount -- rbind / sys / mnt / gentoo / sys # mount -- rbind / dev / mnt / gentoo / dev # chroot / mnt / gentoo / bin / bash # source / etc / profile # export PS1 = \" (chroot) $PS1 \" # emerge sys - apps / pciutils // install lspci # emerge ... // install iwconfig # ifconfig - a wlp5s0 ... # emerge net - wireless / wpa_supplicant # ls / lib / firmware / // there is no \" iwlwifi-1000-5.ucode microcode.dat \" # emerge sys - kernel / linux - firmware # ls / lib / firmware / iwlwifi * / lib / firmware / iwlwifi - 1000 . 5 . ucode # create the wpa_supplicant . conf file # / etc / init . d / net . wlp5s0 start","tags":"Tech","url":"http://leetschau.github.io/gentoo-notes.html","loc":"http://leetschau.github.io/gentoo-notes.html"},{"title":"Package Management on Arch Linux","text":"Search packages: pacman -Ss pkg1 pkg2 ... ; Install packages with updated repo: pacman -Syu pkg1 pkg2 ... ; Remove a package and its dependencies which is not required by other installed packages: pacman -Rs pkg1 ; Remove a package and leaving all its dependencies installed: pacman -R pkg1 ; Remove all orphaned packages: pacman -Rns $(pacman -Qtdq) ; Ref: pacman on Arch Linux.","tags":"Tech","url":"http://leetschau.github.io/package-management-on-arch-linux.html","loc":"http://leetschau.github.io/package-management-on-arch-linux.html"},{"title":"i3 Window Manager on ArchLinux","text":"i3 is a good wm(window manager), it's powerful and easy to install. It supports system tray, app like golden-dict will have a icon in system tray after it's closed. Install # pacman - S xorg - server xorg - server - utils # pacman - S xorg - xinit # pacman - S dmenu # pacman - Syu gnome // use ` pacman - Rsc gnome ` to remove package and its dependencies # pacman - S i3 $ echo \" exec i3 \" > ~/ . xinitrc $ startx Configuration Config file: ~/.i3/config. Define Alt key: set $ mod Mod4 Define Win key: set $ sup Mod1 Adjust the font of titlebar: font pango : Dejavu Sans Mono 11 Add custom keybindings: bindsym $ mod + Control + l exec i3lock - c 000000 Reload configurations (run in shell): i3 - msg reload Application Autostart Add start command before \"exec i3\" in ~/.xinitrc. For example, the following lines in ~/.xinitrc start USB stisk, clipboard and Chinese input method manager when i3wm startup: fcitx & parcellite & udiskie & xbindkeys exec i3 Search Application You can use dmenu as xfce4-appfinder on Xfce. For example, after install R-Studio-Desktop with yaourt -S rstudio-desktop-bin , input 'studio' in dmenu (press Alt-D to invoke it), you can find the full name of RStudio Desktop is \"rstudio-bin\". Applications Terminal and File Manager Xfce family is small and powerful. Install them with pacman -S xfce4-terminal and pacman -S thunar . xfce4-terminal is much better for eyes than Terminator. Web Browser Install Chromium with sudo pacman -S chromium . Install flash plugin for Chromium with yaourt -S chromium-pepper-flash . Now you can use website which need flash support, such as Baidu Netdisk . Text Editor Clipboard-support enabled vim: gvim; PDF Viewer Evince is small and poweroff. Install it with sudo pacman -S evince . Office Suite WPS is OK, but the fcitx doesn't work in it. Installed FreeOffice , it need providing Email to activate, give up. fcitx can be used in Abiword. But Abiword is only a word processor, no spred sheets support. Wireless Card Install wifi utilities: pacman -S iw wpa_supplicant dialog wpa_actiond ; List wireless card status: iwconfig ; Scan and Connect to hot point: sudo wifi-menu Remember this hot point for auto-connection later (modify the wireless name based on your machine): systemctl enable netctl-auto@wlp5s0.service ; Ref: Wireless network configuration netctl Status Bar Customization For i3status, use man i3status to determine the configuration file position, here it's ~/.config/i3status/config. Then cp /etc/i3status.conf ~/.i3status.conf as template. Modify the ethernet and wireless card name in both \"order += ...\" and function definition line. Frequently used keybindings \"M\" means $mod key, \"S\" means Shift key. M-d: application launcher; M- : start a termianl; M-f: full screen current app; M-S-q: quit M-S-c: reload config without restart; M-2: jump to workspace 2; M-S-2: move application to workspace 2; USB Automount & Unmount See note \"Automount USB Disk on Linux\". Power Management First install polkit with sudo pacman -S polkit , which enable normal users run power management command without root privilege (sudo). Then add a executable script into /usr/local/bin: cat / usr / local / bin / pm # !/ bin / sh lock () { i3lock } case \" $1 \" in lock ) lock ;; logout ) i3 - msg exit ;; suspend ) lock && systemctl suspend ;; hibernate ) lock && systemctl hibernate ;; reboot ) systemctl reboot ;; shutdown ) systemctl poweroff ;; * ) echo \" Usage: $0 {lock|logout|suspend|hibernate|reboot|shutdown} \" exit 2 esac exit 0 $ sudo chmod 755 / usr / local / bin / pm Now using pm suspend to suspend, pm reboot to reboot, and pm shutdown to shutdown computer. Ref: i3 on Arch Wiki .","tags":"Tech","url":"http://leetschau.github.io/i3-window-manager-on-archlinux.html","loc":"http://leetschau.github.io/i3-window-manager-on-archlinux.html"},{"title":"Add Chinese Character Display Support on Linux","text":"Step 1: Can the termianl display unicode character? If this terminal is set to display UTF-8 character? $ echo -e '\\xe2\\x82\\xac' € If the euro sign can't be displayed, ssh to this host via another host which can display UTF-8 character, and run this command remotely via ssh. If the euro sign displayed, it's verified your terminal do not support UTF-8, you have to install another UTF-8 supported terminal. Ref: \"My terminal doesn't support UTF-8\" in Locale of ArchLinux Documentation. Step 2: Can the editor display unicode character? If you find Chinese characters can't be displayed correctly in vim, cat this file, if cat display them correctly, that's a problem in your settings of vim, jump to section 'vim settings'. If cat can't display it, too, that's the system's problem, jump to section 'Add system language support'. vim settings Run :set encoding=utf-8 in vim editor. If it works, add this setting into vim settings file: echo 'set encoding=utf-8' >> /usr/share/vim/vimrc . Here the position of system-wide vim setttings (/usr/share/vim/vimrc) is specified by vim --version | grep 'system vimrc file' and vim --version | grep 'fall-back for $VIM' . System language support Ubuntu List all locales installed on the system: $ locale -a If there's no 'zh_CN.utf8', that's why the Chinese character can't be displayed in shell (not in vim). Run sudo locale-gen zh_CN.utf8 . Test result: export LC_ALL=en_US.utf-8 . Notice LC_ALL=en_US (without .utf8 ) can't display UTF-8 charaters correctly! Enable it permanently: add \"LANG=en_US.UTF-8\" or \"LC_ALL=en_US.UTF-8\" into /etc/default/locale, and refresh it: sudo locale-gen . Arch Linux $ sudo pacman -Syu vim // install vim and xxd Convert file encodings $ iconv -l | GBK $ iconv -l | UTF-8 $ iconv -f gbk -t utf-8 <filename>","tags":"Tech","url":"http://leetschau.github.io/add-chinese-character-display-support-on-linux.html","loc":"http://leetschau.github.io/add-chinese-character-display-support-on-linux.html"},{"title":"A Powerful Linux Command Line Calculator Based on bc","text":"Create a shell script named my-calculator.sh under ~/apps: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash # Example: ./my-calculator ih od 23A+34B => echo 'ibase=16;obase=10;23A+34B' | bc # where \"ih\" means \"input is hex\", \"od\" means \"output is decimal\" # ./my-calculator ih oh echo 'ibase=16;obase=10;A+A' | bc if [[ $# -gt 3 ]] ; then echo Bad format: more than 3 arguments found exit 1 fi in = 10 out = 10 for op in $@ ; do if [[ $op = 'ib' ]] ; then in = 2 elif [[ $op = 'id' ]] ; then in = 10 elif [[ $op = 'ih' ]] ; then in = 16 elif [[ $op = 'ob' ]] ; then out = 2 elif [[ $op = 'od' ]] ; then out = 10 elif [[ $op = 'oh' ]] ; then out = 16 else expr = $op fi done echo echo \\\" obase = $out \\; ibase = $in \\; $expr \\\" \\| bc echo \"obase= $out ;ibase= $in ; $expr \" | bc Note: put obase BEFORE ibase, or the obase will based on ibase. For example, the result of echo \"ibase=16;obase=10;A+A\" | bc is 14, but not 20. After \"ibase=16\", the \"10\" in \"obase=10\" is actually a hex, not a decimal. To avoid interfered by ibase, we should always declare obase before ibase. Now add \"alias mc=/home/chad/apps/my-calculator.sh\" into your ~/.zshrc, you can do hex calculation by: $ mc ih oh A+A Add hex numbers and output to decimal: $ mc ih A+A Convert a hex into decimal: $ mc ih 23B Convert a decimal to hex: $ mc oh 23432 Some ordinary decimal calculation: $ mc 234 +345","tags":"Tech","url":"http://leetschau.github.io/a-powerful-linux-command-line-calculator-based-on-bc.html","loc":"http://leetschau.github.io/a-powerful-linux-command-line-calculator-based-on-bc.html"},{"title":"C++ Develop Environment with vim on Linux","text":"ctags Install $ sudo apt-get install exuberant-ctags Usage $ cd $PROJECT_HOME $ ctags -R * $ vi MyApp.cpp Some frequently used shortcuts: Go to definition: Ctrl-] Jump back from definition: Ctrl-t C-w C-]: Open the definition in a horizontal split C-o/i: jump between items in jump list; gf: \"go to file\", open the file under the cursor; gd: \"go to definition\", go to the definition of a variable; Ref: http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks Buffer explorer Install Download bufexplorer-7.4.2.zip from it's website ; unzip it to ~/.vim/bundle/ (you have to install pathogen before hand); restart vim; Usage :h buffer-explorer be, bs, bv I defined my key to comma(let mapleader=\",\") in .vimrc, so open buffer explorer window with \",be\". Tagbar This plugin is for C/C++ code outline. Installation: Downlaod majutsushi-tagbar-v2.6.1-0-ge872e67.zip from it's website , unzip to ~/.vim/bundle/ and restart vim. :h tagbar :TagbarToogle to open outline window; try , p, in outline window. c.vim Download cvim.zip v6.1.1 from its website . Unzip it to ~/.vim/bundle. Add the following line to ~/.vimrc to override the default key: let g : C_MapLeader = ',' Use \",rc\" to save and compile. Use :cn , :cp , :cfirst , :clast , :cc , :cclose , :copen to traverse in quickfix list (see :h quickfix for full list of hotkeys). Use F9 or \",rr\" to run source file. Use \"2. Usage without GUI\" and \" 3. Hotkeys\" in :h csupport for full list of hotkeys. Configuration for REPL Add \":nnoremap : make %:r && ./%:r \" to ~/.vimrc; Open vim, copy the following c++ codes into it: using namespace std; int main() { cout << \"hello C++.\\n\"; } Save the file, syntastic(search tag syntastic for installation and usage details) will report an error: ‘cout' was not declared in this scope Add \"#include \" at the beginning of the file, save it, and press , you can see the result;","tags":"Tech","url":"http://leetschau.github.io/c-develop-environment-with-vim-on-linux.html","loc":"http://leetschau.github.io/c-develop-environment-with-vim-on-linux.html"},{"title":"Java Bitwise Operations","text":"Some bitwise operations in groovy shell, better install this shell via gvm. $ groovysh groovy:000> bb = 205 === > 205 groovy:000> cc = -51 === > -51 groovy:000> Integer.toBinaryString ( bb ) === > 11001101 groovy:000> Integer.toBinaryString ( cc ) === > 11111111111111111111111111001101 groovy:000> Integer.toBinaryString ( cc >> 2 ) === > 11111111111111111111111111110011 groovy:000> Integer.toBinaryString ( cc >>> 2 ) === > 111111111111111111111111110011 groovy:000> bb == ( cc & 0xFF ) === > true So Java use 4 bytes to represent a integer. The left-most bit is \"1\" when the integer is a negative, otherwise the position is \"0\". The \"var & 0xFF\" converts the first 3 bytes to 0. In other words, this method converts var into 0~255. Conversion between binary string and integer and bytes. groovy : 000 > aa = 45 ===> 45 groovy : 000 > aas = Integer . toBinaryString ( aa ) ===> 101101 groovy : 000 > aa == Byte . parseByte ( aas , 2 ) ===> true groovy : 000 > aa . getClass () ===> class java . lang . Integer groovy : 000 > aas . getClass () ===> class java . lang . String","tags":"Tech","url":"http://leetschau.github.io/java-bitwise-operations.html","loc":"http://leetschau.github.io/java-bitwise-operations.html"},{"title":"Analyze Binary File in Linux","text":"On Linux there are some utility to analyze binary files, such as xxd, od, hexdump, which are much convenient and powerful than UltraEdit on Windows. $ cat test abcdefg hijklmn opq rst uvw xyz $ xxd test 0000000 : 6162 6364 6566 670a 6869 6a6b 6c6d 6e0a abcdefg.hijklmn. 0000010 : 6f70 710a 7273 740a 7576 770a 7879 7a0a opq.rst.uvw.xyz. $ xxd -b test 0000000 : 01100001 01100010 01100011 01100100 01100101 01100110 abcdef 0000006 : 01100111 00001010 01101000 01101001 01101010 01101011 g.hijk 000000c: 01101100 01101101 01101110 00001010 01101111 01110000 lmn.op 0000012 : 01110001 00001010 01110010 01110011 01110100 00001010 q.rst. 0000018 : 01110101 01110110 01110111 00001010 01111000 01111001 uvw.xy 000001e: 01111010 00001010 z. $ xxd -b -s 10 test 000000a: 01101010 01101011 01101100 01101101 01101110 00001010 jklmn. 0000010 : 01101111 01110000 01110001 00001010 01110010 01110011 opq.rs 0000016 : 01110100 00001010 01110101 01110110 01110111 00001010 t.uvw. 000001c: 01111000 01111001 01111010 00001010 xyz. $ xxd -b -s 0x10 test 0000010 : 01101111 01110000 01110001 00001010 01110010 01110011 opq.rs 0000016 : 01110100 00001010 01110101 01110110 01110111 00001010 t.uvw. 000001c: 01111000 01111001 01111010 00001010 xyz. $ xxd -b -s 3 -l 10 test 0000003 : 01100100 01100101 01100110 01100111 00001010 01101000 defg.h 0000009 : 01101001 01101010 01101011 01101100 ijkl $ xxd -b -s 3 -l 10 -c 1 test 0000003 : 01100100 d 0000004 : 01100101 e 0000005 : 01100110 f 0000006 : 01100111 g 0000007 : 00001010 . 0000008 : 01101000 h 0000009 : 01101001 i 000000a: 01101010 j 000000b: 01101011 k 000000c: 01101100 l $ xxd -p -s 3 -l 10 test 646566670a68696a6b6c Compare hex and binary files line by line: $ xxd -b -c 2 binaryfile > o1 $ xxd -c 2 binaryfile > o2 $ paste o1 o2 0000000 : 11001101 11001101 .. 0000000 : cdcd .. 0000002 : 00000000 00101110 .. 0000002 : 002e .. 0000004 : 10011000 00000011 .. 0000004 : 9803 .. 0000006 : 11101011 00100000 . 0000006 : eb20 . 0000008 : 00000010 10001011 .. 0000008 : 028b .. 000000a: 01000011 00111000 C8 000000a: 4338 C8 000000c: 00001011 10111111 .. 000000c: 0bbf .. 000000e: 10011011 01100101 .e 000000e: 9b65 .e 0000010 : 10000111 00001111 .. 0000010 : 870f .. 0000012 : 00100000 00100000 0000012 : 2020 0000014 : 00000010 00011100 .. 0000014 : 021c .. 0000016 : 01111001 00000001 y. 0000016 : 7901 y. 0000018 : 01110110 01011100 v \\ 0000018 : 765c v \\ 000001a: 00000000 00011011 .. 000001a: 001b .. 000001c: 00101100 01111101 , } 000001c: 2c7d , } 000001e: 00010001 00011011 .. 000001e: 111b .. 0000020 : 01100101 10001111 e. 0000020 : 658f e. 0000022 : 10100010 01010100 .T 0000022 : a254 .T 0000024 : 10101000 01011011 . [ 0000024 : a85b . [ 0000026 : 00101100 10010011 ,. 0000026 : 2c93 ,. 0000028 : 11100101 01110100 .t 0000028 : e574 .t 000002a: 00100010 11011001 \". 000002a: 22d9 \" . 000002c: 01100000 01100000 `` 000002c: 6060 `` 000002e: 11101001 00011111 .. 000002e: e91f .. 0000030 : 00000000 00000000 .. 0000030 : 0000 ..","tags":"Tech","url":"http://leetschau.github.io/analyze-binary-file-in-linux.html","loc":"http://leetschau.github.io/analyze-binary-file-in-linux.html"},{"title":"Arch Linux Notes","text":"按照 Beginners' guide on Arch LInux 在虚拟机上安装了Arch Linux，文档写得非常好，首先从 Arch Linux Downloads 下载的镜像文件archlinux-2014.04.01-dual.iso，然后在VirtualBox中新建虚拟机，加载这个镜像，然后根据\"Beginners' guide on Arch Linux\"一步一步做完就行了，感觉对Linux的认识又深入了。 其中配置网络部分\"2.9 Configure the network\"没有做，重启之后发现网络不通，又按照dhcp方法用netctl工具重做了这一节，重启后网络可用。 大概两个半小时装好了base系统，163有arch Linux mirror，所以包下载速度很快。然后安装窗口管理器。 首先安装X系统：pacman -S xorg-server xorg-server-utils 然后安装display manager: pacman -S xorg-xinit 然后安装Awesome window manager: pacman -S awesome 安装i3: pacman -S i3 修改.xinitrc文件，登录后执行startx命令就进入了图形界面。 安装SSH服务 # pacman - S openssh # systemctl start sshd # systemctl enable sshd . service 之后就可以用Kitty连接192.168.1.102:22端口了。 用pacman安装fabric和vagrant都是最新版本，so cool. 4月28日更新： 按照 USB Flash Installation Media 介绍的方法，首先把U盘插到机器上，然后用 $ ls -la /dev/sd* 找到U盘的设备文件名：sdb 然后用下面的命令创建了启动U盘： $ dd bs = 4 M if = warez / archlinux - 2014 . 04 . 01 - dual . iso of =/ dev / sdb && sync 无需使用root帐号。几分钟就OK了，奇怪的是做好的U盘在笔记本（联想V480）上无法启动，在DELL PC机上却能够正常启动。 注意/dev/sd*这个设备后面不能有数字，比如如果of=/dev/sdb1,则做出来的U盘不能启动系统。 4月29日更新： 晚上在家折腾Arch Linux，搞定了内核安装，主要是配置无线网络部分花了很多时间： netctl disable my-network verify: ls /etc/systemd/system/multi-user.target.wants/ reboot $ iw dev => wlp5s0 $ wpa_supplicant -B -i wlp5s0 -c <(wpa_passphrase TP-LINK_PocketAP_8344C2 py25) Successfully ... iw dev wlp5s0 link 凌晨之后尝试多次后又搞定了桌面环境，首先尝试I3，失败，估计是由于很多必须的组件还没有装，然后尝试enlightenment，失败，然后尝试安装完整的GNOME，这次居然成功了： # pacman - S gnome # startx 如果报startx未找到，说明没装X环境，安装下面的包： lspci | grep VGA => intel pacman -S xf86-video-intel pacman -S xorg-server xorg-server-utils pacman -S xorg-xinit 5月1日： 使用Win Key作为i3的Mod1键运行i3系统成功，Win+Enter启动terminal，Win+Shift+E退出i3； 用 pacman -S xf86-input-synaptics 为K27安装触摸板驱动成功，似乎没有Mint自动装的驱动的鼠标乱跳现象；","tags":"Tech","url":"http://leetschau.github.io/arch-linux-notes.html","loc":"http://leetschau.github.io/arch-linux-notes.html"},{"title":"Console Web Browser Notes","text":"lynx On Mint: sudo apt-get install lynx . Getting help: Shift + /; Configuration: o (open VI mode here), the configuration file is ~/.lynxrc; Move cursor to previous/next link: up/down arrow keys, or j/k if \"vi mode\" turned on; Line up/down: Ctrl-p/n; Move backward in history (like backspace in Firefox): left arrow key; Quit lynx: q; Copy text: drag mouse button; Add bookmark: a Goto bookmark: v lynx bookmark can remember file and page position. While bookmark of elinks only remember file, and always load the first page. Copying text need only draging mouse, while elinks need pressing shift key at the same time. So lynx is more convenient than elinks. elinks On Mint: sudo apt-get install elinks . Config key bindings in ~/.elinks/elinks.conf. Append the following lines into it: bind \"main\" \"j\" = \"move-cursor-down\" bind \"main\" \"k\" = \"move-cursor-up\" bind \"main\" \"K\" = \"keybinding-manager\" You can use mouse as in the GUI browser. Show menu: press key; Show keybindings: K; Line up/down: Ctrl-p/n; Quit elinks: q; Move cursor to previous/next link: j/k or up/down arrow keys; Copy text: press Shift key and drag mouse; Copy current page URL(Ctrl-L on Firefox): =, then copy URL; Add/Show bookmark: s; Set a mark: m followed by a single character, for example \"ma\", or \"mz\". The mark only exists within a elinks session. It won't exist after elinks restart. Goto a mark: '(single quote). For example: 'a, or 'z. It only works when cursor is in the same frame as it's set. Jump to next frame: tab;","tags":"Tech","url":"http://leetschau.github.io/console-web-browser-notes.html","loc":"http://leetschau.github.io/console-web-browser-notes.html"},{"title":"Add vim mode for eclipse with Vrapper","text":"Installation Install vrapper 0.42.0 in market place of eclipse. Install with proxy (in Linux) Run commands: $ cd $ECLIPSE_HOME $ export http_proxy=http://127.0.0.1:8087 $ export https_proxy=http://127.0.0.1:8087 $ ./eclipse After eclipse startup, install vrapper as usual. The proxy will work for eclipse automatically. Uninstall vrapper and other plugin in main menu of Help -> About Eclipse -> Installation Details . Configuration Config vrapper behavior in ~/.vrapperrc : cat << EOF > ~/ . vrapperrc nnoremap ; : set ts = 2 set sw = 2 EOF Usage Ref: Vrapper Documentation","tags":"Tech","url":"http://leetschau.github.io/add-vim-mode-for-eclipse-with-vrapper.html","loc":"http://leetschau.github.io/add-vim-mode-for-eclipse-with-vrapper.html"},{"title":"Shutdown VirtualBox VM Forcibly When it's Stuck in Stopping Status","text":"Today I shutdown a VM using vagrant command vagrant halt , it's stuck in \"stopping\" status, and when I use VBoxManage controlvm <vm-name> poweroff to shutdown it, it raise an error: VBoxManage : error : The virtual machine is being powered down VBoxManage : error : Details : code VBOX_E_INVALID_VM_STATE ( 0x80bb0002 ), component Console , interface IConsole , callee nsISupports VBoxManage : error : Context : \"PowerDown(progress.asOutParam())\" at line 224 of file VBoxManageControlVM . cpp So the only solution is kill the VM process: $ ps -ef | grep VBox And a process named \"/opt/VirtualBox/VBoxHeadless --comment ... --startvm ...\" is the target (identified by the comment). Kill it then.","tags":"Tech","url":"http://leetschau.github.io/shutdown-virtualbox-vm-forcibly-when-its-stuck-in-stopping-status.html","loc":"http://leetschau.github.io/shutdown-virtualbox-vm-forcibly-when-its-stuck-in-stopping-status.html"},{"title":"Install Package on openSUSE","text":"The best options of the method to install packages in openSUSE in orders are: Use YaST/Zypper to install from an openSUSE repo; Use YaST/Zypper to install from a community repo; Search at software.openSUSE.org; Download rpm file and use YaST to install it; Download rpm file and use rpm at a CLI to install it; Download, compile and install source; Use a one-click install found at software.openSUSE.org with CAUTION; Use alien and deb with CAUTION; Use any other one-click install anywhere on the net with CAUTION;","tags":"Tech","url":"http://leetschau.github.io/install-package-on-opensuse.html","loc":"http://leetschau.github.io/install-package-on-opensuse.html"},{"title":"BVT Environment Based on Vagrant","text":"Process Install common software in provision script, such as JDK, Ant; Write a shell script for a given build task; Run this script in Jenkins; Use Case Vagrantfile config . vm . box = \" precise64 \" config . vm . define \" bs \" do | bvtserver | bvtserver . vm . hostname = \" bvt-server \" bvtserver . vm . network \" private_network \" , ip : \" 192.168.50.3 \" , virtualbox__intnet : \" gcptest-network \" bvtserver . vm . provider : virtualbox do | vbox | vbox . customize [ \" modifyvm \" , : id , \" --natnet1 \" , \" 10.3/16 \" ] end bvtserver . vm . provision : shell , path : \" bvtprov.sh \" , privileged : false end bvtprov.sh This script install Subversion, zip, JDK and Ant on this VM. 1 2 3 4 5 6 7 8 9 10 11 #!/bin/sh sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime sudo dpkg -i /vagrant/packages/svn_amd64_ubuntu12.04/*.deb sudo dpkg -i /vagrant/packages/zip_3.0-4_amd64.deb mkdir /home/vagrant/apps cd /home/vagrant/apps chmod 755 /vagrant/packages/jdk-6u45-linux-x64.bin sh /vagrant/packages/jdk-6u45-linux-x64.bin tar jxf /vagrant/packages/apache-ant-1.9.3-bin.tar.bz2 export PATH = $PATH :/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin export LC_ALL = en_US.UTF-8 A build task: build-gcp-web-6.1_P2_GZ.sh This script checkout codes from Subersion server and compile, make zip for a specific project. export PATH = $ PATH : / home / vagrant / apps / jdk1 . 6 . 0 _45 / bin : / home / vagrant / apps / apache - ant - 1 . 9 . 3 / bin export LC_ALL = en_US . UTF - 8 projname = \" GCP6.1_P2_GZ \" svnprefix = ' svn co --non-interactive --no-auth-cache --username bvt --password mypwd ' svnroot = ' http://10.0.2.59:8118/svn/gcp/Development-Area ' $ svnprefix ${ svnroot } / 7 - Tools / deployment / packages / pubs / vagrant / packages $ svnprefix ${ svnroot } / 3 - SCL / Branch / $ projname / vagrant / codes / $ projname rm - rf / vagrant / codes /*.zip web_build=/vagrant/codes/web_build rm -rf $web_build; mkdir $web_build tar zxf /vagrant/packages/apache-tomcat-6.0.39.tar.gz -C $web_build/ mv $web_build/apache-tomcat-6.0.39 $web_build/web_server cp -r /vagrant/codes/$projname/WebRoot $web_build/web_server/webapps/$projname src_dir=/vagrant/codes/$projname/src class_dir=$web_build/web_server/webapps/$projname/WEB-INF/classes lib_dir=/vagrant/codes/$projname/WebRoot/WEB-INF/lib find $src_dir -type f -name \"*.java\" -exec javac -cp \"$lib_dir/*:$src_dir\" -d $class_dir {} \\; rsync -auC --exclude='*.java' $src_dir/ $class_dir/ cd /vagrant/codes/web_build; zip -q ../$projname.zip -r web_server -x \"*/ . svn /*\" pkg_prefix=/vagrant/codes/${projname}- rm -rf ${pkg_prefix}* pkgs=${pkg_prefix}$(date +%Y%m%dT%H%M) mkdir $pkgs cp /vagrant/codes/*.zip $pkgs Run this task on Jenkins Add the following shell commands in the \"GCP-Web-6.1_P2_GZ\" project in Jenkins: cd ~/ docs / bvtvm vagrant ssh [ vm - name ] - c 'sh /vagrant/build-gcp-web-6.1_P2_GZ.sh' The [vm-name] is the VM you want ssh to, \"bs\" in this case. If you have only one vm defined in Vagrantfile, you can omit the it, or you can get the value of it via vagrant status ; Note: Try to avoid usage of relative path in scripts. If you have to(sush as make a tar file), use 'cd -' to jump back after operations.","tags":"Tech","url":"http://leetschau.github.io/bvt-environment-based-on-vagrant.html","loc":"http://leetschau.github.io/bvt-environment-based-on-vagrant.html"},{"title":"openSUSE Notes","text":"Install Vagrant and VirtualBox on openSUSE GNOME 13.1 Download VirtualBox-4.3.10-93012-Linux_amd64.run from VirtualBox website; Update zypper: $ zypper update; Install components to compile VirtualBox: $ zypper in gcc kernel-devel kernel-desktop kernel-desktop-devel reboot Run the downloaded .run file to install VirtualBox; Download vagrant_1.4.3_x86_64.rpm from Vagrant website; Install it with rpm -ivh vagrant_1.4.3_x86_64.rpm ; Other issues You need start network service manually at system startup in openSUSE GNOME 13.1: service NetworkManager start ; Enable SSH Server on openSUSE: YaST -> Firewall, add SSH Server to \"Allowed Services\".","tags":"Tech","url":"http://leetschau.github.io/opensuse-notes.html","loc":"http://leetschau.github.io/opensuse-notes.html"},{"title":"Package Management on openSUSE 13.1","text":"Add zypper proxy: Add http and https proxy in file /etc/sysconfig/proxy; YaST: Find a fast repo: http://mirrors.opensuse.org/ http://mirrors.hust.edu.cn/opensuse/ -> http://mirrors.hust.edu.cn/opensuse/update/13.1/ add repo: zypper ar -c http://mirrors.ustc.edu.cn/opensuse/update/13.1/ ustc list repo with priority: zypper lr -p modify repo priority: zypper mr -p 100 ustc zypper mr --help Refresh repo: zypper ref ustc Update or install from a specific repo: zypper up -r ustc Average 200KB/s.","tags":"Tech","url":"http://leetschau.github.io/package-management-on-opensuse-131.html","loc":"http://leetschau.github.io/package-management-on-opensuse-131.html"},{"title":"System Benchmark Utility on Linux","text":"sysbench Install: yum install sysbench or apt-get install sysbench ; Usage $ man sysbench $ sysbench --help $ sysbench --test = cpu --cpu-max-prime = 20000 run $ sysbench --test = memory help $ sysbench --test = memory run $ sysbench --test = fileio --file-total-size = 150G prepare Phoronix Test Suite Installation Download phoronix-test-suite-5.0.0.tar.gz from its homepage Unzip it and run \"install-sh\" in it; It will prompt you install php-cli and php-xml (on CentOS 6.4) if you haven't install them. Usage $ phoronix - test - suite --help $ phoronix - test - suite list - tests $ phoronix - test - suite list - tests | grep '[Mm]emory' $ phoronix - test - suite install pts / ramspeed $ phoronix - test - suite run pts / ramspeed Ref: How To Benchmark Your System (CPU, File IO, MySQL) With sysbench UnixBench Linux benchmarking tools Benchmarking Tools For Linux Servers","tags":"Tech","url":"http://leetschau.github.io/system-benchmark-utility-on-linux.html","loc":"http://leetschau.github.io/system-benchmark-utility-on-linux.html"},{"title":"Find out Linux Version You Are Running","text":"Find the \"release\" file and print its content: $ ls -ld /etc/*release $ cat ... # the *-release file This is valid for most Linux distros, such as CentOS, Debian, Gentoo, Fedora, Ubuntu, Mint ... Or get the information from the login screen: $ cat /etc/issue For Debian family distros, like Ubuntu, Mint: $ ls -ld /etc/*version $ cat ... The final solution is lsb command, but not all distros support it. $ lsb_release -a Ref: How do I find out what version of Linux I'm running?","tags":"Tech","url":"http://leetschau.github.io/find-out-linux-version-you-are-running.html","loc":"http://leetschau.github.io/find-out-linux-version-you-are-running.html"},{"title":"curl Notes","text":"Ref: 9 uses for cURL worth knowing","tags":"Tech","url":"http://leetschau.github.io/curl-notes.html","loc":"http://leetschau.github.io/curl-notes.html"},{"title":"Note about Load Balancing","text":"There are 2 kinds of load balancing: transport-level and application-level load balancing. The former load balancer deals with every tcp connection. The load balancing decision is made on the TCP level (Layer 4 of the OSI Reference Model). One of the routing mode Network Address Translation (NAT) routing. The latter load balancer deals with every HTTP request. The load balancing decision is made on the content of the HTTP request. Ref: Server load balancing architectures, Part 1: Transport-level load balancing Server load balancing architectures, Part 2: Application-level load balancing","tags":"Tech","url":"http://leetschau.github.io/note-about-load-balancing.html","loc":"http://leetschau.github.io/note-about-load-balancing.html"},{"title":"Baidu PCS Account","text":"PCS是\"百度个人云存储\"，可以提供类似Dropbox文件同步功能，今天晚上用Dropbox Uploader试验文件的列表，速度太慢，遂尝试用百度作为云端文件中转服务。 PCS主页是http://developer.baidu.com/wiki/index.php?title=docs/pcs。 权限申请 http://developer.baidu.com/ Login: ltsc 管理控制台 -> 开发者服务管理 -> DSNote 这里可以看到创建工程的ID, API Key 和 Secret Key，但使用PCS API需要Access Token，这个需要申请后才能获得，申请方法是： 项目页面左下角：其他API -> PCS API 也可以在这里创建新工程，类型选择\"移动客户端\"。 文档操作API文档 http://developer.baidu.com/ 帮助文档首页 -> PCS -> REST API -> 文件API列表 http://developer.baidu.com/wiki/index.php?title=docs/pcs/rest/file_data_apis_list Ref: Linux VPS使用百度网盘API上传备份文件","tags":"Tech","url":"http://leetschau.github.io/baidu-pcs-account.html","loc":"http://leetschau.github.io/baidu-pcs-account.html"},{"title":"Vim on openSUSE","text":"You need install \"vim-data\" for syntax coloring in vim. Run command zypper in vim-data .","tags":"Tech","url":"http://leetschau.github.io/vim-on-opensuse.html","loc":"http://leetschau.github.io/vim-on-opensuse.html"},{"title":"Install Fabric 1.8.3 on a Internet-blocked CentOS 6.4","text":"This host can't access internet directly, but I built a tinyproxy server on 10.21.3.31:8888. So on this host I setup a HTTPS proxy: # export https_proxy = http : // 10 . 21 . 3 . 31 : 8888 # export http_proxy = http : // 10 . 21 . 3 . 31 : 8888 Then pip can use this proxy to install fabric. The following installation process is based on How to install Python 2.7 and Python 3.3 on CentOS 6 yum groupinstall development yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel Download Python 2.7.6 source code tarball from http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz tar xf Python-2.7.6.tar.xz cd Python-2.7.6 ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\" make && make altinstall Verify: which python2.7 Download setuptools-3.4.3.zip from https://pypi.python.org/pypi/setuptools unzip setuptools-3.4.3.zip cd setuptools-3.4.3 python2.7 setup.py install Download pip-1.5.4.tar.gz from https://pypi.python.org/pypi/pip tar zxvf pip-1.5.4.tar.gz cd pip-1.5.4 python2.7 setup.py install Verify: which pip2.7 ; pip2.7 install fabric If it doesn't work, download Fabric-1.8.3.tar.gz , paramiko-1.12.3.tar.gz and pycrypto-2.6.1.tar.gz on PYPI, the install them locally: # pip2 . 7 install pycrypto - 2 . 6 . 1 . tar . gz # pip2 . 7 install paramiko - 1 . 12 . 3 . tar . gz # pip2 . 7 install Fabric - 1 . 8 . 3 . tar . gz Verify: fab --version ; Bingo!","tags":"Tech","url":"http://leetschau.github.io/install-fabric-183-on-a-internet-blocked-centos-64.html","loc":"http://leetschau.github.io/install-fabric-183-on-a-internet-blocked-centos-64.html"},{"title":"Disable Certain Package Updates Using YUM in CentOS","text":"Get the Exclusion List # yum update yum list all updates, choose which you don't want update. Update without some packages In command line # yum --exclude=firefox\\* --exclude=thunderbird\\* update or: # yum - x 'firefox*' - x 'thunderbird*' update Disable them permanently Add the following line into /etc/yum.conf: exclude = firefox * thunderbird * Ref: Disable Certain Package Updates using YUM in RHEL / CentOS / Fedora RHEL/CentOS: yum Update All Packages Except the Linux Kernel Force yum update Command To Exclude Certain Packages","tags":"Tech","url":"http://leetschau.github.io/disable-certain-package-updates-using-yum-in-centos.html","loc":"http://leetschau.github.io/disable-certain-package-updates-using-yum-in-centos.html"},{"title":"Copy Files from PC to Huawei Pad","text":"MediaPad是android3.2平台，支持USB MTP功能，能与PC互相拷贝文件而无需mount，USB MTP的使用方法如下： 在Window XP系统下，需要预装Windows MediaPlay11，Win7系统无需安装 PC第一次连接MediaPad时会提示自动安装Hisuit软件，安装完成后MTP驱动已随软件安装。 在MediaPad的右下角状态栏会显示USB已经连接的图标，点击后选择\"MTP initiator connected\" 出现一个android usb的界面，enable之后就可以在PC上看到多出一个\"mediapad\"的移动磁盘，可以看到并复制拷贝存储/SD卡上的文件。 参考： http://bbs.huaweifan.com/shouji-4017.html#52877","tags":"Tech","url":"http://leetschau.github.io/copy-files-from-pc-to-huawei-pad.html","loc":"http://leetschau.github.io/copy-files-from-pc-to-huawei-pad.html"},{"title":"Awk Notes","text":"Print the last line: awk 'END{print $0}' Print the second last field: awk '{print $(NF-1)}' Print the second last field of last line: awk 'END{print $(NF-1)}' Set a complex delimiter: awk -F ', ' 'END{print $(NF-1)}' Note: You can't use double quotes instead of single quotes, or an error raises. Case study: convert timestamp The input file: $ cat test.csv STATION_ID,DEVICE_ID,MONITOR_TIME,CURRENT_VALUE,VOLTAGE_VALUE OXT,04001406,2019-03-20 11 :38:19.679,6.2,679.1 OXT,04001702,2019-03-20 11 :45:45.779,6.0,669.0 OXT,04001702,2019-03-20 11 :57:33.731,6.4,665.0 OXT,02000906,2019-03-20 11 :39:52.074,3.5,730.4 OXT,02000906,2019-03-20 11 :49:31.618,3.7,717.1 OXT,02000906,2019-03-20 11 :50:44.541,3.7,719.2 OXT,02001301,2019-03-20 11 :41:45.810,3.7,710.5 OXT,02001301,2019-03-20 11 :44:29.355,3.5,734.1 OXT,02001301,2019-03-20 11 :45:08.453,3.5,729.1 We need to remove milliseconds in timestamp of each record, for example: from OXT,04001406,2019-03-20 11:38:19.679,6.2,679.1 to OXT,04001406,2019-03-20 11:38:19,6.2,679.1 . While keep the header line unchanged. Solutions: Option 1: using ternary operator: awk -F, '{print (NR==1)? $0 : $1 FS $2 FS substr($3, 1, 19) FS $4 FS $5}' test.csv . Here -F and FS for field seperator , NR for the number of row . To concat multiple string fields, list their names and seperate with whitespace. The ternary operator is a expression instead of a statement. Here it's used as the target of print . Or make the code easier to read through a variable definition: awk -F, '{text = $1 FS $2 FS substr($3, 1, 19) FS $4 FS $5; print (NR==1)? $0 : text}' test.csv Note: using ; to seperate statements. There's no $ prefix before plain variable names. Option 2: using if-else statement: awk -F, '{if (NR==1) print $0; else print $1 FS $2 FS substr($3, 1, 19) FS $4 FS $5}' test.csv Don't forget the semicolon after the if clause. Or use a multiline statement: $ awk ' BEGIN{FS=\",\"} { if ( NR == 1 ) print $0 else print $1 FS $2 FS substr ( $3 , 1 , 19 ) FS $4 FS $5 } ' test.csv Finally output to a file: awk '...' test.csv > result.csv .","tags":"Tech","url":"http://leetschau.github.io/awk-notes.html","loc":"http://leetschau.github.io/awk-notes.html"},{"title":"Use Apt Fast to Speedup apt-get","text":"Install # apt - get install axel aria2 # apt - get install python - software - properties # add - apt - repository ppa : apt - fast / stable # apt - get update # apt - get install apt - fast # apt - fast update Usage # apt - fast python - dev Not very fast.","tags":"Tech","url":"http://leetschau.github.io/use-apt-fast-to-speedup-apt-get.html","loc":"http://leetschau.github.io/use-apt-fast-to-speedup-apt-get.html"},{"title":"Linux Benchmarking","text":"Some Theory http://stackoverflow.com/questions/368472/linux-benchmarking-tools Linux Benchmarking HOWTO . Tools Disk IO Benchmark Writing Speed $ dd bs = 1 M count = 512 if =/ dev / zero of = test conv = fdatasync from Simple Disk Benchmarking in Linux Using 'dd' Reading Speed $ hdparm -tT $( df $HOME | awk 'FNR == 2 {print $1}' ) where \"df $HOME|awk 'FNR == 2 {print $1}'\" get the disk name of the $HOME folder. For example, on my laptop it is /dev/sda1, on 49 server it is /dev/mapper/vg_bocoty49-lv_root. In awk command, \"FNR == 2\" means the second line. This is the \"origin\" version: $ hdparm -tT /dev/sda from How to Test the Read and Write Speeds of a Hard Disk in Linux . Another reference: https://wiki.archlinux.org/index.php/Hdparm Network Throughput Benchmark Run the following command on the \"server\" host, not the \"client\" host which is testd. $ cat testspeed . sh filesize = $3 dd bs = 1 M count = $f ilesize if =/ dev / zero of = test timeres = $ ( / usr / bin / time - p scp test $1 @ $2 : / home / $1 / 2 >& 1 >/ dev / null ) echo timeres : $ timeres duration = $ ( echo $ timeres | awk ' FNR == 1 {print $2} ' ) echo duration : $d uration speed = $ ( echo \" scale=2; $filesize / $duration \" | bc - l ) echo $ speed MB / s The output format of \"time\" and \"bc\" command varies depending on distro of OS, so I only implements above on my OS: Linux Mint 14. The \"-p\" options give a better output format of this command. The output of \"scp\" is in stdout, while that of \"time\" in stderr, so I hide stdout and redirect stderr to stdout, so the output can be processed by the following \"awk\". \"bc -l\" do a float division instead of a integer division. \"scale=2\" set the division scale (precision) to 2 digits after the period. Run this scprit with a 64MB test file: $ ./speed.sh chad 10 .0.2.49 64 Now with a 128MB test file: $ ./testspeed.sh 128 Note: iperf is network throughput tool, but it has to be installed. So it's a little complicated.","tags":"Tech","url":"http://leetschau.github.io/linux-benchmarking.html","loc":"http://leetschau.github.io/linux-benchmarking.html"},{"title":"Ruby on Rails Note","text":"Installation Install Javascript runtime Install nvm , then add a node.js version: $ nvm install 0 .10.26 $ nvm use 0 .10.26 Install Ruby environment Install rvm , then add a ruby version: $ rvm install 2 .1.0 $ rvm use 2 .1.0 Install Ruby on rails $ gem install rails $ rails new first_app Start RoR server $ cd first_app ; rails server Note: You will need to apt-get -f install; apt-get install apt-get install libsqlite3-dev on Linux Mint to create RoR project. If you didn't install javascript runtime, or didn't add it to current session with nvm use ... , you will get the following error when starting rails server: rails server autodetect could not find a javascript runtime...","tags":"Tech","url":"http://leetschau.github.io/ruby-on-rails-note.html","loc":"http://leetschau.github.io/ruby-on-rails-note.html"},{"title":"Java Memory Schedule","text":"Test program (TestFreeMemory.java): public class TestFreeMemory { public static void main(String [] args){ long maxMem = Runtime.getRuntime().maxMemory()/(1024*1024) ; System.out.println(\"Max Mem : \" + maxMem); long freeMem = Runtime.getRuntime().freeMemory()/(1024*1024); System.out.println(\" Free Mem : \" + freeMem); long totalMem = Runtime.getRuntime().totalMemory()/(1024*1024); System.out.println(\" Total Mem : \" + totalMem ); } } $ javac TestFreeMemory.java $ java -Xms32m -Xmx500m TestFreeMemory Max Mem: 444 Free Mem: 30 Total Mem: 30 $ java -Xms64m -Xmx500m TestFreeMemory Max Mem: 444 Free Mem: 61 Total Mem: 61 $ java -Xms64m -Xmx1024m TestFreeMemory Max Mem: 910 Free Mem: 61 Total Mem: 61 $ java -Xms32m -Xmx2048m TestFreeMemory Max Mem: 1820 Free Mem: 30 Total Mem: 30 You can see (444/500)=(910/1024)=(1820/2048), so Runtime.getRuntime().maxMemory() is determined by \"-Xmx\", which presents the upper limit of java process. The Runtime.getRuntime().totalMemory() is the initial memory capacity, which is determined by \"-Xms\" , it will grow when needed by program, until to \"-Xmx\". $ java -Xms32m -Xmx20480m TestFreeMemory Max Mem: 18204 Free Mem: 30 Total Mem: 30 $ free -m total used free shared buffers cached Mem: 15937 15759 178 0 248 3068 -/+ buffers/cache: 12443 3494 Swap: 8039 641 7398 The upper limit of physical memory is 15GB, while I declared 20GB max memory for java process. This shows that the \"-Xmx\" is a nominal value, which means java won't check its realizability when startup.","tags":"Tech","url":"http://leetschau.github.io/java-memory-schedule.html","loc":"http://leetschau.github.io/java-memory-schedule.html"},{"title":"Groovy Develop Environment Based on GVM","text":"Install yum install - y java - 1 . 7 . 0 - openjdk - devel curl - s get . gvmtool . net | bash source \"/root/.gvm/bin/gvm-init.sh\" gvm i groovy 2 . 2 . 1 Usage groovysh groovy hw . groovy All files and installed components are in folder ~/.gvm. So simply remove this folder for uninstallation of gvm. gvm is portable, so if you install gvm as root, just copy .gvm folder to $HOME, chown, then gvm c to show the current groovy version. If it's not what you want, gvm use groovy 2.2.1 to update it. Install gvm to another host, first copy .gvm folder, then add \"source ~/.gvm/bin/gvm-init.sh\" into .bashrc(or .zshrc), then check and setup in new host as above.","tags":"Tech","url":"http://leetschau.github.io/groovy-develop-environment-based-on-gvm.html","loc":"http://leetschau.github.io/groovy-develop-environment-based-on-gvm.html"},{"title":"Linux System Log","text":"ArchLinux # journalctl - f CentOS sudo tail -f /var/log/messages or sudo tail -f /var/log/syslog ; System logs The login/logout of every user (including root) is recorded in /var/log/secure. All system logs are under the folder /var/log: cron -- Logs for all cronjobs that are run on the server dmesg -- Logs from dmesg program which is used to examine or control the kernel ring buffer. lastlog -- The binary log that contains all of the last login information. (Type \"last\" to view) messages -- System logs from syslogd mysqld.log -- Logs from the mysqld process secure -- Access logs from the sshd process yum.log -- Logs from system updates via yum Who loged in as root? cd /var/log; grep 'session opened for user root by' * Get the user gaia last 5 login records: $ last -5 gaia gaia pts/5 10 .21.2.82 Wed Apr 2 10 :30 - 15 :04 ( 04 :33 ) ... So you can get the login source IP, login duration, etc. Configure logs File \"/etc/logrotate.conf\" define the log file rotation frequency, count, etc. If you want to add a system log, add a definition file in /etc/logrotate.d/. Command history Add \"export HISTTIMEFORMAT=' %F %T '\" into /etc/profile, then when use command history , you will see the command with a timestamp. This only works for bash, it's invalid for zsh. A use case A couple of days ago, some users find they can't write in their $HOME folder. I found it's because the owner of their home folder is changed to another user. Obviously this is done by root, but who and when do this actually? The following is how I worked it out. Find out when this happened? $ su - history|grep chown ... 804 2014-03-12 11:24:33 chown -R gcp /home ... Who did this? cd /var/log; grep 'session opened for user root by' * ... secure-20140316:Mar 12 09:44:12 bocoty49 su: pam_unix(su:session): session opened for user root by gcp(uid=501) ... Who is the 'gcp'? last -10 gcp ... gcp pts/6 10.21.2.106 Wed Mar 12 08:33 - 13:35 (05:01) ... This whole story: the man with IP \"10.21.2.106\" ssh to the server at 08:33, switch to root with \"su\" at 09:44:12, run \"chown -R gcp /home\" at 11:24:33.","tags":"Tech","url":"http://leetschau.github.io/linux-system-log.html","loc":"http://leetschau.github.io/linux-system-log.html"},{"title":"Distribute SSH Pubkey to Multiple Hosts with Fabric","text":"Generate ssh keys on source host with ssh-keygen ; Disable known_hosts prompt(optional): add \"StrictHostKeyChecking no\" into ~/.ssh/config; Run fabric script to distribute pubkey, you have to input password manually: fab distkey ; $ cat fabfile.py from fabric.api import local, task env.hosts = ['10.0.2.48', '10.0.2.49', '10.0.7.141', '10.0.7.142', '10.0.7.143'] @task def distkey(): env.user = 'gcp' local('ssh-copy-id %(user)s@%(host)s' % env) You have to input password for every host. So try to use uniform password for all hosts. It will save you lots of times.","tags":"Tech","url":"http://leetschau.github.io/distribute-ssh-pubkey-to-multiple-hosts-with-fabric.html","loc":"http://leetschau.github.io/distribute-ssh-pubkey-to-multiple-hosts-with-fabric.html"},{"title":"Task Management in Fabric","text":"I am developing a environment detect application with Fabric. Basically it run many tests on many hosts, then produce a summary report, optionally sending a email. In the codes below for example, function \"detect\" should run on every host, but \"report\" and \"sendmail\" should run only once. So there are 2 strategies: Define global hosts, when detections over, modify the hosts to none, so report and send email will only run once; Use \"report\" as entrance, invoke detection within \"report\" task. Global hosts style fabfile.py: from fabric.api import run , env , hosts import re env . hosts = [ 'chad@10.0.2.47' , 'chad@10.0.2.49' ] env . password = 'mypasswd' env [ 'report' ] = {} def checkJDK (): res = run ( 'java -version' ) cre = 'java version .*1.6.0.*Java\\(TM\\)' return len ( re . findall ( cre , res , re . S )) > 0 def checkMem ( str ): re . findall ( '.*buffers/cache.*\\d+\\s+(\\d+)' , str ) def checkOS (): res = run ( 'uname -a' ) return res . split ()[ 0 ] def detect (): host_report = {} host_report [ 'os' ] = checkOS () host_report [ 'jdk' ] = checkJDK () env [ 'report' ][ env . host ] = host_report env . hosts = [] # make following tasks run once def report (): print ( 'Test Report:' ) print ( env . report ) def sendmail (): print ( 'send mail...' ) Run it: $ fab -- hide = everything detect report sendmail Test Report : { ' 10.0.2.49 ' : { ' os ' : ' Linux ' , ' jdk ' : True }, ' 10.0.2.47 ' : { ' os ' : ' Linux ' , ' jdk ' : False }} send mail ... \"execute\" style fab2.py: from fabric.api import run , env , task , execute import re def checkJDK (): res = run ( 'java -version' ) cre = 'java version .*1.6.0.*Java\\(TM\\)' return len ( re . findall ( cre , res , re . S )) > 0 def checkMem ( str ): re . findall ( '.*buffers/cache.*\\d+\\s+(\\d+)' , str ) def checkOS (): res = run ( 'uname -a' ) return res . split ()[ 0 ] def detect (): env . password = env . loginfo [ env . host_string ] host_report = {} host_report [ 'os' ] = checkOS () host_report [ 'jdk' ] = checkJDK () return host_report @task def report (): env . hosts = [ 'gcp@10.0.2.48' , 'gcp@10.0.2.49' , 'gcp@10.0.7.141' , 'gcp@10.0.7.142' , 'gcp@10.0.7.143:22' ] pwds = [ 'gcp' , 'gcp' , 'gcp@123' , 'gcp@123' , 'gcp@123' ] env . loginfo = dict ( zip ( env . hosts , pwds )) res = execute ( detect , hosts = host_list ) print ( 'Test Report:' ) print ( res ) @task def sendmail (): print ( 'send mail...' ) Run it: $ fab - f fab2 . py -- hide = everything report sendmail Test Report : { ' gcp @10.0.2.47 ' : { ' os ' : ' Linux ' , ' jdk ' : False }, ' gcp @10.0.2.49 ' : { ' os ' : ' Linux ' , ' jdk ' : True }, ... } send mail ... You can see there is no definition and modification of global hosts, no need to maintain global variable env['report'] manually in \"report\" style, and the \"detect\" function is hide from \"fab\" command line with the help of \"@task\" decorator. If you run \"fab detect\", it will complain \"Command(s) not found\", which provides more accurate visibility control. So I think it's better than the \"global hosts\" style. Notes: the return value of \"run\" is the stdout and stderr of the remote command. Yuo can add attributes to \"env\" directly like \"env.loginfo = ...\" above. And use this attribute with \"env.loginfo[...]\"; The format of host string is \"user@ip:port\", or \"user@ip\" if port is 22; The function \"execute\" returns a dict, the key is the host_string, the value is the return value of the function executed (\"detect\" in this case). The return value of \"detect\" is a dict, so the \"execute\" function returns a nested dict. for fabric 1.11, you can use run_once decorator .","tags":"Tech","url":"http://leetschau.github.io/task-management-in-fabric.html","loc":"http://leetschau.github.io/task-management-in-fabric.html"},{"title":"System Memory Cost of Several Linux Distros","text":"The 3 numbers after the distro name is: used memory, free memory and used percent(= used/(used + free)). Scientific Linux Gnome 64bit: 286 1560 15.49 CentOS 6.4 Gnome 64bit: 281 1565 15.22 Mint 14 Xfce 64bit: 249 1596 13.50 openSUSE13 Gnome 64bit : 454 1392 24.59 openSUSE12 KDE 64bit: 404 1442 21.89 You can see Mint Xfce has smallest memory cost, while openSUSE has biggest.","tags":"Tech","url":"http://leetschau.github.io/system-memory-cost-of-several-linux-distros.html","loc":"http://leetschau.github.io/system-memory-cost-of-several-linux-distros.html"},{"title":"A Python Environment Detector","text":"The users of this app provides the method to get result (command on remote host), the check standard (a callback function), information about target host (ip and username), and an optional timeout of execution time. With the envdet module, you can get the result: if the command output obey the check standard. The application module, detapp.py: import logging from envdet import rcmd logger = logging . getLogger ( 'DetectApp' ) logger . setLevel ( logging . DEBUG ) fh = logging . FileHandler ( 'detect.log' ) fh . setLevel ( logging . DEBUG ) ch = logging . StreamHandler () ch . setLevel ( logging . INFO ) formatter = logging . Formatter ( ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) ch . setFormatter ( formatter ) fh . setFormatter ( formatter ) logger . addHandler ( ch ) logger . addHandler ( fh ) def isOracleJDK ( str ): return 'Java(TM)' in str res = rcmd ( 'bvt' , '10.0.2.47' , 'java -version' , isOracleJDK ) logger . info ( 'Check result: %s ' % res ) The environment detection module, envdet.py: from subprocess import Popen , PIPE , STDOUT import signal import logging logger = logging . getLogger ( 'DetectApp.envdet' ) def handler ( signum , frame ): logger . error ( 'Signal handler called with signal: %d ' % signum ) raise IOError ( \"Command execution timeout!\" ) def rcmd ( user , host , cmd , check_handler , timeout = 10 ): signal . signal ( signal . SIGALRM , handler ) signal . alarm ( timeout ) cmdstr = \"ssh %s @ %s 'source /etc/profile; %s '\" % ( user , host , cmd ) p = Popen ( cmdstr , close_fds = True , shell = True , stdout = PIPE , stderr = STDOUT ) fullres = line = '' while p . poll () is None : out = p . stdout . read ( 1 ) fullres = fullres + out if out == ' \\n ' : logger . debug ( line ) line = '' else : line = line + out logger . debug ( '----ret of cmd %s is: %d ----' % ( cmd , p . returncode )) return check_handler ( fullres ) The technical points here are: Run shell command in Python and retrieve output and return code; Use signal to limit the overall running time of commands on remote host over SSH; The logging utility across multiple modules, notice the naming rules: . . So if you rename the module name, rename it's logger accordingly.","tags":"Tech","url":"http://leetschau.github.io/a-python-environment-detector.html","loc":"http://leetschau.github.io/a-python-environment-detector.html"},{"title":"Run Script on Remote Host via SSH","text":"user='bvt' host='10.0.2.47' ssh \\(user@\\) host 'bash' <<EOF source /etc/profile java -version hostname EOF You need copy your ssh pub key to target host before hand, or you will have to enter the password at runtime. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/run-script-on-remote-host-via-ssh.html","loc":"http://leetschau.github.io/run-script-on-remote-host-via-ssh.html"},{"title":"Install Fabric 1.8.3 Manually on Linux","text":"Ubuntu 12.04 When you install Fabric with apt-get install fabric , you get a fabric with version 1.3.x, which is too old. So we need install it manually: # apt - get install - y python - dev # apt - get install - y python - pip # pip install fabric That's it. If you want to speed up the installation process, download Fabric-1.8.3.tar.gz and paramiko-1.12.3.tar.gz from PYPI. Then install them with: # pip install paramiko - 1 . 12 . 3 . tar . gz # pip install Fabric - 1 . 8 . 3 . tar . gz Note: when install from source (tar.gz file), python-dev is necessary, or you will get a compile error. CentOS 6.4 # yum install - y python - devel # yum install - y python - pip # pip install fabric In a new OS, you should run apt-get update or yum update .","tags":"Tech","url":"http://leetschau.github.io/install-fabric-183-manually-on-linux.html","loc":"http://leetschau.github.io/install-fabric-183-manually-on-linux.html"},{"title":"Delete Trailing Spaces with Vim","text":":%s/\\s+$","tags":"Tech","url":"http://leetschau.github.io/delete-trailing-spaces-with-vim.html","loc":"http://leetschau.github.io/delete-trailing-spaces-with-vim.html"},{"title":"Build Web Server with Apache and Passenger","text":"Follow the instructions at 2.6. Generic installation, upgrade and downgrade method: via tarball of Phusion Passenger users guide, Apache version Build web server on a precise64 Ubuntu virtual machine with vagrant. First download the tar file from this website, then create a vagrant file: $ pwd / home / chad / docs / passenger $ ls passenger - 4 . 0 . 40 . tar . gz Vagrantfile $ cat Vagrantfile # -*- mode : ruby -*- # vi : set ft = ruby : $ script = << EOF echo ' Acquire::http::Proxy \"http://10.21.3.31:8087\"; ' > / etc / apt / apt . conf apt - get update apt - get install rake apt - get install libcurl4 - openssl - dev apt - get install apache2 - mpm - worker apt - get install apache2 - threaded - dev / usr / bin / gem install rack apt - get install libapr1 - dev apt - get install libaprutil1 - dev mkdir / opt / passenger cd / opt / passenger tar zxvf / vagrant / passenger - 4 . 0 . 40 . tar . gz # cd passenger - 4 . 0 . 40 #. / bin / passenger - install - apache2 - module EOF VAGRANTFILE_API_VERSION = \" 2 \" Vagrant . configure ( VAGRANTFILE_API_VERSION ) do | config | config . vm . box = \" precise64 \" config . vm . define \" svr \" do | server | server . vm . hostname = \" www.httpserver.com \" server . vm . provider : virtualbox do | vbox | vbox . customize [ \" modifyvm \" , : id , \" --natnet1 \" , \" 10.3/16 \" ] vbox . customize [ \" modifyvm \" , : id , \" --memory \" , 1000 ] end server . vm . network \" forwarded_port \" , guest : 80 , host : 8765 config . vm . provision \" shell \" , inline : $ script end end","tags":"Tech","url":"http://leetschau.github.io/build-web-server-with-apache-and-passenger.html","loc":"http://leetschau.github.io/build-web-server-with-apache-and-passenger.html"},{"title":"Secure Shell基于密钥的连接过程","text":"客户端(C)连接服务端(S)时，会在自己的~/.ssh/known_hosts中记录S名称的Hash（如果希望在known_hosts文件中使用原服务端名称，在/etc/ssh/ssh_config中去掉\"HashKnownHosts yes\"，或者在~/.ssh/config中增加\"HashKnownHosts no\"）以及一个很长的特征串，当有人伪装成S骗取密码，或者S操作系统重装之后，由于后面这个特征串发生了变化，所以ssh会发出警告，只有从~/.ssh/known_hosts中删掉要连接的S那一行才能重新连接。 使用密钥而不是密码登录S的好处是不需要每次输入密码，且能够避免\"中间人攻击\"，基于密钥的配置过程是： C创建自己的公钥和私钥(ssh-keygen命令）； C将自己的公钥保存到S（ssh-copy-id命令，实际上是加自己的公钥加入了S的~/.ssh/authorized_keys文件中）； 这样就配置好了，以后当客户端需要登录服务端时，连接过程是： C与S首先进行Diffie–Hellman key exchange（参考http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange 其中的插图对这种算法为什么是安全的解释的很清楚：密钥的混合类似于颜色的混合，反向操作几乎是不可能的，因此将混合后的密钥在网络上传输是安全的），最终生成本次会话的密钥； 后续的报文基于上面生成的密钥进行对称加密传输（也就是加密和解密使用同一个密钥）。 网上有写SSH登录过程使用非对称加密传输（及公钥加密、私钥解密，见http://en.wikipedia.org/wiki/Public-key_cryptography），这是SSH v1的加密方式。 详细的连接过程参考man sshd.","tags":"Tech","url":"http://leetschau.github.io/secure-shellji-yu-mi-yao-de-lian-jie-guo-cheng.html","loc":"http://leetschau.github.io/secure-shellji-yu-mi-yao-de-lian-jie-guo-cheng.html"},{"title":"Join Two Files Line to Line in Each Row","text":"Here is a demo about how to join 2 files in each row: $ head head.txt TY-HD-01-001 TY-HD-01-002 TY-HD-01-003 TY-HD-01-004 TY-HD-01-005 TY-HD-01-006 TY-HD-01-007 TY-HD-01-008 TY-HD-01-009 TY-HD-01-010 $ head tail.txt fa_cg_nb_c_000157 fa_cg_nb_d_001571 fa_cg_nb_d_000432 fa_cg_nb_d_001796 fa_cg_nb_d_001675 fa_cg_nb_d_001198 fa_cg_nb_d_001768 fa_cg_nb_d_001445 fa_cg_nb_d_000703 fa_cg_nb_d_001563 $ paste -d '-' head.txt tail.txt > all.txt $ head all.txt TY-HD-01-001-fa_cg_nb_c_000157 TY-HD-01-002-fa_cg_nb_d_001571 TY-HD-01-003-fa_cg_nb_d_000432 TY-HD-01-004-fa_cg_nb_d_001796 TY-HD-01-005-fa_cg_nb_d_001675 TY-HD-01-006-fa_cg_nb_d_001198 TY-HD-01-007-fa_cg_nb_d_001768 TY-HD-01-008-fa_cg_nb_d_001445 TY-HD-01-009-fa_cg_nb_d_000703 TY-HD-01-010-fa_cg_nb_d_001563 Note: The EOL(end of line) must be Unix style. If it's Windows style, the \"paste\" command will produce wrong results.","tags":"Tech","url":"http://leetschau.github.io/join-two-files-line-to-line-in-each-row.html","loc":"http://leetschau.github.io/join-two-files-line-to-line-in-each-row.html"},{"title":"Text Expansion in Vim","text":"Vim You have 2 options: imap and abbr. Use \"pt\" for abbreviation of \"Puppet\" for example, first open your vim or gVim: imap: \":imap pt Puppet\"; abbr: \":ab pt Puppet\"; The difference is, imap will expand text right after you press \"t\", while for abbr, you have to type a space or tab or enter after the \"t\" to perform text expansion. So when writing English, use \"abbr\" for it's the \"normal\" way. If you write Chinese with English, imap is the better way, because there is probably no space after the expanded words. Autokey You can define 'Phrase' in Autokey. For example, when I want to input $TODO$ , I can define a keyboard shortcut fml . So every time when I input fml and a space (as an expansion trigger), it will be expand automatically. Verified on Ubuntu 14.04 Unity Desktop, 2016.12.2.","tags":"Tech","url":"http://leetschau.github.io/text-expansion-in-vim.html","loc":"http://leetschau.github.io/text-expansion-in-vim.html"},{"title":"Build Puppet Clusters with Vagrant","text":"$ cd ~/docs/propuppetex/chapter3 $ cat Vagrantfile Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| config.vm.box = \"centos64\" config.vm.define \"ppt\" do |ppt| ppt.vm.hostname = \"puppet.boco.com.cn\" ppt.vm.network \"private_network\", ip: \"192.168.50.3\", virtualbox__intnet: \"gcptest-network\" ppt.vm.provider :virtualbox do |vbox| vbox.customize [\"modifyvm\", :id, \"--natnet1\", \"10.3/16\"] end ppt.vm.provision :shell, path: \"master.sh\" end config.vm.define \"web\" do |web| web.vm.hostname = \"web.boco.com.cn\" web.vm.network \"private_network\", ip: \"192.168.50.4\", virtualbox__intnet: \"gcptest-network\" web.vm.provider :virtualbox do |vbox| vbox.customize [\"modifyvm\", :id, \"--natnet1\", \"10.3/16\"] end web.vm.provision :shell, path: \"web.sh\" end end $ cat master.sh echo ' ' > /etc/puppet/autosign.conf sed -i '/[. ]/ a \\ autosign = true' /etc/puppet/puppet.conf # add \"autosign = true\" in [main] and [agent] echo \"192.168.50.3 puppet.boco.com.cn puppet\" >> /etc/hosts echo \"192.168.50.4 web.boco.com.cn web\" >> /etc/hosts mkdir /etc/puppet/manifests cat > /etc/puppet/manifests/site.pp <<-EOF node 'web' { file { '/home/vagrant/aaa.conf': content => 'this is made by puppet master!', } } EOF service iptables stop $ cat web.sh sed -i '1 a \\ master = puppet' /etc/puppet/puppet.conf # add \"master = puppet\" after the line [main] echo \"192.168.50.3 puppet.boco.com.cn puppet\" >> /etc/hosts echo \"192.168.50.4 web.boco.com.cn web\" >> /etc/hosts echo \"proxy=http://10.21.3.31:8888\" >> /etc/yum.conf service iptables stop Now run \"puppet master --no-daemonize --verbose\" on ppt, run \"puppet agent --test\" on web, you can file the file \"aaa.conf\" at /home/vagrant.","tags":"Tech","url":"http://leetschau.github.io/build-puppet-clusters-with-vagrant.html","loc":"http://leetschau.github.io/build-puppet-clusters-with-vagrant.html"},{"title":"Publish Blogs on Cnblogs.com","text":"Some frequently used action about post on cnblogs: import xmlrpclib serviceUrl , appKey = 'http://www.cnblogs.com/yourusername/services/metaweblog.aspx' , 'yourusername' username , password = 'yourusername' , 'yourpassword' server = xmlrpclib . ServerProxy ( serviceUrl ) res = server . metaWeblog . getRecentPosts ( '' , username , password , 10 ) print ( 'no of posts: %d ' % len ( res )) print ( 'list posts: %s ' % res ) cat = server . metaWeblog . getCategories ( '' , username , password ) print ( 'no of categories: %d ' % len ( cat )) print ( 'list categories: %s ' % cat ) post = { 'title' : 'My 4th Post' , 'description' : 'some test text here \\n a new line' , 'mt_keywords' : 'test, demo' } postid = server . metaWeblog . newPost ( '' , username , password , post , True ) print ( 'postid is: %s ' % postid ) post = server . metaWeblog . getPost ( '3604635' , username , password ) print ( 'Get Post: %s ' % post ) When publish new post, we often meet this error: Traceback ( most recent call last ) : File \" config.py \" , line 18 , in < module > postid = server . metaWeblog . newPost ( '' , usr , passwd , post , True ) File \" /usr/lib/python2.7/xmlrpclib.py \" , line 1224 , in __call__ return self . __send ( self . __name , args ) File \" /usr/lib/python2.7/xmlrpclib.py \" , line 1578 , in __request verbose = self . __verbose File \" /usr/lib/python2.7/xmlrpclib.py \" , line 1264 , in request return self . single_request ( host , handler , request_body , verbose ) File \" /usr/lib/python2.7/xmlrpclib.py \" , line 1297 , in single_request return self . parse_response ( response ) File \" /usr/lib/python2.7/xmlrpclib.py \" , line 1473 , in parse_response return u . close () File \" /usr/lib/python2.7/xmlrpclib.py \" , line 793 , in close raise Fault ( ** self . _stack [ 0 ] ) xmlrpclib . Fault : < Fault 500 : u ' \\u62b1\\u6b49\\uff01\\u5df2\\u8d85\\u8fc7\\u5f53\\u65e5\\u535a\\u6587\\u53d1\\u5e03\\u6570\\u91cf100\\u7bc7\\u9650\\u5236\\uff01\\u4eca\\u5929\\u65e0\\u6cd5\\u7ee7\\u7eed\\u53d1\\u5e03\\uff01 ' > To see the error information, open a python shell, run following code print ( u '\\u62b1\\u6b49\\uff01\\u5df2\\u8d85\\u8fc7\\u5f53\\u65e5\\u535a\\u6587\\u53d1\\u5e03\\u6570\\u91cf100\\u7bc7\\u9650\\u5236\\uff01\\u4eca\\u5929\\u65e0\\u6cd5\\u7ee7\\u7eed\\u53d1\\u5e03\\uff01' ) Output: 抱歉！已超过当日博文发布数量 100 篇限制！今天无法继续发布！","tags":"Tech","url":"http://leetschau.github.io/publish-blogs-on-cnblogscom.html","loc":"http://leetschau.github.io/publish-blogs-on-cnblogscom.html"},{"title":"基于gVim的暗色调翻译写作环境","text":"翻译环境包括两个部分，写作部分和电子书，前者用gVim， 后者Windows上用SumatraPDF，Linux Mint就用自带的evince。 Linux 配置gVim字体和颜色： $ cat ~/.gvimrc set go= set guifont=Monospace\\ 12 colo koehler set et set ts=2 set sw=2 set cc=0 set wrap 开始写作：gvim gVim比vim好的地方是按 切换到标准状态下时，输入法会自动关闭。 evince用Ctrl-i即可切换到黑底白字，用F11切换全屏。 注：不写\"set keymap=pinyin\"，也能在 时自动退出中文输入法。 Windows gVim 首先安装git bash，下载gVim安装包，安装并运行之， 执行 :echo expand('~') 和 :echo $HOME 找到 $HOME 的位置，创建 .gvimrc 文件， gVim首先加载 $HOME/.vimrc ，然后加载 $HOME/.gvimrc ， 所以 .gvimrc 会覆盖 .vimrc 的配置，vim只加载 .vimrc ， 所以vim和gVim都需要的配置（例如交换 : 和 ; ）写在 .vimrc 里， .gvimrc 中只写gVim的配置。 如果打开汉字是乱码，在 .gvimrc 文件中加入 set encoding=utf-8 ， 完整内容如下： set encoding = utf - 8 colo koehler set guioptions -= T set guioptions -= m .vimrc 文件内容如下： set splitbelow set splitright set nobackup set noswapfile set incsearch set et set sw = 4 set ts = 4 set nu set nowrap colo ron set clipboard += unnamed set guifont = Consolas : h13 nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; nnoremap < C - J > < C - W >< C - J > nnoremap < C - K > < C - W >< C - K > nnoremap < C - L > < C - W >< C - L > nnoremap < C - H > < C - W >< C - H > gVim有个优点是可以避免输入法对vim控制命令的干扰，只要在normal模式下关闭输入法， 在insert模式下打开输入法，gVim就可以自动保证normal模式下关闭输入法，insert模式下打开。 翻译的工作流是： Win + E 打开快速访问窗口，要编辑的文件上右键，用gVim打开， 双击PDF文件打开， Win + Left 让gVim靠左，选择PDF文件窗口靠右。 在gVim中，使用 :tabnew <file-name> 在新标签页中打开文件， 用 gt 或者 Ctrl-PageUp/PageDown 切换标签。 或者使用 :sb <file-name> 在新window中打开文件，使用 Ctrl-w Shift-h/j/k/l 重新排布窗口。 参考： http://superuser.com/questions/86246/where-should-the-vimrc-file-be-located-on-windows-7 http://stackoverflow.com/questions/5166652/how-to-view-utf-8-characters-in-vim-or-gvim http://stackoverflow.com/questions/4100195/change-gvim-color-scheme-to-be-like-command-line-vim http://stackoverflow.com/questions/13525518/how-to-hide-the-menu-tool-bar-of-gvim 旧版本配置 $MYVIMRC （d:\\Apps\\Vim_vimrc）的设置是： set encoding = utf - 8 language messages zh_CN . utf - 8 map < Right > : bn < CR > map < F2 > : set wrap !< CR > set go = colo evening set noswapfile set nobackup set ts = 2 set sw = 2 set et set ai set nu set clipboard += unnamed set guifont = Consolas : h13 cd e : / docs / translate / propuppet language 解决提示信息中的中文乱码问题； Windows上的gVim不论插入模式和标志模式默认都支持C-s保存文件。 SumatraPDF 主菜单 -> 设置 -> 高级选项， 在打开的配置文件里将FixedPageUI中TextColor值和BackgroundColor值互换， 就实现了黑底白字的效果。 全屏用 [查看 -> 全屏]，快捷键C-S-l。 Note 全屏需要使用一个叫做 gvimfullscreen_win32 的工具，下载安装包， 把gvimfullscreen.dll解压到gvim.exe所在目录下（d:\\Apps\\Vim\\vim72\\）， 然后在_vimrc中加一行： map :call libcallnr(\"gvimfullscreen.dll\", \"ToggleFullScreen\", 0) 试用后发现全屏状态下输入法和其他提示窗口都不能显示，基本不可用。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-gvimde-an-se-diao-fan-yi-xie-zuo-huan-jing.html","loc":"http://leetschau.github.io/ji-yu-gvimde-an-se-diao-fan-yi-xie-zuo-huan-jing.html"},{"title":"Convert a Private Project on bitbucket.com to a github Public Project","text":"Create a public repo on github, you can add README or License files on the master branch, suppose the url is: https://github.com/leetschau/don4.git Get the private repo: $ git clone https://leechau@bitbucket.org/leechau/donno.git $ cd donno $ git branch -v -a (list all remote branches for checkout) $ git checkout -b develop origin/develop (copy remote branch to local repo and update working directory) Publish to github, you have 2 choices: i. Publish selected branches: $ git remote add don4 https://github.com/leetschau/don4.git $ git push -u don4 master $ git push -u don4 develop or you can push your \"master\" branch to remote as \"init\" branch for avoid confliction with master branch created on github: $ git push don4 master:init i. Publish all branches: $ git push --mirror https://github.com/leetschau/don4.git In this case you can't create README or License files when creating github project, to avoid conflict on master branch.","tags":"Tech","url":"http://leetschau.github.io/convert-a-private-project-on-bitbucketcom-to-a-github-public-project.html","loc":"http://leetschau.github.io/convert-a-private-project-on-bitbucketcom-to-a-github-public-project.html"},{"title":"Fix Jenkins Startup and Access Failure on CentOS","text":"Today I install Jenkins on CentOS 6. When start the service with \"java -jar jenkins.war --httpPort=8088\", it raised a \"java.net.unknownhostexception: Temporary failure in name resolution\" error. Resolution: add hostname (\"tybvt\" here) into \"127.0.0.1\" name of /etc/hosts, from: 127 . 0 . 0 . 1 localhost . localdomain localhost to: 127 . 0 . 0 . 1 tybvt localhost . localdomain localhost When Jenkins start successfully, only can access from \"localhost:8088\", \"10.0.2.47:8088\" is rejected. It's because the firewall \"iptables\" service. So we need to add a rule into iptables configuration. Add: - A INPUT - i eth0 - p tcp --dport 8088 -j ACCEPT right after the line \"-A INPUT -i lo -j ACCEPT\" in file /etc/sysconfig/iptables. Or simply stop the service with \"service iptables stop\" if security is not a concern.","tags":"Tech","url":"http://leetschau.github.io/fix-jenkins-startup-and-access-failure-on-centos.html","loc":"http://leetschau.github.io/fix-jenkins-startup-and-access-failure-on-centos.html"},{"title":"Configure Hosts with Puppet","text":"According to \"Pro Puppet\" 2nd edition, Chapter 2, \"Creating a Module to Manage SSH\".","tags":"Tech","url":"http://leetschau.github.io/configure-hosts-with-puppet.html","loc":"http://leetschau.github.io/configure-hosts-with-puppet.html"},{"title":"Add Xfce to Scientific Linux","text":"Download epel repo rpm from http://fedoraproject.org/wiki/EPEL; rpm -ivh epel-release-6.8.noarch.rpm; verify: yum -v repolist , you can see a 'epel' in \"repo id\" column; yum groupinstall xfce logout and you can see \"xfce seesion\" on the bottom of the login screen. You can still use konsle as default termianl.","tags":"Tech","url":"http://leetschau.github.io/add-xfce-to-scientific-linux.html","loc":"http://leetschau.github.io/add-xfce-to-scientific-linux.html"},{"title":"Compile Java Codes in Linux Shell instead of Ant Script","text":"The following is frequently used ant script, compile some java source codes with a libary path, then copy all non-java files to compiled folder: <property name= \"src.dir\" value= \" ${ basedir } /src\" /> <property name= \"src.class.dir\" value= \" ${ webroot . dir } /web-inf/classes\" /> <path id= \"lib.path\" > <fileset dir= \" ${ webroot . dir } /web-inf/lib\" > <include name= \"**/*.jar\" /> </fileset> </path> <target name= \"compile-src\" depends= \"init\" description= \"compile java sources\" > <javac srcdir= \" ${ src . dir } \" destdir= \" ${ src . class . dir } \" encoding= \"utf-8\" debug= \"true\" classpathref= \"lib.path\" failonerror= \"false\"/ > <copy todir= \" ${ src . class . dir } \" > <fileset dir= \" ${ src . dir } \" > <exclude name= \"**/*.java\" /> </fileset> </copy> </target> The corresponding shell script is: src_dir =/ vagrant / codes / GCP6 . 1 / src web_build =/ vagrant / codes / web_build class_dir = $ web_build / web_server / webapps / GCP6 . 1 / WEB - INF / classes lib_dir =/ vagrant / codes / GCP6 . 1 / WebRoot / WEB - INF / lib find $ src_dir - type f - name \" *.java \" - exec javac - cp \" $lib_dir/*:$src_dir \" - d $c lass_dir {} \\ ; rsync - auC -- exclude = ' *.java ' $ src_dir / $c lass_dir / Take care there's no folder named \"core\" in $src_dir, or it will be excluded by the \"-C\" option of rsync command. A Test Case $ tree . ├── classes ├── lib │ ├── libadd . jar │ └── libmul . jar ├── libadd │ └── com │ └── boco │ └── gcp │ └── add │ ├── MyAdd . class │ └── MyAdd . java ├── libmul │ └── com │ └── boco │ └── gcp │ └── mul │ ├── MyMul . class │ └── MyMul . java └── main └── com └── boco └── gcp ├── Test . java └── util └── MyUtil . java 17 directories , 8 files $ find . - name '*.java' - exec cat {} \\ ; - exec echo \"--------\" \\ ; package com . boco . gcp . util ; import com.boco.gcp.add.MyAdd ; import com.boco.gcp.mul.MyMul ; public class MyUtil { public int newadd ( int x , int y ) { MyAdd add = new MyAdd (); MyMul mul = new MyMul (); return add . myadd ( 3 , 5 ) + mul . mymul ( 3 , 5 ); } } -------- package com . boco . gcp ; import com.boco.gcp.mul.MyMul ; import com.boco.gcp.add.MyAdd ; import com.boco.gcp.util.MyUtil ; public class Test { public static void main ( String [] args ) { MyMul mul = new MyMul (); MyAdd add = new MyAdd (); System . out . println ( mul . mymul ( 3 , 5 )); System . out . println ( add . myadd ( 3 , 5 )); MyUtil util = new MyUtil (); System . out . println ( util . newadd ( 3 , 5 )); } } -------- package com . boco . gcp . mul ; public class MyMul { public int mymul ( int x , int y ) { return 10 * x * y ; } public static void main ( String [] args ) { MyMul mul = new MyMul (); System . out . println ( mul . mymul ( 3 , 5 )); } } -------- package com . boco . gcp . add ; public class MyAdd { public int myadd ( int x , int y ){ return 10 * x + y ; } public static void main ( String [] args ) { MyAdd add = new MyAdd (); System . out . println ( add . myadd ( 3 , 5 )); } } -------- $ find main - name '*.java' - exec javac - cp 'lib/*:main' {} - d classes \\ ; $ tree classes / classes / └── com └── boco └── gcp ├── Test . class └── util └── MyUtil . class","tags":"Tech","url":"http://leetschau.github.io/compile-java-codes-in-linux-shell-instead-of-ant-script.html","loc":"http://leetschau.github.io/compile-java-codes-in-linux-shell-instead-of-ant-script.html"},{"title":"Network Tools on Linux","text":"aria2c, curl, wget: Download tools; ping: ping -c 4 bing.com; tracepath bing.com; mtr bing.com: combination of ping and tracepath; host bing.com; host 204.79.197.200 whois bing.com ifconfig; ifup; ifdown; ifplugstatus: sudo apt-get install ifplugd netstat -p; netstat -s; dhclient (root privilege): free IP address, and get a new one from DHCP server; Ref: 如何用Linux命令行管理网络：11个你必须知道的命令","tags":"Tech","url":"http://leetschau.github.io/network-tools-on-linux.html","loc":"http://leetschau.github.io/network-tools-on-linux.html"},{"title":"Calculate Command Running Time on Linux","text":"You can use \"time\" or \"/usr/bin/time -p\" to calculate the running timespan of a command: % time vmstat 2 2 procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 1 0 0 2676404 141160 571960 0 0 5 7 64 270 2 1 97 0 0 0 0 2667964 141168 579900 0 0 0 36 234 626 1 1 98 1 vmstat 2 2 0.00s user 0.00s system 0% cpu 2.003 total % /usr/bin/time -p vmstat 2 2 procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 1 0 0 2675576 141184 571960 0 0 5 7 64 270 2 1 97 0 0 0 0 2675560 141192 571956 0 0 0 100 248 692 1 1 97 1 real 2.00 user 0.00 sys 0.00 You can see the \"total\" portion of \"time\" and \"real\" portion of \"/usr/bin/time\" both give correct answer, while the former looks more accurate.","tags":"Tech","url":"http://leetschau.github.io/calculate-command-running-time-on-linux.html","loc":"http://leetschau.github.io/calculate-command-running-time-on-linux.html"},{"title":"Notes about some Linux Distros","text":"Mageia: boot failed. OpenSUSE KDE: pros: incremental search in konsole; good navigation in application menu than Scientific Linux; multiple desktop, but only KDE and iceWM available; cons: no chinese input method; no dark color theme; openSUSE Gnome 3.10: pros: no task bar, cool; use \"super\"(Windows) key to select window and app; Global Dark Theme(open it in Tweak tools) is very cool; easy to setup shortcut; cons: Chinese input method is very weak, only support character by character, word input not support; bug in modify font size (there is a entry to modify font size in Tweak tools, but not work); OS crash after running a while; CentOS: pros: both KDE and Gnome desktop, good Chinese support, build-in Chinese input method(ibus-pinyin). cons: Gnome 2.x looks old-fashioned.","tags":"Tech","url":"http://leetschau.github.io/notes-about-some-linux-distros.html","loc":"http://leetschau.github.io/notes-about-some-linux-distros.html"},{"title":"Start a Service and Wait Until It's Up","text":"In this case the GcpServer is a background service. If the port 5556 is listening, that means the service start successfully. chmod 755 GcpServerCore / cmd /*.sh cd GcpServerCore/cmd;./start.sh;cd - while ! nc -zv localhost 5556; do sleep 5; done This solution based on the netcat utility. Ref: bash: how to start a service and wait until it's up .","tags":"Tech","url":"http://leetschau.github.io/start-a-service-and-wait-until-its-up.html","loc":"http://leetschau.github.io/start-a-service-and-wait-until-its-up.html"},{"title":"Add GBK Charset on Ubuntu Server","text":"Add following items into /var/lib/locales/supported.d/local: zh_CN . GBK GBK zh_CN . GB2312 GB2312 sudo dpkg-reconfigure --force locales (or simple use sudo locale-gen zh_CN ?) sudo update-locale LANG=zh_CN Verify: locale -a , you can see \"zh_CN.gb2312\" and \"zh_CN.gbk\" in lists.","tags":"Tech","url":"http://leetschau.github.io/add-gbk-charset-on-ubuntu-server.html","loc":"http://leetschau.github.io/add-gbk-charset-on-ubuntu-server.html"},{"title":"svn检出文件名中含中文文件失败问题解决方法","text":"有时使用svn检出时遇到这样的错误： svn: Can't convert string from 'UTF-8' to native encoding: ... 这是可能是由于svn所在主机的当前字符集不支持Unicode造成的，确认方法是：运行\"locale\"指令，输出为： LANG = en_US . UTF - 8 LANGUAGE = LC_CTYPE = \"en_US\" LC_NUMERIC = \"en_US\" LC_TIME = \"en_US\" LC_COLLATE = \"en_US\" LC_MONETARY = \"en_US\" LC_MESSAGES = \"en_US\" LC_PAPER = \"en_US\" LC_NAME = \"en_US\" LC_ADDRESS = \"en_US\" LC_TELEPHONE = \"en_US\" LC_MEASUREMENT = \"en_US\" LC_IDENTIFICATION = \"en_US\" LC_ALL = en_US \"en_US\"后面没有\".UTF-8\"，/etc/default/locale文件的内容是： LC_ALL = \"en_US\" 也没有\".UTF-8\"，解决方法很简单，在后面加上\".UTF-8\"，变为 LC_ALL = \"en_US.UTF-8\" 这时再运行locale命令，结果如下： LANG = en_US . UTF - 8 LANGUAGE = LC_CTYPE = \"en_US.UTF-8\" LC_NUMERIC = \"en_US.UTF-8\" LC_TIME = \"en_US.UTF-8\" LC_COLLATE = \"en_US.UTF-8\" LC_MONETARY = \"en_US.UTF-8\" LC_MESSAGES = \"en_US.UTF-8\" LC_PAPER = \"en_US.UTF-8\" LC_NAME = \"en_US.UTF-8\" LC_ADDRESS = \"en_US.UTF-8\" LC_TELEPHONE = \"en_US.UTF-8\" LC_MEASUREMENT = \"en_US.UTF-8\" LC_IDENTIFICATION = \"en_US.UTF-8\" LC_ALL = en_US . UTF - 8 这时再检出中文文件名文件就不报错了。 在CentOS上，对应的locale文件是/etc/sysconfig/i18n。","tags":"Tech","url":"http://leetschau.github.io/svnjian-chu-wen-jian-ming-zhong-han-zhong-wen-wen-jian-shi-bai-wen-ti-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/svnjian-chu-wen-jian-ming-zhong-han-zhong-wen-wen-jian-shi-bai-wen-ti-jie-jue-fang-fa.html"},{"title":"Change IP Address of NAT NIC in Vagrant VM","text":"The default IP address of Vagrant VM is 10.0.2.15. So you can't connect to a host with IP in range \"10.0.2.*\". If you do want, you must change the IP address of NAT NIC (network interface card) via the modifyvm command of VBoxManage: VBoxManage modifyvm < vm - name > --natnet1 \"10.3/16\" The here can be listed by command \"VBoxManage list vms\". In vagrant we can achieve this by adding \"config.customize [\"modifyvm\", :id, \"--natnet1\", ]\" into your vm config of Vagrantfile, for example, the following config will change the IP address of NAT NIC to \"10.3.0.15\": config . vm . define \" bs \" do | bvtserver | bvtserver . vm . hostname = \" bvt-server \" bvtserver . vm . network \" private_network \" , ip : \" 192.168.50.3 \" , virtualbox__intnet : \" gcptest-network \" bvtserver . vm . provider : virtualbox do | vbox | vbox . customize [ \" modifyvm \" , : id , \" --natnet1 \" , \" 10.3/16 \" ] end end","tags":"Tech","url":"http://leetschau.github.io/change-ip-address-of-nat-nic-in-vagrant-vm.html","loc":"http://leetschau.github.io/change-ip-address-of-nat-nic-in-vagrant-vm.html"},{"title":"IBus Chinese Pinyin IM on Linux Mint","text":"Following this : Install ibus-pinyin: $ sudo apt-get install ibus ibus-clutter ibus-gtk ibus-gtk3 ibus-qt4 $ sudo apt-get install ibus-pinyin $ im-switch -s ibus Restart machine; Right-click the ibus-pinyin icon in system tray, select \"Preference\", then \"IBus Preferences\" panel open; On this panel, under tag \"Input Method\", check \"Customize active input methods\", select \"Pinyin\", then click \"Add\" button; Now use Ctrl-Space to swtich between IBus-Pinyin and english input method. The pro of ibus-pinyin is no need to modify system-wide configurations. 2014-7-22: sudo apt-get install ibus-pinyin ibus-gtk ; ibus-setup , add \"PinYin\" to the System; Logout and login; Bingo.","tags":"Tech","url":"http://leetschau.github.io/ibus-chinese-pinyin-im-on-linux-mint.html","loc":"http://leetschau.github.io/ibus-chinese-pinyin-im-on-linux-mint.html"},{"title":"Build Chinese Writing Environment without Local IME on Linux","text":"Writing Writing Chinese on Baidu IME online . Auto-save Install parcellite and enable its \"copy on selection\" feature. Now every time select all text in Baidu Web IM with Ctrl-a, the text is stored in system clipboard. Save text in notepad.im for temperary storage.","tags":"Tech","url":"http://leetschau.github.io/build-chinese-writing-environment-without-local-ime-on-linux.html","loc":"http://leetschau.github.io/build-chinese-writing-environment-without-local-ime-on-linux.html"},{"title":"Build VM Cluster on CentOS Host","text":"Host Machine [root@bocoty49 ~]# lsb_release -a LSB Version: :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch Distributor ID: CentOS Description: CentOS release 6.4 (Final) Release: 6.4 Codename: Final VirtualBox AMD64 version of \"Oracle Linux 6(\"OL6\")/Red Hat Enterprise Linux 6(\"RHEL6\")/CentOS 6\" on download page of VirtualBox website File name: VirtualBox-4.3-4.3.8_92456_el6-1.x86_64.rpm Vagrant CentOS/RedHat/Fedora 64-bit Vagrant Installer on Vagrant download page File name: vagrant_1.4.3_x86_64.rpm Usage Install Virtualbox and vagrant; When 'vagrant up', a \"vboxdrv kernel module is not loaded\" error raise, The \"Release\" of yum info kernel-headers is \"431.5.1.el6\", which mismatched the result of uname -r (2.6.32-358.23.2.el6.x86_64), so kernel-headers package is unavailable to the current kernel. The solution is update the kernel release to match the packages: # yum update ( this will install kernel - 2 . 6 . 32 - 431 . 5 . 1 . el6 . x86_64 ) # reboot ( after reboot ` uname - r ` returns \"2.6.32-431.5.1.el6.x86_64\" , too ) # yum install gcc # yum install kernel - devel # / etc / init . d / vboxdrv setup ( Recompiling VirtualBox kernel modules ) vagrant up again. The network for the VM is \"bvtserver.vm.network :public_network\", which is suspent when configuring the network. I change the type of network to \"host-only\": production.vm.network \"private_network\", ip: \"192.168.50.5\", virtualbox__intnet: \"gcptest-network\" Now you can use ssh between each other via host-only NIC, and use apt-get to install packages via NAT NIC, so cool!","tags":"Tech","url":"http://leetschau.github.io/build-vm-cluster-on-centos-host.html","loc":"http://leetschau.github.io/build-vm-cluster-on-centos-host.html"},{"title":"Awesome Notes","text":"Install $ sudo aptitude install awesome Build from source $ aria2c -s 5 http://awesome.naquadah.org/download/awesome-3.5.2.tar.bz2 $ tar jxf awesome-3.5.2.tar.bz2 $ cd awesome-3.5.2 $ sudo aptitude install cmake $ make Some failed information at this step. Usage","tags":"Tech","url":"http://leetschau.github.io/awesome-notes.html","loc":"http://leetschau.github.io/awesome-notes.html"},{"title":"Change CWD in Python","text":"The following script demonstrate that in Python, \"os.chdir()\" will change CWD globally, while run shell \"cd\" command with subprocess module is a \"local\" action. If you run \"cd dst;touch aaa\", the file \"aaa\" will be created under folder dst, but after this sentence, the CWD won't remian in aaa. $ cat chdirtest . py import subprocess , os def runsh ( cmd ): return subprocess . check_output ( cmd , shell = True ) def svn_checkout ( src , dst , keepfolder = True ): print ( 'in svn_checkout before: ' + os . getcwd ()) print ( 'in svn_checkout shell before: ' + runsh ( 'pwd' )) os . makedirs ( dst ) #os.chdir(dst) print ( 'run cd and pwd: ' + runsh ( 'cd ' + dst + ';pwd' )) print ( 'in svn_checkout after: ' + os . getcwd ()) print ( 'in svn_checkout shell after: ' + runsh ( 'pwd' )) def download (): print ( 'in download before: ' + os . getcwd ()) print ( 'in download shell before: ' + runsh ( 'pwd' )) src = '7-Tools/deployment' svn_checkout ( src , CODE_FOLDER ) print ( 'in download after: ' + os . getcwd ()) print ( 'in download shell after: ' + runsh ( 'pwd' )) if __name__ == '__main__' : FOLDER_NAME = 'test' if not os . path . exists ( FOLDER_NAME ): os . makedirs ( FOLDER_NAME ) print ( 'in main before: ' + os . getcwd ()) print ( 'in main shell before: ' + runsh ( 'pwd' )) os . chdir ( FOLDER_NAME ) print ( 'in main after: ' + os . getcwd ()) print ( 'in main shell after: ' + runsh ( 'pwd' )) PKG_FOLDER = 'packages' CODE_FOLDER = 'codes' download () $ python chdirtest . py in main before : / home / chad / docs / gcp - deploy in main shell before : / home / chad / docs / gcp - deploy in main after : / home / chad / docs / gcp - deploy / test in main shell after : / home / chad / docs / gcp - deploy / test in download before : / home / chad / docs / gcp - deploy / test in download shell before : / home / chad / docs / gcp - deploy / test in svn_checkout before : / home / chad / docs / gcp - deploy / test in svn_checkout shell before : / home / chad / docs / gcp - deploy / test run cd and pwd : / home / chad / docs / gcp - deploy / test / codes in svn_checkout after : / home / chad / docs / gcp - deploy / test in svn_checkout shell after : / home / chad / docs / gcp - deploy / test in download after : / home / chad / docs / gcp - deploy / test in download shell after : / home / chad / docs / gcp - deploy / test","tags":"Tech","url":"http://leetschau.github.io/change-cwd-in-python.html","loc":"http://leetschau.github.io/change-cwd-in-python.html"},{"title":"Redmine Notes","text":"以下功能都需要以管理员身份登录Redmine后操作。 用户登录必须输入用户名密码，不能保存密码: Administration -> Settings -> Authentication -> Authentication required: checked Autologin: disabled; 关闭注册功能，只能由管理员添加用户： Administration -> Settings -> Authentication -> Self-registration: disabled 用户名字显示格式为\"姓+名\": Administration -> Settings -> Display -> Users display format: AdminLeo 设置日期显示格式为yyyy-mm-dd：Administration -> Settings -> Display -> Date format Wiki页面中添加右对齐的目录：wiki以 {{>toc}} 后面跟一个空行开头； 在问题(issue)列表中增加\"开始时间\"和\"结束时间\"字段： Administration -> Settings -> Issue tracking -> Default columns displayed on the issue list: add \"Start date\" and \"Due date\" Hide Bitnami landing page: modify the of file $REDMINE_HOME/apache2/htdocs/index.html as: <!DOCTYPE ...> Redirection ... Modify \"parent.location\" as your redmine location. Modify Web UI font size: /opt/redmine-2.4.3-0/apps/redmine/htdocs/public/stylesheets/application.css, the 2nd line: body { ... font-size: ... } Add Email Notification Edit file: /opt/redmine-2.4.3-0/apps/redmine/htdocs/config/configuration.yml # default configuration options for all environments default : # Outgoing emails configuration ( see examples above ) email_delivery : delivery_method : : smtp smtp_settings : address : 123 . 124 . 236 . 199 port : 25 domain : boco . com . cn authentication : : login user_name : lichao1 @ boco . com . cn password : abaqus67 then restart services: /opt/redmine-2.4.3-0/ctlscript.sh restart Change host path as Administrator: [Administration -> Settings -> General -> Host name and path: 123.../redmine] Note there is no \"http://\" before the string and no \"/\" after it, too.","tags":"Tech","url":"http://leetschau.github.io/redmine-notes.html","loc":"http://leetschau.github.io/redmine-notes.html"},{"title":"Speed up Downloading Files on Linux","text":"Compared aria2c, axel and wget, aria2c is the best. It support multi-thread download (with \"-s \") and resume partially downloaded files automatically (you have to use \"-c\" in wget for this function). Install with sudo apt install aria2 . Synopsis: $ aria2c -s 10 <URL>","tags":"Tech","url":"http://leetschau.github.io/speed-up-downloading-files-on-linux.html","loc":"http://leetschau.github.io/speed-up-downloading-files-on-linux.html"},{"title":"Access Java API in Groovy Script","text":"$ cat Hello . java package test ; public class Hello { public int myadd ( int x , int y ) { return 10 * x + y ; } } $ cat myapp . groovy import test.Hello def hello = new Hello () println hello . myadd ( 13 , 5 ) $ javac Hello . java $ mkdir test ; mv Hello . class test $ tree . ├── groovy - all - 2.2 . 1.j ar ├── Hello . java ├── myapp . groovy └── test └── Hello . class $ java - cp . : groovy - all - 2.2 . 1.j ar groovy . ui . GroovyMain myapp . groovy 135 Note: You can't use groovy-2.2.1.jar here, or you will get a NoClassDefFoundError; If your groovy script don't access other Java class, you can simply run \"java -jar groovy-all-2.2.1.jar myapp.groovy\".","tags":"Tech","url":"http://leetschau.github.io/access-java-api-in-groovy-script.html","loc":"http://leetschau.github.io/access-java-api-in-groovy-script.html"},{"title":"Create Virtual Machines with Vagrant and Puppet","text":"Create the following puppet manifest and start VM with vagrant, you get a base production environment. $ pwd / home / chad / docs / vagrant - prj / gcpserver $ cat Vagrantfile | grep - v ' &#94;\\s*# ' VAGRANTFILE_API_VERSION = \" 2 \" Vagrant . configure ( VAGRANTFILE_API_VERSION ) do | config | config . vm . box = \" precise64 \" config . vm . network : public_network config . vm . provision \" puppet \" end $ cat manifests / default . pp package { ' vsftpd ' : ensure => installed , } service { ' vsftpd ' : ensure => running , require => Package [ ' vsftpd ' ], } user { \" gcp \" : ensure => \" present \" , password => ' gcp ' , managehome => true , } $ vagrant init $ vagrant up But the password doesn't work, see User Password Management Fails in Puppet for reason. You have to modify password for user 'gcp' manually. The type of network is written as \"bridged\" in api version 1 style. Create multiple VMs To specify hostname, memory size and some other parameters of each VM, modify Vagrantfile like this: $ cat Vagrantfile | grep - v ' &#94;\\s*# ' VAGRANTFILE_API_VERSION = \" 2 \" Vagrant . configure ( VAGRANTFILE_API_VERSION ) do | config | config . vm . box = \" precise64 \" config . vm . define \" bvtserver \" do | bvtserver | bvtserver . vm . hostname = \" bvt-server \" bvtserver . vm . network : public_network bvtserver . vm . provision : shell , path : \" bvtprov.sh \" end config . vm . define \" production \" do | production | production . vm . hostname = \" gcp-server \" production . vm . network : public_network production . vm . provision : puppet production . vm . provider : virtualbox do | vbox | vbox . customize [ \" modifyvm \" , : id , \" --name \" , \" ProductEnv \" , \" --memory \" , 1024 ] end end end And add a shell script for provisioning of bvt server: $ cat bvtprov . sh echo \" You can do some provisioning here \" Ref: http://stackoverflow.com/questions/16740397/vagrant-network-type-bridged-is-invalid-please-use-a-valid-network-type http://stackoverflow.com/questions/18700060/seting-up-vm-hostname-undefined-method-hostname","tags":"Tech","url":"http://leetschau.github.io/create-virtual-machines-with-vagrant-and-puppet.html","loc":"http://leetschau.github.io/create-virtual-machines-with-vagrant-and-puppet.html"},{"title":"Unicode and File I/O in Python 2.X and 3.X","text":"In Python 2.x, the default string is byte string, which means every byte is convert to a character. If you write a Unicode string, you have to write it as u'...'. On the contrary, in Python 3.x, the default string is Unicode string. If you want a byte string, you have to write it as b'...'. In Python 3.3: chn = '将帖子翻译为中\\n' with open ( 'py3uni' , 'w' ) as f : f . write ( chn ) print ( chn . encode ( 'utf-8' )) mygbk = chn . encode ( 'gbk' ) with open ( 'py3gbk' , 'wb' ) as f : f . write ( mygbk ) readgbk = open ( 'py3gbk' , encoding = 'gbk' ). read () print ( readgbk ) print ( type ( readgbk )) # < class 'str' > In Python 2.7: # -*- encoding: utf-8 -*- import codecs inputStr = u '将帖子翻译为中文2015年3月 \\n ' gbkFn = 'gbkFile' utf8Fn = 'utf8File' print ( 'Print original Unicdoe string: ' + inputStr ) print ( 'Print in UTF-8 encoding: ' + inputStr . encode ( 'utf-8' )) with codecs . open ( utf8Fn , 'w' , 'utf-8' ) as f : f . write ( inputStr ) fromUTF8 = codecs . open ( utf8Fn , encoding = 'utf-8' ) . read () with codecs . open ( gbkFn , 'w' , 'gbk' ) as f : f . write ( inputStr ) fromGBK = codecs . open ( gbkFn , encoding = 'gbk' ) . read () print ( 'Strings from different encodings are the same?' ) print ( fromUTF8 == fromGBK ) print ( \" \\n String type:\" ) print ( type ( fromGBK )) You can convert gbkFile to utf8File in shell with: iconv -f gbk -t utf8 gbkFile > utf8File . You can also write strings to file in this way: gbkStr = inputStr . encode ( 'gbk' ) with open ( 'gbkFile' , 'wb' ) as f : f . write ( gbkStr ) While it's not as concise as the previous method.","tags":"Tech","url":"http://leetschau.github.io/unicode-and-file-io-in-python-2x-and-3x.html","loc":"http://leetschau.github.io/unicode-and-file-io-in-python-2x-and-3x.html"},{"title":"Add Custom Fields on Issues of Project in Redmine","text":"Check items under \"Trackers\" to enable a custom field for a specific tracker. Add this custom field to \"Selected columns\". That's it. When you create a new issue via [Project -> New Issue], this field will show in definition panel.","tags":"Tech","url":"http://leetschau.github.io/add-custom-fields-on-issues-of-project-in-redmine.html","loc":"http://leetschau.github.io/add-custom-fields-on-issues-of-project-in-redmine.html"},{"title":"Compile Flex Source Files in Linux Console","text":"Download flex sdk from adobe(http://www.adobe.com/devnet/flex/flex-sdk-download.html); Ref: http://thomas.deuling.org/2011/05/install-flex-sdk-under-ubuntu-linux/ http://stackoverflow.com/questions/6480901/is-it-possible-to-compile-swf-files-flash-from-a-linux-command-line","tags":"Tech","url":"http://leetschau.github.io/compile-flex-source-files-in-linux-console.html","loc":"http://leetschau.github.io/compile-flex-source-files-in-linux-console.html"},{"title":"Install Redmine on Virtual Machine with Vagrant","text":"Initialize VM: chad@typcserver ~/docs/vagrant-prj $ vagrant --version Vagrant 1.4.3 chad@typcserver ~/docs/vagrant-prj $ vagrant init chad@typcserver ~/docs/vagrant-prj $ cat Vagrantfile VAGRANTFILE_API_VERSION = \"2\" Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| config.vm.box = \"precise64\" config.vm.box_url = \"http://files.vagrantup.com/precise64.box\" end Startup VM: chad@typcserver ~/docs/vagrant-prj $ vagrant up chad@typcserver ~/docs/vagrant-prj $ vagrant ssh The preinstalled puppet version is 2.7: vagrant@precise64:~$ puppet --version 2.7.19 Install redmine module: vagrant@precise64:~ \\( sudo mkdir -p /etc/puppet/modules vagrant@precise64:~\\) sudo puppet module install johanek/redmine vagrant@precise64:~ \\( sudo apt-get update vagrant@precise64:~\\) sudo puppet apply --modulepath=/etc/puppet/modules -e \"include stdlib\" vagrant@precise64:~$ sudo puppet apply --modulepath=/etc/puppet/modules -e \"include mysql::server\" warning: Could not retrieve fact fqdn Then it's stuck. I find there are network traffic with ifstat utility, which probably means puppet is installing mysql. But how can I get the current state of puppet? I can't stop it even with Ctrl-C. Notes: Uninstall module: puppet module uninstall puppetlabs-mysql if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/install-redmine-on-virtual-machine-with-vagrant.html","loc":"http://leetschau.github.io/install-redmine-on-virtual-machine-with-vagrant.html"},{"title":"Vagrant Notes","text":"Download and install VirtualBox 4.3.6 for Ubuntu 12.10 (which is the base of Linux Mint 14) i386, file name: virtualbox-4.3_4.3.6-91406~Ubuntu~quantal_i386.deb; Download and install vagrant installer for linux: vagrant_1.4.3_i686.deb; Follow the \"Getting Started\" guide of vagrant : $ vagrant init precise32 http://files.vagrantup.com/precise32.box $ vagrant up The first step simply created a config file in the current folder, so it's very fast. The second step will download a box file from vagrantup.com and could be fairly slow. When it's done, use vagrant ssh to login to the VM, use vagrant suspend to save your work and shutdown the VM, use vagrant up agian to startup the VM again. Add box locally Downlaod box file from internet; vagrant box add <box-name> <box-file-path> , where is a logical name you specify, is local filesystem path. \"package\" is a \"green\" command. It will not affect your current box list, just produce a box file. Login as root sudo su - Package Refined VMs Under the project folder (which contains \"Vagrantfile\"): Write some comments in README file, for example the installed components: \"This box is based on ... , has installed ... , has run 'apt-get update (or apt-fast update)\". Run vagrant package --output mybox.box --include README (no need to shutdown VM beforehand, vagrant will shutdown it); After vagrant box add mybox mybox.box , go to ~/.vagrant/boxes/mybox/virtualbox/include/ to see the README file, where \"virtualbox\" is the provider name of your VM, it can be vmware or something else. Run vagrant box remove mybox to remove the box from your vagrant box lists. Add command alias for type efficiency Add the following into ~/.zshrc or ~/.bashrc: alias va = 'vagrant' alias vas = 'vagrant status' alias vau = 'vagrant up' alias vah = 'vagrant halt' alias vad = 'vagrant destroy' Example Vagrantfile Vagrant . configure ( 2 ) do | config | config . vm . box = \" ubuntu/xenial64 \" config . ssh . username = \" ubuntu \" config . ssh . password = \" ... \" # get the password from ~/ . vagrant . d / boxes /< box - id >/ 0 /< provider - id >/ Vagrantfile # e . g .: ~/ . vagrant . d / boxes / ubuntu - VAGRANTSLASH - xenial64 / 0 / virtualbox / Vagrantfile config . vm . define \" kivybox \" config . vm . hostname = \" kivybox \" config . vm . network \" public_network \" , ip : \" 172.18.0.242 \" config . vm . provider \" virtualbox \" do | vb | vb . memory = \" 10240 \" end end","tags":"Tech","url":"http://leetschau.github.io/vagrant-notes.html","loc":"http://leetschau.github.io/vagrant-notes.html"},{"title":"Create Virtual Network with VirtualBox on Mint 14","text":"VirtualBox version: VirtualBox-4.2.18-88780-Linux_x86.run Host OS: Linux Mint 14 Xfce Setup Network Add a virtual network in host: VirtualBox -> File -> Preferences -> Network Create a VM with the first NIC as Host-only(NIC1) and the second as NAT(NIC2); When host connect to Internet, the guest can access internet via NIC2, while the host disconnect with internet, the host and guest still can ssh to each other with the NIC1 IP address. After installed all software on guest when host connected with internet, disconnect with internet and ssh to guest. Use the following console command to speedup. Test shows that ssh to guest is very slow compared with startup GUI guest. Manage VMs in Console VM name is \"Mint14Xfce\" in this case. List name of all VMs: VBoxManage list vms List state of all VMs: VBoxManage list vms -l|grep State Show current state of a VM: VBoxManage showvminfo Mint14Xfce|grep State Startup VM without GUI: VBoxHeadless -s Mint14Xfce --vrde off Show network type(only list first 3 NIC): VBoxManage showvminfo Mint14Xfce|grep 'NIC [123]' Shutdown VM: VBoxManage controlvm Mint14Xfce poweroff Ref: Networking in VirtualBox by Fat Bloke on Jun 08, 2012.","tags":"Tech","url":"http://leetschau.github.io/create-virtual-network-with-virtualbox-on-mint-14.html","loc":"http://leetschau.github.io/create-virtual-network-with-virtualbox-on-mint-14.html"},{"title":"Build a ZenTao Server on Linux","text":"Download xampp for linux on Apache Friends , file name: xampp-linux-1.8.3-2-installer.run; Intallation guide: Linux FAQs on Apache Friends $ chmod 755 xampp-linux-1.8.3-2-installer.run $ sudo ./xampp-linux-1.8.3-2-installer.run $ sudo /opt/lampp/lampp start Verify: browse http://10.21.3.8, you can see the xampp homepage. Downlaod zentao source code pack ZenTaoPMS.5.2.1.zip; unzip ZenTaoPMS.5.2.1.zip to /opt/lampp/htdocs; browse \"http://localhost/zentaopms/www\" to start install process. If not, try http://localhost/zentaopms/www/install.php; zentao parameter:: Host port: 3306; Database user: root db password: zentaopms database name: zentao admin name: chad admin password: zentaopms Config file path: /opt/lampp/htdocs/zentaopms/config/my.php Backup and Restore ZenTao Data Backup # / opt / lampp / lampp bakcup Restore # sh xampp - backup - 27 - 01 - 14 . sh According to the LinuxFAQ on ApacheFriends, the backup/restore is a beta feature, which has no guarantee.","tags":"Tech","url":"http://leetschau.github.io/build-a-zentao-server-on-linux.html","loc":"http://leetschau.github.io/build-a-zentao-server-on-linux.html"},{"title":"View epub and mobi File on Linux","text":"On Ubuntu, the recommended epub viewer is Firefox plugin epubreader or fbreader ( sudo apt-get install fbreader ). They both have book category to manage books which have been read. The firefox plugin sometimes displays texts in epub files a mess, while fbreader always displays in the right way. Calibre and Okular are both heavy-weight app, large and slow when startup. Calibre has stand-alone ebook viewer \"ebook-viewer\", start it in terminal: $ ebook-viewer <filename> I also tried view mobi file with okular on Linux Mint 14 Xfce. But its KDE mobi plugin \"kdegraphics-mobipocket\" doesn't work. Updated in 2016.2.5: Okular supports j/k to move page. Toggle any UI components in [main menu -> Settings].","tags":"Tech","url":"http://leetschau.github.io/view-epub-and-mobi-file-on-linux.html","loc":"http://leetschau.github.io/view-epub-and-mobi-file-on-linux.html"},{"title":"Lookup Service Provider by IP Address","text":"Now we have a ip address and a user account, we want to know its service provider. Let's find the truth step by step. It's a virtual machine or not? Login to this server using the user account and run: $ cat /proc/cpuinfo At the \"model name\" line, I found \"QEMU Virtual CPU version 1.0\". So it's a virtual machine and probably a VPS (virtual private server). I need verify my guess. What is its service provider? On my laptop, run command: $ dig -x <ipaddress> In the \"AUTHORITY SECTION\", I found \"nsl.digitalocean.com\". Google \"digitalocean.com\" shows it's a VPS provider. Which solution this VPS uses? On https://www.digitalocean.com/ I found a solution $5/month, with 512MB ram. To verify, on VPS run: $ free -m It shows the total memory is 490MB. That's it.","tags":"Tech","url":"http://leetschau.github.io/lookup-service-provider-by-ip-address.html","loc":"http://leetschau.github.io/lookup-service-provider-by-ip-address.html"},{"title":"Setup Lightweight Python FTP Server for Test","text":"Based on Python FTP server library (pyftpdlib) Install Start a virtual environment; $ easy_install pyftpdlib (the version number is 1.3.0) or download pyftpdlib-1.3.0.tar.gz manually and \"python setup.py install\". Usage Run the following script to startup server: from pyftpdlib.authorizers import DummyAuthorizer from pyftpdlib.handlers import FTPHandler from pyftpdlib.servers import FTPServer authorizer = DummyAuthorizer () authorizer . add_user ( \"user\" , \"12345\" , \"/home/chad/tmp\" , perm = \"elradfmw\" ) authorizer . add_anonymous ( \"/home/chad/tmp2\" ) # you have a named and an anonymous user to login handler = FTPHandler handler . authorizer = authorizer server = FTPServer (( \"0.0.0.0\" , 2121 ), handler ) server . serve_forever () If you set the port to \"21\", a \"permission denied\" error raises. So I changed it to 2121. If you only accept local connection, modify server ip as \"127.0.0.1\" instead of \"0.0.0.0\". Use this server in command line: ftp 10 . 21 . 2 . 7 2121 // user name and password pwd ls get file1 . txt put file2 . txt And a groovy ftp client: import org.apache.commons.net.ftp.FTPClient println ( \"About to connect....\" ); new FTPClient () . with { connect \"localhost\" , 2121 login \"user\" , \"123\" def names = listNames ( \"/\" ) print names logout () disconnect () } println ( \"Done.\" ); Run this client: groovy - cp ... / commons - net - 3 . 1 . jar ftpclient . groovy On my machine this path is: ~/.m2/repository/commons-net/commons-net/3.1/commons-net-3.1.jar","tags":"Tech","url":"http://leetschau.github.io/setup-lightweight-python-ftp-server-for-test.html","loc":"http://leetschau.github.io/setup-lightweight-python-ftp-server-for-test.html"},{"title":"Manage sshd Service on CentOS","text":"Check the current sshd status: service sshd status Start sshd service: service sshd start Set sshd autostart on system startup chkconfig sshd on List the current autostart status chkconfig --list |grep sshd Or use a simple interface: # ntsysv Verified on CentOS 6.4 x86_64. 2014-7-16: On CentOS 6.5 32bit: # chkconfig NetworkManager off # chkconfig network on # chkconfig sshd on","tags":"Tech","url":"http://leetschau.github.io/manage-sshd-service-on-centos.html","loc":"http://leetschau.github.io/manage-sshd-service-on-centos.html"},{"title":"Use Module and Function instead of Class in Python","text":"The following scripts run in ipython demonstrate the differences between instance method and static method. Generally OOP make things complicated for imperative style applications. So when developing this style application (such as command-line application) use functions inside modules, instead of \"module - class - method\". The Python standard library is a good example that all utility functions are all common functions not wrapped in classes. In [ 1 ]: cat utils . py class FileUtils : def __init__ ( self ): print 'initialize' , self @staticmethod def static_copy ( src , dst ): print 'class copy from' , src , 'to' , dst def instance_copy ( self , src , dst ): print self , 'copy from' , src , 'to' , dst In [ 2 ]: import utils In [ 3 ]: myutil = utils . FileUtils () initialize < utils . FileUtils instance at 0x8ab250c > In [ 4 ]: myutil . instance_copy ( 'aa' , 'bb' ) < utils . FileUtils instance at 0x8ab250c > copy from aa to bb In [ 5 ]: utils . FileUtils () . instance_copy ( 'aa' , 'bb' ) initialize < utils . FileUtils instance at 0x8ab24ec > < utils . FileUtils instance at 0x8ab24ec > copy from aa to bb In [ 6 ]: utils . FileUtils . static_copy ( 'aa' , 'bb' ) class copy from aa to bb In [ 7 ]: utils . FileUtils . instance_copy ( 'aa' , 'bb' ) --------------------------------------------------------------------------- TypeError Traceback ( most recent call last ) < ipython - input - 7 - cce9f79fc45b > in < module > () ----> 1 utils . FileUtils . instance_copy ( 'aa' , 'bb' ) TypeError : unbound method instance_copy () must be called with FileUtils instance as first argument ( got str instance instead ) In [ 8 ]: myutil . static_copy ( 'aa' , 'bb' ) class copy from aa to bb Notice the subtle difference between [5] and [6], parenthesis followed the class name is a \"instance\", while only class name without the following parenthesis is a \"class\". Ref: The definitive guide on how to use static, class or abstract methods in Python","tags":"Tech","url":"http://leetschau.github.io/use-module-and-function-instead-of-class-in-python.html","loc":"http://leetschau.github.io/use-module-and-function-instead-of-class-in-python.html"},{"title":"RVM Notes","text":"Installation $ curl -sSL https://git.rvm.io | bash -s stable $ rvm list known $ rvm install 1 .9.3 No root privilege needed. If you install it as root, it will be saved in /usr/local/rvm, and after installation all users can use rvm. Install on Linux Mint 14 32bit There's no compiled ruby package for Mint 14 32bit. So rvm install 1.9.3 failed. This is a workaround: Download ruby-2.1.0.tar.bz2 for ubuntu 12.04; $ rvm mount -r /path/to/ruby-2.1.0.tar.bz2 $ rvm alias create default ruby-2.1.0 $ rvm use default Enable Ruby Add rvm environments definition into ~/.zshrc or ~/.bashrc: echo 'source ~/.rvm/scripts/rvm' >> ~/ . zshrc Usage Run \"irb\" or \"ruby \" in console directly. List installed ruby: rvm list Note Fix issue 3212 When running rvm -v , or start a new tmux window, the following warning appear: Warning: PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set, see: https://github.com/wayneeseguin/rvm/issues/3212 … To fix it, backup your .bash and .zsh files, and run: rvm get stable --auto-dotfiles . Verified at 2017.8.27.","tags":"Tech","url":"http://leetschau.github.io/rvm-notes.html","loc":"http://leetschau.github.io/rvm-notes.html"},{"title":"Use nose as Unit Test Framework","text":"[chad@chadpc527:~/docs/tmp/mytest] % workon test (test)[chad@chadpc527:~/docs/tmp/mytest] % pip install nose ... (test)[chad@chadpc527:~/docs/tmp/mytest] % tree . |-- mytest | |-- init .py | |-- mytest.py | -- test | |-- __init__.py | -- test_mytest.py `-- setup.py 2 directories, 5 files (test)[chad@chadpc527:~/docs/tmp/mytest] % python setup.py nosetests running nosetests running egg_info creating mytest.egg-info writing mytest.egg-info/PKG-INFO writing top-level names to mytest.egg-info/top_level.txt writing dependency_links to mytest.egg-info/dependency_links.txt writing manifest file 'mytest.egg-info/SOURCES.txt' reading manifest file 'mytest.egg-info/SOURCES.txt' writing manifest file 'mytest.egg-info/SOURCES.txt' running build_ext . Ran 1 test in 0.007s OK (test)[chad@chadpc527:~/docs/tmp/mytest] % cat setup.py import multiprocessing from setuptools import setup setup(name='mytest', version='0.1.0', tests_require=['nose']) (test)[chad@chadpc527:~/docs/tmp/mytest] % cat mytest/mytest.py def myadd(x,y): return 10 x+y (test)[chad@chadpc527:~/docs/tmp/mytest] % cat mytest/test/test_mytest.py from unittest import TestCase from mytest.mytest import myadd class TestMyadd(TestCase): def test_myadd(self): actual = myadd(3,5) self.assertTrue(actual==10 3+5) Or, you can use \"python setup.py test\" in this way: Add \"import multiprocessing\" in setup.py; Add \"test_suite='nose.collector'\" as a parameter in setup() function in setup.py; If you run \"python setup.py test\" without \"import multiprocessing\", you will get a \"Error in atexit._run_exitfuncs\" error with nose 1.3.0 and Python 2.7.3. Ref: https://groups.google.com/forum/#!topic/nose-users/fnJ-kAUbYHQ","tags":"Tech","url":"http://leetschau.github.io/use-nose-as-unit-test-framework.html","loc":"http://leetschau.github.io/use-nose-as-unit-test-framework.html"},{"title":"Publish and Install Python Applications","text":"Publish to PyPI Follow How To Package Your Python Code . Register I ran \"python setup.py register\" twice. Firstly I use option 2 to register a new account, then ran it again and use option 1 to upload the \"funniest\" package. Then I saw this package in my account on PyPI. In the management page, there is a \"remove\" button for delete this package. $ python setup.py register Create a source distribution $ python setup.py sdist This is create a tar.gz file under dist folder. If you like, copy that file to another host, unpacking it and install it with \"python setup.py install\". Upload source distribution $ python setup.py sdist upload After modification of source codes and version number in setup.py (say, modify it to 0.2) run last command again to refresh distribution on PyPI. You can see it at \"https://pypi.python.org/simple/ /\". On another host, use \"pip install ==0.2\" to install this app, for example: \"pip install funniestlc==0.2\". Publish in LAN On the develop host Edit source code; Create new source code distribution package: python setup.py install sdist ; On the deploy host Startup a virtual environment: workon test ; Write a install script: !/bin/bash scp lichao@10.21.2.7:/home/lichao/docs/python_projects/donno/dist/donno-0.1.10.tar.gz . tar zxvf donno-0.1.10.tar.gz cd donno-0.1.10 python setup.py install cd ..","tags":"Tech","url":"http://leetschau.github.io/publish-and-install-python-applications.html","loc":"http://leetschau.github.io/publish-and-install-python-applications.html"},{"title":"Virtual Environment in Python","text":"virtualenv virtualenvwrapper is not file based (it depends heavily on workon ). And it's setup is not very easy. While virtualenv can be used like npm (one virtual env in one project). So I prefer virtualenv to virturalenvwrapper for managing Python project environment. Install it with sudo pip install virtualenv . Workflow with virtualenv: In a Python project root folder, run virtualenv venv to build the home folder for virtual environment, and add venv into .gitignore. Run . venv/bin/activate to activate the environment; pip install -r requirements.txt to install dependent packages; Edit files and test project with python ... ; Quit environment with deactivate ; Note: Add -p <python-bin-path> to use alternative Python executable. For example, virtualenv -p /usr/bin/python3 venv to build an environment using Python 3. virturalenvwrapper Installation $ sudo pip install virtualenvwrapper Add the following lines into ~/.zshenv: WORKON_HOME =~/ docs / workspace / python - workspace / env - home PROJECT_HOME =~/ docs / workspace / python - workspace / project - home and create the two folders specified above. Add following lines into ~/.zshrc: source / usr / local / bin / virtualenvwrapper . sh Usage For new project Create a new project funcPy using Python 3.x (run in any foler): mkproject - p / usr / bin / python3 funcPy The CWD will be changed into the project root automatically. Verify: $ python -V Python 3 .4.3 $ deactivate $ python -V Python 2 .7.6 Coming into the project root and virtualenv later: workon funcPy . Use key to autocomplete after workon . If using the default Python version (in Ubuntu 14.04 it is 2.7) for your virtual environment, create the project with mkproject funcPy . To debug this project in PyCharm, open the project in PyCharm (get the project root folder with workon funcPy && echo $PWD ). In [File -> Settings -> Project: funcPy -> Project Interpreter], press the gear button on the right side of \"Project Interpreter\", choose \"Add Local\", select the python executable in the corresponding virtualenv folder (get it with cdvirtualenv && echo $PWD/bin/python ). The python intepreter config is persisted in PyCharm project configuration, so no need to use workon every time open the project in PyCharm. See Adding Existing Virtual Environment in PyCharm 2016.1 Help for reference. Note: If the script has command line arguments, add them in [Run -> Edit Configurations -> Script parameters]. For existing project git clone git @github . com : mbr / flask - bootstrap . git cd flask - bootstrap mkvirtualenv flask - bootstrap setvirtualenvproject cd sample_app pip install - r requirements . txt mkvirtualenv testenv2 setvirtualenvproject Now there are 2 virtualenvs: flask-bootstrap and testenv2 are associated with project flask-bootstrap. If you input workon and press TAB, you can see both these 2 virtualenvs. No matter which one you choose, you will be transmitted to the root folder of project flask-bootstrap. Note: use rmvirtualenv testenv2 to remove a virtualenv. Discussion There are two concepts in virturalenvwrapper. One is \"virtual environment\", which has its own python executables. The other is \"project\", where your source codes resides. They are n-to-1 relationship. If you specify a project-virtualenv relation with setvirtualenvproject path-to-project-A path-to-env-X , while the virtualenv X already has associated to project B, the new project A will replace the old project B. Why not use the same folder for both project and environment, like npm? Reason 1: A project can associate with many virtualenvs (through setvirtualenvproject ), so for example you can test your application under Python 2 and 3 in difference virtual environments. Reason 2: Unlike the \"node_modules\" folder in a node.js project, Python project can't put packages directly into the source folder. Use pip install the-package && pip freeze > requirements.txt to install a package and save it into dependency document, like npm install the-package --save . Activate you virtual env and use pip install -r requirements.txt to install all dependencies into the virtual environment. \"mkvirtualenv env1\" will create a new \"virtual environment\" in $WORKON_HOME, regardless your CWD. \"mkproject proj1\" will create both a \"virtual environment\" named \"proj1\" in $WORKON_HOME and a \"proj1\" folder in $PROJECT_HOME. Then go to $PROJECT_HOME/proj1, and activate the virtual environment proj1. So \"mkproject proj1\" equals to: $ mkvirtualenv proj1 $ mkdir $PROJECT_HOME /proj1 $ cd $PROJECT_HOME /proj1 $ workon proj1 Associate an existing virtualenv and an existing project with command $ setvirtualenvproject virtualenv_path project_path Under the hood, virturalenvwrapper create a \".project\" file under the root of the virtualenv, in which is the project path. List site packages: $ lssitepackages Run a command in all virtualenvs under WORKON_HOME: $ allvirtualenv command with arguments Change the current working directory to the site-packages of current virtualenv($VIRTUAL_ENV): $ cdsitepackages Remove virtualenv: $ rmvirtualenv <env_name> Verification In a virtualenv, all python executables are in $WORKON_HOME. [ lichao@lichao480:~ ] $ workon env1 env2 proj1 [ lichao@lichao480:~ ] $ which python / usr / bin / python [ lichao@lichao480:~ ] $ workon env1 ( env1 ) [ lichao@lichao480:~ ] $ which python / home / lichao / apps / virenv_home / env1 / bin / python ( env1 ) [ lichao@lichao480:~ ] $ workon env2 ( env2 ) [ lichao@lichao480:~PROJECT_HOME/proj2 ] $ which python / home / lichao / apps / virenv_home / env2 / bin / python","tags":"Tech","url":"http://leetschau.github.io/virtual-environment-in-python.html","loc":"http://leetschau.github.io/virtual-environment-in-python.html"},{"title":"Write Groovy Codes instead of Java","text":"Writing Java codes in terminal is a pain for tons of boilerplate. But sometimes you have to. So we can write groovy instead. Origin Java codes (Convert.java): import java.io.BufferedReader ; import java.io.FileReader ; import java.io.IOException ; import org.apache.commons.lang3.StringEscapeUtils ; public class Convert { public static void main ( String [] args ) throws IOException { BufferedReader reader = new BufferedReader ( new FileReader ( \"target\" )); String line = reader . readLine (); System . out . println ( \"file content: \" + line ); String out = StringEscapeUtils . unescapeJava ( line ); System . out . println ( \"from string to char: \" + out ); String out2 = StringEscapeUtils . escapeJava ( out ); System . out . println ( \"from char to string : \" + out2 ); } } $ javac -cp commons-lang3-3.2.1.jar:. Convert.java $ java -cp commons-lang3-3.2.1.jar:. Convert Corresponding Groovy codes (convert.groovy): import org.apache.commons.lang3.StringEscapeUtils def reader = new BufferedReader ( new FileReader ( \"target\" )) def line = reader . readLine () println \"file content: $line\" def out = StringEscapeUtils . unescapeJava ( line ) println \"from string to char: $out\" def out2 = StringEscapeUtils . escapeJava ( out ) println \"from char to string: $out2\" Run it: groovy -cp commons-lang3-3.2.1.jar convert.groovy Key points to writing groovy codes: Dynamic type but with \"def\" (see \"http://stackoverflow.com/questions/184002/groovy-whats-the-purpose-of-def-in-def-x-0\" for its reason); No need to import Java built-in library; No need to take care of the exceptions; semi-colon at the end of line is optional; Use \"println\" instead of \"System.out.println...\"; Ref: http://stackoverflow.com/questions/764416/why-would-one-use-groovy-over-java","tags":"Tech","url":"http://leetschau.github.io/write-groovy-codes-instead-of-java.html","loc":"http://leetschau.github.io/write-groovy-codes-instead-of-java.html"},{"title":"Python Development Workflow","text":"Based on http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/ Workflow The first release(v0.1): see Publish and Install Applications via PyPI for how to commit to PyPI; After uploading your first release to PyPI, the basic workflow is: Do some work on your package (i.e. fix bugs, add features, etc); Make sure the tests pass; \"Freeze\" your code by creating a release branch in git-flow; Update the version number in your package's init .py file; Run \"python setup.py sdist upload\" to upload the new version of your package to PyPI; For usage of git-flow, see note \"git-flow Notes\". virtualenv and virtualenvwrapper See Note about virturalenvwrapper. Publish a Python Application Add a \"command_line.py\" in module, and \"entry_points\" in setup.py. See the 4th step \"Command Line Scripts\" in How To Package Your Python Code for details. Necessary Files setup.py Some necessary parameters: entry_points: for defind executables; install_requires: for defining dependencies, get this from \"pip freeze\" command (exculde the application itself); MANIFEST.in Add \"inculde README.md\" (and other necessary files for installation) in this file, or README.md will note be packaged into installer, and in installation a \"README.md not found\" error raises because you read this file in setup.py. (see https://wiki.python.org/moin/Distutils/Tutorial for explanation) All available classifiers https : // pypi . python . org / pypi ?% 3 Aaction = list_classifiers Create requirements automatically $ pip freeze > requirements.txt","tags":"Tech","url":"http://leetschau.github.io/python-development-workflow.html","loc":"http://leetschau.github.io/python-development-workflow.html"},{"title":"Create Executable Links in Linux","text":"For example, as a common user we want to use application \"pandoc\" installed by root. We can achieve this by copy a soft link to /usr/bin. # cd / usr / bin # ln - s ~/ . cabal / bin / pandoc Now we can use \"pandoc\". If it complains \"Permission Denied\", use it with \"sudo\".","tags":"Tech","url":"http://leetschau.github.io/create-executable-links-in-linux.html","loc":"http://leetschau.github.io/create-executable-links-in-linux.html"},{"title":"Spell Check in Vim","text":"Turn on check spelling: :set spell . ]s Move to next misspelled word after the cursor; [s find the misspelled word before the cursor; z= For the word under/after the cursor, suggest correctly spelled words; zg Add word under the cursor as a good word; Ref: http://stackoverflow.com/questions/640351/how-can-i-spellcheck-in-gvim","tags":"Tech","url":"http://leetschau.github.io/spell-check-in-vim.html","loc":"http://leetschau.github.io/spell-check-in-vim.html"},{"title":"Write Markdown in Vim","text":"Markdown Plugin Use plasticboy/vim-markdown for vim. This plugin enable markdown syntax highlighting, folding/unfolding and some navigation shortcuts. Install and Config Add the following lines into .vimrc : let g : vim_markdown_folding_level = 3 let g : vim_markdown_toc_autofit = 1 nnoremap < leader > t : Toc < CR > Plugin 'godlygeek/tabular' Plugin 'plasticboy/vim-markdown' Frequently used shortcuts ,t or :Toc : show table of contents window; Foldings zc: close one-level fold at cursor; zo: open one-level fold at cursor; zn: unfold all (n for none); zm: fold all (m for more); zj: go to the next fold; zk: go to the previous fold; [z: go to the start of the fold at cursor; ]z: go to the end of the fold at cursor; Markdown ]]: go to next header; [[: go to previous header; ]c: go to current header; ]u: go to parent header;","tags":"Tech","url":"http://leetschau.github.io/write-markdown-in-vim.html","loc":"http://leetschau.github.io/write-markdown-in-vim.html"},{"title":"Some Notetaking Softwares","text":"Today I install Springseed and NixNote on the black laptop (Linux MInt Cinnamon 15) and try them. Springseed The sparkling features include: It's open source; Synchronize with Dropbox; Supporting markdown syntax, and distinguishes \"Save\" and \"edit\" statuses. So It can preview the note. Cool interface; But it's a GUI style app without keyboard shortcuts. NixNote NixNote is an open source Evernote client on Linux. It is more GUI style than Evernote Windows client. For example, it doesnot support ESC to close note window. It can be closed to system tray but you have to open it with mouse. Its interface is a little better than Evernote Windows client in wine. These 2 app are all not the ideal solutions. I will keep on develop pynote. # Everpad It works on Mint Cinnamon 15. But it has no search function, and its synchronization is very slow (1 hour for 1000 notes).","tags":"Tech","url":"http://leetschau.github.io/some-notetaking-softwares.html","loc":"http://leetschau.github.io/some-notetaking-softwares.html"},{"title":"Run Shell Commands in Python","text":"os.system If it's unnecessary to save command output into a variable, this is the way most convenient, and similar with run shell command directly. The output of the command will be printed to console in realtime, and return the command's return value. You can use space and pipe in command: >>> from os import system >>> system ( 'vmstat 3 3' ) >>> ret = system ( 'ls -l|grep D' ) subprocess.call This is the recommended way to run shell commands in Python compared with old-fashioned os module. It's a realtime method, which means you can get the shell output on the fly, compared with following subprocess.check_output method, which collect all output in its return value. It's a blocking method, compared with the following subprocess.Popen method, for subprocess.call is implemented by subprocess.Popen(...).wait() . See http://stackoverflow.com/questions/21936597/blocking-and-non-blocking-subprocess-calls for details. It returns the return value of the command, for example: ret = subprocess . call ( 'ls -l' ) where ret==0 , while ret = subprocess . call ( 'cd aaa' ) ret=2 when there isn't \"aaa\" subfolder under CWD. For ease of use, write a shorthand function: import subprocess def run ( cmd ): ret = subprocess . call ( cmd , shell = True ) if ret != 0 : sys . exit ( 'Exec cmd %s error, return value: %s ' % ( cmd , str ( ret ))) Then you can simply use \"run(cmd)\" as a shell interface. \"run\" print command stdout and stderr to console stdout, and if there's something wrong during execution, we interrupt it. subprocess.check_output A more safe way to run shell command is using \"check_output\" function. If the return value if not 0, a exception raised, otherwise return the command output. $ cat myrun . py import subprocess def run ( cmd ): return subprocess . check_output ( cmd , shell = True ) $ python - i myrun . py >>> ret = run ( 'ls -l|grep donno' ) >>> ret 'drwxr-xr-x 6 chad chad 4096 Jan 26 18:18 donno-0.1.10 \\n -rw-r--r-- 1 chad chad 8716 Jan 27 15:53 donno-0.1.10.tar.gz \\n ' >>> ret = run ( 'cd aaa' ) / bin / sh : 1 : cd : can 't cd to aaa Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"shtest.py\" , line 3 , in run return subprocess . check_output ( cmd , shell = True ) File \"/usr/lib/python2.7/subprocess.py\" , line 544 , in check_output raise CalledProcessError ( retcode , cmd , output = output ) subprocess . CalledProcessError : Command 'cd aaa' returned non - zero exit status 2 subprocess.Popen If you want some more powerful tools, use this. You can't use pipe directly in this form. Instead, You have to use subprocess.PIPE: >>> import subprocess >>> lsres = subprocess . Popen ([ 'ls' , '-l' ], stdout = subprocess . PIPE ) >>> grepres = subprocess . Popen ([ 'grep' , 'Do' ], stdin = lsres . stdout , stdout = subprocess . PIPE ) >>> res = grepres . communicate () communicate() interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. It returns a tuple (stdoutdata, stderrdata). Full solution of running shell command If you want realtime output, while saving output and return code in variables, you should use Popen: from subprocess import Popen , PIPE , STDOUT cmd = 'vmstat 2 3' cmd2 = 'exit 3' p = Popen ( cmd , close_fds = True , shell = True , stdout = PIPE , stderr = STDOUT ) line = '' while p . poll () is None : out = p . stdout . read ( 1 ) if out == ' \\n ' : print ( line ) line = '' else : line = line + out print ( '-------- \\n ret is: %d ' % p . returncode ) The Popen.stdout is a file object, so its \"read(size)\" method here means read every 1 byte. \"close_fds=True\" is maybe unnecessary, but I keep it for safe. os.popen Use this form if you want to save command output. >>> retfile = os . popen ( 'pwd' ) >>> ret = retfile . read () >>> ret '/home/lichao\\n' >>> retfile < open file 'pwd' , mode 'r' at 0 xb74aad30 > or write it more compact: >>> result = os . popen ( 'ls|grep enex' ). read () Deprecated commands.getoutput() commands.getstatusoutput()","tags":"Tech","url":"http://leetschau.github.io/run-shell-commands-in-python.html","loc":"http://leetschau.github.io/run-shell-commands-in-python.html"},{"title":"Search Available Package on Remote Repository","text":"Debian-based distro First update your system cache: apt - get update Then you can use one of the following ways to search available packages: apt - cache search < package - name > There is only package names and simple descriptions. aptitude search < package - name > The command provide more information than above one. The first character of the output indicate the package status on your host machine: \"i\" means installed, \"p\" otherwise. If the third character is \"A\" other than space, it means the package is auto installed. Use \"aptitude why \" to get the explanation of why the package should be installed on the system. RPM-based distro yum list < package - name >","tags":"Tech","url":"http://leetschau.github.io/search-available-package-on-remote-repository.html","loc":"http://leetschau.github.io/search-available-package-on-remote-repository.html"},{"title":"Jump between Files in vim","text":"Open file at cursor Open in the same window: gf Open in a new window: f Open in a new tab: gf You can use relative path. For example, when you put cursor on any character of \"dir1/file1\" and press gf, the file \"file1\" under folder \"dir1\" in CWD will be opened. Ref: http://vim.wikia.com/wiki/Open_file_under_cursor Jump back from \"gf\" Jump back: or :bf Jump back and forth between two files: Ref: http://stackoverflow.com/questions/133626/how-do-you-return-from-gf-in-vim","tags":"Tech","url":"http://leetschau.github.io/jump-between-files-in-vim.html","loc":"http://leetschau.github.io/jump-between-files-in-vim.html"},{"title":"Mint Cinnamon Note","text":"Verified version: 15. Define keyboard shortcuts: Menu -> System Tools -> System Settings -> Hardware [Switch to Advanced Mode] -> Keyboard -> Keyboard shortcuts; The web browser firefox of this version support Baidu's netdisk out-of-box without installing flash plugins manually; Frequently Used Shortcuts Open a terminal: C-M-t;","tags":"Tech","url":"http://leetschau.github.io/mint-cinnamon-note.html","loc":"http://leetschau.github.io/mint-cinnamon-note.html"},{"title":"OS Backup and Restore for Linux","text":"Redo Redo Most user-friendly of all. The only one supporting mouse. I backuped system and swap partition on a ftp server (hadoop:hadoop@10.21.3.31). It provided a tiny OS including terminal, browser, editor, etc. But it can't backup to your booting USB stick. So if you want backup to a local disk, you have to backup to another partition or another USB stick. Restore operation is concise as well. Select the ftp server when prompting for input \"Source Drive\", then specify the location of the backup file on the ftp server. Verified at 2014/1/2. PING PING Worked ok. Not very user-friendly. You can backup to your booting USB stick. Didn't test server backup. Restore not tested. Clonezilla Clonezilla Backup failed for not enough destination disk space. It request bigger free space on destination than source disk. G4L G4L Very slow and can't save space when there are large unused space on source OS disk.","tags":"Tech","url":"http://leetschau.github.io/os-backup-and-restore-for-linux.html","loc":"http://leetschau.github.io/os-backup-and-restore-for-linux.html"},{"title":"Format U Disk in Linux Mint","text":"Plugin U disk; Application Finder -> Disks Select the U disk, Click \"more actions\" button at the upper-right corner, then select \"Format Disk\"; Verified: Linux Mint 14 Xfce, 2013-12-30.","tags":"Tech","url":"http://leetschau.github.io/format-u-disk-in-linux-mint.html","loc":"http://leetschau.github.io/format-u-disk-in-linux-mint.html"},{"title":"Install Redmine Server with Bitnami Installer","text":"Download bitnami installer: bitnami-redmine-2.4.1-1-linux-installer.run, and run: $ chmod 755 bitnami...installer.run ( run as a common user ) $ ./bitnami...install.run Choose a installation destination (as $REDMINE_HOME) and some other configurations (like port number); When installation complete, you can choose opening the admin panel; Close this panel; Use $REDMINE_HOME/ctlscript.sh to manage your redmine server. Use ./ctlscript.sh help or read README.txt for usage instructions. Use \"./ctlscript status\" to get the current status of your server; Use ctlscript start/stop/restart all or each service, use \"status\" to get status of all or each service.","tags":"Tech","url":"http://leetschau.github.io/install-redmine-server-with-bitnami-installer.html","loc":"http://leetschau.github.io/install-redmine-server-with-bitnami-installer.html"},{"title":"Configure Firewalls on Linux","text":"The firewall in CentOS is the \"iptables\" service. List all rules: iptables -nvL You can get all chains and all rules of each chain. iptables rules are described in several \"chains\". The default chains are \"INPUT\", \"FORWARD\" and \"OUTPUT\". The INPUT chain is most concerned. It defines which ports of this host are allowed/denied to be visited by the outside world, which IPs are allowed/denied to visit this host. Add a rule to deny all visits to port 27017: iptables - A INPUT - p tcp --dport 27017 -j DROP To delete this rule, first use iptables -L INPUT --line-number to get the line number of the rule, such as \"2\", then delete it with iptables -D INPUT 2 . Ref: 9.3 Linux 的封包過濾軟體：iptables of \"鳥哥的 Linux 私房菜\". Control iptables service service iptables start|stop|restart Open a port (port 9000 in this case)for incoming connection: Add the following line right after the line \"-A INPUT -i lo -j ACCEPT\" in file /etc/sysconfig/iptables: - A INPUT - i eth0 - p tcp --dport 9000 -j ACCEPT where \"INPUT\" is a you can get in above list operation. -i is the incoming interface name, -p means protocol, --dport means \"destination port\", -j means target name. See man iptables for details. Note 1: The position is important. The rules will be processed in line order of the file. If there is a match for a rule, no other rules (rules below this rule) will be processed for that IP packet in your case. Note 2: After saving the rule file, you need restart service to validate the modification. Use the list command above to see your modification.","tags":"Tech","url":"http://leetschau.github.io/configure-firewalls-on-linux.html","loc":"http://leetschau.github.io/configure-firewalls-on-linux.html"},{"title":"SonarQube and Postgresql on Linux","text":"Authentication $POSTGRESQL_HOME/data/pg_hba.conf Modify \"local all all peer\" to \"local all all trust\" to enable \"sonar\" login in with \"psql -U sonar\". Modify \"host all all 127.0.0.1/32 ident\" to \"host all all 127.0.0.1/32 trust\" to enable SonarQube communicate with Postgresql database; or define a access rule in \"pg_ident.conf\". If you can connect to SonarQube server only on localhost, try shutdown firewall: \"service iptables stop\" or open the port following Configure Firewalls on Linux . List all projects in Postgresql database: $ psql -U sonar select * from projects;","tags":"Tech","url":"http://leetschau.github.io/sonarqube-and-postgresql-on-linux.html","loc":"http://leetschau.github.io/sonarqube-and-postgresql-on-linux.html"},{"title":"Play Postgresql 9.3 on Linux","text":"Installation Docker Ref: postgres in docker official repo docker run -- name some - postgres - e POSTGRES_PASSWORD = mySecretPassword - d postgres docker run - it -- link some - postgres : postgres -- rm postgres sh - c ' exec psql -h \"$POSTGRES_PORT_5432_TCP_ADDR\" -p \"$POSTGRES_PORT_5432_TCP_PORT\" -U postgres ' Note do not replace \"POSTGRES_PORT_5432_TCP_ADDR\" with \"localhost\". Keep this command as is. When prompting \"Password for user postgres:\", input password set in starting server, here it is \"mySecretPassword\". on CentOS 6.4 Download PGDG RPM file \"pgdg-centos93-9.3-1.noarch.rpm\", copy to 47, install with rpm -ivh, and run: yum list postgres * yum install postgresql93 - server_x86_64 service postgresql - 9 . 3 initdb chkconfig postgresql - 9 . 3 on service postgresql - 9 . 3 start ( restart , stop , reload ) su - postgres Verify: $ psql list users: \\du http://wiki.postgresql.org/wiki/YUM_Installation on XUbuntu 13.10 It said there is no saucy (ubuntu 13.10) package in postgresql repository. So I modified \"saucy\" to \"precise\": echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > / etc / apt / sources . list . d / pgdg . list wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt - get update sudo apt - get install postgresql - 9 . 3 pgadmin3 / etc / init . d / postgresql start Ref: http://wiki.postgresql.org/wiki/Apt Get Started Run the following command with user \"postgres\": $ psql CREATE ROLE bvt LOGIN PASSWORD 'xxx' ; create database mydb owner bvt ; Run psql mydb with user bvt. Note the semicolon after each sql statement is mandatory. psql usage Start psql console: psql <database_name> . If omitted, it's the same as the user name. Get help: \\?; List all tables: \\d; Print table contents: select * from ; List roles: \\du; List databases: \\l; User \"postgres\" create database for a common user: create database bvt owner bvt; Delete database: drop database ; (same as \"dropdb \" in terminal); Ref: http://www.postgresql.org/docs/9.3/static/index.html","tags":"Tech","url":"http://leetschau.github.io/play-postgresql-93-on-linux.html","loc":"http://leetschau.github.io/play-postgresql-93-on-linux.html"},{"title":"Communicate System Clipboard with Vim in Linux","text":"Linux Mint Xfce By default, Ubuntu (so as to Linux Mint) installs the vim-tiny package, which is a ultra-light version of the console \"vim\" only. To check the clipboard support of the installed vim, run vim --version|grep clipboard . If you get \"-clipboard\" and \"-xterm_clipboard\", your vim can't support system clipboard. You have to remove current vim, and install a \"full\" version vim like this: $ sudo apt - get purge vim $ sudo apt - get autoremove # remove related packages of vim $ sudo apt - get install vim - gtk # gtk suited for Xfce environments Now let's check: $ vim --version | grep clipboard You should get something like \"+clipboard\" and \"+xterm_clipboard\". Now connect vim clipboard with that of system with adding \"set clipboard=unnamedplus\" into you ~/.vimrc. And check it: Copy texts in web browser with Ctrl-c, and use \"p\" to paste them in vim; copy a line in vim with \"yy\", then paste them into some GUI program (say, gedit) with Ctrl-v. Ref: how to copy from vim and paste it on system clip board vim-gtk or vim-gnome? ArchLinux Install gvim with sudo pacman -S gvim . Note: On CentOS, use yum search vim to get the exact vim package name. On CentOS 6.4 it's \"vim-X11\".","tags":"Tech","url":"http://leetschau.github.io/communicate-system-clipboard-with-vim-in-linux.html","loc":"http://leetschau.github.io/communicate-system-clipboard-with-vim-in-linux.html"},{"title":"Switch User Command in Linux","text":"Switch user command (su) has the following forms: su Switch to , without loading environment variables. If is omitted (only \"su\"), it equals to \"su root\"; su - Switch to , and loading environment variables. \"-\" is the abbreviation of \"-l\", which means this is a \"login\" shell, so all .profile will be sourced (man su for details). If is omitted (only \"su -\"), it equals to \"su - root\"; su -c \" \" Run command with the identity of another user. It is mostly used in one-off command with root privileges: su -c \" \" root The double quotes around can't be omitted.","tags":"Tech","url":"http://leetschau.github.io/switch-user-command-in-linux.html","loc":"http://leetschau.github.io/switch-user-command-in-linux.html"},{"title":"Search String in Files in Vim","text":"In vim, it's a common task to search a word in current foler and all its subfolders. There are some plugins for this scenario: ack plugin Add the following lines into vimrc: if executable ( ' ag ' ) let g : ackprg = ' ag --vimgrep ' endif cabbrev ack Ack exec ' cabbrev fw Ack -w <C-r><C-w> **/*. ' . expand ( \" %:e \" ) Plug ' mileszs/ack.vim ' Here <C-r><C-w> represents word at cursor . The default behavior of ack is searching recursively in all files. So when we only want to search in specific file types, we have to specify it explicitly with **/*.hs , **/*.py , etc. \"%:e\" means the extension of the current file. cabbrev doesn't accpet variables as arguments. So we concat the command string with . , then run it with exec . fw means find word , as the option -w specify. Other useful options of Ack includes: -i (ignore case), -c (only count the occurances instead of mateched texts), -h (print help message of Ack ). Now you can search the word at cursor in all files with the same file extension of current file recursively through :fw<CR> . The search results is listed in a quickfix window. Move cursor with j/k/g/G , select with <Enter>/o (open the target file in current window), O (like o but close the quickfix window), t (open the file in a new tab), T (like t but keep focus in quickfix window), go (like o but keep focus in quickfix window, v (open file in a vertical split window), gv (like v but keep focus in quickfix window). See all keyboard shortcuts with :h ack . Close quickfix window with q when the cursor in quickfix window, with ccl when the cursor in other buffers. easygrep plugin Add Plugin 'dkprice/vim-easygrep' into ~/.vimrc. Search word 'vari' with :Grep vari . Install ack-grep with aptitude. And use :GrepProgram to change search utility to ack-grep . Use :cw / :ccl to open/close search result window; :cn / :cp to jump to next/previous result; ag.vim plugin (Deprecated) Install the_silver_searcher with sudo aptitude install silversearcher-ag . Install ag.vim with adding codes below into ~/.vimrc: let g : ag_highlight = 1 Plugin 'rking/ag.vim' Here \"g:ag_highlight=1\" make the preview function useful with go shortcut in quickfix window. Search 'pattern\" with :Ag [options] pattern [path] . \"path\" is optional with the default value :pwd . Search the word under cursor with :Ag . See :h Ag for all commands Ag provides. Frequently used options: \"-i\": ignore case: :Ag -i pattern . \"-w\": match whole word: :Ag -w pattern . \"-Q\": match pattern literally, do not use regular expression. In the quickfix window, use \"o\" to jump to the target file, \"e\" to open file and close the quickfix window, \"t\" to open file in a new tab, \"v/h\" to open target file in vertial/horizontal split window, \"q\" to close the quickfix window, etc. In the editor window, use \":ccl/:cope\" to close/open quickfix window, \":cn/:cp\" to move to next/previous target (even when quickfix window is closed). \":cfir/:cla\" to jump to first/last target. Search \"keyboard shortcuts\" in :h Ag to see the details. It's much faster than \"ack-grep\" below. Other Options : vim / ord / * . hs You will auto jump to the first matched file. If you don't want this auto-jump, use :vim /ord/j *.hs . Now you can use \":cn\" or \":cp\" to traverse between all matched files, or use \":cw\" to open search result window (use \":clo\" to hide this window). : lv ord * . hs There is no search result window (quickfix window) for this \"lv\" command. And you can't use \":cn\" and \":cp\" also. : grep ord * . hs You will see a grep result in console. After pressing , you come back to vim, \":cn\", \":cp\" and \":cw\", etc, are the same with above. This version use system \"grep\" command, so it's faster than \":vim\". Ref: http://vim.wikia.com/wiki/Find_in_files_within_Vim google \"vim quickfix\" :h :vim, :h :grep, :h lv","tags":"Tech","url":"http://leetschau.github.io/search-string-in-files-in-vim.html","loc":"http://leetschau.github.io/search-string-in-files-in-vim.html"},{"title":"Function of Getting Factors in Different Languages","text":"Haskell > factors n = [ x | x <- [ 1 .. n ], n `mod` x == 0 ] > factors 4800 ... > length $ factors 4800 42 Add \"let\" before function definition when running in GHCi. Python >>> factors = lambda n : [ x for x in range ( 1 , n + 1 ) if n % x == 0 ] >>> factors ( 4800 ) ... >>> len ( factors ( 4800 )) 42 Clojure user=> (defn factors [ n ] (filter # (= (mod n %) 0 ) (vec (range 1 (+ 1 n))))) user=> (factors 4800 ) ... user=> (count (factors 4800 )) 42 Ruby > factors = lambda { | n | ( 1 .. n ) . to_a . collect { | x | x if n % x == 0 }. compact } > factors . call ( 4800 ) => ... > factors . call ( 4800 ) . size => 42 Compare Ruby version with that of Python, Python's style is more \"functional\", while Ruby's style is pure object-oriented \"object.message\" format.","tags":"Tech","url":"http://leetschau.github.io/function-of-getting-factors-in-different-languages.html","loc":"http://leetschau.github.io/function-of-getting-factors-in-different-languages.html"},{"title":"Note about \"Programming in Haskell\"","text":"1.7 Exercises How should the definition of the function qsort be modified so that it produces a reverse sorted version of a list? qsort :: Ord a => [a] -> [a] qsort [] = [] qsort (x:xs) = qsort bigger ++ [x] ++ qsort smaller where smaller = filter (<=x) xs bigger = filter (>x) xs Type and Class Recall that a type is a collection of related values. Building upon this notion, a class is a collection of types that support certain overloaded operations called methods. -- Section 3.9: Basic Classes Patterns Matching Section 4.4, excellent explanation about tuple pattern, list pattern and integer pattern. Note that cons patterns must be parenthesised, because function application has higher priority than all other operators. (p34) 4.8 Exercises Splits an even-lengthed list into two halves: halve :: [ a ] -> ( [ a ] , [ a ] ) halve x = splitAt ( div ( length x ) 2 ) x safetail safetail :: [a] -> [a] -- conditional expression safetail xs = if null xs then [] else tail xs -- guarded equation safetail xs | null xs = [] | otherwise = tail xs -- pattern matching safetail [] = [] safetail xs = tail xs 5.7 Exercies sum [x**2|x<-[1..100]] replicate n x = [x | t <- [1..n]] (answer of textbook: replicate n x = [x|_<-[1..n]] Find pythagorean triples: pyths n = [ ( x , y , z ) | x <- [1..n] , y <- [1..n] , z <- [1..n] , x ** 2 + y ** 2 == z ** 2 ] Find perfects number: factors n = [ x | x <- [ 1 .. n - 1 ], n `mod` x == 0 ] perfects n = [ x | x <- [ 1 .. n ], x == sum ( factors x )] sat function in Chapter 8 The codes in section 8.1~8.3 and 8.6 doesn't work. The author explained it in chapter remarks(section 8.9) and the errata (Pages 74 to 78...). He also gave a monad version of \"Parser\" in his website: Code -> Parsing . So I am afraid we have to learn some monads then come back to this interesting Haskell parser. Ref: http://stackoverflow.com/questions/2607498/programming-in-haskell-error-in-sat-function Chapter 9 Clear Screen MyClr.hs: module Main where cls :: IO () cls = putStr \" \\ESC[2J \" bingo :: IO () bingo = putStr \" bingo! \\n \" main = do cls bingo $ ghc MyClr . hs $ . / MyClr You have to remove the type declaration sentences. StrLen strLen :: IO () strLen = do putStr \" Enter a string: \" xs <- getLine putStr \" The string has \" putStr ( show ( length xs )) putStrLn \" characters. \" Then load in ghci and run \"strLen\". goto (in ghci) let goto ( x , y ) = putStr ( \" \\ESC[ \" ++ show y ++ \" ; \" ++ show x ++ \" H \" ) goto ( 20 , 20 ) Chapter 10 Normal Functions and Constructor Function data Shape = Circle Float | Rect Float Float The constructors Circle and Rect are actually constructor functions, which produce results of type Shape from arguments of type Float. The difference between normal functions and constructor functions is that the latter have no defining equations, and exist solely for the purpose of building pieces of data. The expression Circle 1.0 is just a piece of data, in the same way that 1.0 itself is just data. Diferent Kinds of tree The parameter type \"a\" represents the stored data. Store data only in leaves: data Tree a = Leaf a | Node (Tree a) (Tree a) Store data only in nodes: data Tree a = Leaf | Node (Tree a) a (Tree a) and: data Tree a = Node a [Tree a ] Store data both in leaves (data type is \"a\") and nodes (data type is \"b\"): data Tree a b = Leaf a | Node (Tree a b) b (Tree a b) Chapter 11 results ns = [res | ( ls , rs ) <- split ns , lx <- results ls , ry <- results rs , res <- combine ' lx ry] Above is a imperative-style calculation in list comprehension. The cost is you have to put your result in a list, while empty list means failure of calculation.","tags":"Tech","url":"http://leetschau.github.io/note-about-programming-in-haskell.html","loc":"http://leetschau.github.io/note-about-programming-in-haskell.html"},{"title":"Haskell Interactive Development in Emacs","text":"Installation Following haskell-mode . Use MELPA repository: add the following into ~/.emacs ( require 'package) (add-to-list ' package - archives ' ( \"melpa\" . \"http://melpa.milkbox.net/packages/\" ) t ) ( package - initialize ) M-x package-refresh-contents M-x package-install [RET] haskell-mode Usage Open a haskell file in emacs; Use \"C-c C-z\" to open ghci (but there isn't a jump-back shortcut, you can use C-x o); Use \"C-c C-l\" to load file (same as \":l \"); However, there isn't tab-completion in the ghci invoked by \"C-c C-z\", so you can start a console to run ghci; User Manual M-x info-display-manual [RET] haskell-mode","tags":"Tech","url":"http://leetschau.github.io/haskell-interactive-development-in-emacs.html","loc":"http://leetschau.github.io/haskell-interactive-development-in-emacs.html"},{"title":"Note about \"Yet Another Haskell Tutorial\"","text":"Exercises Solutions http://en.wikibooks.org/wiki/Haskell/YAHT Exercise 3.10 Save the following scripts in SumInputs.hs: module Main where main = do inputNumbers <- getNumber putStrLn (\"The sum is \" ++ show (sum inputNumbers)) putStrLn (\"The product is \" ++ show (foldr (*) 1 inputNumbers)) printFactorials inputNumbers getNumber = do putStrLn \"Give me a number (or 0 to stop): \" number <- getLine let num = read number if num == 0 then return [] else do rest <- getNumber return (num : rest) printFactorials [] = putStrLn \"\" printFactorials (x:xs) = do putStrLn (show x ++ \" factorial is: \" ++ show (factorial x)) printFactorials xs factorial 1 = 1 factorial n = n * factorial (n-1) Run it in ghci: main Compile and run in console: ghc --make SumInputs.hs -o myfac ./myfac Exercise 4.4 & 4.5 data Pair a b = Pair a b pairFst (Pair x y) = x pairSnd (Pair x y) = y data Triple a b c = Triple a b c tripleFst :: Triple a b c -> a tripleFst (Triple a b c) = a tripleSnd (Triple a b c) = b tripleThr (Triple a b c) = c data Quadruple a b = Quadruple a a b b deriving (Show) firstTwo :: Quadruple a b -> [a] -- you can't write it as: ... -> [a, a]. This is not a valid type expression? firstTwo (Quadruple w x y z) = [w, x] lastTwo :: Quadruple a b -> [b] lastTwo (Quadruple w x y z) = [y, z] Exercise 4.6 data Tuple a b c d = Tuple1 a | Tuple2 a b | Tuple3 a b c | Tuple4 a b c d deriving (Show) tuple1 :: Tuple a b c d -> a tuple1 (Tuple1 x) = x tuple1 (Tuple2 x y) = x tuple1 (Tuple3 x y z) = x tuple1 (Tuple4 x y z t) = x tuple2 :: Tuple a b c d -> Maybe b tuple2 (Tuple1 x) = Nothing tuple2 (Tuple2 x y) = Just y tuple2 (Tuple3 x y z) = Just y tuple2 (Tuple4 x y z t) = Just y tuple3 :: Tuple a b c d -> Maybe c tuple3 (Tuple1 x) = Nothing tuple3 (Tuple2 x y) = Nothing tuple3 (Tuple3 x y z) = Just z tuple3 (Tuple4 x y z t) = Just z tuple4 :: Tuple a b c d -> Maybe d tuple4 (Tuple1 x) = Nothing tuple4 (Tuple2 x y) = Nothing tuple4 (Tuple3 x y z) = Nothing tuple4 (Tuple4 x y z t) = Just t Pattern matching plays a big role in tuple-like data structure.","tags":"Tech","url":"http://leetschau.github.io/note-about-yet-another-haskell-tutorial.html","loc":"http://leetschau.github.io/note-about-yet-another-haskell-tutorial.html"},{"title":"Haskell Command-line Application Building","text":"Haskeline Package Haskeline provides a user interface for line input in command-line programs. This library is similar in purpose to readline, but since it is written in Haskell it is (hopefully) more easily used in other Haskell programs. A tab-completion solution based on haskeline: Haskell (haskeline) word completion Command Suite Parse console-program provides an infrastructure to build command line programs. It provides the following features: Declare any number of \"commands\" (modes of operation) of the program; Declare options of these commands; Collect options from a configuration file and the command line, and execute the proper command;","tags":"Tech","url":"http://leetschau.github.io/haskell-command-line-application-building.html","loc":"http://leetschau.github.io/haskell-command-line-application-building.html"},{"title":"Download Website with wget","text":"I want to download the Chinese version of \"Learn you a Haskell for Great Good\" at http://learnyouahaskell-zh-tw.csie.org/, use this command: wget - U mozilla -- limit - rate = 200 k -- no - clobber -- convert - links -- random - wait - r - p - E - e robots = off http : // learnyouahaskell - zh - tw . csie . org / where: -U mozilla: pretends to be just like a browser Mozilla is looking at a page; -r: recursive download all website, -p: download everything even pictures; -E: gets the right extension of the file, without most html and other files have no extension; -e robots=off: act like we are not a robot; You can use \"-l\" option to specify the recursive depth. The default maximum depth is five layers. Ref: LINUX - wget full website - full site download https://www.gnu.org/software/wget/manual/html_node/Recursive-Download.html","tags":"Tech","url":"http://leetschau.github.io/download-website-with-wget.html","loc":"http://leetschau.github.io/download-website-with-wget.html"},{"title":"Postgresql Notes","text":"Documentations PostgreSQL Wiki 中文PostgreSQL Wiki 中文维基百科上的PostgreSQL","tags":"Tech","url":"http://leetschau.github.io/postgresql-notes.html","loc":"http://leetschau.github.io/postgresql-notes.html"},{"title":"Remove gnome-keyring on Linux Mint Xfce","text":"$ sudo aptitude remove gnome-keyring","tags":"Tech","url":"http://leetschau.github.io/remove-gnome-keyring-on-linux-mint-xfce.html","loc":"http://leetschau.github.io/remove-gnome-keyring-on-linux-mint-xfce.html"},{"title":"TCO in Python","text":"TCO (Tail Recursion Optimization) will probably never be supported by CPython because Guido believe TCO will make debugging difficult by messing up tracebacks. Try the following scripts: cnt = 1000 def trisum ( n , csum ) : if n == 0 : return csum else : return trisum ( n - 1 , csum + n ) print trisum ( cnt , 0 ) It runs OK when cnt is 10 or 100, but when it's 1000 a runtime error raised: \"RuntimeError: maximum recursion depth exceeded\". You can always use iteration to replace recursion like that in the following reference, but that is not FP. Ref: http://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion","tags":"Tech","url":"http://leetschau.github.io/tco-in-python.html","loc":"http://leetschau.github.io/tco-in-python.html"},{"title":"Working with External Commands in Vim","text":"Jump between vim and shell You have 2 options to working on shell without leaving vi: \":sh\" + \"C-d\": you don't know if you are in a \"real\" shell; \"C-z\" + \"fg\": you can check if you've suspended a vim with \"jobs\", recommended; Insert outside text into vim buffer from another file: \":r \"; from external command: \":r ! \", for example: :r !ls -l|grep abc Ref: https://www.linux.com/learn/tutorials/442419-vim-tips-working-with-external-commands","tags":"Tech","url":"http://leetschau.github.io/working-with-external-commands-in-vim.html","loc":"http://leetschau.github.io/working-with-external-commands-in-vim.html"},{"title":"Line Terminator Conversion between Unix and Windows Format on Ubuntu","text":"Install: sudo apt-get install tofrodos unix -> dos: todos ; dos -> unix: fromdos You can do the same thing with vi: open that file :set ff=dos/unix or use \":set ff\" to query current format. Verified on Linux Mint 14 Xfce.","tags":"Tech","url":"http://leetschau.github.io/line-terminator-conversion-between-unix-and-windows-format-on-ubuntu.html","loc":"http://leetschau.github.io/line-terminator-conversion-between-unix-and-windows-format-on-ubuntu.html"},{"title":"Functional Programming in Ruby 1.9","text":"Blocks are just a special syntactic sugar in Ruby to create Procs. Lambdas are really just Procs, but with two important differences: Lambdas check the arguments they receive, just like methods. Procs do not. This means if you pass only one argument to a Lambda that takes two arguments, you'll get an ArgumentError. If you do the same to a Proc, it will just blindly accept the ones you did give, and set the rest of the arguments to nil; Any return statements used in a Proc will also return from the method that called that Proc. Lambdas, on the other hand, will not. This means you can call a Lambda, get its return value, and process it, all within the one method; Currying is the ability to take a function that accepts n parameters and generate from it one of more functions with some parameter values already filled in. In RUby 1.9, you create a curry-able proc by calling the curry method on it. If you subsequently call this curried proc with fewer parameters than it expects, it will not execute. Instead, it returns a new proc with those parameters already bound; Ref: Functional Programming Techniques With Ruby: Part I, II and III Fun with Procs in Ruby 1.9 Proc in Ruby 1.9.3 Documentation","tags":"Tech","url":"http://leetschau.github.io/functional-programming-in-ruby-19.html","loc":"http://leetschau.github.io/functional-programming-in-ruby-19.html"},{"title":"Command-line Application Framework of Python","text":"Criteria Parse command and command suite; Help and Manual auto-creation; Deploy tools; Configuration tools; Candidates configglue in 2.7+ : build-in package in 2.7.3 argparse in 2.7+ : build-in package in 2.7.3 docopt cli curses : help to implement incremental search clint CommandLineApp Ref: Creating python command line applications with docopt","tags":"Tech","url":"http://leetschau.github.io/command-line-application-framework-of-python.html","loc":"http://leetschau.github.io/command-line-application-framework-of-python.html"},{"title":"Get Total Testcase Number in JUnit Report File with grep and awk","text":"Under $JENKINS_HOME/jobs/GSP/workspace/build/work/plugins(we call this folder as \"basedir\"), there are many bundle folders. Some of them were compiled, so there are many test report file \"TEST- .xml\" in /build/unittest_report, for example, com.boco.gsp.element.decision.config/build/unittest_report/TEST-com.boco.gsp.decision.config.parser.DecisionParserTest.xml. The content of this file is: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> ... In this case the testcase number is 3 according to 'test=\"3\"'. Now we need get the total number of testcases with following steps: find all these test report file under ${basedir}; get the testcase number; add all these number up; print the result; We achieve this by the following command under ${basedir}: grep -Po '(?<=tests=\")\\d+' * /TEST- .xml | awk -F':' '{SUM += $2; print $1 \": \" $2} END {print \"Total: \" SUM}' \"-P\" let grep interpret pattern as perl regular expression. \"-o\" means only output the matched part. \"(?>=...)\" eliminates the text in parenthesis. \"-F\" of awk specify the delimiter. This command works on zsh because the \"* / \" syntax only valid on zsh. If you use bash, you have to modify this.","tags":"Tech","url":"http://leetschau.github.io/get-total-testcase-number-in-junit-report-file-with-grep-and-awk.html","loc":"http://leetschau.github.io/get-total-testcase-number-in-junit-report-file-with-grep-and-awk.html"},{"title":"Run Clojure Script with External Dependencies without leiningen","text":"The normal way of deploy clojure files is using leiningen. But if we have no leiningen, or the script is small and unnecessary to pack as a leiningen project, we can build a \"bare\" clojure script in the following way. Get the dependency jar files, 2 options: i. download the jar file directly; i. if the dependency project provide the dependency as leiningen dependency items in porject.clj (for example, \"[org.clojure/data.json \"0.2.3\"]\" in data.json ), you can build the leiningen project following Parse Sonarqube Data via Web API in Clojure , then copy the denpendency jar files from the ~/.m2/repository folder; Build srcipt: get-sonar-data.clj (require '[clojure.data.json :as json]) (def url \"http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&metrics=classes\") (def data (json/read-str (slurp url))) (println ((first data) \"name\")) (println ((first ((first data) \"msr\")) \"val\")) Run script: java -cp './*:.' clojure.main get-sonar-data.clj","tags":"Tech","url":"http://leetschau.github.io/run-clojure-script-with-external-dependencies-without-leiningen.html","loc":"http://leetschau.github.io/run-clojure-script-with-external-dependencies-without-leiningen.html"},{"title":"Parse Sonarqube Data via Web API in Clojure","text":"build project: lein new sonar-parser add dependencies: add \"[org.clojure/data.json \"0.2.3\"]\" in :dependencies in project.clj; update (download) dependency jars (into ~/.m2/repository folder): lein deps start repl: lein repl test in repl: ( require ' [ clojure . data . json : as json ]) ( def data ( json / read - str ( slurp \"http://...\" ))) (( first (( first data ) \"msr\" )) \"val\" ) ; => 5 . 0 add script into src/sonar-parser/core.clj; pack project: lein uberjar","tags":"Tech","url":"http://leetschau.github.io/parse-sonarqube-data-via-web-api-in-clojure.html","loc":"http://leetschau.github.io/parse-sonarqube-data-via-web-api-in-clojure.html"},{"title":"Parse Sonarqube Data via Web API in Groovy","text":"Shell getdata.groovy url = \"http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&metrics=classes\" addr = url . toURL () conn = addr . openConnection () status = conn . getResponseCode () reader = new BufferedReader ( new InputStreamReader ( conn . getInputStream ())) datastr = reader . readLine () import groovy.json.JsonSlurper slurper = new JsonSlurper () data = slurper . parseText ( datastr ) msr = data [ 0 ] . msr . frmt_val [ 0 ] Run Shell Script start shell: \"groovysh\" load script file: \". getdata.groovy\"; all variables in script file can be used in shell; evaluate variable value by its name directly; reload file: \"purge all\" then \". getdata.groovy\"; Script getdata_scpt.groovy def url = \"http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&metrics=classes\" def addr = url . toURL () def conn = addr . openConnection () def status = conn . getResponseCode () def reader = new BufferedReader ( new InputStreamReader ( conn . getInputStream ())) println reader . readLine () run script groovy getdata_scpt.groovy","tags":"Tech","url":"http://leetschau.github.io/parse-sonarqube-data-via-web-api-in-groovy.html","loc":"http://leetschau.github.io/parse-sonarqube-data-via-web-api-in-groovy.html"},{"title":"Run Shell Script Inside Ruby Script","text":"Backtick grammar Thanks to the backtick grammar and string substitution, shell script can be embedded more easily into Ruby script than Python. Execute shell command in irb, the return value is the output in stdout: 2 . 1 . 2 : 036 > `ls -l|grep play` => \"drwxr-xr-x 3 chad chad 4096 Aug 12 17:17 playproj\\n\" 2 . 1 . 2 : 037 > `aaa` Errno :: ENOENT : No such file or directory - aaa ... Execute shell commands in Ruby scripts: # Usage : Save the following scripts in file \"cmd.rb\" $ ruby cmd . rb ls - a cmd = ARGV [ 0 ] op = ARGV [ 1 ] result = `# { cmd } # { op } ` puts result system function Kernel#system executes the given command in a subshell. Return true if the command was found and ran successfully, false otherwise. The output of the command will be written to stdout. So it can't store the command output. 2 . 1 . 2 : 036 > ` ls - l | grep play ` drwxr - xr - x 3 chad chad 4096 Aug 12 17 : 17 playproj => truee Ref: Calling Bash Commands From Ruby Can Ruby access output from shell commands as it appears?","tags":"Tech","url":"http://leetschau.github.io/run-shell-script-inside-ruby-script.html","loc":"http://leetschau.github.io/run-shell-script-inside-ruby-script.html"},{"title":"Line Wrap in Python","text":"Omitting Backslash You can only omitting backslash in list bracket or using parenthesis with long string. ke = ['com.boco.esb.analysismgr.service.impl', 'com.boco.esb.dataencapsulation.service.impl', 'com.boco.esb.dataquality.service.impl'] issue_url = ('http://%s/api/issues/search?componentRoots=%s:%s' '&pageSize=5000&rules=%s&statuses=OPEN,REOPENED' ) Mandatory Backslash Long Variable Name Use backslash following \"=\" to save space. METHOD_RELATED_ISSUE_KEYS = \\ ['checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck', 'checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck', 'checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck', 'checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck', 'checkstyle:com.puppycrawl.tools.checkstyle.checks.duplicates.StrictDuplicateCodeCheck'] List Comprehension Backslash before \"for\" in list(dict) comprehension cannot be omitted. total_issue_num = sum(get_issue_num(proj_name, pkg, issue_key) \\ for pkg in pkgs) After Operator Backslash after operator cannot be omitted. line_cov = sum(cov_line for (cov_line, ) in lines_info) / \\ sum(valid_line for ( ,valid_line) in lines_info)","tags":"Tech","url":"http://leetschau.github.io/line-wrap-in-python.html","loc":"http://leetschau.github.io/line-wrap-in-python.html"},{"title":"Retrieve Sonarqube Data with Java","text":"The following class \"GetData\" can retrieve data from Sonarqube. But you have to import java.net.URL; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.io.IOException; import java.io.BufferedReader; import java.io.InputStreamReader; public class GetData { private static String url = \"http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&metrics=classes\"; public static void main(String[] args) { HttpURLConnection myURLConnection = null; int status = -1; String cont = null; try { URL myURL = new URL(url); myURLConnection = (HttpURLConnection)myURL.openConnection(); myURLConnection.connect(); status = myURLConnection.getResponseCode(); switch (status) { case 200: case 201: BufferedReader br = new BufferedReader(new InputStreamReader(myURLConnection.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = br.readLine()) != null) { sb.append(line+\"\\n\"); } br.close(); cont = sb.toString(); } } catch (MalformedURLException e) { System.out.println(\"url error\"); } catch (IOException e) { System.out.println(\"other io error\"); } System.out.println(\"my conn ret code: \" + status); System.out.println(\"my conn: \" + cont); } } $ java GetData my conn ret code: 200 my conn: [{\"id\":8251,\"key\":\"ESB:com.boco.esb.analysismgr.service.impl\",\"name\":\"com.boco.esb.analysismgr.service.impl\",\"scope\":\"DIR\",\"qualifier\":\"PAC\",\"date\":\"2013-11-29T17:02:10+0800\",\"lname\":\"com.boco.esb.analysismgr.service.impl\",\"lang\":\"java\",\"msr\":[{\"key\":\"classes\",\"val\":5.0,\"frmt_val\":\"5\"}]}]","tags":"Tech","url":"http://leetschau.github.io/retrieve-sonarqube-data-with-java.html","loc":"http://leetschau.github.io/retrieve-sonarqube-data-with-java.html"},{"title":"FP vs OOP","text":"Four Paradigms of Decomposing Problems Procedural: C, Pascal, Unix shells; Declarative: SQL; Object-oriented: Smalltalk, Java; Functional: Haskell; Relations of FP and OOP Functional programming can be considered the opposite of object-oriented programming. Objects are little capsules containing some internal state along with a collection of method calls that let you modify this state, and programs consist of making the right set of state changes. Functional programming wants to avoid state changes as much as possible and works with data flowing between functions.\" --From Functional Programming HOWTO I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle. --Joe Armstrong (the creator of Erlang) discussed in \"Coders At work\" about the reusability of Object-Oriented Programming. To be fair, in my opinion it's not an intrinsic problems of OOP. You can write OOP code which is also functional, but certainly: Typical OOP tends to emphasize change of state in objects. Typical OOP tends to impose tight coupling between layers (which hinders modularization). Typical OOP mixes the concepts of identity and state. Mixture of data and code raises both conceptual and practical problems. -- Ruby Functional Programming Rich Hickey, the creator of Clojure (a functional Lisp-dialect for the JVM), discusses state, values and identity in excellent talk . If we can do functional programming with Python, do we need a specific functional programming language? http://programmers.stackexchange.com/questions/42986/if-we-can-do-functional-programming-with-python-do-we-need-a-specific-functiona","tags":"Tech","url":"http://leetschau.github.io/fp-vs-oop.html","loc":"http://leetschau.github.io/fp-vs-oop.html"},{"title":"Manipulate Sonarqube Database in PostgreSQL with JDBC","text":"Use the following Java class to manipulate Sonarqube database in postgresql. ManipulateSonarPost.java import java.sql.Connection; import java.sql.DatabaseMetaData; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; public class TestPost { private static Connection connection = null; public static void main(String[] args) throws SQLException, java.lang.ClassNotFoundException { String url = \"jdbc:postgresql://localhost/sonar\"; String user = \"sonar\"; String password = \"sonar\"; String driver = \"org.postgresql.Driver\"; Class.forName(driver); connection = DriverManager.getConnection(url+\"?user=\"+user+\"&password=\"+password); if ((connection == null) || (connection.isClosed())) return; System.out.println(\"Connection is: \"+connection); listTables(); String table = \"projects\"; printTable(table); connection.close(); } private static void listTables() throws SQLException { DatabaseMetaData md = connection.getMetaData(); ResultSet rs = md.getTables(null, null, \"%\", null); while (rs.next()) { System.out.println(rs.getString(3)); } rs.close(); } private static void printTable(String tableName) throws SQLException { Statement st = connection.createStatement(); ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName); while (rs.next()) { System.out.println(\"Column 1: \" + rs.getString(1)); System.out.println(\"Column 2: \" + rs.getString(2)); System.out.println(\"Column 3: \" + rs.getString(3)); } rs.close(); st.close(); } } Compile and Run $ javac -cp ~/apps/sonar-3.6.1/extensions/jdbc-driver/postgresql/postgresql-9.1-901-1.jdbc4.jar ManipulateSonarPost.java $ java -cp ~/apps/sonar-3.6.1/extensions/jdbc-driver/postgresql/postgresql-9.1-901-1.jdbc4.jar:. ManipulateSonarPost","tags":"Tech","url":"http://leetschau.github.io/manipulate-sonarqube-database-in-postgresql-with-jdbc.html","loc":"http://leetschau.github.io/manipulate-sonarqube-database-in-postgresql-with-jdbc.html"},{"title":"Backup and Restore Postgresql Database","text":"Backup (On CentOS 6.4) Enable backup as user \"sonar\": modify authentication file pg_hba.conf following SonarQube and Postgresql on Linux ; Then you can backup a database: $ pg_dump -U sonar -F c -v -f sonar.bak sonar Synopsis: pg_dump [options] . \"-F c\" means using \"custom\" file format. -f specifies the output file name. Or backup all: $ pg_dumpall -U postgres -f totalbackup.sql -v -c The \"-c\" will print drop commands to remove existing databases or roles. So you can restore them without cleaning existing databases in your backup server first. Restore Install and start postgresql server. Then you can restore a full backup: $ psql -U postgres -f totalbackup.sql Or restore a specific database: $ psql -U postgres (modify pg_hba.conf for authenticaiton); create role \"sonar\" and database \"sonar\": create role sonar login password 'sonar'; create database sonar owner sonar; $ pg_restore -U sonar -d sonar -j 4 -v sonar.bak Verify Print database size of \"sonar\": $ psql -U sonar -c \"\\l+\" sonar|grep sonar Print all tables and sizes in database \"sonar\": $ psql -U sonar -c \"\\d+\" sonar Or run a psql console ($ psql -U sonar), and use the following commands to verify: \\d // list all tables select * from projects; // print contents of table \"projects\" select pg_size_pretty(pg_database_size('sonar')); // print the human_readable size of database \"sonar\" select pg_database_size('sonar'); // give the exact size of database \"sonar\"","tags":"Tech","url":"http://leetschau.github.io/backup-and-restore-postgresql-database.html","loc":"http://leetschau.github.io/backup-and-restore-postgresql-database.html"},{"title":"Rsync Omit \"core\" Folder","text":"Problem Description Test script: mkdir { gsp , dst , dst2 , dst3 } svn co http : // 10 . 0 . 2 . 59 : 8118 / svn / gsp / Development - Area / 3 - SCL / Trunk / TaskServer_Gsp gsp rsync - auC gsp /* dst/ rsync -au gsp/* dst2/ rsync -auC --include=core gsp/ dst3/ rsync -au gsp/ dst4/ diff -rq gsp dst Output: Only in gsp/com.boco.gdpp.taskserver.core/src/com/boco/gdpp/taskserver: core Cause and Solution The -C option looks \"core\" as a source version control folder, and exclude it. See man page for details. The size of the \".svn\" folder is similar to the host folder. So \"-C\" option is necessary. Becase \".svn\" is not \" \", so there is no \".svn\" in dst2. But it will also exclude other \". \" folder in gsp. So the right answer is: rsync - auC -- include = core gsp / dst3 / The dst4 is a completely copy.","tags":"Tech","url":"http://leetschau.github.io/rsync-omit-core-folder.html","loc":"http://leetschau.github.io/rsync-omit-core-folder.html"},{"title":"Note about \"What Does Functional Programming Mean\"","text":"Tony Morris: What Does Functional Programming Mean? From: http://stackoverflow.com/questions/159797/is-ruby-a-functional-language","tags":"Tech","url":"http://leetschau.github.io/note-about-what-does-functional-programming-mean.html","loc":"http://leetschau.github.io/note-about-what-does-functional-programming-mean.html"},{"title":"Notes about Why Functional Programming Matters","text":"John Hughes: Why Functional Programming Matters The key points of a programming language is its modularization capability: it can divide a big problem into some smaller sub-problems; then glue them together. \"Modularity is the key to successful programming. Languages that aim to improve productivity must support modular programming well.\" FP language has 2 ways to glue sub-problems together: High-order functions: the functions using other functions as its parameter(s); Lazy evaluation: the generator-selector model; Analysis of \"4.1 Newton-Raphson Square Roots\" Convert the functions of Newton-Raphson algorithm in this paper into Clojure functions: next n x = (x + n/x)/2 => #(/ (+ % (/ n %)) 2) repeat (next n) a0 => (iterate #(/ (+ % (/ n %)) 2) a0) So the 8th iteration in decimal is: (double (nth (iterate #(/ (+ % (/ n %)) 2) a0) 8)) Here the point is the function \"iterate\" returns a lazy sequence, which is to say, if you evaluate \"(iterate inc 5)\" in clojure repl, you got a infinite list (you have to press Ctrl-c to interrupt the output). You use \"nth\" to get the nth element in this list without worrying about your memory space.","tags":"Tech","url":"http://leetschau.github.io/notes-about-why-functional-programming-matters.html","loc":"http://leetschau.github.io/notes-about-why-functional-programming-matters.html"},{"title":"Run Ruby Shell on Android","text":"Installation: Install Ruboto Core and IRB from Google Play; Run irb: double click \"Ruboto IRB\" icon; Verify: input \"Dir.pwd\", my got the output: \"/storage/sdcard0/jruby\"; Verify device: HUAWEI C8813D (mobile phone), Android 4.1.1. bingo.","tags":"Tech","url":"http://leetschau.github.io/run-ruby-shell-on-android.html","loc":"http://leetschau.github.io/run-ruby-shell-on-android.html"},{"title":"git Commands and Configurations","text":"Some helpful resources: Git Cheatsheet A Visual Git Reference ; git - the simple guide ; Git has 3 places to store files: working dir, stage and history. The last commit in history is called \"HEAD\", all the older commits have their IDs. In the following texts, \"a47c3\" and \"b325c\" are both sample revision IDs, which can be get with git log --oneline . Move Files Working dir -> Stage: git add -A for all files, git add -u for update, git add filename ; Stage -> HEAD: git commit filename , git commit for all; HEAD -> Stage: git reset -- files , git reset or git reset -- . for all; Stage -> Working dir: git checkout -- files , git checkout -- . for all; HEAD -> ( Stage & Working dir ): git checkout HEAD -- files , git checkout HEAD do nothing; Working dir -> ( Stage & HEAD ): git commit filename , git commit -a for all; Compare Files Working dir <-> Stage: git diff filename , git diff for all; Stage <-> HEAD: git diff --cached filename , git diff --cached for all;; HEAD <-> Working dir: git diff HEAD filename , git diff HEAD for all; Revision a47c3 <-> Working dir: git diff a47c3 filename , git diff a47c3 for all; Revision a47c3 <-> b325c: git diff a47c3 b325c filename , git diff a47c3 b325c for all; Revision X and its previous revision: git show a47c3 , if X is HEAD: git show ; If comparing a specific file, always add '-- ' after the git command. For example, git show -- filename , git diff --cached -- filename . Show file content Show file content of a specific commit: git show a47c3:filename ; Logs and Tags Print logs with tags and color highlights: git log --decorate ; Print logs with files changed: git log --name-status ; Print logs in one line for each: git log --oneline ; Print logs with all information: git log --graph --decorate --name-status --all ; Create a tag based on a commit: git tag 1.0 a47c3 ; Create a tag on HEAD: git tag 'Dell-E7450' ; List all tags: git tag ; Show tag contents: git show Dell-E7450 ; Useful Commands git log -p --all -S 'search string' : search a string in git history, see note \"Search String Pattern in Git History\" for details; git add <files> : add files to stage area, use git rm --cached <file> to remove it from stage area (physical file remains); git add -A : If you use \"mv\" instead of \"git mv\" to rename a file, you can use this command to apply this rename operation to stage area; git checkout <commit> : make your working directory back to state ; $ git checkout <branch-name> // switch between branches git checkout -- <file-name> : use in stage area replace its counterpart in working directory; git checkout -- . : abandon all modifications in working directory. Don't forget the last dot. It means \"all\". git clean -n : \"dry run\" mode, preview the removed files; git clean -f : remove all untracked files; git clean -f -d : remove all untracked files and directories; git commit : commit all files in stage area; git config : see section \"git config\" below. list all configs: git config --list ; git diff : compare file contents; git init : initialize local repository; git log --stat : list log with file changes; git mv <old-file-name> <new-file-name> git remote show origin : git equivalent of \"svn info\"; git reset --hard <commit> : go back to completely, both working directory and repository, the history is lost; git reset : undo all \"git add\" commands, same with \"git reset HEAD\"; git reset -- <file-name> : only remove from stage area; git rm : git show <object> : show information of , like a commit, the following command show the information of commit 389be, like \"git log ...\": git show 389 be -- stat or print file contents of a specified version , the following command show the file contents of the parent of HEAD: git show HEAD ~ 1 : donno / cloudsync . py Note that the colon after version is necessary, or it will print the difference between HEAD~1 & HEAD~2 when it's git show HEAD~1 filename ; git stash : save current working directory and index and change them to the state of last commit; git stash save \"some messages\" : stash with some messages; git stash apply : restore last \"stash save\"; git stash drop : delete last \"stash save git stash pop : git stash apply + git stash drop git stash clear : clear all stash saves; git status Undo the last commit After a commit with git commit -m \"...\" , I found I forget to update version number which is defined in file build.gradle. Now I need undo the last commit, modify version number in build.gradle, then commit again with the same commit comments. $ git reset --soft HEAD~1 // edit build.gradle $ git add -u $ git commit -c ORIG_HEAD Ref: Undo the last Git commit? GUI tool: gitk , see all branches with gitk --all . Git config Add the following lines into user level config file ~/.gitconfig, or system level config file /etc/gitconfig: [user] name = leetschau email = leetschau@gmail.com [alias] ci = commit -s co = checkout br = branch lg = log --stat --graph --decorate --all Here in git log , --stat prints file changed info, --all print all branches instead of current branch, --decorate print branch/tag info, --graph print hierarchical relation lines between commits. Or change configs in command line: git config --global alias.ci \"commit -s\" git config --global user.name \"leetschau\" git config --global user.email \"leetschau@gmail.com\"","tags":"Tech","url":"http://leetschau.github.io/git-commands-and-configurations.html","loc":"http://leetschau.github.io/git-commands-and-configurations.html"},{"title":"Run Clojure Script Portable","text":"Download leiningen script to ~/.lein, make it executable with chmod 755 lein . Add ~/.lein into $PATH, and run lein repl . This will download clojure jar into folder ~/.m2/repository/org/clojure/clojure/1.8.0. Add an alias into your ~/.bash_aliases: alias clj='java -cp ~/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar clojure.main' . So you can start a clojure repl with clj (which is much faster than lein repl ). To run a script, add script file name and arguments after clj . For example: cat << EOF > hi . clj ( println \"hello world\" ) EOF clj hi . clj cat << EOF > hello . clj ( doseq [ name * command - line - args * ] ( println ( # ( str \"Hello, \" % \"!\" ) name ))) EOF clj hello . clj Leo Chad P.S.: you can also download clojure jar from its website directly.","tags":"Tech","url":"http://leetschau.github.io/run-clojure-script-portable.html","loc":"http://leetschau.github.io/run-clojure-script-portable.html"},{"title":"Sonarqube中的Issue","text":"Sonarqube中的issue，也就是一个不符合代码规范的\"问题\"，有一个\"状态(status)\"属性，如果在某一版本的源代码上出现了一个issue（比如类过长），后来修改源代码导致这个issue消失（将此类改短），它的状态就会变为\"Close\"，但这个issue本身不会消失，Web API查询时如不指定issue的statuses，默认是所有状态，因此就把一些已经Close的issue也查了出来，解决方法是在api后面加上\"statuses=OPEN,REOPENED\": http:// : /api/issues/search?componentRoots= : &pageSize=5000&rules= &statuses=OPEN,REOPENED","tags":"Tech","url":"http://leetschau.github.io/sonarqubezhong-de-issue.html","loc":"http://leetschau.github.io/sonarqubezhong-de-issue.html"},{"title":"修改CentOS系统的最大连接数","text":"一秒内最大连接数 /etc/xinetd.conf中cps, instances, per_source由50改为1000, 重启服务： sudo /etc/init.d/xinetd restart Ref: 鸟哥的Linux私房菜 第18章、认识系统服务 用户可发起的最大进程数 /etc/security/limits.d/90-nproc.conf，将1024改为了10240; 查询godu用户当前发起的进程数：ps -L -u godu|wc -l Ref: http://timsvirtualworld.com/2013/03/increasing-number-of-processes-allowed-to-be-run-by-a-user-on-rhel-centos-6/ 用户级连接限制数 /etc/security/limits.conf增加： godu soft nofile 10000 godu hard nofile 10000 验证方法：ulimit -Hn, ulimit -Sn 修改后需要重登录才能生效； Ref: Linux Increase The Maximum Number Of Open Files / File Descriptors (FD) 另：主机名定义 修改/etc/hosts 增加：10.0.2.49 bocoty49 验证：ping bocoty49 修改后即时生效，不需要重登录； Ref: Linux操作系统下/etc/hosts文件配置方法","tags":"Tech","url":"http://leetschau.github.io/xiu-gai-centosxi-tong-de-zui-da-lian-jie-shu.html","loc":"http://leetschau.github.io/xiu-gai-centosxi-tong-de-zui-da-lian-jie-shu.html"},{"title":"Functional Programming in Python","text":"This program calculate file issues on specified packages, retrieved from Sonarqube Server. Origin imperative program from __future__ import division import urllib2 , json SERV_ADDR = '10.0.2.74:9000' FILE_LENGTH_ISSUE_KEY = 'checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck' METHOD_RELATED_ISSUE_KEYS = [ 'checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck' , 'checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck' , 'checkstyle:com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck' , 'checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck' , 'checkstyle:com.puppycrawl.tools.checkstyle.checks.duplicates.StrictDuplicateCodeCheck' ] def get_data ( url ): conn = urllib2 . urlopen ( url ) return json . load ( conn ) def get_issue_num ( proj_name , pkg_key , issue_key ): issue_url = 'http:// %s /api/issues/search?componentRoots= %s : %s &pageSize=5000&rules= %s ' data = get_data ( issue_url % ( SERV_ADDR , proj_name , pkg_key , issue_key )) issues = data [ 'issues' ] return len ( issues ) def get_class_num ( proj_name , pkg_key ): class_num_url = 'http:// %s /api/resources?resource= %s : %s &metrics=classes' data = get_data ( class_num_url % ( SERV_ADDR , proj_name , pkg_key )) return data [ 0 ][ 'msr' ][ 0 ][ 'val' ] def get_method_num ( proj_name , pkg_key ): method_num_url = 'http:// %s /api/resources?resource= %s : %s &metrics=functions' data = get_data ( method_num_url % ( SERV_ADDR , proj_name , pkg_key )) return data [ 0 ][ 'msr' ][ 0 ][ 'val' ] def get_average_issue_ratio ( proj_name , pkgs , issue_key , base_type_name ): total_issue_num = 0 total_base_num = 0 for pkg in pkgs : total_issue_num += get_issue_num ( proj_name , pkg , issue_key ) total_base_num += base_type_name ( proj_name , pkg ) return total_issue_num / total_base_num def file_length_check ( proj_name , pkgs ): res = get_average_issue_ratio ( proj_name , pkgs , FILE_LENGTH_ISSUE_KEY , get_class_num ) return '{:.2%}' . format ( res ) def method_related_checks ( proj_name , pkgs ): check_result = {} for issue_key in METHOD_RELATED_ISSUE_KEYS : res = get_average_issue_ratio ( proj_name , pkgs , issue_key , get_method_num ) issue_name = issue_key . split ( '.' )[ - 1 ] check_result [ issue_name ] = '{:.2%}' . format ( res ) return check_result def get_test_lines ( proj_name , pkg_key ): ... return covered_lines , valid_lines def get_test_branches ( proj_name , pkg_key ): ... return covered_branches , valid_branches def get_average_coverage ( proj_name , pkgs ): lines = [] for pkg in pkgs : res = get_test_lines ( proj_name , pkg ) lines . append ( res ) total_covered_lines = 0 total_valid_lines = 0 for item in lines : covered_lines , valid_lines = item total_covered_lines += covered_lines total_valid_lines += valid_lines average_line_coverage = total_covered_lines / total_valid_lines ... average_branch_coverage = total_covered_branches / total_valid_branches return average_line_coverage , average_branch_coverage List Comprehension def get_average_issue_ratio ( proj_name , pkgs , issue_key , base_type_name ) : total_issue_num = sum ( get_issue_num ( proj_name , pkg , issue_key ) for pkg in pkgs ) total_base_num = sum ( base_type_name ( proj_name , pkg ) for pkg in pkgs ) return total_issue_num / total_base_num def get_average_coverage_v1 ( proj_name , pkgs ) : lines_info = [ get_test_lines ( proj_name , pkg ) for pkg in pkgs ] line_cov = sum ( cov_line for ( cov_line , _ ) in lines_info ) / sum ( valid_line for ( _ , valid_line ) in lines_info ) branches_info = [ get_test_branches ( proj_name , pkg ) for pkg in pkgs ] branch_cov = sum ( cov_branch for ( cov_branch , _ ) in branches_info ) / sum ( valid_branch for ( _ , valid_branch ) in branches_info ) return line_cov , branch_cov You can see this declarative version is much readable than its imperative counterpart. Note 1: Notice the usage of \"base_type_name\". As a function (first-class citizen), it's passed as a ordinary parameter into the method. Note 2: manipulate a complex list in the following way (result = (1+2+3)/(10+20+30)): col = [ ( 1 , 10 ) , ( 2 , 20 ) , ( 3 , 30 ) ] result = sum ( [ x for ( x , _ ) in col ] ) / sum ( [ y for ( _ , y ) in col ] ) in \"get_average_coverage_v1\" is still too complicated. So in the following sections you can see some more concise (and FP style) versions. Dictionary Comprehension def method_related_check_func ( proj_name , pkgs ) : return { issue_key . split ( ' . ' ) [ - 1 ]: ' {:.2%} ' . format ( get_average_issue_ratio ( proj_name , pkgs , issue_key , get_method_num )) for issue_key in METHOD_RELATED_ISSUE_KEYS } Its imperative counterpart has better code shape, but this functional version is more expressive. Ref: http://stackoverflow.com/questions/14507591/python-dictionary-comprehension Use zip, map and apply def get_average_coverage_v2 ( proj_name , pkgs ) : total_covered_lines , total_valid_lines = \\ apply ( lambda * x : map ( lambda * y : sum ( y ) , * x ) , [ get_test_lines ( proj_name , pkg ) for pkg in pkgs ] ) return total_covered_lines / total_valid_lines def get_cov_ratio ( col ) : covered , valid = map ( sum , apply ( zip , col )) return covered / valid def get_coverage_data_v3 ( proj_name , pkgs ) : return get_cov_ratio ( [ get_test_lines ( proj_name , pkg ) for pkg in pkgs ] ) def get_coverage_data_v4 ( proj_name , pkgs ) : cov_ratio = lambda col : reduce ( operator . truediv , map ( sum , apply ( zip , col ))) return cov_ratio ( [ get_test_lines ( proj_name , pkg ) for pkg in pkgs ] ) v2 works, but it's too complicated and hard to understand. But there are some useful things in it: variable arguments in lambda expression. v3 and v4 are almost the same: convert [(1,2), (11,22),(111,222)] to [(1,11,111),(2,22,222)] with \"apply(zip, ...)\"; add every element up (convert to [1+11+111, 2+22+222]) with \"map(sum, ...)\"; first element divided by the second: using external function in v3, or \"reduce\" in v4; Clearly this FP version is much readable than its imperative counterpart. You have to add \"import operator\" for v4. The corresponding clojure function is: (defn trans-metrics [ col ] (/ (apply + (map first col)) (apply + (map second col)))) or as function literal: #(/ (apply + (map first %)) (apply + (map second %))) It looks more readable than its Python counterpart. Final Script Note: Run Python script at command line with user defined functions: For example you write a module named \"ex.py\", and define a function \"getdata\" in it. Now run the following command in its directory: (the current working directory will be added in PYTHONPATH automatically) python -c 'import ex;print ex.getdata(\"bb\")' The ex.py and all functions in it are \"stable\" business logic. While the command (\"print ex.getdata()\" in this case) is \"how to use this tool\", which will change frequently. Thus we divide frequent changed part from stable logic, which is a best practice of programming.","tags":"Tech","url":"http://leetschau.github.io/functional-programming-in-python.html","loc":"http://leetschau.github.io/functional-programming-in-python.html"},{"title":"Evernote Development in Python","text":"Follow The Evernote SDK for Python Quick-start Guide : Get an account on sandbox.evernote.com and an API key; Download Evernote SDK for python: $ sudo pip install evernote; A simple demo: from evernote.api.client import EvernoteClient dev_token = ... # get it from evernote dev server client = EvernoteClient(token=dev_token) userStore = client.get_user_store() user = userStore.getUser() type(user) # evernote.edam.type.ttypes.User user.username # your user name of sandbox account noteStore = client.get_note_store() type(noteStore) # evernote.api.client.Store notebooks = noteStore.listNotebooks() for n in notebooks: print n.name Now add a notebook in your account via web page, then run: notebooks = noteStore.listNotebooks() for n in notebooks: print n.name You can get the list with newly added notebook. Create a new note: import evernote.edam.type.ttypes as Types note = Types.Note() note.title = \"Test note from EDAMTest.py\" # set note content ... created_note = note_store.createNote(note) Ref: EDAMTest.py on github","tags":"Tech","url":"http://leetschau.github.io/evernote-development-in-python.html","loc":"http://leetschau.github.io/evernote-development-in-python.html"},{"title":"Python Interactive Development Workflow","text":"The key of interactive programming is \"declarative programming\", which can be expressed as following principles: Try to write all business logic in functions or classes, instead of procedures; Express the result as return values of functions, instead of printing them to console; Then you store these functions or classes in your files. Then you start the REPL shell, load your function file, declare your inputs, run your functions with the inputs, evaluate the output; modify the function in file, reload your file in shell, run your functions again, reevaluate the output, continue this loop, until you get the expected output. Between these loops, you have 2 window: an editor and a shell, the former for write \"real\" production code, the latter for loading file and doing some experiments, while switching between them with Alt-Tab. You only declare inputs once. Using shortcuts (Ctrl-p) to reload function file and re-test your function. So the loop will be very fast, and you can concentrate on the business logic itself. emacs-for-python and IPython are the preferred editor and shell, both have powerful code completion functionality. Linux Shell Save some fundamental functions in a python file, say \"myfunc.py\". Then use \"python -i myfunc.py\" to load all functions in myfunc.py and enter interactive shell. Python Console \"execfile('filename.py')\" to load (or reload) file; \"dir()\" to list all variables; \"del(variable)\" to clear a variable; C-p, C-n to traverse in command history; IPython Tab autocompletion is awesome in ipython. Installation sudo apt - get install ipython - notebook Command history traverse and back reference History inputs: all in dictionary \"In\", use \"%hist -n\" list all previous command; Output: all in dictionary Out , _1 , _2 , ... C-p, C-n, %rep While all shortcuts supported by bash are available in IPython (See Command Line Shortcuts in Linux Shell for details). Command To line magic command, \"%\" can be omitted. %pwd: pwd ! : run shell command; %run : equals to \"execfile()\" in standard python shell; %reset: clear all user defined variables; %pycat : show file content with syntax coloring; %edit : edit file; %pdb or %run -d : debug file; log utility %logstate: get the current state of log: on/off %logstart -o %logstop Emacs emacs-for-python Difference between \"import\" and \"run\" You can put some code after if __name__ == ' __main__ ' : in a python file \"test.py\". Then if you want run these codes, use \"run test.py\" in ipython or \"execfile('test.py')\" in python shell. If you don't want to run these code, use \"import test\". But this is not a best practice. Try to put all things in functions and classes.","tags":"Tech","url":"http://leetschau.github.io/python-interactive-development-workflow.html","loc":"http://leetschau.github.io/python-interactive-development-workflow.html"},{"title":"Manage Historical Snapshots in Sonarqube","text":"Login as admin, go to a dashboard of a project, then click \"Configuration -> History\" at the upper-right corner of the panel.","tags":"Tech","url":"http://leetschau.github.io/manage-historical-snapshots-in-sonarqube.html","loc":"http://leetschau.github.io/manage-historical-snapshots-in-sonarqube.html"},{"title":"Work on Remote Git Repository","text":"Create New Branch $ git clone https://github.com/hackrole/pyevernote.git $ cd pyevernote $ git branch // list all existing branches $ git checkout -b leetschau // create new branch \"leetschau\" and checkout it Push to remote repository $ git push origin leetschau , where \"origin\" is repository name, \"leetschau\" is branch name. When you push your branch the first time, add \"-u\" to specify that the current branch is associated with the remote branch. Ref: http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time. Push all branches to remote repository $ git push origin --all . Sync with remote repository If there's no local changes, the first command is unnecessary. git checkout -- . git pull --all Discard local changes Discard all local changes and keep the same with last commit in repo. git reset --hard HEAD We need discard all local changes and keep the same with remote repository. Provided that you want sync with \"master\" branch in remote repository \"origin\": $ git fetch orgin $ git reset --hard origin/master Note that files not in stage area (not been \"add\") will remains, while files in stage area or committed will be removed. If your remote repo is developed with git flow, your synchronized repo also need install git flow. On CentOS, install it with yum install gitflow . See installation doc on gitflow for details. Remove Existing Branch $ git push origin :leetchao Create, query and remove remote repository alias $ git remote add pyevernote-repo https://github.com/hackrole/pyevernote.git $ git remote -v $ git remote rm pyevernote-repo Checkout from a existing repository and branch $ git clone https : // github . com / hackrole / pyevernote . git $ cd pyevernote $ git branch - r // list all local and remote branches origin / leetschau ... $ git checkout leetschau // or \" git checkout -b leetschau origin/leetschau \" for old version git For verification, you can find 'remote=origin ... under [branch \"leetschau\"]' in file .git/config. Update from remote repository $ git fetch origin $ git status Your branch is **behind** 'origin/develop' by 3 commits... ( which means your local branch need to be updated with remote one ) $ git merge origin/develop Or simply git pull origin develop , where develop is the branch name we want to sync. Note: Be careful to use \"git pull\" for \"pull\" is too \"smart\". git: fetch and merge, donât pull gives the reason and provides an excellent explanation of what is \"branch\". Move a git repository from Bitbucket to Github Based on Moving Repository from Bitbucket to GitHub . cd $ DSNOTE_HOME git remote rename origin bitbucket // create a new repository \"dsnote\" on Github git remote add origin https : // github . com / leetschau / dsnote . git git push - u origin master git remote - v git branch - r Other Always use git status to get current status, such as the difference between CWD and stage area, difference between stage area and local repository, and difference between local repository and remote repository. Use git log to show commit history.","tags":"Tech","url":"http://leetschau.github.io/work-on-remote-git-repository.html","loc":"http://leetschau.github.io/work-on-remote-git-repository.html"},{"title":"Add Multiple Classpath Items in One Tag","text":"I have to add many jar files to a \"javac\" and a \"junit\" task from command line arguments. The inside tag is suited for this situation. Ant script: <javac srcdir=\"${test.dir}\" destdir=\" \\({test.class.dir}\" encoding=\"UTF-8\" debug=\"true\" failonerror=\"true\"> <classpath> <pathelement location=\"\\) \"/> \\({src.class.dir}\"/> <pathelement path=\"\\) {pdegen.classpath}\"/> \\({cobertura.data.file}\" /> <classpath> <pathelement location=\"\\) {instrumented.class.dir}\"/> \\({src.class.dir}\"/> <pathelement location=\"\\) {test.class.dir}\"/> \\({src.dir}\"/> <pathelement location=\"\\) {cobertura.path}\"/> \\({pdegen.classpath}\"/> </classpath> <formatter type=\"xml\"/> <batchtest todir=\"\\) {unittest.report.dir}\" haltonerror=\"yes\"> The corresponding command line is: ant -Dpdegen.classpath=/path/to/jar1:/path/to/jar2 target_name Here is the working Python script: from subprocess import call test_cmd = 'ant -buildfile unittest.xml -Drootdir='+ base_dir + \\ pkg_name + ' -Dcobertura.path=/usr/share/ant/lib/cobertura.jar -Dpdegen.classpath=' + classpath [ pkg_name ] ret = call(test_cmd.split()) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/add-multiple-classpath-items-in-one-tag.html","loc":"http://leetschau.github.io/add-multiple-classpath-items-in-one-tag.html"},{"title":"Use Remote Desktop between Two Ubuntu Host","text":"Verified between Mint 14 Xfce, 2014-2-26. Server (IP: 10.21.3.31) sudo aptitude install xrdp sudo service xrdp start Client Install \"Remmina\" with Software Manager; Launch Remmina, create a new connectiion with the following parameters: Name: My PC Protocol: RDP - Remote Desktop Protocol Server: 10.21.3.31 User name: chad (The desktop user) Password: xxx Resolution: Use client resolution Color depth: True color(32 bpp) Connect to host; If you want keyboard shortcuts of host, check the \"Grab all keyboard events\"; Now you can open a gedit window, and use left Ctrl key to active Chinese Input Method. Old version: 2013-11-11 Server (IP: 10.21.3.31) Install: sudo apt-get install tightvncserver Config: vi ~/.vnc/xstartup Add: \"xfwm4 & xfdesktop & xfce4-panel & xfce4-session\" after \" /etc/X11/Xsession\" Set login passwd: vncpasswd Start service: vncserver :1 -geometry 800x600 Stop service: vncserver -kill :1 Client Install: sudo apt-get install vncviewer Connect: vncviewer 10.21.3.31:1 Problem: This is a new desttop, how to connect to the \"old\" desktop? Note: There are some other vnc server, I tried vino and x11vnc both not work. Generally, GUI server function of Linux is much weak than that of Windows. You can use \"Remmina\" and rdp protocol to connect to a Windows server conveniently. So try to avoid use GUI between remote hosts, using ssh terminal instead.","tags":"Tech","url":"http://leetschau.github.io/use-remote-desktop-between-two-ubuntu-host.html","loc":"http://leetschau.github.io/use-remote-desktop-between-two-ubuntu-host.html"},{"title":"Change Default Application on Linux Mint Xfce","text":"Alt-F3 -> Preferred Application","tags":"Tech","url":"http://leetschau.github.io/change-default-application-on-linux-mint-xfce.html","loc":"http://leetschau.github.io/change-default-application-on-linux-mint-xfce.html"},{"title":"Open CPU Support for Virtualizaion Technology","text":"In BIOS, under \"Processors Settings\", enable the \"Virtualization Technology\". In some Dell Computers, this option is at [Performance -> Virtualization] in BIOS.","tags":"Tech","url":"http://leetschau.github.io/open-cpu-support-for-virtualizaion-technology.html","loc":"http://leetschau.github.io/open-cpu-support-for-virtualizaion-technology.html"},{"title":"Setup Yum Repositories to Update or Install Package from ISO Image","text":"Create Local Repository Make sure you have \"createrepo\" command: \"yum -qa|grep create\", or install it with \"yum install createrepo\"; $ mkdir -p /mnt/iso/1 $ mount -o loop /home/chad/warez/CentOS-6.4-x86_64-LiveDVD.iso /mnt/iso/1 $ cd /mnt/iso $ createrepo . $ yum clean all $ vi /etc/yum.repos.d/iso.repo [MyISORepo] name=MyISORepo baseurl=file:///mnt/iso enable=1 $ yum --disablerepo=* --enablerepo=MyISORepo install kvm Remove Repository Remove repository temporarily: modify \"1\" to \"0\" in /etc/yum.repos.d/iso.repo; or permanently: \"rm -f /etc/yum.repos.d/iso.repo\"; unmount DVD image: umount /mnt/iso/1 Ref: Howto Setup yum repositories to update or install package from ISO CDROM Image","tags":"Tech","url":"http://leetschau.github.io/setup-yum-repositories-to-update-or-install-package-from-iso-image.html","loc":"http://leetschau.github.io/setup-yum-repositories-to-update-or-install-package-from-iso-image.html"},{"title":"Create Virtual Network with Virtualbox","text":"Create a virtual machine \"ubs1\" with ubuntu server 12.04, set its network as Host-only; Start this vm, configure the network manually: IP Address: 192.168.56.11, netmask, gateway and name server address use default value; Set hostname hubs1, domain name as \"chadhome\", set username \"ubsu1\"; install OpenSSH server; Create the second vm named \"ubs2\" with the same settings with above, IP Address is 192.168.56.22, hostname is hubs2, username is ubsu2; Now you can ssh between host and these 2 guests. How to enable guest to connect to internet with NAT/Host-only settings? Ubuntu Set network -> Adapter 1 as NAT, adapter 2 as Host-only (the order is import! you can't install host-only first then add nat?) add eth1 in /etc/network/interfaces CentOS /etc/sysconfig/network-scripts/ifcfg-eth1","tags":"Tech","url":"http://leetschau.github.io/create-virtual-network-with-virtualbox.html","loc":"http://leetschau.github.io/create-virtual-network-with-virtualbox.html"},{"title":"Grouping and Backreference in Replacement of vim","text":"You can group parts of the pattern expression enclosing them with \"(\" and \")\" and refer to them inside the replacement pattern by their special number \\1, \\2 ... \\9. Typical example is swapping first two words of the line: :%s/(\\w+)(\\s+)(\\w+)/\\3\\2\\1/gc Ref: Grouping and Backreferences of vim A Demonstration There are about 40 JUnit test classes in \"java_test\" folder of ESB project. Now we need add all class names and their respective package names into Excel Report. Solution: Get original outputs with \"find\" command: $ cd java_test $ find . -name '*.java' > report.csv The original output of \"find\" command: ./com/boco/esb/dataquality/service/test/TestDataQualityRuleServiceImpl.java The target output format: TestDataQualityRuleServiceImpl,com.boco.esb.dataquality.service.test Convert format with vi: $ vi report :%s/(. )\\/(Test. ).java/\\2,\\1/gc Then open report.csv in Windows, it will be load by Excel automatically.","tags":"Tech","url":"http://leetschau.github.io/grouping-and-backreference-in-replacement-of-vim.html","loc":"http://leetschau.github.io/grouping-and-backreference-in-replacement-of-vim.html"},{"title":"Subversion Backup and Restore","text":"Backup Specified Revision Backup specified revision (here is 20): $ cd /opt/svnRepo $ svnadmin dump deployTest/ -r 20 > deploy-r20.dump Restore backup: $ mv deploy-r20.dump /opt/Gcp/tmp $ cd /opt/Gcp/tmp $ svnadmin create deploy20 $ svnadmin load deploy20 < deploy-r20.dump Verify Get revision 20 of \"deploy.exp\" in original repository $ svn cat -r 20 file:///opt/svnRepo/deployTest/CalcServer/deploy.exp > r20 Get \"deploy.exp\" in restored repository $ svn cat file:///opt/Gcp/tmp/deploy20/CalcServer/deploy.exp > restore20 Compare them: $ diff r20 restore20 They are identical. Compare logs: [ root@cloud141 /opt/svnRepo ] $ svn log - r 20 file : /// opt / svnRepo / deployTest / ------------------------------------------------------------------------ r20 | bvt | 2013 - 08 - 30 17 : 30 : 03 + 0800 ( Fri , 30 Aug 2013 ) | 1 line remove unittest in source file -------------------------------------------------------- [ root@cloud141 /opt/svnRepo ] $ svn log file : /// opt / Gcp / tmp / deploy20 ------------------------------------------------------------------------ r1 | bvt | 2013 - 08 - 30 17 : 30 : 03 + 0800 ( Fri , 30 Aug 2013 ) | 1 line remove unittest in source file ------------------------------------------------------------------------ So you can see the restored repository is identical to that part of original repository except the revision number. Backup Specified Revisions $ svnadmin dump deployTest / - r 10 : 20 > deploy - r20 . dump Incremental Backup Backup: $ svnadmin dump myrepos - r 0 : 1000 > 0 - 1000 . dumpfile $ svnadmin dump myrepos - r 1001 : 2000 --incremental > 1001-2000.dumpfile $ svnadmin dump myrepos - r 2001 : 3000 --incremental > 2001:3000.dumpfile Restore: $ svnadmin load myrepos < 0 - 1000 . dumpfile $ svnadmin load myrepos < 1001 - 2000 . dumpfile $ svnadmin load myrepos < 2001 : 3000 . dumpfile Experiment on incremental dump Create a incremental backup: [ root@cloud141 /opt/svnRepo ] $ svnadmin dump deployTest / --incremental -r 9:11 > r9-11.dump Create a full backup: [ root@cloud141 /opt/svnRepo ] $ svnadmin dump deployTest / - r 9 : 11 > backup9 - 11. dump Compare the size of these two dump files, full backup is obviously larger than the incremental counterpart: [ root@cloud141 /opt/svnRepo ] $ ll total 984 - rw - r --r-- 1 root root 997105 Oct 31 19:08 backup9-11.dump drwxr - xr - x 6 root root 4096 Aug 22 18 : 09 deployTest - rw - r --r-- 1 root root 2509 Oct 31 19:07 r9-11.dump Restore a incremental backup in a fresh repository: [ root@cloud141 /opt/svnRepo ] $ mv r9 - 11. dump .. / Gcp / tmp [ root@cloud141 /opt/Gcp/tmp ] $ svnadmin create new9 [ root@cloud141 /opt/Gcp/tmp ] $ svnadmin load new9 < r9 - 11. dump <<< Started new transaction , based on original revision 9 svnadmin : File not found : transaction '0-0' , path 'CalcServer/src/com/boco/deploy/ConfigLoader.java' * editing path : CalcServer / src / com / boco / deploy / ConfigLoader . java ... [ root @ You can see the restore failed. Restore a incremental backup (revision 9~11) in a \"root\" repository (restored from revision 8) : [ root @cloud141 / opt / Gcp / tmp ] $ svnadmin load backup8 < r9 - 11. dump ... [ root @cloud141 / opt / Gcp / tmp ] $ svn log file : /// opt / Gcp / tmp / backup8 ------------------------------------------------------------------------ r4 | bvt | 2013 - 08 - 30 16 : 35 : 10 + 0800 ( Fri , 30 Aug 2013 ) | 1 line initial import project ------------------------------------------------------------------------ r3 | bvt | 2013 - 08 - 30 15 : 31 : 47 + 0800 ( Fri , 30 Aug 2013 ) | 1 line make new project basedir ------------------------------------------------------------------------ r2 | bvt | 2013 - 08 - 29 14 : 32 : 15 + 0800 ( Thu , 29 Aug 2013 ) | 1 line remove unittest in source file to pass compile without junit ------------------------------------------------------------------------ r1 | bvt | 2013 - 08 - 29 14 : 31 : 10 + 0800 ( Thu , 29 Aug 2013 ) | 1 line remove unittest in source file to pass compile without junit ------------------------------------------------------------------------ Now the restore succeed. Summary Backup a huge repository in the following steps: Execute a full backup at a revision. If the revision n is not 0, you will lose all revisions from 0 to n-1; Execute incremental backups weekly, use the revision arrange as file name: \"inc-rev-from-to.dump\", like \"inc-rev-35-46.dump\"; When original repository corrupts, first load the full backup, then load the incremental ones according to their revision numbers; Ref: SVN版本库的备份、还原、移植（初级篇、中级篇和高级篇） SVN备份及其还原——dump/load方法","tags":"Tech","url":"http://leetschau.github.io/subversion-backup-and-restore.html","loc":"http://leetschau.github.io/subversion-backup-and-restore.html"},{"title":"Tell Thunderbird Not to Wrap Lines When Sending Email","text":"ThunderBird -> Edit -> Preferences -> Advanced -> General -> Config Editor: Search \"wrap\", change \"mail.wrap_long_lines\" to \"false\" and \"mailnews.wraplength\" to \"0\". Bingo!","tags":"Tech","url":"http://leetschau.github.io/tell-thunderbird-not-to-wrap-lines-when-sending-email.html","loc":"http://leetschau.github.io/tell-thunderbird-not-to-wrap-lines-when-sending-email.html"},{"title":"Adding SSL certificates to Google Chrome on Linux Mint","text":"To resolve the ssl certificate error when using goagent with google chrome, run following commands: $ sudo apt-get install libnss3-tools $ cd $GOAGENT_HOME/local \\( certutil -d sql:\\) HOME/.pki/nssdb -A -t \"C,,\" -n GoAgent -i 'CA.crt' Note: for Fedora, the first command is: sudo yum install nss-tools if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/adding-ssl-certificates-to-google-chrome-on-linux-mint.html","loc":"http://leetschau.github.io/adding-ssl-certificates-to-google-chrome-on-linux-mint.html"},{"title":"Install Redmine on CentOS 6.4","text":"Turn off SELinux and reboot (or apache can't find /var/www/redmine folder) Turn off iptables service for others can login to Redmine server: Use root: service iptables stop Set yum proxy: /etc/yum.conf add: proxy=http://10.21.3.31:8087 Ref: http://www.centos.org/docs/5/html/yum/sn-yum-proxy-server.html Install apache2 and mysql http://www.howtoforge.com/installing-apache2-with-php5-and-mysql-support-on-centos-6.4-lamp Install redmine CentOS6.2安装Redmine教程 Install Redmine 2.0.3 on Centos 6.3 http://www.redmine.org/projects/redmine/wiki/How_to_Install_Redmine_on_CentOS_%28Detailed%29 $ yum install gcc g++ make automake autoconf curl-devel openssl-devel zlib-devel httpd-devel apr-devel apr-util-devel sqlite-devel $ yum install ruby-rdoc ruby-devel $ yum install rubygems $ gem install --http-proxy http://10.21.3.31:8087 rails $ gem install --http-proxy http://10.21.3.31:8087 passenger (very slow: about 10min) $ passenger-install-apache2-module $ vi /etc/httpd/conf/httpd.conf: add: LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-4.0.21/buildout/apache2/mod_passenger.so PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-4.0.21 PassengerDefaultRuby /usr/bin/ruby $ yum install ImageMagick-devel $ yum install mysql-devel Create MySQL database $ mysql -u root -p create database redmine character set utf8; create user 'redmine'@'localhost' identified by 'very_secret'; grant all privileges on redmine.* to 'redmine'@'localhost'; quit; Download redmine 2.3.3, tar zxvf to /var/www rename redmine-2.3.3 to redmine $ chown -R apache:apache /var/www/redmine/ verify user and group name in /etc/httpd/conf/httpd.conf line 242,243 $ cd /var/www/redmine/config $ cp database.yml.example database.yml $ vi /var/www/redmine/config/database.yml adapter: mysql database: redmine host: localhost username: redmine password: very_secret encoding: utf8 $ cd /var/www/redmine $ gem install bundler $ bundle install --without development test $ RAILS_ENV=production rake db:migrate $ RAILS_ENV=production rake redmine:load_default_data $ ruby script/rails server webrick -e production Then load http://localhost:3000 (or http://10.21.3.69:3000) in web browser, the redmine is running. Load Redmine in Apache The following tests didn't success. Try it later. Create /etc/httpd/conf.d/redmine.conf: Listen *:3001 Activate FCGI and generate plugin directory cd /var/www/redmine/public mkdir plugin_assets cp dispatch.fcgi.example dispatch.fcgi cp htaccess.fcgi.example .htaccess vi /var/www/redmine/public/dispatch.fcgi","tags":"Tech","url":"http://leetschau.github.io/install-redmine-on-centos-64.html","loc":"http://leetschau.github.io/install-redmine-on-centos-64.html"},{"title":"Resolve Failure of apt-get Installation","text":"If you encounter an \"E: Encountered a section with no Package: header\" error when using apt-get to install something, do following: $ sudo rm /var/lib/apt/lists/* -vf $ sudo apt-get update","tags":"Tech","url":"http://leetschau.github.io/resolve-failure-of-apt-get-installation.html","loc":"http://leetschau.github.io/resolve-failure-of-apt-get-installation.html"},{"title":"Setup a Simple HTTP Proxy Server","text":"The host 10.21.3.69 has no H3C client, so it can't access the internet. With Tinyproxy , we can setuup a proxy server on 10.21.3.31 to enable 69 access the internet. Server Setup Install tinyproxy with apt-get install tinyproxy . On CentOS 7: sudo yum install epel-release; sudo yum install tinyproxy ; Configure the proxy server by edit the configuration file with sudo vi /etc/tinyproxy.conf : i. modify listening port to 8848; i. Comment out \"Listen 127.0.0.1\", or only client on localhost can use this proxy; i. Allow incoming clients: Allow 10.21.3.69 or Allow 192.168.0.0/16 ; Apply the changes: sudo service tinyproxy restart (or sudo systemctl restart tinyproxy ); Monitor the log with: sudo tail -f /var/log/tinyproxy/tinyproxy.log . After job is done, run sudo service tinyproxy stop to stop the server. Client Used with browser: https_proxy=http://10.1.2.179:8848 http_proxy=http://10.144.251.179:8848 chromium-browser Used in console: sudo su - http_proxy = http : // 10 . 1 . 2 . 179 : 8848 apt upgrade - y For dropbox client: in [Preferences > Proxies]: Proxy type: HTTP Server: 10.1.2.179 Port: 8848","tags":"Tech","url":"http://leetschau.github.io/setup-a-simple-http-proxy-server.html","loc":"http://leetschau.github.io/setup-a-simple-http-proxy-server.html"},{"title":"Running GUI Application Remotely over SSH Session","text":"Server Setup $ sudo vi /etc/ssh/sshd_config Make sure X11Forwarding is turned on: X11Forwarding yes Then restart ssh service: sudo /etc/init.d/sshd restart . Client Setup Linux Client ssh - X gcp @10.0.2.48 $ gedit & $ xeyes & Bingo! Ref: http://www.cyberciti.biz/tips/running-x-window-graphical-application-over-ssh-session.html Windows Client You have several options: Install X server in WSL and run ssh client in WSL; Use MobaXterm as the ssh client, which has a built-in X server; Use Remote Desktop , it's not SSH style, see dsnote Run GUI Application on Remote Linux Server for details.","tags":"Tech","url":"http://leetschau.github.io/running-gui-application-remotely-over-ssh-session.html","loc":"http://leetschau.github.io/running-gui-application-remotely-over-ssh-session.html"},{"title":"Bug Tracker","text":"Candidates: Apache Bloodhound Trac LibreSource Roundup Launchpad Apache Bloodhound Follow the instruction [install bloodhound] (https://issues.apache.org/bloodhound/wiki/BloodhoundInstall), when enter \"Web Server\", sudo aptitude install libapache2-mod-wsgi Redmine turn-key Download \"315MB ISO\" from Redmine on TURNKEY ; Install this iso file with VirtualBox: Type: Linux, Debian 64bit; Network: Bridged Adapter","tags":"Tech","url":"http://leetschau.github.io/bug-tracker.html","loc":"http://leetschau.github.io/bug-tracker.html"},{"title":"Use Templates in Thunderbird","text":"Create a template based on a email Select a mail, then [F10 -> File -> Save as -> Template]; you can see this template in \"Template\" folder in left side panel; Use a template Double click the template in \"Template\" folder in left side panel; Edit template Double click the template in \"Template\" folder in left side panel, edit it, then save it as a template;","tags":"Tech","url":"http://leetschau.github.io/use-templates-in-thunderbird.html","loc":"http://leetschau.github.io/use-templates-in-thunderbird.html"},{"title":"Amazon EC2 Notes","text":"Amazon web service gateway When adding volume, notice what kind the volume is. You can't add NTFS format volume to Linux instance; ssh to ec2 instance: ssh -i /home/lichao/Documents/lichao-key-pair-us-west-1.pem ec2-user@54.200.25.207 the IP address at the last of above line is retrieved from https://console.aws.amazon.com/ec2/v2/home?region=us-west-2#Instances: , then click \"Connect\" button; copy file from local host to home directory of ec2 instance: scp -i /home/lichao/Documents/lichao-key-pair-us-west-1.pem build.xml ec2-user@ec2-54-200-25-207.us-west-2.compute.amazonaws.com:~ copy file from ec2 instance to local host: scp -i /home/lichao/Documents/lichao-key-pair-us-west-1.pem ec2-user@ec2-54-200-25-207.us-west-2.compute.amazonaws.com:~/build.xml aaa.xml root password of mysql database: root; wordpress user: lc-wp/zh wordpress home page user:lc, password:zh","tags":"Tech","url":"http://leetschau.github.io/amazon-ec2-notes.html","loc":"http://leetschau.github.io/amazon-ec2-notes.html"},{"title":"Input Chinese Characters in Emacs Org Mode","text":"It looks that you have to change system locale LC_CTYPE to zh_CN.UFT-8 to enable input Chinese characters in Emacs. See 英文ubuntu系统中emacs输入中文 . But this will cause the GUI to Chinese, which make search difficult. So when you want to write Chinese characters in Org mode, use vi to open the org file, edit it. Both Emacs and vi use \":e\" to reload file (if emacs have no Evil, use C-x C-v). That is to say, after add some Chinese characters in vi, save file, switch to Emacs, use :e to reload file. Note: Use :diffthis to compare 2 buffer in vi, :diffoff to quit comparison mode. Google \"vim reload file\" for details.","tags":"Tech","url":"http://leetschau.github.io/input-chinese-characters-in-emacs-org-mode.html","loc":"http://leetschau.github.io/input-chinese-characters-in-emacs-org-mode.html"},{"title":"FTP Server on Linux","text":"Ubuntu Install ftp server: sudo apt-get install vsftpd; Configuration: modify /etc/vsftpd.conf: i. Enable upload: uncomment \"write_enable=YES\" i. Restrict user in their home directory: uncomment following lines: chroot_local_user = YES chroot_list_enable = YES chroot_list_files =/ etc / vsftpd . chroot_list then create a /etc/vsftpd.chroot_list containing a list of users one per line. Restart vsftpd: sudo /etc/init.d/vsftpd restart Ref: https://help.ubuntu.com/10.04/serverguide/ftp-server.html http://serverfault.com/questions/354671/ubuntu-vsftpd-server-error-500-oops-could-not-read-chroot-list-file-etc-vsf CentOS See note \"Install FTP Service for CentOS 6.3 Host behind a Proxy\".","tags":"Tech","url":"http://leetschau.github.io/ftp-server-on-linux.html","loc":"http://leetschau.github.io/ftp-server-on-linux.html"},{"title":"GTD Workflow based on Emacs","text":"Global Configuration: convert all tasks to appointment, so make it popup automatically: add \"(org-agenda-to-appt)\" into ~/.emacs; Create a org file named \"jobs.org\"; Add following line to head of the file: #+SEQ_TODO: TODO(t!) WAIT(w@) | DONE(d!) CANCELED(c) Create task: M-S-RET, the input task name: \"Notify me\" [optional] Set prioriy: < >; [optional] Add tag: C-c C-c Add Schedule: < >, then input date and time, you can specify date and time absolutely or relatively; Save file: C-x C-s; Note: If the appointment is at today, use < > to convert it to appointment manually; You have many ways to input scheduled date and time, see 8.2.1 The date/time prompt in Org Mode Manual for detail. Or you can read this in Emacs: \"M-x info \" -> Org Mode -> Dates and Times -> Creating timestamps -> The date/time prompt","tags":"Tech","url":"http://leetschau.github.io/gtd-workflow-based-on-emacs.html","loc":"http://leetschau.github.io/gtd-workflow-based-on-emacs.html"},{"title":"Configuration of Org Mode Files in Emacs","text":"The configuration section is at the head of a org file(files with extension \"org\"): # + STARTUP : overview # + TAGS : { desktop ( d ) server } editor browser multimedia zip # + TAGS : { Windows Linux } # + TAGS : { bad ordinary good excellent } # + SEQ_TODO : TODO ( t ! ) WAIT ( w ) | DONE ( d @ ) CANCELED # + COLUMNS : % 10 ITEM % 10 PRIORITY % 15 TODO % 65 TAGS * Work ** Emacs editor for god *** DONE org - mode organize your ideas ** vim editor of god ** EmEditor * Entertainment ** Mplayer All - done player * Network ** Firefox ** IE * Other ** todo WinRAR Or you can define global tags in ~/.emacs; Press \"C-c C-c\" to load local configuration when cursor is add configuration section; Press \"C-c C-c\" to add tags for the task item under the cursor; \"overview\" means only shows the first level title; The blank between \"{\", \"}\" and the tags is mandatory ; The shortcut definition in the parenthesis \"(d)\" is mandatory, or there will be no shortcuts list when you add tags for a item(press \"C-c C-c\"); Tags in the curved brackets are mutually exclusive; \"!\" means add starting time stamp; \"@\" means add comments; Items after \"|\" means completed, so a time stamp will be added to mark things done; Note: You have to modify default shortcuts of translating word in clipboard of GoldenDict to C-c C-0 to avoid conflict with Emacs org-mode; Ref: 第32章 组织你的意念","tags":"Tech","url":"http://leetschau.github.io/configuration-of-org-mode-files-in-emacs.html","loc":"http://leetschau.github.io/configuration-of-org-mode-files-in-emacs.html"},{"title":"Use Reminder in Emacs","text":"Configuration Add the following line to ~/.emacs: (setq appt-issue-message t) Add Task M-x appt-add Cancel Task M-x appt-delete Ref: http://dsec.pku.edu.cn/~jinlong/emacs/emacs.html","tags":"Tech","url":"http://leetschau.github.io/use-reminder-in-emacs.html","loc":"http://leetschau.github.io/use-reminder-in-emacs.html"},{"title":"Remove All Subversion Unversoned Files and Directories Automatically","text":"svn status | grep &#94;\\? | cut -c9- | xargs -d \\n rm -r Ref: http://stackoverflow.com/questions/239340/automatically-remove-subversion-unversioned-files Note: In \"cut -c9-\", \"-c\" means character, \"9-\" means retaining all characters from the 9th to the end of each line of input file; In \"xargs -d \\n...\", -d specifies the delimiter, here it's the carriage return(\\n);","tags":"Tech","url":"http://leetschau.github.io/remove-all-subversion-unversoned-files-and-directories-automatically.html","loc":"http://leetschau.github.io/remove-all-subversion-unversoned-files-and-directories-automatically.html"},{"title":"Install and Update autojump and oh-my-zsh Behind a Firewall","text":"Brief installation steps: Install git and zsh via yum; 'git clone' autojump and oh-my-zsh from an internet-connected host; Install autojump and oh-my-zsh manually according to the instructions on their websites. Install # yum install zsh # yum install git $ ssh - copy - id chad @10.21.3.31 ( run \"ssh-keygen\" if have no key ) $ git clone chad @10.21.3.31 :/ home / chad / . oh - my - zsh $ cp ~/ . oh - my - zsh / templates / zshrc . zsh - template ~/ . zshrc $ git clone chad @10.21.3.31 :/ home / chad / docs / tmp / autojump ( you need ' git clone ' from internet on host 31 beforehand ) $ cd autojump ;. / install . sh ( after installation , add some text into ~/ . zshrc according to its prompt ) add \"autojump\" into \"plugins\" of ~/ . zshrc $ chsh - s / bin / zsh restart zsh Update The server 10.0.2.74 is behind firewall, and the auto-update is blocked. The oh-my-zsh on laptop 10.21.3.139 is updated. To enable auto-update on server 74, modify update target repo: modify ~/.oh-my-zsh/.git/config: [remote \"origin\"] -> url from https : // github . com / robbyrussell / oh - my - zsh . git to lichao @10.21.3.139 :/ home / lichao / . oh - my - zsh / . git Now you can update oh-my-zsh automatically or manually: $ cd $ upgrade_oh_my_zsh Note: You must copy public key of 74 to 139: ssh-copy-id lichao@10.21.3.139 You can't add \"ssh://\" before \"lichao@...\". It complains \"ssh could not resolve hostname 10.21.3.139\" , Why? On internet-connected Ubuntu host, you can install autojump with 'apt-get install autojump'.","tags":"Tech","url":"http://leetschau.github.io/install-and-update-autojump-and-oh-my-zsh-behind-a-firewall.html","loc":"http://leetschau.github.io/install-and-update-autojump-and-oh-my-zsh-behind-a-firewall.html"},{"title":"Calculate PI in 3 Languages Dynamically","text":"The algorithm to calculate PI is based on \"http://stackoverflow.com/questions/12449430/how-did-the-following-piece-of-java-code-calculate-the-digits-of-pi\". Source code Java import java.math.BigDecimal; import java.math.BigInteger; public class PiCalculator { public static void main(String[] args) { int precision = Integer.parseInt(args[0]); BigDecimal total = BigDecimal.ZERO; for (int i = 0; i < precision; i++) { total = total.add(getStep(i, precision)); } System.out.println(\"Pi = \" + total); } public static BigDecimal getStep(int k, int scale) { BigInteger base = BigInteger.valueOf(16).pow(k); int k1 = 8 * k + 1; int k4 = 8 * k + 4; int k5 = 8 * k + 5; int k6 = 8 * k + 6; base = base.multiply(BigInteger.valueOf(k1)); base = base.multiply(BigInteger.valueOf(k4)); base = base.multiply(BigInteger.valueOf(k5)); base = base.multiply(BigInteger.valueOf(k6)); int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1 * k4 * k5; return BigDecimal.valueOf(numerator).divide(new BigDecimal(base), scale - 1, BigDecimal.ROUND_HALF_UP); } } Groovy def scale = Integer.parseInt(args[0]) BigDecimal total = BigDecimal.ZERO for (i in 0..scale-1) { total = total.add(getStep(i, scale)) } println \"Pi = \" + total def getStep(int k, int scale) { BigInteger base = BigInteger.valueOf(16).pow(k); int k1 = 8 * k + 1; int k4 = 8 * k + 4; int k5 = 8 * k + 5; int k6 = 8 * k + 6; base = base.multiply(BigInteger.valueOf(k1)); base = base.multiply(BigInteger.valueOf(k4)); base = base.multiply(BigInteger.valueOf(k5)); base = base.multiply(BigInteger.valueOf(k6)); int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1 * k4 * k5; return BigDecimal.valueOf(numerator).divide(new BigDecimal(base), scale - 1, BigDecimal.ROUND_HALF_UP); } Clojure Create Project $ lein new calc-pi;cd calc-pi;cat project.clj ... :dependencies [[org.clojure/clojure \"1.5.1\"] [org.clojure/math.numeric-tower \"0.0.2\"]]) core.clj (defn calc-pi [k] (convert-decimal (calc-pi-expt k) k)) (defn convert-decimal \"Convert a ratio to decimal with precision prec\" [source prec] (with-precision prec (/ (bigdec (numerator source)) (denominator source)))) (defn calc-pi-expt [k] (reduce + (map step-expt (range k)))) (require '[clojure.math.numeric-tower :as math]) (defn step-expt [k] (/ (- (/ 4 (+ ( 8 k) 1)) (/ 2 (+ ( 8 k) 4)) (/ 1 (+ ( 8 k) 5)) (/ 1 (+ ( 8 k) 6))) (math/expt 16 k))) Calculate Java $ javac PiCalculator.java $ time java PiCalculator 500 => 0.25s This value doesn't include compilation time! $ /usr/bin/time -p sh -c 'javac PiCalculator.java;java PiCalculator 500' => 0.87 Clojure (time (calc-pi 500)) => 0.8s Groovy $ time groovy calcPi.groovy 500 => 1.09s","tags":"Tech","url":"http://leetschau.github.io/calculate-pi-in-3-languages-dynamically.html","loc":"http://leetschau.github.io/calculate-pi-in-3-languages-dynamically.html"},{"title":"Run String as Code Dynamically","text":"Java JavaCompiler Python exec ( \" print 'aa' \" ) eval ( \" 2+3 \" ) Groovy Eval.me(\"2+2\") Ref: Embedding Groovy Time calculation Shell: time Algorithm Tested Pi =","tags":"Tech","url":"http://leetschau.github.io/run-string-as-code-dynamically.html","loc":"http://leetschau.github.io/run-string-as-code-dynamically.html"},{"title":"Access, Modify, Change Time of Linux File","text":"All these 3 time can be viewed by \"stat \" command. Access time is influenced by read operation, such as command cat, more, less, head, tail, grep, sed, etc. This time is queried by \"find . -atime -1\", and can be set by \"touch -a\" command; Change time is the time when inode is changed, which influenced by command mv, chmod, chown, etc; Modification time is the time the content of the file changed, and be listed by \"ls -l\" command. It's influenced by command vi, etc, and can be set by \"touch -m\" command; \"touch -t\" set access and modification time to the specified time; Creation time is not saved. So it's impossible to query files according to creation time; Ref: Linux文件的access time,change time,modify time http://stackoverflow.com/questions/14842195/how-to-get-file-creation-date-time-in-bash-debian","tags":"Tech","url":"http://leetschau.github.io/access-modify-change-time-of-linux-file.html","loc":"http://leetschau.github.io/access-modify-change-time-of-linux-file.html"},{"title":"Name a action sequence and invoke it in M-x interface in Emacs","text":"Question I am using nrepl in Emacs 24 as Clojure IDE. When I want to write some codes in a Clojure project(after starting Emacs), I have to repeat the following commands: M - x cd docs / clojurefiles / conways - game - of - life M - x nrepl - jack - in C - x 4 f src / conways_game_of_life / core . clj I want to save all above actions as a command and invoke it in \"M-x\" interface. Following this instruction I record my actions and save it as \"last-kbd-macro\" in ~/.emacs file: F3 M - x cd docs / clojurefiles / conways - game - of - life M - x nrepl - jack - in C - x 4 f src / conways_game_of_life / core . clj F4 M - x name - last - kbd - macro < RET > start - conway - project M - x insert - kbd - macro < RET > start - conway - project Now the following variable is added to my ~/.emacs file: ( setq last - kbd - macro [?\\ M - x ? c ? d return ? d ? o ? c ? s ? / ? c ? l ? o ? j ? u ? r ? e ? f ? i ? l ? e ? s ? / ? c ? o ? n ? w ? a ? y ? s ? - ? g ? a ? m ? e ? - ? o ? f ? - ? l ? i ? f ? e return ?\\ M - x ? n ? r ? e ? p ? l ? - ? j ? a ? c ? k ? - ? i ? n return ?\\ C - x ? 4 ? f ? s ? r ? c ? / ? c ? o ? n ? w ? a ? y ? s ? _ ? g ? a ? m ? e ? _ ? o ? f ? _ ? l ? i ? f ? e ? / ? c ? o ? r ? e ?. ? c ? l ? j return ] ) And after restarting Emacs, I can use F4 to invoke this macro. However, what I want is defining my own command and invoke it in \"M-x\". So I modify above definition as: ( setq start - conway - project [?\\ M - x ? c ? d return ? d ? o ? c ? s ? / ? c ? l ? o ? j ? u ? r ? e ? f ? i ? l ? e ? s ? / ? c ? o ? n ? w ? a ? y ? s ? - ? g ? a ? m ? e ? - ? o ? f ? - ? l ? i ? f ? e return ?\\ M - x ? n ? r ? e ? p ? l ? - ? j ? a ? c ? k ? - ? i ? n return ?\\ C - x ? 4 ? f ? s ? r ? c ? / ? c ? o ? n ? w ? a ? y ? s ? _ ? g ? a ? m ? e ? _ ? o ? f ? _ ? l ? i ? f ? e ? / ? c ? o ? r ? e ?. ? c ? l ? j return ] ) But when I use \"M-x\" and input \"start-conway-project\", there is a \"[no match]\" sign and it doesn't work. What is the \"emacs\" way to define some actions as a command (macro or something else) and invoke it with \"M-x\"? Solution After adding the (setq last-kbd-macro ...) to ~/.emacs, modify it as (fset 'start-conway-project ...) . That's it.","tags":"Tech","url":"http://leetschau.github.io/name-a-action-sequence-and-invoke-it-in-m-x-interface-in-emacs.html","loc":"http://leetschau.github.io/name-a-action-sequence-and-invoke-it-in-m-x-interface-in-emacs.html"},{"title":"Append Current Date to Filename in Bash Shell","text":"The following command ziped all files and sub-dirs in CWD into file \"ESB_3.0_2013-10-15.zip\": \\( zip build/ESB_3.0_\\) (date +%Y-%m-%d).zip -r . Note: the blank after \"date\" is mandatory. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/append-current-date-to-filename-in-bash-shell.html","loc":"http://leetschau.github.io/append-current-date-to-filename-in-bash-shell.html"},{"title":"Connect to a Remote Clojure nrepl Server","text":"Start nrepl on remote server and get it listening port (see Note 1 for details); On client: ssh user@remote_server; $ lein nrepl :connect localhost:port; Note 1: Start nrepl in command-line: use ps -ef ... ; Start nrepl in Emacs: use C-c M-d to get port; Note 2: test: nc -zv ip port; Display current REPL connection details: C-c M-d Search forward/reverse through command history with regex: M-s/M-r Search the previous/next item in history using the current input as search pattern: M-p M-n Close any unmatched parenthesis and then evaluate the current input: C-RET Ref: https://github.com/clojure-emacs/nrepl.el","tags":"Tech","url":"http://leetschau.github.io/connect-to-a-remote-clojure-nrepl-server.html","loc":"http://leetschau.github.io/connect-to-a-remote-clojure-nrepl-server.html"},{"title":"Use Emacs as Personal Knowledge Base","text":"http://stackoverflow.com/questions/2014636/how-to-maintain-an-emacs-based-knowledge-base","tags":"Tech","url":"http://leetschau.github.io/use-emacs-as-personal-knowledge-base.html","loc":"http://leetschau.github.io/use-emacs-as-personal-knowledge-base.html"},{"title":"Semi-automation Script Based on Sleep","text":"The following script auto login to server 49, send 2 commands and exit from the server. Create a automation script named \"auto.sh\": echo \"open 10.0.2.49 -l gcp\" sleep 2 echo \"gcp\" sleep 1 echo \"ls\" sleep 1 echo \"pwd\" sleep 3 echo \"hadoop fs -put /home/boco/gdpp/91/ hdfs://cloud216:8020/user/boco/gsp/yyyy > mylog\" sleep 3 echo \"exit\" Make the script executable: chmod 755 auto.sh; $ ./auto.sh|telnet Ref: http://stackoverflow.com/questions/7013137/automating-telnet-session-using-bash-scripts","tags":"Tech","url":"http://leetschau.github.io/semi-automation-script-based-on-sleep.html","loc":"http://leetschau.github.io/semi-automation-script-based-on-sleep.html"},{"title":"Install Emacs Evernote Mode on Xubuntu 13.10","text":"Install w3m (apt-get install w3m) and ruby (apt-get install ruby1.8); Download \"evernote-mode-0.41.zip\" from emacs-evernote-mode ; Unzip it and sudo ruby setup.rb ; Add the following into ~/.emacs (add-to-list 'load-path \"~/.emacs.d\") (require 'evernote-mode) (setq evernote-username \"leechau@126.com\") ; optional: you can use this username as default. (setq evernote-enml-formatter-command '(\"w3m\" \"-dump\" \"-I\" \"UTF8\" \"-O\" \"UTF8\")) ; option (global-set-key \"\\C-cec\" 'evernote-create-note) (global-set-key \"\\C-ceo\" 'evernote-open-note) (global-set-key \"\\C-ces\" 'evernote-search-notes) (global-set-key \"\\C-ceS\" 'evernote-do-saved-search) (global-set-key \"\\C-cew\" 'evernote-write-note) (global-set-key \"\\C-cep\" 'evernote-post-region) (global-set-key \"\\C-ceb\" 'evernote-browser) apt-get install libopenssl-ruby Note: Install ruby 1.9.1 will produce a \"Use RbConfig instead of obsolete and deprecated Config\" error The minibuffer message \"not catch for tag, error, 8 \" while I type M-x evernote-login. Give up this mode, See: \"https://code.google.com/p/emacs-evernote-mode/issues/detail?id=16\" and \"http://code.google.com/p/emacs-evernote-mode/issues/detail?id=28\"","tags":"Tech","url":"http://leetschau.github.io/install-emacs-evernote-mode-on-xubuntu-1310.html","loc":"http://leetschau.github.io/install-emacs-evernote-mode-on-xubuntu-1310.html"},{"title":"Emacs as a IDE","text":"Universal Feature Comment out codes: select code in visual mode, then M-; (Alt + semicolon); this is universal for multiple languages supported by Emacs. C, Python, Clojure are verified. Use C-j instead of Enter to put cursor at the proper position (indention) of the next line; Modify C indent size to 4 space: add following code into ~/.emacs: ( defun my - c - mode - common - hook () ( setq c - basic - offset 4 ) ( setq c - indent - level 4 ) ( setq tab - width 4 )) ( add - hook 'c-mode-common-hook ' my - c - mode - common - hook ) Format codes with right indents on region: C-M-\\; C Support List all key-bindings: F1 b; Open buffer in another window: C-x 4 b; Write a makefile, compile: M-x compile; run: M-! make run; After modification of source code, you just need [M-x M-! M-p] to do compile-run procedure, because M-p is the last command in shell mode. Here is the demo C source file: # include < stdio . h > int main () { printf ( \" hello world \\n \" ) ; return 0 ; } \"return 0:\" is necessary, or the return value will be 12, which will be seen as a exception by the shell.","tags":"Tech","url":"http://leetschau.github.io/emacs-as-a-ide.html","loc":"http://leetschau.github.io/emacs-as-a-ide.html"},{"title":"Dired Mode in Emacs","text":"Start up Dired mode: C-x d; (List dirs: C-x C-d) Hide Dired mode window: q; Mark Mark (for group manipulation): [n]m; Mark with regex: %m; Mark files whose contents match regular expression (like mark with grep): %g Mark all directories: */ ; Mark all executables: **; Toggle marked files/directories (same as inverse selection): t; Unmark marked files: [n]u; Unmark all marked files: U Navigate Move cursor to previous folder: <; next foler: >; Up one level: &#94;; add file list of the subfolder on cursor at the end of the buffer: i; ** Jump to parent folder: C-M-p (jump to children folder is C-M-d, which is conflict with \"Show desktop\" shortcut of Mint); ** Jump to previous/next folder: C-M-p/C-M-n; Manipulation Copy: [n]C; Delete: [n]d; delete with regex: %d; Execute: x; Create directory: + Change mode (same as \"chmod\" command): M Show file information (same as \"file\" command): y Move or Rename: R; ** Use m then %u to rename file to upper case, while %l to lower case; ** move or rename with regex: %R; View file: v (With Evil, if you want to quit reading file (v key) in Dired mode, use Q instead of q, because q is looked as the macro define key in Evil); Run command on a file: mark it (with \"m\" key) and ! ; In command , \"*\" means all marked files, \"?\" means execute command on files marked respectively; Compress files: mark files/directories, ! zip file.zip * and use \"g\" to update display; Compress/Uncompress one or more files to gz (orgin files will be replaced): Z; Query-replace in selected files: mark files, then \"Q\"; Open file in another window (and focus that window): o; Open file in another window (keep focus in Dired window): C-o; Change ownership (same as \"chown\"): O;","tags":"Tech","url":"http://leetschau.github.io/dired-mode-in-emacs.html","loc":"http://leetschau.github.io/dired-mode-in-emacs.html"},{"title":"Notes about Conway's Game of Life in \"Clojure Programming\"","text":"indexed-step (-> (iterate indexed-step glider) (nth 8) pprint) is equals to (pprint (nth (iterate indexed-step glider) 8)); (iterate f x) means \"Return a lazy sequence of x, (f x), (f (f x)) etc, f must be free of side-effects\"; So (indexed-step glider) returns the next state of the board \"glider\" based on its current state. (nth (iterate indexed-step glider) 8) is the 8th step of the transformation. If you want to see the 4th step just modify 8 to 4 in above code snippet. (->> (iterate indexed-step glider) (take 5) ppr/pprint), equals to (ppr/pprint (take 5 (iterate indexed-step glider))), displays every step of the transformation from origin state to the first translational position. The result of above code can be verified visually at [http://www.bitstorm.org/gameoflife/] (use mouse button to add/remove seed in the panel). index-free-step \"map\", \"partition\" and \"concat\" create a lazy seq; Why add a (repeat nil) to board in \"index-free-step\"? step \"frequencies\" receives a collection, returns a map, the key is the item of the collection, the value is the number of times this item appear. So: (frequencies [1 2 3 2 3 4]) => {1 1, 2 2, 3 2, 4 1} (mapcat f coll) <=> (apply concat (map f coll)); \"for\" is the Cartesian product. So: (for [x [:a :b] y [1 2]] [x y]) => ([:a 1] [:a 2] [:b 1] [:b 2]) (for [[x y] {1 1, 2 2, 3 2, 4 1}] [x y]) => ([1 1] [2 2] [3 2] [4 1]) and \"(for [[x y] (frequencies [1 2 3 2 3 4]) :when (= y 2)] x)\" select items which appear 2 times in collection. Translate example 3-7 to plain text is: The live cells are a subset of all neighbours of original live cells; Every cell in the neighbour area are expressed as variable \"loc\", while the number of its neighbour is expressed as \"n\"; To a cell \"loc\", if one of the following conditions are met, it is alive: It has 3 neighbours, expressd as (= n 3); It has 2 neighbours and it is alive, expressed as (and (= n 2) (cells loc)) Example 3-7: (defn step [cells] (set (for [[loc n] (frequencies (mapcat neighbours cells)) :when (or (= n 3) (and (= n 2) (cells loc)))] loc))) stepper To hex-step, the board and cells are all hexagonal, which means every cell has 6 neighbours; To every cell (loc) in the neighbour area, if it is alive(tested with (cells loc) in the \"for\" function), it's liveness is determined with \"survive?\" function: (survive? n); otherwise it's determined with \"(birth? n)\"; Test 4 step oscillator: (def init #{[0 0] [1 1] [1 3] [0 4]}) (= (-> (iterate hex-step init) (nth 4)) init)","tags":"Tech","url":"http://leetschau.github.io/notes-about-conways-game-of-life-in-clojure-programming.html","loc":"http://leetschau.github.io/notes-about-conways-game-of-life-in-clojure-programming.html"},{"title":"A Deployment Pipeline based on Puppet","text":"https://puppetlabs.com/blog/a-deployment-pipeline-for-infrastructure Installation On Linux Mint 14 Xfce. OS verification $ lsb_release -a The codename of Linux Mint 14 is \"Nadia\". Google \"linux mint release\" shows Nadia based on Ubuntu Quantal(12.10), which is in the supported version of puppet 3. Install it in standalone mode $ wget https://apt.puppetlabs.com/puppetlabs-release-quantal.deb $ sudo dpkg -i puppetlabs-release-quantal.deb $ sudo apt-get update $ sudo apt-get install puppet-common You have to run puppet command as root: puppet apply -e 'notice (\"Hello World\")' . On Master Node After update apt repo: # apt - get install puppetmaster # puppet master --version # apt - get install puppetmaster - passenger ( failed on my laptop ) Verify as root: # service puppetmaster status Start it in foreground: # service puppetmaster stop # puppet master --no-daemonize --verbose On Agent Node # apt - get install puppet Verify as root: # service puppet status # puppet agent --test --server=10.21.2.7 You will meet a \"no certificate found and waitforcert is disabled\" error. So we let master sign the certificate for the agent. Signing the Certificate On master: # puppet cert list You get the agent's name. It's OK. # puppet cert sign chadpc527 . boco . com On agent: # puppet apply - e '...' Trouble Shooting Log file: /var/log/puppet/masterhttp.log Default puppet master port: 8140 Port detection: lsof -wni tcp:8140 Regenerate certificate request of agent: rm -rf /var/lib/puppet/ssl","tags":"Tech","url":"http://leetschau.github.io/a-deployment-pipeline-based-on-puppet.html","loc":"http://leetschau.github.io/a-deployment-pipeline-based-on-puppet.html"},{"title":"Using Clojure Namespaces","text":"Use functions in other namespace with require and use Now we have a 2-dimensional vector glider(as follows) in our own namespace. We want use clojure.pprint/pprint to print it out. ( def glider ( vec ( repeat 3 ( vec ( repeat 6 nil ))))) Declare required namespaces: (def glider (vec (repeat 3 (vec (repeat 6 nil))))) (require 'clojure.pprint) (clojure.pprint/pprint glider) (require ' [ clojure.data.json :as json ] ) (defn get-data [ url ] (json/read-str (slurp url))) Put required ns in namespace declaration: ( ns conways - game - of - life . core (: require clojure . pprint )) ( def glider ( vec ( repeat 3 ( vec ( repeat 6 nil ))))) ( clojure . pprint / pprint glider ) Give required namespace a alias name: (ns conways-game-of-life.core (:require [ clojure.pprint :as ppr ] )) (def glider (vec (repeat 3 (vec (repeat 6 nil))))) (ppr/pprint glider) (ns sonar-parser.core (:require [ clojure.data.json :as json ] )) (defn get-data [ url ] (json/read-str (slurp url))) Use functions in another namespace without prefix: ( ns zap . core (: use compojure . core ) (: require [ compojure . route : as route ] [ compojure . handler : as handler ] [ ring . middleware . resource : refer [ wrap - resource ]] [ ring . middleware . params : refer [ wrap - params ]] [ ring . middleware . keyword - params : refer [ wrap - keyword - params ]] [ clojure . data . json : as json ] [ zap . views : as views ] [ zap . models : as models ])) See full codes on github . Ref: http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html","tags":"Tech","url":"http://leetschau.github.io/using-clojure-namespaces.html","loc":"http://leetschau.github.io/using-clojure-namespaces.html"},{"title":"Notes of \"reduce-by\" in \"Clojure Programming\"","text":"In page 120 of \"Clojure Programming\". (reduce-by :customer #(+ %1 (:total %2)) 0 orders) => key-fn: :customer f: #(+ %1 (:total %2)) init: 0 coll: orders user=> (doc reduce) clojure.core/reduce ([f coll] [f val coll]) f should be a function of 2 arguments. If val is not supplied, returns the result of applying f to the first 2 items in coll, then applying f to that result and the 3rd item, etc. If coll contains no items, f must accept no arguments as well, and reduce returns the result of calling f with no arguments. If coll has only 1 item, it is returned and f is not called. If val is supplied, returns the result of applying f to val and the first item in coll, then applying f to that result and the 2nd item, etc. If coll contains no items, returns val and f is not called. According to above definition, summaries is the second argument of reduce ({}), x is the first element of coll (orders). user=> (doc assoc) clojure.core/assoc ([map key val] [map key val & kvs]) assoc[iate]. When applied to a map, returns a new map of the same (hashed/sorted) type, that contains the mapping of key(s) to val(s). When applied to a vector, returns a new vector that contains val at index. Note - index must be <= (count vector). The run the following script in repl: (def orders [{:product \"Clock\", :customer \"Wile Coyote\", :qty 6, :total 300} {:product \"Dynamite\", :customer \"Wile Coyote\", :qty 20, :total 5000} {:product \"Shotgun\", :customer \"Elmer Fudd\", :qty 2, :total 800} {:product \"Shells\", :customer \"Elmer Fudd\", :qty 4, :total 100} {:product \"Hole\", :customer \"Wile Coyote\", :qty 1, :total 1000} {:product \"Anvil\", :customer \"Elmer Fudd\", :qty 2, :total 300} {:product \"Anvil\", :customer \"Wile Coyote\", :qty 6, :total 900}]) (defn reduce-by [key-fn f init coll] (println \"key-fn:\" key-fn) (println \"f:\" f) (println \"init:\" init) (println \"coll:\" coll) (println \"==========\") (reduce (fn [summaries x] (let [k (key-fn x)] ( println \" summaries: \" summaries ) ( println \" k: \" k ) ( println \" x: \" x ) ( println \" (key-fn x): \" ( key - fn x )) ( println \" value for k: \" ( f ( summaries k init ) x )) ( println \" --------- \" ) ( assoc summaries k ( f ( summaries k init ) x )))) {} coll)) (reduce-by :customer #(+ %1 (:total %2)) 0 orders) And the output: key-fn: :customer f: # \\(eval1500\\) fn__1501 startclojure.core \\(eval1500\\) fn__1501@10d78ec> init: 0 coll: [{:total 300, :customer Wile Coyote, :qty 6, :product Clock} {:total 5000, :customer Wile Coyote, :qty 20, :product Dynamite} {:total 800, :customer Elmer Fudd, :qty 2, :product Shotgun} {:total 100, :customer Elmer Fudd, :qty 4, :product Shells} {:total 1000, :customer Wile Coyote, :qty 1, :product Hole} {:total 300, :customer Elmer Fudd, :qty 2, :product Anvil} {:total 900, :customer Wile Coyote, :qty 6, :product Anvil}] ========== summaries: {} k: Wile Coyote x: {:total 300, :customer Wile Coyote, :qty 6, :product Clock} (key-fn x): Wile Coyote value for k: 300 summaries: {Wile Coyote 300} k: Wile Coyote x: {:total 5000, :customer Wile Coyote, :qty 20, :product Dynamite} (key-fn x): Wile Coyote value for k: 5300 summaries: {Wile Coyote 5300} k: Elmer Fudd x: {:total 800, :customer Elmer Fudd, :qty 2, :product Shotgun} (key-fn x): Elmer Fudd value for k: 800 summaries: {Elmer Fudd 800, Wile Coyote 5300} k: Elmer Fudd x: {:total 100, :customer Elmer Fudd, :qty 4, :product Shells} (key-fn x): Elmer Fudd value for k: 900 summaries: {Elmer Fudd 900, Wile Coyote 5300} k: Wile Coyote x: {:total 1000, :customer Wile Coyote, :qty 1, :product Hole} (key-fn x): Wile Coyote value for k: 6300 summaries: {Elmer Fudd 900, Wile Coyote 6300} k: Elmer Fudd x: {:total 300, :customer Elmer Fudd, :qty 2, :product Anvil} (key-fn x): Elmer Fudd value for k: 1200 summaries: {Elmer Fudd 1200, Wile Coyote 6300} k: Wile Coyote x: {:total 900, :customer Wile Coyote, :qty 6, :product Anvil} (key-fn x): Wile Coyote value for k: 7200 Verified on Eclipse Juno SR2 with Counterclockwise plugin, Mint 14 Xfce, 2013-10-6. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/notes-of-reduce-by-in-clojure-programming.html","loc":"http://leetschau.github.io/notes-of-reduce-by-in-clojure-programming.html"},{"title":"Note about \"Start Clojure\" on Youtube","text":"0:28:36 in \"Start Clojure\" by Chas Emerick on Youtube: You have to start app in texteditor of app.clj instead of the project \"startclojure\". Otherwise you have to use ( def server ( ring . adapter . jetty / jetty / run - jetty # ' startclojure . app / app { : port 8080 : join ? false } )) instead of ( def server ( jetty / run - jetty # ' app { : port 8080 : join ? false } ))","tags":"Tech","url":"http://leetschau.github.io/note-about-start-clojure-on-youtube.html","loc":"http://leetschau.github.io/note-about-start-clojure-on-youtube.html"},{"title":"Converting an imperative algorithm into functional style","text":"Question and Python Solution The follow is a question I posted on stackoverflow.com and the Python imperative style solution: I wrote a simple procedure to calculate the average of the test coverage of some specific packages in a Java project. The raw data in a huge html file is like this: < body > package pkg1 < line_coverage > 11 / 111 , < branch_coverage > 44 / 444 < end > package pkg2 < line_coverage > 22 / 222 , < branch_coverage > 55 / 555 < end > package pkg3 < line_coverage > 33 / 333 , < branch_coverage > 66 / 666 < end > ... </ body > Given the specified packages \"pkg1\" and \"pkg3\", for example, the average line coverage is: ( 11 + 33 ) / ( 111 + 333 ) and average branch coverage is: ( 44 + 66 ) / ( 444 + 666 ) I wrote the follow procedure to get the result and it works well. But how to implement this calculation in a functional style? Something like \"(x,y) for x in ... for b in ... if...\". I know a little Erlang, Haskell and Clojure, So solutions in these languages are also appreciated. Thanks a lot! from __future__ import division import re datafile = ( 'abc' , 'd>11/23d>34/89d' , 'e>25/65e>13/25e' , 'f>36/92f>19/76' ) core_pkgs = ( 'd' , 'f' ) covered_lines , total_lines , covered_branches , total_branches = 0 , 0 , 0 , 0 for line in datafile : for pkg in core_pkgs : ptn = re . compile ( '.*' + pkg + '.*' + '>(\\d+)/(\\d+).*>(\\d+)/(\\d+).*' ) match = ptn . match ( line ) if match is not None : cvln , tlln , cvbh , tlbh = match . groups () covered_lines += int ( cvln ) total_lines += int ( tlln ) covered_branches += int ( cvbh ) total_branches += int ( tlbh ) print 'Line coverage:' , '{:.2%}' . format ( covered_lines / total_lines ) print 'Branch coverage:' , '{:.2%}' . format ( covered_branches / total_branches ) Functional Style Solution in Clojure (defn extract-data \"extract 4 integer from a string line according to a package name\" [ pkg line ] (map read-string (rest (first (re-seq (re-pattern (str pkg \".*>(\\\\d+)/(\\\\d+).*>(\\\\d+)/(\\\\d+)\" )) line))))) (defn scan-lines-by-pkg \"scan all string lines and extract all data as integer sequences according to package names\" [ pkgs lines ] (filter seq (for [ pkg pkgs line lines ] (extract-data pkg line)))) (defn sum -data \"add all data in valid lines together\" [ pkgs lines ] (apply map + (scan-lines-by-pkg pkgs lines))) (defn get-percent [ covered all ] (str (format \"%.2f\" (float (/ (* covered 100 ) all ))) \"%\" )) (defn get-cov [ pkgs lines ] { :line-cov (apply get-percent (take 2 (sum-data pkgs lines))) :branch-cov (apply get-percent (drop 2 (sum-data pkgs lines))) } ) (get-cov [ \"d\" \"f\" ] [ \"abc\" \"d>11/23d>34/89d\" \"e>25/65e>13/25e\" \"f>36/92f>19/76\" ] ) clojure solutions with load file and command line args core - pkgs = ... + ... + ... clojure get - cov . clj $ core - pkgs ( def s ( slurp \"frame-summary.html\" )) ( use ' clojure . string ) ( def lines ( split s # \"\\n\" ))","tags":"Tech","url":"http://leetschau.github.io/converting-an-imperative-algorithm-into-functional-style.html","loc":"http://leetschau.github.io/converting-an-imperative-algorithm-into-functional-style.html"},{"title":"ISO Image Manipulation on Mint Xfce","text":"Create ISO Image File from CD genisoimage -o Unix_Program.iso -V Unix_Linux_Programming -R -J /media/lichao/NEW SYNOPSIS: genisoimage -o -V -R -J Ref: http://askubuntu.com/questions/136165/how-to-create-iso-images Mount ISO Image from ISO File $ thunar In thunar, right click the iso file and select \"Mount/Unmount ISO\"; $ cd /mnt/Unix_Program.iso Unmount ISO In thunar, right click the iso file and select \"Mount/Unmount ISO\"; Ref: http://askubuntu.com/questions/164227/how-to-mount-an-iso-file Verified on Mint 14 Xfce.","tags":"Tech","url":"http://leetschau.github.io/iso-image-manipulation-on-mint-xfce.html","loc":"http://leetschau.github.io/iso-image-manipulation-on-mint-xfce.html"},{"title":"Difference of cons and conj in Clojure","text":"conj put collection as its first argument while cons put collection as its second argument. Synopsis: conj element1 element2 ... cons element Meanwhile this post from http://stackoverflow.com/questions/3008411/clojure-seq-cons-vs-list-conj give other 2 important difference: One difference is that conj accepts any number of arguments to insert into a collection, while cons takes just one: (conj '(1 2 3) 4 5 6) ; => (6 5 4 1 2 3) (cons 4 5 6 '(1 2 3)) ; => IllegalArgumentException due to wrong arity Another difference is in the class of the return value: (class (conj '(1 2 3) 4)) ; => clojure.lang.PersistentList (class (cons 4 '(1 2 3)) ; => clojure.lang.Cons","tags":"Tech","url":"http://leetschau.github.io/difference-of-cons-and-conj-in-clojure.html","loc":"http://leetschau.github.io/difference-of-cons-and-conj-in-clojure.html"},{"title":"Define Key Shortcuts in Emacs","text":"Set a keybind: (global-set-key <key> <command>) (global-set-key <key> <command>) and (define-key global-map <key> <command>) are basically the same thing in most cases; Switch to another buffer: C-x b Open file: C-x C-f Cancel a command: C-g Quit Emacs: C-x C-c Find out the current keybinding of a key, for example, C-x C-e : press C-h k , then press C-x C-e ; List all current key bindings: Get last executed command, for example: use \"C-x b\" to switch to another window: Press C-x b, select \" Messages \", Press C-x , then you can see the last executed command \"(switch-to-buffer \" Message \")\"; Ref: http://ergoemacs.org/emacs/keyboard_shortcuts.html http://docs.huihoo.com/homepage/shredderyin/wiki/KeyBinding.html","tags":"Tech","url":"http://leetschau.github.io/define-key-shortcuts-in-emacs.html","loc":"http://leetschau.github.io/define-key-shortcuts-in-emacs.html"},{"title":"Change Current Working Directory of Emacs","text":"Change current working directory (cwd) on the fly: M-x cd <Return> , then input directory name; Set default cwd permanently: add (cd 'your_default_path') or (setq default-directory 'your-default-directory') to ~/.emacs;","tags":"Tech","url":"http://leetschau.github.io/change-current-working-directory-of-emacs.html","loc":"http://leetschau.github.io/change-current-working-directory-of-emacs.html"},{"title":"Run Shell Command in Emacs","text":"Command in minibuffer M-!: single shell command (only output of current command is save to buffer Shell command output ); C-u M-!: save output of command to current buffer; M-|: run command on selected region (use visual mode in Evil or M-h of emacs to select region); Shell Mode M-x shell: only support line mode command; You can move your cursor to previous line (you can edit it) and press Enter (Insert or Normal mode both OK in Evil), this command will be copy to last line and be executed. Delete output of last command: C-c C-o; Move between \"Command Group\"(a command and its output): C-c C-p/C-c C-n; Term Mode M-x term: is a full shell environment. tab-completion and vi is supported; Note: Use M-p/M-n to get previous/next commands (like Up/Down arrow key in terminal); Ref: Chapter 5 in \"Learning GNU Emacs\"; 31.15. Running Shell Commands from Emacs","tags":"Tech","url":"http://leetschau.github.io/run-shell-command-in-emacs.html","loc":"http://leetschau.github.io/run-shell-command-in-emacs.html"},{"title":"Use Selenium for Web UI Test Automation","text":"Follow tutorial on selenium python client official site. This webdriver is much better than remote control (selenium 1.x) for it need no server. A short python function can do all the automation jobs. And it has assertion functions. Cool. I am trying to automate Fetion auto-login with webdriver. But the new firefox browser has not default Fetion username inputed before hand. So I will finish this script some day.","tags":"Tech","url":"http://leetschau.github.io/use-selenium-for-web-ui-test-automation.html","loc":"http://leetschau.github.io/use-selenium-for-web-ui-test-automation.html"},{"title":"Org Mode of Emacs","text":"use \" \" as level-1 title, \" *\" as level 2 title, and so on; M-S-Ret: create a new TODO item; M-S-Left/Right: up/down a title level; M-S-Up/Down: make paragraph move forward/backward; C-c C-t: mark a task between \"DONE\", \"TODO\" or none; If you want to cancel a task, just remove its \"TODO\" use this command; C-c C-s: add schedule (this short cut works in all modes); Use S-Tab to collapse/expand all level titles and contents; Use to cycle between the level under cursor; Only show TODO: C-c / t; Only show DONE: C-c / T; Show all: C-u C-u C-u ; Set task priority: C-c , a/b/c Add (setq org-agenda-files '(\"~/docs/orgs\")) into ~/.emacs to setup org files repository; (setq org-agenda-files (list \"~/docs/orgs/*.org\")) doesn't work; Add (define-key global-map \"\\C-ca\" 'org-agenda) to ~/.emacs to enable global agenda; C-c C-l: create a new link or edit link at cursor; C-c C-o: open link at cursor; In Agenda view, press \"I\" to start clock, < > to stop clock; Repeat tasks Ordinary repeat TODO Test repeat tasks SCHEDULED: <2013-10-28 Mon 15:50 +1h> Accumulative repeat TODO Call Father SCHEDULED: <2008-02-10 Sun ++1w> Float repeat TODO Recharge the batteries SCHEDULED: <2008-02-10 Sun .+1d> For detail explanation of \"Accumulative\" and \"Float\" repeat, see section \"8.3.2 Repeated tasks\" in org manual; Ref: David O'Toole Org tutorial Org Mode - Organize Your Life In Plain Text! Org Mode Official Docs Org-Mode Reference Card","tags":"Tech","url":"http://leetschau.github.io/org-mode-of-emacs.html","loc":"http://leetschau.github.io/org-mode-of-emacs.html"},{"title":"Color Theme of Emacs","text":"Choose color theme interactively: M-x customize-themes , use key \"q\" to quit; Theme \"manoj-dark\" is a good dark theme; Customize default color theme: add (load-theme 'manoj-dark t) in ~/.emacs;","tags":"Tech","url":"http://leetschau.github.io/color-theme-of-emacs.html","loc":"http://leetschau.github.io/color-theme-of-emacs.html"},{"title":"Define Keymap on Ubuntu and Windows","text":"General workflow For example, on a standard Cherry 104-key mechanical keyboard, the right Ctrl key is too faraway to reach. While the right Win key is relative easy to reach by the right little finger. Now we make the right Win act as a Ctrl key interactively: Get the key name with xev . Press the right Win key in the xev window, and from the output we know its name is Super_R ; List current keymap with xmodmap -pm : xmodmap -pm xmodmap: up to 4 keys per modifier, (keycodes in parentheses): shift Shift_L (0x32), Shift_R (0x3e) lock Caps_Lock (0x9) control Control_L (0x25), Control_R (0x69) mod1 Alt_L (0x40), Alt_R (0x6c), Meta_L (0xcd) mod2 Num_Lock (0x4d) mod3 mod4 Super_L (0x85), Super_R (0x86), Super_L (0xce), Hyper_L (0xcf) mod5 ISO_Level3_Shift (0x5c), Mode_switch (0xcb) So the current group of Super_R is mod4 ; Detach the right Win from current group: xmodmap -e 'remove mod4 = Super_R' ; Run xmodmap -pm again and Super_R disappeared from group mod4 ; Add right Win to the control group: xmodmap -e 'add control = Super_R' ; Run xmodmap -pm again and the Super_R does be added to group control ; To verify, start a vim and press right Win and z, you can see the vim window is put into background, which means the map works; To persist this behavior, add xmodmap -e 'remove mod4 = Super_R' xmodmap -e 'add control = Super_R' into ~/.xinitrc (for i3sm) or ~/.profile for graphical DE. Swap Caps lock and Escape Key Swap only once Write the following text into file ~/.swapCapsESC: remove Lock = Caps_Lock keysym Escape = Caps_Lock keysym Caps_Lock = Escape add Lock = Caps_Lock Run xmodmap ~/.swapCapsESC . Ref: http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_XWindows Swap permanently on Ubuntu 14.04 Option 1 Add setxkbmap -option caps:swapescape into ~/.profile (verified on Ubuntu 14.04, Unity desktop, 2016.11.27), or ~/.xinitrc (verified on Ubuntu 16.04, i3wm, 2018.11.26). Ref: http://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc. Option 2 When a external keyboard is attach with USB, it may not swap these keys. Now you need run source ~/.profile again (with this keyboard). Install dconf-editor with sudo apt-get install dconf-tools , start it with dconf-editor . In [org -> gnome >> desktop -> input-sources -> xkb-options], modify its value to ['caps:swapescape'] . Option 3 Add XKBOPTIONS=\"caps:swapescape\" into /etc/default/keyboard. Ref: http://askubuntu.com/questions/444714/how-do-i-swap-escape-and-caps-lock-in-14-04 Option 4 Add \"only once\" solution to autostart: Create file $HOME/.config/autostart/swapCapsESC.desktop : [Desktop Entry] Name = SwapCapsESC Comment = Swap Caps Lock Key and ESC Key Exec = xmodmap /home/leo/.swapCapsEsc Type = Application Terminal = true X-GNOME-Autostart-Delay = 5 You can also use the GUI equivalent: Run Startup Applications (input startup in dash (press Win key), add above command in it. Swap permanently on Windows For Windows, install AutoHotkey, save the following codes as swapCapsESC.ahk: Capslock :: Esc ESC :: Capslock Execute it when you want to swap the keys. If you want execute it automatically when system startup, put the file in [Start -> Startup] folder (open it with inputing \"shell:startup\" in Run). Verified in Windows 7 & 10. Swap Ctrl and Alt Key remove mod1 = Alt_L Alt_R remove control = Control_L Control_R keycode 64 = Control_L keycode 37 = Alt_L keycode 108 = Control_R keycode 105 = Alt_R add control = Control_L Control_R add mod1 = Alt_L Alt_R 64, 37, etc are determined by \"xev\" command, see below for usage. Reset Key Map to Initial State setxkbmap -layout us Define key swap shortcuts It's mainly for emacs operation convenience to swap Ctrl and Alt key, and vi operation convenience to swap Caps Lock and Escape key. When you are not in emacs and vi, swap keys always lead confusions. So it's necessary to switch key definition quickly. The following are some basic method to achieve key swap shortcuts Create a file named \"swapCapsEsc\" in /home/lichao/docs/swapkeys remove Lock = Caps_Lock keysym Escape = Caps_Lock keysym Caps_Lock = Escape add Lock = Caps_Lock and a file named \"swapCtrlAlt\" in /home/lichao/docs/swapkeys: remove mod1 = Alt_L Alt_R remove control = Control_L Control_R keycode 64 = Control_L keycode 37 = Alt_L keycode 108 = Control_R keycode 105 = Alt_R add control = Control_L Control_R add mod1 = Alt_L Alt_R Create keyboard shortcuts in \"Application Finder (Alt + F3) -> Preferences -> Custom Actions\": Type: Regular Expression; Pattern: swce; Command: xmodmap /home/lichao/docs/swapkeys/swapCapsEsc Type: Regular Expression; Pattern: swca; Command: xmodmap /home/lichao/docs/swapkeys/swapCtrlAlt Type: Regular Expression; Pattern: swres; Command: setxkbmap -layout us Now you can use [Alt-F2 swce] to swap Caps lock and escape key, use [Alt-F2 swca] to swap Ctrl and Alt key, use [Alt-F2 swres] to make all keys to their original state (If you have swaped ctrl and alt key, the shortcut is [Ctrl-F2 swres]). Usage of xev Run \"xev\" in command line. A little window appear. Make it active window and press some key, the keycode will show in the window. Usage of xmodmap Run \"xmodmap -pm\" we got: shift Shift_L (0x32), Shift_R (0x3e) lock Caps_Lock (0x42) control Control_L (0x25), Control_R (0x69) mod1 Alt_L (0x40), Alt_R (0x6c), Meta_L (0xcd) mod2 Num_Lock (0x4d) mod3 mod4 Super_L (0x85), Super_R (0x86), Super_L (0xce), Hyper_L (0xcf) mod5 ISO_Level3_Shift (0x5c), Mode_switch (0xcb) Here the names in the left column (shift, lock, control, etc) are called \"Modifier Name\", while the names in the right column (Shift_L, Caps_Lock, Control_R, Meta_L, etc) are called keysym. Shift_L means left shift key, while Shift_R means right shift key. Every physical key (on keyboard) has a identity (integer number) called keycode. You can use \"xmodmap -pk\" to investigate these relationships. And use xmodmap -e \"keycode <to_be_modified> = <target_key>\" to modify these relationships. For example, the following command make F2 key print \"m\" in gedit panel: xmodmap - e \"keycode 68 = m\" : Before command: 58 0x006d (m) 68 0xffbf (F2) (get by \"xmodmap -pk\"). After command: 58 0x006d (m) 68 0x006d (m) Use xmodmap -e \"keycode 68 = F2\" to modify F2 back to F2 key. The right hand side of this assignment is keysym name. So xmodmap - e \"keycode 16 = 7\" will map character \"7\" to physical key which has keycode 16. \"clear \" means all keysyms will be detached from this . So after xmodmap -e \"clear control\" , all control keys (left and right) are disabled. \"remove = \" means remove from the list of current keysym list of the . So after xmodmap -e \"remove Control = Control_R\" makes right control key be disabled. When you run xmodmap -e \"add Control = Control_R\" , the right control key is enabled again. You can use \"xmodmap -pm\" to verify. \"keysym name1=name2\" means binding the keys (previous binded to name2) to name1; Auto load xmodmap files when system start xmodmap ~/.Xmodmap Ref: http://earthviaradio.wordpress.com/2012/02/06/swapping-the-left-alt-and-ctrl-keys-in-ubuntu-11-10/","tags":"Tech","url":"http://leetschau.github.io/define-keymap-on-ubuntu-and-windows.html","loc":"http://leetschau.github.io/define-keymap-on-ubuntu-and-windows.html"},{"title":"Use w3m as Web Browser","text":"Installation: apt-get install w3m. use \"a\" to input text, \"tab\" to jump between hyper-links, \"enter\" to click the hyper-link.","tags":"Tech","url":"http://leetschau.github.io/use-w3m-as-web-browser.html","loc":"http://leetschau.github.io/use-w3m-as-web-browser.html"},{"title":"Package Managemnet in Emacs","text":"Use \"M-x list-packages\" go to package-menu-mode. Then use up/down arrow key traverse items, use \"i\" mark the current item for installation, use \"d\" for uninstallation, use \"u\" for unmark, \"x\" for execute installaiton/remove. Or use \"M-x package-install\" to install a package. Ref: A Guide on Emacs 24 Package System Modify repository and take effect Modify ~/.emacs to add repository like the followings, then run \"M-x eval-buffer\". Use MELPA repository ( require 'package) (add-to-list ' package - archives ' ( \"melpa\" . \"http://melpa.milkbox.net/packages/\" ) t ) ( package - initialize ) This works in Yiyang intranet. Use Marmalade Repository ( require 'package) (add-to-list ' package - archives ' ( \"marmalade\" . \"http://marmalade-repo.org/packages/\" )) ( package - initialize ) This doesn't work in Yiyang intranet.","tags":"Tech","url":"http://leetschau.github.io/package-managemnet-in-emacs.html","loc":"http://leetschau.github.io/package-managemnet-in-emacs.html"},{"title":"Web Browser in Emacs","text":"M-x browse-url-w3","tags":"Tech","url":"http://leetschau.github.io/web-browser-in-emacs.html","loc":"http://leetschau.github.io/web-browser-in-emacs.html"},{"title":"Evil Extension of Emacs","text":"Evil is vi mode in emacs. Use \"y\" to copy text into system clipboard and paste them somewhere else, vice versa. Use :bd to kill buffer, much faster than < >; Use :q to leave Emacs, much faster than C-x C-c; Be careful to use these 2 commands for they providing no confirmaiton for modifications of buffers;","tags":"Tech","url":"http://leetschau.github.io/evil-extension-of-emacs.html","loc":"http://leetschau.github.io/evil-extension-of-emacs.html"},{"title":"Batch rename in zsh","text":"There are many mp3 files with initial \"Various - ...\", like: Various - Beethoven : Symphony No . 5 - Allegro Con Brio . mp3 Now I want to remove the \"Various - \" in the file name, to \"Beethoven:Symphony No.5-Allegro Con Brio.mp3\". In zsh we have a tool called zmv can do this job. Firstly we have to use autoload zmv to activate it. Then use \"-n\" option to print the result without actually performing the rename operation. When it is ok, remove the -n option to rename all the files: zmv -n '(*).mp3' ' ${ 1 // Various \\ - \\ / } .mp3' zmv '(*).mp3' ' ${ 1 // Various \\ - \\ / } .mp3' Ref: http://www.drbunsen.org/batch-file-renaming/","tags":"Tech","url":"http://leetschau.github.io/batch-rename-in-zsh.html","loc":"http://leetschau.github.io/batch-rename-in-zsh.html"},{"title":"Rip CD on Ubuntu","text":"用Mint自带的banshee可以把CD转换为ogg文件，[Media -> Import Media]，然后选择Audio CD，但只能转换为ogg格式，好像不能自动获取ID3标签；比较好的方法是使用RipperX，它可以把CD转换为wav, ogg, mp3, flac等格式，Ubuntu自带了ogg编码器，需要转为MP3的话需要手工下载编码器： sudo apt - get install lame libmp3lame0 设置 包括输出格式，参数，路径等。在RipperX里面的[Config -> Mp3]下\"Encoder plugin\"选择\"Lame MP3 Encoder\"，然后在[Config -> General]下设置好MP3文件的输出目录（Target Directory），然后就可以转换了。 获取ID3标签 ID3标签会在播放设备中显示，所以还是很重要的。RipperX提供了在线获取ID3标签的方法，只要点击面板上面的\"CDDB\"按钮就可以自动获取了，包括CD的Artist和Album名称，各轨道名称等，如果获取不到就只能手工输入了， 辅助工具 转换完成后用eyeD3查看转换出来的mp3文件ID3 tag是否正确。安装此工具： sudo pip install eyeD3 如果报已安装，但eyeD3命令不可用，用 sudo pip install eyeD3 --upgrade 试一下；查看mp3 tag的指令是 eyeD3 <file_name> ，也可以用它来设置（修改）ID3标签，格式是： eyeD3 -a -A -t -n file_name 查询和修改都支持通配符； Ref: http://www.pauljoyceuk.com/codex/2012/ripperx-not-encoding-mp3s/ http://eyed3.nicfit.net/","tags":"Tech","url":"http://leetschau.github.io/rip-cd-on-ubuntu.html","loc":"http://leetschau.github.io/rip-cd-on-ubuntu.html"},{"title":"Use Conque and Clojure REPL as Clojure IDE","text":"conque is a vim plugin which allows you to run shell in a vim buffer. To install, download conque_2.3.tar.gz and extract it into ~/.vim/bundle (yes you have to use pathogen to manage your vim plugins). Start vim, input \":Con \", it will be extract to \":ConqueTerm \", then input the command you want to run, like bash, clojure, python, etc. Other commands include ConqueTermSplit, ConqueTermTab, ConqueVSplit. The workflow is: Start vi and \":ConqueTerm clojure\"; Input something; Back to normal mode and use \":w mylog\" to save your script. Note: you have to add file name after :w every time saving the script for the \"buftype\" attribute is \"nofile\".","tags":"Tech","url":"http://leetschau.github.io/use-conque-and-clojure-repl-as-clojure-ide.html","loc":"http://leetschau.github.io/use-conque-and-clojure-repl-as-clojure-ide.html"},{"title":"Using Emacs as Clojure IDE","text":"Open emacs24; Change CWD to parent folder of project home: M-x cd ~/docs/tmp ; Build a leiningen project: M-! lein new calc-cov (see Run Shell Command in Emacs for other method to run shell command in emacs); Change CWD to project home: M-x cd calc-cov ; Start nrepl server: M-x nrepl-jack-in; Open source file in another window: C-x 2 C-x C-f src/.../core.clj; Change the namespace of the REPL to the namespace of the file you are in: C-c M-n Evaluate the whole source file: C-c C-k, evaluate a s-exp before the cursor: C-x C-e Open clojure doc of the function under the cursor: C-c C-d Run test: C-c C-, Frequently used keyboard shortcuts and commands Toggle focus between nrepl window and clojure source file window: C-c C-z (you should add \"(add-to-list 'same-window-buffer-names \" nrepl \")\" to ~/.emacs; Always pretty printing in the REPL: M-x nrepl-toggle-pretty-printing Move over sexp: C-M-b/C-M-f; Interrupt any pending evaluations: C-c C-b; Evaluate a sexp without evaluate all file Add this sexp into source file (unnecessary to save source file); Use following methods to evaluate the sexp: Move cursor to the sexp for test, C-M-x (or C-c C-c) to evaluate the top-level form (such as a defn expression) under the cursor; If you want insert the evaluation result to current buffer, use C-u C-M-x; If the the target form is not a \"top-level\" form, move the cursor to the end of this sexp, C-x C-e to evaluate it, See more shortcuts at nrepl official site ; Then this sexp has been added to the repl, you can use it in repl; This is very helpful in some circumstances. For example, I want debug function \"cell-block\" (see p141 in \"Clojure Programming\"), add ( println \"[left mid right] is:\" ) ( println [ left mid right ]) before \"(window (map ...)\". But You can't evaluate the whole file because there are some lazy sequences and evaluate whole file will cause JVM heap out of memory; So I only evaluate this modified version with C-x C-e, test it in repl. After I figure out how this function works, undo my modification and move on. Note: In clojure mode with Evil, you have to switch to insert state and put the cursor after the last parenthsis, then evaluate the expression with C-x C-e . If you put the cursor on the last parenthesis in normal state, The result will be wrong. It unnecessary to put your clojure file in a leiningen-created project, which is more flexible than vim-fireplace; The value of expression will be output to the message area (bottom of the emacs window), while the output by \"println\" will be output to nrepl buffer; Switch cursor between windows: C-x o; Clear repl output: C-c M-o; Indent code blocks intelligently: C-M-q All the keyboard shortcuts will be more convenient if you swap CapsLock key and Escape key, together with Ctrl key and Alt key, see Define Keymap on Ubuntu for detail; Ref: http://stackoverflow.com/questions/3636364/can-i-clean-the-repl Clojure with Emacs","tags":"Tech","url":"http://leetschau.github.io/using-emacs-as-clojure-ide.html","loc":"http://leetschau.github.io/using-emacs-as-clojure-ide.html"},{"title":"Use vim as Clojure Development Environment","text":"REPL in vim Install leiningen 2.x; verify: lein repl produces something like \"nREPL server started on port...\"; Add [cider/cider-nrepl \"0.12.0\"] into ~/.lein/profiles.clj, Now ~/.lein/profiles.clj is: {:user {:plugins [ [lein-try \"0.4.3\"] [cider/cider-nrepl \"0.12.0\"] ] } } Install clojure plugins with vundle: add the following into ~/.vimrc: Plugin 'tpope/vim-fireplace' Plugin 'tpope/vim-classpath' Plugin 'guns/vim-clojure-static' Create a new clojure project: lein new myproj ; Run \"lein repl\" under myproj (to download necessary jar files); edit a clojure file (xxx.clj) with vi, using \":Eval\" to evaluate the expression under cursor, using \":%Eval\" to evaluate current namespace; K to show doc of the function under cursor, [d show source codes; [<C-D> (press [ , followed by Ctrl-d) jump to source code of the function under cursor, Ctrl-o to jump back. Note: the clj file must be one of the source files (under \"src\" folder) of the clojure project created by leiningen. And the first line of this file (a clojure module actually) must be (ns project-name.module-name) ; Ref: CIDER nREPL http://clojure-doc.org/articles/tutorials/vim_fireplace.html http://www.boxuk.com/blog/unboxing-vim-fireplace/ Define Shortcuts for Efficiency Add the following codes into .vimrc (before \"filetype on\"); autocmd FileType clojure nnoremap < buffer > < F5 > : Eval < CR > autocmd FileType clojure nnoremap < buffer > < F6 > : % Eval < CR > Explanation: \"autocmd \" means when happens, run . Here is \"FileType clojure\", is \"nnoremap :Eval \". The options here is \"buffer local map\", which means this keymapping only take effect on the current buffer. See Buffer-Local Options and Mappings in Learn Vimscript the Hard Way for explanations. To determine FileType name (here is clojure), you should open a target file (here is any file with \".clj\" extension) in vi, then run \":set filetype\". Discussion Install clojure plugins with pathogen: cd ~/ . vim / bundle git clone git : // github . com / tpope / vim - fireplace . git git clone git : // github . com / tpope / vim - classpath . git git clone git : // github . com / guns / vim - clojure - static . git S-expression Text Manipulation Add the following into ~/.vimrc: let maplocalleader = \" , \" Plugin ' tpope/vim-repeat ' Plugin ' guns/vim-sexp ' Plugin ' tpope/vim-surround ' Plugin ' tpope/vim-sexp-mappings-for-regular-people ' See Definitions in vim-sexp for the definitions of FORM and ELEMENT. Moving ( and ) move the cursor to the nearest paired structural bracket. [[ and ]] move the cursor to previous/next top-level ELEMENT. Editing Now you can use [ai][fFse] to manipulate s-exp style text blocks, can be [d]elete, [c]hange, [v]isual, [y]ank, \"f\" means current form, \"F\" means top-level FORM. \"s\" means string, \"e\" means ELEMENT. For example: daf, dif, daF, diF, das, dae, vaf, vif, caf, cif. Meta key used in key definitions of \"guns/vim-sexp\" doesn't work on Ubuntu laptop, use \"tpope/vim-sexp-mappings-for-regular-people\" instead: >f / <f / >e / <e swap current FORM/ELEMENT with the next/previous FORM. For example, when cursor in (str \"baz\" \"bar\") , <f convert (foo (str \"baz\" \"bar\")) to ((str \"baz\" \"bar\") foo) . When cursor on \"foo\", use <e to move back. To demonstrate \"Slurpage\", say there is a code snippet (foo \"bar\") , we need convert it to (foo (str \"baz\" \"bar\")) , here underscore is used as the cursor: ( foo_ \"bar\" ) Insert \"(baz)\" and press , move cursor to \")\": ( foo ( str \"baz\" ) \"bar\" ) Press >) to include \"bar\" in the current FORM: ( foo ( str \"baz\" \"bar\" )) Use <) to move back.","tags":"Tech","url":"http://leetschau.github.io/use-vim-as-clojure-development-environment.html","loc":"http://leetschau.github.io/use-vim-as-clojure-development-environment.html"},{"title":"MIT Scheme Development on Ubuntu","text":"sudo apt-get mit-scheme ; run \"scheme\" then you enter the command line scheme repl; sudo apt-get emacs ; modify \"(setq scheme-program-name \"scm\")\" in .emacs to \"(setq scheme-program-name \"scheme\")\", because our scheme command is \"scheme\"; install quack with apt-get install emacs-goodies-el ; open emacs and create a new buffer with \"C-x C-f myfile.scm\"; input following code: ( define ( mydouble x ) ( + ( * x 2 ) 10 )) save file: C-x C-s; split window: C-x 2; switch to bottom window: C-x o; start scheme repl at bottom window: M-x run-scheme switch back to top window: C-x o; parse code: C-x C-e; switch back to bottom window(C-x o) and run \"(mydouble 3)\", you got 16; modify source file in upper window and parse it again (C-x C-e); run \"(mydouble 3)\" again, now you get another value; Ref: A tutorial for using Emacs with Scheme","tags":"Tech","url":"http://leetschau.github.io/mit-scheme-development-on-ubuntu.html","loc":"http://leetschau.github.io/mit-scheme-development-on-ubuntu.html"},{"title":"SICP Solutions","text":"Official version in MIT Scheme, Chinese ; Scheme wiki version ; Greg version in Clojure ; qiao version in MIT Scheme ; You can find more solutions on Greg's website ;","tags":"Tech","url":"http://leetschau.github.io/sicp-solutions.html","loc":"http://leetschau.github.io/sicp-solutions.html"},{"title":"Java Counterpart of Counting Change in SICP","text":"The following program is the Java counterpart of the counting change example at page 46 in section 1.2.2 \"Tree Recursion\" of \"Structure and Interpretation of Computer Programs\", 2nd edition. public class CountChange { public static int first_demonstration (int kinds_of_coins) { int res = 0; switch (kinds_of_coins) { case 1: res = 1; break; case 2: res = 5; break; case 3: res = 10; break; case 4: res = 25; break; case 5: res = 50; } // System.out.println(\"kinds_of_coins=\" + kinds_of_coins + \", return \" + res); return res; } public static void main(String[] args) { // System.out.println(\"args are: \" + args[0] + \", \" + args[1]); int res = count_change(Integer.parseInt(args[0]), Integer.parseInt(args[1])); System.out.println(\"Change Count is: \" + res); } public static int count_change(int amount, int kinds_of_coins) { // System.out.println(\"amount=\" + amount + \", \" + \"kinds_of_coins=\" + kinds_of_coins); if (amount==0) { return 1; } else if (amount<0||kinds_of_coins==0) { return 0; } else { / System.out.println(\"return count_change(\" + amount + \", \" + (kinds_of_coins - 1) + \") + count_change(\" + (amount - first_demonstration(kinds_of_coins)) + \", \" + kinds_of_coins + \")\"); / return count_change(amount, kinds_of_coins-1) + count_change(amount - first_demonstration(kinds_of_coins), kinds_of_coins); } } }","tags":"Tech","url":"http://leetschau.github.io/java-counterpart-of-counting-change-in-sicp.html","loc":"http://leetschau.github.io/java-counterpart-of-counting-change-in-sicp.html"},{"title":"repeatedly function in Clojure","text":"user=> ( doc repeatedly ) ------------------------- clojure . core / repeatedly ([ f ] [ n f ]) Takes a function of no args , presumably with side effects , and returns an infinite ( or length n if supplied ) lazy sequence of calls to it nil user=> ( repeatedly 5 ( fn [] 90 )) ( 90 90 90 90 90 ) user=> ( type ( repeatedly 5 ( fn [] 90 ))) clojure . lang . LazySeq user=> ( repeatedly 5 ( fn [] ( do ( println \"hi\" ) 75 ))) ( hi hi 75 hi 75 hi 75 hi 75 75 ) user=> ( repeatedly ( fn [] 87 )) OutOfMemoryError Java heap space java . util . Arrays . copyOf (:- 1 ) So you can see repeatedly can take a function with/without side effect. But how to return a function with infinite length?","tags":"Tech","url":"http://leetschau.github.io/repeatedly-function-in-clojure.html","loc":"http://leetschau.github.io/repeatedly-function-in-clojure.html"},{"title":"Use iTunes on Linux","text":"Today I installed iTunes (Windows installer) via wine. But after installation it didn't work. Then I installed iTunes (Windows installer, too) in Windows 7 in virtualbox. But it can't read the iPod via USB port. People said you have to check the options \"Enable USB Controller\" and \"Enable USB 2.0 (EHCI) Controller\" of the \"USB\" section (see http://www.ehow.com/how_7248690_sync-ipod_-itunes-virtualbox.html) of the virtual machine settings. It told me that you have to install extension pack to enable the EHCI option. After I downloaded this extension (file name: Oracle_VM_VirtualBox_Extension_Pack-4.2.18-88780.vbox-extpack) from Oracle website and install it via [File -> Preferences -> Extensions], it told me the versions of virtual machine is too old to match this extension. So I downloaded the \"All distributions\" edition of virtualbox on Oracle website (file name: VirtualBox-4.2.18-88780-Linux_x86.run). Remove the old version (v4.1.x) and install this 4.2 verison (sudo ./VirtualBox-4.2.18-88780-Linux_x86.run). Then install in settings. Then enable EHCI of the Windows 7 virtual machine. Then start it and plug in the iPod. After a while at [Devices -> USB Devices] I got the item \"Apple Inc. iPod [0001]\", check it and my iPod appeared in iTunes. To add \"The Well-Tempered Clavier\" of Bach to iPod, I install soundconverter and convert all flac files to aac files with it. Then I import these aas files into iTunes and transfer them to my iPod. So this is the whole story of using iPod on Linux.","tags":"Tech","url":"http://leetschau.github.io/use-itunes-on-linux.html","loc":"http://leetschau.github.io/use-itunes-on-linux.html"},{"title":"Notes of \"Clojure Programming\"","text":"swap-pairs, p86 user => ( apply list ( range 10 )) ( 0 1 2 3 4 5 6 7 8 9 ) user => ( drop 1 ( apply list ( range 10 ))) ( 1 2 3 4 5 6 7 8 9 ) user => ( take - nth 2 ( drop 1 ( apply list ( range 10 )))) ( 1 3 5 7 9 ) user => ( take - nth 2 ( apply list ( range 10 ))) ( 0 2 4 6 8 ) user => ( interleave '(1 3 5 7 9) ' ( 0 2 4 6 8 )) ( 1 0 3 2 5 4 7 6 9 8 ) user => ( def list1 ( take - nth 2 ( drop 1 ( apply list ( range 10 ))))) # 'user/list1 user=> (def list2 (take-nth 2 (apply list (range 10)))) #' user / list2 user => ( def empty - list ( empty ( apply list ( range 10 )))) # 'user/empty-list user=> (def total-list (interleave list1 list2)) #' user / total - list user => ( into empty - list total - list ) ( 8 9 6 7 4 5 2 3 0 1 ) map-map, p86 hash-map is unsorted collections, while sorted-map is sorted. So you can see the output of the hash-map is unsorted, while that of sorted-map is sorted. The synopsis of \"for\" is \"(for [k1 v1 k2 v2 ...] (return-value))\". So when f is inc, m is (hash-map :z 5 :c 6 :a 0), to \"(for [[k v] m] [k (f v)])\", [k v] is [:z 5], [:c 6] and [\":a\" 0], and the return value is \"[k (f v)]\", thus [:z (inc 5)], [:c (inc 6)] and [:a (inc 0)]. seq function, p87 \"seq\" function produces a sequence over its argument. But the exact type is different based on the type of its arguments: user => ( type ( seq ' ( 1 3 2 ))) clojure . lang . PersistentList user => ( type ( seq [ 1 3 2 ])) clojure . lang . PersistentVector$ChunkedSeq user => ( type ( seq { : a 1 : b 2 } )) clojure . lang . PersistentArrayMap$Seq user => ( type ( seq # { 1 3 2 } )) clojure . lang . APersistentMap$KeySeq user => ( type ( seq nil )) nil destructuring a lazy seq, p95 ( let [[ x & rest ] ( random - ints 50 ) ] ( str ( str x ) \" - \" ( str ( first rest )) \" - \" ( second rest ))) realizing random number realizing random number realizing random number \" 23 - 37 - 10 \" reduce-by, p118 See Notes of \"reduce-by\" in \"Clojure Programming\" ; pprint can be used directly in clojure repl. If you want use it in a script, write your namespace declaration like this: (ns startclojure.core (:require clojure.pprint)) Then you can use it as (clojure.pprint/pprint val) . assoc-in, get-in vs assoc, get, p120 => ( assoc - in {} [: a : b ] 321 ) { : a { : b 321 }} => ( assoc {} [: a : b ] 321 ) { [: a : b ] 321 } => ( get - in { : a { : b 321 }} [: a : b ]) 321 => ( get { : a { : b 321 }} [: a : b ]) nil => ( get { [: a : b ] 321 } [: a : b ]) 321 => ( { [: a : b ] 321 } [: a : b ]) 321 => ( get - in { [: a : b ] 321 } [: a : b ]) nil => ( get - in { : a 23 } : a ) IllegalArgumentException ... => ( get { : a 23 } : a ) 23","tags":"Tech","url":"http://leetschau.github.io/notes-of-clojure-programming.html","loc":"http://leetschau.github.io/notes-of-clojure-programming.html"},{"title":"Frequent Used Functions in Clojure","text":"(type ...): get the data type of ...; (apply + [1 2 3]) <=> (+ 1 2 3), but not equals to (+ [1 2 3]), p65; (map f [a b c]) <=> ((f a) (f b) (f c)); (map f [a b c] [x y z]) <=> ((f a x) (f b y) (f c z)); (type (map + [1 2 3] [10 20 30])) => clojure.lang.LazySeq, p61; (conj [1 2] 3) => [1 2 3]; (conj [1 2] [3 4]) => [1 2 [3 4]]; (conj [1 2] [3 4] [5 6]) => [1 2 [3 4] [5 6]]; (into [1 2] 3) => exception; (into [1 2] [3]) => [1 2 3]; (into [1 2] [3 4] [5]) => exception; (drop 1 [1 2 3]) => (2 3); (drop 2 [1 2 3]) => (3); (type (drop 2 [1 2 3])) => clojure.lang.LazySeq; (take-nth 2 (range 10)) => (0 2 4 6 8) (take-nth 3 (range 10)) => (0 3 6 9) (take-nth 7 (range 10)) => (0 7) (take-nth 9 (range 10)) => (0 9) (take-nth 2 #{3 5 7 9}) => (3 7) (take-nth 2 {:a 3 :b 5 :c 7 :d 9}) => ([:a 3] [:c 7]) (type (take-nth 2 {:a 3 :b 5 :c 7 :d 9})) => clojure.lang.LazySeq","tags":"Tech","url":"http://leetschau.github.io/frequent-used-functions-in-clojure.html","loc":"http://leetschau.github.io/frequent-used-functions-in-clojure.html"},{"title":"Data Types in Clojure","text":"(type (range 5)): clojure.lang.LazySeq (type (apply list (range 5))): clojure.lang.PersistentList","tags":"Tech","url":"http://leetschau.github.io/data-types-in-clojure.html","loc":"http://leetschau.github.io/data-types-in-clojure.html"},{"title":"Command Line Shortcuts in Linux Shell","text":"Shortcuts in bash C-d: exit from the shell or a command (like ftp); C-c: cancel current command; C-p or M-p: previous command, same as up arrow key; C-n or M-n: next command, same as down arrow key; C-r: allows you to search through the previous commands; C-o: Execute the current item in the history list and advance to the next one. Useful when you are trying to re-execute a sequence of commands in the history list. For example, run \"ps\", \"pwd\", \"ls\" one by one, then use C-p back to \"ps\", then press C-o, you can see the effect; M-f/b: Move cursor forward/backward one word on the current line; !!: last command, scenario: use \"sudo !!\" after \"vi /etc/passwd\" for permission denied; ! : Repeat last history list item starting with string, for example: \"!ssh\" will be expanded to the last ssh command you used, which is very useful when use a set of commands repeatedly; !? : Repeat last history list item containing string. For example: \"!?49\" could be expanded to \"ssh 10.0.2.49\"; ! : is the number of the result of \"history\" command, for example: history|grep scp|sort|uniq list all history command contains \"scp\", sort them and remove duplicate command. Then use ! to run this command; ! \\(: arguments of last command, scenario: \"mkdir a/b/c/d/e\", then use \"cd !\\) \" to go to subfolder e; &#94;old&#94;new: replace \"old\" with \"new\" in last command; history|grep erlang; !2217: use history to get the command number, use \"! \" to run this command; Ref: Chapter 8: Advanced Keyboard Tricks in \"The Linux Command Line\" by William E. Shotts; http://lifehacker.com/5743814/become-a-command-line-ninja-with-these-time+saving-shortcuts Command Line Editing Move Cursor M-f or C-right arrow key: Move forward one word; M-b or C-left arrow key: Move backward one word; C-a: Move to the beginning of the line; C-e: Move to the end of the line; C-f: Move forward a character, same as right arrow key; C-b: Move backward a character, same as left arrow key; C-l: same as command \"clear\"; C-t: exchange the character at the cursor location with the one preceding it; M-t: exchange the word at the cursor location with the one preceding it; Modifying Text C-u: clears the current command line; M-d: kill text from cursor to the end of the current word; M-Backspace or C-w: kill text from cursor to the beginning of the current word, or the previous word if cursor is at the beginning of a word; C-y: Yank text from the kill-ring and insert it at the cursor location; C-k: deletes the line from the position of the cursor to the end of the line; A use case: I want to run \"scp file1 user@10.0.2.47:/home/user/warez/\" and \"scp file1 user@10.0.2.51:/home/user/warez/\" one by one, after the first command is executed, I can run the 2nd in this way: C - p M - b M - b M - b C - w 51 : /< Enter > where M-b move the cursor one word backward, C-w delete the word before cursor. Completion Beside the path name completion, you can use \"Tab\" key to complete: Host name: after a \"@\" sign, the available hosts are defined in /etc/hosts; Variable name: after a dollar sign \"$\"; User name: after a tilde sign \"~\"; Define alias in zsh In this case we want to build a subversion client command-line utility, especially for browse purpose. alias sl = \"svn ls\" alias - g 59 = \"http://10.0.2.59:8118/svn/gcp\" Now \"sl gcp\" equals to \"svn sl http://10.0.2.59:8118/svn/gcp\". The restriction of zsh alias is that there must be a blank between aliases, regular or global. So if you want to define a shortcut \"sshec\" for saving keyboard input of \"ssh -i /home/lichao/Documents/lichao-key-pair-us-west-1.pem ec2-user@10.0.2.33\", you can't define \"alias sshec='ssh -i /home/lichao/Documents/lichao-key-pair-us-west-1.pem ec2-user@'\", because there is no blank between \"@\" and \"10.0.2.33\". When you input \"sshec10.0.2.33\", you get a unknown command error. You can use [Application Finder -> Custom Actions] in Mint to define this kind of shortcuts. Ref: zsh aliases if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/command-line-shortcuts-in-linux-shell.html","loc":"http://leetschau.github.io/command-line-shortcuts-in-linux-shell.html"},{"title":"Special Forms and Syntax Sugars in Clojure","text":"(...): function literals, p40, 64; '(...): suppress evaluation, p24; _(...): comments, p18; \"...\": regular expression, p17; (def x y): bind x to y; (fn [parameters] (function-body)): define a function; (defn func-name [parameters] (body)): define a function and bind it to \"func-name\"; (let [s1 v1 s2 v2 ...] (body))","tags":"Tech","url":"http://leetschau.github.io/special-forms-and-syntax-sugars-in-clojure.html","loc":"http://leetschau.github.io/special-forms-and-syntax-sugars-in-clojure.html"},{"title":"Send Excerpts from Jenkins Console Output as Email Contents","text":"Sometimes we need to send some excerpts from Jenkins console output (job logs) as email, such as test results, etc. Email-ext plugin of Jenkins can do this job. Add \"${BUILD_LOG_EXCERPT, start=\"...\", end=\"...\"} into [Post-build Actions -> Editable Email Notification -> Default Content (or Content in a specified trigger)]. the value of \"start\" and \"end\" is a regular expression and the matching lines are excluded. \" BUILD_LOG_REGEX\" and \" BUILD_LOG_MULTILINE_REGEX\" are also useful. See [Editable Email Notification -> Content Token Reference] for all available tokens. See also: http://stackoverflow.com/questions/9439450/how-will-i-filter-out-only-errors-in-jenkins-email-ext-build-log-regex http://siddesh-bg.blogspot.com/2012/04/using-buildlogregex-in-jenkins-email.html","tags":"Tech","url":"http://leetschau.github.io/send-excerpts-from-jenkins-console-output-as-email-contents.html","loc":"http://leetschau.github.io/send-excerpts-from-jenkins-console-output-as-email-contents.html"},{"title":"Install FTP Service for CentOS Host behind a Proxy","text":"Basic Installation add \"proxy=http://10.21.3.31:8087\" to /etc/yum.conf; run command \"yum install -y vsftpd\" with root; run \"service vsftpd start\" with root. Now you can use ftp with a common user; Enable upload and create directory Run following command with root accout (or there will raise 553 and 550 errors when you upload and create dir): setsebool allow_ftpd_full_access on setsebool ftp_home_dir on / sbin / service vsftpd restart Verify: $ nc -zv 10 .0.2.49 21 or $ ftp 10 .0.2.49 then enter username and password. Any existing user account can be used. If you get following errors, it's probably due to the fiirwall. See the next section for solutions. nc : connect to 10 . 0 . 2 . 49 port 21 ( tcp ) failed : No route to host Ref: google \"vsftpd 553 centos\"; Starting and Stopping vsftpd Config Firewall First you should test if the connection failure is caused by iptables: # service iptables stop and connect the ftp again. If you can logged in, then you should config iptables rules. Add a rule in iptables to open access for port 21: Open file /etc/sysconfig/iptables: Add \"-A INPUT -i eth0 -p tcp --dport 21 -j ACCEPT\" after the line \"-A INPUT -i lo -j ACCEPT\". Then restart service: # service iptables restart Verify again.","tags":"Tech","url":"http://leetschau.github.io/install-ftp-service-for-centos-host-behind-a-proxy.html","loc":"http://leetschau.github.io/install-ftp-service-for-centos-host-behind-a-proxy.html"},{"title":"Mass Configuration Modification with Jenkins Slicing Plugin","text":"Configuration Slicing Plugin Today I used it adding \"Discard Old Builds\" for all jobs in my Jenkins server. Very convenient.","tags":"Tech","url":"http://leetschau.github.io/mass-configuration-modification-with-jenkins-slicing-plugin.html","loc":"http://leetschau.github.io/mass-configuration-modification-with-jenkins-slicing-plugin.html"},{"title":"Clear Jenkins Builds to Release Disk Space","text":"Delete all builds of a specified job def jobName = \"GCP-Core-6.15P3\" def job = Jenkins.instance.getItem(jobName) job.getBuilds().each { it.delete() } Delete all builds of some jobs for(job in Jenkins.instance.items) { println(\"Clear builds of \"+job.name) if (job.name.startsWith(\"GCP\")) { job.getBuilds().each { it.delete() } } println(\"Job \"+job.name+\" cleaned.\") } Delete all builds of all jobs for(job in Jenkins.instance.items) { job.getBuilds().each { it.delete() } }","tags":"Tech","url":"http://leetschau.github.io/clear-jenkins-builds-to-release-disk-space.html","loc":"http://leetschau.github.io/clear-jenkins-builds-to-release-disk-space.html"},{"title":"xargs notes","text":"Synopsis: xargs <command> <command options> When you run <command> | xargs <command2> <cmd2-options> , and the result of (only) running is: < cmd1 - result - line1 > < cmd1 - result - line2 > ... actually you are running: < command2 > < cmd2 - options > < cmd1 - result - line1 > < command2 > < cmd2 - options > < cmd1 - result - line2 > ... If you want add before , you have to use -I options. Usually we use \"%\" as a placeholder. For example, echo '1\\n2\\n3' |xargs -n 1 echo ok produces: ok 1 ok 2 ok 3 while echo '1\\n2\\n3' |xargs -n 1 -I % echo % ok produces: 1 ok 2 ok 3 ok Here \"-n 1\" means the maximum number of arguments is 1 in every command line. So echo '1\\n2\\n3'|xargs -n 2 echo ok produces: ok 1 2 ok 3 The following command gives the total lines of java code under current directory (and subdirectories): find . - name '*.java' | xargs wc - l while find . - name '*.java' | wc - l produces how many java files under current directory (and subdirectories). Note: the quotes of \"*.java\" is necessary. Ref: http://offbytwo.com/2011/06/26/things-you-didnt-know-about-xargs.html","tags":"Tech","url":"http://leetschau.github.io/xargs-notes.html","loc":"http://leetschau.github.io/xargs-notes.html"},{"title":"Fabric Notes","text":"Installation sudo pip install fabric (verified on Mint 14, 2013-9-4) sudo apt-get install fabric (verified on Ubuntu Server 12.04 with goagent, 2013-9-7) Test \"With\" Statement of Fabric When running fabric command on remote host, if the current directory after \"with cd(...)\" will return to original one? Let's test it. fabfile.py from __future__ import with_statement from fabric.api import local , settings , abort , run , cd def testcd ( path ): run ( \"pwd\" ) run ( \"ls -l\" ) with cd ( path ): run ( \"pwd\" ) run ( \"ls -l\" ) run ( \"pwd\" ) run ( \"ls -l\" ) Now run fab -H 10.0.7.142 -u gcp -p gcp@123 testcd:path=\"zdjk\" . The \"pwd\" and \"ls\" before and after \"with\" statement give the same result, which means \"cd\" in \"with\" statement only take effect in \"with\" block. It's cool.","tags":"Tech","url":"http://leetschau.github.io/fabric-notes.html","loc":"http://leetschau.github.io/fabric-notes.html"},{"title":"Continous Delivery Notes","text":"From ControlTier . Tools comparison: https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software Now ControlTier is replaced by rundeck.org. Fabic is another good tool based on Python. It has a fexpect component to do expect-like automation tasks. Fabric is \"push\" model, see Puppet vs Fabric for deploys ; RunDeck Plugin of Jenkins give a good example of \"0-click\" deployment. A simple introduction to fabric give a good explanation of how to use fabric to do deploying jobs. Func is \"Fedora Unified Network Controller\", so it's suited on rpm-based Linux. SmartFrog is a Java-based tool, we can use it with Fabric. Salt Stack is also a candidate, support push and pull models(http://serverfault.com/questions/415713/what-advantages-features-does-puppet-or-chef-offer-over-salt-or-vice-versa). It has nice Chinese support, see Salt介绍 .","tags":"Tech","url":"http://leetschau.github.io/continous-delivery-notes.html","loc":"http://leetschau.github.io/continous-delivery-notes.html"},{"title":"Manage Python Packages with pip","text":"Install pip sudo apt - get python - pip Install package with pip sudo pip install fabric List all installed packages pip freeze List some packages pip freeze | grep \"[F|f]abric\" Note: Double quotes after grep is necessary; Uninstall packages with pip sudo pip uninstall Fabric","tags":"Tech","url":"http://leetschau.github.io/manage-python-packages-with-pip.html","loc":"http://leetschau.github.io/manage-python-packages-with-pip.html"},{"title":"Get Coverage Data for Standalone Server with Cobertura","text":"Prerequisites Copy cobertura.jar (1.9.1), asm-3.0.jar, asm-tree-3.0.jar, jakarta-oro-2.0.8.jar, log4j-1.2.15.jar totally 5 jars to a folder (in this case it is: \"/home/lichao/apps/coberturaLib\"). If using cobertura-2.0.3, copy cobertura.jar and all jars in folder \"lib\" to \"coberturaLib\". The current working directory is project home folder, under which there are 3 folders: cmd, conf, lib. Instrument Now we need instrument class files under \"class\" folder to \"instru\" folder: java - cp \"/home/lichao/apps/coberturaLib/*\" net . sourceforge . cobertura . instrument . Main --destination instru class Note the double quotes of \"/home.../coberturaLib/*\" is necessary. If you use cobertura-2.0.3, add project dependencies ($PROJ_HOME/lib), too: java - cp \"/home/lichao/apps/coberturaLib/*:../lib/*\" net . sourceforge . cobertura . instrument . Main --destination CalcServer --datafile CalcServer/cobertura.ser CalcServer.jar Synopsis: java - cp < Cobertura_lib > net . sourceforge . cobertura . instrument . Main --destination <dest_folder> --datafile <datafile_path> <target> If is a folder containing class files, instrumented class files will be created under . If is a jar file, instrumented jar file will be created under . If \"--destination is not specified, the instrumented one will overwrite the origin. Start Server This step equals to \"unit test\" in junit-cobertura scenario. The start.sh is: 1 2 3 4 #!/bin/sh CoberturaJar = \"/home/lichao/apps/coberturaLib/cobertura-2.0.3.jar\" JARS = \" $CoberturaJar :conf:./*:lib/*\" java -cp $JARS -Dnet.sourceforge.cobertura.datafile = cobertura.ser com.boco.deploy.Main Note: The instrumented jar must be add before uninstrumented jar in classpath. Synopsis: java - cp < cobertura . jar_path > : < other_dependencies > - Dnet . sourceforge . cobertura . datafile =< datafile_path > Server . Main . Class . Name Merge Datafile java - cp \"coberturaLib-2.0.3/*\" net . sourceforge . cobertura . merge . Main --datafile GcpCollector/cmd/cobertura.ser GcpServerCore/cmd/cobertura.ser cobertura.ser Get Report java - cp \"/home/lichao/apps/coberturaLib/*\" net . sourceforge . cobertura . reporting . Main --datafile cobertura.ser --destination ../report ../../src The report data will not be written to report files until the server process is down. Synopsis: java - cp < cobertura_lib > net . sourceforge . cobertura . reporting . Main --datafile <datafile_path> --destination <report_path> <source_folder>","tags":"Tech","url":"http://leetschau.github.io/get-coverage-data-for-standalone-server-with-cobertura.html","loc":"http://leetschau.github.io/get-coverage-data-for-standalone-server-with-cobertura.html"},{"title":"Network Promgramming in Clojure","text":"TCP echo server: http://stackoverflow.com/questions/1223352/writing-a-multiplexing-server-in-clojure Asynchronous communication framework based on Netty: aleph System admin and deployment tool: clojure-control Cloud Automation Tool (build Hadoop cluster on Amazon EC2): Pallet SSH client based on jsch: clj-ssh","tags":"Tech","url":"http://leetschau.github.io/network-promgramming-in-clojure.html","loc":"http://leetschau.github.io/network-promgramming-in-clojure.html"},{"title":"Copy, Tag and Branch of Subversion","text":"Tag and branch are the same from the point of view of svn server. They are both the \"copy\" operation (this is why they use the same menu item in TortoiseSVN, they are actually the \"svn copy\" command). Copy operation of svn server will create a link to original revision. So create tag or branch will not double the disk space usage. The disk space usage is actually related with how many files are modified based on a specific revision. What is the difference of tag and branch? When you create a \"tag\", you mean you will save this link at a \"baseline area\" where it's prohibited to do checkout-modify-checkin operation. On the contrary, if you create a \"branch\", you will do checkout-modify-checkin operation in the future for new feature development or bug fix. Use \"svn help copy\" for explanations.","tags":"Tech","url":"http://leetschau.github.io/copy-tag-and-branch-of-subversion.html","loc":"http://leetschau.github.io/copy-tag-and-branch-of-subversion.html"},{"title":"Auto Deploy Notes","text":"Write a property file: /home/bvt/docs/jenkinsEnv.properties: gcp.job.type=deliver gcp.deliver.ip=10.0.7.142 gcp.deliver.user=gcp gcp.deliver.home=/home/gcp gcp.deliver.deployFolder=deploy gcp.deliver.prompt=gcp@cloud142 Note: Do not leave blanks between \"=\" and values in property file. gcp.deliver.home = /home/gcp will produce wrong value when gotten by expect script. Add this file to \"Build Environment -> Inject environment variables to the build process\" in Jenkins Job Configure panel with Environment Injector plugin. Create a deploy script (deploy.exp) in project base folder: #!/usr/bin/expect set artifact [lindex \\(argv 0] spawn scp $artifact $env(gcp.deliver.user)@\\) env(gcp.deliver.ip):$env(gcp.del expect eof Create a \"Conditional step(single)\" with conditional-buildstep plugin. Run? Strings match String 1: ${ENV,var=\"gcp.job.type\"} String 2: deliver Builder: Execute Shell Command: ./deploy.exp build/*.zip if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/auto-deploy-notes.html","loc":"http://leetschau.github.io/auto-deploy-notes.html"},{"title":"Create Shortcut for SSH Hosts","text":"You frequently visit host 10.0.7.141 for example. It's a waste to type \"ssh gcp@10.0.7.141\" every time you connect it. So you can create a file ~/.ssh/config, and add follow lines to it: Host 141 Hostname 10 . 0 . 7 . 141 User gcp [ Port 22 ] [ IdentityFile ~/ . ssh / id_rsa . pub ] Now you can use \"ssh 141\" to connect to this host. Or use \"scp user@141:/home/user/\" to copy files. With key authorization (see note \"Login SSH Server without Password\"), you can connect to this host without inputing password. You can copy local file to remote host with \"scp myfile 141:/target/path\", and copy file on remote host to local folder with \"scp 141:/source/path/to/file /target/folder\". Note: IdentifyFile is the shortcut of \"-i /path/to/public-key\" option of \"ssh\" command;","tags":"Tech","url":"http://leetschau.github.io/create-shortcut-for-ssh-hosts.html","loc":"http://leetschau.github.io/create-shortcut-for-ssh-hosts.html"},{"title":"Create Shortcut to Get Jar File Meta Information","text":"You have to get meta information of cobertura.jar with command \"unzip -q -c cobertura.jar META-INF/MANIFEST.MF\". It's too long to write so we gonna create a shortcut \"getmeta\" for this command. Then we can use \"getmeta cobertura\" to get the same information. In zsh, you can add following snippet into .zshrc: getmeta() { unzip -q -c \"$*\".jar META-INF/MANIFEST.MF } You can also use command \"alias\" to define this. But it's not general like above. In bash, add the following snippet to .bashrc or .bash_profile: getmeta() { unzip -q -c \"$@\".jar META-INF/MANIFEST.MF } Ref: http://stackoverflow.com/questions/2904677/alias-with-parameters http://stackoverflow.com/questions/4060880/shell-bash-passing-argument-to-alias","tags":"Tech","url":"http://leetschau.github.io/create-shortcut-to-get-jar-file-meta-information.html","loc":"http://leetschau.github.io/create-shortcut-to-get-jar-file-meta-information.html"},{"title":"Show Output and Internal Diagnostics of Expect Script in Different Terminals","text":"Start a terminal, run tty to get its device file name, \"/dev/pts/0\" in this case. Start another terminal. Create a expect script \"testDebug.exp\": 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/expect set prompt \" \\\\ \\[hadoop@49server \\\\ s.* \\\\ \\] \\\\ \\$ \\\\ s\" spawn telnet 10.0.2.49 exp_internal 1 expect \"login:\" send \"hadoop \\r \" expect \"Password:\" send \"h \\r \" expect - re $ prompt send \"df -h \\r \" expect - re $ prompt send \"exit \\r \" expect eof Give execution priority to testDebug.exp (using chmod) and run it: ./testDebug.exp 2> /dev/pts/0 . You can see all diagnostics information are printed in the terminal \"/dev/pts/0\" while all \"normal\" informal are printed in the second terminal window. Explanation: the command \"exp_internal 1\" send all pattern diagnostics to standard error, which is specified as \"2> ...\" in the command line. Meanwhile, a terminal's id can be get from \"tty\" command. You can use \"exp_internal -f 0\" instead of \"exp_internal 1\" to save all standard output and diagnostics information into file . while only standard output can be seen on the terminal. Reference: Section \"Enabling Internal Diagnostics\" and \"Logging Internal Diagnostics\" in chapter 7:\"Debugging Patterns And Controlling Output\" of \"Exploring Expect\" by Don Libes. Notes: If you run command \"ls -l /dev/pts/*\", you can get the following outputs: crw --w---- 1 lichao tty 136, 0 Aug 28 11:56 0 ... Notice that the file type are \"c\" (the first character of the line), which stands for \"character device\" (standard input/output, like keyboard and screen, relative to \"block device\", like hard drives). See \"http://en.wikipedia.org/wiki/Unix_file_types#Device_file\" for details.","tags":"Tech","url":"http://leetschau.github.io/show-output-and-internal-diagnostics-of-expect-script-in-different-terminals.html","loc":"http://leetschau.github.io/show-output-and-internal-diagnostics-of-expect-script-in-different-terminals.html"},{"title":"Check Directory Existence in Shell","text":"The following command in one line can check if a directory exists. You can check the return value (\"yes or \"no) then decide what to do. $ if [ -d /home/gcp/deploy ] ; then echo \"yes\" ; else echo \"no\" ; fi","tags":"Tech","url":"http://leetschau.github.io/check-directory-existence-in-shell.html","loc":"http://leetschau.github.io/check-directory-existence-in-shell.html"},{"title":"Get Tcl and Expect Version on Ubuntu","text":"tcl version $ tclsh % puts $tcl_version 8.5 expect version $ expect -v expect version 5.45","tags":"Tech","url":"http://leetschau.github.io/get-tcl-and-expect-version-on-ubuntu.html","loc":"http://leetschau.github.io/get-tcl-and-expect-version-on-ubuntu.html"},{"title":"A Telnet Client Using Expect","text":"The following expect script achieves a simple telnet client: login -> send command -> exit. The point is the form of prompt in regular expression. You have to add 3 backslash before \"[\", \"]\" and \"$\", and add \"-re\" option after expect command in \"expect $prompt\". #!/usr/bin/expect set prompt \"\\[hadoop@49server\\s.*\\]\\\\$\\s\" spawn telnet 10.0.2.49 expect \"login:\" send \"hadoop\\r\" expect \"Password:\" send \"h\\r\" expect -re $prompt send \"df -h\\r\" expect -re $prompt send \"ls -l\\r\" expect -re $prompt send \"exit\\r\" expect eof The following script achieves auto-login and auto-logout. Save it as autoTelnet.exp: #!/usr/bin/expect set ip [lindex \\(argv 0] set username [lindex $argv 1] set password [lindex $argv 2] spawn telnet $ip expect \"login:\" send \"\\) username\\r\" expect \"Password:\" send \"$password\\r\" interact +++ return send \"exit\\r\" expect eof then run it: $ ./autoTelnet.exp 10.0.2.49 hadoop h After auto-login, you can send any commands as if you communicates with host directly. When you want to quit, type \"+++\" and then the script exits from interact mode and runs logout routine. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/a-telnet-client-using-expect.html","loc":"http://leetschau.github.io/a-telnet-client-using-expect.html"},{"title":"Use laptop as wifi hotspot","text":"Your laptop used as wifi hotspot have to connect with internet with wired connection . see http://www.howtogeek.com/116409/how-to-turn-your-ubuntu-laptop-into-a-wireless-access-point/ for details.","tags":"Tech","url":"http://leetschau.github.io/use-laptop-as-wifi-hotspot.html","loc":"http://leetschau.github.io/use-laptop-as-wifi-hotspot.html"},{"title":"Wildcards in Spawn Command","text":"The following script works fine. #!/usr/bin/expect spawn bash -c \"ls -l *.exp\" expect eof Questions Why I can't remove \"expect eof\"? Why I can't remove \"bash -c\"?","tags":"Tech","url":"http://leetschau.github.io/wildcards-in-spawn-command.html","loc":"http://leetschau.github.io/wildcards-in-spawn-command.html"},{"title":"Spawn and Expect","text":"Run this script: #!/usr/bin/expect spawn ls -l expect \"aaa\" puts \"bbb\" expect \"bbb\" you will get a spawn_id? When \"ls -l\" ends, it send a eof to expect script process, this signal canceled \"expect aaa\"?","tags":"Tech","url":"http://leetschau.github.io/spawn-and-expect.html","loc":"http://leetschau.github.io/spawn-and-expect.html"},{"title":"Subclipse Report \"Unable to load default svn client\" on Ubuntu","text":"Scenario: When checkout codes in Juno SR2 with svn plugin subclipse 1.10.x, it reports \"unable to load default svn client\", and checkout failed. Solution: There is a bug in this version. Remove this plugin, and install 1.6.x (I use 1.6.18 at http://subclipse.tigris.org/files/documents/906/49028/site-1.6.18.zip, unzip it into dropins folder of $ECLIPSE_HOME). Restart Eclipse, everything goes fine. I install a svn repository at 10.0.7.141:/opt/svnRepo.","tags":"Tech","url":"http://leetschau.github.io/subclipse-report-unable-to-load-default-svn-client-on-ubuntu.html","loc":"http://leetschau.github.io/subclipse-report-unable-to-load-default-svn-client-on-ubuntu.html"},{"title":"Exercies of Chapter 3 in \"Exploring Expect\"","text":"1 ~ 3: ftp.uu.net has disappeared since 2006 (https://en.wikipedia.org/wiki/UUNET). 4: method 1 (no timeout): login; send \"ls\"; save expect_out(buffer) to buf; expect \"ftp>\"; parse buf, if there is \"pub\", send \"cd pub\"; \"interact\"; method 2 (timeout): login; send \"ls\"; expect \"pub*send OK.\" then send \"cd pub\"; if timeout, interact;","tags":"Tech","url":"http://leetschau.github.io/exercies-of-chapter-3-in-exploring-expect.html","loc":"http://leetschau.github.io/exercies-of-chapter-3-in-exploring-expect.html"},{"title":"Notes about \"Exploring Expect\"","text":"Chapter 3 Section \"The expect Command\": expect_out(0,string) can NOT be written as \"expect_out(0, string)\", blank before \"string\" will make a mistake; Concurrent matching: expect { item1 { send cmd1 } item2 { send cmd2 } } In spawn process, use \"\\r\" as the return key in send command; Chapter 5 Section \"Using Parentheses For Feedback\" give a clear and concise explanations of how to get feedback in expect. 1 2 3 4 5 6 7 8 9 10 # !/ usr / bin / expect set timeout 60 expect - re \" a(.*)c \" send \" expect_out(buffer) = ${expect_out(buffer)} \\n \" send \" expect_out(0,string) = ${expect_out(0,string)} \\n \" send \" expect_out(1,string) = ${expect_out(1,string)} \\n \" expect - re \" e \" send \" expect_out(buffer) = ${expect_out(buffer)} \\n \" send \" expect_out(0,string) = ${expect_out(0,string)} \\n \" send \" expect_out(1,string) = ${expect_out(1,string)} \\n \" Run this script, input \"junk abcbcdef\" and return, will produces: $ ./feedback.exp junk abcbcdef expect_out ( buffer ) = junk abcbc expect_out ( 0 ,string ) = abcbc expect_out ( 1 ,string ) = bcb expect_out ( buffer ) = de expect_out ( 0 ,string ) = e expect_out ( 1 ,string ) = bcb You can see value of \"expect_out(...)\" will be refreshed when a expect matches (expect \"e\"). \"buffer\" are all things from last buffer (\"...cbc\") to this match (\"e\"), which is \"de\" in this case. \"0,string\" means all matching strings (note \"0, string\" will raise a exception for the redundant blank). \"1,string\" means the first subgroup of \"0,string\". If there is no subgroup (expressed as parentheses) in current match, (1,string) remains last value (\"bcb\" in this case). Even \"f\" at the end of input has been sent to expect, it will not be added to \"buffer\", because it's not a part of the current match. Chapter 6 exp_continue is useful in many circumstances. See its code example in section \"Matching Multiple Times\" in chapter 6 and section \"Prompting For A Password On Behalf Of A Program\" in chapter 8; Chapter 7 & 8 some frequently used command: log_file : write output of spawned process to a file ; log_user : send output of spawned process to / not to user ; send_user : expect script send messages to user ; expect_user : continue communicating with the user even after a process has been spawned ; send : expect script send messages to spawned process ; send_log : only write to log ( without writing to stdout ) ; send_error : expect script send messages to stderr ; exp_internal : enable / disable internal diagnostics to stdout or log file ( see section \" Logging Internal Diagnostics \" ) ; proc sendexpect in section \"The send_error Command\" is useful; right-wrong-timeout switch in section \"The expect_user Command\": expect { right { } wrong { send_error error_message exit 1 } timeout { send_error \" time out! \" exit 1 } } A program switch between character and line mode. Notice the usage of \"stty raw\": send_user \" Now we are in line mode. You can use backspace to re-input. \\n \" send_user \" Continue? y or n \\n \" expect_user - re \" y|n \" send_user \" you press $expect_out(0,string) \\n \" stty raw send_user \" Now we are in character mode. You have no chance to re-input. \\n \" send \" Continue? Enter y or n: \\r \\n \" expect - re \" y|n \" send_user \" \\n you press $expect_out(0,string) \" stty should be executed during times when the user is not typing, such as before a prompt rather than after, otherwise there is possibility of losing characters while switching modes. See the end of section \"Line Versus Character-Oriented And Other Terminal Modes\"; In the modified version of su2 in section \"Echoing\", I modified \"# \" to \" #\" in the last 3rd line, because on my platform (Mint Xfce 14) there are no space after \"#\" in the prompt of root user; the get password procedure in section \"Echo\" is a must-have tool; If you want exact Bourne-shell semantics, the simplest way is to call system. See section \"The system Command\"; Chapter 9 arguments experiment after #! The echo.exp: version 1: 1 2 3 4 5 # !/ usr / bin / expect set argc [ llength $a rgv ] for { set i 0 } {$ i < $a rgc } { incr i } { puts \" arg $i: [lindex $argv $i] \" } version 2: 1 2 #!/ usr / bin / expect -- ... version 3: 1 2 #!/ usr / bin / expect - f ... Now run command ./echo.exp -c \"puts hello\" 1 2 3 , the output is: version 1: arg 0 : - c arg 1 : puts hello arg 2 : 1 arg 3 : 2 arg 4 : 3 version 2: arg 0 : - c arg 1 : puts hello arg 2 : 1 arg 3 : 2 arg 4 : 3 version 3: hello arg 0 : 1 arg 1 : 2 arg 2 : 3 So it is clear that only when \"-f\" is specified, \"-c\" means \"take my arguments as a script\". Otherwise \"-c\" will be treated as a common arguments of the script. \"--\" explicitly stop any arguments interpreting. Chapter 17 this chapter describes how to make expect script a server;","tags":"Tech","url":"http://leetschau.github.io/notes-about-exploring-expect.html","loc":"http://leetschau.github.io/notes-about-exploring-expect.html"},{"title":"Exercies of Chapter 2 in \"Exploring Expect\"","text":"Write a procedure to reverse a string. If you wrote an iterative solution, now write a recursive solution or vice versa. #!/usr/bin/tclsh # iterative solution: proc rev_str_iter { input } { for {set idx [string length \\(input]} {\\) idx > 0} {incr idx -1} { append res [string index $input [expr $idx-1]] } return $res } # recursive solution: proc rev_str_recur { input } { set len [string length $input] if {[expr $len - 1] > 0} { append res [rev_str_recur [string range $input 1 end]] \\ [string index $input 0] } else { set res $input } return $res } set m \"abcdefg\" set n [rev_str_iter $m] puts $n set n2 [rev_str_recur $m] puts $n2 Repeat the previous exercise but with a list instead of a string. #!/usr/bin/tclsh # iterative solution: proc rev_list_iter { input } { for {set idx [llength \\(input]} {\\) idx > 0} {incr idx -1} { lappend res [lindex $input [expr $idx-1]] } return $res } # recursive solution: proc rev_list_recur { input } { set len [llength $input] if {[expr $len - 1] > 0} { set res [concat [rev_list_recur [lrange $input 1 end]] [lindex $input 0]] } else { set res $input } return $res } set m \"a b c d e g\" set n [rev_list_iter $m] puts $n set n2 [rev_list_recur $m] puts $n2 Write a procedure to rename all the files in a directory ending with .c to names ending in \".cc\". #!/usr/bin/tclsh foreach file_name [glob *.c] { file rename $file_name [append file_name c] } Write a procedure that takes a list of variable names and a list of values, and sets each variable in the list to the respective value in the other list. Think of different alternatives to handle the case when the lists are of different lengths. #!/usr/bin/tclsh proc assign {names values} { if {[llength \\(names] > [llength $values]} { set len [llength $values] } else { set len [llength $names] } for {set idx 0} {\\) idx<$len} {incr idx} { set var_name [lindex $names $idx] set $var_name [lindex $values $idx] puts [concat $var_name = [set $var_name]] } } set names \"za bb ee dk\" set values \"11 32 53 94 5\" assign $names $values if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/exercies-of-chapter-2-in-exploring-expect.html","loc":"http://leetschau.github.io/exercies-of-chapter-2-in-exploring-expect.html"},{"title":"Tcl Shell Notes","text":"Start origin tcl shell: tclsh (apt-get install tcl); Start tcl shell with command history shortcuts (up arrow for previous command and other powerful command line shortcuts like alt+backspace, brackets matching, etc. on Ubuntu): rlwrap -c tclsh; For efficiency, add alias tcl=\"rlwrap -c tclsh\" to ~/.zshrc; Note: rlwrap is readline wrapper;","tags":"Tech","url":"http://leetschau.github.io/tcl-shell-notes.html","loc":"http://leetschau.github.io/tcl-shell-notes.html"},{"title":"Copy Full Path Name of a File in Ranger","text":"After version 1.4.0, ranger add a command yp to copy full path name of the selected file with xsel (if there's no xsel on your system, install it with apt ). Install xsel ( apt-get install xsel ), and modify command of yp to copy the slected filename to system clipboard instead of only the PRIMARY clipboard: Create file $HOME/.config/ranger/rc.conf , add the following line: map yp shell -d echo -n %d/%f | xsel -i -p -b . Or modify the system-level config file (not recommended): in file /etc/ranger/config/rc.conf , modify map yp shell -d echo -n %d/%f | xsel -i to: map yp shell -d echo -n %d/%f | xsel -i -p -b . Add -p -b to command yd and yn as well. Here -p means copy to PRIMARY clipboard, while -b means copy to system clipboard. Now use yp (or yn ) to copy full path (or filename), and Ctrl-Shift-v (in console) or Ctrl-v (in GUI app) to paste. Note: See manpage of xsel for the concept of 3 different clipboard PRIMARY, SECONDARY and CLIPBOARD of X windows.","tags":"Tech","url":"http://leetschau.github.io/copy-full-path-name-of-a-file-in-ranger.html","loc":"http://leetschau.github.io/copy-full-path-name-of-a-file-in-ranger.html"},{"title":"CFEngine Notes","text":"Based on: CFEngine Quick Start Guide Use 10.21.3.23 as cfhub (server), 10.21.3.31 as cfhost (client); Install cfengine on both cfhub and cfhost: i. download cfengine-community_3.5.1-3_i386.deb; i. Ensure OpenSSL, BerkeleyDB and PCRE are installed: apt-get install libdb4.* libpcre3 libssl , so weired that this can not be excecuted in zsh, but bash is ok; i. sudo dpkg --install cfengine-community_3.5.1-3_i386.deb ; Start policy server: /var/cfengine/bin/cf-agent -B 10.21.3.23 ; Start client: same as above; On cfhub: create a file cftest1.cf at /var/cfengine/masterfiles; Modify /var/cfengine/masterfiles/promises.cf file; ... Uninstall CFEngine3 $ sudo apt-get purge cfengine-community $ sudo rm -rf /var/cfengine bcfg2 Use 10.21.3.31 as server: apt-get install bcfg2-server ; Use 10.21.3.23 as client: apt-get install bcfg2 ; Initialize your repository cdist install python3: apt-get install python3 ; git clone git://git.schottelius.org/cdist ;","tags":"Tech","url":"http://leetschau.github.io/cfengine-notes.html","loc":"http://leetschau.github.io/cfengine-notes.html"},{"title":"Run Interactive Shell Command in Erlang","text":"The following simple Erlang netcat client demonstrates the communication between Erlang program and external OS process. The rc.erl start a netcat client to connect to a netcat server, and send some message to the server at a given time. Create Erlang server; -module(rc). -export([cmd/1]). cmd(Cmd) -> Opt = [stream, exit_status, stderr_to_stdout, eof], P = open_port({spawn, Cmd}, Opt), get_data(P, [], 0). get_data(P, Sofar, 3) -> port_command(P, \"abcd\"), get_data(P, Sofar, 4); get_data(P, Sofar, Cnt) -> receive {P, {data, Bin}} -> io:format(\"rec Bin: ~p, Cnt=~p~n\", [Bin, Cnt]), get_data(P, [Bin|Sofar], Cnt+1); {P, eof} -> port_close(P), receive {P, {exit_status, N}} -> {N, lists:reverse(Sofar)} end end. Start netcat server: run command nc -l 3333 at host 10.21.3.31; Start netcat client: $ erl ... 1> c(rc). {ok,rc} 2> rc:cmd(\"nc 10.21.3.31 3333\"). Send message from server to client: press \"1 2 3 4 &#94;C\", client output as follows: rec Bin: \"1\\n\", Cnt=0 rec Bin: \"2\\n\", Cnt=1 rec Bin: \"3\\n\", Cnt=2 rec Bin: \"4\\n\", Cnt=4 {0,[\"1\\n\",\"2\\n\",\"3\\n\",\"4\\n\"]} 3> When you press after 3, you can receive \"abcd\" from netcat client. The pattern of Erlang-Shell communication is: Use \"open_port\" to start a external shell process; Use \"receive\" clause to receive output of the process; Use \"port_command\" to send message to process; Use \"port_close\" to close the shell; Notes: For non-interactive shell command, os:cmd/1 is a better choice; If you want to catch the event that the peer close actively, add \"eof\" into option list of open_port; If you want to catch the exit value of the shell process, add \"exit_status\" to option list of open_port; Not specify \"in\" in option list of open_port when you want to send the process some message, or a \"ebadf\" exception arises, because \"in\" means this process only used for input, and \"ebadf\" means the file is not open for reading or writing. Erlang port communicate with python is a good demonstration of erlang calling a python script; Chapter 12 of \"Programming Erlang\" also concentrate Erlang interfacing techniques.","tags":"Tech","url":"http://leetschau.github.io/run-interactive-shell-command-in-erlang.html","loc":"http://leetschau.github.io/run-interactive-shell-command-in-erlang.html"},{"title":"My vimrc","text":"Plugins used in this file includes: FuzzyFinder, L9, bufexplorer (v7.4.2), vim-airline , vim-markdown . nerdcommenter is a must-have plugin. For html editing, xmledit is a good helper. set nocompatible set clipboard = unnamedplus execute pathogen # infect () call pathogen # helptags () call pathogen # incubate () noremap < left > < C - w > h noremap < right > < C - w > l noremap < up > < C - w > k noremap < down > < C - w > j nnoremap < F2 > : set wrap !< CR > set nobackup set noswapfile colo ron syntax on set incsearch set et set sw = 2 set ts = 2 set nu set nowrap nnoremap < C - o > : FufCoverageFile < CR > \" status line set laststatus=2 let g:airline_section_c='%F' \" markdown let g : vim_markdown_initial_foldlevel = 2 filetype plugin indent on","tags":"Tech","url":"http://leetschau.github.io/my-vimrc.html","loc":"http://leetschau.github.io/my-vimrc.html"},{"title":"Hadoop 1.2.1 Up and Running","text":"Pseudo-distributed Mode Download Oracle jdk-6u45-linux-i586.bin from Oracle website. Openjdk is unsuitable here because some package like sun.net.dns.ResolverConfiguration only exists in rt.jar of Oracle jdk; Install (run ./jdk-6u45-linux-i586.bin under ~/apps) this jdk at ~/apps with current user (do not install it into /opt with root user, because this will cause access restriction of rt.jar of jdk); Add $JAVA_HOME and $CLASSPATH into /etc/profile and re-log into OS to validate: export JAVA_HOME =/ home / lichao / apps / jdk1 . 6 . 0 _45 export PATH = $ PATH : $ JAVA_HOME / bin export CLASSPATH = $ CLASSPATH : $ JAVA_HOME / lib : $ JAVA_HOME / jre / lib Follow Single Node Setup . Verified this morning: 2013-8-9, Linux Mint 14 32bit, Hadoop 1.2.1. Distributed Mode Create user hadoop in host 23, 31, 49 and 139; Create apps and warez folder in home directory on all hosts above; Copy jdk-6u45-linux-i586.bin from Oracle and hadoop-1.2.1.tar.gz to warez directory to all above hosts; Unzip jdk6u45 and hadoop to ~/apps; modify $JAVA_HOME as \"/home/hadoop/apps/jdk1.6.0_45\" in ~/apps/hadoop-1.2.1/conf/hadoop-env.sh; 1.","tags":"Tech","url":"http://leetschau.github.io/hadoop-121-up-and-running.html","loc":"http://leetschau.github.io/hadoop-121-up-and-running.html"},{"title":"Build Hadoop Develop Environment","text":"Prerequisites Download Oracle jdk-6u45-linux-i586.bin from Oracle website. Openjdk is unsuitable here because some package like sun.net.dns.ResolverConfiguration only exists in rt.jar of Oracle jdk; Install (./jdk .bin) this jdk at ~/apps/jdk with current user (do not install it into /opt with root user, because this will cause access restriction of rt.jar of jdk); Add $JAVA_HOME and $CLASSPATH into /etc/profile and re-log into OS to validate; Add this jdk to eclipse (Preferences -> Install JREs); Method 8-10 Follow Working with Hadoop under Eclipse make sure your maven version is 3.x (mvn --version), if not: sudo apt-get remove maven2 sudo apt-get update sudo apt-get install maven git clone git://git.apache.org/hadoop-common.git () mvn install -DskipTests mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true Method 8-9 Create a Java Project in Eclipse, modify default output folder to $PROJECT_HOME/out (because \"bin\" is a script folder in hadoop source pack); Exclude src from source folder and create \"lib\", \"conf\" folder under $PROJECT_HOME; Import $HADOOP_HOME/src, lib, conf into $PROJECT_HOME; Add all jar files under lib to build path; Add ant.jar to build path; Add mapred, tools, ant, core, hdfs under src folder as source folder; Verify modify config files; run hadoop","tags":"Tech","url":"http://leetschau.github.io/build-hadoop-develop-environment.html","loc":"http://leetschau.github.io/build-hadoop-develop-environment.html"},{"title":"Windows上安装Linux后Grub目录中没有Windows启动项的修复方法","text":"启动Linux后，执行 sudo update-grub ，此命令将重新扫描启动区，输出更新结果，并更新/boot/grub/grub.cfg文件。 今天在联想笔记本上执行此命令后，找回了之前安装的Windows 7启动项。","tags":"Tech","url":"http://leetschau.github.io/windowsshang-an-zhuang-linuxhou-grubmu-lu-zhong-mei-you-windowsqi-dong-xiang-de-xiu-fu-fang-fa.html","loc":"http://leetschau.github.io/windowsshang-an-zhuang-linuxhou-grubmu-lu-zhong-mei-you-windowsqi-dong-xiang-de-xiu-fu-fang-fa.html"},{"title":"Solution of Cobertura Exception \"touchJump\" when Unit Test","text":"During unit test I encounter a \"java.lang.NoSuchMethodError: net.sourceforge.cobertura.coveragedata.ClassData.touchJump(IIZ)V\" exception. I find there are 2 cobertura.jar in classpath. That jar in /usr/share/ant/lib is v1.9.2, while in ./lib/ is 1.8.1. When I delete the jar in ./lib, there is a \"java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/HasBeenInstrumented\" exception. Then I copy cobertura.jar from /usr/share/ant/lib to ./lib, everything goes fine. Solution of \"local class incompatible\" Problem: local class incompatible: stream classdesc serialVersionUID = 2, local class serialVersionUID = 2152686494816595840 Solution: use unzip -q -c cobertura.jar META-INF/MANIFEST.MF , I found the version of this jar is 1.8, while that in other projects is 1.9.1. So I copy the jar of version 1.9.1 to replace that of version 1.8, everything goes fine.","tags":"Tech","url":"http://leetschau.github.io/solution-of-cobertura-exception-touchjump-when-unit-test.html","loc":"http://leetschau.github.io/solution-of-cobertura-exception-touchjump-when-unit-test.html"},{"title":"Subversion Command Line Notes","text":"在Ubuntu上安装Subversion: sudo apt-get install subversion . 用Subversion客户端添加新文件的流程是： 检出Subversion库中的文件夹 svn co repo_url ； 将要添加的新文件放入 repo_url 中： mv newFile repo_url 将新文件加入版本控制系统： svn add newFile 提交新文件： svn ci -m 'some comments' newFile 常用命令 svn help : 列出所有可用命令，svn help 查询某个命令的使用方法。 svn mkdir -m \"some notes\" <svn_url> : 在svn_url指定的位置建立文件夹，一般用于建立项目根目录； svn import -m \"some notes\" <local_folder_to_be_imported> <svn_url> : 注意只有文件夹下的内容（文件和文件夹）会被导入，文件夹本身不会被导入， 所以如果想导入当前目录下的testProject文件夹到svn根目录下， 应执行下面的指令（testProject要写两次）： svn import -m \"initial import project\" testProject svn://10.0.7.141/testProject 常用的用法是导入当前文件夹下的所有文件，这时 不写，直接写成： svn import -m \"...\" svn://10.0.7.141/testProject . svn info ：显示当前repo对应的SVN路径、版本号、用户名等； svn st : 显示文件改动状态； svn ci -m \"...\" <filename> : 提交改动，首先用 svn st 查看改动情况；如果没有配置默认用户， 增加 --username <user> 指定使用哪个用户提交； svn co svn://localhost/Trunk/Project1 [targetFolder] : 将repo中Project1的内容检出到当前目录的targetFolder文件夹中； svn log -l 3：显示当前目录对应的repo文件夹的最近3次提交，可以在log后面增加目标repo地址指定要显示的目标； svn log - l 3 < file_name > : 针对某一个文件的最近 3 次提交； svn ls <svn://repoPath [-R]> : 列出repo中的内容（加 -R 表示包含子目录内容）； svn add <file> : 将svn st查到的未纳入版本控制的文件加入到版本控制中； svn up ：更新working directory，当在working dir中提交版本后， 需要用 svn up 更新svn客户端库，才能在svn log中看到新提交的版本； update之前先用status查看一下本地有没有未提交的修改，否则易造成冲突； svn diff <file_name> : 比较head revision与本地working copy之间的差异： svn diff -r 1345:1346 <file_name> : 比较文件 file_name 的r1345版本与 r1346版本的区别（先用svn log ... 确定要比较的版本号； svn move <source> <destination> svn revert <file_name> : If you add some file but not commit yet, and you find it's useless and want to remove it,you can use this command; svn cat [-r<version_number>] <file_path_on_server> svn blame <file_name> : show author and revision information of each line; svn log [-q] [file_name] : show author and revision history of the file; svn rm $( svn status | sed -e '/&#94;!/!d' -e 's/&#94;!//' ) : 将已被物理删除的文件标记为删除 svn add --force path/to/dir : 将所有新文件 add 到svn中 设置忽略列表 一次性设置 svn propset svn:ignore folder . ： 将folder放入ignore列表中；如果多次使用此命令，后面的 会覆盖前面的（而不是追加）； 如果需要忽略多个项目，用多行命令，每行一个忽略元素： svn propset svn:ignore \"folder1 folder2 folder3\" . 列出当前的忽略列表： svn propget svn:ignore 不同于git， svn:ignore 属性不是使用普通文件（.gitignore），而是保存在版本控制系统中 （项目的.svn目录中的某处），其他人更新代码时也会得到相同的ignore属性， 所以这个ignore设置对所有人都有效。 编辑忽略列表 svn propedit svn : ignore . 这样会打开一个文本编辑器，内容是当前的忽略列表（每行一个元素），编辑之后保存即可修改忽略列表。 用\"echo $EDITOR\"查看默认编辑器，用\"export EDITOR=vi\"将其改为vi； 查看默认用户 ~/.subversion/auth/svn.simple下的文件中保存着默认用户名，如果想更改默认用户，删掉这个保存默认用户的文件，然后使用一个svn命令，在提示中输入用户名；","tags":"Tech","url":"http://leetschau.github.io/subversion-command-line-notes.html","loc":"http://leetschau.github.io/subversion-command-line-notes.html"},{"title":"Use ArtifactDeployer Plugin to Publish Product Artifacts","text":"Jenkins will cleanup workspaces of jobs for some (unknown) reasons. So we have to save them to some other place as product publish repository. ArtifactDeployer plugin is perfect for this purpose. Installation Jenkins -> Manage Jenkins -> Manage Plugins -> Available, check \"Jenkins Artifact Deployer Plug-in\", then click \"Install without restart\". If the Jenkins server can't access internet, you can use http proxy to achieve install online; Usage In the \"Configure\" page of job GCP-6.20, add a post-build action \"[ArtifactDeployer] Deploy artifacts from workspace to remote directories\". Enter \"* /build/ .zip\" in \"Files to deploy\", and \"/home/bvt/.jenkins/userContent/GCP\" in \"Remote directory\". And check \"Clean-up remote directory before deployment\" and \"Delete remote artifacts when the build is deleted\" in \"Advanced\". You can add more artifacts by click \"Add\" button. Build job GCP-6.20; After build, you can get artifacts at http://10.0.2.74:8088/userContent/GCP, or in the home page of this job ; Note: It seems that ArtifactDeployer can only save artifacts somewhere in the bvt host. There is a \"Publish Over\" plugin which can send artifacts to remote hosts via ssh(sftp) or ftp protocol.","tags":"Tech","url":"http://leetschau.github.io/use-artifactdeployer-plugin-to-publish-product-artifacts.html","loc":"http://leetschau.github.io/use-artifactdeployer-plugin-to-publish-product-artifacts.html"},{"title":"Jave IDE on Xfce","text":"Eclipse sucks. Tooltips in text editor disappears. Netbeans is ok. IntelliJ is ok. I will use this one as my Hadoop IDE. Tooltips looks ok by adding \"auto.show.quick.doc=true\" at file $INTELLIJ_HOME/bin/idea.properties. See \"http://stackoverflow.com/questions/6615516/intellij-tooltip-shows-javadocs\".","tags":"Tech","url":"http://leetschau.github.io/jave-ide-on-xfce.html","loc":"http://leetschau.github.io/jave-ide-on-xfce.html"},{"title":"Jenkins Backup and Restore","text":"Backup: cd $ JENKINS_HOME tar zcf jenkins - full - 16 . 11 . 24 . tar . gz *` Restore: deploy a Jenkins container; When asking for plugins to install, choose \"choose plugins myself\", unselect all, and click 'install' button; Stop Jenkins server; Extract Jenkins backup tarball into $JENKINS_HOME: cd $JENKINS_HOME tar zxf jenkins-full-16.11.24.tar.gz` chown -R $USER:$USER ./ Start Jenkins server; --- old --- Backup Working directory: We will backup all files into folder \"bvtBackup\" in current working directory. In this case the CWD is ~/docs, so all files will be backuped into ~/docs/bvtBackup. Backup Job Configuration Files rsync - rtvu -- include = ' config . xml ' -- exclude = ' * */ * */ ** ' bvt @10.0.2.74 :/ home / bvt / . jenkins / jobs / bvtBackupjobs / Here \"--exclude=' / /**'\" limits the recursive depth is 2 (all subdirectories of \"jobs\" deeper than 2 are ignored). Backup Plugins rsync - rtvu -- exclude = '*/' bvt @10.0.2.74 :/ home / bvt / . jenkins / plugins / bvtBackup / plugins / Exclude all directories, because they will be automatically extracted from .jpi(or .hpi) files when Jenkins startup. Backup System Level Configurations rsync - rtvu -- include = ' * . xml ' -- exclude = '*' bvt @10.0.2.74 :/ home / bvt / . jenkins / bvtBackup / Here we can see that option include has higher priority than exclude. Other Things not Backuped User information, stored in \"users\" directory. And some security stuff. Put them all together For efficiency, we save all above actions in one script bvt_backup.sh in ~/docs, and we can simply sync all above files by run this script: 1 2 3 4 #!/bin/sh rsync -rtvu --include = 'config.xml' --exclude = '**/**/**' bvt@10.0.2.74:/home/bvt/.jenkins/jobs/ bvtBackup/jobs/ rsync -rtvu --exclude = '*/' bvt@10.0.2.74:/home/bvt/.jenkins/plugins/ bvtBackup/plugins/ rsync -rtvu --include = '*.xml' --exclude = '*' bvt@10.0.2.74:/home/bvt/.jenkins/ bvtBackup/ Restore Restore to a Running Jenkins Server Copy modified new configuration files to the home directory of Jenkins; java -jar jenkins-cli.jar -s http://localhost:8088 reload-configuration Start a New Jenkins Server from Backuped Files Copy above file to the home directory of Jenkins; Specify Jenkins home directory: export JENKINS_HOME=...; Start Jenkins server: java -jar jenkins.war","tags":"Tech","url":"http://leetschau.github.io/jenkins-backup-and-restore.html","loc":"http://leetschau.github.io/jenkins-backup-and-restore.html"},{"title":"搭建Ubuntu封闭局域网","text":"机器的网线插在路由器的lan口上 vi /etc/network/interfaces auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 Ref: http://www.ha97.com/4895.html","tags":"Tech","url":"http://leetschau.github.io/da-jian-ubuntufeng-bi-ju-yu-wang.html","loc":"http://leetschau.github.io/da-jian-ubuntufeng-bi-ju-yu-wang.html"},{"title":"目录已存在导致Jenkins项目构建失败的解决方法","text":"Jenkins中的项目在下载源代码时，如果Working Directory中存在未加入版本控制的文件或者目录已经存在于SVN库中，会导致更新失败，整个构建终止，解决方法是将SVN的检出策略由\"Use 'svn upate' as much as possible\"改为\"Emulate clean checkout by first deleting unversioned/ignored files, then 'svn update'\"。","tags":"Tech","url":"http://leetschau.github.io/mu-lu-yi-cun-zai-dao-zhi-jenkinsxiang-mu-gou-jian-shi-bai-de-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/mu-lu-yi-cun-zai-dao-zhi-jenkinsxiang-mu-gou-jian-shi-bai-de-jie-jue-fang-fa.html"},{"title":"Increase Disk Size of Virtualbox Machine","text":"Goto virtual disk folder and run command \"VBoxManage modifyhd .vdi --resize new_size\". Note that the parameter following \"--resize\" is the total size of the disk, not the size to be added. Its unit is MB: ┌─[chad@chadpc527] - [~/VirtualBoxVMs/Win7Office] - [2013-07-29 03:43:11] └─[0] VBoxManage modifyhd Win7Office.vdi --resize 20480 0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100% This command runs really fast(it finished in 3 or 4 seconds). The initial size of this disk is 10 GB. But after installation of windows 7 and office 2010, 8.7 GB was consumed. So I want enlarge the disk size to 20 GB, which is 20480 MB. Open this virtual machine(here is a windows 7) and right click \"My Computer\", choose \"Manage\"; Click \"Disk Manage\" on left panel. You will notice some blank space next to your C drive (which means the space addition operation succeed); Right click C drive in right panel and choose \"Extend Volume\". Follow the wizard to increase space of C drive. Ref: http://jonmifsud.com/blog/increase-virtualbox-disk-size/","tags":"Tech","url":"http://leetschau.github.io/increase-disk-size-of-virtualbox-machine.html","loc":"http://leetschau.github.io/increase-disk-size-of-virtualbox-machine.html"},{"title":"Synchronize .vimrc with bitbucket.org","text":"I created a vimrc repository at bitbucket.org. When the .vimrc file changes, verify it locally(see note 1), then synchronize it manually(see note 2). Then commit the code changes online. When synchronizing .vimrc at other host, download .vimrc with git clone https://leechau@bitbucket.org/leechau/vimrc.git and overwrite the original one. Note 1: how to verify .vimrc fast: Open two terminal window, open .vimrc in the first window, and open a normal file in another; Edit .vimrc, save it; Reload .vimrc file in the second window with shortcut \",sv\", see the result; Repeat this \"edit - save - reload - evaluation\" loop until it's ok. Note 2: synchronize file manually at bitbucket.org Open https://bitbucket.org/leechau in web browser and login; Repositories: vimrc -> Source -> .vimrc -> click \"Edit\" button at upper-right corner of source code panel;","tags":"Tech","url":"http://leetschau.github.io/synchronize-vimrc-with-bitbucketorg.html","loc":"http://leetschau.github.io/synchronize-vimrc-with-bitbucketorg.html"},{"title":"Diff Notes","text":"Compare Files Remotely with Diff For example, compare ~/.vimrc at different hosts: ssh bvt@10.0.2.74 \"cat /home/bvt/.vimrc\" | diff -y --suppress-common-lines - .vimrc where -y is abbr. of \"--side-by-side\". Compare Files in Two Directories Usually we use the following command to compare source files in two directories: Find out which files are different ┌─[lichao@lichao480] - [~/docs/erlang/processquest-1.0.0/apps] └─[$] diff -rq sockserv-1.0.0/src sockserv-1.0.1/src Files sockserv-1.0.0/src/sockserv_serv.erl and sockserv-1.0.1/src/sockserv_serv.erl differ then use vimdiff to show detailed differences between these files. -r means \"recursively\", -q means only report different files. Print out differences of files directly ┌─[lichao@lichao480] - [~/docs/erlang/processquest-1.0.0/apps] - [1672] └─[$] diff -y --suppress-common-lines sockserv-1.0.0/src sockserv-1.0.1/src diff -y --suppress-common-lines sockserv-1.0.0/src/sockserv_serv.erl sockserv-1.0.1/src/sockserv_serv.erl > gen_tcp:close(S#state.socket), terminate(normal, #state{socket=S}) -> | terminate(normal, _State) -> gen_tcp:close(S); | ok;","tags":"Tech","url":"http://leetschau.github.io/diff-notes.html","loc":"http://leetschau.github.io/diff-notes.html"},{"title":"Path Settings in Ant","text":"classpath settings classpath is nested element of \"javac\" and \"junit\" task. You can add \"pathelement\" and \"path\" in classpath: \\({instrumented.class.dir}\"/> <pathelement location=\"\\) {src.class.dir}\"/> javac settings for multiple src directories option 1, multiple nested src tags: \\({src.class.dir}\" encoding=\"UTF-8\" debug=\"true\" classpathref=\"lib.path\" failonerror=\"true\"> <src path=\"\\) {src1.dir}\"/> option 2, multiple includes items: \\({basedir}\" destdir=\"\\) {src.class.dir}\" encoding=\"GBK\" debug=\"true\" classpathref=\"lib.path\" failonerror=\"true\" includes=\"src/**,common/**,map/**\" > option 2 is better, because if you use src dirs somewhere else, you can set \"src/ ,common/ ,map/**\" as a property, and reuse this property. Path settings fileset in path pathelement in path if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/path-settings-in-ant.html","loc":"http://leetschau.github.io/path-settings-in-ant.html"},{"title":"Open Recent Documents in Mint Xfce 14","text":"Add \"Places\" to panel. There is a \"Recent Documents\" in it. Recent Document will be add in launcher of Mint 15.","tags":"Tech","url":"http://leetschau.github.io/open-recent-documents-in-mint-xfce-14.html","loc":"http://leetschau.github.io/open-recent-documents-in-mint-xfce-14.html"},{"title":"Build Erlang Application with Rebar","text":"See usage mannul at rebar wiki ; Or you can Download rebar manually at rebar homepage ; Basic usage: Download rebar to project root directory; ./rebar create-app edit source files; ./rebar compile","tags":"Tech","url":"http://leetschau.github.io/build-erlang-application-with-rebar.html","loc":"http://leetschau.github.io/build-erlang-application-with-rebar.html"},{"title":"Clipboard Manager on Xfce","text":"Clipman-plugin sudo apt-get install xfce4-clipman-plugin No config function. No hotkey. Very basic function. But it support 1-step-paste. Parcellite (1.0.2rc5) Installation with apt-get is different with that with Software Manager. That from apt-get seeams working strange, so not use it. Use Software Manager to install it. A GUI and you can config its hotkey. But its a 2-step-paste app (you have to select a item using hotkey, then focus target text editor, then ctrl-v to paste). Parcellite can enable \"copy on selection\" by checking \"Use Primary\" and \"Synchronize clipboards\" in [Preferences -> Behavior -> Clipboards]. But in GUI this feature always causes trouble. For example, we want browse website yahoo, so we first copy text \"www.yahoo.com\", then switch to browser, select all text \"www.baidu.com\" in address bar, then overwrite them with shortcut Ctrl-v. With \"copy on selection\" enabled, when you select \"www.baidu.com\", it's automatically copy to clipboard. So when you press Ctrl-v, you get \"www.baidu.com\" instead of \"www.yahoo.com\". In console environment \"copy on selection\" is convenient, but with tmux, it's unnecessary any more. Glipper (2.4) Install with Software Manager. Behave like Parcellite, you can configure hotkey, but 2-step-paste.","tags":"Tech","url":"http://leetschau.github.io/clipboard-manager-on-xfce.html","loc":"http://leetschau.github.io/clipboard-manager-on-xfce.html"},{"title":"Notes about Emacs","text":"Basics install Emacs 24: sudo apt-get install emacs24 (on Mint) sudo apt install emacs (on Ubuntu 16.4) choco install emacs (on Windows) start emacs GUI: emacs ; start in terminal: emacs -nw (\"NoWindow\"); quit Emacs: C-x C-c . In Evil :q or :x ; ESC is the same with M- . For example, the following actions has the same effect: action A: pressing Alt and x simutaneously; action B: press ESC , release it, then press x show line number: M-x linum-mode run lisp command in emacs: in scratch buffer, input expression, put the cursor at the end of the it, and press C-x C-e ; repeat last command: word completion: M-/ , if the word completed is not your hoped, press again. (see \"3.4. Word Abbreviations\" in \"Learning GNU Emacs\" for more) scroll window: Current window: PgUp/PgDown; Other window: C-M-v/V Help & manual query shortcut of a command: C-h w , for example: C-h w where-is ; query command of a shortcut: C-h k , for example: C-h k C-h k ; list all available command of current buffer: C-h b ; list all Emacs key shortcuts: M-x describe-bindings read Emacs manual in Emacs: M-x info use C-s to search string, keep pressing C-s to cycle through the results. use q to quit. read man page: M-x man command-name cancel command in mini-buffer: C-g File & buffer open an existing file or create a new file buffer: C-x C-f , edit remote files: C-x C-f /user@host:file_path save to file: C-x C-s ; list buffers: C-x C-b ; switch to another (opening) buffer: C-x b ; go to previous/next buffer: C-x followed by Left/Right arrow key; kill current buffer: C-x k ; Panes C-x 1: unsplit window C-x 2: split window horizontally C-x 3: split window vertically C-x o: switch to other pane in split window Editing undo: C-/ bookmarks: Set bookmarks: C-x r m ; List bookmarks: C-x r l you can edit bookmarks in this window, use q to quit; jump to bookmarks: C-x r b ; rename or delete bookmarks: M-x bookmark-... Navigation M-<: move to the beginning of a buffer M->: move to the end of a buffer C-a: move to the beginning of line C-e: move to the end of line C-f: forward character C-b: backward character C-p: down a line C-n: up a line M-f: forward word M-b: backward word Visual mode Shift with any of the navigation key: select and move Ctrl-@ (or M-x set-mark-command ): set a mark for selection Note: C-space not works on Windows Cut & paste C-w: cut C-y: paste C-d: delete character ahead M-d: delete word ahead backspace: delete character behind M-backspace: delete word behind C-k: cut from cursor to end of line Search & replace search: C-s (forward), C-r (backward) find next: C-s or C-r search and replace M-% recursive edit in query-replace: enter recursive mode: C-r, quit recursive mode: C-M-c find files in a directory: M-x find-name-dired, or locate; search text in files under a directory: M-x grep-find; Text search in current folder For example when I want to search the definition of wiki in all .hs files in current folder ( ~/Documents/gitit ): M - x rgrep < RET > &#94; \\ s * wiki \\ s < RET > * . hs < RET > ~/ Documents / gitit < RET > When the current buffer is associated with a .hs file in folder ~/Documents/gitit , and the cursor on the word wiki , rgrep command will provide default value of file type and target folder. You can press key directly: M - x rgrep < RET > &#94; \\ s * wiki \\ s < RET >< RET >< RET > Paredit mode Navigation C-M-b: move backward a sexp on the same level C-M-f: move forward a sexp on the same level C-M-u: move backward up a level (the key u means up ) C-M-n: move forward up a level C-M-p: move backward down a level C-M-d: move forward down a level (the key d means down ) Edit C-M-k: kill sexp under cursor M-S (Alt-Shift-s, or ESC, Shift-s): split sexp at the cursor M-J (Alt-Shift-j): join sexp A and B, the cursor must be put between A and B M-\": doublequote the sexp M-(: wrap the sexp with parenthesis M-?: convolute sexp (this is magical~) Clojure mode M-x cider-jack-in: start repl in a new window; C-c C-k: compile current file; C-x C-e: cider-eval-last-expression, evaluate expression immediately preceding the cursor in the REPL; C-u C-x C-e: prints the result of the evaluation after cursor; C-c M-n: set the namespace of the REPL with the file's namespace;","tags":"Tech","url":"http://leetschau.github.io/notes-about-emacs.html","loc":"http://leetschau.github.io/notes-about-emacs.html"},{"title":"Zip Directories with/without Root Directory","text":"Under directory docs there is a build.xml and a \"tmp\" subdir like this: tmp |-- aaa `-- newdir `-- bbb If you want create a zip file with tmp as the root folder, you should write build.xml like this: <?xml version=\"1.0\" encoding=\"UTF-8\"?> If you only want zip all contents under tmp (without root folder tmp), you should modify build.xml like this: <?xml version=\"1.0\" encoding=\"UTF-8\"?>","tags":"Tech","url":"http://leetschau.github.io/zip-directories-withwithout-root-directory.html","loc":"http://leetschau.github.io/zip-directories-withwithout-root-directory.html"},{"title":"Start Jenkins Server with Specified Home Directory","text":"You can get the current home directory of a Jenkins server at \"Manage Jenkins -> Configure System -> Home Directory\". When starting a Jenkins server, you can specify its home directory through setting environment variable JENKINS_HOME: export JENKINS_HOME =~/ . jenkins then java - jar < jenkins - ver . war > --httpPort=8088 or start as a daemon service: nohup java - jar < jenkins - ver . war > --httpPort=8088 1>jenkins.log 2>jenkins.log & When update Jenkins or install some new plugins, you may find all jobs gone. Don't be panic, it's probably because the home folder are changed (for example, ~/.hudson) by the plugins. Specify home directory as above, all jobs will come back.","tags":"Tech","url":"http://leetschau.github.io/start-jenkins-server-with-specified-home-directory.html","loc":"http://leetschau.github.io/start-jenkins-server-with-specified-home-directory.html"},{"title":"Jenkins Command Line Usage","text":"java -jar jenkins-cli.jar -s http://localhost:8088 help java -jar jenkins-cli.jar -s http://localhost:8088 login --username admin --password admin java -jar jenkins-cli.jar -s http://localhost:8088 list-jobs java -jar jenkins-cli.jar -s http://localhost:8088 reload-configuration // you can modify configuration files directly, then use this command to load your modification;","tags":"Tech","url":"http://leetschau.github.io/jenkins-command-line-usage.html","loc":"http://leetschau.github.io/jenkins-command-line-usage.html"},{"title":"中文SonarQube分析数据Email模板","text":"下面是Jenkins的presend script模板（用${DEFAULT_PRESEND_SCRIPT}引用）的内容： content = / <table width= \"100%\" > <tr> <td bgcolor= \"silver\" valign= \"top\" width= \"25%\" > <h3> 代码总行数 < \\/h3> <h2> ${ getVal ( 'ncloc' ) } < \\/h2> <p> ${ getVal ( 'lines' ) } 行 < \\/p> <p> ${ getVal ( 'statements' ) } 语句 < \\/p> <p> ${ getVal ( 'files' ) } 文件 < \\/p> < \\/td> <td valign= \"top\" width= \"25%\" > <h3> 类 < \\/h3> <h2> ${ getVal ( 'classes' ) } < \\/h2> <p> ${ getVal ( 'packages' ) } 包 < \\/p> <p> ${ getVal ( 'functions' ) } 方法 < \\/p> <p> ${ getVal ( 'accessors' ) } 存取 < \\/p> < \\/td> <td bgcolor= \"silver\" valign= \"top\" width= \"25%\" > <h3> 事务 < \\/h3> <h2> ${ getVal ( 'violations' ) } < \\/h2> <h3> 遵守规则 < \\/h3> <h2> ${ getVal ( 'violations_density' ) } < \\/h2> < \\/td> < \\/tr> <tr><td valign= \"top\" ><p \\ /><hr \\ /><p \\ /> < \\/td> < \\/tr> <tr> <td bgcolor= \"silver\" valign= \"top\" width= \"25%\" > <h3> 注释 < \\/h3> <h2> ${ getVal ( 'comment_lines_density' ) } < \\/h2> <p> ${ getVal ( 'comment_lines' ) } 行 < \\/p> <p> ${ getVal ( 'public_documented_api_density' ) } 注释了的API < \\/p> <p> ${ getVal ( 'public_undocumented_api' ) } 未注释的API < \\/p> < \\/td> <td valign= \"top\" width= \"25%\" > <h3> 重复 < \\/h3> <h2> ${ getVal ( 'duplicated_lines_density' ) } < \\/h2> <p> ${ getVal ( 'duplicated_lines' ) } 行 < \\/p> <p> ${ getVal ( 'duplicated_blocks' ) } 块 < \\/p> <p> ${ getVal ( 'duplicated_files' ) } 文件 < \\/p> < \\/td> <td bgcolor= \"silver\" valign= \"top\" width= \"25%\" > <h3> 代码覆盖率 < \\/h3> <h2> ${ getVal ( 'coverage' ) } < \\/h2> <p> ${ getVal ( 'line_coverage' ) } 行覆盖率 < \\/p> <p> ${ getVal ( 'branch_coverage' ) } 分支覆盖率 < \\/p> < \\/td> <td valign= \"top\" width= \"25%\" > <h3> 单元测试成功 < \\/h3> <h2> ${ getVal ( 'test_success_density' ) } < \\/h2> <p> ${ getVal ( 'test_failures' ) } 失败 < \\/p> <p> ${ getVal ( 'tests' ) } 测试 < \\/p> <p> ${ getVal ( 'test_execution_time' ) } < \\/p> < \\/td> < \\/tr> <tr><td valign= \"top\" ><p \\ /><hr \\ /><p \\ /> < \\/td> < \\/tr> <tr> <td valign= \"top\" width= \"25%\" > <h3> 复杂度 < \\/h3> <h2> ${ getVal ( 'function_complexity' ) } \\/方法 < \\/h2> <h2> ${ getVal ( 'class_complexity' ) } \\/类 < \\/h2> <h2> ${ getVal ( 'file_complexity' ) } \\/文件 < \\/h2> <p> 总数： ${ getVal ( 'complexity' ) } < \\/p> < \\/td> < \\/tr> < \\/table> 详细结果见SonarQube上的 \\({getID()}\">\\) {PROJECT_NAME}项目<\\/a>。 / import groovy.json.JsonSlurper msg . setText ( content . toString (), 'UTF-8' , 'html' ) def getVal ( name ) { sonarUrl = 'http://10.0.2.74:9000/api/resources?resource=${PROJECT_DISPLAY_NAME}&metrics=' + name data = new JsonSlurper () . parseText ( new URL ( sonarUrl ) . getText ()) data . msr [ 0 ] . frmt_val [ 0 ] } def getID () { sonarUrl = 'http://10.0.2.74:9000/api/resources?resource=${PROJECT_DISPLAY_NAME}' data = new JsonSlurper () . parseText ( new URL ( sonarUrl ) . getText ()) data . id [ 0 ] } Note1：使用 msg.setText(string, charset, 'html') 而不是setContent方法，后者无法设置charset，中文显示为乱码； Note2：Groovy中使用/.../表示多行字符串，但内容中的\"/\"需要转义为\"\\/\"； Note3：当使用 \\({PROJECT_NAME}不方便时，可以用\\) 代替，这个值在项目的 Configure -> Advanced Project Options -> Display Name中设置。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/zhong-wen-sonarqubefen-xi-shu-ju-emailmo-ban.html","loc":"http://leetschau.github.io/zhong-wen-sonarqubefen-xi-shu-ju-emailmo-ban.html"},{"title":"User Interface Language of Jenkins and SonarQube","text":"The UI language of Jenkins and SonarQube (previously Sonar) is determined by two things: 1. If your Jenkins/SonarQube server has locale plugin; 2. your browser language settings. Locale Plugin Install Jenkins Locale Plugin or SonarQube Chinese Pack . Then your server has multilingual ability. Browser Language Settings In Chrome, it is [Settings -> Advanced Settings -> Languages -> Languages and spell-checker settings], drag \"English\" upper than \"Chinese\".","tags":"Tech","url":"http://leetschau.github.io/user-interface-language-of-jenkins-and-sonarqube.html","loc":"http://leetschau.github.io/user-interface-language-of-jenkins-and-sonarqube.html"},{"title":"Shutdown a Process Listening at a Port Gracefully","text":"I started a SonarQube process to listening at port 9000. Now I want to restart it for some new installation of plugins. I've forgotten where I installed SonarQube and how start it. The only clue is that it is listening at port 9000. Following is the method to shutdown it gracefully. Find out which process is listening at the port; netstat -tulpn | grep :9000 produces: tcp6 0 0 ::: 9000 ::: * LISTEN 19059 / java So now you know the PID is 19059 and the program name is java. You can verify this by the following commands: fuser 9000 / tcp or lsof - i : 9000 Get detailed information of the PID: ps -ef|grep 19059 and produces: bvt 19059 19057 ... This means 19057 is parent of 19059. So we input ps -ef|grep 19057 and find its parent process is 19001, which parent is 1. Because 1 is init process of OS, we know 19001 is the process we should close. Shutdown a process gracefully: kill 19057 ; Note: you can use \"pwdx [PID]\" to get the current working directory of the PID.","tags":"Tech","url":"http://leetschau.github.io/shutdown-a-process-listening-at-a-port-gracefully.html","loc":"http://leetschau.github.io/shutdown-a-process-listening-at-a-port-gracefully.html"},{"title":"Save/Restore Jenkins Jobs","text":"Add client credentials to Jenkins server: i. Create public key of client machine use ssh-keygen if it doesn't exist, see note \" Login SSH Server without Password \" for details; i. open \"http://10.0.2.74:8088/me/configure\"; i. Add \"SSH Username with password\" in Credentials section with username and password of the client machine; i. In \"SSH Public Keys\", add all content in ~/.ssh/id_rsa.pub on client machine; Verify credentials with java -jar jenkins-cli.jar -s http://10.0.2.74:8088/ who-am-i ; Ref: Section \"Working with Credentials\" in https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI Save Jenkins jobs in xml files: On client machine: java -jar jenkins-cli.jar -s http://10.0.2.74:8088/ get-job ESB > ESB_jenkins.xml Restore Jenkins jobs from xml files: On client machine: java -jar jenkins-cli.jar -s http://10.0.2.74:8088/ create-job ESB < ESB_jenkins.xml ; Ref: http://stackoverflow.com/questions/8424228/export-import-jobs-in-jenkins","tags":"Tech","url":"http://leetschau.github.io/saverestore-jenkins-jobs.html","loc":"http://leetschau.github.io/saverestore-jenkins-jobs.html"},{"title":"Echo Server in Erlang","text":"Here is a basic erlang echo server. - module ( echo ) . - author ( ' Li Chao <lichao1@boco.com.cn> ' ) . - export ( [ listen / 1 ] ) . - define ( TCP_OPTIONS , [ binary , { packet , 0 }, { active , false }, { reuseaddr , true }] ) . listen ( Port ) -> { ok , LSocket } = gen_tcp : listen ( Port , ? TCP_OPTIONS ) , accept ( LSocket ) . accept ( LSocket ) -> { ok , Socket } = gen_tcp : accept ( LSocket ) , spawn ( fun () -> loop ( Socket ) end ) , accept ( LSocket ) . loop ( Socket ) -> case gen_tcp : recv ( Socket , 0 ) of { ok , << \" bye \\n \" >> } -> gen_tcp : send ( Socket , list_to_binary ( \" bye buddy! \" )) ; { ok , Data } -> io : format ( \" ~p~n \" , [ Data ] ) , RecvStr = binary_to_list ( Data ) , Answer = \" you say: \" ++ RecvStr , gen_tcp : send ( Socket , list_to_binary ( Answer )) , loop ( Socket ) ; { error , closed } -> ok end . Now you can use echo:listen(1234). to start this echo server. Using nc <server_host> 1234 to connect the server. And use \"bye\" to disconnect from server. Ref: http://20bits.com/article/network-programming-in-erlang/ http://20bits.com/article/erlang-a-generalized-tcp-server","tags":"Tech","url":"http://leetschau.github.io/echo-server-in-erlang.html","loc":"http://leetschau.github.io/echo-server-in-erlang.html"},{"title":"Console File Manager on Linux","text":"\"vi style\" means use j/k to move cursor up/down, use h/l to move parent/child directory. ranger vi style console file manager. Install with sudo apt install ranger caca-utils highlight atool w3m poppler-utils mediainfo . Run rifle to start the application. Frequently Used Shortcuts q : quit the application; ?m : see manpage; ?k list key shortcuts. h/l : go to the parent/child folder; H/L : go back/forward through navigation history; gh : jump to $HOME; r : open current file with a command you choose C-h or zh : show/hide hidden files; i : preview file in a pager, q to quit the pager; E : edit file (with vim); <delete> or :delete : delete file; dd : cut file/folder; pp : paste file/folder; cw or I : rename a file/folder; S : open a new shell, Ctrl-d to exit and back to ranger; du : Measure disk usage of current directory; zp & zc : toggle preview and preview window; zm : toggle mouse input; Configuration Create default config files: ranger --copy-config=all . Set 'show hidden files' as default: echo 'set show_hidden true' >> $HOME/.config/ranger/rc.conf . If you open a file and it says \"no action found\", you can open it with r and specify a command. Ranger will remember the command. Next time you can open it directly with . Similarly, if the editor is not what you want, you can always open the text file with r and use your favorite editor. Bookmark ranger's bookmark function is powerful and convenient. Mark a folder with mX , jump to this bookmark with 'X . After the single quote key is pressed, all defined bookmarks will be listed. There seems no commands for unset the bookmark, you can remove a bookmark entry ~/.config/ranger/bookmarks directly. Ref: Installing and Using Ranger, a Terminal File Manager, on a Ubuntu VPS vifm vi style. Add \"FILETYPE=PDF=pdf=exo-open\" in ~/.vifm/vifmrc will open pdf file in background. apt install vifm Use v to select files, dd to delete, :q to quit. Add the following codes into ~/.vifm/vifmrc: nnoremap ; : nnoremap : ; vnoremap ; : vnoremap : ; Midnight Commander Pro: Easy installation, easy custimization. Cons: the keyboard shortcuts system is far from vi style. Install and start: apt install mc mc Keyboard shortcut list Tab : jump between panes; F5 : copy file; F10 : quit mc; Ctrl-o : jump between console and mc; Insert : select files;","tags":"Tech","url":"http://leetschau.github.io/console-file-manager-on-linux.html","loc":"http://leetschau.github.io/console-file-manager-on-linux.html"},{"title":"Build a Beautiful oh-my-zsh Themes","text":"What is a beautiful prompt double line; provide username, hostname, current directory; provide information of git branch and commit status; provide command exit code; prompt is easy to distinguished from command results; optional: provide command order number, current time; Customize zsh prompt Some important escape sequences in zsh prompt: %n: username; %m: hostname; %~: current directory; %t: current time; %?: return code of last command; Customization of font and color see the following demonstration. Ref: \"3.9 Customizing the prompt\" on zsh on archlinux Using escape sequences in prompts Put it together Create a new file: ~/.oh-my-zsh/themes/lichao.zsh-theme: rc= \\(reset_color cy=\\) fg_bold[cyan] bl= \\(fg_bold[blue] re=\\) fg_bold[red] wh= \\(fg_bold[white] ye=\\) fg_bold[yellow] gr= \\(fg_bold[green] ma=\\) fg_bold[magenta] ZSH_THEME_GIT_PROMPT_PREFIX=\"git(\" ZSH_THEME_GIT_PROMPT_SUFFIX=\"):\" ZSH_THEME_GIT_PROMPT_CLEAN=\"✔\" ZSH_THEME_GIT_PROMPT_DIRTY=\"✗\" ZSH_THEME_GIT_PROMPT_ADDED=\"%{ \\(fg[green]%} ✚\" ZSH_THEME_GIT_PROMPT_MODIFIED=\"%{\\) fg[blue]%} M\" ZSH_THEME_GIT_PROMPT_DELETED=\"%{ \\(fg[red]%} ✖\" ZSH_THEME_GIT_PROMPT_RENAMED=\"%{\\) fg[magenta]%} ➜\" ZSH_THEME_GIT_PROMPT_UNMERGED=\"%{ \\(fg[yellow]%} ═\" ZSH_THEME_GIT_PROMPT_UNTRACKED=\"%{\\) fg[cyan]%} U\" PROMPT=' \\(ye%n\\) rc @ \\(cy%m $gr%~ $re\\) (git_prompt_info) \\((git_prompt_status)\\) rc \\(wh%t\\) rc [%?] ' Modify \"ZSH_THEME\" in ~/.zshrc as: ZSH_THEME=\"lichao\" Note: If you want add any color or highlight in the 2nd line of the prompt, remember escape the color directives with \"%{\" and \"%}\". For example, if your prompt is like this: PROMPT=' $ye %n $rc @ $cy %m $gr %~ $re $(git_prompt_info)$(git_prompt_status) $rc $wh %t $rc ${ wh } [%?] ${ rc } ' you have to define variables like this: wh =% {$ fg_bold [ white ]% } rc =% {$ reset_color % } If you keep using variables without escape, when you use tab-completion, your command line will be messed up. Ref: http://stackoverflow.com/questions/13546672/custom-oh-my-zsh-theme-long-prompts-disappear-cut-off/14179542#14179542 http://stackoverflow.com/questions/7957435/zsh-auto-complete-screws-up-command-name/10644062#10644062 Recommended Themes kphoen: double line, display user, host, CWD, command exit code when it's nonzero, git branch and status, no time, its title line is darker than \"ys\", but the command and command output is the same; ys: double line, display user, host, CWD, time, partial git information, no exit code; bureau: double line, display user, host, CWD, time, complete git information, no exit code; steeef: double line, display user, host, CWD, complete git information, no exit code; rkj: double line, display user, host, CWD, time, command exit code, no git information; duellj: double line, display user, host, CWD, command order number, time, no git information; some other good themes includes: frisk, candy, blinks if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/build-a-beautiful-oh-my-zsh-themes.html","loc":"http://leetschau.github.io/build-a-beautiful-oh-my-zsh-themes.html"},{"title":"Modify File Descriptor Limit on Linux","text":"System-wide File Descriptor Limit Get current value: sysctl fs.file-max modify max fd limit: sysctl -w fs.file-max=10000 User File Descriptor Limit Get current value: ulimit -n modify max fd limit: ulimit -n 10000 use ulimit -a to print all limits of a user, such as fd, processes, etc. Based on http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/ Ref: http://unix.stackexchange.com/questions/29577/ulimit-difference-between-hard-and-soft-limits http://ss64.com/bash/ulimit.html","tags":"Tech","url":"http://leetschau.github.io/modify-file-descriptor-limit-on-linux.html","loc":"http://leetschau.github.io/modify-file-descriptor-limit-on-linux.html"},{"title":"利用email-ext插件自动提取Sonar项目数据的方法","text":"下面的自动提取数据方法需要Jenkins项目名称与Sonar项目的projectKey属性一致，因为Sonar的Web Service API可以通过projectKey属性指定项目，这样我们用${PROJECT_NAME}标记在email-ext的Pre-send Script中指定Sonar项目，获取项目数据，具体实现过程如下： 新建BVT项目USB-TEST，此项目的BVT脚本build.xml中定义对应的Sonar项目的projectKey： < property name = \"sonar.projectKey\" value = \"USB-TEST\" /> Jenkins -> Manage Jenkins -> Configure System -> Extended E-mail Notification -> Default Pre-send Script import groovy.json.JsonSlurper sonarUrl = 'http://10.0.2.74:9000/api/resources?resource=${PROJECT_NAME}' + '&metrics=ncloc,classes,violations,coverage,tests,' + 'test_success_density,comment_lines_density,duplications_data,' + 'function_complexity' def conn = new URL ( sonarUrl ) . getText () def project = new JsonSlurper () . parseText ( conn ) String report = '' // 一定要声明为 String ，否则 Jenkins执行脚本时报错 def result = project . msr [ 0 ] result . each { item -> report = report + nameMapping ( item . key ) + ': ' + item . frmt_val + '<br />' } String detail = 'See project <a href=\"http://10.0.2.74:9000\">${PROJECT_NAME} on Sonar</a> for detail information.' msg . setContent ( report + detail , 'text/html' ) def nameMapping ( input ) { switch ( input ) { case \"ncloc\" : result = \"Total Lines of Code\" break case \"classes\" : result = \"Total Classes\" break case \"violations\" : result = \"Total Violations\" break case \"tests\" : result = \"Total Test Cases\" break case \"test_success_density\" : result = \"Test Success Rate\" break case \"coverage\" : result = \"Average Test Coverage\" break case \"comment_lines_density\" : result = \"Average Comment Lines Rate\" break case \"function_complexity\" : result = \"Average Function Complexity\" break default : reuslt = input } } Jenkins中新建一个名为\"USB-TEST\"的项目，Configure -> Post-build Actions -> Advanced -> Pre-send Script: ${DEFAULT_PRESEND_SCRIPT}. Note that this token is case sensitive; This template is stored in the file $JENKINS_HOME/hudson.plugins.emailext.ExtendedEmailPublisher.xml; 上面脚本中的msg变量是JDK的javax.mail.internet.MimeMessage对象，用setText()方法设置邮件正文，详细介绍见email-ext官网； 当修改默认Pre-send Script后，各项目的Pre-send Scrpit不会自动更新，需要手工改为${DEFAULT_PRESEND_SCRIPT}； 构建项目后Jenkins会自动发送邮件。 如果邮件正文中没有超链接，将文本格式设为text/plain更简洁，相应地上面的代码改为： result . each { item -> report = report + nameMapping ( item . key ) + ': ' + item . frmt_val + '\\n' } msg . setText ( report ) 调试Groovy脚本的方法 利用Jenkins的Groovy引擎 在\"http://10.0.2.74:8088/script\"中用Web API调试代码，例如： import groovy.json.JsonSlurper sonarUrl = 'http://10.0.2.74:9000/api/resources?resource=ESB' + '&metrics=ncloc,classes,violations,coverage,tests,' + 'test_success_density,comment_lines_density,duplications_data,' + 'function_complexity' def conn = new URL ( sonarUrl ) . getText () def project = new JsonSlurper () . parseText ( conn ) println project println project . id 命令行中调试 在命令行中执行 groovy myscript.groovy .","tags":"Tech","url":"http://leetschau.github.io/li-yong-email-extcha-jian-zi-dong-ti-qu-sonarxiang-mu-shu-ju-de-fang-fa.html","loc":"http://leetschau.github.io/li-yong-email-extcha-jian-zi-dong-ti-qu-sonarxiang-mu-shu-ju-de-fang-fa.html"},{"title":"Set Classpath for Groovy on Linux","text":"The \"-cp\" option of groovy is the same with Java. Wildcards can be used on JDK6 or later. For example: groovy -cp \"/home/chad/apps/http-builder-0.6/ :/home/chad/apps/http-builder-0.6/dependencies/ \" httpex.groovy Note1: \"**\" is not supported, which means above command can not written as: groovy -cp \"/home/chad/apps/http-builder-0.6/**\" httpex.groovy Note2: \" .jar\" is not supported, which means \"/home/chad/apps/http-builder-0.6/ .jar\" is invalid; Note3: the double quotes of classpath is necessary; Note4: \"/home/chad\" in classpath can not be replaced by \"~\"; See: http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath","tags":"Tech","url":"http://leetschau.github.io/set-classpath-for-groovy-on-linux.html","loc":"http://leetschau.github.io/set-classpath-for-groovy-on-linux.html"},{"title":"\"package com.sun.xml.internal.bind.v2 does not exist\" Solution","text":"When execute javac task in ant under openjdk(I also find this problem in Oracle JDK 1.6, 2014-3-21), you may encounter \"package com.sun.xml.internal.bind.v2 does not exist\" error, which is because this package only exists in Oracle (Sun) JDK, but not in openjdk. To resolve this problem, add compiler arguments \"-XDignore.symbol.file=true\" to javac task: <javac destdir= \" ${ src . class . dir } \" encoding= \"UTF-8\" debug= \"true\" classpathref= \"lib.path\" failonerror= \"true\" > <src path= \" ${ src . dir } \"/ > <compilerarg line= \"-XDignore.symbol.file=true\" /> </javac> This is also valid when using javac in command line.","tags":"Tech","url":"http://leetschau.github.io/package-comsunxmlinternalbindv2-does-not-exist-solution.html","loc":"http://leetschau.github.io/package-comsunxmlinternalbindv2-does-not-exist-solution.html"},{"title":"用vi删除utf-8文件中的BOM标记","text":"BOM (Byte-Order Mark)用来表示Unicode文件的字节顺序（参考 编译工程时报java:[1,0] illegal character: \\65279问题排查与解决过程 中对BOM作用的说明），在UTF-8文件中已没有作用，而且这个标记会导致javac编译失败（但在Eclipse中却能够正常编译，原因不明），用vi打开这个文件，执行 :setlocal bomb? 检查是否有bom，如果有，用 :setlocal nobomb 去掉它。 或者用vi -b 以binary方式打开文件，就可以看到文件头上的BOM标记，删之。","tags":"Tech","url":"http://leetschau.github.io/yong-vishan-chu-utf-8wen-jian-zhong-de-bombiao-ji.html","loc":"http://leetschau.github.io/yong-vishan-chu-utf-8wen-jian-zhong-de-bombiao-ji.html"},{"title":"Import bdb format SVN Repo into VisualSVN Server","text":"Repo format in VisualSVN is fsfs. It can't import bdb format repo directly. So you have to import is in the following 2 steps: Dump old repo to a file: K:\\svn>svnadmin dump ./GPAS > f:\\tmp\\gpas_dump Import dump file into VisualSVN Server as a repo: i. Start VisualSVN Server Manager; i. Repositories -> Create new repository: Repository Name: GPAS, uncheck \"create default structure\"; i. Menu: 操作 -> 所有任务 -> Command Prompt; i. F:\\SVNDW> svnadmin load ./GPAS < f:\\tmp\\gpas_dump","tags":"Tech","url":"http://leetschau.github.io/import-bdb-format-svn-repo-into-visualsvn-server.html","loc":"http://leetschau.github.io/import-bdb-format-svn-repo-into-visualsvn-server.html"},{"title":"Notes about kvm","text":"Test If Your Processor Supports VT egrep -c '(vmx|svm)' /proc/cpuinfo If it is bigger than 0, VT is supported. 'vmx' is the VT of intel, while 'svm' is that of amd. Ref: http://www.howtogeek.com/howto/linux/linux-tip-how-to-tell-if-your-processor-supports-vt/ Install Ubuntu sudo apt-get install kvm Setup a Gust OS cd ~/VirtualBoxVMs/kvmtest kvm-img create winxp.img 4G kvm -drive file=winxp.img -cdrom ~/warez/OS/tomatoXp.iso -boot d -m 512 use ctrl+alt+del to release mouse. Ref:http://wiki.ubuntu.com.cn/Kvm%E6%95%99%E7%A8%8B#.E5.8F.8B.E6.83.85.E8.BF.9E.E6.8E.A5 CentOS $ yum install kvm python-virtinst libvirt libvirt-python virt-manager virt-viewer libguestfs-tools $ service libvirtd restart $ virt-install --name vm1 --ram=1024 --vcpu=1 --cdrom ./warez/CentOS-6.4-x86_64-LiveDVD.iso --graphics none --disk path=vm1.img,size=10","tags":"Tech","url":"http://leetschau.github.io/notes-about-kvm.html","loc":"http://leetschau.github.io/notes-about-kvm.html"},{"title":"Notes about zsh","text":"Install zsh ( apt-get install zsh ) and oh-my-zsh . Set zsh as default shell: chsh -s /bin/zsh ; The way plugins of oh-my-zsh work is like vim-pathogen. To use a plugin of zsh, clone a git repo into the plugin folder ($ZSH_CUSTOM, the default value is ~/.oh-my-zsh/custom), and add its name into the plugin list in ~/.zshrc, and restart the zshell. So you needn't add many source /usr/share/autojump/autojump.zsh , source $HOME/.asdf/asdf.sh , etc into ~/.zshrc manually. Useful plugins Install the following packages: apt install fonts - powerline autojump Change color and prompt style by changing the value of \"ZSH_THEME\" in .zshrc. Or add your own theme file (say lichao.zsh-theme ) in $ZSH_CUSTOM . Finally add the following lines into ~/.zshrc: export ZSH = $ HOME / . oh - my - zsh ZSH_THEME = \"lichao\" plugins = ( asdf git gitfast httpie web - search vi - mode autojump copyfile colored - man - pages zsh - autosuggestions zsh - syntax - highlighting ) For installation details see: zsh-syntax-highlighting zsh-autosuggestions oh-my-zsh plugin list Usage path navigation The tab-completion function of bash can only auto-complete one path name at a time. While that of zsh auto complete multi-levels path at a time. So if you want go to ~/dir1/SubDir2/SubSubdir3/Target, instead of type \"cd blah blah blah\", just type \"~/d/s/s/t \" and you got there. Note that path recognition in zsh is not case sensitive, so no need to care about capital letters. This make path navigation really fast and meaningful. You can ommit \"cd\" command before change current directory (make sure option AUTO_CD is turned on). So if you want go to parent folder, \"..\" is ok. If you want come back, \"-\" or \"1\". If you want go to ./apps/eclipse-java-juno-SR2-linux-gtk/p2/org.eclipse.equinox.p2.core/cache/binary, just type: \"apps \" then a list will be displayed and you can use to select among them. Use \"Alt+Backspace\" to delete a path name (not a character). Use d to list all visited folders. Use 1~9 to navigate to folders in the recent visited list. Because 0 is always the current folder, you can just use \"1\" to switch between two folders. autojump With autojump, you can use j folder_name_part1 part2 ... to jump to a directory you have previously visited. For example: \"j gaia\" will jump to \"/home/bvt/.jenkins/jobs/GAIA\", or \"j gaia/works\" to \"/home/bvt/.jenkins/jobs/GAIA/workspace\". Use autojump -s or j -s to show all entries in autojump database with their weight. Use \"j\" to jump to the item with highest weight. So you can have a \"favorite list\" based on the weight. If you want change a item to another folder, say the old destination of j work is to ~/docs/jshome/workspace, and now you want it to ~/docs/haskell/workspace. First find out their weight respectively: j -s|grep workspace . For now the weight of jshome is 122.3, and that of the haskell is 90.4. So this can be achieved by decrease the weight of jshome less than that of haskell: j work j - d 50 This makes the weight of jshome to 72.3. Use j -s|grep ... above, you can find now haskell has the highest weight. And j work take you to ~/docs/haskell/workspace now. If you have 2 \"newfairs\" folder, one for source codes and one for devops: \"~/docs/website/v3/codes/newfairs\" and \"~/docs/website/v3/devOps/ansible/newfairs\", use j co new to jump to the former, and j ops new to jump to latter. Use j --purege to remove invalid path due to path changes. See j -h or autojump --help for details. find files use ls **/*.zip instead of find . -name *.zip ; edit files use \"vi /gaia/ /build.xml\" instead of giving the actual path of the file; command history search use \"Ctrl + R\" to activate command search mode; other type-saving tricks \"less REMDME\" -> \"<README\" open file in zsh alias -s pdf=exo-open will use exo-open to open pdf files. Now you can use ./book.pdf to open it in Document Viewer as if it's a executable command. alias -s pdf=evince has the same effect with previous \"exo-open\" method on Ubuntu, except that pdf application (Document Viewer, or evince) runs in foreground, which means zsh hangs when evince runs. So \"exo-open\" is a better choice for it acts like double click file in GUI file manager (like Thunar). But on Ubuntu, evince is builtin app, while exo-open not. If you only want this in a session, define it in command line. If you want system remember this, add it into .zshrc. To open all file associations already defined in system, put the following lines in .zshrc: autoload - U zsh - mime - setup zsh - mime - setup Ref: Replacing the File Manager in Zsh Use alias -s to list all file extension associations defined. Use unalias -s pdf to remove the association (or remove alias command from .zshrc). Cheatsheet take: \"take myfolder\" equals to \"mkdir myfolder;cd myfolder\"; x: extract some file, including zip, tar, gz, bz2, tgz, 7z, etc file; zsh_stats: print top 20 frequently used commands under zsh; upgrade_oh_my_zsh: upgrade Oh-my-zsh; uninstall_oh_my_zsh: uninstall Oh-my-zsh;","tags":"Tech","url":"http://leetschau.github.io/notes-about-zsh.html","loc":"http://leetschau.github.io/notes-about-zsh.html"},{"title":"Get SonarQube Metrics Results with Web Service","text":"Debug Sonar Web Service curl 'http://localhost:9000/api/resources?resource=841&metrics=coverage,ncloc,test_success_density,packages' where resource is id or key of sonar project. Reference: Web Service /api/resources Retrieve data via python script python script: import urllib2 import json sonarUrl = 'http://localhost:9000/api/resources?resource=841&metrics=ncloc,classes,violations,coverage,tests,test_success_density,comment_lines_density,duplications_data,function_complexity' conn = urllib2 . urlopen ( sonarUrl ) data = json . load ( conn ) print json . dumps ( data , indent = 2 ) Retrieve data via groovy script import groovy.json.JsonSlurper sonarUrl = 'http://10.0.2.74:9000/api/resources?resource=841&metrics=ncloc,' + 'classes,violations,coverage,tests,test_success_density,' + 'comment_lines_density,duplications_data,function_complexity' def conn = new URL ( sonarUrl ) . getText () def data = new JsonSlurper () . parseText ( conn ) println data . id println data . lname println data . msr You can insert this script into \"Pre-send Script\" section of email-ext plugin of Jenkins to retrieve sonar analysis result. Set of metrics key: http://docs.sonarsource.org/2.5/apidocs/org/sonar/gwt/Metrics.html","tags":"Tech","url":"http://leetschau.github.io/get-sonarqube-metrics-results-with-web-service.html","loc":"http://leetschau.github.io/get-sonarqube-metrics-results-with-web-service.html"},{"title":"Use Conky as Desktop Clock on Xfce","text":"Verified with Conky 1.9.0 on Mint 14 Xfce. Install Conky Digital Clock Save the following configurations in a file named \"conkyrc\": use_xft yes xftfont 123:size=8 xftalpha 0.1 update_interval 3 total_run_times 0 own_window yes own_window_type conky own_window_argb_visual no own_window_argb_value 0 own_window_transparent yes own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager double_buffer yes minimum_size 250 150 maximum_width 650 draw_shades yes draw_outline no draw_borders no draw_graph_borders no default_color e0e0e0 default_shade_color black default_outline_color green alignment tr gap_x 15 gap_y 25 no_buffers yes uppercase no cpu_avg_samples 2 net_avg_samples 1 override_utf8_locale yes use_spacer right TEXT \\({voffset 10}\\) \\({font Ubuntu:pixelsize=120}\\) \\({font}\\) \\({offset 10}\\) \\({font Ubuntu:pixelsize=42}\\) \\({voffset -14}\\) \\({font Ubuntu:pixelsize=22} ${time %B} ${time %Y}\\) \\({voffset 24}\\) \\({offset -165}\\) \\({font} ${voffset -2}\\) \\({font Ubuntu:pixelsize=10}\\) HD \\({offset 5}\\) color \\({fs_free /home} / ${fs_size /home}\\) \\({color #FCD97B}RAM ${offset 5}\\) color \\(mem / $memmax\\) \\({color #FCD97B}CPU ${offset 5}\\) color \\({cpu cpu0}%\\) \\({color #FCD97B}DOWN\\) color \\({offset 5}\\) \\({downspeed eth1}\\) \\({if_existing /proc/net/route eth0}\\) \\({else}\\) \\({downspeed eth0}\\) \\({endif}\\) \\({offset 15}\\) UP \\(color\\) \\({if_existing /proc/net/route eth1}\\) \\({else}\\) \\({upspeed eth0}\\) \\({if_existing /proc/net/route eth0}\\) \\({endif}\\) ${endif} start conky with conky -d -c conkyrc ; Conky Customization Conky Configuration File In above configuration file, texts above \"TEXT\" is \"configuration\" segment. If you want a transparent background, \"own_window yes, own_window_type conky, own_window_argb_visual no, own_window_argb_value 0, own_window_transparent yes\" is the keys; If the clock only displays a half, you can enlarge the value in \"minimum_size\". Use \"man conky\" for exact meaning of all above configuration parameters. Under \"TEXT\" is \"how to draw conky panel\" segment. You can see all the details like ${time %H:%M} and its appearance (like ${font ...}, ${color ...}), position (like ${voffset...}) in this section. Debugging Conky Configuration File When you modify conkyrc and save the file, conky will automatically reload the file. No need to \"shutdown - modify - restart\", which make it very convinient to see the effect of your modification. Make Conky Clock Autostart AppFinder -> Session and Startup -> Application Autostart -> Add: Name: Conky, Command: conky -d -c ~/apps/conky/conkyrc Reference: http://www.noobslab.com/2012/09/install-gotham-conky-in-ubuntulinux.html More Conky Style: http://www.noobslab.com/2012/07/conky-collection-for-ubuntulinux.html if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/use-conky-as-desktop-clock-on-xfce.html","loc":"http://leetschau.github.io/use-conky-as-desktop-clock-on-xfce.html"},{"title":"Start Console vi from a Launcher on Xfce","text":"Alt+F3 (App Finder) -> Keyboard -> Application Shortcuts -> Add: Command: terminator -e vi; Shortcut: v (\"Win\" key + v); Now you can use \"Win + v\" to launch vi without installing something like gVim.","tags":"Tech","url":"http://leetschau.github.io/start-console-vi-from-a-launcher-on-xfce.html","loc":"http://leetschau.github.io/start-console-vi-from-a-launcher-on-xfce.html"},{"title":"Desktop Search Utility on Xfce","text":"There is no Linux equivalent of Everything on Windows. All search tools have no incremental search funtion like that in Everthing. The fastest filename search tool is \"find\" command and catfish. Pay attention that you have to do a \"Deep Search\" in catfish to perform a \"real\" search, or it only use \"locate\" command to search in the database. This bug will be fixed in next release of catfish. By default catfish will not search files in hidden directories. So you have to use \"find\" command if you want getting all results including those in hidden directories. Some Window Manager like Konqueror, Dolphin have filename search function, but they are too slow.","tags":"Tech","url":"http://leetschau.github.io/desktop-search-utility-on-xfce.html","loc":"http://leetschau.github.io/desktop-search-utility-on-xfce.html"},{"title":"Window Border Disappeared on Xfce","text":"From last week all the window on Mint 14 Xfce has no title bar. There is no background image. No icons on task bar. Some shortcuts are invalid, including Alt+Drag(move window), Alt+F9(minimize), Alt+F4(close window), etc. Solution: In terminal: xfdesktop & taking back the background image; xfwm4 & taking back window border. bingo.","tags":"Tech","url":"http://leetschau.github.io/window-border-disappeared-on-xfce.html","loc":"http://leetschau.github.io/window-border-disappeared-on-xfce.html"},{"title":"A Minimal gen_fsm Example","text":"I implemented a super simple 2-state FSM based on gen_fsm. You can press this light between on and off. light_fsm.erl: module(light_fsm). -hehavior(gen_fsm). -export([start/1, press_light/1]). -export([init/1, on/2, off/2]). -record(state, {name=\"\"}). start(Name) -> gen_fsm:start(?MODULE, [Name], []). press_light(Pid) -> gen_fsm:send_event(Pid, press). init(Name) -> io:format(\"~p in init state: off.~n\", [Name]), {ok, off, #state{name=Name}}. off(press, S=#state{}) -> io:format(\"~p rec msg press, turned on.~n\", [S]), {next_state, on, S#state{}}. on(press, S=#state{}) -> io:format(\"~p rec msg press, turned off.~n\", [S]), {next_state, off, S#state{}}. Use this FSM: Eshell V5.10.2 (abort with &#94;G) 1> c(light_fsm). {ok,light_fsm} 2> {ok, Light1} = light_fsm:start(\"Light1\"). [\"Light1\"] in init state: off. {ok,<0.39.0>} 3> light_fsm:press_light(Light1). {state,[\"Light1\"]} rec msg press, turned on. ok 4> light_fsm:press_light(Light1). {state,[\"Light1\"]} rec msg press, turned off. ok","tags":"Tech","url":"http://leetschau.github.io/a-minimal-gen_fsm-example.html","loc":"http://leetschau.github.io/a-minimal-gen_fsm-example.html"},{"title":"Development with vim on Multiple Layers Project","text":"ctrlp Install ctrlp with vundle: Plugin 'ctrlp.vim' It is more powerful, faster than FuzzyFinder, and easier to install and use. Use to search files recursively under current folder. In the search results window, you have 2 ways to open the selected file: press to open file in current window, press to choose how to open the file, for example \"h\" to open it in a new horizontal window. Add let g:ctrlp_custom_ignore = { 'dir': 'node_modules\\|.git' } into .vimrc to exclude folder node_modules from search list. Notice that the backslash before | is mandatory. If this does not work, delete folder ~/.cache/ctrlp , or run :ClearAllCtrlPCaches in vim. FuzzyFinder FuzzyFinder (created by Takeshi NISHIDA) is a powerful search tool like \"go to everything\" in sublime text 2. Command-T is a similar tool. But it need ruby and have to compile it. L9 plugin (also created by Takeshi NISHIDA) is needed to use this plugin. Search and Open File CoverageFile Mode This mode is invoked by command :FufCoverageFile. It includes all files in current working directory and subdirectories. Note it only matches characters in one name. Say you have a file at ./abc/def/stu.xyz, you can find it with \"suyz\", \"sxyz\" or any combinations of characters in \"stu.xyz\". But \"ads\" and \"des\" will match nothing. You can find it with partial name, in this case \"d/s\" will get stu.xyz. Add nnoremap <C-o> :FufCoverageFile<CR> in ~/.vimrc to map ctrl-o to invoke Coverage File command, then input the filename pattern, then press . Cancel it with key. File Mode This mode is invoked by command :FufFile. It only includes files in current working directory, without files in subdirectories (so not very useful).","tags":"Tech","url":"http://leetschau.github.io/development-with-vim-on-multiple-layers-project.html","loc":"http://leetschau.github.io/development-with-vim-on-multiple-layers-project.html"},{"title":"Selection in Quotes and Brackets in Vim","text":"Double quotes are \", single quotes are ', parentheses are b or (, square brackets are [, curved brackets are {. Use \"a\" includes quotes and brackets, otherwise \"i\". So: da\": delete words with double quotes; ya\": copy words with quotes; ca\": delete and insert words with quotes; dab: delete words with parentheses; da[: delete words with square brackets; da{: delete words with curved brackets; yi\": copy words inside the double quotes; yi': copy words inside the single quotes;","tags":"Tech","url":"http://leetschau.github.io/selection-in-quotes-and-brackets-in-vim.html","loc":"http://leetschau.github.io/selection-in-quotes-and-brackets-in-vim.html"},{"title":"Using Wireless Lan in Puppy Linux","text":"Welcome -> Internet Connection -> connect -> Internet Connection Wizard -> Connect to Internet by: Wired or wireless LAN -> Simple Network Setup -> wlan0 -> select your wireless hotpoint in the list(ESB for example), Encryption: WPA, then enter password in \"Key\" textbox -> click \"CONNECT\".","tags":"Tech","url":"http://leetschau.github.io/using-wireless-lan-in-puppy-linux.html","loc":"http://leetschau.github.io/using-wireless-lan-in-puppy-linux.html"},{"title":"Note about Live CDs","text":"Host: lenovo laptop V480. Debian Live 7 Gnome/KDE: startup in i686 mode; Fedora 18 64bit Gnome/KDE/Xfce: works fine; OpenSUSE 12,1 Gnome x64: startup failed; PCLinuxOS: startup failed; Precise Puppy: works fine; Mint KDE 14 64bit: works fine;","tags":"Tech","url":"http://leetschau.github.io/note-about-live-cds.html","loc":"http://leetschau.github.io/note-about-live-cds.html"},{"title":"Note about Linux Distros and Desktop Environment","text":"Tested on Live CD mode. See \" Note about Live CDs \". Mint Cinnamon 15 64bit Beautiful, use Win key to bring up app panel, search apps in Windows-like style, can not configure custom shortcuts. Maybe you can define it with gconf-editor, but it's complicated; Mint Xfce Concise, easy to define custom shortcuts; openSUSE 13.1 GNOME This version use GNOME 3. The problem is the system tray disappears. So I can't exit H3C client. Another problem of this version is the network server is not up by default. It's really not convenient. Debian Gnome Good GUI, with Win key enabled and easy app search. No wireless card support. Precise Puppy Simple GUI, can't display Chinese Charactors(no UTF-8 support?), responding very slowing when ssh to remote server, can use wireless network;","tags":"Tech","url":"http://leetschau.github.io/note-about-linux-distros-and-desktop-environment.html","loc":"http://leetschau.github.io/note-about-linux-distros-and-desktop-environment.html"},{"title":"Specify Default JDK on Ubuntu","text":"sudo update-alternatives --config java produced: Selection Path Priority Status ------------------------------------------------------------ 0 / usr / lib / jvm / java - 7 - openjdk - i386 / jre / bin / java 1071 auto mode * 1 / usr / lib / jvm / java - 6 - openjdk - i386 / jre / bin / java 1061 manual mode 2 / usr / lib / jvm / java - 7 - openjdk - i386 / jre / bin / java 1071 manual mode The you can select a number to specify the default JDK. Use sudo update-alternatives --config javac config the javac version. How about you have installed a jdk with rpm, but it doesn't appear in the list? Now I download Oracle JDK6 installer, jdk-6u45-linux-x64-rpm.bin, run this file, it automatically install jdk-6u45-linux-amd64.rpm, which is extracted from the previous installer. But when the result of java -version is still openjdk. So I need to find where the package installed, and set its path into JAVA_HOME. # rpm - qa | grep jdk java - 1 . 7 . 0 - openjdk - 1 . 7 . 0 . 9 - 2 . 3 . 4 . 1 . el6_3 . x86_64 jdk - 1 . 6 . 0 _45 - fcs . x86_64 java - 1 . 6 . 0 - openjdk - 1 . 6 . 0 . 0 - 1 . 50 . 1 . 11 . 5 . el6_3 . x86_64 # rpm - ql java - 1 . 6 . 0 - openjdk - 1 . 6 . 0 . 0 - 1 . 50 . 1 . 11 . 5 . el6_3 . x86_64 // from the file list we know the java path is : / usr / java / jdk1 . 6 . 0 _45 / bin # / usr / java / jdk1 . 6 . 0 _45 / bin / java - version java version \"1.6.0_45\" Java ( TM ) SE Runtime Environment ( build 1 . 6 . 0 _45 - b06 ) Java HotSpot ( TM ) 64 - Bit Server VM ( build 20 . 45 - b01 , mixed mode ) # echo \"export JAVA_HOME=/usr/java/jdk1.6.0_45\" >> / etc / profile # source / etc / profile","tags":"Tech","url":"http://leetschau.github.io/specify-default-jdk-on-ubuntu.html","loc":"http://leetschau.github.io/specify-default-jdk-on-ubuntu.html"},{"title":"Search or Replace String Recursively in a Directory on Linux","text":"Find String Using grep in zsh grep target_pattern * / .erl in bash grep -r --include=\"*.java\" Forward . Format: grep [-r] [--include=\"...\"] searched_target_pattern search_base_dir, in which -r means search recursively (including subfolders), --include specify file types; Replace String Using Perl perl -i -pe 's/oldstring/newstring/g' <file_pattern> . For example, if you want replace all \"windows\" with \"linux\" in directory \"~/docs\" in all xml files, and save old files as \"*.bak\", yuo shoud run the following command in docs: perl - i . bak - pe 's/windows/linux/g' * . xml Note: there is no blank between \"-i\" and \".bak\"; Replace all files including subdirs: perl - i . bak - pe 's/windows/linux/g' ** /*.xml No backup file needed: perl - i - pe 's/windows/linux/g' ** /*.xml Do not modify file, output to console: perl - pe 's/windows/linux/g' aa . xml Ref: http://vasir.net/blog/ubuntu/replace_string_in_multiple_files/","tags":"Tech","url":"http://leetschau.github.io/search-or-replace-string-recursively-in-a-directory-on-linux.html","loc":"http://leetschau.github.io/search-or-replace-string-recursively-in-a-directory-on-linux.html"},{"title":"Some powerful vim shortcuts","text":"Power of Leader Charactor leader charactor is more convinient than Ctrl+some key: let mapleader = \",\" nmap < silent > < leader > ev : e $ MYVIMRC < CR > \" edit .vimrc with ,ev nmap <silent> <leader>sv :so $MYVIMRC<CR> \" make new . vimrc valid with , sv nmap < silent > < leader > sw < C - w > w \" use ,sw to switch between window, very useful when using with NERDTree or taglist nmap <leader>no :NERDTree<CR> \" open NERDTree with , no nmap < leader > nt : NERDTreeToggle < CR > \" toggle NERDTree with ,nt nmap <leader>ob :OpenBookmark \" open NERDTree bookmark with , ob nmap < leader > to : TlistOpen < CR > \" open taglist window with ,to nmap <leader>tt :TlistToggle<CR> \" toggle taglist window with , tt Power of map Use ; instead of : a very smart idea to boost vi effiency: nnoremap ; : Switching Window Faster map < C - h > < C - w > h map < C - j > < C - w > j map < C - k > < C - w > k map < C - l > < C - w > l Ref: http://nvie.com/posts/how-i-boosted-my-vim/","tags":"Tech","url":"http://leetschau.github.io/some-powerful-vim-shortcuts.html","loc":"http://leetschau.github.io/some-powerful-vim-shortcuts.html"},{"title":"xml editing in vi","text":"Auto complete tags xmledit installation: git clone https://github.com/sukima/xmledit.git, then make (unnecessary?) when you write \" \", it will be converted to \" \"; if you write \" >\", it will be converted to: <mytag> </mytag> use \":h xml-plugin.txt\" for more functions; Note: xmledit is a file-type plugin, which means it will be loaded and only worked when editing a xml file. If you open a temporary buffer or a file without extension \"xml\", this plugin will not work; Comment NERD Commenter: installation: git clone http://github.com/scrooloose/nerdcommenter.git ; , c < space >: toggle comments on current line ; 3 , c < space >: toggle comments 3 lines from current line ; , cy : copy selected texts before comment out ; Ref: https://github.com/scrooloose/nerdcommenter Surrounding Texts vim-surround : installation: git clone git://github.com/tpope/vim-surround.git ; Add Surroundings S in linewise visual mode: S<target> on < copy todir = \"somepath\" /> < mkdir name = \"somedir\" /> results in: <target> <copy todir= \"somepath\" /> <mkdir name= \"somedir\" /> </target> yss : add surroundings to a line: yss<task> on \"hello world\" results in hello world , yss\" results in \"hello world\"; ysiw : add surroundings to a word: ysiw\" results in \"hello\" world; Change Surroundings cs...","tags":"Tech","url":"http://leetschau.github.io/xml-editing-in-vi.html","loc":"http://leetschau.github.io/xml-editing-in-vi.html"},{"title":"make CLI Comfortable When Working in Multiple Directoies","text":"alias alias is command-line counterpart of hotstring of AutoHotkey, for example: alias vboat = 'vi ~/docs/erlang/boat.erl' alias toerl = 'cd ~/docs/erlang' If hope for later use, save them in ~/.bash_aliases(if it's spacified in .bashrc), otherwise, ~/.bashrc. CDPATH $CDPATH to command \"cd\" is the same with $PATH with executables, or $CLASSPATH to command \"java\". For example: bvt @pwm : ~/ docs / test / workspace $ CDPATH =/ usr / share / ant bvt @pwm : ~/ docs / test / workspace $ cd lib / usr / share / ant / lib bvt @pwm : / usr / share / ant / lib $ Save the value of CDPATH in .bashrc for later use. Bookmarks of vim NerdTree See note \"Notes about NERDTree \"; Temporary directories switching pushd <dir_name> : add to path stack and switch to it. For example pushd . add current path to path stack; Switch between two directories pushd : swap top and second item in stack and switch to second path; cd -: \"-\" is $OLDPWD; Switch between multiple directories pushd +n or pushd -n (n is a 1,2,...): rotates the stack and change to the n-th path in stack, n is decided by dirs -v command; dirs & popd dirs -v : print the path stack; See Linux / Unix Command: pushd .","tags":"Tech","url":"http://leetschau.github.io/make-cli-comfortable-when-working-in-multiple-directoies.html","loc":"http://leetschau.github.io/make-cli-comfortable-when-working-in-multiple-directoies.html"},{"title":"Evernote Command line Options","text":"Use ENScript.exe help to print all available Evernote command: Use ENScript.exe shownotes /? to see detailed info about command shownotes.","tags":"Tech","url":"http://leetschau.github.io/evernote-command-line-options.html","loc":"http://leetschau.github.io/evernote-command-line-options.html"},{"title":"Using Evernote with Wine on Mint","text":"Install Evernote Install Evernote in Wine: wine Evernote_xxx.exe ; Backup Evernote Database File Locally Database file location is: ~/.wine/drive_c/users/chad/Local Settings/Application Data/Evernote/Evernote/Databases/leechau.exb Query in Evernote Add the following command in Custom Actions of AppFinder: Type : Prefix Pattern : q . Command : env WINEPREFIX = \"/home/chad/.wine\" wine C :\\\\ Program \\ Files \\\\ Evernote \\\\ Evernote \\\\ ENScript . exe shownotes / q \"%s\" Now you can , input \"q.ahk\" to search all notes contains \"ahk\" evernote database. Create New Note env WINEPREFIX=\"/home/chad/.wine\" wine C:\\\\Program\\ Files\\\\Evernote\\\\Evernote\\\\ENScript.exe createNote hangs both on Windows7 and linux Wine, likes a Evernote bug. Here is a workaround: Use Application shortcuts defined in Keyboard \"env WINEPREFIX=\"/home/chad/.wine\" wine C:\\Program\\ Files\\Evernote\\Evernote\\Evernote.exe\" to activate Evernote window; press ctrl+n to create a new note.","tags":"Tech","url":"http://leetschau.github.io/using-evernote-with-wine-on-mint.html","loc":"http://leetschau.github.io/using-evernote-with-wine-on-mint.html"},{"title":"Manage Vim Plugins with Pathogen","text":"Install Pathogen Download pathogen.vim to ~/.vim/autoload; Add following lines to ~/.vimrc: syntax on set et execute pathogen#infect() call pathogen#helptags() filetype on mkdir ~/.vim/bundle Install Plugin Unzip the archive file of the plugin under ~/.vim/bundle like this (NerdTree Plugin in this case): bundle -- nerdtree |-- doc | |-- NERD_tree.txt | -- tags |-- nerdtree_plugin | |-- exec_menuitem.vim | -- fs_menu.vim |-- plugin | -- NERD_tree.vim -- syntax -- nerdtree.vim Now you can use :NERDTree in vi (you can use :N to trigger this command). Uninstall Plugin Just remove plugin directory under ~/.vim/bundle. Disable a plugin temporarily Add a tilde (\"~\") at the end of the directory name of the bundle. For example: \"vimerl-1.4.1\" to \"vimerl-1.4.1~\". Ref: Line 129 in ~/.vim/autoload/pathogen.vim (or https://github.com/tpope/vim-pathogen/blob/master/autoload/pathogen.vim). List all loaded scripts :scriptnames (:scrip for short).","tags":"Tech","url":"http://leetschau.github.io/manage-vim-plugins-with-pathogen.html","loc":"http://leetschau.github.io/manage-vim-plugins-with-pathogen.html"},{"title":"Analyse trade_fsm","text":"{ok, Bob}=trade_fsm:start(\"Bob\"). {ok, Tom}=trade_fsm:start(\"Tom\"). trade_fsm:trade(Bob,Tom). trade_fsm:accept_trade(Tom). { { function_clause, [ { gen, call, [ {ok,<0.34.0>}, '$gen_sync_event', {negotiate,{ok,<0.37.0>}}, 30000 ], [{file,\"gen.erl\"},{line,146}] }, { gen_fsm, sync_send_event, 3, [{file,\"gen_fsm.erl\"},{line,210}] }, { erl_eval, do_apply, 6, [{file,\"erl_eval.erl\"},{line,568}] }, { shell,exprs, 7, [{file,\"shell.erl\"},{line,667}] }, { shell, eval_exprs, 7, [{file,\"shell.erl\"},{line,622}] }, { shell, eval_loop, 3, [{file,\"shell.erl\"},{line,607}] } ] }, { gen_fsm, sync_send_event, [{ok,<0.34.0>},{negotiate,{ok,<0.37.0>}},30000] } }","tags":"Tech","url":"http://leetschau.github.io/analyse-trade_fsm.html","loc":"http://leetschau.github.io/analyse-trade_fsm.html"},{"title":"Notes about Krusader","text":"Integreted with CLI Settings -> Show Terminal Emulator (toggle CLI with Ctrl+Alt+T); File Browse and Edit within Krusader File Manager (Krusader) + CLI (Konsole) + Text Editor (vi or kate) Set \"Send to Embedded Terminal Emulator\" at right side of command-line; When you locate a file with Krusader then Ctrl+Down (focus on command-line); Enter \"vi\" or \"kate\", then Ctrl+Enter (add selected file name), then press enter; Press Ctrl+Alt+T (show Embedded Terminal Emulator), then you can see vi window; When finish editing the file, use \":x\" back to krusader; Note: Kate has a build-in terminal and vi-mode. Frequently used shortcuts Ctrl+.: show/hide hidden files; ctrl + shift + enter: copy full path to commandline; ctrl + up/down: focus on panel/command-line (on KDE only left Ctrl is valid for this function); Get full path of current file Settings -> Configure Krusader -> User Actions -> Start ActionMan -> click button \"Create new useraction\" (upper-left corner of the panel): Identifer: Copy full path; Category: System; Title: &Copy full path; Command: %_Clipboard(\"%aCurrent%\")% (or you can use the green plus botton at right side to build command); Note: get file full path in shell: realpath target ;","tags":"Tech","url":"http://leetschau.github.io/notes-about-krusader.html","loc":"http://leetschau.github.io/notes-about-krusader.html"},{"title":"Login SSH Server without Password","text":"create public and private keys on client host: ssh-keygen , when asking for passphrase, press enter directly. This will create public key file(~/.ssh/id_rsa.pub) and private key file (~/.ssh/id_rsa); copy public key to remote ssh server: $ ssh-copy-id user@remote_server This will add the public keys of user@client_host into $HOME/.ssh/authorized_keys on the remote server. If ssh-copy-id complains \"No identities found\", you have to specify the identity file (your public key) manually: $ ssh-copy-id -i ~/.ssh/id_rsa.pub user@remote_server ; Now you can login remote server with ssh user@remote_server without entering password. If you want auto-login another remote server, only ssh-copy-id is needed. If later the remote_server won't trust client_host anymore, just delete the pub key line in /home/user/.ssh/authorized_keys on remote_server. If you want the help of your partner Bob on the remote server, let him login to it, you needn't tell him the password, just add his pub key into the server. After Bob finish his job, delete his pub key on the remote server.","tags":"Tech","url":"http://leetschau.github.io/login-ssh-server-without-password.html","loc":"http://leetschau.github.io/login-ssh-server-without-password.html"},{"title":"Notes about BSD","text":"FreeBSD: mainly for web server; OpenBSD: mainly for security concerned server;","tags":"Tech","url":"http://leetschau.github.io/notes-about-bsd.html","loc":"http://leetschau.github.io/notes-about-bsd.html"},{"title":"Use Gant as a Concise Enhancer of Ant","text":"Installation apt-get install groovy; apt-get install gant; or install gant manually: download gant-standalone_1.9.9-1_all.deb from http://gant.codehaus.org/Prepackaged+Distributions; dpkg -i gant-standalone_1.9.9-1_all.deb; Translate ant to gant write a ant script: < project name = \" MyHadoopRunner \" basedir = \" ./ \" default = \" run \" > < path id = \" lib.path \" > < fileset dir = \" /home/lichao/apps/hadoop-1.1.2 \" > < include name = \" **/*.jar \" /> </ fileset > </ path > < target name = \" compile \" > < javac srcdir = \" src \" destdir = \" bin \" classpathref = \" lib.path \" /> </ target > < target name = \" run \" depends = \" compile \" > < java classname = \" chapter1.WordCount \" classpathref = \" lib.path \" classpath = \" bin \" > < arg value = \" src \" /> < arg value = \" out \" /> </ java > </ target > </ project > download ant2gant.groovy from gant website; groovy ant2gant.groovy build.xml > build.gant ; gant .","tags":"Tech","url":"http://leetschau.github.io/use-gant-as-a-concise-enhancer-of-ant.html","loc":"http://leetschau.github.io/use-gant-as-a-concise-enhancer-of-ant.html"},{"title":"Install packages on a Internet-blocked Server","text":"Using Proxy Verified on Ubuntu Server 12.04, 2013-6-8. Start a goagent server at 10.21.3.31; Login in as root, modify any cn.archive... to us.archive... in /etc/apt/sources.list; Use proxy temporarily: export http_proxy=http://10.21.3.31:8087 ; Use it permament: add the following line to your /etc/apt/apt.conf(substitute your details for address and port): Acquire::http::Proxy \"http://10.21.3.31:8087\" ; Now you can use apt-get or wget to install something. Download & Install RPM-based Download from a internet-connected host Get rpm files from cache /var/cache/yum, or use 3rd-party tool yumdownloader: # yum install yum - utils # yumdownloader --resolve subversion Note you can add \"--urls\" to only list download urls instead of downloading RPMs, it can be used as \"dry-run\" mode; If yumdownloader can't resolve dependencies properly, see yumdownloader downloads only i686 resolved rpms for solutions. Instll on a isolated host # rpm - ivh < package - name > . rpm Debian-based aptitude Notice that 32bit and 64bit of some packages are uncompatible. So you want to download 64bit packages on a 32bit machine, you have to vagrant up a 64bit VM, download deb files and save them in shared folder. Download Download package and all its dependencies with aptitude: ` sudo aptitude --download-only install <package-name>` This will download deb files to /var/cache/apt/archives. Copy the package and all its dependencies to a folder then run sudo dpkg -i *.deb . If you are not sure about which is the related packages, use sudo aptitude clean to remove all existing .deb files before download. Verified by sudo aptitude --download-only install subversion on vagrant box precise64. sudo apt-get download <package-name> will download deb files to current directory, since it does not resolve dependencies. So it's not very useful. Install ` sudo dpkg - i * . deb ` Ref: http://stackoverflow.com/questions/13756800/how-to-download-all-dependencies-and-packages-to-directory http://stackoverflow.com/questions/4419268/how-do-i-download-a-package-from-apt-get-without-installing-it apt-offline Installation ` sudo aptitude install apt - offline ` Usage Specify what to install on the offline-machine: sudo apt-offline set --update --upgrade --install-packages subversion openjdk-6-jre ant -- apt-offline.sig ; Downlaod data on a internet-connected machine: apt-offline get --bundle mypack.zip -t 5 apt-offline.sig , where mypack is the downloaded archive and \"-t 5\" means \"download with 5 threads\"; Copy mypack.zip to the offline-machine and extract it: sudo apt-offline install mypack.zip ; Install it with sudo dpkg -i <packages>.deb .","tags":"Tech","url":"http://leetschau.github.io/install-packages-on-a-internet-blocked-server.html","loc":"http://leetschau.github.io/install-packages-on-a-internet-blocked-server.html"},{"title":"Package Repository for Ubuntu Offline Installation","text":"For example, we need install \"unzip\" command on a Ubuntu machine without Internet. On a online computer, google: unzip site:packages.debian.org, download unzip_6.0-8_i386.deb; scp unzip_6.0-8_i386 user@remoteServer:/home/user ; on remoteServer: dpkg -i unzip_6.0-8_i386 ; bingo.","tags":"Tech","url":"http://leetschau.github.io/package-repository-for-ubuntu-offline-installation.html","loc":"http://leetschau.github.io/package-repository-for-ubuntu-offline-installation.html"},{"title":"Install Postgresql database for Sonar","text":"Setup Postgresql Server Use \"cross distribution packages\" postgres_9.2.4-1.i386.openscg.deb and install it on Mint 14. This kind of installer can be installed without GUI environment, suitable for Ubuntu Server. Installer of Postgresql is much smaller than its mysql counterpart. You can follow the instructions at OpenSCG to setup server and manipulate data. Download \"cross distribution packages\" postgres_9.2.4-1.i386.openscg.deb; install it with dpkg -i ; start service: /etc/init.d/postgres-9.2-openscg start ; verify service: invoke-rc.d postgres-9.2-openscg status , and su postgres to verify if user postgres has been created; . /opt/postgres/9.2/pg92-openscg.env verify connection: psql , then you can see the postgresql prompt \"postgres=#\", use \"\\l\" to list all databases; Setup Connection between Sonar and Postgresql database build sonar database in Postgresql i. create user sonar: postgres=# create user sonar with password 'sonar'; , notice you must \";\" at end of command, i. verify: postgres=# \\du ; i. create database: postgres-# create database sonar with owner sonar encoding 'UTF8'; i. verify: postgres=# \\l ; modify sonar jdbc url: modify \"sonar.jdbc.url\" as \"jdbc:postgresql://localhost/sonar\" in file $SONAR_HOME/conf/sonar.properties (remember comment out default h2 jdbc url); start sonar server: $SONAR_HOME/bin/sonar.sh console ; verify: psql -h localhost -d sonar -U sonar , then sonar=> select table_name from information_schema.tables where table_schema='public'; , you can see \"49 rows\" at the bottom of the output; Note 2: When upgrade or reinstall SonarQube, and after modifying configuration file, you have to goto http://10.0.2.74:9000/setup to upgrade database manually, or you will see \"sonar is under maintenance. please check back later\". Enable Remote Access to Postgresql Server(unnecessary for Sonar) (updated at 2013.12.23: The following operation is very dangerous and not preferred. Ref: http://serverfault.com/questions/110154/whats-the-default-superuser-username-password-for-postgres-after-a-new-install/325596#325596 setup password for user postgres: sudo passwd postgres ; login as postgres: su postgres (the $HOME on Ubuntu should be /etc/postgres/9.2); add a line in data/pg_hba.conf: \"host all all 0.0.0.0/0 md5\"; modify listen_addresses=\"127.0.0.1\" to \"*\" in data/postgresql.conf; verify(on client machine): psql -h 10.21.3.31 -U postgres -d postgres (-U means username, -d means database); or use squirrel-sql client: download driver jar postgresql-9.2-1002.jdbc4.jar at jdbc.postgresql.org and copy to $SQUIRREL_HOME/lib, start squirrel-sql, create a connection with url=\"jdbc:postgresql://10.21.3.31/postgres\", username=\"postgres\" and password=\"...\";","tags":"Tech","url":"http://leetschau.github.io/install-postgresql-database-for-sonar.html","loc":"http://leetschau.github.io/install-postgresql-database-for-sonar.html"},{"title":"Reuse Sonar Checkstyle Violation Report for Custom Data Analysis","text":"Write a violation rules file; Import it into Sonar as a Quality Profile named as \"MyRules\"; Add the following properties to ant script: Run Ant script, and you can get the report at $PROJECT_HOME/.sonar/checkstyle-result.xml; Use the following python script to extract data from the report: from xml.etree import ElementTree as ET tree = ET.parse('/path/to/checkstyle-result.xml') root = tree.getroot() cycleCnt = 0 nestCnt = 0 for error in root.iter('error'): msg = error.get('message') if msg.startswith('Cyclomatic'): cycleCnt += 1 if msg.startswith('Nested'): nestCnt += 1 print \"Cyclomatic:\",cycleCnt,\"Nested:\",nestCnt See \"Section 19.7: xml.etree.ElementTree\" of documentation of Python 2.7.5 for details.","tags":"Tech","url":"http://leetschau.github.io/reuse-sonar-checkstyle-violation-report-for-custom-data-analysis.html","loc":"http://leetschau.github.io/reuse-sonar-checkstyle-violation-report-for-custom-data-analysis.html"},{"title":"Share Keyboard, Mouse and Clipboard between Multiple Computers","text":"Synergy version: 1.4.12 Server Download and install synergy-1.4.12-Linux-i686.deb on Mint 14; Run it under Desktop mode (in [Edit -> Settings -> Advanced -> Process mode]); Click \"Configure Server\", drag a new \"Desktop\"(at the upper-right corner) to grid, then double click it and assign it a name \"mylaptop\"; Click \"Start\" button, you can see \"Synergy is running (desktop mode)\" at the bottom of the main panel, or use netstat -an|grep 24800 to verify it starting successfully; Client Download and install synergy-1.4.12-Windows-x86.exe on Windows 7; Run it under Desktop mode as server does, enter \"mylaptop\" at [Edit -> Settings -> Advanced -> Screen name]; In main panel, select \"Client\" mode and enter server ip address, then click \"Start\", you can see \"Synergy is running (desktop mode)\"; Now you can copy some text in PC and paste it to somewhere in laptop.","tags":"Tech","url":"http://leetschau.github.io/share-keyboard-mouse-and-clipboard-between-multiple-computers.html","loc":"http://leetschau.github.io/share-keyboard-mouse-and-clipboard-between-multiple-computers.html"},{"title":"Manually install packages with apt-get","text":"download packages with apt-get: sudo apt-get -d install mysql-server ; verify downloaded packages: ls -lht /var/cache/apt/archives | grep mysql ; copy packages to destination machine; install packages: dpkg -i *.deb...","tags":"Tech","url":"http://leetschau.github.io/manually-install-packages-with-apt-get.html","loc":"http://leetschau.github.io/manually-install-packages-with-apt-get.html"},{"title":"Cursor move in vi","text":"参考:h scrolling 或者 google: vi scroll 光标移动（屏幕内容变化） 以字符为单位：h,j,k,l；以单词为单位：w/W,e/E,b/B 移动到行首：0，到行内第一个非空字符：&#94;，到行尾：$ 移动到文档首/尾：gg, G 跳转到第 行行首： G，不写k则跳转到最后一行 移动到第n行：nG或者ngg 移动到屏幕中间行的行首: M 移动到第n列：n| 移动到一行的屏幕中心位置：gm 移动到屏幕上的行首、行尾：g0, g$ 移动到文档的80%处：80% 跳转到光标上次停靠的地方：''（两个单引号） 跳转到相匹配的括号处：% 跳转到局部变量定义处：gD 向前/后翻一整页：ctrl+b/f 向前/后翻指定行：ctrl+u/d（浏览文件的时候很有用！可用:set scroll=n设置行数值） 光标移动（屏幕内容不变） 移动到当前窗口顶端/中间/底部的行首：H/M/L 移动到第n行：nH 移动到倒数第n行：nL 相对于光标滚动（光标不动，屏幕内容变化） 水平滚动 让光标处在屏幕左/右边（相对于看光标的右/左侧文字）：zs, ze; 垂直滚动 光标处于屏幕底部(bottom）/顶部（top）/中部：zb, zt, zz;","tags":"Tech","url":"http://leetschau.github.io/cursor-move-in-vi.html","loc":"http://leetschau.github.io/cursor-move-in-vi.html"},{"title":"Note about marks in vi","text":":h marks or Using marks for detailed info. Type of marks a ~ z: valid within one file, erased when file closed; A ~ Z: valid between files, you can use these marks jump between files; 0 ~ 9: reserved for vi use; Frequently used actions (use \"a\" as mark name) set marks: ma jump to marks(line and column): `a junp to marks(line head): 'a list all marks: :marks delete all marks: :delm!","tags":"Tech","url":"http://leetschau.github.io/note-about-marks-in-vi.html","loc":"http://leetschau.github.io/note-about-marks-in-vi.html"},{"title":"Directories Sync Utility on Mint","text":"Meld (GUI App) TotalCommander's Mint(Ubuntu) counterpart is \"Meld\". It supports command-line invocation, much slower than TotalCmd, and its visual filters and backup policies are all weaker than that of TotalCmd (See dsnote \" Auto Dir Sync Script Based on Total Commander \" for details). Use it from command line: meld dir1 dir2 Note: Gnome-commander is much like TotalCmd, and it can use Meld as sync tools. rsync rsync - rtvu --delete <src_folder> <dst_folder> for example: rsync - rtvu -- delete ~/ Documents / CalibreLib / ' chad @10.21.3.31 :/ home / chad / Calibre Library ' very slow. Maybe you can fast it with adding a \"-c\" parameter(checksum): rsync -rtuvc ... In parameter list, r means recursive (including subdirs); t meas preserve modification time of the files; v means verbose; u means update, if the file in dst is newer than that in src, it will not be copied; --delete means delete files in destination folder which not exist in source folder. Note: never forget the trailing slash of src_folder (that after dst_folder is unnecessary), or src_folder will be copied into the dst_folder. Ref: Synchronizing folders with rsync","tags":"Tech","url":"http://leetschau.github.io/directories-sync-utility-on-mint.html","loc":"http://leetschau.github.io/directories-sync-utility-on-mint.html"},{"title":"Note about \"Learn You Some Erlang for Great Good\"","text":"Chapter 8 In road.erl, to demonstrate the process of folding on path tuple, you can add the following sentence after the line OptB2=... in method \"shortest_step\": io : format ( \"OptA1=~p, OptA2=~p, OptB1=~p, OptB2=~p~n\" , [ OptA1 , OptA2 , OptB1 , OptB2 ]), The last sentence of road.erl in main method could also be erlang:halt(). , while in book it's erlang:halt(0). . Both work ok. chapter 13 In event.erl and evserv.erl, you can add the following line before every Pid ! Message to trace message flows between processes: io:format(\"~p send msg ~p to ~p~n\", [self(), Message, Pid]), In sup.erl, if you modify {'EXIT', _From, shutdown} -> to {'EXIT', _From, shutup} -> in loop/1, you will have to use \"exit(SupPid, shutup).\" instead of \"exit(SupPid, shutdown).\" to shutdown the sup process. See process_flag/2 and exit/2 for explanations; Chapter 14 In kitty_server.erl, return_cat/2 put a cat in the shop (actually the list Cats, the parameter of loop/1). While order_cat/4 do 2 things: if shop is empty, create and return a new cat (then you can use return_cat to add this cat to shop), otherwise return the head of Cats. You can use folloing codes to verify(tom and bob are both set free): Pid = kitty_server:start_link(). C1 = kitty_server:order_cat(Pid, tom, yellow, \"shinny\"). rr(kitty_server). C2 = #cat{name=bob}. kitty_server:return_cat(Pid, C1). kitty_server:return_cat(Pid, C2). kitty_server:close_shop(Pid). monitor technique in above kitty_server.erl: When Ref = erlang:monitor(process, Pid). , the calling process is \"monitoring\" Pid, which means 2 things: when Pid is down, the calling process will receive a 'DOWN' message; if the monitored target is a naming process, adding the Ref in message can guarantee correctness after target restarted (see \"Naming Process\" of chapter 12 for details); You can use i(). or etop:start(). in erlang shell to list all processes; use process_info(Pid) to print detailed information about the Pid; use regs(). to list all registered processes; Chapter 15 Use trade_calls:main_ab(). to demonstrate the use of trade_fsm; Chapter 16 \"curling_scoreboard\" is a callback module (a handler in gen_event context). The return value of its init/1 function is {ok, State} (see erlang doc: gen_event: Module:init/1). So curling_scoreboard store the PID of client in its internal State variable (from ToPid in curling:join_feed/2, which called by curling:join_feed(Pid, self()). ). At curling:add_points(Pid, \"T1\", 2). , both registered handlers receive message {add_points, Team, N}). Handler curling_scoreboard prints two message to show points are added. While handler curling_feed send a message it received to client process (the Pid in its handle_event/2 function, see erlang doc gen_event:Module:handle_event/2 for API specification); Chapter 21 On p341, when set target directory as \"~/docs/erlang/ppool-1.0\" there is a exception. But when set it as \"~/docs/erlang\" everything goes fine: $ ./erts-5.9.1/bin/erl -boot releases/1.0.0/start -erlcount directory '\"/home/lichao/docs/erlang/\"' -noshell systools is simple than Reltool, which is much powerful than systools. Rebar can do release job, too. See Erlang rebar tutorial: generating releases and upgrades by Richard Jones; Chapter 22 On p361, you have to modify the value of \"lib_dirs\" in file processquest-1.0.0.config at the root directory of processquest to the path where your \"apps\" directory resides, in my computer it's \"/home/lichao/docs/erlang/processquest/apps\" because I copy processquest to /home/lichao/docs/erlang. Then you can execute \"{ok, Conf} = ... reltool:eval_target_spec...\", and a bunch of files will be created under the \"rel\" directory under processquest.","tags":"Tech","url":"http://leetschau.github.io/note-about-learn-you-some-erlang-for-great-good.html","loc":"http://leetschau.github.io/note-about-learn-you-some-erlang-for-great-good.html"},{"title":"Multimedia Functions of Mint","text":"We can use Calibre to manage e-books, gThumb to Pictures. Only Calibre need to be installed. Music Use banshee to sync between laptop and ipod. Banshee is a build-in application of Mint 14. It can copy songs on ipod to laptop (default music library on disk is ~/Music). So if you want add some songs to ipod: Plug ipod to USB port of your laptop; Start banshee, you can see your ipod name (\"chadpod\" for me) under the \"Devices\" on the left column of banshee panel; Make sure all the songs on your ipod have been added to banshee library. If not, drag the songs from ipod to \"Libraries -> Music\"; Select your ipod, under \"Sync Preferences\", modify the value of \"Music\" from \"Manage manually\" to \"Sync from ???Recently Added???\", then click \"Sync\" button at the upper-right corner of the panel; Click \"Disconnect\" button nearby the \"Sync\" button, then unplug the ipod from USB port of your laptop; Note: Use \"EasyTag\" to modify file tags;","tags":"Tech","url":"http://leetschau.github.io/multimedia-functions-of-mint.html","loc":"http://leetschau.github.io/multimedia-functions-of-mint.html"},{"title":"The essential of HIght Order Functions","text":"The ordinary function: fun(x, y) = x + y, x * y, ... High order function： fun(x, y) = x(y), ... (where x is a function) So the essential power of high order function is combining its parameters in the form: x(y), which is impossible appeared in ordinary functions.","tags":"Tech","url":"http://leetschau.github.io/the-essential-of-hight-order-functions.html","loc":"http://leetschau.github.io/the-essential-of-hight-order-functions.html"},{"title":"Code Metrics Management with Sonar","text":"I added coverage test with cobertura and test the demo project built yesterday. Then I add Sonar Ant task in the ant script and saved test result into Sonar database. The following is a standard build script(add junit-4.*.jar and cobertura.jar to $ANT_HOME/lib, in Ubuntu it is /usr/share/ant/lib): <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project name= \"MyJavaProj\" basedir= \"./\" default= \"coverage_report\" > <property name= \"build.dir\" value= \" ${ basedir } /build\" /> <target name= \"init\" > <delete dir= \" ${ build . dir } \"/ > <mkdir dir= \" ${ build . dir } \"/ > </target> <property name= \"src.dir\" value= \" ${ basedir } /src\" /> <property name= \"src.class.dir\" value= \" ${ build . dir } /class\" /> <target name= \"compile-src\" depends= \"init\" > <mkdir dir= \" ${ src . class . dir } \"/ > <javac srcdir= \" ${ src . dir } \" destdir= \" ${ src . class . dir } \" encoding= \"UTF-8\" debug= \"true\"/ > </target> <taskdef classpath= \"cobertura.jar\" resource= \"tasks.properties\" /> <property name= \"instrumented.class.dir\" value= \" ${ build . dir } /instrumented-class\" /> <property name= \"cobertura.data.file\" value= \" ${ instrumented . class . dir } /cobertura.ser\" /> <target name= \"instrument\" depends= \"compile-src\" > <cobertura -instrument datafile= \" ${ cobertura . data . file } \" todir= \" ${ instrumented . class . dir } \" > <fileset dir= \" ${ src . class . dir } \" > <include name= \"**/*.class\" /> </fileset> </cobertura-instrument> </target> <property name= \"test.dir\" value= \" ${ basedir } /test\" /> <property name= \"test.class.dir\" value= \" ${ build . dir } /test\" /> <target name= \"compile-test\" depends= \"instrument\" > <mkdir dir= \" ${ test . class . dir } \"/ > <javac srcdir= \" ${ test . dir } \" destdir= \" ${ test . class . dir } \" > <classpath> <pathelement location= \" ${ instrumented . class . dir } \"/ > <pathelement location= \" ${ src . class . dir } \"/ > </classpath> </javac> </target> <property name= \"unittest.report.dir\" value= \" ${ build . dir } /unittest_report\" /> <property name= \"lib.dir\" value= \" ${ basedir } /lib\" /> <target name= \"unittest\" depends= \"compile-test\" > <mkdir dir= \" ${ unittest . report . dir } \"/ > <junit printsummary= \"yes\" fork= \"yes\" > <sysproperty key= \"net.sourceforge.cobertura.datafile\" file= \" ${ cobertura . data . file } \" /> <classpath> <pathelement location= \" ${ instrumented . class . dir } \"/ > <pathelement location= \" ${ src . class . dir } \"/ > <pathelement location= \" ${ test . class . dir } \"/ > <pathelement location= \" ${ src . dir } \"/ > <path refid= \"lib.path\"/ > </classpath> <formatter type= \"xml\"/ > <batchtest todir= \" ${ unittest . report . dir } \" haltonerror= \"no\" > <fileset dir= \" ${ test . dir } \" > <include name= \"**/*.java\" /> </fileset> </batchtest> </junit> </target> <property name= \"coverage.report.dir\" value= \" ${ build . dir } /coverage_report\" /> <target name= \"coverage-report\" depends= \"unittest\" > <cobertura -report datafile= \" ${ cobertura . data . file } \" srcdir= \" ${ src . dir } \" destdir= \" ${ coverage . report . dir } \" format= \"xml\" /> </target> <property name= \"sonar.jdbc.url\" value= \"jdbc:h2:tcp://localhost:9092/sonar\" /> <property name= \"sonar.jdbc.username\" value= \"sonar\" /> <property name= \"sonar.jdbc.password\" value= \"sonar\" /> <property name= \"sonar.projectKey\" value= \"com.doco.gif.MyModule\" /> <property name= \"sonar.projectName\" value= \"My Unit Test Project Demo\" /> <property name= \"sonar.projectVersion\" value= \"2.1\" /> <property name= \"sonar.language\" value= \"java\" /> <property name= \"sonar.sources\" value= \"src\" /> <property name= \"sonar.tests\" value= \"test\" /> <property name= \"sonar.binaries\" value= \" ${ src . class . dir } , ${ test . class . dir } , ${ build . instrument . dir } \" /> <property name= \"sonar.dynamicAnalysis\" value= \"reuseReports\" /> <property name= \"sonar.surefire.reportsPath\" value= \" ${ unittest . report . dir } \" /> <property name= \"sonar.core.codeCoveragePlugin\" value= \"cobertura\" /> <property name= \"sonar.cobertura.reportPath\" value= \" ${ coverage . report . dir } /coverage.xml\" /> <target name= \"sonar\" depends= \"coverage-report\" > <taskdef uri= \"antlib:org.sonar.ant\" resource= \"org/sonar/ant/antlib.xml\" > <classpath path= \"/usr/share/ant/lib/sonar-ant-task-2.1.jar\" /> </taskdef> <sonar:sonar xmlns:sonar= \"antlib:org.sonar.ant\" /> </target> </project> To run this script successfully: Build a demo java project and put this script at project root; Copy sonar-ant-task-2.1.jar and junit-4.11.jar to $ANT_HOME/lib; Start Sonar server: $SONAR_HOME/bin/sonar.sh console; Run this script: ant sonar; Note You have to add \"sonar.core.codeCoveragePlugin\" or coverage result can't be collected by Sonar. This is not mentioned in official documents Code Coverage by Unit Tests for Java Project ; Take care of the spelling: \"sonar.surefire.report s Path\" while \"sonar.cobertura.reportPath\"; The \"xmlns:sonar=\"antlib:org.sonar.ant\" in \"sonar:sonar\" is necessary or the prefix \"sonar\" would be unbound; If unit test results can't be collected by Sonar, try to specify \"sonar.binaries\" carefully as above shows; The value of junit report path \"sonar.surefire.reportsPath\" is a directory (because there are lots of reports under this folder), while the value of cobertura report is a file , if sonar can not get junit or cobertura report, verify these settings; If there are \"class xxx is not accessible through the ClassLoader.\" in output of sonar task, there are two solutions: Remove property \"sonar.binaries\", where Sonar will not check bytecode; In case you want Sonar check bytecodes, add property \"sonar.libraries\" like follows:","tags":"Tech","url":"http://leetschau.github.io/code-metrics-management-with-sonar.html","loc":"http://leetschau.github.io/code-metrics-management-with-sonar.html"},{"title":"Note about Cobertura","text":"Workflow of Unit Test without Cobertura compile source code; compile test code; run unit test; Workflow of Uniit Test with Cobertura compile source code; instrument source code; compile test code based on instrumented source code(instrumented class file of source code in fact); run unit test; build unit test and coverage report;","tags":"Tech","url":"http://leetschau.github.io/note-about-cobertura.html","loc":"http://leetschau.github.io/note-about-cobertura.html"},{"title":"Goagent 3.0.1 on Mint 14","text":"download goagent-goagent-v3.0.1-11-gfaa05a1.zip; unzip goagent-goagent-v3.0.1-11-gfaa05a1.zip -d apps cd $GOAGENT_HOME/server; python uploader.zip , you have to enter you app id (ltsc), email address and password; vi $GOAGENT_HOME/local/proxy.ini ; modify appid; python goagent-gtk.py & , then close terminal; bingo.","tags":"Tech","url":"http://leetschau.github.io/goagent-301-on-mint-14.html","loc":"http://leetschau.github.io/goagent-301-on-mint-14.html"},{"title":"Unit Test with JUnit and Ant","text":"I put junit-4.11.jar to $ANT_HOME/lib folder(I didn't set ANT_HOME environment virable), then I can use task in ant script as follows: \\({test.report.dir}\"/> <junit printsummary=\"yes\" fork=\"yes\"> <classpath> <pathelement location=\"\\) {src.class.dir}\"/> \\({test.class.dir}\"/> <pathelement location=\"\\) {lib.dir}/hamcrest-core-1.3.jar\" /> \\({test.report.dir}\" haltonerror=\"no\"> <fileset dir=\"\\) {test.dir}\"> A pitfall here is that Junit depends on hamcrest(see junit website), but if you put hamcrest-core-1.3.jar to $ANT_HOME/lib, there will be a \"Class not found\" error. It's probably a bug or version matching problem of junit. You have to put hamcrest jar file in \"classpath\" element of junit task as above. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/unit-test-with-junit-and-ant.html","loc":"http://leetschau.github.io/unit-test-with-junit-and-ant.html"},{"title":"Powerful Application Launcher on Linux DE","text":"Run Applications In i3wm, the best choice is dmenu . The following tools are only for Xfce Desktop Environment. The built-in Application Finder on Xfce4 has a collapsed version, which is activated with shortcut key Alt-F2 . It's by far the most convenient app launcher. It can remember you input history and auto-complete next time you input it. And it can run any executable scripts in your $PATH. So you can easily run you custom scripts with Alt-F2 in Xfce DE. Some examples First add PATH=\"$PATH:$HOME/.local/bin\" into you ~/.zshenv file. Chromium with proxy settings: cat << EOF > ~/ . local / bin / chrom export http_proxy = https : // localhost : 1080 export https_proxy = https : // localhost : 1080 chromium - browser EOF chmod 755 ~/ . local / bin / chrom For the first time run chromium browser, press Alt-F2 and input chrom . Next time just press Alt-F2 and input ch , app finder will auto-complete and press key to start the browser. Wechat (微信) wrapped in electron: cat << EOF > ~/ . local / bin / wechat $ HOME / apps / electronic - wechat - linux - x64 / electronic - wechat EOF chmod 755 ~/ . local / bin / wechat Start the app with Alt-F2 and wechat . Wiznote in AppImage format: cat << EOF > ~/ . local / bin / wiznote $ HOME / apps / WizNote - 2 . 5 . 9 - x86_64 . AppImage EOF chmod 755 ~/ . local / bin / wiznote Start the app with Alt-F2 and wiznote . File browser and web searcher The best one is Ulauncher . Download its deb installer and install manually. The default activation key shortcut is Ctrl-Space , which may conflicted with input method. You can modify it to Alt-j for example. The following exo-open also works. But the UE and extensibility can't compared with ulauncher. exo-open exo-open is a powerful and build-in command-line launcher in Xfce, like Executor on Windows. You can see man exo-open or http://docs.xfce.org/xfce/xfce4-appfinder/preferences for details. For example, the difference of %s and %S. Custom Actions You can define some custom actions in Application Finder, then trigger it with \"Alt + F2\" and some text. Defining custom actions like as follows: Application Finder(Alt + F3) -> Preferences(A button on Application Finder window) -> Custom Actions: search things with web browser Type: Prefix Pattern: s. Command: firefox 'http://www.bing.com/search?q=%s' or: exo-open --launch WebBrowser 'http://www.google.com.hk/search?q=%s' note: you can try to start google search from command line by some script, see http://www.if-not-true-then-false.com/2009/google-search-from-linux-and-unix-command-line/ Run a terminal command this is a build-in example in Mint 14. Type: Prefix Pattern: ! Command: exp-open --launch TerminalEmulator %s note: so you can write a file in vi by this: Alt + F2, !vi open a directory Type: Prefix Pattern: / Command: exo-open --launch FileManager %S Note1: here if you input \"/opt/jre-1.6\", then the first charactor \"/\" is part of your command, so you have to use %S instead of %s. Note2: you can use keyboard to location folders in Thunar , the file manager of Xfce. Open SVN Repository with rabbitvcs Type: Prefix Pattern: svn. Command: rabbitvcs browser http://10.0.2.59:8118/svn/%s Note: you have to install rabbitvcs with apt-get. Run a GUI app Application Finder(Alt + F3) -> keyboard -> Application Shortcuts: Click \"Add\"; Command: \"exo-open --launch FileManager /home/chad/apps/eclipse-java-juno-SR2-linux-gtk/eclipse\", or \"exo-open './docs/learn_you_erlang.pdf'\", or \"exo-open --launch TerminalEmulator xfce4-terminal --fullscreen\" to open terminal in fullscreen mode, man xfce4-terminal for full launch options; Press \"OK\"; Shortcuts: press key combinations you choose; gmrun (deprecated) Install it with the name \"gmrun\" in Software Manager; You can use ! to turn on \"Search\" mode to search in your command history; Ctrl+Enter works fine for terminal command (like vi, or you can append \"read -p somePromp\" to your command to prevent window vanish); verve It can be embedded into pannel; Add a command \"verve-focus\" to \"Keyboard -> Application Shortcuts\" to focus verve with a keyboard shortcut; Install it with the name \"verve\" in Software Manager (full name is \"xfce4-verve-plugin); Ctrl+Enter (run command in terminal) does not work;","tags":"Tech","url":"http://leetschau.github.io/powerful-application-launcher-on-linux-de.html","loc":"http://leetschau.github.io/powerful-application-launcher-on-linux-de.html"},{"title":"Build Clojure Develop Environment","text":"Install chocolatey ; default installation place is C:\\, maybe you can change it; Install leiningen: cinst leiningen -Pre ; start up clojure REPL with lein repl ;","tags":"Tech","url":"http://leetschau.github.io/build-clojure-develop-environment.html","loc":"http://leetschau.github.io/build-clojure-develop-environment.html"},{"title":"Xfce is a Good Desktop Choice","text":"Try out Mint Xfce(linuxmint-14-xfce-dvd-32bit.iso) in Virtual Box this morning. It's fast(duo to Xfce), beautiful and customizable(convenient than LXDE's openbox). I installed Terminator and erlang from its \"Software Manager\", and shell command \"tree\" from apt-get smoothly. Application Finder(Alt + F3) and Window Manager are also helpful and powerful. Some frequently used shortcuts including(all defined in Window Manager -> Keyboard): Show Desktop: Alt + Ctrl + z (the defaut A-C-d is unconvenient); Minimize Window: Alt + F9; Maximize/Restore Window: Alt+F10; Go to workspace 1/2/3/4: Ctrl + F1/F2/F3/F4; I defined a shortcut(Alt + T) for Terminator in Application Finder -> keyboard -> Application Shortcuts. Customize Desktop right click on panel -> Panel -> Panel Preferences: make panel vertical: Display -> Mode: Vertical; remove time, date and \"Menu\" from panel: Items: select time and date item and click remove button on the right side; add desktop clock: see note \" Use Conky as Desktop Clock on Xfce \"; only display window icon (no title) on panel: Item -> Window Buttons -> Edit -> Uncheck \"Show button labels\"; make panel semi-transparent: Appearance: Background -> Style: Background Image; Opacity -> Enter: 100, Leave: 50; (you have to use \"AppFinder -> Window Manager Tweaks -> Compositor: Enable display compositing\" to make Opacity value adjustable. You can also make window semi-transparent when moving by setting \"Opacity of windows during move\", which is a sub-option of \"Enable display compositing\"); Get desktop resolution: ~/.config/xfce4/xfconf/xfce-perchannel-xml/displays.xml:","tags":"Tech","url":"http://leetschau.github.io/xfce-is-a-good-desktop-choice.html","loc":"http://leetschau.github.io/xfce-is-a-good-desktop-choice.html"},{"title":"Use Lubuntu Desktop on Ubuntu 12.04","text":"See Ubuntu 12.04 - How to install the Lubuntu Desktop . Lubuntu desktop responds much faster than Ubuntu Unity, but it has no keyboard shortcut definition. You have to edit ~/.config/openbox/lubuntu-rc.xml. Maybe you can use autokey, but it's really slow in my test.","tags":"Tech","url":"http://leetschau.github.io/use-lubuntu-desktop-on-ubuntu-1204.html","loc":"http://leetschau.github.io/use-lubuntu-desktop-on-ubuntu-1204.html"},{"title":"Debug Erlang Program","text":"Verified on Ubuntu 12.04 Desktop. Assume debugged method is add2/2 in fordebug module as follows: - module ( fordebug ). - export ([ add / 3 ]). add ( A1 , A2 , A3 ) when is_integer ( A1 ), is_integer ( A2 ), is_integer ( A3 ) -> add ( A1 , A2 ) * 100 + A3 ; add ( _ , _ , _ ) -> error . add ( A1 , A2 ) when A1 >= 0 , A2 >= 0 -> A1 + A2 ; add ( _ , _ ) -> - 1 . GUI Debugger Compile source files with \"debug_info\" flag: in erlang REPL window, c(fordebug, debug_info). ; Start GUI debugger: debugger:start(). , then \"Monitor\" window appears; Config source file breakpoint: i. [Module -> Interpret], choose the source file to be debuged(in Monitor window); i. in Monitor window, double click fordebug, then the \"View Module\" window appears, set breakpoint here; begin debug: in erlang REPL window, fordebug:add(3,4,5). , in Monitor window you can see a row under \"PID\", double click it, the \"Attach Process\" window appears, you can see source code at the top pannel, step, continue program execution by bottons at the center, see values of variables in the bottom-right pannel, and evaluate variables at the bottom-left pannel; GUI debugger with the help of i module use ih(). to show help messages of i module.Repeat above procedure: c(fordebug, debug_info). im(). % start Monitor window ii(fordebug). % add mySrcFile to Monitor, %% use iq(mySrcFile) to remove mySrcFile from Monitor %% use il(). showing all interpreted modules ib(fordebug, add, 2). % add breakpoint to at the first line of every clause of add/2 %% ir(). % clear all breakpoints %% ipb(). % print all breakpoints iaa([init]). % attach to a debugger process automatically fordebug:add(4,6,8). % now Attach Process window appears, you can debug code in it NOTE: when doing this in sublime text, erlang shell hangs after debug process ends. So it's recommended to debug in console. Command-line Debugger(not complete) dbg:start(). dbg:tracer(). dbg:tp(mySrcFile, bingo.","tags":"Tech","url":"http://leetschau.github.io/debug-erlang-program.html","loc":"http://leetschau.github.io/debug-erlang-program.html"},{"title":"On Tail Recursion","text":"The essential advantage of tail recursion comparing with ordinary recursion is the efficiency. Why time & space cost of tail recursion is linear while ordinary recursion is more? Chapter 5 of \"Learn You Some Erlang for Great Good\" by Fred Hebert gives a very concise and intuitive answer: tail recursion is \"alone\". Following is an example of factorial algorithms to show the difference between these two. Ordinary Recursion: fac(N) when N > 0 -> N * fac(N-1). Tail Recursion: tail_fac(N, Acc) when N > 0 -> tail_fac(N-1, N*Acc). So you see, ordinary recursion is \"func(state N) -> do something transformation of func(state N-1)\", while tail recursion is \"func(state N) -> func(state N-1)\". This is exact meaning of \"alone\" above.","tags":"Tech","url":"http://leetschau.github.io/on-tail-recursion.html","loc":"http://leetschau.github.io/on-tail-recursion.html"},{"title":"归并目录的Python实现","text":"待分析项目是OSGi结构，源代码目录src散布在多个模块目录下（如origin目录所示），现在需要分析整个项目的源代码，要将各个src目录下的所有内容合并到一起， origin ├── mod1 │ ├── conf │ │ └── app.conf │ ├── lib │ │ └── dep.jar │ └── src │ └── com │ └── boco │ └── d21.java ├── mod2 │ ├── conf │ │ └── app.conf │ ├── lib │ │ └── dep.jar │ └── src │ └── com │ └── boco │ └── d22.java └── build.xml 合并后的目录结构如下： final ├── mod1 │ ├── conf │ │ └── app.conf │ └── lib │ └── dep.jar ├── mod2 │ ├── conf │ │ └── app.conf │ └── lib │ └── dep.jar ├── build.xml └── src └── com └── boco ├── d21.java └── d22.java Python实现如下： import os import distutils.dir_util basedir = '/home/chad/tmp/final' src_name = 'src' for root, dirs, files in os.walk(basedir): print 'root = ', root if root.endswith(src_name): dst = basedir+'/'+src_name distutils.dir_util.copy_tree(root, dst) distutils.dir_util.remove_tree(root) print 'move ', root, ' to ', dst 可以注释掉remove_tree一行，从而验证拷贝过程中是否丢失了文件。","tags":"Tech","url":"http://leetschau.github.io/gui-bing-mu-lu-de-pythonshi-xian.html","loc":"http://leetschau.github.io/gui-bing-mu-lu-de-pythonshi-xian.html"},{"title":"Change a file's default open application","text":"I want open download_jnlp.jsp by java web start. It is associtated to another app by system. Now I have to change the app to This is achieved by 2 steps: Add new application to [Open With -> Other Application] Create a file named jsw.desktop in ~/.local/share/applications: [Desktop Entry] Categories=; Comment=Open file with java web start Exec=/opt/jre1.6.0_14/bin/javaws %f GenericName=Process Viewer Hidden=false Icon=jws Name=jws Terminal=false Type=Application Version=1.0 See Add new application to Open With Other Application… for details. Make jws the default app to open this file right click download_jnlp.jsp -> Properties -> Open With: select \"jws\" and click \"Set as default\"; Bingo!","tags":"Tech","url":"http://leetschau.github.io/change-a-files-default-open-application.html","loc":"http://leetschau.github.io/change-a-files-default-open-application.html"},{"title":"Cancel System tray auto-hide on Ubuntu 12.04","text":"gsettings set com.canonical.Unity.Panel systray-whitelist \"['all']\" See http://blog.ubuntusoft.com/solve-the-ubuntu-unity-system-tray-does-not-display-images-that-are-part-of-the-program.html","tags":"Tech","url":"http://leetschau.github.io/cancel-system-tray-auto-hide-on-ubuntu-1204.html","loc":"http://leetschau.github.io/cancel-system-tray-auto-hide-on-ubuntu-1204.html"},{"title":"CodeReview of JDK Source Code","text":"jdk1.6.0_35/src.zip, only java package is reviewd(full package review caused a OutofMemory on java heap size). Checkstyle Review tyRules.xml: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"> <module name= \"Checker\" > <property name= \"severity\" value= \"warning\" /> <module name= \"TreeWalker\" > <metadata name= \"net.sf.eclipsecs.core.lastEnabledSeverity\" value= \"inherit\" /> <property name= \"fileExtensions\" value= \"java\" /> <module name= \"MethodLength\" > <property name= \"max\" value= \"200\" /> </module> <module name= \"NestedIfDepth\" > <property name= \"max\" value= \"5\" /> </module> <module name= \"CyclomaticComplexity\" /> <module name= \"ParameterNumber\" > <property name= \"max\" value= \"6\" /> </module> </module> <module name= \"StrictDuplicateCode\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"min\" value= \"75\" /> </module> <module name= \"FileLength\" > <property name= \"fileExtensions\" value= \"java\" /> <property name= \"max\" value= \"1000\" /> </module> </module> Run code review java - jar checkstyle - 5 . 6 - all . jar - c tyRules . xml - r / home / chad / tmp / jdksrc - o result . txt Get Review Result grep \" Method length is \" result . txt | wc - l grep \" Nested if-else depth is \" result . txt | wc - l grep \" More than 6 parameters \" result . txt | wc - l grep \" max allowed is 1,000 \" result . txt | wc - l grep \" Found duplicate of \" result . txt | wc - l grep \" Cyclomatic Complexity is \" result . txt | wc - l Sonar Review sonar-project.properties: sonar . projectKey = jdk . sonar . analysis sonar . projectName = JDK sonar . projectVersion = 1 . 6 sonar . sources = jdksrc sonar . login = liuyan sonar . password = liuyan sonar . language = java sonar . profile = TongYong sonar . skipDesign = true sonar . dynamicAnalysis = false Run code review / opt / sonar - server / runner / sonar - runner - 2 . 2 / bin / sonar - runner The profile TongYong is imported from above tyRules.xml. Result From Sonar Lines of code: 202,505 (NBNC, not blank not comment code lines); 559,577 lines (total lines = NBNC + blank + comment); Above can be verified by cloc. 2172 Classes, 21,275 methods, 675 method cyclomatic complexity are greater than 10, Cyclomatic Complxity GCP: 298/6276 = 4.75% JDK: 674/21275 = 3.17% Duplicate Lines GCP: JDK: 825/","tags":"Tech","url":"http://leetschau.github.io/codereview-of-jdk-source-code.html","loc":"http://leetschau.github.io/codereview-of-jdk-source-code.html"},{"title":"Jenkins User Management using Role-based Strategy","text":"Build-in authorization method of Jenkins (described in note \"Jenkins user account configurations\") have to deal with user rights one by one. The following role-based method can create some roles and assgin some users to a role. Install Role Strategy Plugin; Start Jenkins Server; Jenkins -> Manage Jenkins -> Global Security -> enable security; Select \"Jenkins's own user database\" as the security realm; Check \"Allow user to sign up\"; Select \"Authorizaiton -> Role-based Strategy\"; Manage Jenkins -> Manage and Assign Roles -> Manage Roles: create a role \"admin\" with all rights, \"proj_leader\", check Overall->Read and all of Jobs, Run, View and SCM; Manage Jenkins -> Manage and Assign Roles -> Assign Roles: create user \"admin\" and assign role \"admin\" to it, create user \"chad\" and assign role \"proj_leader\" to it; Note: Ensure Overall->Read & Job->Discover is checked for user \"Anonymous\", or a 404 error will raised; When user rights definition is changed, no need to restart Jenkins service to take effect; Chinese charactor in user name is allowed and verified;","tags":"Tech","url":"http://leetschau.github.io/jenkins-user-management-using-role-based-strategy.html","loc":"http://leetschau.github.io/jenkins-user-management-using-role-based-strategy.html"},{"title":"Quality Profile in Sonar","text":"Quality profile of sonar is a set of check rules, like the rulesets of Checkstyle. You can create/modify/backup/rename/delete a profile at [Settings -> Quality Profiles] as Administrator. Creating a profile means importing check rules from a xml file. On the contrary, \"backup\" a existing profile means save it(as a xml file) to disk. You can edit the profile under the \"Coding rules\" tab, and link it to a specific project under the \"Projects\" tab. Once defined some profiles, you can use it in a sonar runner by specify it in sonar-project.properties file: sonar . profile = profile_name You also can specify a profile to a project at \"Configuration\"(at the upper-right corner of the dashboard of the project). See Analysis Parameters for all 4 ways to specify profile for a project, and a full list of parameters you can specify in sonar-project.properties.","tags":"Tech","url":"http://leetschau.github.io/quality-profile-in-sonar.html","loc":"http://leetschau.github.io/quality-profile-in-sonar.html"},{"title":"Jenkins user account configurations","text":"Project-based Matrix Authorization This strategy let user A only see his own project, and in his project, he can only run, but can't modify the configuration of the project. Manage Jenkins -> Configure Global Security: Check \"Jenkins own database\" under \"Access Control\" and uncheck \"Allow users to sign up\". Check [Authorization -> Project-based Matrix Authorization Strategy] Ensure [Overall -> Read] is checked for user \"Anonymous\", or a 404 error will raised, and administrator user has all the rights. In user A's project (job), check \"Enable project-based security\", [Add] user A, check \"Build\", \"Cancel\", \"Discover\" & \"Read\" in \"Job\" group, and all items in \"Run\" group. If the job is in a Folder , you have to give user A Job -> Read permission of that folder. For example, to make user leo see and run job \"deploy beta\" in folder \"deploy jobs\", check Job -> Read of the user leo in \"Enable project-based security\" section in Configuration of \"deploy jobs\". Lightweight Security Management Start Jenkins; Jenkins -> Manage Jenkins -> Global Security -> enable security; Select \"Security Realm ->Jenkins's own user database\"; Check \"Allow user to sign up\"; Check Authorization -> Logged-in users can do anything; Click \"Save\"; Sign in as \"admin\"; Manage Jenkins -> Global Security -> uncheck \"Allow user to sign up\"; Now anonymous users are read-only for Jenkins. This security strategy are suitable for one user scenario. ===Deprecated=== Start Jenkins Service: nohup java -jar jenkins.war 1>jenkins.log 2>jenkins.log & Jenkins -> Manage Jenkins -> Global Security -> enable security; Select \"Security Realm ->Jenkins's own user database\"; Check \"Allow user to sign up\"; Select \"Matrix-based security\" as the authorization; Give anonymous user the read access; In Textbox follow \"User/group to add\", write \"admin\" and click \"add\" button; Give admin full access right by checking all items in the row; Click \"save\" button at the bottom; Now you should be locked out of Jenkins. But you can find a \"sign up\" link at the upper-right corner on the main page; Sign up a user named \"admin\"(the same you config at preceding steps), set password, then you can login as administrator. Quick and Simple Security does not work on my Ubuntu Desktop PC. Reference: Standard Security Setup ; Help! I locked myself out!","tags":"Tech","url":"http://leetschau.github.io/jenkins-user-account-configurations.html","loc":"http://leetschau.github.io/jenkins-user-account-configurations.html"},{"title":"Code Quality Check based on Jenkins and Sonar","text":"Based on Jenkins 1.5 with Sonar plugins, Ubuntu 12.04. Installation and System Configuration Install and config Jenkins: see note \" Install Jenkins and plugins by hand \"; Install and config Sonar and Sonar Runner: see note \" Analyze Java Code with Sonar on Ubuntu \"; Jenkins System Configuration Manage Jenkins -> Configure System: Sonar Runner : Name : MySonarRunner ; SONAR_RUNNER_HOME: parent folder of \"bin/sonar-runner\" script; Sonar -> Sonar Installations -> Advanced : Name : MySonar ; Sonar account login / password : admin / admin ; Server URL : leave blank ( http : // localhost : 9000 , if sonar server is not at the same server with jenkins , notice no \" / \" at the end of this url ) ; Database URL : jdbc : mysql : // localhost : 3306 / sonar ? useUnicode = true & characterEncoding = utf8 & rewriteBatchedStatements = true ( equals to \" sonar.jdbc.url \" in $ SONAR_SERVER / conf / sonar . properties , notice \" localhost \" can not be writen as ip address ) ; Database login / password : sonar / sonar ; Database Driver : com . mysql . jdbc . Driver ; Project-specific Sonar Runner Configuration Creating file /opt/sonar-server/gcp.properties as followings: see note \" Analyze Java Code with Sonar on Ubuntu \" and notice: sonar . sources = src ( a relative path name whose root directory is $ PROJECT_WORKSPACE ); sonar . sourceEncoding = GBK ( determined by source file encoding , default is UTF - 8 ); Jenkins Project Configuration Source Code Management: Subversion -> enter subversion url; Build: Execute Shell : cp / opt / sonar - server / gcp . properties . / sonar - project . properties Invoke Standalone Sonar Analysis Do not add post-build actions \"Sonar\" because it's bounded with Maven. If there is no pom.xml at the root of the project, an error raises.","tags":"Tech","url":"http://leetschau.github.io/code-quality-check-based-on-jenkins-and-sonar.html","loc":"http://leetschau.github.io/code-quality-check-based-on-jenkins-and-sonar.html"},{"title":"Erlang IDE Setup","text":"Windows Console add erl.exe and vim.exe to %PATH%; start ConEmu, split window vertically (see note \" Multiple terminals operation on Windows and Ubuntu \" for spliting window detail); start erlang shell with erl.exe at left and vim erlSrc.erl at the right window; Ubuntu Console start Terminator and split window; erl at left and vi erlSrc.erl at right; IDE based on Sublime Text 2 Use package control install two package: SublimErl and SublimeREPL. Run erlang REPL: Sublime Text Menu / Tools / SublimeREPL / Erlang. If you got a error message, it's most probably caused by not adding werl.exe in $PATH. So Sublime Text Menu / Preferences / Package Settings / SublimeREPL / Settings-User, add { \"default_extend_env\": {\"PATH\": \"{PATH};C:/Program Files/erl5.10/bin\"} } . alt+shift+2(shortcut in View / Layout): split window with 2 column; key shortcuts defs in sublime text 2: http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html#","tags":"Tech","url":"http://leetschau.github.io/erlang-ide-setup.html","loc":"http://leetschau.github.io/erlang-ide-setup.html"},{"title":"去掉文件中的&#94;M","text":"一般情况下用:set ff=unix就可以解决问题，如果无效，用下面的方法手工完成： : % s / [ ctrl + v ] [ ctrl + m ] // g ctrl+v表示按住Ctrl键再按下v键。","tags":"Tech","url":"http://leetschau.github.io/qu-diao-wen-jian-zhong-de-m.html","loc":"http://leetschau.github.io/qu-diao-wen-jian-zhong-de-m.html"},{"title":"Analyze Java Code with Sonar on Ubuntu","text":"Install Sonar Service set JAVA_HOME=/usr/lib/jvm/default-java (optional); install database: apt-get install mysql-server ; download sonar-3.5.1.zip and extract to /opt/sonar-server; test startup: $SONAR_HOME/bin/linux-x86-32/sonar.sh console , web browser: http://localhost:9000; build database: root@chadpc56:/opt/sonar-server/sonar-3.5.1/extras/database/mysql# mysql -u root -p < create_database.sql ; modify db config: comment out \"sonar.jdbc.url: jdbc:h2...\", uncomment \"sonar.jdbc.url: jdbc:mysql...\" in $SONAR_SERVER/conf/sonar.properties; verify db operations: $SONAR_HOME/bin/linux-x86-32/sonar.sh console , you can see many tables are created in mysql db, then mysqlshow sonar -u sonar -p , with password \"sonar\", you can see a list of tables created; start sonar service: nohup $SONAR_HOME/bin/linux-x86-32/sonar.sh start 1>/dev/null & , you can monitor its startup via tail -f $SONAR_HOME/logs/sonar.log ; Note: If using zsh, you have to add disown %1 to detach background job from current shell, or your background jobs will be killed when you logged out, even it was nohupped. (or you can add \"setopt nohup\" in .zshrc to the same effect). First Login Configuration login http://localhost:9000 with admin/admin; Analyse Java Project with Sonar Runner Installing and Configuring Sonar Runner : download, extract, set environment variables, add to path, modify config file, verify (sonar-runner -h); Analyzing with Sonar Runner : create sonar-project.properties under project root folder, run sonar runner at project root folder (sonar-runner), see result in sonar dashboard; Note: add sonar.login & sonar.password in sonar-project.properties; Analyse Java Project with Ant Task Build a Demo Java Project apt-get install ant; copy junit-4.11.jar and hamcrest-core-1.3.jar to lib folder of ant(/usr/share/ant/lib); create build.xml: Run Sonar Download sonar-ant-task-2.1.jar; Add sonar tasks into above build.xml; Run sonar with ant sonar ;","tags":"Tech","url":"http://leetschau.github.io/analyze-java-code-with-sonar-on-ubuntu.html","loc":"http://leetschau.github.io/analyze-java-code-with-sonar-on-ubuntu.html"},{"title":"Customize Window Buttons Position on Ubuntu","text":"Verified on Ubuntu Desktop 12.04. Move window buttons to upper-right corner: gconftool -s /apps/metacity/general/button_layout -t string menu:minimize,maximize,close Move window buttons to upper-left corner: gconftool -s /apps/metacity/general/button_layout -t string close,minimize,maximize Only show close and minimize buttons at upper-left corner: gconftool -s /apps/metacity/general/button_layout -t string close,minimize (You can maximize window by double-clicking title-bar) You have to use current user to run this command, or you will get \"No D-BUS daemon running\" error. For example, if you login desktop as user \"john\", you will find a .dbus folder owned by john in $HOME of user john.","tags":"Tech","url":"http://leetschau.github.io/customize-window-buttons-position-on-ubuntu.html","loc":"http://leetschau.github.io/customize-window-buttons-position-on-ubuntu.html"},{"title":"Auto Code Review based on Jenkins and Checkstyle","text":"Based on Jenkins 1.509 and Checkstyle 5.6. Now we need practising code review, as a step of BVT of course. The ideal solution is based on Sonar and its checkstyle plugin. But I am not very familiar with sonar's java runner and other features. So I decided to use some \"plain\" method to embed code review into the process of BVT. Preparations Install checkstyle plugin of jenkins; copy checkstyle-5.6-all.jar to /opt/checkstyle; create a code review rule file tyRules.xml at /opt/checkstyle: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"> Project -> Configuration -> Source Code Management -> Subversion -> Repo URL: svn://localhost/ServerMeter Project -> Configuration -> Post-build Actions -> Publish Checkstyle analysis results: * /codeReview .xml; Project -> Configuration -> Post-build Actions -> E-mail Notification: ... As part of ant build add a target \"checkcode\" in build.xml: <?xml version=\"1.0\" encoding=\"UTF-8\"?> \\({basedir}/build\" /> <target name=\"init\"> <delete dir=\"\\) {build.dir}\"/> Jenkins setup: Project -> Configuration -> Build -> Invoke Ant -> Targets: checkcode; PROS: simple config, with the power of ant; CONS: build scripts of every project have to be modified, which violates the DRY principle; As an independent step in build process Jenkins setup: Project -> Configuration -> Build -> Execute shell: rm -rf build mkdir build find . -depth -name .svn -exec rm -fr {} \\; java -jar /opt/checkstyle/checkstyle-5.6-all.jar -c /opt/checkstyle/tyRules.xml -r src -f xml -o build/codeReviewResult.xml PROS: no need to modify any thing in project, do one thing in only ONE place; CONS: there are some dirty work in shell script, for example you have to delete and create build folder manually (otherwise checkstyle report can not be created correctly), and remove all .svn folder recursively (otherwise checkstyle will find some duplicate codes in normal code file and backup file in .svn folder). if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/auto-code-review-based-on-jenkins-and-checkstyle.html","loc":"http://leetschau.github.io/auto-code-review-based-on-jenkins-and-checkstyle.html"},{"title":"Install Jenkins and plugins by hand","text":"Follow instructions on Jenkins wiki section 1.2 \"By hand\". download jenkins.war; Search for the plugin, find if it has any dependency plugin. For example, plugin checkstyle depends on analysis-core stated in \"Dependencies\" section; Download hpi files in Download Site ; Copy hpi files downloaded to $HOME/.jenkins/plugins folder and restart Jenkins: nohup java -jar jenkins.war 1>jenkins.log 2>jenkins.log & Verify: Jenkins Dashboard(http://localhost:8080) -> Manage Jenkins -> Manage Plugins -> Installed:","tags":"Tech","url":"http://leetschau.github.io/install-jenkins-and-plugins-by-hand.html","loc":"http://leetschau.github.io/install-jenkins-and-plugins-by-hand.html"},{"title":"Multiple terminals operation on Windows and  Ubuntu","text":"基于多Tab页的Terminal工作环境 Tmux可以很好的解决一台主机上的多任务并行问题，但如果需要同时在本机和远程主机上工作， 而且这两台主机上都需要运行Tmux，就会出现Tmux的嵌套问题。 这时可以同时运行多个Terminal App，但切换时容易混淆， 更好的方法是在一个Terminal App里创建多个标签页，每个标签页对应一台主机。 Ubuntu预装的Gnome Terminal不支持自定义快捷键，下面基于Terminator实现多标签页， 假设远程主机名为 alpha . 在System settings -> Keyboard中创建自定义快捷键： terminator : Alt-F11 配置Terminator: 在 Preferences 中： Global: Maximised; Profiles: 在 Global 子标签下：uncheck Show titilebar , check \"copy on selection\"; 若需要与tmux绑定，参考笔记\"启动Console后自动进入tmux \". Keybindings: new_tab: Ctrl-Shift-T, next_tab: Ctrl-Shift-N; 工作流程 用 Alt-F11 打开Terminator，窗口自动最大化； 用 Ctrl-Shift-T 创建新标签，双击Tab页上的标题重命名 （没有找到rename tab的快捷键），例如第一个tab设置为 local ， 第二个tab标题设置为 alpha 等； 用 Ctrl-Shift-N 在多个标签间切换； 用 Ctrl-Shift-= 和 Ctrl-- 放大/缩小字体； 如果在alpha上的操作不复杂，只需要一个窗口，就不必采用多标签模式， 在本机启动Tmux，其中一个window SSH到远程主机就可以了。 这种情况下，第一个window命名为 local ，第二个命名为 alpha . 基于多Workspace的Terminal工作环境 Termianl, a.k.a. console or command line, is a great tool to tell computers what to do. It's efficient and cool to type some words in a terminal(of course in full screen mode) and get all things done. But if you have only one terminal on the screen, switching between directories are always disturbing and time-consuming jobs. So to keyboard fans, a terminal enhancement tool is necessary. With the help of workspace (a.k.a. virtual desktop) switching tool and window arrangements shortcuts, a geek's screen is like this: Put all GUI windows in workspace 1; Put terminal windows in workspace 2; In workspace 2, switch multiple terminal tool in full screen mode; Use workspace switching shortcuts to switching between GUI workspace and terminal workspace; Windows: Conemu + VirtuaWin Terminal full screen: alt + enter; Split window: alt + h/v (split horizontal/vertical, defined in [Settings-> Keys & Macros -> duplicate active < > split to bottom/right]); Switch between terminal: [ctrl + tab] or [Win + q]; Hide tab bar: Settings -> Features -> Tabs -> Don't show; Switch workspace: alt + win + Left/Right/Up/Down (defined in Setup -> Hotkeys of VirtuaWin); Ubuntu: Teminator Auto run command when startup (ssh to a remote server in this case): terminator -x ssh bvt@10.0.2.74; (use terminator -h for details. xterm and konsole also surppot -e syntax). Terminal full screen: F11 (defined in [System Settings -> Keyboard -> Shortcuts -> Windows -> Toggle fullscreen mode]); Split window: alt + h/v (split horizontal/vertical, defined in [Preference -> Keybindings -> split_horiz/split_vert]); Switch between terminal: alt + Left/Right/Up/Down; Toggle Window max/normal of one of all terminals: ctrl + shift + z (defined in [Preferences -> Keybindings -> scaled_zoom]); Make background transparent: [Preferences -> Profiles -> defaults -> Background -> Transparent background: 0.8]; copy on selection: [Preferences -> Profiles -> Copy on selection]; Switch workspace: alt + ctrl + Left/Right/Up/Down (defined in [System Settings -> Keyboard -> Shortcuts -> Navigation -> Move to workspace left/right/above/below]);","tags":"Tech","url":"http://leetschau.github.io/multiple-terminals-operation-on-windows-and-ubuntu.html","loc":"http://leetschau.github.io/multiple-terminals-operation-on-windows-and-ubuntu.html"},{"title":"Start cygwin in ConEmu with Executor","text":"Cygwin is powerful, but its single window interface is inconvenient. So I put it in ConEmu, and invoke it via Executor. When define keyword in Executor, the command is \"d:\\Apps\\ConEmu\\ConEmu.exe\", parameters are \"/Single /cmd e:\\myDoc\\cygwinRoot\\Cygwin.bat\". Here \"/cmd\" can't be ommited, while it can be ommited when there is no \"/Single\" option. So the following two forms are valid: d:\\Apps\\ConEmu\\ConEmu.exe /Single /cmd e:\\myDoc\\cygwinRoot\\Cygwin.bat d:\\Apps\\ConEmu\\ConEmu.exe e:\\myDoc\\cygwinRoot\\Cygwin.bat But \"d:\\Apps\\ConEmu\\ConEmu.exe /Single e:\\myDoc\\cygwinRoot\\Cygwin.bat\" is malformed, cygwin can't be invoked.","tags":"Tech","url":"http://leetschau.github.io/start-cygwin-in-conemu-with-executor.html","loc":"http://leetschau.github.io/start-cygwin-in-conemu-with-executor.html"},{"title":"基于Jenkins + Gradle的自动构建系统搭建笔记","text":"前期准备： 搭建SVN服务器，参考笔记\" SVN服务器搭建笔记 \"； 新建一个基于Gradle的测试项目，参考\" 定制Gradle的项目文件目录结构 \"； 将此项目提交到SVN服务器； 启动Jenkins服务器：java -jar jenkins.war; 安装Gradle插件：在Jenkins管理面板的 [系统管理 -> 管理插件] 中在线安装； 指定Gradle位置：[系统管理 -> 系统设置 -> Gradle]中指定服务器上Gradle的安装位置（取消勾选\"自动安装\"）； 搭建过程 New Job -> \"构建一个自由风格的软件项目\"； 配置此项目： i. 项目名称； i. 源码管理 -> Subversion -> Repository URL: svn://localhost/JenkinsGradleTest/quickstart2 i. 构建触发器 -> check \"Build periodically\" -> 日程表：H/15 * * （每15分钟构建一次） i. 构建 -> 增加构建对象 -> Invoke Gradle script -> Tasks: build； i. 构建后操作 -> Add post-build action -> Publish JUnit test result report -> Test report XMLs: * /test-results/ Test.xml i. 构建后操作 -> Add post-build action -> Email Notification -> Recipients: user@company.com","tags":"Tech","url":"http://leetschau.github.io/ji-yu-jenkins-gradlede-zi-dong-gou-jian-xi-tong-da-jian-bi-ji.html","loc":"http://leetschau.github.io/ji-yu-jenkins-gradlede-zi-dong-gou-jian-xi-tong-da-jian-bi-ji.html"},{"title":"定制Gradle的项目文件目录结构","text":"参考Gradle文档chapter 23: The Java Plugin, 23.4: Project Layout, 23.4.1: Changing the project layout。 根据此说明，基于文档自带的$GRADLE-1.5_HOME\\samples\\java\\quickstart进行的一个实验： 首先将原示例的项目文件结构修改为如下形式： $ tree . | -- build.gradle | -- conf | ` -- db.properties | -- src | ` -- org | ` -- gradle | ` -- Person.java ` -- test ` -- org ` -- gradle ` -- PersonTest.java 然后在build.gradle中增加如下对sourceSets的定制： ... apply plugin : 'eclipse' sourceSets { main { java { srcDir 'src' } resources { srcDir 'conf' } } test { java { srcDir 'test' } } } sourceCompatibility = 1 . 5 ... 然后就可以用gradle build或者gradle uploadArchives执行构建任务了。 2014-8-11更新： 基于Grale 2.0，创建一个新Java项目的方法是在一个空文件夹中运行 gradle init --type basic ，然后修改build.gradle文件，去掉其中的全文注释， 添加\"apply plugin: 'eclipse'\"和目录结构定义， 然后运行 gradle eclipse ，并在Eclipse中导入这个项目。 如果是为一个已有(Eclipse)项目增加Gradle管理， 则只要在项目根目录下创建build.gradle文件， 然后就可以用 gradle build 等命令构建项目了。 与在Eclipse中安装Gradle插件，然后完全在Eclipse中完成Grale构建相比， 这种方法不需要在Eclipse中安装Gradle插件，在命令行中进行项目的构建， Eclipse只是一个代码编写和调试环境，相对更灵活一些。","tags":"Tech","url":"http://leetschau.github.io/ding-zhi-gradlede-xiang-mu-wen-jian-mu-lu-jie-gou.html","loc":"http://leetschau.github.io/ding-zhi-gradlede-xiang-mu-wen-jian-mu-lu-jie-gou.html"},{"title":"Windows命令行中使用代理的方法","text":"确保 Shadowsocks 客户端正常运行，且端口是1080的情况下，在命令行中执行： set HTTP_PROXY = http : // localhost : 1080 set HTTPS_PROXY = http : // localhost : 1080 再执行需要联网的命令就可以了。 在 Windows 10 中执行 npm install -g purescript pulp bower 验证有效。 以下内容已过时，仅留作备份 使用Gradle做自动构建时，需要从Maven库里获取依赖包，由于网络限制导致获取失败，只能加代理， Windows命令行使用代理需要借助于微软的netsh工具在管理员权限下设置： 启动ConEmu，在标题栏上右键 -> Active Console -> Restart as Admin； 执行\"netsh winhttp set proxy localhost:8087\"； 验证代理设置成功：netsh winhttp show proxy。 参考： MORE ABOUT CMD CONSOLE START , DELAY AND SET PROXY","tags":"Tech","url":"http://leetschau.github.io/windowsming-ling-xing-zhong-shi-yong-dai-li-de-fang-fa.html","loc":"http://leetschau.github.io/windowsming-ling-xing-zhong-shi-yong-dai-li-de-fang-fa.html"},{"title":"从脚本启动图形界面程序","text":"Ubuntu上如果从脚本启动图形界面程序，会有一个终端窗口始终开启，如果在脚本里用nohup启动，就可以关闭这个窗口了，例如下面的脚本演示了启动eclipse程序： export PATH=$PATH:/opt/jre1.6.0_14/bin nohup /opt/eclipse/eclipse 1>/dev/null 2>/dev/null 参考： http://askubuntu.com/questions/10547/how-to-clean-launch-a-gui-app-via-the-terminal-so-it-doesnt-wait-for-terminati","tags":"Tech","url":"http://leetschau.github.io/cong-jiao-ben-qi-dong-tu-xing-jie-mian-cheng-xu.html","loc":"http://leetschau.github.io/cong-jiao-ben-qi-dong-tu-xing-jie-mian-cheng-xu.html"},{"title":"Environment Variables of Ubuntu GUI Applications","text":"In Ubuntu Desktop you have to modify /etc/environment and ${HOME}/.pam_environment instead of /etc/bash.bashrc and ${HOME}/.bashrc to set environment variables. See EnvironmentVariables for details. ${HOME}/.pam_environment does not worked, don't know why.","tags":"Tech","url":"http://leetschau.github.io/environment-variables-of-ubuntu-gui-applications.html","loc":"http://leetschau.github.io/environment-variables-of-ubuntu-gui-applications.html"},{"title":"Frequently used shortcuts of Ubuntu","text":"Based on Ubuntu Desktop 12.04 LTS, \"super\" key is the windows logo key. Shortcuts Definitions System Settings -> Keyboard -> Shortcuts; Super(press): show system shortcut list; Shortcuts list Alt + mouse drag: move window (you can drag a window at any position within a window, not only at title bar) Alt + F2: run a application in command line box Alt + F7: move window via arrow key; Alt + F8: resize window via arrow key; Ctrl + Alt + Num(1~9): move window to a position Ctrl + Super + D: show/hide desktop (minimize/show all window) Super(tap): show Dash Home; Super + W: show a window list, you can use arrow key to select a window; Super 1 to 9: same as click on the launcher icon, you can lock a frequently used application on launcher and launch/activate it via these shortcuts;","tags":"Tech","url":"http://leetschau.github.io/frequently-used-shortcuts-of-ubuntu.html","loc":"http://leetschau.github.io/frequently-used-shortcuts-of-ubuntu.html"},{"title":"局域网文本传输软件","text":"有时候两台机器间临时需要传输一些简单的文本，比如网页地址，指令之类的，专门找一个网内聊天软件太麻烦，简单的方法是使用命令行工具，下面是可选的工具。 利用write或者wall命令 Linux的内部指令，无需安装，但Windows上没法用。 write适用于多次双向交互（两个人之间聊天的交互方式），格式：write [tty]，其中username是用户名，tty通过运行\"tty\"指令获得，在只有两个用户登录情况下可以省略。当主机A和B需要交互时，B首先SSH登录A（ssh my_name@hostB，据说telnet也行），然后B上运行\"write my_name\"，就进入了聊天状态。 wall是向所有tty广播，例如主机A要向B和C发送消息，需要B和C登录到A上（SSH），然后在A上运行wall，可以加回车写多行文本，写完后输入Ctrl+D，整段文本就被广播到了B和C在A的tty上，可以通过管道向wall输送指令，例如\"cat file_name|wall\"将文件内容广播给其他终端，或者\"df|wall\"将磁盘情况广播给其他终端。 wall和write的主要区别是wall是单向的，write是双向的。 利用netcat指令 netcat需要安装，Ubuntu上比较简单：apt-get install netcat，Windows上复杂些，需要下载nc111nt.zip这个文件，下载后报有病毒，但好像是误报。 netcat的信息传输是Server-Client方式，启动Server的方法是\"nc -l server_port\"，server_port可以是任意没被占用的端口，例如nc -l 3456，启动Client的方法是\"nc server_ip server_port\"（例如nc 10.31.2.34 3456），之后不论哪一方输入文本回车后都会被发送到对端，可以先由发送端发送报文，再启动接收端。 要传多行文本（比如一个文本文件），可以用下面的方法： 发送端：cat some.txt|nc -l 3333 接收端：nc 10.21.3.31 3333 > some.txt 可以在Executor里定义一个任务，命令是\"d:\\Apps\\ConEmu\\ConEmu.exe\"，参数是\"d:\\Apps\\netcat\\nc.exe\"，启动nc之后再输入目标的ip地址和端口号。","tags":"Tech","url":"http://leetschau.github.io/ju-yu-wang-wen-ben-chuan-shu-ruan-jian.html","loc":"http://leetschau.github.io/ju-yu-wang-wen-ben-chuan-shu-ruan-jian.html"},{"title":"用Windows连接Ubuntu远程桌面","text":"从Windows 7通过远程桌面连接Ubuntu 12.04，首先为Ubuntu安装xrdp协议：apt-get install xrdp，然后就可以用Windows的远程桌面连接Ubuntu了，如果连接时报错，可以在Ubuntu上执行 echo \"gnome-session --session=ubuntu-2d\" > ~/ . xsession 然后重启系统即可（参考http://www.liberiangeek.net/2012/05/connect-to-ubuntu-12-04-precise-pangolin-via-windows-remote-desktop/）。 试用后发现主要问题是速度太慢，基本无法使用，不清楚是网速慢还是协议本身慢，另外xrdp不像windows远程桌面一个用户同时只能在一台机器上远程连接，它可以多台机器同时连接。","tags":"Tech","url":"http://leetschau.github.io/yong-windowslian-jie-ubuntuyuan-cheng-zhuo-mian.html","loc":"http://leetschau.github.io/yong-windowslian-jie-ubuntuyuan-cheng-zhuo-mian.html"},{"title":"基于多个本地仓库的功能点开发方法","text":"软件开发过程中经常需要在现有的稳定版本上开发新性能，直接在原有的代码仓库上修改不是好办法，首先是由于新功能的开发具有比较大的不确定性，其次在原有的仓库中修改会影响使用该仓库的其他程序。比较好的办法是从稳定版仓库中clone一个副本到新的位置，然后开始新功能的开发，当新功能稳定后push到稳定版仓库中。 Hg对上面的工作流程提供了很好的支持，下面以本地仓库间clone为例演示整个过程（如果副本与原版不在一台机器上，使用Hg内置的http server用hg serve启动服务即可实现不同机器间的开发协同）。 假设稳定版仓库位置是c:\\tmp\\HgRepo下，tip的版本号是6，现在要开发新特性AutoSave，首先clone仓库： c:\\tmp>hg clone HgRepo AutoSave 如果希望从HgRepo的第4个版本开始开发，可以加-r参数：hg clone -r 4 HgRepo AutoSave，用这种方法可以实现比较安全的版本\"回退\"，比如提交到版本7后发现版本5～7有问题，可以用\"clone -r 4\"建立一个新的副本，原来的仓库可以视情况予以保留或丢弃。 AutoSave中修改完毕后，可以用hg push直接同步到HgRepo中，这是因为AutoSave的默认仓库是其clone来源HgRepo，hg自动在AutoSave的.hg/hgrc中添加如下配置： [paths] default = c:\\tmp\\HgRepo 在push之前先用hg out比较一下AutoSave与HgRepo之间的区别，当有其他开发者向HgRepo中提交更新时，out就必不可少了。 或者用pull的方法，在HgRepo下用hg in repoName比较两个仓库。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-duo-ge-ben-di-cang-ku-de-gong-neng-dian-kai-fa-fang-fa.html","loc":"http://leetschau.github.io/ji-yu-duo-ge-ben-di-cang-ku-de-gong-neng-dian-kai-fa-fang-fa.html"},{"title":"将Netty源代码导入到eclipse中","text":"Netty官网上下载的发布包netty-3.6.5.Final-dist.tar.bz2中的源代码是maven格式的，使用eclipse的maven导入失败，只好用笨办法手工导入到eclipse中，过程如下： 解压Netty发布包在netty-3.6.5.Final目录下； 在Eclipse中新建一个Java Project: NettyStudy； 将netty-3.6.5.Final\\src\\main\\java下的目录拷贝到NettyStudy/src下； 将netty-3.6.5.Final\\src\\test\\java下的目录拷贝到NettyStudy/test下； 根据netty-3.6.5.Final\\pom.xml中 ... 中的内容，将下面的jar文件从 Maven Central Repository 中下载下来，添加到NettyStudy/lib中： slf4j-simple-1.7.5.jar log4j-1.2.17.jar jboss-logging-spi-2.2.0.CR1.jar commons-logging-1.1.2.jar slf4j-api-1.7.5.jar org.osgi.foundation-1.2.0.jar javax.servlet-1.0.0.jar org.osgi.compendium-1.4.0.jar org.osgi.core-1.4.0.jar servlet-api-3.0-alpha-1.jar protobuf-java-2.5.0.jar jboss-marshalling-1.3.17.GA.jar easymock-3.1.jar 验证： 启动org.jboss.netty.example.telnet.TelnetServer，默认绑定本机的8080端口； 用kitty连接8080端口：\"kitty -telnet -P 8080 localhost\"，看到下面的报文说明连接成功： Welcome to chadlaptop! It is Fri May 03 23:49:01 CST 2013 now.","tags":"Tech","url":"http://leetschau.github.io/jiang-nettyyuan-dai-ma-dao-ru-dao-eclipsezhong.html","loc":"http://leetschau.github.io/jiang-nettyyuan-dai-ma-dao-ru-dao-eclipsezhong.html"},{"title":"修改Windows环境变量","text":"修改Windows的环境变量比较麻烦，尤其是Path，下面这些软件配合Executor能略微简化对Path的修改： RapidEE ，free, portable，支持命令行，但好像没有效果，能修改所有windows变量。 Windows Path Editor ，free, portable，通过拖拽方式修改Path变量，保存变量时有丢失现象，有时会异常退出，不要使用； Eveditor ，free，但需要安装，没有试。","tags":"Tech","url":"http://leetschau.github.io/xiu-gai-windowshuan-jing-bian-liang.html","loc":"http://leetschau.github.io/xiu-gai-windowshuan-jing-bian-liang.html"},{"title":"添加局域网打印机","text":"局域网内安装了打印机，但不知道它的IP地址，这时就需要搜索打印机了，Win7下方法如下： 【开始 -> 设备和打印机】，点击上部的\"添加打印机\"按钮，Windows开始搜索局域网内的打印机，一般就可以找到了。","tags":"Tech","url":"http://leetschau.github.io/tian-jia-ju-yu-wang-da-yin-ji.html","loc":"http://leetschau.github.io/tian-jia-ju-yu-wang-da-yin-ji.html"},{"title":"Hg常用命令","text":"hg add hg cat filename hg ci，简短的注释可以用hg ci -m \"short comment\"直接提交，如果没有配置用户，会导致提交失败，配置用户方法见笔记\" hg的常用配置 \"； hg ci --amend: 修改上一次提交的备注信息 hg diff file：显示某个版本所做的更改 hg diff -c 19 filename；比较两个版本间的差异 hg diff -r 19 -r 20 filename hg heads 列出所有头版本，用于合并分支(hg merge)前的查询 hg help : show help information of ; hg init：如果在非空目录中运行此命令，表示将已有的文件纳入到hg库中； hg log hg log -l n：只显示最近的n个changeset hg log -v: 包含文件变化列表和完整的提交注释 hg log -k \"Your Name\"：用户Your Name提交的changeset列表 hg log -G: 用分支图的形式列出changeset，可与-l参数配合使用 hg log filename: 列出与filename有关的各次提交的信息 hg merge 合并分支 hg pull ：将 中的change_set拉到本地repository中来，不影响working directory中的文件； hg pull -u <=> hg pull --update <=> \"hg pull; hg update\" <=> svn update DVCS与SVN的区别在于DVCS存在两种类型的同步：repository之间以及本地repository与working directory之间，push/pull用于同步前者，update/commit用于同步后者； hg push hg rollback: 删除最近一次提交(commit) hg st: 无参数表示tip与working dir的区别 hg st --rev 19：版本19的变化 hg st --rev x:y：比较x和y版本的变化，x与y的顺序无所谓； hg update：用本地repository中的内容更新working_copy中的文件； hg update -C: 抛弃本地未提交的更改，用版本库中的文件更新working directory；","tags":"Tech","url":"http://leetschau.github.io/hgchang-yong-ming-ling.html","loc":"http://leetschau.github.io/hgchang-yong-ming-ling.html"},{"title":"hg的常用配置","text":"hg的配置文件分为全局配置和每个Repo自己的配置， Linux下全局配置文件是~/.hgrc，Win7系统下是C:\\Users\\chad\\mercurial.ini， 各repo的配置文件是$REPO_PATH/.hg/hgrc。 常用配置 设置Repo的用户名 [ ui ] username = Your Name push/pull目标仓库 [ paths ] default = http : // ip_or_hostname : 8000 / repo1 = = https : // user @bitbucket . org / user / nep 之后可以用hg push推送到default库，用hg push repo1推送到repo1库； push目标禁用ssl验证 [ web ] push_ssl = false allow_push = *","tags":"Tech","url":"http://leetschau.github.io/hgde-chang-yong-pei-zhi.html","loc":"http://leetschau.github.io/hgde-chang-yong-pei-zhi.html"},{"title":"使用vimdiff做hg的版本比较工具","text":"gvim的文本比较功能很强，命令行用法：gvim -d file1 file2，hg自带的hg diff没有颜色标示，含义也不够清晰，所以需要用vim的diff代替它，实现方法是在全局配置文件中增加： [extensions] hgext.extdiff = [extdiff] cmd.vdiff = D:\\Apps\\Vim\\vim73\\gvim.exe opts.vdiff = -d 使用时首先用hg st定位哪些文件有变化，然后hg vdiff filename查看文件的变动，例如： E:\\workspace\\JDK6UTF8\\GoduServerGD>hg st M conf\\logback.xml M ... E:\\workspace\\JDK6UTF8\\GoduServerGD>hg vdiff conf/logback.xml 文件路径和文件名在唯一的情况下可以使用通配符，例如上面的指令可以简写为\"hg vdiff conf/log*\"；","tags":"Tech","url":"http://leetschau.github.io/shi-yong-vimdiffzuo-hgde-ban-ben-bi-jiao-gong-ju.html","loc":"http://leetschau.github.io/shi-yong-vimdiffzuo-hgde-ban-ben-bi-jiao-gong-ju.html"},{"title":"基于hg的多用户单分支协同开发试验","text":"协同方法 在所有开发人员中指定一个Server，类似于svn repo。其他人（Client）的代码是server的副本，修改、测试稳定后立即合并回server（最好通过server的pull方法实现，比client push更保险），server将client提交的更新与自己的更新合并（merge）后立即push回client，要注意的是server在pull之前要确保working directory中没有未提交的更改（未完成功能，用\"hg st\"命令的输出是否为空来检验，为空说明没有未完成功能），因为merge后必须提交一个\"合并版本\"到版本库，如果有未完成功能，也会被提交到版本库中。 A和B在同步过代码后，如果A提交了新changeset，而此期间B没有提交过，则A可以把变化push给B，这时B不需要merge，只update即可，update后可以用hg log -l 1 -v查看哪些文件发生了变化，以及A的提交说明； 整个协同过程中不需要新建branch或者bookmark，估计是最简单的分布式版本控制系统的协同模型。 试验过程 Server（username: Li Chao）新建一个repo，添加文件，提交changeset，Client（username: chadOnPC）clone此repo，修改其中一个文件，与此同时Li Chao修改了另一个文件，chadOnPC将修改push回笔记本，Li Chao合并两部分修改，再修改这两个文件，push到Client，由于这期间Client没有修改，所以只要update就把Server push的内容更新到了working directory中。 ========== Server ================ c:\\tmp\\HgRepo>hg init // 新建两个文件：forChadLaptop.txt和forChadPC.txt并写一些内容在文件里 c:\\tmp\\HgRepo>hg add .txt c:\\tmp\\HgRepo>hg stat A forChadLaptop.txt A forChadPC.txt c:\\tmp\\HgRepo>hg ci -m \"first checkin\" c:\\tmp\\HgRepo>hg log changeset: 0:fd200857b086 tag: tip user: Li Chao date: Thu Apr 25 11:32:24 2013 +0800 summary: first checkin c:\\tmp\\HgRepo>hg heads changeset: 0:fd200857b086 tag: tip user: Li Chao date: Thu Apr 25 11:32:24 2013 +0800 summary: first checkin c:\\tmp\\HgRepo>hg serve listening at http://chadlaptop:8000/ (bound to :8000) =========== Client ============== E:\\lc\\clonedRepo>hg clone http://chadlaptop:8000/ ... E:\\lc\\clonedRepo>hg log changeset: 0:fd200857b086 tag: tip user: Li Chao date: Thu Apr 25 11:32:24 2013 +0800 files: forChadLaptop.txt forChadPC.txt description: first checkin E:\\lc\\clonedRepo>hg st // edit file \"forChadPC.txt\" E:\\lc\\clonedRepo>hg st M forChadPC.txt E:\\lc\\clonedRepo>hg ci -m \"first on pc\" forChadPC.txt committed changeset 1:2c5fbbb6645b E:\\lc\\clonedRepo>hg log changeset: 1:2c5fbbb6645b tag: tip user: chadOnPC date: Thu Apr 25 11:42:09 2013 +0800 files: forChadPC.txt description: first on pc changeset: 0:fd200857b086 user: Li Chao date: Thu Apr 25 11:32:24 2013 +0800 files: forChadLaptop.txt forChadPC.txt description: first checkin / 需要在被push的repo的.hg/hgrc文件中增加如下内容（如果文件不存在新建之）： * [web] * push_ssl = false * allow_push = * / E:\\lc\\clonedRepo>hg push http://chadlaptop:8000/ pushing to http://chadlaptop:8000/ searching for changes 1 changesets found remote: adding changesets remote: adding manifests remote: adding file changes remote: added 1 changesets with 1 changes to 1 files ============= Server ================== // 修改forChadLaptop.txt文件 c:\\tmp\\HgRepo>hg st M forChadLaptop.txt // 修改被感知到 c:\\tmp\\HgRepo>hg heads changeset: 1:2c5fbbb6645b tag: tip user: chadOnPC date: Thu Apr 25 11:42:09 2013 +0800 summary: first on pc // 与push之前笔记本上\"hg heads\"命令相比，head变成了push过来的那个changeset c:\\tmp\\HgRepo>hg st M forChadLaptop.txt // push不改变working dirctory中的文件 c:\\tmp\\HgRepo>hg ci -m \"second commit on laptop\" created new head c:\\tmp\\HgRepo>hg heads changeset: 2:42809e7d6c58 tag: tip parent: 0:fd200857b086 user: Li Chao date: Thu Apr 25 11:54:05 2013 +0800 summary: second commit on laptop changeset: 1:2c5fbbb6645b user: chadOnPC date: Thu Apr 25 11:42:09 2013 +0800 summary: first on pc // head变成了两个 c:\\tmp\\HgRepo>hg branch default // branch始终只有default一个 c:\\tmp\\HgRepo>hg merge 1 files updated, 0 files merged, 0 files removed, 0 files unresolved (branch merge, don't forget to commit) c:\\tmp\\HgRepo>hg st M forChadPC.txt // merge命令改变了working directory中文件的内容 c:\\tmp\\HgRepo>hg ci -m \"merge from pc\" c:\\tmp\\HgRepo>hg log changeset: 3:ba028970a1d0 tag: tip parent: 2:42809e7d6c58 parent: 1:2c5fbbb6645b user: Li Chao date: Thu Apr 25 11:57:17 2013 +0800 summary: merge from pc changeset: 2:42809e7d6c58 parent: 0:fd200857b086 user: Li Chao date: Thu Apr 25 11:54:05 2013 +0800 summary: second commit on laptop changeset: 1:2c5fbbb6645b user: chadOnPC date: Thu Apr 25 11:42:09 2013 +0800 summary: first on pc changeset: 0:fd200857b086 user: Li Chao date: Thu Apr 25 11:32:24 2013 +0800 summary: first checkin =========== Client ===================== E:\\lc\\clonedRepo>hg serve =========== Server =================== c:\\tmp\\HgRepo>hg push http://china-a9598ee91:8000/ ... =========== Client =============== E:\\lc\\clonedRepo>hg update // 由于Client没有同时修改代码，所以不需要merge，update即可","tags":"Tech","url":"http://leetschau.github.io/ji-yu-hgde-duo-yong-hu-dan-fen-zhi-xie-tong-kai-fa-shi-yan.html","loc":"http://leetschau.github.io/ji-yu-hgde-duo-yong-hu-dan-fen-zhi-xie-tong-kai-fa-shi-yan.html"},{"title":"运行时动态指定文件名的日志工具实现方法","text":"网元日志的特点是：每个网元的日志要写在单独的文件中，文件名要能够唯一地确定一组\"用户-网元\"连接，因此不可能预先指定或者写在配置文件里，只能在运行时根据登录的用户名和连接网元的ID动态生成。 使用JDK原生的java.io.FileOutputStream等类可以达到上述目的，但文件的关闭比较麻烦，由于JVM垃圾回收的特点，日志包装类被回收的时间是不确定的，如果它被回收的比较慢，文件句柄就不会被关闭，导致系统资源消耗变大。 下面的代码基于Logback实现了运行时动态指定日志文件名的日志工具，并发500个线程写日志文件，大约耗时3s左右。 import ch.qos.logback.classic.Logger; import ch.qos.logback.classic.LoggerContext; import ch.qos.logback.classic.encoder.PatternLayoutEncoder; import ch.qos.logback.classic.spi.ILoggingEvent; import ch.qos.logback.core.FileAppender; public class DynamicLogWriter { private String loggerName = null; private final Logger logbackLogger; public DynamicLogWriter(String logfileName) { loggerName = logfileName; LoggerContext loggerContext = new LoggerContext(); FileAppender fileAppender = new FileAppender (); fileAppender.setContext(loggerContext); fileAppender.setName(\"logfile\"); fileAppender.setFile(\"log/\" + loggerName + \".log\"); PatternLayoutEncoder encoder = new PatternLayoutEncoder(); encoder.setContext(loggerContext); encoder.setPattern(\"%msg\"); encoder.start(); fileAppender.setEncoder(encoder); fileAppender.start(); logbackLogger = loggerContext.getLogger(\"nelogger\"); logbackLogger.addAppender(fileAppender); // OPTIONAL: print logback internal status messages // StatusPrinter.print(loggerContext); } public void writeNeLog(String msg) { logbackLogger.debug(msg); } public static void main(String[] args) { for (int i = 0; i < 500; i++) { new Thread(new ThreadWrapper(i)).start(); } } } class ThreadWrapper implements Runnable { private final int id; public ThreadWrapper(int i) { id = i; } @Override public void run() { DynamicLogWriter logWriter = new DynamicLogWriter(\"192.168.0.2.\" + id); logWriter.writeNeLog(\"Welcome t\"); logWriter.writeNeLog(\"o Ubuntu 11.4\\r\\nlogi\"); logWriter.writeNeLog(\"n:user\\r\\npasswor\"); logWriter.writeNeLog(\"d:\\r\\nlast login...\"); } } 参考： http://stackoverflow.com/questions/7824620/logback-set-log-file-name-programatically","tags":"Tech","url":"http://leetschau.github.io/yun-xing-shi-dong-tai-zhi-ding-wen-jian-ming-de-ri-zhi-gong-ju-shi-xian-fang-fa.html","loc":"http://leetschau.github.io/yun-xing-shi-dong-tai-zhi-ding-wen-jian-ming-de-ri-zhi-gong-ju-shi-xian-fang-fa.html"},{"title":"hg单用户操作的分支合并","text":"$ hg init hgBranchTest // 新建一个名为hgBranchTest的repo，hg自动创建目录 $ cd hgBranchTest $ vi readme.txt $ cat readme.txt this is the first version $ hg add readme.txt $ hg ci -m \"first time commit\" // or use \"hg ci -A -m ...\" for add and commit $ vi readme.txt $ cat readme.txt this is the first version add a line $ hg st M readme.txt $ hg log 修改集: 0:ffecf69346a5 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:49:29 2013 +0100 摘要: first time commit $ hg diff diff -r ffecf69346a5 readme.txt --- a/readme.txt Mon Apr 22 05:49:29 2013 +0100 +++ b/readme.txt Mon Apr 22 05:51:03 2013 +0100 @@ -1,1 +1,2 @@ this is the first version +add a line $ hg ci -m \"第二次提交\" $ hg log 修改集: 1:770a5cda1659 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:51:42 2013 +0100 摘要: 第二次提交 修改集: 0:ffecf69346a5 用户: Li Chao 日期: Mon Apr 22 05:49:29 2013 +0100 摘要: first time commit $ hg branch default $ hg branches default 1:770a5cda1659 $ hg branch red marked working directory as branch red (branches are permanent and global, did you want a bookmark?) $ vi readme.txt $ cat readme.txt this is the first version add a line add the 3rd line $ hg branches // 没有提交（commit）之前分支不出现在branches列表中 default 1:770a5cda1659 $ hg branch // 当前仍在red分支下 red $ hg ci -m \"commit on branch red\" $ hg branches red 2:86e30b1564a9 default 1:770a5cda1659 (inactive) $ hg log 修改集: 2:86e30b1564a9 分支: red 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:57:07 2013 +0100 摘要: commit on branch red 修改集: 1:770a5cda1659 用户: Li Chao 日期: Mon Apr 22 05:51:42 2013 +0100 摘要: 第二次提交 修改集: 0:ffecf69346a5 用户: Li Chao 日期: Mon Apr 22 05:49:29 2013 +0100 摘要: first time commit $ hg log -b red // 只显示red分支上的changeset 修改集: 2:86e30b1564a9 分支: red 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:57:07 2013 +0100 摘要: commit on branch red $ hg tip // tip是最近版本的意思 修改集: 2:86e30b1564a9 分支: red 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:57:07 2013 +0100 摘要: commit on branch red $ hg heads // head表示各分支最近版本 修改集: 2:86e30b1564a9 分支: red 标签: tip 用户: Li Chao 日期: Mon Apr 22 05:57:07 2013 +0100 摘要: commit on branch red 修改集: 1:770a5cda1659 用户: Li Chao 日期: Mon Apr 22 05:51:42 2013 +0100 摘要: 第二次提交 $ hg up default // 切换当前分支为default 1 files updated, 0 files merged, 0 files removed, 0 files unresolved $ cat readme.txt // 分支合并前文件内容 this is the first version add a line $ hg merge red 1 files updated, 0 files merged, 0 files removed, 0 files unresolved (branch merge, don't forget to commit) $ cat readme.txt // 合并后文件内容改变 this is the first version add a line add the 3rd line $ hg st M readme.txt $ hg ci -m \"after merge with branch red\" $ hg log 修改集: 3:9a5f0a2b7b9c 标签: tip 父亲: 1:770a5cda1659 // 合并后提交的版本的特点是有两个parent 父亲: 2:86e30b1564a9 用户: Li Chao 日期: Mon Apr 22 06:00:31 2013 +0100 摘要: after merge with branch red 修改集: 2:86e30b1564a9 分支: red 用户: Li Chao 日期: Mon Apr 22 05:57:07 2013 +0100 摘要: commit on branch red 修改集: 1:770a5cda1659 用户: Li Chao 日期: Mon Apr 22 05:51:42 2013 +0100 摘要: 第二次提交 修改集: 0:ffecf69346a5 用户: Li Chao 日期: Mon Apr 22 05:49:29 2013 +0100 摘要: first time commit","tags":"Tech","url":"http://leetschau.github.io/hgdan-yong-hu-cao-zuo-de-fen-zhi-he-bing.html","loc":"http://leetschau.github.io/hgdan-yong-hu-cao-zuo-de-fen-zhi-he-bing.html"},{"title":"局域网聊天和文件传输工具","text":"以前用飞秋在局域网内聊天、传文件，经常找不到目标，很难用，在网上找了一个开源、跨平台（Win, Linux & Mac）的局域网聊天软件 LAN Messenger ，以及 Portable版 ，下载的文件是便携版LANMessengerPortable_1.2.35.paf.exe，聊天、传文件、群聊的功能都有，很方便。 LANMessenger在Mint上安装后无法正常运行，发现Linux上的iptux（apt-get install iptux）实际山就是Windows上的FeiQ（下载压缩包FeiQ.rar后解压运行），目前工作良好。","tags":"Tech","url":"http://leetschau.github.io/ju-yu-wang-liao-tian-he-wen-jian-chuan-shu-gong-ju.html","loc":"http://leetschau.github.io/ju-yu-wang-liao-tian-he-wen-jian-chuan-shu-gong-ju.html"},{"title":"基于ScheduledExecutorService的并发定时任务处理能力测试","text":"测试代码 定时器类 package business.util; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ScheduledFuture; import java.util.concurrent.TimeUnit; import transfer.IUserParser; public class MyTimer { private static ScheduledExecutorService ses = Executors .newSingleThreadScheduledExecutor(); // .newScheduledThreadPool(10); private MyTimer() { } / * 设置某一parser正在执行脚本的超时时间 * * @param parser * 进行超时控制的解析器 * @param timeout * 超时时间，单位：秒 * @return */ public static ScheduledFuture<?> set(IUserParser parser, int timeout) { CloseRutine routine = new CloseRutine(parser); ScheduledFuture<?> job = ses.schedule(routine, timeout, TimeUnit.SECONDS); return job; } / * 清除计时器 * * @param unit * @return / public static boolean cancel(ScheduledFuture<?> job) { return job.cancel(true); } / * 关闭此计时器（进程） / public static void shutdown() { ses.shutdown(); } } class CloseRutine implements Runnable { private final IUserParser parser; CloseRutine(IUserParser parser) { this.parser = parser; } @Override public void run() { parser.closePeer(); } }","tags":"Tech","url":"http://leetschau.github.io/ji-yu-scheduledexecutorservicede-bing-fa-ding-shi-ren-wu-chu-li-neng-li-ce-shi.html","loc":"http://leetschau.github.io/ji-yu-scheduledexecutorservicede-bing-fa-ding-shi-ren-wu-chu-li-neng-li-ce-shi.html"},{"title":"Java语言子类调用父类构造函数的规则","text":"子类初始化时，调用父类构造函数的规则是：如果父类没有任何构造函数，系统会 父类如果没有任何构造函数，系统会自动为父类生成一个无参构造函数，如果父类有带参构造函数，系统不会为父类生成无参构造函数； 如果父类和子类的构造函数都有参数且参数列表一样（包括参数的个数、类型、顺序），子类如果想调用父类的构造方法，必须在构造函数第一行用super(params)显式调用，否则子类的构造函数会去找父类的默认（无参）构造函数； 如果父类有无参构造函数，子类的构造函数除非显式用super(params)调用父类的带参构造函数，否则一定会执行父类的无参构造函数（不需要写super()）； 参考：google \"java constructor\", http://www.leepoint.net/notes-java/oop/constructors/constructor.html 父类有默认构造函数时 class SuperClass { public SuperClass() { System.out.println(\"I am the super class.\"); } public SuperClass (String name) { System.out.println(\"I am the super class with a name: \" + name); } public SuperClass (int age) { System.out.println(\"I am sub class with age: \" + age); } } public class TestedSubClass extends SuperClass { public TestedSubClass(){ System.out.println(\"I am sub class\"); } public TestedSubClass(String name){ super(name); System.out.println(\"I am sub class with a name: \" + name); } public TestedSubClass(int age) { System.out.println(\"I am sub class with age: \" + age); } public static void main(String[] args) { TestedSubClass tsc = new TestedSubClass(); TestedSubClass tsc2 = new TestedSubClass(\"chad\"); TestedSubClass tsc3 = new TestedSubClass(33); } } 运行结果： [java] I am the super class. [java] I am sub class [java] I am the super class with a name: chad [java] I am sub class with a name: chad [java] I am the super class. [java] I am sub class with age: 33 当父类有默认（无参数）构造函数情况下，子类初始化时，除非子类用super(param)显式调用其他构造函数，否则一定会执行父类的默认构造函数，不论子类初始化时有没有参数。 父类无默认构造函数 如果仅将父类的默认（无参）构造函数去掉重新运行，报找不到初始化方法错误，原因是当父类有带参构造函数时，系统不为父类生成构造函数，而第1次和第3次初始化子类对象时，会调用父类的无参构造方法，所以报错； 如果去掉父类中所有的构造函数，子类中保留无参和int参数两个构造函数，运行正常； 如果仅保留父类和子类的String参数构造方法，初始化运行正常；","tags":"Tech","url":"http://leetschau.github.io/javayu-yan-zi-lei-diao-yong-fu-lei-gou-zao-han-shu-de-gui-ze.html","loc":"http://leetschau.github.io/javayu-yan-zi-lei-diao-yong-fu-lei-gou-zao-han-shu-de-gui-ze.html"},{"title":"Sublime Text笔记","text":"Sublime Text作为一款文本编辑器，最强大的是快速响应能力和\"Goto Anything\"功能， 用Ctrl+Shift+P执行编辑器功能，用Ctrl+P+@进行文件间与文件内部的跳转， 目前的编辑器还没有类似的，Vintage将vi的强大编辑能力吸收了进来，更是如虎添翼。 它不适合作为静态语言（如Java）的正式开发IDE，与\"标准的\"IDE（如Eclipse）比较， 不具备针对静态语言的代码重构功能；在代码自动补全方面，无法提供类库的类名/方法补全 （能够提供语言关键字和变量的补全）；它无法提供调试环境，需要单独的代码调试器 （如JSwat）。所以Sublime Text适合作为展现语言（如HTML，Latex等）或者动态语言 （Python, PHP等）的开发工具。 但很多时候我们只是想浏览代码，或是写一些简单的试验程序，或是修改代码的一处细节， 启动Eclipse太慢了，用Sublime text这样text editor处理正合适。 借助Ant打造Java IDE 项目目录结构：项目根目录（ \\(PORJ_HOME）下存放源代码、编译后的class文件和需要引用的jar包 （而不是分开放在src, bin, lib文件夹下，适合于技术验证式的小项目）， 以及sublime项目定义文件（ProjectName.sublime-project）和build.xml， 通过Ant的javac和java指令编译和运行Java代码，源代码不论什么包名都放在\\) PORJ_HOME下 （Ant的javac指令会根据源代码的包名创建class文件的目录结构）； 准备工作 指定用Ant做构建工具：修改[Preferences -> Browse Packages]打开packages文件夹， 修改Java/JavaC.sublime-build文件，将原来\"cmd\"后面的\"javac\"改为\"ant.bat\"， 如果ant所在目录没有加到系统的 \\(Path里，这里需要写文件完整路径， 例如\"D:/Apps/apache-ant-1.8.1/bin/ant.bat\"，然后将工作目录设置为项目根目录 （默认的就是项目文件所在目录，因此这句不写也行）：\"working_dir\": \"\\) project_path\"； 安装AdvancedNewFile插件：利用package control的install new package功能， 装完后就可以用快捷键\"Ctrl + Alt + N\"在项目根目录下创建文件了； 创建Java项目 创建项目文件夹（TotalCMD），拷贝此文件夹的完整路径； Sublime Text -> Project -> Add Folder: 将上一步创建的文件夹加入到Project中； 生成新的Sublime项目文件：Sublime Text -> Project -> Save Project As， 这样项目文件就定义好了，如果希望隐藏不必要的文件和文件夹： [Project -> Save Project As]， 用file_exclude_patterns和folder_exclude_patterns属性实现，例如： { \"folders\" : [ { \"path\" : \"/e/workspace/PNProject\" , \"file_exclude_patterns\" : [ \"*.sublime*\" ] } ] } 注：还可以用\"folder_exclude_patterns\":[\"build\"]这样的方式去掉文件夹。 在项目根目录下新建一个build.xml文件，主要内容是编译和运行java代码 （注意每个项目的启动类是不同的（java命令的classname参数）， 拷贝这个模板时需要修改）： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project name= \"ExProj\" basedir= \"./\" default= \"run\" > <path id= \"lib.path\" > <fileset dir= \" ${ basedir } \" > <include name= \"**/*.jar\"/ > </fileset> </path> <target name= \"compile\" > <javac srcdir= \" ${ basedir } \" destdir= \" ${ basedir } \" classpathref= \"lib.path\" encoding= \"UTF-8\" debug= \"true\"/ > </target> <target name= \"run\" depends= \"compile\" > <java classname= \"org.leechau.HelloWorld\" > <classpath> <pathelement path= \" ${ basedir } \"/ > </classpath> </java> </target> </project> 运行构建：[Tools -> Build]（快捷键Ctrl+B）； 打开Vintage模式 Vintage是vi风格的操作方式，当然要打开啦，方法是： 在user preference里加上：\"ignored_packages\": [] 如果希望打开文档时初始状态是命令模式而不是插入模式， 再加上：\"vintage_start_in_command_mode\": true 自定义代码模板 [Tools -> New Snippet...]; 填写模板内容（content），触发器（写完触发器按tab键展开为content中定义的代码） 和有效范围（定义那些文件中此模板有效）； 保存模板文件：文件名统一约定为\"范围名-触发器 .sublime-snippet\"； 参考 http://www.granneman.com/webdev/editors/sublime-text/top-features-of-sublime-text/quickly-insert-text-and-code-with-sublime-text-snippets/#test 实例：Java代码中终端打印语句的代码模板（spl + -> System.out.println(${1});）： <snippet> <content> <![CDATA[ System.out.println(${ 1 }); ]]> </content> <!-- Optional: Set a tabTrigger to define how to trigger the snippet --> <tabTrigger> spl </tabTrigger> <!-- Optional: Set a scope to limit where the snippet will trigger --> <scope> source.java </scope> </snippet> 如果设置后不生效，检查各个标签的大小写是否正确（snippet文件是大小写敏感的）， 例如CDATA要大写，tabTrigger中T大写。 Best Practice 所有的个性化配置都写在\"Settings - User\"，不要修改\"Settings -> Default\"； Trouble Shooting \"Decode error - output not utf-8\" when build java files: this is caused by adding \"\"shell\": true\" in JavaC.sublime-build. cmd.exe use GBK(cp936) for console output encoding, which is different with sublime's default output encoding utf-8. So adding \"\"encoding\": \"cp936\"\" in JavaC.sublime-build will resolve this problem. Reference: http://www.sublimetext.com/forum/viewtopic.php?f=3&t=1535&start=0 Run Java without Ant. But when your java codes have package names, it's really difficult to compile and run them because package names are hardly get by sublime. So always use Ant to build java codes in sublime. Reference: http://stackoverflow.com/questions/12030865/sublime-text-2-wont-run-java if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/sublime-textbi-ji.html","loc":"http://leetschau.github.io/sublime-textbi-ji.html"},{"title":"基于goagent的翻墙方法","text":"本机上使用 为Chrome 安装GoAgent并配上SwitchyPlus畅游互联网 Goagent的使用方式如下： 1、 申请一个Google App engine并创建一个appid（在申请的时候需要发送验证码到手机上面、所以手机号码一定得是真实的） 2、 申请到appid后下载GoAgent最新的程序 3、 将程序解压到硬盘上面、然后双击Serveruploader.bat文件、在弹出的界面中按照提示输入appid和你的Gmail 账号和密码。然后上传到服务端（如果出错多试几次） 4、 接着我们修改$GOAGENT_ROOT/local/proxy.ini文件、在[gae]配置项下面将appid=修改为你的appid，将[listen]下面的visible的值改为0，这样启动后最小化到托盘区； 5、 配置完成后我们可以直接运行Goagent.exe程序启动代理。是一个黑框框运行着的不要关掉 6、 打开谷歌浏览器、配置代理服务器IP:127.0.0.1 端口：8087 作为局域网代理服务器 将goagent部署在一台服务器上，其他机器上网时借助于这台服务器上的goagent，方法是： 修改上面proxy.ini文件[listen]下的ip的值为0.0.0.0，port保持8087不变； 其他机器要借助于此服务器上网，将proxy的ip设为服务器的IP地址，端口号设为8087即可； Ubuntu系统下可以定义系统级的代理服务器，这样使用apt-get这样的命令行下载也不受限制了，在 [System settings -> network -> network proxy]中设置； 修复403错误 如果用goagent连接时浏览器报403错误，将$GOAGENT_HOME/local/proxy.ini中[gae]下面的profile值从google_cn改为google_hk即可；","tags":"Tech","url":"http://leetschau.github.io/ji-yu-goagentde-fan-qiang-fang-fa.html","loc":"http://leetschau.github.io/ji-yu-goagentde-fan-qiang-fang-fa.html"},{"title":"自动将Evernote笔记发布到博客上","text":"Evernote笔记要自动分享到博客还真不那么容易，借鉴 Using Evernote to Post to WordPress ，申请了一个Wordpress帐号，点击dashboard左边的\"控制板\" -> My Blogs -> Post by Email下面的\"Enable\"按钮，会出现一个email地址，向这个地址发送邮件就可以发布博客了，可以先将写好的笔记保存在一个文件里，然后通过python的email模块向这个地址发邮件的方法实现自动发布博客，然后用evernote的local api将这个文件变成一个新笔记保存在数据库中。 对于现有的笔记，只能在菜单\"笔记->分享->通过电子邮件发送\"，填上Email地址的方法，刚才试验成功，但如果修改这个笔记重新发送一次，wordpress上不会覆盖原来的笔记，而是发一条新博文，还有一个问题是wordpress官网的 免费博客 虽然很好，但被GFW屏蔽了。 Clipboard to Email – Python Code 演示了如果将剪贴板里的内容通过email发送出去，也是一种解决问题的方法。 python 2.7.3 doc: 18.1.11. email: Examples 有发送html文档的完整例子； 126和163也支持邮件发博客，用自己的邮箱发送到blogmail@188.com，可以用python的smtplib，通过smtp.163.com发送； 下面这个发送text邮件的实例在163博客上成功发布（sendmail方法如果返回一个空字典，说明发送成功）： import smtplib # Import the email modules we'll need from email.mime.text import MIMEText # Create a text/plain message msg = MIMEText('this is a test blog from email') me = 'lee_chau@163.com' you = 'blogmail@188.com' msg['Subject'] = 'A Test Blog from Email' msg['From'] = me msg['To'] = you # Send the message via our own SMTP server, but don't include the # envelope header. s = smtplib.SMTP('smtp.163.com') s.login('lee_chau', 'abaqus67') s.sendmail(me, [you], msg.as_string()) s.quit() 2013-04-13更新： 参考 从Evernote自动发博客到WordPress ，可以用 eatags.com 将笔记发布到wordpress.com上，设置好共享之后，要发布的笔记只要加上标签\" eat.wordpress.post \"（参考https://eatags.com/features）就会被自动同步到wordpress.com上，今天测试的结果可以显示图片，是目前所知最好的同步方式，或者用 everblog.us 也能将evernote笔记发布到everblog.us网站上，但不能显示图片，everblog选中一个笔记本后会将该笔记本下所有的笔记都发布到everblog网站上，适合批量发布；","tags":"Tech","url":"http://leetschau.github.io/zi-dong-jiang-evernotebi-ji-fa-bu-dao-bo-ke-shang.html","loc":"http://leetschau.github.io/zi-dong-jiang-evernotebi-ji-fa-bu-dao-bo-ke-shang.html"},{"title":"NoClassDefFoundError与ClassNotFoundException的区别","text":"NoClassDefFoundError是一个Error，严重级别高，它导致JVM加载失败，通常是由于class loader在classpath中找不到被引用的class文件引起； ClassNotFoundException是一个异常，严重级别低（相比于Error），通常在利用反射机制加载类时找不到指定的类引起，由于是异常，是可以被catch语句扑捉然后在代码中进行处理的。 参考：http://stackoverflow.com/questions/1457863/what-is-the-difference-between-noclassdeffounderror-and-classnotfoundexception","tags":"Tech","url":"http://leetschau.github.io/noclassdeffounderroryu-classnotfoundexceptionde-qu-bie.html","loc":"http://leetschau.github.io/noclassdeffounderroryu-classnotfoundexceptionde-qu-bie.html"},{"title":"能够进行多段文本匹配的NFA改良算法","text":"下面的代码基于NFA算法实现了在多段字符串中匹配正则表达式， 对比NFA算法可以看到它将pc由局部变量提升为类成员，以保存中间匹配状态， 另外在匹配成功后将pc恢复到null状态。实际使用中， 此类还应该增加一个\"reset\"方法，将pc值置为null，以便用户可以显式要求重新开始匹配。 public class MultiSegmentNFA { private final Digraph G ; // digraph of epsilon transitions private final String regexp ; // regular expression private final int M ; // number of characters in regular expression private Bag < Integer > pc = null ; public MultiSegmentNFA ( String regexp ) { ... // same as NFA } public boolean recognizes ( String target ) { if ( pc == null ) { DirectedDFS dfs = new DirectedDFS ( G , 0 ) ; pc = new Bag < Integer > () ; for ( int v = 0 ; v < G.V(); v++) if ( dfs . marked ( v )) pc . add ( v ) ; } for ( int i = 0 ; i < target.length(); i++) { Bag < Integer > match = new Bag < Integer > () ; for ( int v : pc ) { if ( v == M ) continue ; if (( regexp . charAt ( v ) == target . charAt ( i )) || regexp . charAt ( v ) == ' . ' ) match . add ( v + 1 ) ; } DirectedDFS dfs = new DirectedDFS ( G , match ) ; pc = new Bag < Integer > () ; for ( int v = 0 ; v < G.V(); v++) if ( dfs . marked ( v )) pc . add ( v ) ; if ( pc . size () == 0 ) return false ; } for ( int v : pc ) if ( v == M ) { pc = null ; return true ; } return false ; } public static void main ( String [] args ) { LinkedList < String > msgs = new LinkedList < String > () ; msgs . offer ( \" welcome lonely logoout \" ) ; msgs . offer ( \" to flog \" ) ; msgs . offer ( \" into a fog \" ) ; String token = \" outto \" ; // 这个目标由第1和第2个字符串拼接而成 String pat = \" (.* \" + token + \" .*) \" ; MultiSegmentNFA mnfa = new MultiSegmentNFA ( pat ) ; String target = msgs . poll () ; while ( target != null ) { if ( mnfa . recognizes ( target )) { break ; } target = msgs . poll () ; } if ( target == null ) { System . out . println ( \" cannot find \" + token + \" in msgs. \" ) ; } else { System . out . println ( \" find pat in < \" + target + \" > \" ) ; } } } Note: Java的Pattern类使用的就是基于NFA的搜索算法， 见JDK 6文档java.util.regex.Pattern的\"Comparison to Perl 5\"一节。","tags":"Tech","url":"http://leetschau.github.io/neng-gou-jin-xing-duo-duan-wen-ben-pi-pei-de-nfagai-liang-suan-fa.html","loc":"http://leetschau.github.io/neng-gou-jin-xing-duo-duan-wen-ben-pi-pei-de-nfagai-liang-suan-fa.html"},{"title":"NFA算法笔记","text":"NFA(Nondeterministic finite-state automata)是一种在字符串中寻找正则表达式匹配的算法，优点是查找文本的指针不回退，适用于在网络传输的报文中寻找正则表达式描述的目标（因为网络传输中报文是被分段接收的，且分段的方式不确定），在Robert的\"Algorithms\"第5.4节\"Regular Expressions\"中有详细介绍。 NFA算法可以分为定义和执行两部分，定义阶段和执行阶段。 定义阶段是将要查找的正则表达式（String类型）转换为一个有向图（Digraph类型），该图中的边是所有可以进行的空转换（见p795倒数第2行），定义阶段在书中\"Building an NFA corresponding to an RE\"一节，图示见p803，代码见p802），在代码表现为以一个正则表达式字符串为参数的NFA构造函数； 执行阶段就是判断待处理的文本中是否含有目标正则表达式（见\"Simulating an NFA\"一节，图示见p798），整个过程是一个循环过程，每次循环待处理文本指针前进一个字符，这次循环由两步组成，首先根据当前正则表达式指针所处位置（最初位置都是0）算出所有空转换可达位置（借助深度优先算法DirectedDFS，可达位置保存在变量pc中），然后将所有可达位置上的字符与待处理文本指针处的字符比较，如果一样则把正则表达式指针的后一位保存在变量match中。然后以match为初始位置重新构造DirectedDFS对象，进而得到可达位置集合pc，然后从中筛选匹配上的位置，如此循环，直到待处理文本指针到达文本尾部，如果pc中有正则表达式长度的那个元素（代表匹配成功的位置，书中代码用类成员M表示），说明匹配正则表达式成功，否则失败。 需要说明的是，从所有可达状态pc中筛选匹配上位置并放入match中之前，需要先将值为M的元素去掉，以用\"(A B|AC)D\"匹配\"AABDC\"为例，当目标文本指针等于4时，即指向\"AABDC\"的最后一个字符C时，pc中已经包含了最终状态11（正则串\"((A B|AC)D)\"的长度），因为AABD符合\"(A B|AC)D\"，但最后的C导致整个文本不匹配\"(A B|AC)D\"，所以结果仍然是匹配失败。 测试代码如下： String token = \"(A B|AC)D\"; String regexp = \"(\" + token + \")\"; // when test if target string \"contains\" regex, regexp = \"(. \" + token + \".*)\" NFA nfa = new NFA(regexp); String target = \"AABDC\"; if (nfa.recognizes(target)) { System.out.println(\"match: \" + target); } else { System.out.println(\"not match: \" + target); }","tags":"Tech","url":"http://leetschau.github.io/nfasuan-fa-bi-ji.html","loc":"http://leetschau.github.io/nfasuan-fa-bi-ji.html"},{"title":"wine笔记","text":"在虚拟机（virtualbox）的Ubuntu 11.10上安装wine，使用图形界面的Softwre Center安装失败，提示网络连接异常，但在命令行下用apt-get install wine安装成功，版本是1.4。 安装wine后exe文件双击就可以执行了。 Windows绿色文件可以运行，但速度非常慢（虚拟机配置比较低造成的还是wine本身就很慢？），基本不可用，只能验证这个程序在Wine上能不能运行。 2014.6.3更新： 可以先用 apt-cache search wine 搜索可用的wine安装包的具体名称；","tags":"Tech","url":"http://leetschau.github.io/winebi-ji.html","loc":"http://leetschau.github.io/winebi-ji.html"},{"title":"Windows 7 启动Wireshark找不到网卡的解决办法","text":"今天启动Wireshark时报\"npf isn't running\"，找不到网卡，google一番后发现是一个叫npf的系统服务没有启动所致，首先以管理员身份开启命令行，然后进入如下操作： C:\\Windows\\system32>sc qc npf [SC] QueryServiceConfig 成功 SERVICE_NAME: npf TYPE : 1 KERNEL_DRIVER START_TYPE : 3 DEMAND_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : system32\\drivers\\npf.sys LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : NetGroup Packet Filter Driver DEPENDENCIES : SERVICE_START_NAME : C:\\Windows\\system32>sc start npf SERVICE_NAME: npf TYPE : 1 KERNEL_DRIVER STATE : 4 RUNNING (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0 PID : 0 FLAGS : C:\\Windows\\system32>sc config npf start= auto [SC] ChangeServiceConfig 成功 注意第一个条指令是查询npf服务的状态，可以看到是DEMAND_START，不是自动启动，所以第二条指令手工启动了服务，第3条指令将npf启动方式改为自动启动，注意它的格式比较特别，等号后面要加一个空格（等号前面不能写空格）。","tags":"Tech","url":"http://leetschau.github.io/windows-7-qi-dong-wiresharkzhao-bu-dao-wang-qia-de-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/windows-7-qi-dong-wiresharkzhao-bu-dao-wang-qia-de-jie-jue-ban-fa.html"},{"title":"Notes about Robert Algorithms chapter 4","text":"p534: \"These two\" in the last paragraph refers to \"Connectivity\" & \"Single-source paths\" in this page. Chapter Structure 4.1 Undirected Graph 518 Glossary 519 Undircted graph data type 522 Representation alternatives 524 Adjacency-lists data structure 525 Design pattern for graph processing 528 Depth-first search 530 Searching in a maze 530 Warmup 531 One-way passages 532 Detailed trace of depth-first search 533 Finding paths 535 Implementation 535 Detailed trace 537 Breadth-first search 538 Implementation 538 Connected components 543 Implementation 543 Union-find 546 Symbol graphs 548 Implementation 551 Degree of seperation 553 Summary 556 4.2 Directed Graphs 566 Digraph data type 568 Reachability in digraphs 570 Cycles and DAGs 574 Strong connectivity in digraphs 584 Summary 594","tags":"Tech","url":"http://leetschau.github.io/notes-about-robert-algorithms-chapter-4.html","loc":"http://leetschau.github.io/notes-about-robert-algorithms-chapter-4.html"},{"title":"关于单例模式","text":"参考： 【深入】java 单例模式 其中的第三种方法比较好，简单、稳定，唯一的缺点是在初始化时加载，没有实现lazy load，但在资源不紧张的场景下，没必要lazy load。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-dan-li-mo-shi.html","loc":"http://leetschau.github.io/guan-yu-dan-li-mo-shi.html"},{"title":"hsql笔记","text":"hsql 是一款开源的基于Java的数据库。 数据库服务 使用默认配置直接启动 运行$HSQL_HOME/bin/runServer.bat； 配置服务参数 如数据库文件名和服务监听端口等。 通过命令行参数：（详见User guide -> Chapter 1 -> Server mode）通过runServer.bat文件可知它只是运行了\"java -classpath ../lib/hsqldb.jar org.hsqldb.server.Server\"，实际上可以加命令行参数指定服务特性。例如： java -cp ../lib/hsqldb.jar org.hsqldb.Server -database.0 file:mydb -dbname.0 xdb 通过配置文件：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Server and Web Server Properties）在hsql服务启动目录（运行\"java ...Server\"的目录）下创建一个server.properties文件，例如： server.database.0=godudb server.port=3001 通过程序代码：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Starting a Server from your Application）例如： HsqlProperties p = new HsqlProperties(); p.setProperty(\"server.database.0\",\"file:/opt/db/accounts\"); p.setProperty(\"server.dbname.0\",\"an_alias\"); // set up the rest of properties // alternative to the above is Server server = new Server(); server.setProperties(p); server.setLogWriter(null); // can use custom writer server.setErrWriter(null); // can use custom writer server.start(); 客户端 图形界面操作 这里用 squirrel-sql 作为客户端，运行$SQUIRREL_HOME/squirrel-sql.bat启动程序； 安装hsql驱动 将 \\(HSQL_HOME/lib/hsqldb.jar拷贝到\\) SQUIRREL_HOME/lib下； 配置数据库别名 jdbc url: jdbc:hsqldb:hsql://localhost； username: sa password: 留空 然后连接就可以打开数据库了。 数据库操作 建表 在SQL面板里输入： CREATE TABLE Person ( LastName varchar(10), FirstName varchar(10), Address varchar(10), Age int ) 运行后在database/PUBLIC/TABLE下会生成一个名为Person的表； 插入数据 insert into person values('chad','lee','guangzhou',33) 删除表 drop table person 持久化验证 重启数据库服务后再用客户端连接服务，可以看到原来的表以及表中的数据都在，这样就实现了数据的持久化。 程序代码操作 下面的代码演示了初始化数据驱动，连接数据库，读取数据及其关闭数据库服务的完整过程，与上面的代码启动服务配合，可以实现对数据库的自动化测试。 try { Class.forName(\"org.hsqldb.jdbcDriver\"); } catch (Exception e) { System.err.println(\"ERROR: failed to load HSQLDB JDBC driver.\"); e.printStackTrace(); return; } try { Connection conn = DriverManager.getConnection(\"jdbc:hsqldb:hsql://localhost:3001\", \"SA\", \"\"); String sql = \"select * from person\"; PreparedStatement content = conn.prepareStatement(sql); ResultSet res = content.executeQuery(); // int rowcount = -1; // if (res.last()) { // ResultSet.last() is unsupported by hsql // rowcount = res.getRow(); // } while (res.next()) { System.out.println(res.getString(1)); System.out.println(res.getString(2)); System.out.println(res.getString(3)); } Statement st = conn.createStatement(); st.execute(\"SHUTDOWN\"); conn.close(); } catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/hsqlbi-ji.html","loc":"http://leetschau.github.io/hsqlbi-ji.html"},{"title":"用enchanter实现自动执行ssh任务","text":"enchanter 可以自动执行ssh脚本： F:>java -jar enchanter-python-0.5.1.jar aaa.py 其中task.py的内容如下： ssh.connect('192.168.1.127', 22, 'leechau','000'); print 'recv: '+ssh.getLine(); ssh.waitFor('~ \\('); ssh.sendLine('ls -l'); print 'recv: '+ssh.getLine(); ssh.waitFor('~\\) '); ssh.sendLine('exit'); print 'recv: '+ssh.getLine(); ssh.disconnect(); 没找到执行telnet任务的方法，但expect4j的官网上说enchanter是可以运行telnet任务的。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-enchantershi-xian-zi-dong-zhi-xing-sshren-wu.html","loc":"http://leetschau.github.io/yong-enchantershi-xian-zi-dong-zhi-xing-sshren-wu.html"},{"title":"使用Squirrel SQL Client连接数据库","text":"常用操作 关闭连接：Session -> Close Session (Ctrl-F6) 编辑数据：在数据表上右键，选择 Make Editable 插入新记录：在数据表上右键，选择 Make Editable ，然后 Insert Row MySQL 寻找数据库驱动jar包： locate '*mysql*.jar' 找MySQL的驱动， 将找到的 mysql-connector-java-5.1.6-bin.jar 拷贝到$SQUIRREL_HOME/lib下。 Alias URL: jdbc:mysql://localhost:3306/ddaas 注意URL里一定要加数据库名称，否则看不到数据库里的数据表。 MongoDB 下载 MongoDB JDBC Driver 试用版，用 java -jar UnityJDBC_Trial_Install.jar 安装到一个临时目录下，将其中的 mongodb_unityjdbc_full.jar 文件拷贝到 拷贝到$SQUIRREL_HOME/lib下。 然后到安装目录的 Uninstaller 目录下执行 java -jar uninstaller.jar 卸载。 UnityJDBC的试用版有效期1个月，之后只能返回前100个结果， 不知道 mongodb_unityjdbc_full.jar 有没有1个月的限制。 Trouble Shooting 连接数据库后，查询数据时出现错误： SQLState: 42000 ErrorCode: 1064 原因是客户端版本比服务端旧， 出现了兼容性问题 ， 下载 并解压得到最新的mysql-connector-java-5.1.40-bin.jar， 替换$SQUIRREL_HOME/lib下旧版本（v5.1.6）的jar包。 旧笔记 squirrel-sql client 官网上下载的 fw.jar是它的一个核心组件，完整的portable版squirrel client是plainzip版， 解压后运行squirrel-sql.bat，需要升级的话用前面提到的fw.jar替换 $SQUIRREL_HOME/lib 下的同名文件， 使用中发现替换fw.jar后造成程序启动失败，所以最好使用原装的fw.jar。 调整界面字体： Main Menu -> File -> Global Preferences -> Fonts (Consolas/Arial 14 recommended) 调整SQL语句的字体： Main Menu -> Session -> Session Properties -> SQL -> SQL Entry Area: Font (Consolas 16 recommended)，这种方法每次退出后不能保存， 要是全局设置中能修改SQL字体就好了。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-squirrel-sql-clientlian-jie-shu-ju-ku.html","loc":"http://leetschau.github.io/shi-yong-squirrel-sql-clientlian-jie-shu-ju-ku.html"},{"title":"使用PMD检查代码质量","text":"Eclipse插件方式 安装 PMD 的eclipse插件有两个，一个是官网上Plugins->Eclipse Plugins链接指向的页面，安装说明里只给出了在线安装的方法（update link是http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/），没有说明离线安装怎么做，这两天sourceforge.net被墙了，只能在eclipse里用代理安装这个插件。 另外还有一个开源项目叫 pmd-eclipse ，提供离线安装包，解压到dropins目录后能使用，但没有规则配置和文件过滤选项，也没有结果汇总视图，不要用这个插件。 使用 配置 插件装好后在Preference->PMD下会有几个子项目，包括\"Rule Configuration\"中选择代码检查规则，\"File Filters\"里指定被检查文件的范围等。这里配置的是全局规则。 配置规则时首先在group by中选择Rule set，这样查找起来比较方便，然后再选择具体哪项检查规则，如下图： 项目属性->PMD下也可以选择规则，但没提供\"全部选中/取消\"按钮，300多项规则要一个一个选，太麻烦，别用了。 检查 右键->PMD->Check Code就开始检查了，检查完自动打开PMD Perspective，在\"Violations Overview\"里显示汇总结果，如果要修改检查规则重新检查，并且不想保留就结果，\"右键被检查项目 -> PMD -> Clear Violations\"清除之前的结果，否则新旧结果会被叠加在一起。 生成检查报告 首先在Preference->PMD->Reports下选择生成报告的格式（只有text格式可用，其他格式运行时都报空指针异常），然后\"右键被检查项目 -> PMD -> Generate Reports\"，在项目根目录下会生成一个reports文件夹，里面是检查报告。 命令行方式 E:\\workspace\\JDK6UTF8\\Godu3NewBuffer>d:\\Apps\\pmd-bin-5.0.1\\bin\\pmd.bat -d src -f html -R rulesets/java/codesize.xml > out.html -d后面写被检查的目录（或者文件），-f后面写输出文件的格式，-R后面是规则名称，实际这些规则保存在$PMD_HOME/lib/pmd-5.0.1.jar/rulesets/java中； 总结 PMD和Checkstyle的eclipse插件都提供了比较好的实时代码质量监控能力，PMD提供的结果汇总面板使开发人员可以对项目代码整体质量有一个把握，生成报告功能也很实用，而CheckStyle为每一个项目定制configuration的方法在不同项目应用不同规则时特别方便，适合在开发过程中\"实时监控\"（见笔记\" 使用CheckStyle检查代码复杂度 \"）。 本文使用markdown语法。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-pmdjian-cha-dai-ma-zhi-liang.html","loc":"http://leetschau.github.io/shi-yong-pmdjian-cha-dai-ma-zhi-liang.html"},{"title":"使用CheckStyle做代码检查","text":"命令行应用 官网文档对命令行用法讲解的很详细，基本分为以下几步。 安装 下载独立运行包（checkstyle-5.6-bin.zip），解压到d:\\apps下； 写配置文件 可以在eclipse中用插件eclipse-cs写出来，然后查到这个配置的文件名，然后拷贝出来作为配置文件； cc.xml内容如下： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"> 注意 内如果有名为severity的子标签，值为ignore表示该项检查被忽略（无效），如果要执行此项检查可以去掉该子标签或者把值改为warning： ... 在Jenkins上执行Checkstyle检查时需要将severity设置为wanning，因为默认违反规则将被作为error，导致ant脚本执行结果被标记为失败，从而整个BVT执行失败。 执行代码检查 下面的命令检查了E:\\workspace\\JDK6UTF8\\Godu3NewBuffer\\src目录中所有代码的圈复杂度： E:\\workspace\\JDK6UTF8\\Godu3NewBuffer>java -jar d:\\Apps\\checkstyle-5.6\\checkstyle-5.6-all.jar -c cc.xml -r src -o result.txt 其中-c后面写规则（配置）文件名，-r后面写待检查的文件/目录名，-o后面是结果输出文件名，-f xml表示输出为xml文件（默认是plain文本文件），如果不需要保存到文件中，只是查看一下结果，去掉-o，结果输出到屏幕上； 以Ant任务形式运行 将上述zip包中的checkstyle-5.6-all.jar文件拷贝到$ANT_HOME/lib下； 下面是一个简单的checkstyle任务，更多的检查方法参考 Ant Task of Checkstyle 作为Eclipse插件 安装 这个插件叫 eclipse-cs ，先是在线装，连不上，改为下载zip包，解压到dropins目录的方法安装成功。 使用 CheckStyle的功能是通过一个具体的配置（configuration）来发挥作用的，对于被检查的项目，在属性里activate checkstyle，它就会在每次构建（build）项目的时候自动运行，如果是自动构建，则每次保存文件都会触发checkstyle执行代码检查。 使用CheckStyle分为两步，首先是Window->Preference里新建一个configuration，用来定义要检查的项目（如代码的圈复杂度、javadoc格式等），然后在被检查的项目属性里指定使用这个configuration，并定义检查的范围（例如只检查打开的文件、指定具体的包等）。 进行代码复杂度检查 第一步配置执行复杂度检查的configuration: Window -> Preference -> CheckStyle -> Global check configurations -> new，打开新建conf的窗口，写一个名字然后点OK： 在configuration窗体里选中 Metrics -> Cyclomatic Complexity： 点Add后出现配置窗体，在这里输入严重级别和判断标准，默认值为10，即当圈复杂度超过10时标记出来，确认退出。 第二步是在被检查的项目属性的checkstyle窗体中配置参数，首先是激活checkstyle，然后是选择一个configuration，最后是配置那些文件不进行检查，配好后确认就OK了。 检查结果的汇总在Window -> Show View -> Checkstyle violations中，还提供了一个饼图窗口； GODU的新版本有些方法复杂度已经超过20了，汗，后面得好好重构才行。下面是checkstyle推荐的复杂度判断标准： Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now! 总结 Eclipse插件没有生成报告功能，优点是提供了离线安装包，安装过程对我等天朝草民来说比较简单； 与PMD相比，CheckStyle适合在写代码的同时打开代码检查功能进行\"实时监控\"，如果是代码已写完，需要对整体质量进行评估，或者找问题点，则PMD比较适合，因为它具备PMD视图，可以对结果汇总。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-checkstylezuo-dai-ma-jian-cha.html","loc":"http://leetschau.github.io/shi-yong-checkstylezuo-dai-ma-jian-cha.html"},{"title":"关于依赖倒置原则","text":"参考 《设计模式之禅》作者对依赖倒置原则的解释 ，其中比较重要的是： 设计要分层，高层抽象（业务逻辑）只依赖于接口，而不是某个具体的实现； 开闭原则是为了降低软件耦合度而提出的指导思想，依赖倒置是达到这一目标的手段； 底层实现模块扩展之后，高层业务代码（也就是所谓的运行时代码）会随之改变，但其他底层实现模块不需要修改；","tags":"Tech","url":"http://leetschau.github.io/guan-yu-yi-lai-dao-zhi-yuan-ze.html","loc":"http://leetschau.github.io/guan-yu-yi-lai-dao-zhi-yuan-ze.html"},{"title":"关于职责链模式","text":"参考 wiki 上 Example -> Java部分的Logger实例，这个实现方法比之前我在GODU中的实现更好，因为Logger的实现类只要实现自己对消息的处理即可，完全不必关心其他事情，而我的实现里AuthUnit实现了抽象类AFuncUnit，在其processRequest方法处理处理消息，还要加上向后传递的动作： next.writeMessage(msg); Logger之所以能实现\"自动\"向后传递，是因为客户处理消息时调用的是Logger.message(msg)方法，而实际处理消息的方法是writeMessage(msg)方法，message(msg)方法分两步：首先是处理消息，然后是向后传递： next.message(msg); 它使用的是抽象父类的message方法，而不是直接调用next.writeMessage(msg)方法。 writeMessage被子类实现，所以是abstract protected，而message是对外接口，所以是public。 完整代码： package chainofresp; abstract class Logger { public static int ERR = 3; public static int NOTICE = 5; public static int DEBUG = 7; protected int mask; // The next element in the chain of responsibility protected Logger next; public void setNext(Logger log) { next = log; } public void message(String msg, int priority) { if (priority <= mask) { writeMessage(msg); } if (next != null) { next.message(msg, priority); } } abstract protected void writeMessage(String msg); } class StdoutLogger extends Logger { public StdoutLogger(int mask) { this.mask = mask; } protected void writeMessage(String msg) { System.out.println(\"Writing to stdout: \" + msg); } } class EmailLogger extends Logger { public EmailLogger(int mask) { this.mask = mask; } protected void writeMessage(String msg) { System.out.println(\"Sending via email: \" + msg); } } class StderrLogger extends Logger { public StderrLogger(int mask) { this.mask = mask; } protected void writeMessage(String msg) { System.err.println(\"Sending to stderr: \" + msg); } } public class ChainOfResponsibilityExample { private static Logger createChain() { // Build the chain of responsibility Logger logger = new StdoutLogger(Logger.DEBUG); Logger logger1 = new EmailLogger(Logger.NOTICE); logger.setNext(logger1); Logger logger2 = new StderrLogger(Logger.ERR); logger1.setNext(logger2); return logger; } public static void main(String[] args) { Logger chain = createChain(); // Handled by StdoutLogger (level = 7) chain.message(\"Entering function y.\", Logger.DEBUG); // Handled by StdoutLogger and EmailLogger (level = 5) chain.message(\"Step1 completed.\", Logger.NOTICE); // Handled by all three loggers (level = 3) chain.message(\"An error has occurred.\", Logger.ERR); } } / The output is: Writing to stdout: Entering function y. Writing to stdout: Step1 completed. Sending via e-mail: Step1 completed. Writing to stdout: An error has occurred. Sending via e-mail: An error has occurred. Writing to stderr: An error has occurred. /","tags":"Tech","url":"http://leetschau.github.io/guan-yu-zhi-ze-lian-mo-shi.html","loc":"http://leetschau.github.io/guan-yu-zhi-ze-lian-mo-shi.html"},{"title":"Notes about Jython","text":"下面的程序（telnetClient.py）登录telnet服务器，执行ls命令然后退出： import telnetlib HOST = \"192.168.1.178\" #user = raw_input(\"Enter your remote account: \") #password = getpass.getpass() user = \"user\" password = \"000\" tn = telnetlib.Telnet(HOST) tn.read_until(\"ogin: \") tn.write(user + \"\\n\") if password: tn.read_until(\"assword: \") tn.write(password + \"\\n\") tn.write(\"ls\\n\") tn.write(\"exit\\n\") print tn.read_all() 下面是分别用python和jython运行这个脚本的命令： python telnetClient.py java -jar f:\\warez\\dev\\Jython\\jython-standalone-2.5.3.jar telnetClient.py 在Jython的3个下载包中，jython-standalone-2.5.3.jar是比较portable的，不需要预处理jdk（jython-2.5.3.jar），不需要安装（jython-installer-2.5.3.jar）。","tags":"Tech","url":"http://leetschau.github.io/notes-about-jython.html","loc":"http://leetschau.github.io/notes-about-jython.html"},{"title":"jep Notes","text":"Run Python in Java with jep $ conda create - n jep2 python = 3.5 $ . activate jep2 $ pip install jep $ export LD_LIBRARY_PATH = \"/home/leo/apps/miniconda3/envs/jep2/lib/python3.5/site-packages/jep\" $ cat << EOF > HW . java import jep . Jep ; public class HW { public static void main ( String [] args ) { try ( Jep myjep = new Jep ( false )){ myjep . eval ( \"from java.lang import System\" ); myjep . eval ( \"s = 'Hello World'\" ); myjep . eval ( \"System.out.println(s)\" ); myjep . eval ( \"print(s)\" ); myjep . eval ( \"print(s[1:-1])\" ); } catch ( Exception e ) { System . err . println ( \"Caught Exception: \" + e . getMessage ()); } } } EOF $ javac - cp / home / leo / apps / miniconda3 / envs / jep2 / lib / python3 .5 / site - packages / jep / jep - 3.7.1 . jar HW . java $ java - cp . :/home / leo / apps / miniconda3 / envs / jep2 / lib / python3 .5 / site - packages / jep / jep - 3.7.1 . jar HW Run Interactive Shell $ jep >>> from java.lang import System >>> System . out . println ( \"hello\" ) hello See more details with cat $(which jep) . Old notes in 2013.3.19 jepp 产品包在 Java Embedded Python ， 据作者说可以将python代码嵌入到Java代码中，且效率很高。 安装 官网上下载的是源代码包，需要编译，因此Windows上就不考虑了。 Ubuntu pip install jep 如果提示安装失败，需要设置JAVA_HOME，这样设置： export JAVA_HOME =/ usr / lib / jvm / default - java 在/usr/lib/jvm下可能会有好几个java版本目录，具体使用哪个需要根据实际情况而定。 使用 Ubuntu下运行jep提示找不到启动类jep.Run，原因不明。","tags":"Tech","url":"http://leetschau.github.io/jep-notes.html","loc":"http://leetschau.github.io/jep-notes.html"},{"title":"htop笔记","text":"htop是top指令的增强版，除了top的功能外，还能针对某一进程显示它打开的文件（l键）或者它的trace信息（s键），详细说明在htop指令界面上按h（或F1）键。","tags":"Tech","url":"http://leetschau.github.io/htopbi-ji.html","loc":"http://leetschau.github.io/htopbi-ji.html"},{"title":"用于在公网环境下测试的Telnet/SSH服务器","text":"google: public telnet server list for example: telnet nethack.alt.org ssh nethack@alt.org","tags":"Tech","url":"http://leetschau.github.io/yong-yu-zai-gong-wang-huan-jing-xia-ce-shi-de-telnetsshfu-wu-qi.html","loc":"http://leetschau.github.io/yong-yu-zai-gong-wang-huan-jing-xia-ce-shi-de-telnetsshfu-wu-qi.html"},{"title":"Bluestacks的文件和共享","text":"ghost commander是一个类似于totoal commander的双面板文件管理软件，安装sftp插件后可以连接sftp server； BlueStacks与Windows Host分享文件的方法是：Host中将要分享的文件拷贝到C:\\ProgramData\\BlueStacks\\UserData\\SharedFolder下，这个文件夹对应于Bluestacks中的mnt/sdcard/bstfolder/BstSharedFolder，用文件管理器或者ghost commander打开它即可。","tags":"Tech","url":"http://leetschau.github.io/bluestacksde-wen-jian-he-gong-xiang.html","loc":"http://leetschau.github.io/bluestacksde-wen-jian-he-gong-xiang.html"},{"title":"使用脚本下载Gmail邮件附件","text":"以下脚本连接上我的Gmail帐号，将收件箱中2013年1月份的新语丝邮件的附件保存在当前目录的xys文件夹中。 import imaplib import email import os dir_name = 'archive' if not os . path . exists ( dir_name ): os . mkdir ( dir_name ) save_path = os . path . join ( os . getcwd (), dir_name ) M = imaplib . IMAP4_SSL ( 'imap.gmail.com' ) M . login ( 'leetschau@gmail.com' , 'vim72python251' ) M . select () # default value is inbox search_criteria = '(From \"Shi-min Fang\" UNSEEN)' # '(From \"Shi-min Fang\" SINCE \"01-Jan-2013\" BEFORE \"01-FEB-2013\")' res , search_result = M . search ( None , search_criteria ) for num in search_result [ 0 ] . split (): typ , data = M . fetch ( num , '(RFC822)' ) # print 'Message %s\\n%s\\n' % (num, data[0][1]) email_body = data [ 0 ][ 1 ] mail = email . message_from_string ( email_body ) sender = mail [ 'From' ] subject = mail [ 'Subject' ] print \"[\" + mail [ \"From\" ] + \"]: \" + mail [ \"Subject\" ] for part in mail . walk (): if part . get_content_maintype () == 'multipart' : continue if part . get ( 'Content-Disposition' ) is None : continue filename = subject + '.txt' att_path = os . path . join ( save_path , filename ) if not os . path . isfile ( att_path ) : fp = open ( att_path , 'wb' ) fp . write ( part . get_payload ( decode = True )) fp . close () M . close () M . logout () 说明： 附件保存的名字和扩展名是写死的，有兴趣的话可以研究一下怎样获得附件本身的文件名； 这个脚本的强大之处在于它不需要任何第三方库，只用python内置的imaplib，只用是支持imap的邮箱都可以用这个方法处理邮件； 这里面最有用的是邮件搜索规则（search_criteria），格式是(key1 value1 key2 value2 ...)，每个value上加引号，整个表达式是一个字符串，因此也要加引号。 key除了这里的收件人、起始/终止日期，还有ALL（全部邮件），UNSEEN（未读邮件），DELETED（已删除邮件）等，key-value对之间可以随意组合； M的select方法默认值是收件箱，可以指定其他信箱，完整格式是：IMAP4.select([mailbox[, readonly]])； 参考1：http://stackoverflow.com/questions/6225763/downloading-multiple-attachments-using-imaplib 参考2：Python 2.7.3 chapter 20.10 imaplib -> 20.10.2: IMAP4 Example","tags":"Tech","url":"http://leetschau.github.io/shi-yong-jiao-ben-xia-zai-gmailyou-jian-fu-jian.html","loc":"http://leetschau.github.io/shi-yong-jiao-ben-xia-zai-gmailyou-jian-fu-jian.html"},{"title":"用Autohotkey模拟两台客户机的并发访问事件","text":"现在需要从主机113和747上同时向服务器47发送指令\"cat bigMsg\"，以观察47对并发请求的处理能力以及网络传输带宽，可以在pc上分别登录到113和747上，然后分别输入该指令，但手工顺序输入毕竟时间间隔比较大，如果bigMsg不够大，手工操作在47上就变成顺序执行了，如果对开始时间点的要求不那么严格，可以用Autohotkey脚本实现模拟的并发访问，下面演示了用ahk脚本实现的在两台主机上同时运行top指令，8秒后分别发送q退出top界面，以证明ahk脚本确实能够起到\"非阻塞发送两条指令\"的效果。 类似于手工操作，用Kitty登录113和747，假设两个窗口的标题分别为\"lichao@pwm\"和\"godu@goduserver\"； 建立ahk脚本（分别在两个主机上运行）： SetTitleMatchMode, 2 WinActivate, godu SendInput, top{enter} WinActivate, lichao SendInput, top{enter} Sleep, 8000 WinActivate, godu SendInput, q WinActivate, lichao SendInput, q 1. 在vim窗口里运行\":silent !%\"执行这个脚本，与直接运行\"!%\"相比，silent指令不会出现一个dos窗口，然后要求用户看回车返回vim窗口（参考http://vim.wikia.com/wiki/Avoiding_the_%22Hit_ENTER_to_continue%22_prompts）。","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeymo-ni-liang-tai-ke-hu-ji-de-bing-fa-fang-wen-shi-jian.html","loc":"http://leetschau.github.io/yong-autohotkeymo-ni-liang-tai-ke-hu-ji-de-bing-fa-fang-wen-shi-jian.html"},{"title":"基于字节比对的KMP字符串搜索算法","text":"package kmpclient; import java.io.UnsupportedEncodingException; import java.util.LinkedList; public class ByteKMP { private static final int R = 255; private static final String DEFAULT_CHARSET = \"UTF-8\"; private final int[][] dfa; private final int patLen; private int curMatchPos = 0; public ByteKMP(byte[] pat) throws UnsupportedEncodingException { patLen = pat.length; // build DFA from pattern int M = pat.length; dfa = new int[R][M]; dfa[pat[0] & 0xff][0] = 1; for (int X = 0, j = 1; j < M; j++) { for (int c = 0; c < R; c++) dfa[c][j] = dfa[c][X]; // Copy mismatch cases. dfa[pat[j] & 0xff][j] = j + 1; // Set match case. X = dfa[pat[j] & 0xff][X]; // Update restart state. } } public int search(byte[] msg) { int M = patLen; int N = msg.length; int i, j; for (i = 0, j = curMatchPos; i < N && j < M; i++) { j = dfa[msg[i] & 0xff][j]; } if (j == M) { curMatchPos = 0; return i - M; // found } curMatchPos = j; return N; // not found } public static void main(String[] args) throws UnsupportedEncodingException { int a = -27 % 255; testEnglishStr(); testChineseStr(); } private static void testChineseStr() throws UnsupportedEncodingException { LinkedList msgs = new LinkedList (); msgs.offer(\"今天是个好日子\".getBytes(DEFAULT_CHARSET)); msgs.offer(\"厉害不?子= KM= KMP = 真厉害！\".getBytes(DEFAULT_CHARSET)); // msgs.offer(\"= KMP = 真厉害！\".getBytes(DEFAULT_CHARSET)); String pat = \"子= KM\"; // e5, ad, 90, ... [-27, -83, -112, 61, 32, 75, 77] ByteKMP bkmp = new ByteKMP(pat.getBytes(DEFAULT_CHARSET)); int pos = 9999; byte[] target = msgs.poll(); while (target != null) { pos = bkmp.search(target); if (pos < target.length) { break; } target = msgs.poll(); } if (target == null) { System.out.println(\"cannot find \" + pat + \" in msgs.\"); } else { System.out.println(\"find pat at \" + pos + \" in <\" + new String(target) + \">\"); } } private static void testEnglishStr() throws UnsupportedEncodingException { LinkedList msgs = new LinkedList (); msgs.offer(\"welcome lonely logoout\".getBytes(DEFAULT_CHARSET)); msgs.offer(\"to flog\".getBytes(DEFAULT_CHARSET)); msgs.offer(\"into a fog\".getBytes(DEFAULT_CHARSET)); String pat = \"a f\"; ByteKMP bkmp = new ByteKMP(pat.getBytes(DEFAULT_CHARSET)); int pos = 9999; byte[] target = msgs.poll(); while (target != null) { pos = bkmp.search(target); if (pos < target.length) { break; } target = msgs.poll(); } if (target == null) { System.out.println(\"cannot find \" + pat + \" in msgs.\"); } else { System.out.println(\"find pat at \" + pos + \" in <\" + new String(target) + \">\"); } } }","tags":"Tech","url":"http://leetschau.github.io/ji-yu-zi-jie-bi-dui-de-kmpzi-fu-chuan-sou-suo-suan-fa.html","loc":"http://leetschau.github.io/ji-yu-zi-jie-bi-dui-de-kmpzi-fu-chuan-sou-suo-suan-fa.html"},{"title":"使用Wireshark为无线网卡抓包","text":"在Wireshark的网卡列表里，无线网卡的名字不是Windows无线网络连接当中的设备名，需要用下面的方法确定列表中哪个是无线网卡： 方法1： Wireshark -> Capture -> Interface： 可以看到上图中第3个（一般都被命名为Microsoft）有明显的数据传输，是无线网卡的可能性最大； 方法2： Wireshark -> Capture -> Options，列表中有各个网卡的IP地址，很明显第3个网卡就是无线网卡，双击它在\"Capture Filter\"里写上过滤规则就可以抓包了。 以上基于Wireshark 1.8.5版本。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-wiresharkwei-wu-xian-wang-qia-zhua-bao.html","loc":"http://leetschau.github.io/shi-yong-wiresharkwei-wu-xian-wang-qia-zhua-bao.html"},{"title":"关于DNS域名解析","text":"Internet域名解析 以在 万网 上配置niufairs.com为例， 在[我的域名 -> niufairs.com -> 域名解析 -> 解析设置]下， 在\"记录类型\"中: \"A\"代表域名 ， \"主机记录\"为空（保存后显示为\"@\"符号），\"记录值\"为123.57.56.23， 就表示将\"newfairs.com\"解析为123.57.56.23， 如果\"主机记录\"写为\"www\"，表示将\"www.newfairs.com\"解析为123.57.56.23， \"MX\"代表Email设置 ， \"记录类型\"为MX，主机记录为空（显示为\"@\"），记录值in1-smtp.messagingengine.com， 表示所有\"xxx@newfairs.com\"的邮件，都将用in1-smtp.messagingengine.com这个服务器解析。 Linux本地解析 Ubuntu的DNS服务器保存在/etc/resolv.conf文件中，root用户修改这个文件后重启网络服务： / etc / init . d / networking restart RedHat上重启网络服务： service network restart 如果不想使用这个DNS，取消的方法是注释掉（在行首加\"#\"）。 测试DNS服务是否有效： 用nslookup指令查询域名的IP地址，如果能返回正确结果说明DNS设置有效，例如： $ nslookup google.com Server: 127 .0.1.1 Address: 127 .0.1.1#53 Non-authoritative answer: Name: google.com Address: 216 .58.197.110 这里Server代表DNS域名解析服务器，上面的127.0.1.1表示本地解析， \"Address\"代表从解析服务器查到的域名对应的IP地址。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-dnsyu-ming-jie-xi.html","loc":"http://leetschau.github.io/guan-yu-dnsyu-ming-jie-xi.html"},{"title":"Java调用外部程序并计算运行时间","text":"下面的代码演示了启动外部程序\"d:/apps/Kitty/kitty.exe -load cat47\"，获取其输出，计算整个运行时间的方法。注意创建ProcessBuilder对象时第一个参数的写法，路径必须是绝对路径（除非该程序在系统的$PATH中），即使后面设置了工作目录。 public static void main(String[] args) throws IOException, InterruptedException { long start = System.currentTimeMillis(); // 定义外部程序：kitty.exe -load cat47， ProcessBuilder pb = new ProcessBuilder(\"d:/apps/Kitty/kitty.exe\", \"-load\", \"cat47\"); // Map env = pb.environment(); 这里可以设置环境变量 // env.put(\"VAR1\", \"myValue\"); // env.remove(\"OTHERVAR\"); // env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\"); // pb.directory(new File(\"c:/tmp\")); 这里可以设置程序的工作目录 Process p = pb.start(); // 启动外部进程 // OutputStream out = p.getOutputStream(); 可以用out向进程写数据（输入） InputStream in = p.getInputStream(); int recvNum; byte[] buf = new byte[256]; while ((recvNum = in.read(buf)) != -1) { String res = new String(buf, 0, recvNum, \"UTF-8\"); System.out.print(res); } p.waitFor(); // 一直阻塞到p运行完毕 long end = System.currentTimeMillis(); System.out.println(\"duration: \" + (end - start) + \" ms.\"); } 任务cat47连接47的telnet端口，cat一个大文件（2.4MB，内容见笔记\" 用vim制作大报文传输测试文件 \"）并退出，以验证服务器和客户端之间网络传输的效率，cat47所使用的自动登录脚本如下： assword: goduty $ cat big* $ exit","tags":"Tech","url":"http://leetschau.github.io/javadiao-yong-wai-bu-cheng-xu-bing-ji-suan-yun-xing-shi-jian.html","loc":"http://leetschau.github.io/javadiao-yong-wai-bu-cheng-xu-bing-ji-suan-yun-xing-shi-jian.html"},{"title":"erlang telnet & ssh client","text":"Telnet http://erlang.2086793.n4.nabble.com/ct-telnet-example-td2309531.html ct_telnet http://www.erlang.org/doc/apps/common_test/basics_chapter.html http://www.erlang.org/doc/apps/common_test/write_test_chapter.html#intro http://www.erlang.org/doc/apps/common_test/config_file_chapter.html#id2270029 getty.erl at Small example programs in \"Open Source Erlang\". SSH SSH User's Guide ct_ssh","tags":"Tech","url":"http://leetschau.github.io/erlang-telnet-ssh-client.html","loc":"http://leetschau.github.io/erlang-telnet-ssh-client.html"},{"title":"Erlang and OTP in Action 第7章示例","text":"运行过程 $ erlc.exe -o ebin src/*.erl $ erl -boot start_sasl -pa ebin Erlang R16A (erts-5.10) [smp:4:4] [async-threads:10] =PROGRESS REPORT==== 23-Feb-2013::22:36:39 === ... Eshell V5.10 (abort with &#94;G) 1> appmon:start(). =PROGRESS REPORT==== 23-Feb-2013::22:37:14 === supervisor: {local,kernel_safe_sup} started: [{pid,<0.46.0>}, {name,timer_server}, {mfargs,{timer,start_link,[]}}, {restart_type,permanent}, {shutdown,1000}, {child_type,worker}] {ok,<0.43.0>} 2> application:start(simple_cache). =PROGRESS REPORT==== 23-Feb-2013::22:37:37 === supervisor: {local,sc_sup} started: [{pid,<0.57.0>}, {name,sc_element_sup}, {mfargs,{sc_element_sup,start_link,[]}}, {restart_type,permanent}, {shutdown,2000}, {child_type,supervisor}] =PROGRESS REPORT==== 23-Feb-2013::22:37:37 === supervisor: {local,sc_sup} started: [{pid,<0.58.0>}, {name,sc_event}, {mfargs,{sc_event,start_link,[]}}, {restart_type,permanent}, {shutdown,2000}, {child_type,worker}] =PROGRESS REPORT==== 23-Feb-2013::22:37:37 === application: simple_cache started_at: nonode@nohost ok 3> simple_cache:insert(\"www.google.com\",gurl). =INFO REPORT==== 23-Feb-2013::22:39:20 === create([119,119,119,46,103,111,111,103,108,101,46,99,111,109], gurl) ok 4> simple_cache:lookup(\"www.google.com\"). =INFO REPORT==== 23-Feb-2013::22:39:45 === lookup([119,119,119,46,103,111,111,103,108,101,46,99,111,109]) {ok,gurl} 5> sc_event_logger:delete_handler(). ok 6> simple_cache:lookup(\"www.google.com\"). {ok,gurl} 7> sc_event_logger:add_handler(). ok 8> simple_cache:lookup(\"www.google.com\"). =INFO REPORT==== 23-Feb-2013::22:48:36 === lookup([119,119,119,46,103,111,111,103,108,101,46,99,111,109]) {ok,gurl} 9> 运行过程 启动过程 application:start(simple_cache). -> simple_cache.app(见p104表4-2中对mod参数的说明) -> sc_app.start/2（见p105对代码清单4-2的说明） -> sc_store:init/0 -> ets:new/2 sc_sup:start_link -> sc_sup:init/0（通过supervisor:start_link/0方法回调） -> sc_element_sup:start_link/0 -> sc_element:start_link/0 -> gen_server:start_link sc_event:start_link -> gen_event:start_link sc_event_logger:add_handler/0（将自己注册到gen_event容器中） -> sc_event:add_handler/2 -> gen_event:add_handler/3 插入新记录 simple_cache:insert/2 -> sc_event:create/2 -> gen_event:notify/2（利用初始化时定义的回调） -> sc_event_logger:handle_event(create,...) -> error_logger:info_msg(\"create(~w, ~w)~n\", [Key, Value])（完成实际的打印日志动作） 删除处理器 sc_event_logger:delete_handler/0 -> sc_event:delete_handler/2 -> gen_event:delete_handler（取消自己在gen_evnet容器中的注册）","tags":"Tech","url":"http://leetschau.github.io/erlang-and-otp-in-action-di-7zhang-shi-li.html","loc":"http://leetschau.github.io/erlang-and-otp-in-action-di-7zhang-shi-li.html"},{"title":"tshark Notes","text":"root @guserver : / home / lichao # tshark - f \"host 10.0.2.47\" - i eth0 - c 20 - T fields - e ip . src - e ip . dst Options: -f: filter settings; -i: capture interface, Run tshark -D to print interface list. Name and number both OK; -a: capture autostop condition. For example: -a duration:60 ; -T: only print some parts of the output. For example: -T fields ; -e: specify which parts are printed when -T field ; -c: Set the maximum number of packets to read when capturing live data. For example -c 20 means quiting tshark after 20 packages are readed; -w: save output to some files; See man tshark to details.","tags":"Tech","url":"http://leetschau.github.io/tshark-notes.html","loc":"http://leetschau.github.io/tshark-notes.html"},{"title":"网络流量监控工具","text":"iftop Install on Ubuntu: apt-get install iftop . 最简用法（监控所有网络流量）： sudo iftop -n . 监控与指定主机的交互： iftop - n - i eth0 - f \"host 10.0.2.47\" // 监测 47 与自己的双向传输数据 iftop - n - i eth0 - f \"dst host 10.0.2.47\" // 监测从自己流向 47 的传输数据 iftop - n - i eth0 - f \"src host 10.0.2.47\" // 监测从 47 流向自己的数据 目前看来iftop显示的信息最全，但需要好好看手册，每个值都是什么意思；使用它需要root权限； 参考：https://sickbits.net/iftop-finding-traffic-hogs/ sar Install with sudo apt install sysstat . Modify ENABLED in file /etc/default/sysstat to true . Restart sysstat service: sudo service sysstat restart . Now you can use this tool: sar -r 2 20 . Set the display language to English: LC_ALL=\"en_US.UTF-8\" sar -r 2 2 . Ref: How to configure sysstat/sar on Ubuntu/Debian 2014-7-14更新： nethogs 按进程查看流量占用: sudo nethogs wlan0 ; iptraf-ng 按连接/端口查看流量: sudo iptraf-ng ; ifstat 按设备（网卡接口）查看流量: ifstat ; nload 按设备（网卡接口）查看流量: nload ，用左/右键切换网卡接口； nmon 包含CPU, Memory, Disk, Network等各项指标监控 (aptitude install)； glances: 包含CPU, Memory, Disk, Network等各项指标监控 (pip install glances); slurm 按设备（网卡接口）查看流量: slurm -i wlan0 ; collectl 监控主机的CPU, Disk和Network总体使用情况： collectl ; ethtool: 诊断工具 tcpdump: 抓包工具 2014-8-25更新： iptraf-ng用于监测网络流量很好用，在ArchLinux和Mint中可以直接安装。 其中的\"Ip traffic monitor\"可以监测网卡的实时接收/发送 (RX/TX) 数据， 可以显示对端IP地址和端口，本方接收IP地址和端口，但不能显示实时传输速率， \"General interface statistics\" 可以显示所有网卡实时发送/接收数据的速率， 但不能显示对端IP和端口，二者互为补充。 今天测试在同一网段中的两台机器之间用scp传送大文件，速率稳定在99MB/s， 比较靠谱的一个结果， 间接说明scp传大文件可以用来检测网络的最大传输速率。 Ref: 20 Command Line Tools to Monitor Linux Performance 参考： Bandwidth Monitoring Tools For Linux 实时流量监控：pv OS: Ubuntu Server 12.04. netcat & pv apt-get install pv 监控端口5555上的实时网络流量： nc - l 5555 | pv > / dev / null 向服务器113上发送数据： nc 10 . 31 . 1 . 113 5555 ifstat Homepage: http://gael.roualland.free.fr/ifstat/ 使用 ifstat - i eth0 1 5 // 监测网口 eth0的流量 ，每一秒测试一次，共测试 5 次 该工具不需要root权限 安装 Ubuntu可以用apt-get直接装，官网上的ifstat-1.1.tar.gz包是源码包，在RedHat上安装需要编译，过程很简单，根据INSTALL文档的说明： . / configure make make install atsar atsar（Unix的sar指令的Linux移植版，可以用apt-get安装）也有几个选项是用来监控网络情况的，例如每隔2秒显示一次系统当前TCP流量： atsar - t 2 5 trafshow Ubuntu: apt-get install trafshow 监控与47的交互： trafshow -n -i eth0 host 10.0.2.47 ; 网络带宽测试：iperf 又叫bandwidth或者throughput测试，用来测试Server和Client间的最大传输速率。 iperf是命令行工具，还有一个基于Java的图形界面 jperf 可运行在Windows和linux上； 安装：Ubuntu用apt-get install iperf安装，Redhat需要在\"http://pkgs.repoforge.org/iperf/\"上根据操作系统的版本和架构选择一个rpm下载（47服务器系统为Redhat 5.4, x86_64，下载的是iperf-2.0.4-1.el5.rf.x86_64.rpm），然后用rpm -ivh 安装； 用法 启动服务端：iperf -s； 启动客户端：iperf -c 10.0.2.47 -i 1 -f M（-c后面跟服务器IP地址，-i表示发送的时间间隔，-f M表示返回结果以MByte为单位）； 或者启动图像客户端jperf，点击\"Run IPerf\"按钮就可以测网络带宽了。给出的结果是笔记本电脑与113服务器之间单向单流（1 stream）带宽为1.8MB/s左右； iperf作为客户端还有两个比较有用的选项分别是-d和-d -r，前者表示测试同时双向传输的速率，后者表示先进行client to server的单向传输测试，完毕后互换角色，反过来进行server to client的单向传输测试，过程如下： server: iperf -s client: iperf -c 10.0.2.47 -i 1 -f M -d（或者iperf -c 10.0.2.47 -i 1 -f M -d -r） 参考： http://www.smallnetbuilder.com/lanwan/lanwan-howto/30408-measuring-network-performance-jperf http://openmaniak.com/iperf.php","tags":"Tech","url":"http://leetschau.github.io/wang-luo-liu-liang-jian-kong-gong-ju.html","loc":"http://leetschau.github.io/wang-luo-liu-liang-jian-kong-gong-ju.html"},{"title":"用vim制作大报文传输测试文件","text":"这个测试文件用来测试我们开发的应用在传输大报文时的稳定性，是否丢包等，所以这个文件首先要比较大，2MB左右，其次要容易定位，如果传输中间断开，能够容易的知道已经传输了多少报文，根据这些要求，需要制作一个7万多行的文本文件，每行的格式如下： 73727 abcdefghijklmnopqrstuvwxyz 制作过程分两步，第一步生成不变的部分，也就是abc...xyz，先手写一行，然后用yy和p命令很容易搞定，第二步要在每行前面生成行号，执行下面这个指令： :%!cat -n 由于Windows不支持cat指令，这个方法仅能在linux上实现。 参考：http://stackoverflow.com/questions/252766/add-line-numbers-in-vim","tags":"Tech","url":"http://leetschau.github.io/yong-vimzhi-zuo-da-bao-wen-chuan-shu-ce-shi-wen-jian.html","loc":"http://leetschau.github.io/yong-vimzhi-zuo-da-bao-wen-chuan-shu-ce-shi-wen-jian.html"},{"title":"Windows上运行gevent的两个示例程序","text":"gevent从1.0rc1开始将底层依赖的libevent改为libv，并打入了发布包中，降低了部署的难度，在Windows上只要先安装greenlet再装gevent就可以运行了，pypi上可以下到二者的windows安装包（我试用的是gevent-1.0rc2.win32-py2.7.exe和greenlet-0.4.0.win32-py2.7.exe），运行了 官网示例程序 中的回显服务（echoServer）和端口转发（portForwarder）两个示例，将来可以作为erlang版对应的python版实现。","tags":"Tech","url":"http://leetschau.github.io/windowsshang-yun-xing-geventde-liang-ge-shi-li-cheng-xu.html","loc":"http://leetschau.github.io/windowsshang-yun-xing-geventde-liang-ge-shi-li-cheng-xu.html"},{"title":"erlang学习笔记","text":"安装 Ubuntu Server上： sudo apt-get install erlang 如果安装时下载 太慢，可手工下载deb包（ esl-erlang_16.a-rc1_ubuntu_precise_i386.deb ），下完deb文件后，ftp到虚拟机上，用dpkg -i <.deb file>安装（需要首先安装JRE）；Ubuntu Server不能更改屏幕大小，也不能copy/paste文本，所以用kitty ssh过去操作比较好； erlang 语法 代码中逗号，分号，句号的用法：逗号是表达式的分隔符（可以理解为AND），分号是条件分支的分隔符（可以理解为OR），句号是函数结束符（可以理解为END）； 参考\"http://stackoverflow.com/questions/1110601/in-erlang-when-do-i-use-or-or\"； erlang文档 在线版（增量式查找，效果比离线版好）：http://www.erlang.org/erldoc 离线版：otp_doc_html_R16A_RELEASE_CANDIDATE.tar.gz 在 erlang官网下载页 上下载 Erlang/OTP R16A HTML Documentation File ，解压到DOC_HOME下，tr_server中用到的gen_server:start_link/4函数可以在$DOC_HOME\\lib\\stdlib-1.19\\doc下找到html和pdf版的api说明；erlang用到的各个库的api文档都在.\\lib文件夹下；erlang用户手册在.\\doc目录下，erlang运行时（ERTS）在.\\erts-5.10下； erlang内置函数（BIF）文档在 \\(DOC_HOME\\erts-5.10\\doc\\html\\erlang.html中可以查到（或者是对应的pdf文档：\\) DOC_HOME\\erts-5.10\\doc\\pdf\\erts-5.10.pdf的Reference Manual -> erlang部分中），例如apply, list_to_atom等； erlang编译器 Windows上的erlc居然不支持文件通配符，运行\"F:\\tcp_rpc>\"C:\\Program Files\\erl5.10\\bin\\erlc.exe\" -o ./ebin ./src/*.erl\"提示IO错误，只能用\"F:\\tcp_rpc>\"C:\\Program Files\\erl5.10\\bin\\erlc.exe\" -o ./ebin ./src/tr_sup.erl\"的办法分别编译3个erl源文件； IDE erlide 在Eclipse for java developers 4.2中，用 eclipse market搜索erlide并安装成功；（2013-05-13） See https://github.com/erlide/erlide/wiki/Tutorial-Quick-Start for using this plugin to build a HelloWord erlang program. 其他 erlang发音：elan（哦兰）； 多台机器上的erlang节点互相连接 使用erl -name name@ip -setcookie cookiename启动erlang节点，启动后用net_adm:ping('name@ip')进行连接，上午在笔记本和两台服务器上创建3个节点并互联成功，其中笔记本是Win7（IP为10.31.1.30），两个服务器是Ubuntu Server 12.04（IP是10.31.1.113和10.0.7.47），每个节点的-name参数是自己的名字和IP地址，互联的各节点的cookiename需一致；另外Win7可能要关闭防火墙；ip必须是节点的真实IP，如果是hostname，需要有效的DNS，否则无法连接； Remote shell 113服务器：$ erl -name lc@10.31.1.113 -setcookie test 47服务器：$ erl -name lc@10.0.7.47 -setcookie test 在113上远程连接47：Ctrl + G，然后用r指令，例如： (lc@10.31.1.113)1> User switch command --> r 'lc@10.0.7.47' --> j 1 {shell,start,[init]} 2* {'lc@10.0.7.47',shell,start,[]} --> c Eshell V5.8.5 (abort with &#94;G) (lc@10.0.7.47)1> 更多细节： 发起和目标节点上的erl shell都必须已经启动，不需要首先用net_adm:ping建立连接，在113上连接上47后，不能关闭47上的节点，否则remote shell也会随之断开； 113要切换到local shell用\"Ctrl+G, j, c \"方式； 113要退出本地erlang环境用\"Ctrl+G, Ctrl+C, A\"方式（Linux下）； 113要关闭47上的节点用\"q().\"命令； 113要关闭连接47的Remote Shell用\"Ctrl+G, j, k \"方式； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/erlangxue-xi-bi-ji.html","loc":"http://leetschau.github.io/erlangxue-xi-bi-ji.html"},{"title":"VirtualBox中虚拟机在NAT和Host-only方式间切换","text":"NAT模式下虚拟机可以访问互联网，Host-only模式下主机可以通过SSH访问虚拟机，所以这两种方式经常要互相切换，开始是用重启虚拟机的方法，后来感觉这样太慢了，可以先将虚拟机的网络设置改过去，然后用下面的命令重启网卡： sudo ifdown eth0 sudo ifup eth0 2013-02-17 Win7: 网络和共享中心 -> 无线网络连接 -> 属性 -> 共享 -> \"允许其他网络用户……\"：VirtualBox Host-only Network； 用ipconfig查到无线网卡的DNS服务器地址： VirtualBox全局设置 -> 网络 -> Ubuntu虚拟机中配置静态IP地址和DNS服务器： 貌似DNS Server不设也行； 2014-01-27","tags":"Tech","url":"http://leetschau.github.io/virtualboxzhong-xu-ni-ji-zai-nathe-host-onlyfang-shi-jian-qie-huan.html","loc":"http://leetschau.github.io/virtualboxzhong-xu-ni-ji-zai-nathe-host-onlyfang-shi-jian-qie-huan.html"},{"title":"libevent安装过程","text":"下载 libevent-2.0.21-stable.tar.gz tar -xzvf libevent-2.0.21-stable.tar.gz 查看README文件，运行第一步./configure 报错，原因是没有找到C编译器； 安装C编译器；sudo apt-get install gcc 重新运行./configure，配置完成； 运行make，报make未安装，安装后再次执行； $ make verify sudo make install","tags":"Tech","url":"http://leetschau.github.io/libeventan-zhuang-guo-cheng.html","loc":"http://leetschau.github.io/libeventan-zhuang-guo-cheng.html"},{"title":"Multi-thread Echo Server: Python Version","text":"源代码（mulThrServ.py）： import socket import threading import SocketServer class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler): def handle(self): data = self.request.recv(1024) cur_thread = threading.current_thread() print \"cur_thread: \" + cur_thread.name print \"data: \" + data response = \"{}: {}\".format(cur_thread.name, data) self.request.sendall(response) class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer): pass def client(ip, port, message): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((ip, port)) try: sock.sendall(message) response = sock.recv(1024) print \"Received: {}\".format(response) finally: sock.close() if name == \" main \": # Port 0 means to select an arbitrary unused port HOST, PORT = \"localhost\", 0 server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler) ip, port = server.server_address # Start a thread with the server -- that thread will then start one # more thread for each request server_thread = threading.Thread(target=server.serve_forever) # Exit the server thread when the main thread terminates server_thread.daemon = True server_thread.start() print \"Server loop running in thread:\", server_thread.name client(ip, port, \"Hello World 1\") client(ip, port, \"Hello World 2\") client(ip, port, \"Hello World 3\") server.shutdown() 运行（Ubuntu Server 12.04）： $ python mulThrServ.py Server loop running in thread: Thread-1 Received: Thread-2: Hello World 1 Received: Thread-3: Hello World 2 Received: Thread-4: Hello World 3 可以看到对客户端的每次连接，服务端都启动了新的线程进行处理。此程序在python 2.7上运行完成，在python 2.6上运行时字符串的format函数写法与2.7不同，需要修改。","tags":"Tech","url":"http://leetschau.github.io/multi-thread-echo-server-python-version.html","loc":"http://leetschau.github.io/multi-thread-echo-server-python-version.html"},{"title":"Ubuntu Server安装telnet服务时\"Unable to locate package telnetd\"解决方法","text":"装好Ubuntu Server 12.04后，用apt-get安装telnetd报 \"E: Unable to locate package telnetd\"，解决方法如下： 虚拟机采用NAT方式与主机连接； sudo apt-get update （更新apt-get的软件源） sudo apt-get install telnetd sudo /etc/init.d/openbsd-inetd restart 验证： ps -ef|grep telnetd openbsd-inetd restart 指令执行完后需要几秒钟才能启动telnetd服务； 注意，安装软件（或者其他连接互联网的动作只能在NAT模式下运行， 而主机用telnet/ssh方式连接虚拟机只能在Host-only模式下， 所以当连接失败时注意检查是否模式没设置对。","tags":"Tech","url":"http://leetschau.github.io/ubuntu-serveran-zhuang-telnetfu-wu-shi-unable-to-locate-package-telnetdjie-jue-fang-fa.html","loc":"http://leetschau.github.io/ubuntu-serveran-zhuang-telnetfu-wu-shi-unable-to-locate-package-telnetdjie-jue-fang-fa.html"},{"title":"用VirtualBox搭建虚拟局域网","text":"用 Oracle VM VirtualBox 安装虚拟机，我在Windows 7上安装了ubuntu 11.10和xubuntu12.04两个虚拟机； 将这两个虚拟机的\"网络\"属性设为\"仅主机（Host-Only）适配器\"；在win7的\"网络和共享中心\"中出现了一个\"VirtualBox Host Only Network\"，用ipconfig可以看到这个适配器的IP地址是192.168.56.101； 启动这两个虚拟机，用ifconfig可以查看各自的ip地址，可以看到默认网卡eth0的IP地址是192.168.56.102和103； 用apt-get安装sshd和telnetd服务； 现在就可以互相ping其他两个机器了，win7上可以（用kitty）telnet/ssh连接ubuntu，但ubuntu无法连接win7上的GODU服务，原因不明；","tags":"Tech","url":"http://leetschau.github.io/yong-virtualboxda-jian-xu-ni-ju-yu-wang.html","loc":"http://leetschau.github.io/yong-virtualboxda-jian-xu-ni-ju-yu-wang.html"},{"title":"以命令行方式使用Desktop版Ubuntu","text":"方法1：安装Ubuntu Server版，好处是默认不安装GUI，且可以自动安装ssh服务和其他很多服务，且消耗系统资源少（约200MB内存，Desktop版启动后需要500MB左右内存），启动和关闭速度快（关机：shutdown -P now）； 方法2：安装Ubuntu Desktop版，出现用户登录界面时按Ctrl+Alt+F1键进入命令行界面，F1~F6对应tty1~tty6，按Alt+F1~F6可以在tty1~tty6间切换，按Alt+F7返回GUI用户登录界面（在Linux Mint 14上，这个快捷键是Alt+F8），这种方法的好处是需要用图形界面时可以很容易的切换回来，如果是Server版还得安装X Window组件才能出现GUI。 方法3：参考\"http://askubuntu.com/questions/148717/how-do-i-boot-into-the-console-and-then-launch-the-ubuntu-desktop-from-it\"，可是在虚拟机上无效；","tags":"Tech","url":"http://leetschau.github.io/yi-ming-ling-xing-fang-shi-shi-yong-desktopban-ubuntu.html","loc":"http://leetschau.github.io/yi-ming-ling-xing-fang-shi-shi-yong-desktopban-ubuntu.html"},{"title":"expect编程参考资源","text":"expect http://ubuntuforums.org/showthread.php?t=220139 http://www.chinaunix.net/old_jh/24/594417.html http://kahimyang.info/kauswagan/howto_blogs/704-using_expect_script_to_automate_ssh_logins_and_do_routine_tasks_accross_multiple_hosts pexpect http://www.noah.org/wiki/pexpect 尝试了pexpect example的sshls脚本，不知道为什么比同样的expect脚本慢了很多；","tags":"Tech","url":"http://leetschau.github.io/expectbian-cheng-can-kao-zi-yuan.html","loc":"http://leetschau.github.io/expectbian-cheng-can-kao-zi-yuan.html"},{"title":"ConcurrentLinkedQueue vs LinkedBlockingQueue","text":"根据LinkedBlockingQueue实现的接口BlockingQueue的文档，BlockingQueue及其所有实现类都是线程安全的，且可用于多个Producer/Consumer的场景，它的主要用途是Producer-Consumer模型，它提供了4种出/入队列的方法，分别是抛异常、特殊值、阻塞和超时。 LinkedBlockingQueue初始化时可以设置容量，所以BlockingQueue具备一种\"流量平衡\"能力，即当消费过快以至于队列空时，出队列（消费）操作将阻塞；生产过快以至于队列满时，入队列（生产）操作将阻塞。 BlockingQueue的take()方法在阻塞状态下是不消耗CPU的。 ConcurrentLinkedQueue是一个\"wait-free\" algorithm（见文档），它的使用场景目前还不清楚。 参考： http://stackoverflow.com/questions/1426754/linkedblockingqueue-vs-concurrentlinkedqueue http://stackoverflow.com/questions/1426342/need-a-queue-that-can-support-multiple-readers/1426375#1426375","tags":"Tech","url":"http://leetschau.github.io/concurrentlinkedqueue-vs-linkedblockingqueue.html","loc":"http://leetschau.github.io/concurrentlinkedqueue-vs-linkedblockingqueue.html"},{"title":"用expect做自动运行脚本","text":"下面的脚本演示了在Ubuntu上安装expect，写一个切换用户的expect脚本，并运行脚本看到效果的过程。 root@guserver:~# apt-get install expect godu@guserver:~ \\( cat su.exp #!/usr/bin/expect set timeout 20 set user [lindex $argv 0] set password [lindex $argv 1] spawn su $user expect \"Password:\" send \"\\) password\\r\"; interact godu@guserver:~ \\( ./su.exp chad mypwd spawn su chad Password: chad@guserver:/home/godu\\) 参考： 6 Expect Script Examples to Expect the Unexpected (With Hello World) if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-expectzuo-zi-dong-yun-xing-jiao-ben.html","loc":"http://leetschau.github.io/yong-expectzuo-zi-dong-yun-xing-jiao-ben.html"},{"title":"Cmder和ConEmu笔记","text":"cmder是一个优秀的Windows命令行运行环境，它不仅自身对Windows console做了优化， 还可以通过多tab同时运行多个命令行程序，例如cygwin， 避免了同时开多个命令行窗口导致的切换困难的问题。 cmder Open the Settings dialog with Win-Alt-P and modify default settings: [Main > Appearence] check Single instance mode ; [Feature > Text cursor] Active Text Cursor: Block. [Keys & Macro > keyboard > Hotkeys processing]: check Alt+Numbers - activate console . If this doesn't work, filter with activate in [Keys & Macro], and modify Activate console by number (with Type System ) from Ctrl to Alt ; [General > Tab bar > Tab double click actions > Tab button (labels)]: choose Max/restore pane ; In [Keys & Macro], change the shortcut of Create new console from Ctrl-t to Alt-l ; Only for cygwin: [Startup > Tasks] click button Add default tasks... , in all new added tasks, choose {Bash::CygWin bash} , rename to zsh::CygWin zsh , assign hotkey Alt-L ， change its command to set CHERE_INVOKING=1 & %ConEmuDir%\\..\\..\\..\\cygRoot\\bin\\zsh.exe --login -i -new_console:m:/cygdrive -new_console:C:\"%ConEmuDir%\\..\\..\\..\\cygRoot\\Cygwin.ico\" -new_console:d:C:\\apps\\cygRoot\\home\\lee_c . Here its startup executable is changed from bash to zsh , and -new_console:d:C:\\apps\\cygRoot\\home\\lee_c is added to the auto-generated command to change its startup folder. Now in cmder, you can use Alt-L to open a new window. And use Alt-1..9 to change between the tabs. Double click the tab bar to maximize/restore a pane. cmder equivalent of .bashrc or .zshrc: \\config\\user-profile.cmd. cmder equivalent of .bash_aliases: \\config\\user-aliases.cmd. Note you have to check Use Legacy console to keep the aliases work. See Aliases not working at all for details. Windows split Different with tmux, \"pane\" in cmder is actually a \"window\", which has its own tab name. And you can use Alt- key to switch to any pane in a window. Search split in Keys & Macros , assaign Ctrl-Shift-R to Split: Duplicate active 'shell' split to right: Split(0, 50, 0) ; and Ctrl-Shift-B to Split: Duplicate active 'shell' split to bottom Split(0, 0, 50) ; Alt-h to Split: Put focus to nearest pane leftward: Split(2, -1, 0) and so on. cmder不能更新%PATH%环境变量问题的解决方法 使用 choco install yarn 后，在cmd里可以执行 yarn ，但在cmder里报找不到此命令错误， 发现cmder里的%PATH%没有被更新。 参考 Don't refresh PATH user environment variable values in ConEmu without Windows reboot ， 有可能是运行cmder.exe的父进程没有更新环境变量导致，于是退出并重新启动了运行 cmder.exe的autohotkey脚本，再次启动cmder后 yarn 命令可用了。 cmder中的cygwin不能正常显示汉字解决方法 在cmder的 [Startup > Tasks] 中定义一个zsh启动项： set CHERE_INVOKING = 1 & % ConEmuDir % \\ .. \\ .. \\ .. \\ cygRoot \\ bin \\ zsh . exe --login -i -new_console:m:/cygdrive -new_console:C:\"%ConEmuDir%\\..\\..\\..\\cygRoot\\Cygwin.ico\" -new_console:d:C:\\apps\\cygRoot\\home\\lee_c 启动后不能正常显示汉字， autojump 也不能正常工作， 为了确定问题出现位置，新建一个 mintty 启动项： c : \\ apps \\ cygRoot \\ bin \\ mintty . exe - i / Cygwin - Terminal . ico - （其中的 - 表示使用用户默认shell），启动后能正常显示汉字，比较二者 locale 差异， 发现前者为 zh_CN ，后者为 zh_CN.UTF-8 ，为什么会不同尚不清楚。 解决方法：在.zshrc中加一行 export LC_ALL=\"zh_CN.UTF-8\" ， 汉字就可以正常显示了， autojump 也正常了。 Task中的启动命令的参数（例如 -new_console... ）含义，参考： * Switches -new_console and -cur_console * cygwin, mingw, ConEmu and start up directory cmder配置的[Main]中字符编码定义： * Main console font: Consolas, Size: 12 * Font charset: ANSI * Alternative font: 微软雅黑 .zshrc中oh-my-zsh theme的定义： ZSH_THEME=\"mortalscumbag\" . 快捷键配置 在 [Startup > Tasks] 中将cmder启动快捷键设置为 Alt-C 。 cmder 的 Quake style 很方便，具体设置为： 在 [Main > Quake style] 中勾选 Quake style slide down ， cmder默认的显示/隐藏主窗体快捷键不方便， 在 [Keys & Macros] 中将 Minimize/Restore 快捷键设置为 Alt-U （不要用 Alt-J ，与tmux快捷键冲突）。 这样就可以用 Alt-U 显示/隐藏cmder了，而且隐藏时没有任务栏图标， 在托盘区有图标，如果忘了快捷键，点击托盘区图标也能显示cmder主窗体。 将 Rename active tab 快捷键设置为 Alt-R . ConEmu 在[Startup -> Environment]中添加 set PATH=%PATH%;d:\\apps\\nodejs;... 可以在命令行里直接执行 node . Cmder中可以执行 ssh , ssh-keygen 和 scp 命令， 可以使用 .ssh/config 定义配置文件，所以在Cmder里连接Linux服务器的基本过程是： 用ssh-keygen生成本机的公/私钥对，然后在.ssh/config里定义Linux服务器的别名， 将本机的公钥拷贝到Linux服务器的.ssh/authorized_hosts中， 就可以使用别名免密码登录Linux服务器了； 所有console都关闭后是否在托盘区保留ConEmu图标： Settings -> Main -> Task bar -> When last console is closed: check \"Close ConEmu window\"; 单个窗口时隐藏tab页：Settings -> Features -> Tabs -> Tabs: check \"Auto show\"; 自定义命令别名：Settings -> Startup -> Environment: 在文本框中添加别名， 例如 alias e=exit . 用ConEmu取代cmd.exe作为默认的Console程序环境：Settings -> Integration: 勾选\"Force ConEmu as default terminal for console applications\" 和\"Register on OS startup\"，重启操作系统之后生效。 结合proto，可以用Ctrl-U键在当前文件夹下启动ConEmu. 常用快捷键 Win+Q: 下一个tab页； Win+X: 新建一个tab页； Win+Delete: 关闭当前tab页； Ctrl + PgUp/PgDown: 向前/后翻页 Win+Alt+P: 打开设置窗体 在TotalCmd中启动ConEmu等外部程序 TotalCmd的Ctrl+G（Start DOS）可以在当前路径下启动命令行，但命令行窗口的字体太丑了， 需要以ConEmu（命令行增强工具）代替它， 不用Autohotkey或者Executor启动ConEmu的原因在于， 我们需要ConEmu启动后的当前目录是TotalCmd的当前目录， 这个值每次都不同，不可能配到这些全局性的程序里， 只能从TotalCmd里拿到当前目录然后启动ConEmu，实现方法如下： 定义用户指令：主菜单 -> Commands -> Browse Internal Commands: \"Category\"选usercmd.ini，新建一个名为em_ConEmu的指令， \"Command\"和\"Icon file\"都填\"d:\\Apps\\ConEmu\\ConEmu.exe\"， \"Parameters\"写\"/Single\"（大小写敏感，新创建的窗口作为已有ConEmu窗口的tab， 而不是新开一个窗口），\"Start path\"留空，因为留空意味着以当前目录为起始目录； 为该指令指定快捷键：主菜单 -> Configuration -> Misc -> Redefine hotkeys， 快捷键设为Alt + G，Command设为em_ConEmu。 这样就可以用Alt + G启动增强的命令行了， 同样的方法可以启动其他任何需要获得TotalCmd当前路径的可执行程序； 要查看已经定义的快捷键，点击\"Hotkey\"单选框后面的小三角按钮， 就会列出所有已定义的快捷键。 其他 ConEmu还有其他很多有用的命令行参数，使用ConEmu.exe /help查看。","tags":"Tech","url":"http://leetschau.github.io/cmderhe-conemubi-ji.html","loc":"http://leetschau.github.io/cmderhe-conemubi-ji.html"},{"title":"计算成本图像演示方法的改进","text":"本文在笔记 BinarySearchST计算成本的测试代码 的基础上，尝试将成本计算和图像演示等功能封装在一个单独的类中，尽量降低对被测试类的改动。 测试方法 在被测类中增加一个成员及其getter； 在FrequencyCounter类中增加：st.getVisitTimes().drawCostCurve(); 两个实例 BinarySearchST public class BinarySearchST , Value> { private final VisitTimeCounter vtc = new VisitTimeCounter(); public VisitTimeCounter getVisitTimes() { return vtc; } public int rank(Key key) { int lo = 0, hi = N - 1; while (lo <= hi) { int m = lo + (hi - lo) / 2; vtc.addVisitTimes(); int cmp = key.compareTo(keys[m]); if (cmp < 0) hi = m - 1; else if (cmp > 0) lo = m + 1; else return m; } return lo; } public void put(Key key, Value val) { if (val == null) { delete(key); return; } int i = rank(key); if (i < N && keys[i].compareTo(key) == 0) { vtc.putComplete(); vals[i] = val; return; } if (N == keys.length) resize(2 * keys.length); for (int j = N; j > i; j--) { keys[j] = keys[j - 1]; vals[j] = vals[j - 1]; vtc.addVisitTimes(); } keys[i] = key; vals[i] = val; N++; vtc.putComplete(); assert check(); } } 对原版BinarySearchST类的修改包括增加了一个成员（vtc）和它的getter，在rank和put中各加了一个vtc.addVisitTimes()表示查询和插入操作中对数组的访问，以及put中两处vtc.putComplete()，表示在命中和未命中两种情况下将本次put的访问次数存入数组记录中。 下面是VisitTimeCounter类： public class VisitTimeCounter { private int visitTimesInsidePut = 0; // 一次put操作当中的数组访问次数 private final List visitTimesInAllPut = new ArrayList (); // 各次put的访问次数汇总保存在这里 public void addVisitTimes() { visitTimesInsidePut++; } public void putComplete() { visitTimesInAllPut.add(visitTimesInsidePut); visitTimesInsidePut = 0; } public void drawCostCurve() { int maxComp = 0; for (Integer i : visitTimesInAllPut) { if (i > maxComp) { maxComp = i; } } StdOut.println(\"matrix scale: \" + visitTimesInAllPut.size() + \", \" + maxComp); VisualAccumulator va = new VisualAccumulator(visitTimesInAllPut.size(), maxComp); for (int t = 0; t < visitTimesInAllPut.size(); t++) { va.addDataValue(visitTimesInAllPut.get(t)); } } } FrequencyCounter类中演示成本只需要一条语句： BinarySearchST st = new BinarySearchST (); // copy from original codes st.getVisitTimes().drawCostCurve(); BST 即二叉查找树（binary search tree），原版代码见algs4-package.jar的BST.java类。 public class BST , Value> { private final VisitTimeCounter vtc = new VisitTimeCounter(); public VisitTimeCounter getVisitTimes() { return vtc; } public void put(Key key, Value val) { if (val == null) { delete(key); return; } root = put(root, key, val); vtc.putComplete(); assert check(); } private Node put(Node x, Key key, Value val) { if (x == null) return new Node(key, val, 1); int cmp = key.compareTo(x.key); vtc.addVisitTimes(); if (cmp < 0) x.left = put(x.left, key, val); else if (cmp > 0) x.right = put(x.right, key, val); else x.val = val; x.N = 1 + size(x.left) + size(x.right); return x; } private int rank(Key key, Node x) { if (x == null) return 0; int cmp = key.compareTo(x.key); vtc.addVisitTimes(); if (cmp < 0) return rank(key, x.left); else if (cmp > 0) return 1 + size(x.left) + rank(key, x.right); else return size(x.left); } } 查找成本体现在rank方法中，插入时每次访问的记录体现在private Node put方法中，总次数的记录体现在public void put方法中。","tags":"Tech","url":"http://leetschau.github.io/ji-suan-cheng-ben-tu-xiang-yan-shi-fang-fa-de-gai-jin.html","loc":"http://leetschau.github.io/ji-suan-cheng-ben-tu-xiang-yan-shi-fang-fa-de-gai-jin.html"},{"title":"BinarySearchST计算成本的测试代码","text":"下面是在原有BinarySearchST类上的修改，增加了两个成员（visitTimes与visitTime）和一个方法（getComparisionTimes），查找的成本主要体现在rank方法中的\"cmp=key.compareTo(keys[m])\"，在这一句后面加上visitTime++来标记访问次数增加了一次；写入的成本体现在put方法的两个位置，当key已经在keys中时，本次put的总成本是visitTime+1，当key不在keys数组中时（增加一个新元素），每移动一个元素，visitTime要加1，注意每次put操作记录结束后，除了要将次数存入visitTimes数组，还要将visitTime清零。 另外下面的代码省略了与原BinarySearchST类相同的成员和方法。 public class BinarySearchST , Value> { private final List visitTimes = new ArrayList (); // 每次put访问数组的次数的集合 int visitTime = 0; // 一次put操作中访问数组的次数计数器 public Value get(Key key) { if (isEmpty()) return null; int i = rank(key); visitTime++; if (i < N && keys[i].compareTo(key) == 0) return vals[i]; return null; } public int rank(Key key) { int lo = 0, hi = N - 1; while (lo <= hi) { int m = lo + (hi - lo) / 2; int cmp = key.compareTo(keys[m]); visitTime++; if (cmp < 0) hi = m - 1; else if (cmp > 0) lo = m + 1; else { return m; } } return lo; } public void put(Key key, Value val) { if (val == null) { delete(key); return; } int i = rank(key); if (i < N && keys[i].compareTo(key) == 0) { vals[i] = val; visitTimes.add(visitTime + 1); // 查找了visitTime次，写入的成本是1 visitTime = 0; return; } if (N == keys.length) resize(2 * keys.length); for (int j = N; j > i; j--) { keys[j] = keys[j - 1]; vals[j] = vals[j - 1]; visitTime++; } keys[i] = key; vals[i] = val; N++; visitTimes.add(visitTime); visitTime = 0; assert check(); } public List getComparisionTimes() { return visitTimes; } } 计算成本的图像演示代码FrequencyCounter类见笔记 SequentialSearchST算法成本的图形演示 。","tags":"Tech","url":"http://leetschau.github.io/binarysearchstji-suan-cheng-ben-de-ce-shi-dai-ma.html","loc":"http://leetschau.github.io/binarysearchstji-suan-cheng-ben-de-ce-shi-dai-ma.html"},{"title":"键盘插拔对用户登录的影响实验","text":"实验服务器：Ubuntu Server 12.04； 实验过程： 在服务器本机上以用户user1登录服务器； 在另一台终端上以SSH方式登录服务器，用who命令查看当前登录用户有两个： root@guserver:~# who -H NAME LINE TIME COMMENT user1 tty1 2013-01-25 07:21 user1 pts/0 2013-01-25 07:22 (10.31.1.32) 由IP地址可知，上面的tty1是服务器本机登录用户，pts/0是SSH登录用户； 拔出服务器上的USB键盘插头，终端上再执行who命令，与上面的结果相同； 再插上服务器上的USB键盘，不论是否插入原插槽，都可以继续输入指令，完全不受键盘插拔的影响； 结论： 键盘登录服务器的方式下，USB键盘的插拔和改变USB插口不会影响用户的登录状态。进一步，键盘作为操作系统的standard input，不受其物理状态（是否连接）的影响。","tags":"Tech","url":"http://leetschau.github.io/jian-pan-cha-ba-dui-yong-hu-deng-lu-de-ying-xiang-shi-yan.html","loc":"http://leetschau.github.io/jian-pan-cha-ba-dui-yong-hu-deng-lu-de-ying-xiang-shi-yan.html"},{"title":"Notes about multiboot usb creator","text":"On Windows U盘上的多系统启动工具，Windows上YUMI比较好， Ubuntu上 MultiSystem 用法复杂， unetbootin 是另外一款， 需要安装p7zip（apt-get install p7zip-full），不能做多个Live CD在一个U盘上， 安装新系统前要格式化USB盘，否则安装无效。 用YUMI制作包含小马PE 2013版（XMPE2013.ISO）、 Windows 7安装盘和Ubuntu Server 12.04 amd64(ubuntu-12.04.1-server-amd64.iso)的启动盘过程如下： 插入U盘； 启动YUMI（YUMI-0.0.8.7.exe）； 安装界面上首先选好U盘的盘符，然后选安装系统的类型， 上面3个系统对应的类型分别是：\"Try an unlisted ISO(run from RAM)\"（列表最后面）、 \"Windows Vista/7/8 Installer\"和\"Ubuntu Server 12.04 amd64\"； 选择对应的ISO文件； 点击\"Create\"开始安装； 安装的系统可以通过勾选\"Remove an Installed Item?\"卸载，但PE盘无法卸载。如果真不想要的话可以格盘重做一个。 On Linux Install multisystem : sudo apt - add - repository 'deb http://liveusb.info/multisystem/depot all main' wget - q - O - http : // liveusb . info / multisystem / depot / multisystem . asc | sudo apt - key add - sudo apt - get update sudo apt - get install multisystem Start with multisystem after Win key. If use add both Windows and Linux on USB key with multisystem, when booting system at the Boot Manager screen (press F12 after system startup), choose \"EFI USB Device (Generic-SD/MMC)\" to go to the Linux boot menu, choose \"Legacy USB -> Generic-SD/MMC\" to go to the Windows boot menu. 2013-01-28： 使用YUMI制作了包含小马PE 2013版、Windows 7安装盘和Ubuntu Server 12.04的启动盘， 在PNY盘（8GB）和Kingston microSD卡（8GB）上制作后3个系统都可以正常启动（DELL PC机）， 在SanDisk U3 curzer盘（4GB）上制作后无法启动，原因不明。 XBoot不支持Windows启动ISO，放弃。 2013-01-27： 安装了小马PE 2013，注意小马PE的ISO文件不要使用中文文件名，否则在YUMI启动列表里会变成乱码。 参考： YUMI 0.0.8.7绿色版-制作引导多个iso系统镜像的自启动U盘 2013-01-24： 上午先用Sardu（2.0.5和2.0.6）做USB启动盘，它感知不到U盘，已经插入U盘还提示插入U盘，放弃， 改用YUMI，首先在U盘上装了Ubuntu Server 12.04，后来又装了小马PE，虽然都装上了，但小马PE不能用； 明天尝试装Win7。 类似的工具还有一个叫XBoot的，下载了，没试；","tags":"Tech","url":"http://leetschau.github.io/notes-about-multiboot-usb-creator.html","loc":"http://leetschau.github.io/notes-about-multiboot-usb-creator.html"},{"title":"SequentialSearchST算法成本的图形演示","text":"中文版238页图3.1.3演示了SequentialSearchST算法中每次写入单词数量（put方法中）时需要进行的比较次数，也就是此算法的成本，但书中没有生成此图的代码，下面是我自己的实现（第一个是新增的类，后两个是修改的类）： package edu.princeton.cs.algs4; public class VisualAccumulator { private double total; private int N; public VisualAccumulator(int trials, double max) { StdDraw.setXscale(0, trials); StdDraw.setYscale(0, max); StdDraw.setPenRadius(.005); } public void addDataValue(double val) { N++; total += val; StdDraw.setPenColor(StdDraw.DARK_GRAY); StdDraw.point(N, val); StdDraw.setPenColor(StdDraw.RED); StdDraw.point(N, total / N); StdOut.println(\"Red point value:\" + total / N);// 平均比较次数 } public double mean() { return total / N; } @Override public String toString() { return \"Mean (\" + N + \" values): \" + String.format(\"%7.5f\", mean()); } public static void main(String[] args) { int T = 300; VisualAccumulator a = new VisualAccumulator(T, 1.0); for (int t = 0; t < T; t++) { a.addDataValue(StdRandom.random()); } StdOut.println(a); } } public class SequentialSearchST { private final List compareTimes = new ArrayList (); public List getComparisionTimes() { return compareTimes; } public void put(Key key, Value val) { int compareTime = 0; if (val == null) { compareTimes.add(1); delete(key); return; } for (Node x = first; x != null; x = x.next) { compareTime++; if (key.equals(x.key)) { x.val = val; compareTimes.add(compareTime); return; } } first = new Node(key, val, first); N++; compareTimes.add(compareTime); } public static void main(String[] args) { StdIn2.setInputFile(\"data/tale.txt\"); SequentialSearchST st = new SequentialSearchST (); for (int i = 0; !StdIn2.isEmpty(); i++) { String key = StdIn2.readString(); st.put(key, i); } List comparisionTimes = st.getComparisionTimes(); VisualAccumulator va = new VisualAccumulator(comparisionTimes.size(), 1.0); for (int t = 0; t < comparisionTimes.size(); t++) { va.addDataValue(comparisionTimes.get(t)); } for (String s : st.keys()) StdOut.println(s + \" \" + st.get(s)); } } public class FrequencyCounter { public static void main(String[] args) { StdIn2.setInputFile(\"data/tale.txt\"); int distinct = 0, words = 0; int minlen = 8; // this is the first parameter SequentialSearchST st = new SequentialSearchST (); while (!StdIn2.isEmpty()) { String key = StdIn2.readString(); if (key.length() < minlen) continue; words++; if (st.contains(key)) { st.put(key, st.get(key) + 1); } else { st.put(key, 1); distinct++; } } String max = \"\"; st.put(max, 0); for (String word : st.keys()) { if (st.get(word) > st.get(max)) max = word; } StdOut.println(max + \" \" + st.get(max)); StdOut.println(\"distinct = \" + distinct); StdOut.println(\"words = \" + words); // 以上是原始版本的代码，修改了获取输入的方法 List comparisionTimes = st.getComparisionTimes(); // 获取原始成本数据 int maxComp = 0; for (Integer i : comparisionTimes) { if (i > maxComp) { maxComp = i; } } // 获得原始成本最大值，以确定画布的Y轴高度 VisualAccumulator va = new VisualAccumulator(comparisionTimes.size(), maxComp); for (int t = 0; t < comparisionTimes.size(); t++) { va.addDataValue(comparisionTimes.get(t)); } // 画图 } } 以上VisualAccumulator是完整的类，SequentialSearchST只写出了新增的属性compareTimes及其get方法，和修改后的put和main方法；FrequencyCounter类中修改后的main方法，","tags":"Tech","url":"http://leetschau.github.io/sequentialsearchstsuan-fa-cheng-ben-de-tu-xing-yan-shi.html","loc":"http://leetschau.github.io/sequentialsearchstsuan-fa-cheng-ben-de-tu-xing-yan-shi.html"},{"title":"调试Algorithms一书中带有输入重定向的代码","text":"Algorithms(by Robert Sedgewick)中运行算法程序一般是这样的： java AlgorithmClass < inputFile.txt 例如第47页\"java BinarySearch tinyW.txt < tinyT.txt\"，其中的\"<\"是输入重定向（standard input redirect），即用文件（tiny.txt）的内容代替键盘（standard input）作程序的输入，在Eclipse中调试这种代码很麻烦，因为Eclipse不支持输入重定向（直接在参数里写\"< tiny.txt\"无效，但支持输出到某一指定文件中），有两个方法解决这个问题。 首先是准备工作： Create a project in eclipse, then creating a folder named \"data\" in it; copy tinyT.txt & tinyW.txt into \"data\"; 方法1：使用System.setIn()方法 modify \"int[] whitelist = In.readInts(args[0]);\" in BinarySearch.java as following: System.setIn(new FileInputStream(\"data/tinyT.txt\")); int[] whitelist = In.readInts(\"data/\" + \"tinyW.txt\"); run BinarySearch; Reference: http://stackoverflow.com/questions/188547/eclipse-reading-stdin-system-in-from-a-file 这个方法的不足之处是有时候程序在运行完后会报一个JNI异常，让人很不爽，于是有了下面第二个方法。 方法2：自己修改StdIn类 分析StdIn类的代码可知，它用了一个Scanner类包装了System.in，所以只要把System.in换成我们指定的文本文件就可以了，于是新建一个StdIn2类，代码与StdIn基本一样，增加了下面的方法： public static void setInputFile(String path) { try { scanner = new Scanner(new BufferedInputStream(new FileInputStream( path)), charsetName); } catch (FileNotFoundException e) { e.printStackTrace(); } scanner.useLocale(usLocale); } 其实就是把scanner的初始化方法放到了setInputFile中（包括声明scanner和static{}块中两处），然后修改算法代码： 将BinarySearch中的StdIn重构为StdIn2； main()方法的开始处加上\"StdIn2.setInputFile(\"data/tiny.txt\");\"； 运行代码。","tags":"Tech","url":"http://leetschau.github.io/diao-shi-algorithmsyi-shu-zhong-dai-you-shu-ru-zhong-ding-xiang-de-dai-ma.html","loc":"http://leetschau.github.io/diao-shi-algorithmsyi-shu-zhong-dai-you-shu-ru-zhong-ding-xiang-de-dai-ma.html"},{"title":"用PhotoRec恢复误删除的文件","text":"今天尝试用 PhotoRec 恢复被误删除的文件，效果不错，找回了被误删的pdf文件，另外被恢复的jpg，chm文件也能正常显示，但java文件和txt文件里面的内容似乎不是原文件内容。这个软件有下面的特点： 命令行（字符）界面； 不能指定要恢复的目录，只能指定恢复某一分区； 不能指定要恢复文件的类型（扩展名），只能自己在被恢复的目录里找； U盘被格式化后这个软件能够恢复上面的文件； 目录结构无法恢复，只能恢复文件； 其他类似的软件见http://www.freewaregenius.com/the-best-free-data-recovery-tool-13-undelete-tools-compared/。","tags":"Tech","url":"http://leetschau.github.io/yong-photorechui-fu-wu-shan-chu-de-wen-jian.html","loc":"http://leetschau.github.io/yong-photorechui-fu-wu-shan-chu-de-wen-jian.html"},{"title":"使用同一个无线路由器构建无线局域网","text":"两台笔记本电脑，连接同一个无线路由器（基于ADSL），要构建无线局域网共享文件，首先要将网络位置设为\"家庭网络\"，然后首先改为家庭网络的机器会自动生成一个密码，在后面加入的机器中填入这个密码，就加入了同一个局域网了。 要互相传文件，【开始->计算机】中会出现\"家庭组\"（见下图），打开下面的项目，就可以看到对方的文件了。 参考： Windows 7笔记本电脑实现无线网络共享详细教程","tags":"Tech","url":"http://leetschau.github.io/shi-yong-tong-yi-ge-wu-xian-lu-you-qi-gou-jian-wu-xian-ju-yu-wang.html","loc":"http://leetschau.github.io/shi-yong-tong-yi-ge-wu-xian-lu-you-qi-gou-jian-wu-xian-ju-yu-wang.html"},{"title":"SortCompare.time的反射版本","text":"\"Algorithms\" by Robert Sedgewick, p256, SortCompare.time(): public static double time(String alg, Double[] a) throws SecurityException, NoSuchMethodException, ClassNotFoundException, IllegalArgumentException, IllegalAccessException, InvocationTargetException { Stopwatch timer = new Stopwatch(); String originClassName = new Object(){}.getClass().getEnclosingClass().getName(); String packageName = originClassName.substring(0, originClassName.lastIndexOf(\".\")); String className = packageName.concat(\".\" + alg); Class<?> clazz = Class.forName(className); Method sortMethod = clazz.getDeclaredMethod(\"sort\", Comparable[].class); Object[] param = { a }; sortMethod.invoke(null, param); return timer.elapsedTime(); } 这里面注意的有两点，一是在static方法里获取所在类名的方法，二是如何用反射调用参数为数组的方法（见笔记 用反射机制在运行时创建对象并执行方法 ）。","tags":"Tech","url":"http://leetschau.github.io/sortcomparetimede-fan-she-ban-ben.html","loc":"http://leetschau.github.io/sortcomparetimede-fan-she-ban-ben.html"},{"title":"怎样在命令行中运行Eclipse中的项目","text":"比如在Eclipse中开发了一个服务，现在需要演示怎样在生产环境里启动这个服务，所以不能在Eclipse里启动这个服务，只能在命令行里启动，但这个服务可能依赖很多jar文件，有一个简单的方法可以得到Eclipse中的启动命令行，首先用debug模式启动这个服务，然后切换到debug perspective，在debug view里右键这个进程 -> Proerties -> Process properties -> Command Line中就是命令行参数了，但还需要修改，将运行指令由javaw改为java，去掉第一个参数\"-agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:58830\"，然后就可以粘贴到命令行里运行了，下面是一个例子，原始字符串执行后没有反应，处理后就可以正常运行了： e:\\workspace\\GoduServer3.0>D:\\Apps\\Java\\jdk1.6.0_35\\bin\\javaw.exe -agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:58830 -Dfile.encoding=UTF-8 -classpath E:\\workspace\\JDK6UTF8\\GoduServer3.0\\bin;... transfer.PoolServer e:\\workspace\\GoduServer3.0>D:\\Apps\\Java\\jdk1.6.0_35\\bin\\java.exe -Dfile.encoding=UTF-8 -classpath E:\\workspace\\JDK6UTF8\\GoduServer3.0\\bin;... transfer .PoolServer 0 PoolServer main: Server start listening at port 1234 下面是操作过程截图：","tags":"Tech","url":"http://leetschau.github.io/zen-yang-zai-ming-ling-xing-zhong-yun-xing-eclipsezhong-de-xiang-mu.html","loc":"http://leetschau.github.io/zen-yang-zai-ming-ling-xing-zhong-yun-xing-eclipsezhong-de-xiang-mu.html"},{"title":"U盘自动弹出脚本","text":"需要微软的Sysinternals Suite中的sync工具，解压到d:\\apps下。 ahk脚本： #u:: ; eject usb drive InputBox, myInp, Remove USB, Input Drive Letter:, if ErrorLevel return else Run, d:\\Apps\\SysinternalsSuite\\sync.exe -e %myInp% return","tags":"Tech","url":"http://leetschau.github.io/upan-zi-dong-dan-chu-jiao-ben.html","loc":"http://leetschau.github.io/upan-zi-dong-dan-chu-jiao-ben.html"},{"title":"Notes about MercurialEclipse","text":"MercurialEclipse的主页上要求首先注册，其实可以不注册，直接输入update地址（http://cbes.javaforge.com/update），加代理在线安装此插件，否则失败； 安装是不要选\"***with mylyn那一项\"，只安装MercurialEclipse，安装完后在File->Import里多了一个Mercurial项目，在Window->Preference->Team里多了Mercurial一项。 今天（2013-01-15）导入同事机器上的Hg仓库成功；","tags":"Tech","url":"http://leetschau.github.io/notes-about-mercurialeclipse.html","loc":"http://leetschau.github.io/notes-about-mercurialeclipse.html"},{"title":"vim.org上插件评分的含义","text":"Rating m/n, Downloaded by k m指总分数，n指总投票数，k是总下载数，评分有3个级别：\"Life Changing\"4分，\"Helpful\"1分，\"Unfulfilling\"-1分，所以基本上m/n的值超过1就说明东西不错，越接近4越好。 来源： Karma on vim.org . Karma是来自于佛教的词汇，指报应、业、因果、缘分之类的；","tags":"Tech","url":"http://leetschau.github.io/vimorgshang-cha-jian-ping-fen-de-han-yi.html","loc":"http://leetschau.github.io/vimorgshang-cha-jian-ping-fen-de-han-yi.html"},{"title":"将vim打造成Java IDE","text":"总体步骤（参考http://eclim.org/install.html ）： 安装Eclipse: 下载安装包，GUI安装; 安装eclim: 下载jar包， java -jar eclim_2.6.0.jar ; 配置vim: 增加一行 let g:EclimCompletionMethod = 'omnifunc' ; 启动eclim server: $ECLIPSE_HOME/eclimd ； 在vim中编写Java代码； 需要注意以下几点： 安装过程 中： 使用 Eclipse installer (eclipse-inst-linux64.tar.gz) 安装Eclipse时， 启动安装程序（ ./eclipse-inst ）后，点击右上角的菜单按钮， 关闭 BUNDLE POOLS... 选项，关闭该窗口，返回安装程序继续安装 Eclipse IDE for Java Developers ，这是eclim的一个兼容性问题 参考：https://github.com/ervandew/eclim/issues/436 Get Started : 使用 ProjectCreate ./Hello -n java 创建项目，也就是可以使用相对路径， 确保项目根目录下有 .classpath 和 .project 两个文件； 代码补全：vim在安装了YouCompleteMe后，再安装eclim， 然后在.vimrc里加一句： let g:EclimCompletionMethod = 'omnifunc' ， 就可以实现自动代码补全，不需要使用快捷键 Ctrl-x, Ctrl-u ； 这里 自动代码补全 的含义是：编写代码时，在输入 . 后，自动出现可选方法列表。 要卸载Eclipse installer 安装的Eclipse，直接删掉文件夹就行了， Eclipse installer也可以直接删除。 卸载eclim的方法参考 http://eclim.org/install.html#uninstall eclim会在~/.vim下创建 eclim 文件夹，不到2MB， 另外在 $ECLIPSE_HOME 下以插件形式安装 eclim ， 整体架构是比较整洁的。 2013年版本： 需要的插件列表： Taglist Conque Shell FuzzyFinder NERDTree javaComplete 其他选项： JavaKit exVim winmanager (Deprecated)","tags":"Tech","url":"http://leetschau.github.io/jiang-vimda-zao-cheng-java-ide.html","loc":"http://leetschau.github.io/jiang-vimda-zao-cheng-java-ide.html"},{"title":"Notes about NERDTree","text":"NERDTree is the best file explorer for vim so far. NERDTree configuration in .vimrc \" NerdTree \" define open/close shortcut map < C - n > : NERDTreeToggle < CR > \" open a NERDTree automatically when vim starts up if no files were specified autocmd StdinReadPre * let s : std_in = 1 autocmd VimEnter * if argc () == 0 && ! exists ( \" s:std_in \" ) | NERDTree | endif \" close NERDTree when all files closed: autocmd bufenter * if ( winnr ( \" $ \" ) == 1 && exists ( \" b:NERDTreeType \" ) && b : NERDTreeType == \" primary \" ) | q | endif Keyboard shortcut list Frequently Used Keys ?: open/close shortcut key list P: back to root O: expand all nodes recursively X: close all child nodes recursively C-w < (or >): resize window width All keys C: make current folder the root; t: Open selected node/bookmark in a new tab T: Same as 't' but keep the focus on the current tab ?: Toogle Help C-n C-n: Toogle focus between files and NERDTree /: find a file, like plane text file I: toogle show/hide hiden files ?: toggle quick help; o: toggle fold/unfold; O: unfold to leaf; x: fold parent; u: make root up 1 level; r: refresh current dir; m: show menu(about dir manipulation): mkdir/rm/move cd: change working dir to current selected dir; F: toggle show/hide files; B: toggle bookmark table; q: close NERDTree window; A: Max/Restore NERDTree window; P: goto the root; p: goto the parent; Bookmark is persistent. So you can reopen it after you leaving vim. :Bookmark : set bookmark(dir or file) :OpenBookmark : open file :ClearBookmark: as is D: delete bookmark(when cursor in bookmark table)","tags":"Tech","url":"http://leetschau.github.io/notes-about-nerdtree.html","loc":"http://leetschau.github.io/notes-about-nerdtree.html"},{"title":"vim代码导航","text":"Tagbar 首先安装ctags: sudo apt install exuberant-ctags 在.vimrc中加入 Plugin 'majutsushi/tagbar' 和 cabbrev tt TagbarToggle ， 然后执行 vim +PluginClean +PluginInstall ； 打开源代码文件，运行 :tt ； 在 tagbar窗口里，用 ? 查看帮助； Taglist 安装taglist插件 Windows 安装并配置exuberant ctags 下载ctags58.zip，解压到d:\\apps\\ctags58，vimrc文件中增加： let Tlist_Ctags_Cmd = \"d:/apps/ctags58/ctags.exe\" 其他预处理步骤 打开vim的文件类型检查：filetype on； 检查vim是否有system函数（命令执行结果应该是1）：:echo exists('*system') 安装插件 下载taglist_45.zip，解压到$VIM_HOME/vimfiles下， 此目录下有两个空文件夹plugin和doc， 解压后这两个文件夹里分别有taglist.vim和taglist.txt两个文件； vim中运行： :cd d:\\Apps\\Vim\\vimfiles\\doc :helptags . 运行完毕后doc文件夹下会出现tags文件； 重启vim。 详见 Installing the Taglist plugin Ubuntu (2013-6-24) install exuberant ctags: sudo apt-get install ctags; verify: ctags --version ; install taglist: unzip taglist_46.zip to ~/.vim/bundle/taglist (use pathogen to manage plugins); add let Tlist_Inc_Winwidth = 0 and let Tlist_Show_One_File = 1 into .vimrc; cd ~/.vim/bundle/taglist, start vi and run :helptags . , restart vim; open a xml file with vi, :TlistOpen will open a taglist and show all tasks in the xml file; 使用taglist 全局操作 使用:TlistToggle打开/关闭导航窗口（taglist window）； 导航（taglist window）/代码区切换：ctrl+w, w 导航窗口中的操作 {Enter}键跳到对应的field或者method上； x：最大化taglist window的开关； zc/-：折叠树，zo/+：展开树；zR/*：全部展开； s：按照名称还是出现顺序频率排列tags； Refs: http://vim.wikia.com/wiki/Using_TagList_for_ANT_build_files;","tags":"Tech","url":"http://leetschau.github.io/vimdai-ma-dao-hang.html","loc":"http://leetschau.github.io/vimdai-ma-dao-hang.html"},{"title":"用Autohotkey让Kitty命令行变得更好用","text":"解决Kitty命令行中无法使用右侧Alt键问题 在ahk脚本里增加如下代码： # IfWinActive ahk_class KiTTY RAlt :: LAlt # IfWinActive #IfWinActive 使用方法参考 #IfWinActive ： The #IfWin directives are positional: they affect all hotkeys and hotstrings physically beneath them in the script. ... To turn off context sensitivity, specify any #IfWin directive but omit all of its parameters. PS: 下面的代码通过快捷键 Ctrl-Alt-l ，将当前窗口的 ahk_class 值显示在对话框中： !&#94; l :: WinGetClass , class , A MsgBox , The active window ' s class is \"%class%\". Return 参考 WinGetClass . PPS: 关于右侧Alt键不能工作的原因， 是由于Putty将它定义成了 AltGr键 ， 这个键主要用于法语（及其他欧洲语言）键盘上，按住AltGr同时输入字母， 可以直接输入一些特殊字母，例如欧元符号等。 PPPS: AutoHotkey中的块注释为 /* ... */ . P4S: Kitty在Windows 10上的配置文件是 C:\\Users\\lee_c\\AppData\\Roaming\\KiTTY\\kitty.sav 文件。 kitty自动识别 下面的脚本实现Win+K键激活一个输入框，给出了kitty命令行常用的几种格式， 基本可分为两种：连接保存好的模板（session）和完全手工连接， 前者用-load加Session名称，后者需要在命令行中写上详细的连接参数。 #k:: ; telnet/ssh client: console style InputBox , myInp , Connect , ( Input Connect Params : Load a session : < kitty >- load 47 SSH Connection : < kitty > user @10.0.2.47 - pw myPwd Telnet / Raw : < kitty >- telnet / raw user @ goduserver With a auto - run script : < kitty > user @10.0.2.47 - pw myPwd - m f : \\ myjob ) if ErrorLevel return else Run , d : \\ apps \\ Kitty \\ kitty_portable . exe % myInp % return","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeyrang-kittyming-ling-xing-bian-de-geng-hao-yong.html","loc":"http://leetschau.github.io/yong-autohotkeyrang-kittyming-ling-xing-bian-de-geng-hao-yong.html"},{"title":"Notes about Kitty","text":"用Kitty的login script实现自动运行脚本 Kitty相对于putty的一个改进是增加了\"Login Script\"功能（在Connection -> Data中）， 这个script file的格式是： exp1 send1 exp2 send2 ... 自动登录 主要是Telnet协议下的自动登录，SSH由于有输入密码的地方，所以用它来自动登录， 基本的Telnet自动登录可以写成 d:\\some\\path\\loginSvr1.txt 这个样子： assword : goduty 因为用户名已经在\"Auto-login\" username里定义了，所以这个只\"预期-发送\"密码就可以了。 登录后的自动运行脚本 SSH协议可以通过配置用户名和密码的方法自动登录，但可以用login script脚本做自动任务， 例如下面的autoJob.txt实现了登录后顺序执行\"ls -l\"和\"pwd\"指令： $ ls -l $ pwd 这个脚本与-m参数不同，-m运行后会直接退出连接，这个脚本不退出。 Switch Full Screen mode in Kitty Temporary: Ctrl + mouse right click -> Full Screen; Always enable alt+enter to switch full screen: modify \"FullScreenOnAltEnter\\0\\\" to \"FullScreenOnAltEnter\\1\\\" in $KITTY_HOME/Sessions/Default%20Settings Search in Kitty Ctrl + Righ click -> Copy to Clipboard, then paste in vim, then search;","tags":"Tech","url":"http://leetschau.github.io/notes-about-kitty.html","loc":"http://leetschau.github.io/notes-about-kitty.html"},{"title":"TotalCmd的sftp插件","text":"安装 从网上下载sftpplug.zip（最新是v1.3），在TC里打开这个文件会自动安装此插件； 下载curl-7.28.1-devel-mingw32.zip（下载方法见sftpplugin.zip里的readme文件）， 将里面的libssh2.dll解压到$TC_HOME\\Plugins\\Wfx\\sftpplug\\下； 使用 在\"System -> Network Neighborhood (Alt + R) -> Secure FTP\"中， F7新建连接，建好后双击打开，F8删除，alt + enter修改设置；","tags":"Tech","url":"http://leetschau.github.io/totalcmdde-sftpcha-jian.html","loc":"http://leetschau.github.io/totalcmdde-sftpcha-jian.html"},{"title":"用plink做任务自动化","text":"下面的实例演示了列出服务器当前文件夹下j开头的所有文件。 E:\\MyDoc\\ahkFiles>plink -pw mypwd user@10.0.2.47 \"ls|grep j*\" jdk-7u7-linux-x64.gz E:\\MyDoc\\ahkFiles>plink -pw goduty godu@10.0.2.47 -m mybat mybat文件内容是： cd test ls exit","tags":"Tech","url":"http://leetschau.github.io/yong-plinkzuo-ren-wu-zi-dong-hua.html","loc":"http://leetschau.github.io/yong-plinkzuo-ren-wu-zi-dong-hua.html"},{"title":"Package management in Ubuntu Server","text":"Search for existing packages: apt-cache search openjdk Install: apt-get install openjdk-7-jdk or dpkg -i <file.deb> List installed packages: dpkg -l | grep <package-name> or dpkg --get-selections | grep <package-name> Remove(uninstall): apt-get purge openjdk-7-jdk or apt-get remove openjdk-7-jdk or use purge instead, see apt-get help . Or use dpkg : dpkg - r < package_name > dpkg - P < package_name > Hold a package(not upgrade anymore): aptitude hold <package-name> Release the holding of a package: aptitude unhold <package-name> Use for package name auto-completion.","tags":"Tech","url":"http://leetschau.github.io/package-management-in-ubuntu-server.html","loc":"http://leetschau.github.io/package-management-in-ubuntu-server.html"},{"title":"Penetrate GFW with SSH tunnels","text":"Setup Get a free ssh account. I use CJB.NET; Connect my cjb.net account with putty: Session: ip: 216.194.70.6 (\"shell.cjb.net\" is polluted by gfw, but its ip still work), port: 443; Connection -> Data: Auto-login username: myusername; Auto-login password: mypwd(item \"password\" only appear in kitty, if using putty you have to input password mannually at runtime); Connection -> SSH -> Tunnels: Source port(the proxy port for browser): 7070, leave \"Destination\" blank and select \"Dynamic\", then press \"Add\", like the following: press \"Open\" to connect to shell.cjb.net. you can verify the connection by the following: D:\\Apps\\ConEmu>netstat -ano|findstr 7070 TCP 127.0.0.1:7070 0.0.0.0:0 LISTENING 11088 TCP 127.0.0.1:7070 127.0.0.1:56477 ESTABLISHED 11088 TCP 127.0.0.1:7070 127.0.0.1:56528 ESTABLISHED 11088 TCP 127.0.0.1:56477 127.0.0.1:7070 ESTABLISHED 10348 TCP 127.0.0.1:56528 127.0.0.1:7070 ESTABLISHED 10348 open firefox, input \"about:config\" in address bar, modify the value of \"network.proxy.socks_remote_dns\" to \"true\", and set proxy as Host: 127.0.0.1, Port: 7070, SOCKS v5, like the following: Usage Define the above connection to cjb.net as \"CJB\" in kitty_portable; in hotkeyDefs.ahk add a hotstring: ::ccjb::d:\\apps\\Kitty\\kitty_portable.exe -load CJB open a console and type: ccjb , you will see the following if login cjb successfully: Using username \"leechau\". leechau@216.194.70.6's password: Send automatic password Last login: Tue Jan 8 20:44:05 2013 from 114.247.236.194 Welcome to the CJB.NET shell server! ... [leechau@shell ~]$ Open your firefox and enjoy your journey on facebook and twitter :)","tags":"Tech","url":"http://leetschau.github.io/penetrate-gfw-with-ssh-tunnels.html","loc":"http://leetschau.github.io/penetrate-gfw-with-ssh-tunnels.html"},{"title":"加班时间汇总算法","text":"加班时间原始记录在一个excel文件里，每个月的加班时间在一个sheet里，共12个sheet，第13个sheet里存放12个月加班时间的和，如下图所示： 原始记录页： 汇总页： 这里要处理的情况是：原始记录中有些名字是汇总表里没有的，所以不是所有原始记录都被写到汇总中，另外原始记录中有空行。 汇总的VBA算法首先遍历前12个sheet，将结果放在一个名为total的Set中（类似于Java中的map，key-value组成的集合），如果没有此人名字，则创建，若已有，则累加，然后遍历最后一个sheet，其中的每一个名字从total里找对应的值填在表格里： Sub OTSum() Dim Month Month = 12 Set Total = CreateObject(\"Scripting.Dictionary\") For shidx = 1 To Month rowcnt = Worksheets(shidx).UsedRange.Rows.Count For rowidx = 1 To rowcnt empname = Worksheets(shidx).Cells(rowidx, 1).Value jbTime = Worksheets(shidx).Cells(rowidx, 2).Value If Total.exists(empname) Then Total.Item(empname) = Total.Item(empname) + jbTime Else: Total.Add empname, jbTime End If Next Next rowcnt = Worksheets(Month + 1).UsedRange.Rows.Count For rowidx = 1 To rowcnt empname = Worksheets(Month + 1).Cells(rowidx, 1).Value If Total.exists(empname) Then Worksheets(Month + 1).Cells(rowidx, 2) = Total.Item(empname) End If Next End Sub","tags":"Tech","url":"http://leetschau.github.io/jia-ban-shi-jian-hui-zong-suan-fa.html","loc":"http://leetschau.github.io/jia-ban-shi-jian-hui-zong-suan-fa.html"},{"title":"Windows命令行增强工具","text":"对Windows命令行增强工具的要求包括： Portable，无需安装，解压即可使用； 支持Unix方式的Copy/Paste，即左键拖动选择文本后自动copy到剪贴板，右键粘贴，最好支持键盘选择文本； 能够显示中文； 能够定制命令行窗口的大小、颜色，文字的字体、字号等； 支持命令行方式启动（含义见下面的例子），这样可以把启动某个程序做成autohotkey快捷键； 支持tab路径自动补全； ConEmu 来自俄罗斯的 ConEmu 是目前找到的最好的Windows命令行增强工具，Copy/Paste方式在Settings -> Keys & Macro -> Mark & Paste中定制，irb.bat显示正常；通过它启动irb.bat（ruby的交互命令行环境）的方法是： d : \\ apps \\ ConEmu \\ ConEmu . exe d : \\ Apps \\ ruby - 1 . 9 . 3 - p327 - i386 - mingw32 \\ bin \\ irb . bat 其他同类工具 Console2 : portable，能配置字体，显示布局有错误，手工执行\"chcp 65001\"切换到UTF-8代码页才能正常，但不能显示中文，有tab自动补全功能，irb.bat显示正常，默认设置中按住Shift拖动鼠标选择文本，可修改； ColorConsole : portable，不能配置字体，但能调整字号，中文显示正常，Copy/Paste与记事本使用方法一致，irb.bat不能显示提示符； TCC-LE : 需要安装，安装包体积大； Unix shell的Windows移植版： PyCmd ; 命令行式系统工具：Nircmd。","tags":"Tech","url":"http://leetschau.github.io/windowsming-ling-xing-zeng-qiang-gong-ju.html","loc":"http://leetschau.github.io/windowsming-ling-xing-zeng-qiang-gong-ju.html"},{"title":"IDE的vi插件比较","text":"使用DrJava和jEdit做IDE的一个主要问题是不具备Eclipse的动态语法检查和import语句解析功能，提高编码效率的另一个路径是在IDE中使用vi插件，下面是3大主流IDE的vi插件试用情况。 所以找到了一个将Eclipse的editor vim化 Eclipse Vrapper Vrapper 当前是0.26版本，目前看效果不错， vrapper_0.26.1_20121124.zip直接解压到Juno for java dev的dropins目录下就可以用了，重启Eclipse后在工具栏上会出现一个按钮，可以开关Vrapper； 用d或者y拷贝了文字后，只能用p粘贴，不能在insert模式下用Ctrl+v粘贴； 变通的方法是用v先选中文字，然后C-c拷贝，然后就可以用C-v粘贴到别处了（包括eclipse editor中）； viPlugin viPlugin 是收费插件 ，安装过程比较简单，下载zip包（ viPlugin_2.10.0.zip ），解压到eclipse的dropins目录下即可，重启后工具栏上会出现一个开关按钮，默认开关快捷键是Ctrl+Alt+V； viPlugin相比于Vrapper的优点： 能关联Windows剪贴板，使eclipse中与其他程序间copy/paste文本很方便； 有配置界面，可以配置一些vi相关的属性，如tabstop值，是否关联Windows剪贴板等； \"/\"搜索指令具备增量查找能力； 指令状态不显示在编辑区，界面更整洁； 破解方法：在eclipse.exe所在目录下新建 viPlugin2.lic文件，内容如下： q1MHdGlxh7nCyn_FpHaVazxTdn1tajjeIABlcgJBc20 然后启动Eclipse即可。 通过修改代码完整破解的方法见 Eclipse插件ViPlugin2.X的破解方法 。 vi指令的支持有限，例如不支持\">\"（缩进）指令； IntelliJ IDEA: ideavim 试用了IntelliJ 12.0 + ideavim 0.26，感觉不错，基本达到了标准vim的能力。 这个版本 IntelliJ的color scheme \"Darcula\"是目前三个IDE中dark color theme做的最好的，但与Sublime Text 2的默认配色方案相比，仍然有一定差距，主要是Darcula文字与背景色的反差不够大，色彩也比较单一，看起来眼睛很累。 在笔记本的14寸屏上需要用Ctrl+鼠标滚轮的方法缩放。 设置里有一个开关设置是否支持滚轮缩放操作，可以在Help->Find Action中输入zoom font找到这个开关，这也是IntelliJ很赞的一个功能。另外笔记本上没有鼠标滚轮，可以用Autohotkey实现缩放，见笔记 用Autohotkey实现鼠标滚轮功能 。 IntelliJ导出Hg代码仓库失败，原因不明； Netbeans: jVi 试用了Netbeans 7.2 + jVi 1.4，除了对vi高度的支持外，配置也很方便。 Netbeans中使用Consolas字体时中文显示为乱码，要调整需要改JDK，很麻烦； 总结：从功能上看IntelliJ和Netbeans的vi插件都比Eclipse的强 ，但由于其他功能问题，最后决定用Eclipse + Vrapper；","tags":"Tech","url":"http://leetschau.github.io/idede-vicha-jian-bi-jiao.html","loc":"http://leetschau.github.io/idede-vicha-jian-bi-jiao.html"},{"title":"查找重复文件并删除的工具","text":"AllDup 的Portable版：AllDupPortable.zip，今天用它查找重复的电子书，效果良好。 基本使用方法是：在\"Source Folder\"里选择要查找重复文件的文件夹，例如e:\\mydoc\\books，然后在\"Search Criteria\"里设置好判定为相同文件的条件，一般选择文件名和大小相同，然后点\"Start Search\"按钮就开始查找了。 此类软件介绍见http://www.freewaregenius.com/easily-find-and-remove-duplicate-files-with-alldup-for-windows/。","tags":"Tech","url":"http://leetschau.github.io/cha-zhao-zhong-fu-wen-jian-bing-shan-chu-de-gong-ju.html","loc":"http://leetschau.github.io/cha-zhao-zhong-fu-wen-jian-bing-shan-chu-de-gong-ju.html"},{"title":"被删除文件恢复工具","text":"PhotoRec . Reference: http://www.freewaregenius.com/the-best-free-data-recovery-tool-13-undelete-tools-compared/","tags":"Tech","url":"http://leetschau.github.io/bei-shan-chu-wen-jian-hui-fu-gong-ju.html","loc":"http://leetschau.github.io/bei-shan-chu-wen-jian-hui-fu-gong-ju.html"},{"title":"DrJava试用笔记","text":"安装方便：只要配好JAVA_HOME，用java -jar drjava-stable-20120818-r5686.jar即可启动，算是绿色软件； 特色功能：交互式命令行，可以在调试程序时改变变量值，很方便； 编辑功能比较弱：Ctrl+k删除行； 有工程的概念； 定制功能比较强； 没有\".\"之后自动列出对象的方法、属性列表的功能，比较不方便； 没有自动编译功能，不能自动标出编译错误，需要compile的时候才报错，开发效率低；","tags":"Tech","url":"http://leetschau.github.io/drjavashi-yong-bi-ji.html","loc":"http://leetschau.github.io/drjavashi-yong-bi-ji.html"},{"title":"Notes about Robert Sedgewick: Algorithms","text":"Unresolved imports in StdDraw3D.java download j3d-1_5_2-windows-i586.zip from http://java3d.java.net/binary-builds.html, then extract j3dcore.jar, j3dutils.jar & vecmath.jar from $ZIP_FILE/j3d-jre.zip/lib/ext, then add these jars into classpath of project of StdLib which is built from stdlib-package.jar from official booksite: algs4.cs.princeton.edu. Reference: http://stackoverflow.com/questions/2352364/where-to-get-com-sun-j3d-classes How to create a customized Iterable Class p141, algorithm 1.1, and corresponding source file ResizingArrayStack.java in downloaded algs4.jar file. The \"Item\" in ResizingArrayStack is a parameter. That is to say, you can change its name to anything. For example: ResizingArrayStack implements Iterable { ... or: ResizingArrayStack implements Iterable { ... The method \"next()\" in private class \"ReverseArrayIterator\" will not be used in client main method. But we can demonstrate its usage by adding the following snippet in main method: for (String i : s) { System.out.println(\"i= \" + i); } About exercises solutions Some exercises solutions can be found at http://algs4.cs.princeton.edu/code/; How to plot graphs of algorithms Use StdDraw.java. Some use cases can be found at Section 1.5 of Introduction to Programming in Java: An Interdisciplinary Approach by Robert Sedgewick and Kevin Wayne.","tags":"Tech","url":"http://leetschau.github.io/notes-about-robert-sedgewick-algorithms.html","loc":"http://leetschau.github.io/notes-about-robert-sedgewick-algorithms.html"},{"title":"Cygwin与Windows间的Copy/Paste","text":"命令行状态下 首先将Cygwin设为左键选择后自动复制，右键粘贴；然后就可以把Cygwin当成一个普通的Windows应用了； vi窗口中 根据http://vim.wikia.com/wiki/Using_the_Windows_clipboard_in_Cygwin_Vim的介绍，将下面的代码拷贝到cygwin的$HOME/.vimrc中，就可以用\\y拷贝，\\p粘贴了。 function! Putclip(type, ...) range let sel_save = &selection let &selection = \"inclusive\" let reg_save = @@ if a:type == 'n' silent exe a:firstline . \",\" . a:lastline . \"y\" elseif a:type == 'c' silent exe a:1 . \",\" . a:2 . \"y\" else silent exe \"normal! <\" . a:type . \" >y\" endif \"call system('putclip', @@) \"As of Cygwin 1.7.13, the /dev/clipboard device was added to provide \"access to the native Windows clipboard. It provides the added benefit \"of supporting utf-8 characters which putclip currently does not. Based \"on a tip from John Beckett, use the following: call writefile(split(@@,\"\\n\"), '/dev/clipboard') let &selection = sel_save let @@ = reg_save endfunction vnoremap y :call Putclip(visualmode(), 1) nnoremap y :call Putclip('n', 1) function! Getclip() let reg_save = @@ \"let @@ = system('getclip') \"Much like Putclip(), using the /dev/clipboard device to access to the \"native Windows clipboard for Cygwin 1.7.13 and above. It provides the \"added benefit of supporting utf-8 characters which getclip currently does \"not. Based again on a tip from John Beckett, use the following: let @@ = join(readfile('/dev/clipboard'), \"\\n\") setlocal paste exe 'normal p' setlocal nopaste let @@ = reg_save endfunction nnoremap p :call Getclip()","tags":"Tech","url":"http://leetschau.github.io/cygwinyu-windowsjian-de-copypaste.html","loc":"http://leetschau.github.io/cygwinyu-windowsjian-de-copypaste.html"},{"title":"Auto Dir Sync Script Based on Total Commander","text":"The Sync source folder is in e:\\mydoc\\CalibreLib, destination folder is M:\\backup\\CalibreLib, where M is the drive letter of an USB disk with label \"Emacs\"; Giving USB Disk a fixed Drive Letter Right click \"My Compter\" -> Manage -> Storage -> Disk Management. Right click the USB drive -> Change Drive Letter and Paths, and modify it to M. You can choose any letter between M~Z. A letter before M is not recommended because it could be occupied by virtual drives or CD-ROMs. Test shows that other USB disk won't use the drive letter \"M\". And this USB disk(\"Emacs\") always use \"M\" no matter which USB port it's plugged in; Define Sync Configuration in Total Commander Open e:\\mydoc\\CalibreLib in upper(left) panel in TC, M:\\backup\\CalibreLib in bottom panel; Shift + F12(Commands -> Synchronize Dirs) to show the Sync window of TC; Check \"Asymmetric\"(because I want a strict mirror of e:\\mydoc\\CalibreLib, not a copy. see TC doc for detailed explanation) and \"Subdirs\"; Click the button at the left side of the directory input box and choose \"add current directories and settings to list\". You can verify this by openning file wincmd.ini in TC's installation dir and you can find: [ SyncOptions ] BooksLib_L = E : \\ MyDoc \\ CalibreLib \\ BooksLib_R = M : \\ backup \\ CalibreLib \\ BooksLib_Wcs =* . * BooksLib_Flags = 9 | 61 |- 9 In \"Configuration and Switches\" -> \"ini file Settings\" of TC's document file(TOTALCMD.CHM), you can find the explanations about settings above. Define a hotkey in AutoHotkey Script 1 Use this auto sync script Insert USB disk; Press Win+Alt+s; Sync tool of TC will start comparation automatically; When comparation ends, check the result. If it's OK, press Enter to start Synchronize; That's it.","tags":"Tech","url":"http://leetschau.github.io/auto-dir-sync-script-based-on-total-commander.html","loc":"http://leetschau.github.io/auto-dir-sync-script-based-on-total-commander.html"},{"title":"Notes of Cygwin in Windows7","text":"Installation download setup.exe from its official website ; run setup.exe, select \"download without installing\" option; when asking for download website, select the first 163.com and three .cn sites, thus bypassing the connection restriction of company LAN; cygwin app dir is: d:\\apps\\cygwin; cygwin packages dir is: e:\\mydoc\\cygwinPkgs; when asking for packages, select package \"Debug\" & \"Devel\"(assure vi, git, apt-get, gcc, gdb, make, c99, pkg-config, doxygen, valgrind & Graphviz are included), select all related packages; rerun setup.exe, select \"install from local directory\" option; Root Directory($CYGWIN_ROOT): e:\\mydoc\\cygwinRoot; install a icon at start menu; run app from start menu; Usage Window size, font and fore/background color are all customized via \"Options\" in popup menu; In cygwin, \"/cygdrive\" is the root of all windows logic drivers(c:, d:, e:, etc). e.g. \" /cygdrive/e/mydoc\" in cygwin equals to \"e:\\mydoc\" in windows ; \"/\" in cygwin equals to \"e:\\mydoc\\cygwinRoot\" in windows. So when you mkdir under /home/chad in cygwin, actually the directory is created in e:\\mydoc\\cygwinRoot\\home\\chad in windows; customize window scroll keys: options -> Window; install ssh server install openssh for cygwin: Net -> openssh run cygwin as administrator; ssh-host-config -y enter a password for default ssh user \"cyg_server\" cygrunsrv --start sshd 启动后在Windows的\"服务\"中可以看到一个名为\"CYGWIN sshd\"的本地服务，\"sshd\"是其\"服务名称\"，\"CYGWIN sshd\"是\"显示名称\"，用netstat可以看到有进程在22端口监听。 Cygwin: Running an sshd on Windows 7 I can login user cyg_server, but automatically quit. so weired. Some Packages: telnet client: Net -> inetutils","tags":"Tech","url":"http://leetschau.github.io/notes-of-cygwin-in-windows7.html","loc":"http://leetschau.github.io/notes-of-cygwin-in-windows7.html"},{"title":"Cross Platform Dictionary Tools","text":"GoldenDict : free, portable, extensible; 可以挂接外置词典，尤其是兼容StarDict格式，使得许多优秀的免费词典可用； 支持鼠标取词和剪贴板取词，但对SumatraPDF的支持似乎不太好；界面能够显示音标； StarDict dict: google \"stardict词典下载\" 星际译王本地词典下载 在Windows上使用 从 GoldenDict github repo 的 Early Access Builds for Windows 页面中下载最新版本zip压缩包 GoldenDict-1.5.0-RC2-85-g473cb2b_(QT_486).zip ， 不要从它的 官网 上下载，上面的版本太旧了。 将zip文件解压到 D:\\apps 下，将 mydicts 文件夹 （在百度网盘或者U盘的 warez/GoldenDict 目录下）拷贝到 D:\\apps\\GoldenDict 文件夹中， 启动GoldenDict（D:\\apps\\GoldenDict\\GoldenDict.exe）， 在主菜单 [编辑 -> 词典 -> 词典来源 -> 文件] 窗口中点击\"添加\"按钮， 选择 D:\\apps\\GoldenDict\\mydicts 目录，勾选\"递归搜索\"，然后点击\"重新扫描\"按钮， 就将 mydicts 下所有字典都加入进来了，在 [编辑 -> 词典 -> 词典] 列表中可以用拖拽的方法调整词典顺序。 Use GoldenDict on Ubuntu/Mint Install GoldenDict with sudo apt install goldendict (in Ubuntu) or from Software Manager (in Mint). On Ubuntu 14.04, the installed version is 1.5.0, which is the newest version by far (2017.5.28). Start it with goldendict . Copy dictionaries folder ( mydicts ) to ~/.goldendict. Add them to Goldendict the same way as in Windows. Add dict.cn as a online dict at [Edit -> Dictioanries -> Sources -> Websites]. Click \"Add\", Name: dict.cn; Address: http://dict.cn/%GDWORD%. You can modify dictionary order with drag and drop in [Edit -> Dictionaries -> Dictionaries]; Clipboard translation with Ctrl+C+C works well under GoldenDict 1.0.1, Mint 14. 使用方法 剪贴板取词 首先选中要翻译的词，然后按住Ctrl不放，按两下C键，这是默认设置，可以改成别的， 但由于第一次按C键将内容拷贝到剪贴板上，所以修改后的快捷键的第一个键必须是C； 鼠标取词 GoldenDict提供了鼠标取词功能，但没有提供\"不对菜单栏和按钮取词\"功能， 对PDF文档的取词也不灵，整体看可用性不高，还是以剪贴板取词为主吧； 显示/隐藏主界面 默认是Ctrl+两次F11，不太顺手，但考虑到主要是剪贴板取词， 需要在主界面上手工输入的情况不多，所以这个设置不需要修改； 其他类似工具 WordNet : from Princeton University, nonportable, old_fashioned(last release in 2005), no popup functionality; Simple dictionary applications : free, portable, extensible database, poor looking; Interlex : free, nonportable, for learning, not dictionary; Pop-Up Dictionary: proprietary ware; JLearnIt : proprietary ware; Wiktionary : free, online; WordWeb : Free + Pro; The CMU Pronouncing Dictionary : The Carnegie Mellon University Pronouncing Dictionary;","tags":"Tech","url":"http://leetschau.github.io/cross-platform-dictionary-tools.html","loc":"http://leetschau.github.io/cross-platform-dictionary-tools.html"},{"title":"用mtputty代替SecureCRT","text":"mtputty 是一个免费的多标签putty增强工具；同时支持putty的windows版本kitty，有望代替SecureCRT。 Portable模式启动方法：mtputty.exe /P 貌似不支持预期-发送机制","tags":"Tech","url":"http://leetschau.github.io/yong-mtputtydai-ti-securecrt.html","loc":"http://leetschau.github.io/yong-mtputtydai-ti-securecrt.html"},{"title":"保存Total Commander的列宽","text":"Total Commander的默认列宽经常显示不全内容，需要手工调整，用\"Menu -> Configuration -> Save Position\"可以永久保存列宽，避免重复手工调整。","tags":"Tech","url":"http://leetschau.github.io/bao-cun-total-commanderde-lie-kuan.html","loc":"http://leetschau.github.io/bao-cun-total-commanderde-lie-kuan.html"},{"title":"用Java安装包安装绿色JDK","text":"Oracle官网上下载的JDK安装包是一个exe文件，默认方式安装后会将系统的Java运行时（JRE）指向自身，当机器上有多个jdk时容易弄乱，安装时不要选\"公共JRE\"就可以变成绿色JDK了。","tags":"Tech","url":"http://leetschau.github.io/yong-javaan-zhuang-bao-an-zhuang-lu-se-jdk.html","loc":"http://leetschau.github.io/yong-javaan-zhuang-bao-an-zhuang-lu-se-jdk.html"},{"title":"Windows系统间传输文件的方法","text":"假设现有两台计算机A和B需要互相传文件，A传给B多，B传给A少。 首先将A计算机需要传输的文件夹设为共享。方法是：右键文件夹 -> 属性 -> 共享 -> 高级共享，勾选\"共享此文件夹\"，起一个有意义的名字或者用默认的，同时共享的用户数量设为2就够了，如果B也要给A传，点击\"权限\"，\"更改\"一项后面勾选\"允许\"。 这时在文件夹属性的\"共享\"标签页里出现了一个\"网络路径\"条目，其他计算机就可以用下面的路径访问这个文件夹了。 还有其他方法也可以传文件，例如用远程桌面，或者局域网通讯工具，但如果传输的文件量大，共享的方式还是比较方便的。 B机器在连接A时，点击Windows键，在搜索栏里输入\"\\\"，Windows会自动搜索可用的共享机器，很方便。 A和B之间可以用网线直连，这种方法可行，但设置家庭组的方法无法连上。 如果在输入\"\\\"之后找不到A，首先检查网线头是否连接上了，如果还不行将两台电脑都设置成\"家庭网络\"再试；","tags":"Tech","url":"http://leetschau.github.io/windowsxi-tong-jian-chuan-shu-wen-jian-de-fang-fa.html","loc":"http://leetschau.github.io/windowsxi-tong-jian-chuan-shu-wen-jian-de-fang-fa.html"},{"title":"Notes about ViATc","text":"ViATc 是一个基于Autohotkey的 TotalCommander插件，实现以vi的方式操纵TotalCommander。 它的0.4版相比0.3版功能有了很大的提升， 主要是增加了对一些常用操作的支持， 例如Tab间跳转，lock/unlock tab，关闭tab等； :help打开快捷键列表； 插件安装方法：如果在TC中打开ViATc的zip包没有自动安装插件的窗口出现， 则将ViATc的exe文件和帮助文件解压到totalcmd.exe所在文件夹，双击exe运行即可； 善用佳软上一篇比较好的介绍文章：http://xbeta.info/viatc.htm， 但文中的软件版本似乎与下到的不一致。","tags":"Tech","url":"http://leetschau.github.io/notes-about-viatc.html","loc":"http://leetschau.github.io/notes-about-viatc.html"},{"title":"Notes about WindowPadX","text":"WindowPadX 乃一Autohotkey脚本，具有强大的单/多显示器窗口排布能力且易于配置。有了它，那些Pro版收费的、需要安装的DisplayFusion, MultiMon TaskBar, Actual Multiple Monitors...就都可以回家了。 将当前窗口移动到另一个显示器中：Caps + Space； Space = WPXA_MoveWindowToMonitor, Next 窗口最大化切换：Caps + Tab; Tab = WPXA_MaximizeToggle 将当前非最小化窗口全部集中到第1个显示器中：Caps + 1; 1 = WPXA_GatherWindowsOnMonitor, 1 将当前非最小化窗口全部集中到第2个显示器中：Caps + 2; 2 = WPXA_GatherWindowsOnMonitor, 2 将鼠标移动到第1个显示器中：#Numpad1 = WPXA_MoveMouseToMonitor, 1 将鼠标移动到第2个显示器中：#Numpad2 = WPXA_MoveMouseToMonitor, 2 窗口在9个方向上移动：Caps + q~e, a~d, z~c; WPXA_Move...（见WindowPadMove的解释） 2012-12-26更新： 今天使用中发现WindowPadX存在失效情况，有时Reload能重新生效，有时不行，所以用 WindowManager 代替之，发现不论是什么工具对SumatraPDF都无效； 另外用Windows 7内置的快捷键 Win + Shift + Left/Right把窗口在两个显示器间切换很好用。 工具推荐：http://www.freewaregenius.com/7-free-dual-monitor-programs-and-resources-that-you-should-know-about/#dualmonitortaskbar","tags":"Tech","url":"http://leetschau.github.io/notes-about-windowpadx.html","loc":"http://leetschau.github.io/notes-about-windowpadx.html"},{"title":"Notes about Putty & Kitty","text":"Kitty是putty的portable版本，所有配置保存在文本文件中（putty保存在注册表中）， 新建kitty session比较好的方法是复制一份DefualtSettings文件，修改其中的字段， 而不通过kitty自己的配置界面，这个界面用起来很不方便，下面是配置过程： 定制默认配置：字体为11号Consolas，终端24行80列， Font\\Consolas\\ FontHeight\\11\\ TermHeight\\24\\ TermWidth\\80\\ 复制文件DefaultSettings为747：ssh lichao@10.0.7.47，端口号22， 连接后自动运行脚本d:\\apps\\Kitty\\Scripts\\cat47.txt （转义字符的写法是%+16进制的ASCII码，例如\"\\\"是%5C，\":\"是%3A） HostName\\10.0.7.47\\ Protocol\\ssh\\ PortNumber\\22\\ UserName\\lichao\\ Scriptfile\\D%3A%5CApps%5CKitty%5CScripts%5Ccat47.txt\\ 编写自动运行脚本（如果需要的话）：格式是一行预期一行发送 （见笔记\" Notes about Kitty \"）； 保持密码（可选）：启动配置界面（kitty.exe），加载747，输入登录密码 （密码是加密后存入配置文件的，无法直接在配置文件里写），保存747； 切换全屏模式 Ctrl + right click，点击菜单切换全屏，当连接的\"FullScreenOnAltEnter\"设置为true时， 也可以用Alt+Enter切换（在配置界面上的位置是Window->Behavior最后一项， 或者session文件中\" FullScreenOnAltEnter\\1\\ \"）； 连接断开后自动关闭窗口 session文件中\"CloseOnExit\\1\\\"表示自动关闭，\"CloseOnExit\\0\\\"表示不自动关闭； \"AltF4\\1\\\"表示可以用Alt+F4关闭窗口，0表示此组合键无效； TCP连接 putty.exe -raw -P 例如：putty -raw 10.31.1.23 -P 3128 SSH自动登录 putty.exe -ssh -pw mypassword username@10.0.2.68 参考： http://superuser.com/questions/44106/is-there-a-way-to-auto-login-in-putty-with-a-password 文件传输 一次性传输：pscp 上传文件 将f:\\hw.txt上传到219的/home/chad目录下： pscp -pw mypwd f:\\*.txt chad@10.31.1.219:/home/chad/ 下载文件 将96上的/home/chad/hw.txt文件下载到f:\\下： pscp -pw mypwd chad@10.31.1.96:home/chad/*.txt f:\\ 将113上autoClient文件夹下所有文件拷贝到当前目录下： pscp -pw mypwd lichao@10.31.1.113:/home/lichao/autoClient/* ./autoClient/ 注意本地的文件夹autoClient必须存在（pscp不能自己创建文件夹）， 且pscp不支持/* / 这样的多级目录拷贝；autoClient后面的/必须加， 否则会把autoClient当成拷贝文件的新名字； 这两种指令都可以在目标路径后面写上文件名，达到修改文件名的目的； 参考：putty文档 chapter 5. 交互式传输：psftp 登录服务器：psftp -pw mypwd username@10.2.3.56 查询服务器当前目录：pwd 改变服务器当前目录：cd ... 查询和改变本地目录：lpwd, lcd 上传：put f:\\hw.txt 下载：get hw.txt 运行本地命令：!+cmd_name，例如!dir显示本地文件，!type Readme.txt显示Readme.txt文件内容； 上传/下载多个文件：mput/mget; psftp.exe的自动执行脚本：psftp user@10.0.2.47 -bc -b myscript，（相对于putty的-m参数） myscript文件内容是自动执行的指令，例如： cd / home / ftp / users / jeff del jam - old . tar . gz ren jam . tar . gz jam - old . tar . gz put jam . tar . gz 详见putty文档6.2节； 设置Putty默认属性 在$PUTTY_HOME\\sessions\\下有一个%C4%AC%C8%CF%C9%E8%D6%C3文件， 其中C4AC C8CF C9E8 D6C3是\"默认设置\"的Unicode编码，这个文件里保存的是默认设置， 设置默认设置的好处是以后凡不指明都是用默认值（对于开关选项，0表示关闭，1表示开启）： Font \\ Lucida % 20 Console \\ LineCodePage \\ UTF - 8 \\ ScrollbackLines \\ 20000 \\ ; 缓冲区行数 Protocol \\ ssh \\ ; 默认连接协议，可以不用 - ssh参数特别说明 TerminalType \\ xterm \\ FullScreenOnAltEnter \\ 1 \\ ; 按 Alt + Enter进入全屏模式 CloseOnExit \\ 0 \\ ; 退出网元后不关闭窗口（改为 1 是关闭窗口） MouseIsXterm \\ 0 \\ ; unix - style Copy / Paste : 左键选择，右键粘贴 使用方法 对于常用连接，可以写成一个bat脚本，用Executor做快捷键启动；对于临时连接， 可以手工敲开始处的ssh自动登录脚本连接。 putty无法自动登录问题 现象：telnet无法自动登录：putty -telnet user@10.0.2.34，然后手工输入密码。 解决方法：使用kitty_portable代替putty，它可以输入登录密码， 然后把自动登录服务器保存为一个session，例如名为mysession， 然后用 kitty -load mysession 启动之。 putty也有-load参数，但它的session信息是保存在注册表里，portable能力稍差。 参考： Improving Putty settings on Windows 精彩PuTTY 中文教程","tags":"Tech","url":"http://leetschau.github.io/notes-about-putty-kitty.html","loc":"http://leetschau.github.io/notes-about-putty-kitty.html"},{"title":"用Autohotkey实现鼠标滚轮功能","text":"下面的快捷键定义实现了用Alt+[/]实现鼠标滚轮的功能，按住右侧Ctrl再按CapsLock + Up/Down就可以实现页面缩放了（模拟Ctrl+鼠标滚轮功能）。 ![:: MouseClick, WheelUp, , , 10, 0, D, R return !]:: MouseClick, WheelDown, , , 10, 0, D, R return 另外还可以将CapsLock + Up/Down定义为翻页快捷键，缺点是不能单手操作，CapsLock+w/s的缺点是与WindowPadX的热键冲突。 CapsLock & Up:: CapsLock & Down:: CapsLock & w:: CapsLock & s:: 在进行IntelliJ的缩放时发现上面的定义一次缩放的幅度太大，改成下面的脚本解决了问题： CapsLock & w:: MouseClick, WheelUp return CapsLock & s:: MouseClick, WheelDown return 常用软件中的滚轮和缩放操作 Chrome: 使用vimium插件，u/d翻页，j/k上下移动；Ctrl -/=缩放页面； SumatraPDF: Up/Down上下移动，Ctrl -/=缩放页面； Notepad2: Up/Down上下移动，Ctrl -/=缩放页面； 另：用右侧Alt + P实现窗口切换（即Alt+Tab）：RAlt & p:: AltTab","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeyshi-xian-shu-biao-gun-lun-gong-neng.html","loc":"http://leetschau.github.io/yong-autohotkeyshi-xian-shu-biao-gun-lun-gong-neng.html"},{"title":"使用Windows7的系统备份和还原功能备份操作系统","text":"刚入手的联想V480装好了系统和驱动需要做系统备份，之前使用的小马PE找不到硬盘，无法用它的ghost功能，所以尝试了一下Win7自己的备份和还原功能。 Win7的备份和还原在【控制面板->系统和安全->备份和还原】中进行，备份操作分为两部分：创建系统镜像和引导光盘，前者是系统盘的备份，类似于ghost镜像，但没有压缩功能（用了13GB空间），备份之后在F盘（选择的备份目标盘）上生成了一个文件（MediaID.bin）和两个文件夹（WindowsImageBackup和一个与计算机名相同的文件夹），将它们设为隐藏即可。创建引导光盘需要刻录光盘，需要的空间很小，只用了187MB，CD盘即可，DVD浪费了。 还原的时候将从光盘启动系统，它会自动寻找最新的备份，如果找不到也可以手工指定。 今天做的备份用户名是chad，密码是godu。 如果需要还原的时候系统还能启动，可以在系统中进行还原操作，如果系统已经不能启动，恢复光盘也找不到了，可以从微软官网下载\"Windows 7 USB/DVD download tool\"，安装后可以把U盘做成一个启动盘（需要一个Win7系统iso文件），然后用这个U盘启动计算机，选择\"系统映像恢复\"即可。也可以用它安装全新的系统。 2013-01-05更新： Easeus Todo Backup是更好的选择，生成的镜像压缩比大，时间短，可以增量备份，可以只恢复系统，可以恢复到不同大小的分区上，参考http://www.freewaregenius.com/the-best-free-disk-imaging-program-a-comparative-analysis","tags":"Tech","url":"http://leetschau.github.io/shi-yong-windows7de-xi-tong-bei-fen-he-huan-yuan-gong-neng-bei-fen-cao-zuo-xi-tong.html","loc":"http://leetschau.github.io/shi-yong-windows7de-xi-tong-bei-fen-he-huan-yuan-gong-neng-bei-fen-cao-zuo-xi-tong.html"},{"title":"Notes about 21st Century C","text":"第10页，\"gcc erf.c -o erf -lm -g -Wall -O3 -std=gnu11\"指令，Ubuntu 11和Red Hat 5都不识别\"-std=gnu11\"选项，都能够识别\"-std=gnu99\"选项，都能够正常运行\"c99 erf.c -o erf -lm -g -Wall -O3\"指令。 Ubuntu能够正常运行第15页的makefile，Red Hat（服务器47）不能正常编译。 第21页：Using Libraries from Source一节，Red Hat上安装gsl库后pkg-config指令找不到路径，可能是权限问题导致的；Ubuntu上安装gsl库后pkg-config指令能找到安装位置，make指令编译能正常生成可执行文件，但执行时报下面的错误： ./gsl_erf: error while loading shared libraries: libgsl.so.0: cannot open shared object file: No such file or directory 第27页：Compiling form stdin一节介绍的在命令行中运行C代码的方法在Ubuntu上试验成功，首先在$HOME下新建一个allheads.h文件，内容为（与书中P26页内容一样，但不包括最后一行，否则会提示gsl_rng.h文件找不到）： #include #include #include #include #include #include // #include 然后修改.bashrc文件，在文件末尾增加下面3行内容（书中第28页）： go_libs=\"-lm\" go_flags=\"-g -Wall -include allheads.h -O3\" alias go_c=\"c99 -xc '-' $go_libs $go_flags\" 然后在命令行下输入： go_c << '---' int main(){printf(\"Hello from the command line.\\n\");} 没有报错说明正常编译完成，这时当前件夹下会出现一个a.out文件，用./a.out运行之，可以看到运行结果： Hello from the command line.","tags":"Tech","url":"http://leetschau.github.io/notes-about-21st-century-c.html","loc":"http://leetschau.github.io/notes-about-21st-century-c.html"},{"title":"修改Linux系统的默认语言编码集","text":"RedHat 今天晚上发现服务器上vi的界面提示变成了乱码，只能将XShell的编码改为GBK才能正常显示，导致consolas字体无法使用，GBK编码下的字体丑陋无比，无法忍受，一轮google之后终于发现有人改了/etc/sysconfig/i18n文件，解决方法就是把GB18030改回到UTF-8： root用户下修改/etc/sysconfig/i18n文件，将LANG=zh_CN.GB18030改为LANG=\"zh_CN.UTF-8\"，新用户登录后就界面就是UTF-8编码了，如果改成en_US.UTF-8，vi的提示语言就变成英文了。 Ubuntu 修改配置文件：/etc/default/locale内容改为： LANG=\"en_US.UTF-8\" update-locale","tags":"Tech","url":"http://leetschau.github.io/xiu-gai-linuxxi-tong-de-mo-ren-yu-yan-bian-ma-ji.html","loc":"http://leetschau.github.io/xiu-gai-linuxxi-tong-de-mo-ren-yu-yan-bian-ma-ji.html"},{"title":"汉字编码查询的Java实现","text":"Java代码 package encoding; import java.io.UnsupportedEncodingException; import java.util.ArrayList; import java.util.List; public class EncodingProbe { public static void main(String[] args) throws UnsupportedEncodingException { String name = \"联通移动\"; List charsets = new ArrayList (); charsets.add(\"gbk\"); charsets.add(\"gb18030\"); charsets.add(\"unicode\"); charsets.add(\"utf-8\"); for (String charset : charsets) { System.out.println(\"bytes of \" + name + \" in charset \" + charset + \" is: \" + bytes2HexString(name.getBytes(charset))); } } public static String bytes2HexString(byte[] b) { String ret = \"\"; for (int i = 0; i < b.length; i++) { String hex = Integer.toHexString(b[i] & 0xFF); if (hex.length() == 1) { hex = '0' + hex; } ret += hex; } return ret; } } Windows平台上的其他方法 用UltraEdit，保存文件时可以选择编码格式； Linux平台上的其他方法 file指令配合iconv指令。","tags":"Tech","url":"http://leetschau.github.io/yi-zi-bian-ma-cha-xun-de-javashi-xian.html","loc":"http://leetschau.github.io/yi-zi-bian-ma-cha-xun-de-javashi-xian.html"},{"title":"C语言中使用其他文件中的函数","text":"例如main.c的main()方法中用myfunc.c中的mysub()函数，首先要在myfunc.c中实现mysub： int mysub(int a, int b) { return a-b; } 之后main.c有两种方法引用： 声明函数原型 #include #include int mysub(int a, int b); int main() { printf(\"Hello world!\\n\"); int c = mysub(3,5); printf(\"result is: %d\",c); return 0; } 通过头文件引用 将main.c中的\"int mysub(int a, int b);\"拷贝到myfunc.h文件中，然后将main.c中的\"int mysub(int a, int b);\"改为：#include \"myfunc.h\"。 Code::Blocks中生成头文件 选中要生成头文件的C文件，主菜单 -> Edit -> Swap header/source。","tags":"Tech","url":"http://leetschau.github.io/cyu-yan-zhong-shi-yong-qi-ta-wen-jian-zhong-de-han-shu.html","loc":"http://leetschau.github.io/cyu-yan-zhong-shi-yong-qi-ta-wen-jian-zhong-de-han-shu.html"},{"title":"Notes about Code::Blocks","text":"Source Auto Formatting define format style Main Menu -> Settings -> Editor -> Source formatter; define shortcuts Main Menu -> Settings -> Editor -> Keyboard shortcuts. I use \"F10\" as its shortcut; formatting code use the shortcut define in the previous step.","tags":"Tech","url":"http://leetschau.github.io/notes-about-codeblocks.html","loc":"http://leetschau.github.io/notes-about-codeblocks.html"},{"title":"Unicode到UTF-8编码转换的Java实现","text":"Unicode到UTF-8转换的规则见笔记 字符编解码的故事 ，下面将转换过程代码化，以演示如何手工对byte数据进行操作，以及需要注意的问题（字节位的高低定义是：high<-->low）。 package encoding; import java.io.UnsupportedEncodingException; import org.junit.Test; public class Converter { public static void main(String[] args) throws UnsupportedEncodingException { char chnChar = '联'; System.out.println(\"UTF-8 bytes of \" + chnChar + \": \" + convUnicode2utf8(chnChar)); } /* * 演示unicode到utf-8的转换过程。 * @param 要进行转换的汉字 * @throws UnsupportedEncodingException * @return 16进制表示的汉字UTF-8编码字节序列 / public static String convUnicode2utf8(char input) throws UnsupportedEncodingException { int lowByte = input & 0xff; int highByte = (input & 0xff00) >>> 8; // 第二次运行时注释掉本行 // byte highByte = (byte) ((input & 0xff00) >>> 8); // 第二次运行时取消注释本行 System.out.println(\"Unicode bytes of \" + input + \": \" + Integer.toHexString(highByte) + \", \" + Integer.toHexString(lowByte)); // UTF-8的第1个字节是1110 + highByte前4位 int high4inHighByte = highByte >>> 4; System.out.println(\"highByte>>>4: hex:\" + Integer.toHexString(high4inHighByte) + \", demical:\" + high4inHighByte); int utf8Byte1 = (7 << 5) + high4inHighByte; // UTF-8的第2个字节是10 + highByte后4位 + lowByte前2位 int low4inHighByte = highByte & 0xf; int high2inLowByte = lowByte >>> 6; int utf8Byte2 = (1 << 7) + (low4inHighByte << 2) + high2inLowByte; // UTF-8的第3个字节是10 + lowByte后6位 int utf8Byte3 = (1 << 7) + (lowByte & 0x3f); String result = Integer.toHexString(utf8Byte1) + \", \" + Integer.toHexString(utf8Byte2) + \", \" + Integer.toHexString(utf8Byte3); return result; } public static String bytes2HexString(byte[] b) { String ret = \"\"; for (int i = 0; i < b.length; i++) { String hex = Integer.toHexString(b[i] & 0xFF); if (hex.length() == 1) { hex = '0' + hex; } ret += hex; } return ret; } } 第1次运行结果： Unicode bytes of 联: 80, 54 highByte>>>4: hex:8, demical:8 UTF-8 bytes of 联: e8, 81, 94 第2次运行结果： Unicode bytes of 联: ffffff80, 54 highByte>>>4: hex:ffffff8, demical:268435448 UTF-8 bytes of 联: 100000d8, 81, 94 结果分析 当highByte为byte型时（第二次运行），\"Integer.toHexString(highByte)\"的运行结果是ffffff80，这是由于toHexString(int i)方法会先将i转换为int型，Java中没有无符号数的概念，0x80作为byte型数据的值是-128，转换成int型的-128就是ffffff80。后面的highByte>>>4也一样，移位操作符（>>和>>>）要求左右的操作数是int或者long，highByte首先被转换为int值0xffffff80，然后无符号右移4位，变为0x0ffffff8，即268435448，最后导致utf8Byte1得到错误的值。可见错误的根本原因在于移位运算符对byte型数据按有符号数进行了\"私下\"转换。 解决方法 当要对数据进行字节位操作时，要特别注意数据是有符号还是无符号的，如果是无符号的（例如汉字编码），并且要进行移位操作（主要是向右移位，向左移位不受是否有符号位影响），应将被处理的byte保存在int型变量中。 参考http://stackoverflow.com/questions/3948220/behaviour-of-unsigned-right-shift-applied-to-byte-variable，移位运算符的说明参考\"Java in a Nutsehll\"一书中\"Bitwise and Shift Operators\"一节。 网络传输中的汉字和特殊字符 Java程序用字节数组接收网络传输数据时，字节的值只要超过0x7f，直接打印出来就是负数，这是Java对byte类型的定义（-128~127）造成的，不是错误，需要打印日志或者屏显时用上面代码中的bytes2HexString()打印hex码。","tags":"Tech","url":"http://leetschau.github.io/unicodedao-utf-8bian-ma-zhuan-huan-de-javashi-xian.html","loc":"http://leetschau.github.io/unicodedao-utf-8bian-ma-zhuan-huan-de-javashi-xian.html"},{"title":"关于ISO8859-1编码","text":"ISO-8859是ASCII编码的扩展规范，能够覆盖大部分欧洲语言。 ISO/IEC 8859-1 是ISO8859的一个最流行的实现方案，是Java的\"default default\"编码规则，及Java使用系统默认的编码方案失败时使用的编码方案（http://stackoverflow.com/questions/12659417/why-does-javas-string-getbytes-uses-iso-8859-1）。 在进行String - byte[]转换时可以像UTF-8, unicode, gbk一样用ISO8859-1引用它，例如： String result = new String(byteArray, \"ISO8859-1\");","tags":"Tech","url":"http://leetschau.github.io/guan-yu-iso8859-1bian-ma.html","loc":"http://leetschau.github.io/guan-yu-iso8859-1bian-ma.html"},{"title":"Linux系统中软件的安装位置","text":"简而言之，最安全的策略是：用户自己安装的所有第三方软件（与操作系统功能无关）都放在/opt下，然后将自己的bin目录加入到环境变量PATH中。 参考： Filesystem Hierarchy Standard What is the conventional install location for applications in Linux? What is the Linux equivalent to C:\\Program Files?","tags":"Tech","url":"http://leetschau.github.io/linuxxi-tong-zhong-ruan-jian-de-an-zhuang-wei-zhi.html","loc":"http://leetschau.github.io/linuxxi-tong-zhong-ruan-jian-de-an-zhuang-wei-zhi.html"},{"title":"Java的字符编码集","text":"实验步骤 CharSetTest.java文件（内容如下）在Windows下编译为class文件： import java.nio.charset.Charset; import java.io.OutputStreamWriter; import java.io.ByteArrayOutputStream; public class CharSetTest { public static void main(String[] args) { System.out.println(\"Default Charset=\" + Charset.defaultCharset()); System.setProperty(\"file.encoding\", \"Latin-1\"); System.out.println(\"file.encoding=\" + System.getProperty(\"file.encoding\")); System.out.println(\"Default Charset=\" + Charset.defaultCharset()); System.out.println(\"Default Charset in Use=\" + getDefaultCharSet()); System.out.println(\"Default 字符集（在使用中的）=\" + getDefaultCharSet()); } private static String getDefaultCharSet() { OutputStreamWriter writer = new OutputStreamWriter(new ByteArrayOutputStream()); String enc = writer.getEncoding(); return enc; } } ftp到Red Hat Linux上运行： /opt/jdk1.6.0_35/bin/java CharSetTest Default Charset=UTF-8 file.encoding=Latin-1 Default Charset=UTF-8 Default Charset in Use=UTF8 Default 字符集（在使用中的）=UTF8 /opt/jdk1.6.0_35/bin/java -Dfile.encoding=GBK CharSetTest Default Charset=GBK file.encoding=Latin-1 Default Charset=GBK Default Charset in Use=GBK Default ؖ·՚ʹԃאµģ©=GBK （将XShell的显示编码改为GBK后可以正常显示汉字） /opt/jdk1.6.0_35/bin/java -Dfile.encoding=UTF-8 CharSetTest Default Charset=UTF-8 file.encoding=Latin-1 Default Charset=UTF-8 Default Charset in Use=UTF8 Default 字符集（在使用中的）=UTF8 本地Windows上运行 D:\\Apps\\Java\\jdk1.6.0_35\\jre\\bin\\java.exe CharSetTest Default Charset=GBK file.encoding=Latin-1 Default Charset=GBK Default Charset in Use=GBK Default 字符集（在使用中的）=GBK D:\\Apps\\Java\\jdk1.6.0_35\\jre\\bin\\java.exe -Dfile.encoding=GBK CharSetTest Default Charset=GBK file.encoding=Latin-1 Default Charset=GBK Default Charset in Use=GBK Default 字符集（在使用中的）=GBK D:\\Apps\\Java\\jdk1.6.0_35\\jre\\bin\\java.exe -Dfile.encoding=UTF-8 CharSetTest Default Charset=UTF-8 file.encoding=Latin-1 Default Charset=UTF-8 Default Charset in Use=UTF8 Default 瀛楃闆嗭紙鍦ㄤ娇鐢ㄤ腑鐨勶級=UTF8 结果分析 Java文件使用GBK编码，但class文件中汉字是用UTF-8编码的，47上的测试表明不论-Dfile.encoding的值是什么，只要把与XShell的显示编码保持一致就可以正确显示。 参考文献： http://stackoverflow.com/questions/1749064/how-to-find-default-charset-encoding-in-java http://stackoverflow.com/questions/2677419/determining-default-character-set-of-platform-in-java http://stackoverflow.com/questions/5306153/how-to-get-terminals-character-encoding","tags":"Tech","url":"http://leetschau.github.io/javade-zi-fu-bian-ma-ji.html","loc":"http://leetschau.github.io/javade-zi-fu-bian-ma-ji.html"},{"title":"Linux平台上转换文件编码","text":"Linux系统的iconv指令是一个很好的文件编码转换工具，支持的编码范围广，使用方便，例如将一个utf-8编码的文件（名为tic）转换为gbk编码： iconv -f utf-8 -t gbk tic > ticgbk 可以用\"iconv -l\"查看系统支持的所有编码列表。 另：用file -i 可以查看一个文件的编码方式。 下面是一个可以一次转换多个文件的脚本： mkdir dst for file in $ ( find src - type f ) ; do iconv - f gbk - t utf - 8 $f ile > dst / $ ( basename $f ile ) done 这里要注意的是，由于重定向的目标文件所在的目录必须已经存在，所以需要首先创建目标目录dst，其次find命令输出的文件列表是以当前目录为基准，所以输出目标必须去掉路径部分，也就是\"basename $file\"做的，且源目录src中不能有子目录，否则所有目录下的文件会被摊平放在dst下，如果不同子目录下有同名文件，则最后一个会覆盖前面同名文件的内容。 如果确实需要转换包括子目录的所有文件，可以通过一个临时目录中转，完成该过程的脚本\"myconv.sh\"内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/bin/bash if [[ $# ! = 2 ]] ; then echo Usage: ./myconv.sh src dst exit 1 fi src = $1 dst = $2 mkdir -p tmp cp -r $src tmp/ for file in $( find $src -type f ) ; do #echo iconv from $file to $dst/$file iconv -f gbk -t utf-8 $file > tmp/ $file done mv tmp/ $src $dst rm -rf tmp","tags":"Tech","url":"http://leetschau.github.io/linuxping-tai-shang-zhuan-huan-wen-jian-bian-ma.html","loc":"http://leetschau.github.io/linuxping-tai-shang-zhuan-huan-wen-jian-bian-ma.html"},{"title":"Vim的文件浏览","text":"Vim的Explore指令按照vi的哲学实现了文件浏览器的功能，使用方法是:Explore，或者简写为:E（使用方法详见:h :Explore）。执行该指令后出现当前目录下文件（夹）列表，可以用jk键上下移动光标，\"s\"键改变文件排列顺序，\"r\"键表示\"逆序排列\"，\"/\"键查找文件名，选中文件后Enter键在vim中打开该文件，\"-\"键跳转到上一级目录，\"i\"改变文件显示方式，可以在\"文件名列表\"、\"详细列表\"和\"树形目录\"三者之间切换；\"d\"新建目录，\"R\"重命名文件，\"D\"删除文件，\"x\"执行文件（用来查看pandoc写成的html文件），\"c\"将Explore所在目录设置为vim的当前目录。 :E后面跟路径名表示打开该路径，例如要分析f:\\ghost\\tmpFiles\\MyProj下的Java代码：:E f:\\ghost\\tmpFiles\\MyProj，与\"c\"键配合可以修改vim的工作路径。 使用:Vexplore（简写为:Ve或者:Sex!）可以实现类似于Eclipse的Package Explorer那种左边是文件列表、右边是文件的界面风格，但左边选中文件后回车不会在右边打开，而是直接在左边窗口里打开，所以貌似没什么用，:E就很好了。 相关操作 用:pwd可以查询当前目录，用:lcd 可以改变当前目录； 用:ls可以查看目前已打开的文件（buffer）列表，用:b[N]可以跳到该文件，用:bn打开下一个buffer，详见笔记 buffer-related operations in vim 。 用打开文件命令处理文件夹时会自动进入文件浏览模式，例如\":e .\"是浏览当前目录；","tags":"Tech","url":"http://leetschau.github.io/vimde-wen-jian-liu-lan.html","loc":"http://leetschau.github.io/vimde-wen-jian-liu-lan.html"},{"title":"bat脚本中%~dp0含义解释","text":"在Windows脚本中，%i类似于shell脚本中的$i，%0表示脚本本身，%1表示脚本的第一个参数，以此类推到%9，在%和i之间可以有\"修饰符\"（完整列表可通过\"for /?\"指令查看），表示对%i进行各种处理，其中d表示盘符，p表示除盘符外的路径，n表示文件名，x表示扩展名，f表示全路径（路径+文件名），s表示8.3格式的全路径，修饰符可以组合，所以%~dp0的意思是：脚本本身（%0）的路径（盘符d+路径p）。下面是实例演示，在F:\\ghost\\tmpFiles\\下新建aa.bat文件，内容如下： @echo off echo %%0 = %0 echo %%1 = %1 echo %%2 = %2 echo %%~0 = %~0 echo %%~1 = %~1 echo %%~2 = %~2 echo %%~d0 = %~d0 echo %%~p0 = %~p0 echo %%~dp0 = %~dp0 echo %%~n0 = %~n0 echo %%~x0 = %~x0 echo %%~nx0 = %~nx0 echo %%~f0 = %~f0 echo %%~s0 = %~s0 echo %%~fs0 = %~fs0 echo %%~dp1 = %~dp1 echo %%~nx1 = %~nx1 echo %%~fs1 = %~fs1 echo %%~dp2 = %~dp2 echo %%~nx2 = %~nx2 echo %%~f2 = %~f2 echo %%~s2 = %~s2 echo %%~fs2 = %~fs2 然后加两个附加参数运行这个文件： \"aa.bat f:\\CMDTest.zip f:\\warez\\Develop\\C\\codeblocks-12.11mingw-setup.zip\"，运行结果如下： %0 = aa.bat %1 = f:\\CMDTest.zip %2 = f:\\warez\\Develop\\C\\codeblocks-12.11mingw-setup.zip %~0 = aa.bat %~1 = f:\\CMDTest.zip %~2 = f:\\warez\\Develop\\C\\codeblocks-12.11mingw-setup.zip %~d0 = F: %~p0 = \\ghost\\tmpFiles\\ %~dp0 = F:\\ghost\\tmpFiles\\ %~n0 = aa %~x0 = .bat %~nx0 = aa.bat %~f0 = F:\\ghost\\tmpFiles\\aa.bat %~s0 = F:\\ghost\\tmpFiles\\aa.bat %~fs0 = F:\\ghost\\tmpFiles\\aa.bat %~dp1 = f:\\ %~nx1 = CMDTest.zip %~fs1 = f:\\CMDTest.zip %~dp2 = f:\\warez\\Develop\\C\\ %~nx2 = codeblocks-12.11mingw-setup.zip %~f2 = f:\\warez\\Develop\\C\\codeblocks-12.11mingw-setup.zip %~s2 = f:\\warez\\Develop\\C\\CODEBL~1.ZIP %~fs2 = f:\\warez\\Develop\\C\\CODEBL~1.ZIP 参考 What does %~dp0 mean, and how does it work?","tags":"Tech","url":"http://leetschau.github.io/batjiao-ben-zhong-dp0han-yi-jie-shi.html","loc":"http://leetschau.github.io/batjiao-ben-zhong-dp0han-yi-jie-shi.html"},{"title":"gdb Notes","text":"Ubuntu 11自带gcc和gdb，下面是使用gdb调试代码的过程： 首先写一个简单的hw.c程序： include int main() { char str[] = \"hello, world\"; printf(\"%s\\n\",str); return 0; } 编译并运行源代码（gcc指令必须有-g选项，不能加-Wall选项，否则无法调试）： chad@ubuntu:~/Documents \\( gcc -g hw.c -o hw chad@ubuntu:~/Documents\\) ./hw hello, world 用gdb调试编译出来的文件： chad@ubuntu:~/Documents$ gdb hw GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08 ... (gdb) b 3 Breakpoint 1 at 0x8048449: file hw.c, line 3. (gdb) r Starting program: /home/chad/Documents/hw Breakpoint 1, main () at hw.c:3 3 char str[] = \"hello, world\"; (gdb) p str $1 = \"\\000\\364\\217*\\000U<\\026\\000\\231\\204\\004\\b\" (gdb) s 4 printf(\"%s\\n\",str); (gdb) p str $2 = \"hello, world\" (gdb) p str[1]='y' $3 = 121 'y' (gdb) p str $4 = \"hyllo, world\" (gdb) p $2 $5 = \"hello, world\" (gdb) c Continuing. hello, world [Inferior 1 (process 3345) exited normally] (gdb) q chad@ubuntu:~/Documents$ 上述操作过程，代码前面的标号是行号。用户输入的指令，\"b 3\"表示在第3行打断点，r表示run，p表示print，s表示step（即step in），这里也可以用n（next，即step over），c表示continue，q表示quit。可以看到step指令之前打印str的值是一个随机值（因为还没有赋值），step之后（到第4行）就有了值； p指令除了可以显示程序变量值，还可以修改变量值，如上面的p str[1]='y'； gdb每次输出都被保持到了一个格式为$n的变量中，后面可以再引用这个变量，如上面的p $2； 可以用l(list)指令打印出完整的源代码。 C++ $ g++ -g srcfile.cc -o rr $ gdb rr $ l 这里\"-g\"选项是必须的，否则gdb无法得到原文件信息。 Windows平台 Code::Blocks 是目前唯一实现了断点调试的Windows平台上C开发环境（它本身是跨平台的），带MinGW安装包100MB，不带MinGW的20MB多，比较符合轻量级的要求； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/gdb-notes.html","loc":"http://leetschau.github.io/gdb-notes.html"},{"title":"Pandoc笔记","text":"On Windows 安装：使用管理员权限运行PowerShell并执行 choco install pandoc ； 使用： pandoc frnote.md -o frnote.docx Pandoc根据输入输出文件扩展名确定格式，不需要通过参数指定。 On Linux Mint 17上安装pandoc: sudo aptitude install pandoc ; 将markdown文件转为MS Word docx文件： pandoc -f markdown -t docx -o 开发者手册.docx dev-manual.md ; Pandoc的多级列表 今天在用markdown写多级列表的时候发现markdown不支持多级列表， 找了一番发现 Pandoc 是个比较好的替代工具。 功能强（支持多级列表，配上插件可以生成pdf和docx文件），开源（GPL）。 Hello World Demo (multi-level ordered list) 下载Pandoc for Windows； 写一个简单的示例demo.txt，内容如下： title one i. sub one a. sub sub one a. sub sub two i. sub two 1. title two 1. title three i. sub three one i. sub three two demo.txt所在路径下运行\"pandoc -o demo.html demo.txt\"，会在当前目录下生成demo.html文件，效果如下： title one sub one sub sub one sub sub two sub two title two title three sub three one sub three two 采用pandoc语法写多级列表的格式是：第2级列表行首缩进4格，以\"i. \"开头，第3级多加4个空格，以\"a. \"开头。 Multi-level bullet list demo.txt内容如下： this is list line 1 this is sub list 1 this is sub sub list 1 this is sub list 2 this is list 2 输出结果： this is list line 1 this is sub list 1 this is sub sub list 1 this is sub list 2 this is list 2 注意： GBK编码的文件中如果有中文，pandoc会报错退出，如果一定要显示中文，需要保存为UTF-8格式。","tags":"Tech","url":"http://leetschau.github.io/pandocbi-ji.html","loc":"http://leetschau.github.io/pandocbi-ji.html"},{"title":"比较不同文件夹下源代码的内容差异","text":"场景 现有两个源代码文件夹：\"d:\\workspace\\GoduServer3.0\\src\"和 \"d:\\workspace\\Godu_Server_2.3\\src\"，分别包含多级子目录， 需要比较所有子目录中文件内容的差异（不能只比较文件的大小和修改时间）。 Linux diff -rq, see \" Diff Notes \"; 解决方案 Windows TotalCmd 分别打开要比较的两个文件夹，[Commands -> Synchronize dirs] (Shift+F12); 取消\"Asymmetric\"，选中\"subdirs\", \"by content\" and \"ignore date\"，点击\"compare\"; TotalCmd会列出所有不同的文件，要比较不同的文件， 选中然后右键 -> Compare Left & Right (Ctrl+F3); 根据文件内容确定同步的方向，点击\"Synchronize\"； UltraCompare 用 UltraCompare Pro 的绿色版， 解压后在uc.exe所在目录下运行： uc -d -r -ne -dmf -B d:\\workspace\\GoduServer3.0\\src d:\\workspace\\Godu_Server_2.3\\src 指令格式：uc [options] dir1 dir2 选项含义： -d：文件夹比较模式（而不是文本比较）； -r：包含所有子文件夹； -ne：只显示不同的文件； -dmf：文本比较模式（逐字节比较，另外还有：-dmb：基本比较模式，只比较文件大小和日期；-dms：智能比较模式） -B：文本比较时忽略空行； 详见UltraCompare帮助文档\"命令行选项\"一节。 UC支持界面操作，上面各个选项在工具栏上都有图标， 选中后点击两个路径输入框中间的绿色三角按钮就开始比较了（Ctrl+F5）， 比较完之后可以用工具栏上的各种合并按钮进行合并操作。 备选方案 免费软件FreeFileSync也具备比较文件内容和子文件夹循环比较的能力， 但只能找到不用的文件，不能对选定的文件进行文本比较。","tags":"Tech","url":"http://leetschau.github.io/bi-jiao-bu-tong-wen-jian-jia-xia-yuan-dai-ma-de-nei-rong-chai-yi.html","loc":"http://leetschau.github.io/bi-jiao-bu-tong-wen-jian-jia-xia-yuan-dai-ma-de-nei-rong-chai-yi.html"},{"title":"关于Algorithm in Nutshell源代码","text":"获取源码包 \"Algorithm in Nutshell\"的源码包 ADK-1.0.zip 在这本书 主页 上\"Download Example Code\"页面的Releases目录中。 构建源码 构建ADK需要JDK6或者7，且源代码的文件编码为UTF-8，在Windows下编译失败，在47上写了一个脚本： #!/bin/sh JAVA_HOME=/opt/jdk1.6.0_35 PATH=$JAVA_HOME/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin export PATH ./no_ant.sh 然后运行这个脚本，编译出dist目录及下面的两个jar文件：ADK-1.0-ExamplesAndFigures.jar和ADK-1.0.jar。 验证构建结果 将dist目录拷贝回PC机上，运行\"java -cp dist/ADK-1.0-ExamplesAndFigures.jar algs.chapter3.table1.Main\"（参见源码包根目录下的Readme文件） 得到结果，证明编译成功。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-algorithm-in-nutshellyuan-dai-ma.html","loc":"http://leetschau.github.io/guan-yu-algorithm-in-nutshellyuan-dai-ma.html"},{"title":"Notes about \"Seven Languages in Seven Weeks\"","text":"day 1 Print the string \"Hello, world.\" puts \"Hello, world.\" For the string \"Hello, Ruby,\" find the index of the word \"Ruby.\" \"Hello, Ruby.\".index(\"Ruby\") Print your name ten times. 10.times{puts \"Li Chao\"} Print the string \"This is sentence number 1,\" where the number 1 changes from 1 to 10. (0..10).each do |i| puts \"This is sentence number #{i}\" end or: for i in 0..10 puts \"This is sentence number #{i}\" end Run a Ruby program from a file. save ex.rb with: for i in 0..10 puts \"This is sentence number #{i}\" end then run: jruby ex.rb Bonus problem: If you're feeling the need for a little more, write a program that picks a random number. Let a player guess the number, telling the player whether the guess is too low or too high.(Hint: rand(10) will generate a random number from 0 to 9, and gets will read a string from the keyboard that you can translate to an integer.) target = rand(10) puts \"Please input a number between 0~10:\" i = gets.chomp.to_i while i != target if i<target puts \"lower\" else puts \"higher\" end i = gets.chomp.to_i end puts \"You got it: #{i}\" day 2","tags":"Tech","url":"http://leetschau.github.io/notes-about-seven-languages-in-seven-weeks.html","loc":"http://leetschau.github.io/notes-about-seven-languages-in-seven-weeks.html"},{"title":"关于Java的国际化","text":"见Cay S. Horstmann: \"Core Java: Advanced Features\", chapter 5.","tags":"Tech","url":"http://leetschau.github.io/guan-yu-javade-guo-ji-hua.html","loc":"http://leetschau.github.io/guan-yu-javade-guo-ji-hua.html"},{"title":"About Nested Class, Inner Class and Anonymous Class","text":"Concept about nested class: Nested Classes Anonymous Classes explains how to construct a inner class with \"instance initializer\". See a more detailed explanation in section 13.2 & 13.3 of Walter Savitch: \"Absolute Java\". \"Item 22: Favor static member classes over nonstatic\" in Joshua Bloch: \"Effective Java\". \"Inner Classes\" in section 6.6 of Jonathan Knudsen: \"Learning Java\", 3rd Edition. Book III, chapter 7 \"Using Inner Classes\" in Doug Lowe: \"Java All-In-One Desk Reference For Dummies\", 2nd Edition. Section \"Inner Classes\" of Bruce Eckel: \"Thinking in Java\" explains the relationship between inner classes and closure, callbacks. Chapter 6 \"Interfaces and Inner Classses\" in Cay S. Horstmann: \"Core Java: Fundamentals\".","tags":"Tech","url":"http://leetschau.github.io/about-nested-class-inner-class-and-anonymous-class.html","loc":"http://leetschau.github.io/about-nested-class-inner-class-and-anonymous-class.html"},{"title":"Ruby笔记","text":"Windows平台上的Ruby编译器首推 RubyInstaller 的7z绿色版，其次是exe安装包，最后还可以选择 JRuby ，需要jre才能运行，Windows上有zip和exe安装包两种方式供选择，Linux上有gz包。RubyInstaller的运行速度远高于JRuby。 跳出嵌套层次 030后面的数字是嵌套层次，用end可以跳到上一级。 irb(main):030:2> end irb(main):030:1> Ruby语言模型(引自\"3.2 The Ruby Universe\" of Brian Marick: \"Everyday Scripting with Ruby\")： When you run the inventory.rb script, you create a little Ruby universe. That universe, in essence, contains only three kinds of things: nouns, verbs, and names. The nouns are usually called objects. They are the \"things\" in the Ruby universe. Objects just sit there until they're told to do something. That's where the verbs come in. All the verbs in the Ruby universe are imperative: verbs like \"sit!\" and \"stay!\" and \"roll over!\" In Ruby, these verbs are called messages, and telling an object to do some-thing is called sending a message.","tags":"Tech","url":"http://leetschau.github.io/rubybi-ji.html","loc":"http://leetschau.github.io/rubybi-ji.html"},{"title":"Windows Server FTP工具","text":"试用了 freeFTPd 和 mini sftp server on CoreFTP 。 freeFTPd的ftp server启动并上传/下载成功，sftp server能启动，也能接收用户登录，但无法上传/下载文件。 mini sftp server是一个绿色文件，只要在启动界面上配好用户名、密码、端口即可，非常方便，只能配一个用户，但这个用户可以与server建立多个连接，用ftp客户端上传/下载正常，但用Ant的scp指令上传文件时，在连接server时僵死。 总结：freeFTPd需要安装，还会生成一个服务，对系统影响比较大，如果只是用sftp做部署时上传的话，mini sftp够用了。 另：freeSSHd启动后用户无法登录，Windows对SSH以及SFTP的支持不好，需要测SSH服务的时候最好在Linux server上测。","tags":"Tech","url":"http://leetschau.github.io/windows-server-ftpgong-ju.html","loc":"http://leetschau.github.io/windows-server-ftpgong-ju.html"},{"title":"VirtualBox使用笔记","text":"版本：VirtualBox 4.2.4； VirtualBox是开源软件（GPL），其安装文件只有90多MB，比vmware小多了； 支持的操作系统很全面，Windows, Linux, Max OS X, Solaris, BSD, IBM OS/2, DOS ... 需要在全局设置中预先指定好虚拟电脑的位置，而不是像vmware那样安装虚拟机的时候再设置； 加载虚拟光驱盘片（如iso文件）和USB设备是虚拟机窗口中设定的； 中文界面的翻译质量令人满意； 主程序退出后不会驻留内存（如vmware-tray.exe），更轻量级； 初次使用整体感觉很好，容易上手； Shared Folders 首先要在虚拟机的Settings->Shared folders中添加一个shared folder，然后启动虚拟机，安装Guest Additions（Devices -> Install Guest Additions） WinXP虚拟机在网络邻居里可以看到Virtualbox shared folders； Ubuntu虚拟机在/media下可以看到sf_xxx目录，这就是shared folder了，用root用户可以访问此目录，从中拷贝文件； 快捷键的使用方法 VirtualBox管理窗口和各虚拟机是不同的窗体（而不像vmware那样是不同的标签），启动虚拟机后管理界面就可以关闭了。对虚拟机的操作可以使用快捷键，例如关闭虚拟机的快捷键是Ctrl+H（必须是右边的Ctrl键，因为这个快捷键实际上是Host（也叫\"热键\"）+H，而VirtualBox默认的Host键是右边的Ctrl键，可以在管理窗体主菜单【管理->全局设定->热键】中修改），在管理窗体主菜单【控制->退出->正常关机】后面可以看到快捷键定义，见下图。这样关闭虚拟机有3种方法，一种是在虚拟机里执行关机指令，另一种是在管理窗体上执行上面的菜单项，最后一种方法是在虚拟机窗体上右Ctrl+H，最后这种方法适用于管理界面已经关闭的情况下控制虚拟机。 命令行用法 假设通过图形界面建好了一个虚拟机叫uServer1204。 完全命令行 适用于启动只有命令行界面的虚拟机，例如Ubuntu Server，用VBoxHeadless.exe的startvm命令（vrde是远程桌面，因为没有图形界面，也就不需要启动远程桌面了）： E : \\ MyDoc \\ ahkFiles > \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxHeadless.exe\" --startvm uServer1204 --vrde off Oracle VM VirtualBox Headless Interface 4 . 2 . 8 ( C ) 2008 - 2013 Oracle Corporation All rights reserved . 然后就可以用\"ssh user@ip\"登录这个虚拟机了，如果知道虚拟机的hostname，可以用\"ssh user@hostname\"连接，这样避免了连接前查IP地址的麻烦。需要关闭虚拟机时，新开一个命令行界面运行VBoxManage controlvm poweroff命令： E : \\ MyDoc \\ ahkFiles > \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" controlvm uServer1204 poweroff 0 % ... 10 % ... 20 % ... 30 % ... 40 % ... 50 % ... 60 % ... 70 % ... 80 % ... 90 % ... 100 % 这种方法启动Ubuntu Server大概消耗150~200MB左右内存，启动速度比较快，不占用单独的窗口（ConEmu的一个标签页），是启动Server的最佳方法，缺点是看不到启动过程，只能根据宿主机的内存和CPU消耗推断虚拟机是否启动，如果启动后一直连不上，可以用图形界面（或者下面介绍的方法）启动虚拟机，查看错误信息。 命令行启动图形界面 适用于启动有图形界面的虚拟机。用VBoxManage.exe的list vms子命令查看已有的虚拟机： E : \\ MyDoc \\ ahkFiles > \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" list vms \"Ubuntu11.10\" { bfae3b28 - 7063 - 4 c14 - ae3f - 47 a46eb894be } \"uServer1204\" { faca3e8a - d27e - 4 ca4 - bb92 - 3 b03d07a753c } \"GameXP\" { 609 dfe66 - 6554 - 40 dc - a2af - 7526962 bc6bb } 然后用startvm和controlvm poweroff两个子命令来启动和关闭虚拟机： E :\\ MyDoc \\ ahkFiles > \" C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe \" startvm uServer1204 Waiting for VM \" uServer1204 \" to power on ... VM \" uServer1204 \" has been successfully started . E :\\ MyDoc \\ ahkFiles > \" C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe \" controlvm uServer1204 poweroff 0 % ... 10 % ... 20 % ... 30 % ... 40 % ... 50 % ... 60 % ... 70 % ... 80 % ... 90 % ... 100 % 试验发现启动和关闭速度高于图形界面，另外命令行操作可以实现一定程度的自动化（例如通过autohotkey脚本用快捷键启动和关闭虚拟机）。 用VBoxManage.exe --help（或者google \"virtualbox VBoxManage\"，或者查看随机文档VirtualBox-4.2.4-UserManual.pdf第8章）查看详细使用方法。 Clone and Portability // 2014-7-2更新 VirtualBox的Clone分为full clone和linked clone两种方式，前者的优点是源的完全拷贝，可以独立地运行，由于它的虚拟磁盘包括VM的所有信息，比较费磁盘空间，后者正好相反，它的虚拟盘只保存相对于源盘的增量部分，所以节省空间，但必须与源处于同一主机上。 VirtualBox目前支持的导入/导出格式是ova文件，结合这两点，在Linux上使用Windows虚拟机的方法是： 创建一个干净的Windows虚拟机，将其导出为ova格式文件保存； 在需要使用Windows的主机上，安装VirtualBox和对应版本的Extension Pack（否则虚拟机无法使用USB设备），导入这个ova文件，形成一个基准系统，例如名为Win7Base； 为这个基准系统做Linked Clone：在Win7Base上右键->Clone，选择Linked clone； 注意不要在Win7Base上安装软件，它只作基准系统，clone生成的VM才是工作VM，可以为Win7Base制作多个clone，比如一个主要做文档处理，就只安装Office，另一个做C#开发，则安装Visual Studio，当软件安装好后别忘了制作一个snapshot，这样当软件出问题时无需重装，只要简单地\"Restore Snapshot\"就OK了，然后导出为ova文件保存；","tags":"Tech","url":"http://leetschau.github.io/virtualboxshi-yong-bi-ji.html","loc":"http://leetschau.github.io/virtualboxshi-yong-bi-ji.html"},{"title":"Installation of Agilefant & Icescrum","text":"install agilefant modify root password: 1. unzip mysql-5.5.28-win32.zip to d:/apps 1. D:\\Apps\\mysql-5.5.28-win32\\bin>mysqld -u root --skip-grant-tables 1. in a new cmd window: D:\\Apps\\mysql-5.5.28-win32\\bin>mysql 1. mysql> use mysql; 1. mysql> UPDATE user SET Password = PASSWORD('mypwd') WHERE User = 'root'; verify password: 1. D:\\Apps\\mysql-5.5.28-win32\\bin>mysql -u root -p 1. input password: mypwd 1. mysql> CREATE DATABASE agilefant; 1. mysql> flush privileges; 1. mysql> GRANT ALL ON agilefant.* to agilefant@localhost IDENTIFIED BY 'zhangjingg'; 1. mysql> exit; 1. D:\\Apps\\mysql-5.5.28-win32\\bin>mysql -u agilefant -p 1. mysql> use agilefant; 1. mysql> source f:/ghost/tempFiles/agilefant-3.0.1/create-db.ddl; d:\\Apps\\apache-tomcat-7.0.32\\bin\\startup.bat http://localhost:8080/ install icescrum follow: Simple Installation","tags":"Tech","url":"http://leetschau.github.io/installation-of-agilefant-icescrum.html","loc":"http://leetschau.github.io/installation-of-agilefant-icescrum.html"},{"title":"Android Hello World程序开发过程","text":"按照 Building Your First App ，详细过程如下： 安装SDK（如果网速慢，需要用离线安装的方法，见笔记 离线安装Android SDK的方法 ）； 采用命令行开发方法（不用装Eclipse插件ADT）； \\(SDK_HOME/tools下运行android list targets（\\) SDK_HOME=C:\\Program Files\\Android\\android-sdk）； $SDK_HOME/tools下运行\"android create project --target 2 --name MyFirstApp --path e:/MyDoc/AndroidEx/MyFirstApp --activity MainActivity --package com.example.myfirstapp\"； 生成一个虚拟设备：$SDK_HOME/tools下运行\"android avd\"，Name: ChadAVD, Target: Android 4.1.2, CPU/ABI: ARM; 启动此设备：Android Virtual Device Manager中选中\"ChadAVD\"，点\"start\"； 修改应用界面：e:\\MyDoc\\AndroidEx\\MyFirstApp\\res\\layout\\main.xml修改其中\"android:text\"的值为\"你好安卓！\"； 编译应用：项目根目录（e:/mydoc/androidEx）下运行\"ant debug\"; 安装应用：E:\\MyDoc\\AndroidEx\\MyFirstApp>\"c:\\Program Files\\Android\\android-sdk\\platform-tools\\adb.exe\" install bin/MyFirstApp-debug.apk； 验证安装成功：在应用列表里可以看到MainActivity，点击，可以看到\"你好安卓！\"； 如果修改了源代码，需要在AVD里卸载MainActivity，然后再用adb install安装，否则报\"App already exists\"错误。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/android-hello-worldcheng-xu-kai-fa-guo-cheng.html","loc":"http://leetschau.github.io/android-hello-worldcheng-xu-kai-fa-guo-cheng.html"},{"title":"演示切换屏幕控制序列的程序","text":"\\033[?1049h和\\033[?1049l的功能是切换屏幕（见笔记 关于ansi转义序列控制符 ），下面的代码是一个Telnet Server的一部分，用Telnet Client连上后，先收到一个\"hello\",然后切换到一个新屏幕上再收到一个\"hello\"，然后切换回原来的屏幕，并断开连接。 SocketAddress clientAddress = sock.getRemoteSocketAddress(); // sock is the incoming socket logger.info(\"Accept client from \" + clientAddress); Thread.currentThread().setName(this.getClass().getName()); InputStream is = sock.getInputStream(); OutputStream os = sock.getOutputStream(); byte[] helloMsg = \"hello\".getBytes(); os.write(helloMsg); os.flush(); Thread.sleep(2000); byte[] switchScreen = { 0x1b, 0x5b, 0x3f, 0x31, 0x30, 0x34, 0x39, 0x68 }; // \\033[?1049h, switch to a new screen os.write(switchScreen); os.flush(); Thread.sleep(2000); os.write(helloMsg); os.flush(); Thread.sleep(2000); byte[] switchBack = { 0x1b, 0x5b, 0x3f, 0x31, 0x30, 0x34, 0x39, 0x6c }; // \\033[?1049l, switch back to original screen os.write(switchBack); os.flush(); sock.close();","tags":"Tech","url":"http://leetschau.github.io/yan-shi-qie-huan-ping-mu-kong-zhi-xu-lie-de-cheng-xu.html","loc":"http://leetschau.github.io/yan-shi-qie-huan-ping-mu-kong-zhi-xu-lie-de-cheng-xu.html"},{"title":"Shortcut of Vimium","text":"Navigating the page ?: Show the help dialog (the same with google reader) j: Scroll down k: Scroll up h: Scroll left l: Scroll right gg: Scroll to the top of the page G: Scroll to the bottom of the page u: Scroll a half page up d: Scroll a half page down Manipulating tabs K or gt: Go one tab right J or gT: Go one tab left t: Create new tab x: Close current tab X: Restore closed tab Open something f: Open a link in the current tab F: Open a link in a new tab o: Open URL, bookmark, or history entry O: Open URL, bookmark, or history entry in a new tab Search & Find /: Enter find mode n: Cycle forward to the next find match N: Cycle backward to the previous find match Navigating history H: Go back in history L: Go forward in history Miscellaneous r: Reload the page yy: Copy the current URL to the clipboard yf: copy a link url to the clipboard gi: focus the first (or n-th) text input box on the page gu: go up one level in the URL hierarchy gf: Cycle focus to the next frame ( you can use this to get out of text input box in a web page) i: Enter insert mode gs: View page source Reference: https://github.com/philc/vimium For Firefox, the VimFx is recommended. The \"Vimium\" is poor in functions, which not support \"go to next/previous page\" and some other important shortcuts.","tags":"Tech","url":"http://leetschau.github.io/shortcut-of-vimium.html","loc":"http://leetschau.github.io/shortcut-of-vimium.html"},{"title":"Gradle使用Ivy库做产品构建","text":"测试过程基于Gradle 1.2用户手册（$GRADLE_HOME/docs/userguide/userguide.pdf）7.2节； 使用的实例：$GRADLE_HOME/samples/java/quickstart cd $ GRADLE_HOME / samples / java / quickstart cat << EOF > build . gradle repositories { ivy { url \"e:/mydoc/localRepo\" layout 'pattern' , { artifact \"[organisation]/[module]/[type]s/[artifact]-[revision].[ext]\" ivy \"[organisation]/[module]/[type]s/[artifact]-[revision].xml\" } } } EOF gradle build : compileJava : processResources : classes : jar : assemble : compileTestJava : processTestResources : testClasses : test : check : build BUILD SUCCESSFUL Total time : 5.058 secs 参考： How to specify a relative path to the local Ivy repo in Gradle?","tags":"Tech","url":"http://leetschau.github.io/gradleshi-yong-ivyku-zuo-chan-pin-gou-jian.html","loc":"http://leetschau.github.io/gradleshi-yong-ivyku-zuo-chan-pin-gou-jian.html"},{"title":"思维导图软件比较","text":"评价指标 可添加图标 自定义快捷键 不同层次的标题不同颜色 备选软件 VYM Install View Your Mind with sudo apt install vym on Ubuntu 14.04. The preferred lightweight solution on Ubuntu system. Mindjet 包括MindManager和Connect（用于多人协同的云应用）两个组件，收费，需要安装， 操作方便，帮助完善，有多人合作机制，与Office协作功能强，Gallery中图标比较全， 可以自定义图例（Legend）的说明文字，不能导入/导出为Freemind格式， 只能与Office的Project和Word互相转换； XMind 免费 + 收费，需要安装，界面美观（基于Eclipse平台），操作方便，Gallery收费， 但免费的图标基本够用了；图例文字不能自定义（硬伤），可以导入/导出Freemind格式文件， 付费版可以导入/导出MindManager文件以及PDF，MS Office Word和PowerPoint文件（硬伤）； Freemind 开源 Blumind 免费，绿色，运行、启动速度快，仅提供基本功能，可以导出为Freemind文件格式，但注释丢失； Edraw Mind Map 绿色，免费，启动和响应速度慢，操作不方便。自定义快捷键， 文件 -> 选项 -> Customize -> Keyboard Customize -> Category: \"开始\"，Commands下: \"插入标题\"设为Alt+Space； \"插入子标题\"设为Alt+X； \"选择\"设为Enter（回车键）； 总结：考虑到功能、易用性，以及思维导图作为Word文档的一部分的应用场景很多， MindManager显然是唯一选项。","tags":"Tech","url":"http://leetschau.github.io/si-wei-dao-tu-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/si-wei-dao-tu-ruan-jian-bi-jiao.html"},{"title":"在Windows上部署Telnet Server","text":"系统：Windows Server 2008 过程：参考 How to configure a Telnet Server with Windows Server 2008 注意：Server Manager -> Configuration -> Local Users and Groups中添加Telnet Client用户；","tags":"Tech","url":"http://leetschau.github.io/zai-windowsshang-bu-shu-telnet-server.html","loc":"http://leetschau.github.io/zai-windowsshang-bu-shu-telnet-server.html"},{"title":"用反射机制在运行时创建对象并执行方法","text":"根据类名创建对象 要求：根据运行时得到的类名（字符串）创建对象。 创建的对象没有参数 Class<?> clazz = Class.forName(\"com.foo.BarClass\"); Object date = clazz.newInstance(); 创建对象需要参数 Class<?> clazz = Class.forName(\"com.foo.MyClass\"); Constructor<?> constructor = clazz.getConstructor(String.class, Integer.class); Object instance = constructor.newInstance(\"stringparam\", 42); 参考： is there a way to instantiate a class by name in java? 执行方法调用 对于实例方法，也就是非static方法，用\"obj.method()\"方式调用，获得对象后可以按普通对象执行；对于静态（static）方法，需要用\"ClassName.method()\"方式调用，需要用到Java反射机制中的Method类，调用方法如下： String className = \"edu.princeton.cs.algs4.Selection\"; Class<?> clazz = Class.forName(className); System.out.println(\"Loaded class: \" + clazz); Method m = clazz.getDeclaredMethod(\"meth\", new Class[] { int.class, int.class }); System.out.println(\"Got method: \" + m); Object returnValue = m.invoke(null, 1, 5); // equals to \"Selection.meth(1,5);\" System.out.println(\"Return value of this method: \" + returnValue); 被调用的Selection.meth()方法： public static int meth(int i, int j) { System.out.println(\"result=\" + (i + j + 10)); return i + j + 10; } 这里要注意的是： className必须是包含包名的full name， 对于静态方法，m.invoke的第一个参数是null，如果是实例方法，第一个参数是执行这个方法的对象obj； 如何调用参数是数组的方法 例如有下面一个方法： public static void sort(Comparable[] a) { int N = a.length; for (int i = 0; i < N; i++) { for (int j = i; j > 0 && less(a[j], a[j-1]); j--) { exch(a, j, j-1); } assert isSorted(a, 0, i); } assert isSorted(a); } 用反射调用这个方法要注意参数列表的写法： Double[] a = new Double{1000]; Class<?> clazz = Class.forName(className); Method sortMethod = clazz.getDeclaredMethod(\"sort\", Comparable[].class); Object[] param = { a }; sortMethod.invoke(null, param); 最后一行如果写为invoke(null, a)会报\"wrong number of arguments error\"，原因是第3行的声明表明sort方法的参数只有一个，但Method.invoke方法的声明是： Object invoke(Object obj, Object... args) 实际上就是invoke(Object obj, Object[] args)，这样invoke(null, a)方法会给sort方法注入1000个参数（而不是a这个数组本身），解决方法就是专门声明param={a}，然后invoke(null, param)。 参考：http://stackoverflow.com/questions/8189782/wrong-number-of-arguments-error-when-invoking-a-method","tags":"Tech","url":"http://leetschau.github.io/yong-fan-she-ji-zhi-zai-yun-xing-shi-chuang-jian-dui-xiang-bing-zhi-xing-fang-fa.html","loc":"http://leetschau.github.io/yong-fan-she-ji-zhi-zai-yun-xing-shi-chuang-jian-dui-xiang-bing-zhi-xing-fang-fa.html"},{"title":"使用scp命令实现自动部署","text":"scp指令通过服务器上的SSH账号上传/下载文件，相当于基于SSH的FTP。下面ant脚本将打包好的目录上传到测试服务器上，省去了手工上传、解压、配置的麻烦： \\({deploy_user}:\\) {deploy_pwd}@ \\({deploy_host}:\\) {deploy_dir}\" trust=\"true\"> 注： Ant的classpath中要包含jsch-0.1.31.jar，否则scp指令会运行失败； 其中的trust=\"true\"不可省略，否则报\"reject HostKey\"错误； scp指令将fileset中的所有目录和文件（不包含fileset目录自身）拷贝到todir目录下，todir必须已经存在，其中重名的目录和文件将被覆盖； 不要忘写主机地址和目录之间的冒号； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/shi-yong-scpming-ling-shi-xian-zi-dong-bu-shu.html","loc":"http://leetschau.github.io/shi-yong-scpming-ling-shi-xian-zi-dong-bu-shu.html"},{"title":"Install Ubuntu Server on PC with USB disk","text":"使用的工具： Universal-USB-Installer-1.9.1.2.exe ； 4G容量的U盘一个； ubuntu-12.04.1-server-amd64.iso； 安装过程 用Universal-USB-Installer-1.9.1.2.exe制作一个ubuntu server 12.04的安装盘； 安装类型选\"Ubuntu Server 12.04 Installer\"； 用制作好的U盘启动计算机，按照屏幕提示安装即可。 注意事项 安装过程中需要拔掉网线（刚才未拔网线情况下安装grub这一步报 \"The 'grub-pc' package failed to install into /target/ ...\"错误，安装过程停止， 拔掉网线，返回安装\"base system\"这一步重新安装一遍，grub安装成功。） 安装完毕后启动系统时需要插上网线，否则启动过程会停在\"config network\"这一步； 验证 可以用\"ssh chad@10.31.1.34\"连接Ubuntu Server； 用sudo passwd创建root用户密码，这次设置的密码是root； 安装组件时选择OpenSSH和Tomcat Server，安装完后可看到Java版本是1.6.22，Python版本是2.7.3； 关闭计算机 以root用户执行：shutdown -P now 其他 刚才安装时硬盘上已有3个NTFS分区，在\"Partition Policy\"中选\"Use Entire Partition\"， 可以保留NTFS分区，如果选\"Entire Disk\"，则整个磁盘会被格式化。","tags":"Tech","url":"http://leetschau.github.io/install-ubuntu-server-on-pc-with-usb-disk.html","loc":"http://leetschau.github.io/install-ubuntu-server-on-pc-with-usb-disk.html"},{"title":"Google & Chrome notes","text":"Page zoom in/out: Ctrl -/= Use chrome without IE proxy: add \"-no-proxy-server\" argument after chrome.exe(Windows)/chromium-browser(Ubuntu) Focus between page, adress bar & bookmark bar: F6 (frequently used to input a new url in a tab) Search tips","tags":"Tech","url":"http://leetschau.github.io/google-chrome-notes.html","loc":"http://leetschau.github.io/google-chrome-notes.html"},{"title":"安装Linux系统时的磁盘空间分配方法","text":"主分区50GB（使用ext4格式），一个swap分区，大小为（内存+2）GB，但当内存小于2GB时，swap分区设为（内存*2）GB。 ext4是ext3的升级版。","tags":"Tech","url":"http://leetschau.github.io/an-zhuang-linuxxi-tong-shi-de-ci-pan-kong-jian-fen-pei-fang-fa.html","loc":"http://leetschau.github.io/an-zhuang-linuxxi-tong-shi-de-ci-pan-kong-jian-fen-pei-fang-fa.html"},{"title":"SVN服务搭建笔记","text":"Windows平台 SVN官网 只提供源代码，不提供binary安装包，但 Subversion Windows Installer 是一个不错的windows安装包站点，从上面下载zip版（svn-win32-1.7.6.zip），里面的svn.exe是客户端，要图形界面则可以使用TortoiseSVN-1.7.9.23248-win32-svn-1.7.6.msi（来自 TortoiseSVN ），安装过程如下： 解压服务端包； 用\"svnadmin create e:\\svnRepo\"在svnRepo下创建一个代码仓库； 修改e:\\svnRepo\\conf中的svnserve.conf: 取消注释\"password-db = passwd\"这一行 在e:\\svnRepo\\conf\\passwd文件中添加用户和对应密码； 用\"svnserve -d -r e:\\svnRepo\"启动svn服务器，或者用\"start /min cmd /c svnserve -d -r e:\\svnRepo\"将其以单独窗口的方式启动； 验证 运行 svn ls svn://localhost 查看库中代码目录和文件， 或者加-R，列出所有子目录， 或者安装tortoiseSVN，启动tortoiseSVN浏览器，在地址里写\"svn://10.31.1.189\"； 用 svn ls 选择好目录后，用 svn co 检出一个目录，在目录中添加一个测试文件\"test\"， 然后 svn add test ， svn ci -m \"test commit\" ，客户端提示输入用户名和密码， 输入在$SVN_REPO/conf/passwd中配置的用户名密码，完成提交。 说明 不需要安装apache httpd，svn服务的默认监听端口是3690，可以用netstat指令验证启动是否成功； \"svnserve -d\"服务由于系统重启或者其他原因停止后，可以用该指令重启SVN服务，库中的记录在重启后保持有效； 参考 Subversion快速入门教程 。 另外下载了 silk Svn ，发现只有客户端，放弃。 2014-4-24更新 在Windows Server 2003上Apache + Subversion服务中添加一个新库： K:\\svn>\"c:\\Program Files\\Subversion\\bin\\svnadmin.exe\" create GFrame Add the following lines in \"c:\\Program Files\\Apache Group\\Apache2\\svnaccessfile\": gframe-dev=... [gframe:/ ] @gframe-dev = rw @QA = rw @Manager = r bvt_common = r * = Note that group definition \"gframe-dev=...\" MUST before ALL the repo definitions, or the whole Subversion service will down because of the parse error of this access file. When you modify the access file to right format, you can access svn service at once without restart Apache service. Now you can access the new repo with URL \"http://10.0.2.59:8118/svn/gframe\" in TortoiseSVN, add some basic folders, such as \"Development-Area\", \"Test-Area\", etc. Ubuntu sudo apt-get install subversion sudo svnadmin create {repo_path} nohup svnserve -d -r {repo_path} 1>{log_path} 2>{log_path} & CentOS 安装后连接不上，且机器可以ping其他机器，但无法连接internet，放弃。 安装subversion-1.7.4-0.1.el6.rfx.i686.rpm（来自 Apache Subversion官网 ）； 创建代码仓库：svnadmin /home/chad/Documents/svnRepo 修改/home/chad/Documents/svnRepo/conf中的svnserve.conf和passwd两个文件； 更改用户仓库的写权限以便用户提交代码：chown -R chad:chad /home/chad/Documents/svnRepo 客户端：在当前目录下检出代码仓库：新建一个目录作为working dir，在下面执行：svn co svn://localhost 新建一个文件aa； svn add aa svn ci -m \"comments for this check in\" 遗留问题：只能在本机使用，由于虚拟机NAT方式，无法通过外部svn客户端连接；","tags":"Tech","url":"http://leetschau.github.io/svnfu-wu-da-jian-bi-ji.html","loc":"http://leetschau.github.io/svnfu-wu-da-jian-bi-ji.html"},{"title":"Linux系统CPU信息查询方法","text":"lscpu 运行 lscpu 命令，输出中，\"CPU(s)\"是逻辑CPU数，\"Socket(s)\"是物理插槽数，\"Core(s) per socket\"是每颗CPU的核数，\"Thread(s) per core\"是每个核的线程数，一般是1或者2，后者叫做\"超线程\"。 逻辑CPU数是物理插槽数、核数和每核线程数3者的乘积。 平常所说的\"CPU个数\"，就是指逻辑CPU数，也就是\"CPU(s)\"的值。 cat /proc/cpuinfo 下面是一个实例： processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 26 model name : Intel ( R ) Xeon ( R ) CPU X5550 @ 2.67 GHz stepping : 5 cpu MHz : 2666.851 cache size : 8192 KB physical id : 0 siblings : 8 core id : 0 cpu cores : 4 apicid : 0 fpu : yes fpu_exception : yes cpuid level : 11 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm syscall nx rdtscp lm constant_tsc ida nonstop_tsc pni monitor ds_cpl vmx est tm2 cx16 xtpr popcnt lahf_lm bogomips : 5333.70 clflush size : 64 cache_alignment : 64 address sizes : 40 bits physical , 48 bits virtual power management : [ 8 ] processor : 1 ... cpu cores : 4 ... processor : n ... cpu cores : 4 ... processor : 15 ... cpu cores : 4 ... 【所以CPU(processor)的数量是最后一个cpu标号加1，每颗CPU的核数是其中\"cpu cores\"的值，这是一个有16颗4核CPU的服务器】 上面的结论错误，阅读cpuinfo的正确方法是： 通过physical id确定有多少个物理CPU（即多少个CPU插槽socket，或者叫物理封装）； 通过cpu cores确定某一个物理CPU有多少核； 如果siblings数量与cpu core一致，说明没有超线程。反之如果siblings的值大于cpu cores，说明开启了超线程（hyperthreading），开启超线程的另一个证据是不同的processor拥有同样的core id，这一点可以用\"cat /proc/cpuinfo|grep \"core id\"确认； processor的数量应该等于物理CPU的数量与siblings的乘积； 根据以上方法分析，上面的服务器有两颗4核CPU（即两个CPU插槽，每个插槽上的CPU有4个核），开启了超线程，共有16个逻辑CPU。 参考 Understanding Linux /proc/cpuinfo 相关资料 查看CPU是32位还是64的方法是：cpuinfo的flags参数中是否有\"lm\"这一项，lm表示long mode，可以用\"cat /proc/cpuinfo|grep \"\\<lm>\"查询； CPU超线程技术可以参考 Hyper-threading 。 另：用free指令查看系统内存大小 用free -g以GB为单位显示内存大小，另外可以通过查看cat /proc/meminfo指令结果第一行的方法确定物理内存大小；","tags":"Tech","url":"http://leetschau.github.io/linuxxi-tong-cpuxin-xi-cha-xun-fang-fa.html","loc":"http://leetschau.github.io/linuxxi-tong-cpuxin-xi-cha-xun-fang-fa.html"},{"title":"Linux中网络相关的配置文件","text":"/etc/hosts 10 . 31 . 1 . 71 servername1 10 . 31 . 1 . 52 servername2 当本机连接servername1时，通过这个文件将主机名映射为ip地址，相当于本机本部的DNS服务，对该文件的详细说明见Richard Petersen \"Linux: The Complete Reference\" p723: Identifying Hostnames: /etc/hosts。 /etc/sysconfig/network 用于定义主机的整体网络配置。 # /etc/sysconfig/network-scripts/ifcfg-eth0 专门定义eth0的属性，如果有多个网卡， network-scripts下可能还有ifcfg-eth1,ifcfg-eth2等几个文件。 设置网卡eth0的IP地址 ifconfig < eth0 > 10 . 31 . 1 . 251 netmask 255 . 255 . 255 . 0 up 其中eth0是网卡名称，要根据ifconfig中列出的具体的网卡名字确定。 修改主机名 hostname newHostname 查询当前主机名：hostname 参见 What is the difference between these two network configuration files?","tags":"Tech","url":"http://leetschau.github.io/linuxzhong-wang-luo-xiang-guan-de-pei-zhi-wen-jian.html","loc":"http://leetschau.github.io/linuxzhong-wang-luo-xiang-guan-de-pei-zhi-wen-jian.html"},{"title":"源代码版本管理策略","text":"本文使用的方法基于Vincent Driessen的 A successful Git branching model 。 分布式版本控制策略 总体架构 主仓库（origin）中有两个 永久 分支：master和develop。 master上只保存生产环境可用版本，发布包只从这个分支上打； develop用来收集可用的开发特性，BVT系统是从这个分支上获取代码做nightly builds。 每个开发者可能发起3种 临时 分支：feature, release和hotfix， 临时的意思是这3中分支最终都要被合并到某个永久分支（master/develop）中。 下面是详细说明。 feature: 用来开发新产品特性的分支。 from: develop; back into: develop. 命名规范：feature/<特征名> 生命周期：需要开发某个特征时，创建一个feature分支，当此特性开发完毕并通过测试，合并回develop后，分支消失， 或者此特征被放弃，分支被删除（或搁置）。 习惯上特征分支只由一个开发者完成，所以只存在于该开发者的本地仓库中。 release: 用来完成发布的分支。 from: develop; back into: master and develop. 命名规范：release/x.y.z 生命周期：当develop中的代码已经达到\"发布一个版本\"的状态时，创建一个release分支； 创建分支前，确定发布版本号，例如之前是1.1.5，这次是1.2，还是2.0？ 根据版本号创建分支，修改对应文件（例如node应用中，package.json的version值）。 一些简单的bug修改也可以在这个分支上完成。 完成所有发布准备后，将此分支合并到develop和master上，然后删除此分支。 合并到master分支后，在master上用版本号打tag，别忘了把tag也push到origin上； hotfix: 用来修改线上版本bug的分支。 from: master; back into: master and develop. 命名规范：hotfix/x.y.z 生命周期：开始修复bug时创建分支，修复后将分支合并到master和develop上，删除分支。 代码修改完成后，在版本信息文件中修改版本号第3组数字，例如将1.1.5改为1.1.6，然后合并分支。 各分支间的关系见Vincent Driessen的文章。 git-flow cheatsheet by Daniel Kummer 给出了详细的图示说明已经各操作如何使用git-flow实现。 版本号命名规则 x.y.z格式的版本号中，x代表大版本，当无法保证API兼容时，大版本号加1； y代表小版本，同一个大版本的各个小版本应互相兼容，每增加一个新功能，小版本号加1； z代表修复bug或者其他未新增功能，但仍需记录的变化。 参考： Semantic Versioning . 评价 这个分布式的版本系统结构清晰，易于理解和使用。 并且能解决不同现场的特殊需求问题： 如果某个A现场使用v1.0，B现场使用v2.0，现在A报了bug，则只能给A使用高版本（v2.1）， 而不能通过在v1.0上打patch的方法解决，因为如果从master的tag v1.0处签出代码，修改bug，得到v1.0p1，还得将修改再合并到v2.0上， 而且v1.0p1将变成一个无法合并的分支，但如果采用升级版本的方式改bug，就要求版本间功能具备连续性， 如果为A现场的v1.0开发了一个特殊的功能X，又不能合并到master里去（因为其他现场不需要这个功能）， 升级将导致A无法使用X。所以怎样将各现场的特殊需求与版本控制结合起来仍然是一个未解决的问题。 后续工作 在分支上打tag的方法： git tag -a <tag-name> ; 在Hg上重现上面的流程； Hg的工作流程 在中心服务器origin上建立一个branch name为develop的分支； 假设开发者chad负责在现有版本上增加一个\"使用正则表达式的预期-发送\"功能，则chad先从origin上clone一份代码到\"f:\\ghost\\tmpFiles\\myProj\"文件夹中； 将这份代码导入到Eclipse中，项目路径为d:\\workspace\\myProj，注意\".hg\"文件夹也要导入； 删除\"f:\\ghost\\tmpFiles\\myProj\"中的仓库，打开新的d:\\workspace\\myProj仓库，新建一个branch命名为\"exp-send-regex\"； Eclipse中开发功能，提交本地版本； 当功能稳定后由origin将chad的代码pull到自己的代码库中： i. 启动chad的hg web server； i. 在origin上用\"pull selected changes from selected URL\"，将chad上面测试稳定的\"使用正则表达式的预期-发送\"功能分支拉过来； i. 合并到develop分支中：在exp-send-regex分支顶端的changeset上右键->merge with local； 其他资料 版本控制的分支策略及初步实践 Maven最佳实践：版本管理 Version Control for Multiple Agile Teams Best branching strategy when doing continuous integration Streamed Lines: Branching Patterns for Parallel Software Development","tags":"Tech","url":"http://leetschau.github.io/yuan-dai-ma-ban-ben-guan-li-ce-lue.html","loc":"http://leetschau.github.io/yuan-dai-ma-ban-ben-guan-li-ce-lue.html"},{"title":"Maven笔记","text":"mvn archetype:generate -DgroupId=org.leechau.maven -DartifactId=HelloWorldApp mvn validate, mvn compile, mvn package, mvn test, ... = maven install","tags":"Tech","url":"http://leetschau.github.io/mavenbi-ji.html","loc":"http://leetschau.github.io/mavenbi-ji.html"},{"title":"Beginning Java EE 6 Platform With GlassFish 3源代码编译问题解决办法","text":"根目录下pom.xml中 EclipseLink Repo 下的 http://mirror.csclub.uwaterloo.ca/eclipse/rt/eclipselink/maven.repo/ 改为： http://download.eclipse.org/rt/eclipselink/maven.repo/ 可以解决无法找到eclipselink 2.0.1导致mvn compile失败问题；第二章编译成功；","tags":"Tech","url":"http://leetschau.github.io/beginning-java-ee-6-platform-with-glassfish-3yuan-dai-ma-bian-yi-wen-ti-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/beginning-java-ee-6-platform-with-glassfish-3yuan-dai-ma-bian-yi-wen-ti-jie-jue-ban-fa.html"},{"title":"读取配置文件的方法","text":"读取配置文件需要指定配置文件的路径和文件名，可以在Java代码里硬编码配置文件名，然后将配置文件所在目录加入classpath；也可以把路径和文件名都硬编码在Java代码里，只要启动脚本和配置文件的相对位置不变，就不必修改代码。第一种方法更灵活（指定配置文件路径的工作放在了启动脚本里，而不是Java代码中），推荐使用。 硬编码配置文件名 用Class的getResourceAsStream(String name)方法加载配置文件，代码如下： InputStream in = this.getClass().getResourceAsStream(\"/db.properties\"); Properties p = new Properties(); p.load(in); System.out.println(\"value is: \" + p.getProperty(\"db\")); 其中GetResources是运行这段代码所在类的类名，部署目录结构是： root |-bin |-start.bat |-conf |-db.properties |-lib |-res.jar 启动脚本start.bat内容是： java -cp f:\\VMFiles\\tmpFiles\\goduEx2\\lib\\res.jar;f:\\VMFiles\\tmpFiles\\goduEx2\\conf getResources.GetResources 其中res.jar的结构是：getResources/GetResources.class（假设代码所在文件的包名是getResources）。 这里最重要的是getResourceAsStream方法的参数前面要加上\"/\"。 在static方法里无法使用\"this\"关键字，可以硬编码类名，在Eclipse中重构可以同时修改类名： InputStream in = GetResources.class.getResourceAsStream(\"/db.properties\"); 指定配置文件相对路径 将上面代码的第一句改为： InputStream in = new FileInputStream(\"../conf/db.prop\"); 相应地start.bat也不需要把conf加到classpath里： java -cp f:\\VMFiles\\tmpFiles\\goduEx2\\lib\\res.jar getResources.GetResources 不推荐ResourceBundle.getBundle()方法，因为这个方法不是用来加载文件的。","tags":"Tech","url":"http://leetschau.github.io/du-qu-pei-zhi-wen-jian-de-fang-fa.html","loc":"http://leetschau.github.io/du-qu-pei-zhi-wen-jian-de-fang-fa.html"},{"title":"用jstack监控远程主机上的java进程","text":"前面提到用visualvm监控远程主机上的java进程，这种方法的好处是可以\"实时\"监控，缺点是需要启动jstatd，且只能看到线程总数，无法显示每个线程的详细情况，jstack可以生成某一进程的dump，包含在特定时刻（命令执行时）Java进程内部各个线程的详细情况。 首先用\"jps -l\"找到目标进程的PID，然后用\"jstack [PID]\"获得dump，对于大型程序这个dump一般也比较大，所以用\"jstack [PID] > dump_file_name\"的方法将结果保存在文件dump_file_name里。 下面是dump文件中的一段： \" HSQLDB Timer @5a1b5e32 \" daemon prio=3 tid=0x0000000101116800 nid=0x420a in Object.wait() [0xfffffffb5c2ff000] java.lang.Thread.State : TIMED_WAITING (on object monitor) at java.lang.Object.wait(Native Method) - waiting on <0xfffffffb721e7700> (a org.hsqldb.lib.HsqlTimer \\(TaskQueue) at org.hsqldb.lib.HsqlTimer\\) TaskQueue.park(HsqlTimer.java:883) - locked <0xfffffffb721e7700> (a org.hsqldb.lib.HsqlTimer \\(TaskQueue) at org.hsqldb.lib.HsqlTimer.nextTask(HsqlTimer.java:531) - locked <0xfffffffb721e7700> (a org.hsqldb.lib.HsqlTimer\\) TaskQueue) at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:611) at java.lang.Thread.run(Thread.java:662) 以上文本包含的信息包括： 线程名：HSQLDB Timer @5a1b5e32 锁住的资源：<0xfffffffb721e7700> 线程堆栈 线程类型：daemon; 线程优先级（prio）：3 线程ID（tid）：0x0000000101116800 线程状态：\"Object.wait()\"和\"TIMED_WAITING\" 下面的一段供对照： \" T-14319652 \" prio=3 tid=0x000000010294d000 nid=0x4208 runnable [0xfffffffb5d5f8000] java.lang.Thread.State: RUNNABLE at org.hsqldb.ExpressionColumn.getValue(ExpressionColumn.java:627) at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1172) at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1120) at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1120) at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1120) 参考： Java自带的性能监测工具用法简介——jstack、jconsole、jinfo、jmap、jdb、jsta、jvisualvm JAVA线程dump的分析 --- jstack pid if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-jstackjian-kong-yuan-cheng-zhu-ji-shang-de-javajin-cheng.html","loc":"http://leetschau.github.io/yong-jstackjian-kong-yuan-cheng-zhu-ji-shang-de-javajin-cheng.html"},{"title":"top指令用法","text":"输出结果的含义： Linux下查看CPU使用率!系统资源使用情况 指令参数说明： Can You Top This? 15 Practical Linux Top Command Examples top界面上输入1（数字一）可以列出CPU每个核的情况，输入shift+h可以列出thread情况（详细说明在top界面上按h键）；","tags":"Tech","url":"http://leetschau.github.io/topzhi-ling-yong-fa.html","loc":"http://leetschau.github.io/topzhi-ling-yong-fa.html"},{"title":"用ps指令查看进程内的线程数量","text":"[godu@goduserver ~]$ jps 24121 Jps 23854 PoolServer 22522 AppMain 22351 ResFreshAppMain 23898 PoolServer 22713 SimpleJettyServer [godu@goduserver ~]$ ps -p 23854 -L -o tid,pcpu,state,nlwp TID %CPU S NLWP 23854 0.0 S 40 23855 0.0 S 40 23856 0.0 S 40 其中-L参数是列出进程内的线程（详见man ps的\"THREAD DISPLAY\"一节），-o是指定输出项（详见man ps的\"STANDARD FORMAT SPECIFIERS\"一节）。 参考： UNIX / Linux: 7 Practical PS Command Examples for Process Monitoring","tags":"Tech","url":"http://leetschau.github.io/yong-pszhi-ling-cha-kan-jin-cheng-nei-de-xian-cheng-shu-liang.html","loc":"http://leetschau.github.io/yong-pszhi-ling-cha-kan-jin-cheng-nei-de-xian-cheng-shu-liang.html"},{"title":"用visualvm监控远程主机上的java进程","text":"启动参数配置 要监控PoolServer的运行情况，需要在启动时加上以下参数： \"${JAVA_HOME}/bin/java\" -Dcom.sun.management.jmxremote \\ -Dcom.sun.management.jmxremote.port=9090 \\ -Dcom.sun.management.jmxremote.authenticate=false \\ -Dcom.sun.management.jmxremote.ssl=false \\ -Djava.rmi.server.hostname=10.0.2.47 \\ -Dservice_name=godu-3.0 -cp $JARS transfer.PoolServer 系统配置 首先在jstatd所在目录下（$JAVA_HOME/bin）新建一个policy文件jstatd.all.policy： grant codebase \"file:${java.home}/../lib/tools.jar\" { permission java.security.AllPermission; }; 然后运行jstatd： jstatd -J-Djava.security.policy=jstatd.all.policy 程序启动后没有任何输出，但用jps和netstat -an|grep 1099可以验证jstatd是否启动成功。 参考： 用VisualVM远程监控Java进程 （此文应该是基于 jstatd - Virtual Machine jstat Daemon ），注意其中的policy文件的写法，不要把 \\({java.home}误写成\\) ，因为这不是环境变量。 2013-02-22更新 不运行上述\"jstatd -J-D...\"情况下连接113服务器失败，运行jstatd命令需要首先安装openjdk6，装完后运行该命令，又用Ctrl+C停止，在jVisualVM中配置远程主机10.31.1.113，在上面右键：添加JMX连接，\"连接\"项设为10.31.1.113:9090，连接成功后在\"抽样器\"中首先进行\"CPU设置\"，仅分析\"transfer.*\"，然后点击\"CPU\"按钮进行CPU抽样，可以看到各个public方法的执行时间。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-visualvmjian-kong-yuan-cheng-zhu-ji-shang-de-javajin-cheng.html","loc":"http://leetschau.github.io/yong-visualvmjian-kong-yuan-cheng-zhu-ji-shang-de-javajin-cheng.html"},{"title":"markdown语法和编辑预览工具","text":"标题 有#和=两种形式。 Setext格式 1~6个\"#\"开头 first layer title second layer title atx格式 标题下面的\"=\"表示一级标题，\"-\"表示二级标题 一级标题 ======= 二级标题 引用 \">\"开头的是引用，\">>\"表示引用中的引用； 这是一行引用 列表 排序列表 以\"1. \"起首的行会被编号为1,2,... first line; second line; 普通列表 first item second item third item fourth item 段落 空行分隔段落 换行不影响， 本行与上一行会处于同一段中 超链接 嵌入式： title 文后注释式：文中[title]，在文后写上单独一行：[title]:url 强调 两个星号 是黑体形式的强调； 一个星号 是形体形式的强调 注意英文强调时星号与外部文本之间要留空格； 代码 以4个空格起首的都被处理为代码，代码区块中的特殊字符（如#）不会处理为markdown标识符；如果需要在正文中增加一段行内代码，可以用反引号将代码括起来（ some code ）。 分隔线 行首连续3个或以上\"-\", \"*\"或者\"_\"形成一条分隔线，注意用\"-\"做分割线时上一行必须是空行，否则会被当做标题标记； Markdown 语法说明 (简体中文版) 讲得比较精当， Dillinger 是一个很好的在线markdown编辑器，将以上文本粘贴到其中可以看到效果。 markdown编辑/预览工具 dillinger.io ，在线编辑，效果很好； MarkdownPad Gonzo ，需要先安装Adobe Air，响应速度较MarkdownPad慢； writemonkey ，软件本身是绿色的，无需安装，但运行时需要首先安装.NET 4.0； MarkPad: 需要安装，字体不好看； 类似工具 MultiMarkdown Pandoc ，参考笔记 Pandoc笔记 ； Markdown in Python","tags":"Tech","url":"http://leetschau.github.io/markdownyu-fa-he-bian-ji-yu-lan-gong-ju.html","loc":"http://leetschau.github.io/markdownyu-fa-he-bian-ji-yu-lan-gong-ju.html"},{"title":"Java EE 6 Development with NetBeans 7 笔记","text":"chapter 2 -> Securing web applications 对书中步骤的补充: 项目根目录（$PROJ_HOME/web）下建立login.jsp和loginerror.jsp两个文件； 配置部分，GlassFish的配置文件名为glassfish-web.xml而不是代码包里的sun-web.xml； 项目根目录（$PROJ_HOME/web）下建立admin/admin.jsp； GlassFish Admin Console的安全设置位置与书中不同：\"配置 -> server-config -> 安全性 -> 领域 -> file -> 管理用户\" 中配置用户名和密码，保存后访问http://localhost:8080/SimpleWebApp/admin/admin.jsp，会自动跳转到登录界面； chapter3, p103 JSTL If的测试，http://localhost:8080/JSTLIf/只显示两句话（不显示if中的语句），http://localhost:8080/JSTLIf/index.jsp?displayConditionalText=true显示全部语句； chapter4, p167: Composite components, 可以理解为是\"组合控件\"，后面完成的address.xhtml就是组合控件，包含了一个标题和5个\"标签-文本框\"对，这个组合控件应用在了后面p170的index.xhtml中。address的interface包括addrType和managedBean，对应index.xhtml中的 ，我们可以认为组合控件是一个（可以被其他控件调用的）函数，它的interface是形式参数，index是address的调用者，#{addressBean}和Home是实际参数。addressBean是一个managedBean，它的实体是AddressBean.java，它是一个普通的JavaBean，只是在类名前添加了@ManagedBean和@RequestScoped，前者标明自己是managedBean，以便于managedBean=\"#{addressBean}\"能够找到自己，后者标明自己的有效范围是Request（而不是session, application）。","tags":"Tech","url":"http://leetschau.github.io/java-ee-6-development-with-netbeans-7-bi-ji.html","loc":"http://leetschau.github.io/java-ee-6-development-with-netbeans-7-bi-ji.html"},{"title":"Hg切换到SVN","text":"刚开始代码一般都是自己一个人写，建一个本地的Hg库，等代码到一定程度时，其他人加入开发团队，需要将代码提交到SVN库中以实现与其他人共同开发，实现这个切换的同时又不丢掉之前Hg库的版本历史，方法如下： 将Hg库里的源代码提交到SVN库里； 从SVN库里checkout代码到A文件夹下； 将原来Hg库中的.hg文件夹和.hgignore文件拷贝到A文件夹下； Hg( Mercurial )能够实现版本库\"迁移\"的原因是Hg里并不记载版本之间的变化，而是文件的全部内容，所以当版本库（.hg文件夹）被拷贝到另一个位置后，只要文件内容不变，即使其他元信息（如建立、修改时间等）不一样，Hg就认为是同一个文件。 其他方法： 方法1：首先在本地开发，建立hg库，当需要提交时svn库时，用hg的回退版本（update）功能，从hg中挑选出想提交的代码发布到svn中，之后代码开发切换到在svn的checkout版本中。好处：一开始不用规划svn库位置；缺点：各次提交的时间点信息丢失（可以在提交说明里加上原始提交时间）； 方法2：首先在svn库中建好文件夹，然后checkout到本地，然后在这个文件夹里建立hg库； 方法3：始终在本地hg库中开发，挑选出一些版本手工提交到svn库中，当其他开发人员修改代码提交svn后，还要更新本地svn代码，然后手工同步到hg代码中。这个方法只要安装TortoiseSVN，Eclipse不需要安装subclipse插件，适合在有自动测试配合的情况下使用； 总结：如果一开始就计划svn/hg双库，最好用方法2；如果一开始没有计划，后来才要纳入svn版本控制，用方法1；方法3太过于繁琐，且手工同步难以杜绝操作失误，不建议使用。","tags":"Tech","url":"http://leetschau.github.io/hgqie-huan-dao-svn.html","loc":"http://leetschau.github.io/hgqie-huan-dao-svn.html"},{"title":"插件式程序的构建方法","text":"Oracle的 Creating Extensible Applications With the Java Platform ，很好的解释了基于JDK和NetBeans的插件化开发和使用方法，附带源代码，很好的入门教程。JDK的ServiceLoader提供了基本的插件化功能，不支持热插拔（增加新插件后需重启才能生效），NetBeans的Lookup类（$NetBeans_INSTALL_DIR/platform/lib/org-openide-util.jar提供）功能更强，支持热插拔； 插件化实例 Developing A Simple Pluggable Java Application 2012年9月10日验证成功，但只有构建过程，没有使用过程，需要对ClassLoader有一定的了解才能看懂代码，不如上面Oracle的教程重点突出； 另可参考 Simple Dependency Injection with ServiceLoader in JDK 6 ；","tags":"Tech","url":"http://leetschau.github.io/cha-jian-shi-cheng-xu-de-gou-jian-fang-fa.html","loc":"http://leetschau.github.io/cha-jian-shi-cheng-xu-de-gou-jian-fang-fa.html"},{"title":"控制反转和依赖注入","text":"控制反转（Inversion of Control, IoC）的主要作用是为软件模块解耦，增加可测性，提高模块内部聚合性，依赖注入（Dependency Injection, DI）是IoC的一种特殊形式， Benjamin J Evans: The Well-Grounded Java Developer, Chapter 3: Dependency Injection 很好地解释了什么是依赖注入，以及它的作用，并结合Google的 Guice 说明了DI的用法。","tags":"Tech","url":"http://leetschau.github.io/kong-zhi-fan-zhuan-he-yi-lai-zhu-ru.html","loc":"http://leetschau.github.io/kong-zhi-fan-zhuan-he-yi-lai-zhu-ru.html"},{"title":"Java字符串的格式化输出","text":"左对齐 String LS_HEADER = String.format(\"%-10s%-10s%-10s%-10s%-10s%-10s%n\", \"ID\", \"Protocol\", \"IP\", \"Port\", \"Username\", \"Password\"); 效果： ID Protocol IP Port Username Password 10025022 ssh 10.0.2.50 22 godu godu 10024723 telnet 10.0.2.47 23 godu goduty 右对齐 String LS_HEADER = String.format(\"%10s%10s%10s%10s%10s%10s%n\", \"ID\", \"Protocol\", \"IP\", \"Port\", \"Username\", \"Password\"); 效果： ID Protocol IP Port Username Password 10025022 ssh 10.0.2.50 22 godu godu 10024723 telnet 10.0.2.47 23 godu goduty","tags":"Tech","url":"http://leetschau.github.io/javazi-fu-chuan-de-ge-shi-hua-shu-chu.html","loc":"http://leetschau.github.io/javazi-fu-chuan-de-ge-shi-hua-shu-chu.html"},{"title":"Tomcat笔记","text":"Windows 7 启动/停止服务：$TOMCAT_HOME/bin/startup.bat, shutdown.bat; 修改http监听端口：$TOMCAT_HOME/conf/server.xml, connector的port属性值； 默认加载目录： \\(TOMCAT_HOME/webapps/ROOT 自己应用的目录：在\\) TOMCAT_HOME/webapps下新建一个目录，将html,jsp文件放入其中即可； Ubuntu Unzip tomcat tarball apache-tomcat-8.5.11.tar.gz to \"$HOME/apps\". Install sdkman, install JDK 8 with it. If source sdkman init script is too slow, add the following lines into ~/.zshrc: export JAVA_HOME = \"$HOME/.sdkman/candidates/java/8u111\" export PATH = $ JAVA_HOME / bin : $ PATH if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/tomcatbi-ji.html","loc":"http://leetschau.github.io/tomcatbi-ji.html"},{"title":"JavaFX笔记","text":"WebServer加载JavaFX应用的方法 1. 首先在NetBeans 7.2中构建好\" Creating a Form in JavaFX \"，将项目根目录的dist子目录中的所有文件拷贝到$XAMPP_DIR/htdocs/jnlpEx下； 2. 启动xampp服务（参考\" PHP开发环境搭建 \"）； 3. 浏览器中打开：http://localhost:8000/jnlpEx/Login.html。 在Jetty上加载尚未成功； 界面设计 布局： Working With Layouts in JavaFX 控件说明： Using JavaFX UI Controls 文档总目录","tags":"Tech","url":"http://leetschau.github.io/javafxbi-ji.html","loc":"http://leetschau.github.io/javafxbi-ji.html"},{"title":"Jetty笔记","text":"启动Jetty服务：java -jar start.jar 修改监听端口号：$JETTY_HOME/etc/jetty.xml中修改port的值； 运行\" Jetty官网教程 -> 1.2.1节Embedding Jetty -> Configuring Connectors -> ManyConnectors.java \"这个程序需要注意： 程序包需要使用jetty-distribution-7.6.5.v20120716这个版本，使用7.2.1（jetty-all-7.2.1.v20101111.jar）会有API不兼容问题； 要把7.6.5发布包解压后lib目录下所有jar包都加入Classpath，否则会有运行时类无法找到错误； ManyConnectors.java中\"String jetty_home = System.getProperty(...);\"这一句中默认值要改为解压后的路径，否则会报keystore文件无法找到错误；","tags":"Tech","url":"http://leetschau.github.io/jettybi-ji.html","loc":"http://leetschau.github.io/jettybi-ji.html"},{"title":"JMeter笔记","text":"将界面语言改为英文：$JMETER_HOME/bin/jmeter.properties中，取消注释\"language=en\"；","tags":"Tech","url":"http://leetschau.github.io/jmeterbi-ji.html","loc":"http://leetschau.github.io/jmeterbi-ji.html"},{"title":"英文版Windows 7支持中文显示和输入","text":"显示中文 Start -> Control Panel -> Region and Language: Location -> \"Current Location\" 改为 \"China\"; Administrative -> Change system locale... -> \"Current system locale\" 改为 \"Chinese (Simplified, PRC)\"; 输入中文 这个比较简单，装一个搜狗输入法就行了，修改默认输入法： Start -> Control Panel -> Region and Language -> Keyboards and Languages -> Change keyboards;","tags":"Tech","url":"http://leetschau.github.io/ying-wen-ban-windows-7zhi-chi-zhong-wen-xian-shi-he-shu-ru.html","loc":"http://leetschau.github.io/ying-wen-ban-windows-7zhi-chi-zhong-wen-xian-shi-he-shu-ru.html"},{"title":"Time unit","text":"1 ms(millisecond) = 10e-3 second 1 μs(microsecond) = 10e-6 second 1 ns(nanosecond) = 10e-9 second reference: Orders of magnitude (time) on wiki.","tags":"Tech","url":"http://leetschau.github.io/time-unit.html","loc":"http://leetschau.github.io/time-unit.html"},{"title":"Stream和BlockingQueue的线程安全问题","text":"一般认为Stream（包括InputStream和OutputStream）不是线程安全的（如 这篇 ），但下面的程序运行多次后未观察到OutputStream.write()方法的原子性被破坏的现象：每个线程向文件输出长度为1000的字符组（从A到），20个线程并发没有出现字符组交错输出。 StreamQueueTest.java package streamVsQueue; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.OutputStream; public class StreamQueueTest { public static void main(String[] args) { OutputStream out = null; try { out = new FileOutputStream(\"concurrentout.txt\", false); } catch (FileNotFoundException e) { e.printStackTrace(); } for (int i = 0; i < 20; i++) { IntCounter cc = new IntCounter(i, out); new Thread(cc).start(); } } } IntCounter.java package streamVsQueue; import java.io.IOException; import java.io.OutputStream; public class IntCounter implements Runnable { private final int cnt; OutputStream out; public IntCounter(int i, OutputStream oup) { cnt = i; out = oup; } @Override public void run() { int bytelen = 1000; byte[] buf = new byte[bytelen]; for (int i = 0; i < bytelen; i++) { buf[i] = (byte) (65 + cnt); } try { out.write(buf); } catch (IOException e) { e.printStackTrace(); } } } 至于BlockingQueue，文档明确说明是线程安全的，各个读取操作都有内部锁，所以就不测试了，安全起见，新版本的GODU就用这个数据结构吧。","tags":"Tech","url":"http://leetschau.github.io/streamhe-blockingqueuede-xian-cheng-an-quan-wen-ti.html","loc":"http://leetschau.github.io/streamhe-blockingqueuede-xian-cheng-an-quan-wen-ti.html"},{"title":"log4j的输出格式控制","text":"格式控制中的\"-\"号表示对齐空格出现在内容的右边，例如下面的\"相对时间\"（%r）设置为\"...ConversionPattern=% -6 r %c\"，效果见下面的第一列： 0 PoolServer 7429 BQServer 7430 BQServer 7434 Write2User 7436 AdminServer 若不写\"-\"，则表示在内容前方填充空格对齐，写为\"...ConversionPattern=% 6 r %16c{1}\"效果见下面的第一列： 0 PoolServer 3792 BQServer 3793 BQServer 3795 Write2User 上面类名\"%c\"的控制中{N}控制从右面数类名的层级，例如\"%16c{1}\"表示\"仅显示最后一级类名，占据16个空格，不足的在类名左面填充空格对齐\"，效果见上面例子的第二列，其中PoolServer的全名是com.boco.godu.trns.PoolServer，所以{1}是PoolServer，{2}是trns.PoolServer，依此类推，不写则打印完整类名。","tags":"Tech","url":"http://leetschau.github.io/log4jde-shu-chu-ge-shi-kong-zhi.html","loc":"http://leetschau.github.io/log4jde-shu-chu-ge-shi-kong-zhi.html"},{"title":"hg命令行工具使用笔记","text":"tortoiseHg不能建立分支（可以建，2012-10-8），所以只好用命令行来做了，好在命令行也不复杂。 F:\\VMFiles\\tmpFiles\\testHg>hg init // 当前目录下建立repo // 新建文件test.txt F:\\VMFiles\\tmpFiles\\testHg>hg add test.txt // 增加对test的版本控制 F:\\VMFiles\\tmpFiles\\testHg>hg ci -m \"first time commit\" // 提交test，ci是check-in的简写，也可写为commit // 修改test.txt文件内容 F:\\VMFiles\\tmpFiles\\testHg>hg st // 查看变化情况，st是status的简写 M test.txt F:\\VMFiles\\tmpFiles\\testHg>hg diff // 显示working directory中的内容与tip的区别 diff -r e83bcfd395df test.txt ...（详细内容对比） F:\\VMFiles\\tmpFiles\\testHg>hg commit -m \"第二次修改\" // 提交修改，双引号中（版本注释）可以写中文 F:\\VMFiles\\tmpFiles\\testHg>hg log -v // 查看版本历史 修改集: 1:ee6f6492bd8b 标签: tip 用户: Chad 日期: Tue Jul 31 09:36:18 2012 +0800 摘要: 第二次修改 修改集: 0:3bf09e86781b 用户: Chad 日期: Tue Jul 31 09:28:56 2012 +0800 摘要: first time commit F:\\VMFiles\\tmpFiles\\testHg>hg revert test.txt // 放弃本次修改，新修改的文件重命名为test.txt.orig F:\\VMFiles\\tmpFiles\\testHg>hg branch red // 新建分支red，并切换到它上面 marked working directory as branch red F:\\VMFiles\\tmpFiles\\testHg>hg commit -m \"red上的修改\" // 后面的修改都是基于当前分支red的 F:\\VMFiles\\tmpFiles\\testHg>hg branch // 查看当前所处的branch red F:\\VMFiles\\tmpFiles\\testHg>hg branches // 显示当前所有分支 red 3:973327a4aa5d default 2:ee6f6492bd8b (inactive) 修改test.txt文件内容 F:\\VMFiles\\tmpFiles\\testHg>hg commit -m \"red上的第二次修改\" F:\\VMFiles\\tmpFiles\\testHg>hg up default // 将当前分支切换为default，up是update的简写 1 files updated, 0 files merged, 0 files removed, 0 files unresolved F:\\VMFiles\\tmpFiles\\testHg>hg log -b red // 只显示分支red上的版本 ... F:\\VMFiles\\tmpFiles\\testHg>hg tip -v // 显示tip版本信息 ... F:\\VMFiles\\tmpFiles\\testHg>hg heads // 显示当前各个branch上的最新版本 F:\\VMFiles\\tmpFiles\\testHg>hg merge -t docdiff -r 3 // 与版本3合并，这里使用了diff工具docdiff，注意将它的路径加入到$PATH中，默认是\"C:\\Program Files\\TortoiseHg\" F:\\VMFiles\\tmpFiles>hg clone http://www.selenic.com/repo/hello my-hello // 从网络上下载repo到当前目录的my-hello目录下 F:\\VMFiles\\tmpFiles\\my-hello>hg clone . e:/aaa // clone当前（目录所在的）repo到e:\\aaa目录下 F:\\VMFiles\\tmpFiles>hg clone my-hello my-hello-new // 复制当前目录下的repo（同时也是子目录）my-hello到my-hello-new下 修改my-hello-new/hello.c文件 F:\\VMFiles\\tmpFiles>cd my-hello F:\\VMFiles\\tmpFiles\\my-hello>hg pull ../my-hello-new // 将其他repo中的改进\"拉\"到当前（目录所在的）repo中，类似于SVN的update 当多个分支存在冲突时，merge会失败，比较好的策略是：主干（default）里是稳定的可用版，新加的功能放在分支里（每个新功能都建一个新分支），当功能通过验证后，再合并到主干里，这样的好处是分支的代码只会比主干多，合并时不会出现冲突。 另： Hg原理的介绍： Understanding Mercurial 一个不错的Hg教程： Hg Init","tags":"Tech","url":"http://leetschau.github.io/hgming-ling-xing-gong-ju-shi-yong-bi-ji.html","loc":"http://leetschau.github.io/hgming-ling-xing-gong-ju-shi-yong-bi-ji.html"},{"title":"String.trim的作用","text":"Java的字符串处理方法trim是如何改变字符串的？下面是一个例子： @Test public void testTrim() { String test = \"origin\"; String ori = \"origin\\r\\n\"; assertFalse(ori.equals(test)); String trimmed = ori.trim(); assertTrue(trimmed.equals(test)); } 打断点分别查看test, ori和trimmed的值如下： 可见trim()方法没有改变字符串的\"实际\"内容（value中的字符数组没有变），但改变了字符串的count值，因此就与\"正常\"字符串test一致了。","tags":"Tech","url":"http://leetschau.github.io/stringtrimde-zuo-yong.html","loc":"http://leetschau.github.io/stringtrimde-zuo-yong.html"},{"title":"自动登录的实现方法","text":"基于字节数组的定长队列 这个队列可以在队尾追加（add）数据，由于是定长的，所以追加数据会将头部的数据\"推出\"队列。另外该队列可以检查是否包含（contains）某一子字符串，或者更进一步，检查是否包含某个用正则表达式表示的模式。这种数据结构主要用在Telnet Client的自动登录过程中，检查收到的报文中是否有预期的标志，以决定是否发送登录信息（用户名、密码等）。下面是一个实现： public class ByteQueue { private final Logger logger = LoggerFactory.getLogger(this.getClass().getName()); private final int BUFFER_LENGTH = 32; byte[] buffer = new byte[BUFFER_LENGTH]; public void add(byte[] income, int len) { logger.debug(\"income is: \" + BytesHandler.bytes2HexString(income)); byte[] tmp = new byte[BUFFER_LENGTH + len]; System.arraycopy(buffer, 0, tmp, 0, buffer.length); System.arraycopy(income, 0, tmp, buffer.length, len); System.arraycopy(tmp, tmp.length - BUFFER_LENGTH, buffer, 0, BUFFER_LENGTH); } public boolean contains(String sub) { String bufStr = null; try { bufStr = new String(buffer, \"ISO8859-1\"); } catch (UnsupportedEncodingException e) { logger.error(\"bad encoding: ISO8859-1\"); } return bufStr.contains(sub); } } 上述\"ISO8859-1\"编码又名Latin-1，据\" ISO8859-1、UTF-8 与GB2312 \"一文是Java网络传输的标准编码，又据\" Java: Regex on byte array \"一文，这是一个单字节的编码方案，所以可以用字符串的contains方法完成字节的查找。\" 字符在utf-8,gbk,gb2312,iso8859-1下的编码实验 \"的结果很有参考价值。 下面的代码演示了如何使用上面的类完成自动登录： ByteQueue bq = new ByteQueue(); while (true) { byte[] buf = new byte[128]; int recv = nis.read(buf); if (recv == -1) { logger.info(\"read -1 from client.\"); break; } logger.debug(\"client send: \" + BytesHandler.bytes2HexString(buf)); uout.write(buf, 0, recv); uout.flush(); // execute login script String expTest = expQ.peek(); //expQ是预期队列：\"ogin:\", \"assword:\"，sendQ是发送队列：\"myusername\", \"mypwd\" if (expTest != null) { bq.add(buf, recv); //由于buf是定长数组，其中会有很多0，所以add的第二个参数len标示了有效数据的长度很重要 if (bq.contains(expTest)) { String exp = expQ.poll() + \"\\r\\n\"; // 一定不要忘了加回车！ String send = sendQ.poll() + \"\\r\\n\"; nos.write(send.getBytes(\"UTF-8\")); nos.flush(); } } } 打印字节数组内容（调试时很有用） public static String bytes2HexString(byte[] b) { String ret = \"\"; for (int i = 0; i < b.length; i++) { String hex = Integer.toHexString(b[i] & 0xFF); if (hex.length() == 1) { hex = '0' + hex; } ret += hex.toUpperCase(); } return ret; }","tags":"Tech","url":"http://leetschau.github.io/zi-dong-deng-lu-de-shi-xian-fang-fa.html","loc":"http://leetschau.github.io/zi-dong-deng-lu-de-shi-xian-fang-fa.html"},{"title":"socket closed异常形成原因","text":"多个线程中的一个如果调用了socket.close()方法，其他线程在进行读/写时会出现socket close异常，例如： java.net.SocketException: socket closed at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at java.net.SocketInputStream.read(SocketInputStream.java:90) at server. UserListener .run(UserListener.java:36) at java.lang.Thread.run(Thread.java:662) 下面是对应的代码，父线程在执行完任务后sock.close()关闭了socket，导致south线程中uin（sock的InputStream）运行read()方法时出现socket close异常： 父线程： uin = sock.getInputStream(); uout = sock.getOutputStream(); Runnable south = new UserListener (uin, nos); new Thread(south, \"south\").start(); ... sock.close(); south线程： public class UserListener implements Runnable { @Override public void run() { ... recv = uin.read(buf); //异常抛出点 ...","tags":"Tech","url":"http://leetschau.github.io/socket-closedyi-chang-xing-cheng-yuan-yin.html","loc":"http://leetschau.github.io/socket-closedyi-chang-xing-cheng-yuan-yin.html"},{"title":"Android手机安装软件方法","text":"USB连接： 手机连接USB； 启动豌豆荚； WiFi连接方式： 下载：下载安装包（apk文件）到电脑上，例如通过豌豆荚； 传输：推荐使用USB传输文件，另外可以用蓝牙位置连接手机； 发送：找到文件，右键->发送到->蓝牙； 安装：手机收到apk文件后会询问是否安装； 注：WiFi方式下用豌豆荚连接手机总连不上，原因不明；","tags":"Tech","url":"http://leetschau.github.io/androidshou-ji-an-zhuang-ruan-jian-fang-fa.html","loc":"http://leetschau.github.io/androidshou-ji-an-zhuang-ruan-jian-fang-fa.html"},{"title":"Java多线程间的数据共享","text":"下面的程序演示了一个对象被两个线程访问的方法，\"monitor.gotMessage();\"这一句虽然是monitor对象的方法，但却是运行在\"MyObject\"的线程里，而不是\"monitor\"线程里。 BusyWaiting . java : public class BusyWaiting { public static void main ( String [] args ) { Monitor monitor = new Monitor (); MyObject o = new MyObject ( monitor ); new Thread ( o , \" MyObject \" ) . start (); new Thread ( monitor , \" monitor \" ) . start (); System . out . println ( \"main thread exit...\" ); } } MyObject . java import java.util.concurrent.TimeUnit ; public class MyObject implements Runnable { private final Monitor monitor ; public MyObject ( Monitor monitor ) { this . monitor = monitor ; } public void run () { try { TimeUnit . SECONDS . sleep ( 3 ); System . out . println ( \"i'm going.\" ); monitor . gotMessage (); } catch ( InterruptedException e ) { e . printStackTrace (); } } } Monitor . java public class Monitor implements Runnable { private volatile boolean go = false ; public void gotMessage () throws InterruptedException { go = true ; } public void watching () { while ( go == false ); System . out . println ( \"He has gone.\" ); } public void run () { watching (); } } 另外采用 MyObject o = new MyObject ( monitor ); new Thread ( o , \" thread1 \" ). start (); new Thread ( o , \"thread2\" ). start (); 也是一种常用的多个线程共享数据的方式，","tags":"Tech","url":"http://leetschau.github.io/javaduo-xian-cheng-jian-de-shu-ju-gong-xiang.html","loc":"http://leetschau.github.io/javaduo-xian-cheng-jian-de-shu-ju-gong-xiang.html"},{"title":"测试JDK32位还是64位","text":"Main.java: public class Main{ public static void main(String[] args){ String arch = System.getProperty(\"sun.arch.data.model\"); System.out.println(arch); } }","tags":"Tech","url":"http://leetschau.github.io/ce-shi-jdk32wei-huan-shi-64wei.html","loc":"http://leetschau.github.io/ce-shi-jdk32wei-huan-shi-64wei.html"},{"title":"Wireshark使用笔记","text":"Wireshark的配置主要有两个，分别是capture filter和display filter，前者决定抓哪些包，后者决定在所有抓取的包里显示哪些包，以监控本机和服务器的Telnet交互过程为例，capture filter中配置：host 10.0.2.47，display filter中配置：telnet。这样就只显示telnet包，TCP包会被隐藏起来。","tags":"Tech","url":"http://leetschau.github.io/wiresharkshi-yong-bi-ji.html","loc":"http://leetschau.github.io/wiresharkshi-yong-bi-ji.html"},{"title":"使用Eclipse下载CRaSH源代码","text":"Eclipse for Java Developers (Juno)本身有一个eGit组件，通过它可以直接从Git源码库中下载源代码，以下载 CRaSH 为例说明： 从主页上的\"Develop: GitHub\"找到 源码页 ，得到此项目的GitHub地址是：https://github.com/vietj/crash.git； Eclipse -> Import -> Git -> Projects from Git -> URI -> https://github.com/vietj/crash.git （Host和Repo path是自动解析出来的，下面的所有参数都不变） 选好本地的下载位置（不要在Workspace中，因为后面还要导入），一路Next即可。 到这一步只是将源码下载到本地，要在Eclipse里引入此项目，还需要继续下面的导入过程： Eclipse -> Maven -> Existing maven projects，选择刚才下载的位置，导入即可，","tags":"Tech","url":"http://leetschau.github.io/shi-yong-eclipsexia-zai-crashyuan-dai-ma.html","loc":"http://leetschau.github.io/shi-yong-eclipsexia-zai-crashyuan-dai-ma.html"},{"title":"用ObjectAid生成Java代码的类图","text":"ObjectAid是一款比较好用的Java逆向工程工具（类似工具的比较见 自动生成Java类图工具比较 ），以下是使用方法。 创建基于Java代码的类图 1. 安装objectaid插件：将objectaid-1.0.9.zip解压到 \\(ECLIPSE_HOME/dropins/\\) OBJECTAID_PLUGIN_NAME下，目录结构如下： 启动Eclipse，File -> New -> Other -> ObjectAid UML Diagram -> Next \"Folder\"后写上保存类图的位置，\"Name\"后面写类图的名字； 下面的选项里勾选上感兴趣的项目，其中\"Relationships\"中各项的含义见后面的说明； \"Finish\"。 打开新生成的类图文件（.ucls），将感兴趣的类文件拖入ucls文件窗口中（详细使用方法见ObjectAid官网上 如何生成类图的说明 ）； 对Relationships的说明（与标准UML中的术语不尽一致，如何对应以后再细分析， 继承(Generalization)：实线三角，子类/接口（Shell）指向父类/接口（ConnectionListener）； public interface Shell extends ConnectionListener 实现(Realization)：虚线三角，源类（DummyShell）实现目标接口（Shell）； public class DummyShell implements Shell 关联(Association)：实线箭头，源类（Connection）的一个field（m_NextShell）的类型是目标类/接口（Shell）； public class Connection { ... private Shell m_NextShell; 嵌入(Nesting)：如下图，内部类（IACHandler）嵌入到外部类（TelnetIO）中； public class TelnetIO { class IACHandler { ... 依赖(Dependencies)：虚线箭头，源的方法中出现了目标类对象； public class ShellManager { public Shell getShell(String key) { Shell myShell = null; ... 以上示例代码来自 Java Telnet daemon (wimpi)。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-objectaidsheng-cheng-javadai-ma-de-lei-tu.html","loc":"http://leetschau.github.io/yong-objectaidsheng-cheng-javadai-ma-de-lei-tu.html"},{"title":"CRaSH安装笔记","text":"CRaSH 可以作为JMX技术的替代品，它有3种运行模式：Web archive deployment, Standalone & Attach, 第一种是作为一个web app，通过web server(tomcat, jboss)运行，第二种是直接运行$CRASH_HOME\\crash\\bin\\crash.bat，第三种是crash.bat后面加上目标JVM进程的PID，专门用来分析特定的进程。无论哪种方式，都需要jdk版本不低于1.6，在1.5上运行会报错。 如果以第一种方式运行，步骤如下： 将crsh-1.0.0.tar.gz\\deploy\\gatein\\crash.war拷贝到f:\\Software\\apache-tomcat-6.0.18\\webapps下； 确定tomcat使用的jdk版本：如果默认jdk版本是1.5，可以在$TOMCAT_HOME\\bin\\startup.bat中加上 set JAVA_HOME=f:\\Software\\jdk1.6.0_27 set PATH=%JAVA_HOME%\\bin 修改$TOMCAT_HOME\\conf\\tomcat-users.xml，在 < tomcat-users > 之间增加： < role rolename =\" manager \" /> < user username =\" tomcat \" password =\" tomcat \" roles =\" manager \" /> 启动tomcat（运行$TOMCAT_HOME\\bin\\startup.bat），浏览器中输入：http://localhost:8080/，点击\" Tomcat Manager \"，用户名和密码都是tomcat，进入管理页面，如果Applications一节中CRaSH的Running状态是True，说明安装成功： 连接CRaSH服务：telnet localhost 5000，出现CRaSH欢迎界面：","tags":"Tech","url":"http://leetschau.github.io/crashan-zhuang-bi-ji.html","loc":"http://leetschau.github.io/crashan-zhuang-bi-ji.html"},{"title":"Eclipse各个版本之间的比较","text":"Eclipse有很多版本（见 下载页面 ）， 彼此之间的比较 表明RCP(227MB)功能最全，MDT(264MB)只有两个功能（且完全被RCP覆盖），尺寸却比RCP大，为什么？ 第一次还没看明白，后来才发现这个比较表格的行是某项功能，列是不同的package，这样可以发现RCP的那个没有MDT多，所以尺寸也就小一些； 根据这张表，由于XML是必须的一项功能，所以Eclipse IDE for Java Developers这个package加上ObjectAid（提供java代码到类图的自动转换）应该是一个不错的组合，如果需要采用设计驱动的开发方式，使用Eclipse Modeling Tools也不错，但没有XML功能。","tags":"Tech","url":"http://leetschau.github.io/eclipsege-ge-ban-ben-zhi-jian-de-bi-jiao.html","loc":"http://leetschau.github.io/eclipsege-ge-ban-ben-zhi-jian-de-bi-jiao.html"},{"title":"自动生成Java类图工具比较","text":"ObjectAid : Eclipse插件，免费版只能生成类图，功能不错，可以用dropins方式离线安装（需要预先安装 GEF ）； EssModel : 独立运行，绿色软件，为java和delphi代码自动生成类图，功能还不错，有丢关系的现象； MoDisco : 只能在线安装，没有试用； BOUML : 可以运行在windows和CentOS上，付费软件，未试用； ModelGoon UML4Java : 不支持Eclipse 3.7； Architexa : 付费软件，没有试用； AgileJ : 付费软件，没有试用； nWire 收费，功能很好 貌似Eclipse的MDT也有这种功能，有待确认； Netbeans和IntelliJ也都有生成类图的插件，而不是内置功能，没有试用。","tags":"Tech","url":"http://leetschau.github.io/zi-dong-sheng-cheng-javalei-tu-gong-ju-bi-jiao.html","loc":"http://leetschau.github.io/zi-dong-sheng-cheng-javalei-tu-gong-ju-bi-jiao.html"},{"title":"JDK日志模块使用方法","text":"今天尝试使用JDK自带的日志模块打印日志，过程如下： 使用类： public class LoginTest { Logger logger = Logger.getLogger(this.getClass().getName()); @Before public void setup() throws SecurityException, IOException { logger.info(\"hello logger\"); } ... } 配置文件(logging.properties)： handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler .level= INFO java.util.logging.FileHandler.pattern = ./log/myapp.%g.log java.util.logging.FileHandler.limit = 50000 java.util.logging.FileHandler.count = 5 java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter java.util.logging.ConsoleHandler.level = ALL java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter 运行方法： $ java -Djava.util.logging.config.file=./conf/logging.properties LoginTest 使用虚拟机参数指定配置文件的位置，这是与其他log框架（e.g. Log4j, logback）用法不同的地方； 另外：上面将日志文件放在log文件夹里，经试验发现，log文件夹 必须预先创建好 ，否则日志文件将不能生成！ 也可以在Java代码中指定FileHandler的特性： FileHandler handler = new FileHandler(\"myapp.log\", 1024, 5, true); handler.setFormatter(new SimpleFormatter()); logger.addHandler(handler); logger.info(server.response()); 但一般情况下配置文件灵活性更好； FileHandler.pattern中的特殊符号（e.g. %h, %g, etc）含义可参看 JDK6文档 中FileHandler类的说明；","tags":"Tech","url":"http://leetschau.github.io/jdkri-zhi-mo-kuai-shi-yong-fang-fa.html","loc":"http://leetschau.github.io/jdkri-zhi-mo-kuai-shi-yong-fang-fa.html"},{"title":"Design Driven Test Notes","text":"设计驱动测试（DDT）与 ICONIX 过程紧密联系，Doug Rosenberg & Matt Stephens: \"Use Case Driven Object Modeling with UML: Theory and Practice\"对此过程进行了说明， 作者的网站 还列出了其他几本ICONIX相关书籍以及资料下载。","tags":"Tech","url":"http://leetschau.github.io/design-driven-test-notes.html","loc":"http://leetschau.github.io/design-driven-test-notes.html"},{"title":"CentOS笔记","text":"定义系统快捷键：System->Preferences->Keyboard shortcuts， 例如可以将启动一个终端窗口（Run a terminal）定义为alt+0； Firewall 启动系统防火墙：service iptables start 关闭系统防火墙： service iptables save service iptables stop chkconfig iptables off Package Management 列出可以repo: yum repolist 搜索可用源： yum search <package_name> 安装： rpm -ivh <package_name> （或者图形界面中双击rpm文件） 卸载：首先查看要卸载的包的确切名字： rpm -qa|grep <package_name> ， 然后r pm -e <package_name> 下面以卸载BOUML为例说明： [ chad@bogon ~ ] $ rpm - qa | grep bouml bouml - 5.1.4 - 1. i686 [ root@bogon chad ] # rpm - e bouml - 5.1.4 - 1. i686 [ root@bogon chad ] # bouml bash : bouml : command not found 修改CentOS repo: /etc/yum.repos.d/ 下的文件定义了yum的源列表， 如果 yum update 报没有更新源，可能是repo被关闭了， 修改这个文件夹中 *.repo 文件中的 baseurl 和 enabled 属性。 Ref: RPM Command: 15 Examples to Install, Uninstall, Upgrade, Query RPM Packages","tags":"Tech","url":"http://leetschau.github.io/centosbi-ji.html","loc":"http://leetschau.github.io/centosbi-ji.html"},{"title":"使用DVD作为vmware上CentOS的软件安装源","text":"与网络安装相比，DVD安装的优点是不受网络限制，安装速度快， VMWare上的CentOS用DVD安装软件的前提是能够挂接上DVD（ISO）文件，需要在虚拟机配置项的Hardware->CD/DVD项中选择\"use ISO image file:\"， 选中ISO文件，然后勾选\"Device Status\"下面的两项：\"Connected\"和\"Connected at power on\"，如下图： 需要安装软件时，将rpm文件从DVD中拷贝到本地目录中双击运行，或者通过修改配置的方法使yum命令指向DVD而不是网络： 确认DVD上有repodata/repomd.xml文件，此文件的全路径为：/media/CentOS_6.2_Final/ repodata/repomd.xml， 根据它修改/etc/yum.repos.d中的CentOS-Base.repo和CentOS-Media.repo两个文件， Base是首选文件，所以将其改名为CentOS-Base.repo.bak，然后将Media中的baseurl改为\"file:///media/CentOS_6.2_Final/\"， 即DVD的repomd.xml路径中repodata之前的部分，enabled值改为1。 安装Telnet客户端： rpm -qa|grep telnet 查看是否已安装telnet。 如果没有，用\"yum install telnet\"安装之，这个只是Telnet Client，Server最好不要装，安全性差， CentOS 6.2默认安装了SSH Server（用rpm -qa|grep ssh验证），完全可以取代Telnet Server。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-dvdzuo-wei-vmwareshang-centosde-ruan-jian-an-zhuang-yuan.html","loc":"http://leetschau.github.io/shi-yong-dvdzuo-wei-vmwareshang-centosde-ruan-jian-an-zhuang-yuan.html"},{"title":"包名不要与已有模块名一致","text":"例如项目新建了一个名为pexpect的package，下面新建了名为client的module，才其中使用\"import pexpect\"导入pexpect会出错，因为python认为导入的是package，而不是python模块。","tags":"Tech","url":"http://leetschau.github.io/bao-ming-bu-yao-yu-yi-you-mo-kuai-ming-yi-zhi.html","loc":"http://leetschau.github.io/bao-ming-bu-yao-yu-yi-you-mo-kuai-ming-yi-zhi.html"},{"title":"Linux上中文乱码问题的解决办法","text":"中文出现乱码，首先需要查看字符串编码和解码的方法是否一致， 其次检查Linux的LANG环境变量中的编码是否匹配程序的编解码方法。 建议统一编码为UTF-8，对应的bash脚本：export LANG=zh_CN.UTF-8 编码是字符串转换为字节数组（二进制串），解码是逆过程， charset指定了其中转换/逆转换的方式（见 字符编解码的故事 ）。就Java而言， 用指定的charset（例如UTF-8）对字符串编码用 byte[] dst = input_string.getBytes(\"UTF-8\"); 实现， 解码用\"String dst = new String(input_byte_array, \"UTF-8\");\"实现； 如果编码使用 byte[] dst = input_string.getBytes() ，则具体的编码方式依赖于操作系统， 存在编码错误的风险，解码用 String dst = new String(input_byte_array); 也存在解码错误的风险， 所以在编/解码过程中最好明确指定使用的charset。 下面的代码将字节数组转换为16进制字节码字符串，以便观察不同的charset如何影响生成的字节码。 public class MQReceiver { public static void main ( String [] args ) { byte [] buf = mq . recvTextMessage () ; // receive msg from mq if ( buf != null ) { String hexRes = bytes2HexString ( buf ) ; System . out . println ( hexRes ) ; System . out . println ( getChnBytes ( hexRes )) ; String bufstr = new String ( buf , \" UTF-8 \" ) ; System . out . println ( \" Recv alarm: \" + bufstr ) ; } else { System . out . println ( \" buf: \" + buf ) ; } } public static String bytes2HexString ( byte [] b ) { String ret = \"\" ; for ( int i = 0 ; i < b.length; i++) { String hex = Integer . toHexString ( b [ i ] & 0 xFF ) ; if ( hex . length () == 1 ) { hex = ' 0 ' + hex ; } ret += hex . toUpperCase () ; } return ret ; } public static String getChnBytes ( String input ) { String sflag = \" <FM_ALARM_MSG.AlarmText> \" ; String eflag = \" </FM_ALARM_MSG.AlarmText> \" ; byte [] start = sflag . getBytes () ; byte [] end = eflag . getBytes () ; String ss = bytes2HexString ( start ) ; String se = bytes2HexString ( end ) ; int beginIndex = input . indexOf ( ss ) + ss . length () ; int endIndex = input . indexOf ( se ) ; return input . substring ( beginIndex , endIndex ) ; } } 其中getChnBytes方法从下面的字符数组中找到汉字，提取出来，以便于观察汉字部分编码的变化， <FM_ALARM_MSG.EventTime> 2012-06-20 14:39:51 </FM_ALARM_MSG.EventTime> <FM_ALARM_MSG.AlarmText> 检查数据库连接产生异常 </FM_ALARM_MSG.AlarmText><C_FP0></C_FP0> 例如UTF-8的\" 检查数据库连接产生异常\"编码输出如下： E6A380 E69FA5 E695B0 E68DAE E5BA93 E8BF9E E68EA5 E4BAA7 E7949F E5BC82 E5B8B8 注： 快典网 可以在线查看汉字的各种编码。","tags":"Tech","url":"http://leetschau.github.io/linuxshang-zhong-wen-luan-ma-wen-ti-de-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/linuxshang-zhong-wen-luan-ma-wen-ti-de-jie-jue-ban-fa.html"},{"title":"Java整数手工编码实例","text":"Kenneth L. Calvert & Michael J. Donahoo: TCP/IP Sockets in Java - Practical Guide for Programmers(Second Edition), Chapter 3, BruteForceCoding.java要解决的问题是：对于一个整数（byte, int, short或者 long），怎么编码为二进制流以便于网络传输？接收端又应该如何解码？下面这个测试是对这个程序中对int数编码的进一步说明： @Test public void testShift4() { int input = 100000001; byte high8bits = (byte) (input >> ((4 - 0 - 1) * Byte.SIZE)); assertEquals(high8bits, 5); byte secondHigt8bits = (byte) (input >> ((4 - 1 - 1) * Byte.SIZE)); assertEquals(secondHigt8bits, -11); byte thirdHigh8bits = (byte) (input >> ((4 - 2 - 1) * Byte.SIZE)); assertEquals(thirdHigh8bits, -31); byte low8bits = (byte) (input >> ((4 - 3 - 1) * Byte.SIZE)); assertEquals(low8bits, 1); System.out.println(\"input is: \" + Integer.toHexString(input)); System.out .println(\"left 8 bits are: \" + Integer.toHexString(high8bits)); System.out.println(\"2nd 8 bits are: \" + Integer.toHexString(secondHigt8bits)); System.out.println(\"3rd 8 bits are: \" + Integer.toHexString(thirdHigh8bits)); System.out .println(\"right 8 bits are: \" + Integer.toHexString(low8bits)); System.out.println(\"input is: \" + Integer.toBinaryString(input)); System.out.println(\"left 8 bits are: (00000)\" + Integer.toBinaryString(high8bits)); String secondHigt8bitsStr = Integer.toBinaryString(secondHigt8bits); System.out .println(\"2nd 8 bits are: \" + secondHigt8bitsStr.substring(secondHigt8bitsStr .length() - 8)); String thirdHigh8bitsStr = Integer.toBinaryString(thirdHigh8bits); System.out.println(\"3rd 8 bits are: \" + thirdHigh8bitsStr.substring(thirdHigh8bitsStr.length() - 8)); System.out.println(\"right 8 bits are: (0000000)\" + Integer.toBinaryString(low8bits)); } 运行结果： input is: 5f5e101 left 8 bits are: 5 2nd 8 bits are: fffffff5 3rd 8 bits are: ffffffe1 right 8 bits are: 1 input is: 101111101011110000100000001 left 8 bits are: (00000)101 2nd 8 bits are: 11110101 3rd 8 bits are: 11100001 right 8 bits are: (0000000)1 可以看到BruteForceCoding.java使用了右移的方法进行编码，从左至右，每次取一个字节，如果使用ByteBuffer，编码为：使用int buffer，编码为： 由此可见Java的ByteBuffer和int buffer是如何简化我们工作的。","tags":"Tech","url":"http://leetschau.github.io/javazheng-shu-shou-gong-bian-ma-shi-li.html","loc":"http://leetschau.github.io/javazheng-shu-shou-gong-bian-ma-shi-li.html"},{"title":"关于Web的几个概念","text":"Web 是 Internet 上的一个文档系统，为了使用Web，首先要有 Web Server （以 Web Service 的形式）接收用户浏览器（ Web Browser ）发出的连接请求并予以反馈，Web Server接收到请求后解码，并转发给 Web Application （可以理解为一个运行在Web上的，可以用浏览器使用的应用程序），后者进行业务逻辑处理，返回结果给Web Server，再返回到用户浏览器中。 WSGI 起到了Web Server和Web Application之间的桥梁的作用，它是一个Python语言规范，类似于一个Protocol。 Application Server（例如 GlassFish ）提供的是业务解决方案（Web Server是基于HTTP协议处理用户请求），它与Web Server的区别见： Web服务器和应用服务器的区别 App server, Web server: What's the difference? Application Server vs Web Server","tags":"Tech","url":"http://leetschau.github.io/guan-yu-webde-ji-ge-gai-nian.html","loc":"http://leetschau.github.io/guan-yu-webde-ji-ge-gai-nian.html"},{"title":"nginx+SimpleHTTPServer on Windows集群搭建","text":"使用两台windows机器做集群节点，其中一台同时作为代理服务器（集群入口），搭建过程如下： 根据笔记 GODU as Web Service 的 SimpleHTTPServer + Ajax实现 在10.31.1.71和10.31.1.190两台机器上分别搭建HTTP Server，将入口html文件命名为index.html； 解压nginx for windows 安装包（ nginx-1.3.1.zip ），修改conf/nginx.conf文件（需要手工配置的地方用粗体标出）： http { ... keepalive_timeout 65; upstream leechau.org { server 10.31.1.190:8080; server 10.31.1.71:8080; } ... server { listen 8123 ; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; proxy_pass http://leechau.org; proxy_redirect default; } ... } } 上面upstream中配的是节点的IP和端口，location中的proxy_pass和proxy_redirect表明nginx用作代理服务器，如果节点的html入口不是index.html，可以在location->index后面配置； 启动nginx； 连接http://127.0.0.1:8123可以看到不断轮流加载两个页面的，表明集群搭建成功，upstream和proxy_pass后面的leechau.org没有起作用，估计是没有配DNS。 参考： Windows上搭个Nginx集群环境玩玩","tags":"Tech","url":"http://leetschau.github.io/nginxsimplehttpserver-on-windowsji-qun-da-jian.html","loc":"http://leetschau.github.io/nginxsimplehttpserver-on-windowsji-qun-da-jian.html"},{"title":"一个logback文件为多个应用配置日志的方法","text":"开发产品时一个进程对应一个开发项目，一个项目对应一个日志配置，这是best practice，但有时一个（Eclipse中的）开发项目中包含了多个应用（分别多个进程运行），共享一个配置文件，但生成的日志要分开放在不同的文件里，应该怎么办？假设项目中包括A和B两个应用，B的代码都在com.foo包及子包（com.foo开头的包，如com.foo.bar）中。 方式1：完全分开 <configuration> <appender name= \"CONSOLE\" ... /> <appender name= \"APP_A\" ... /> <appender name= \"APP_B\" ... /> <logger name= \"com.foo\" additivity= \"false\" level= \"INFO\" > <appender-ref ref= \"CONSOLE\" /> <appender-ref ref= \"APP_B\" /> </logger> <root level= \"DEBUG\" > <appender-ref ref= \"CONSOLE\" /> <appender-ref ref= \"APP_A\" /> </root> </configuration> 方式2 ：A包含B <configuration> <appender name= \"CONSOLE\" ... /> <appender name= \"APP_A\" ... /> <appender name= \"APP_B\" ... /> <logger name= \"com.foo\" additivity= \"true\" level= \"INFO\" > <appender-ref ref= \"APP_B\" /> </logger> <root level= \"DEBUG\" > <appender-ref ref= \"CONSOLE\" /> <appender-ref ref= \"APP_A\" /> </root> </configuration> 方式2与方式1相比，屏幕输出（即CONSOLE的行为）完全一样，各自输出各自的，但APP_A关联的日志文件中将包含A和B所有的日志。","tags":"Tech","url":"http://leetschau.github.io/yi-ge-logbackwen-jian-wei-duo-ge-ying-yong-pei-zhi-ri-zhi-de-fang-fa.html","loc":"http://leetschau.github.io/yi-ge-logbackwen-jian-wei-duo-ge-ying-yong-pei-zhi-ri-zhi-de-fang-fa.html"},{"title":"How to name a slf4j logger","text":"Use logger in a non-static context: Logger logger = LoggerFactory.getLogger(this.getClass().getName()); Use logger in a static context(for example in main() method): static Logger logger = LoggerFactory.getLogger(TheWrapperClassName.class); Method 1 is prefered, because it has no hard-coding for class name. static final Logger logger = Logger.getLogger(new Throwable() .getStackTrace()[0].getClassName()); maybe a solution, but may slown down the app.","tags":"Tech","url":"http://leetschau.github.io/how-to-name-a-slf4j-logger.html","loc":"http://leetschau.github.io/how-to-name-a-slf4j-logger.html"},{"title":"Eclipse项目中JDK的版本","text":"JDK6编译出来的class文件不能运行在JDK5的虚拟机上，因此用Eclipse开发/运行/打包项目时要注意Java编译器的版本，有3个位置（范围从大到小）会影响Java编译器的版本： Eclipse级全局JRE：Window->Preferences->Java->Installed JREs; 项目级JRE：Project->Properties下的： Build Path -> Libraries -> JRE System Library; Java Compiler -> JDK Compliance; Run/Debug Configuration级JRE: 在这个Configuration的\"JRE\"标签页中设置； 确定class文件版本的方法是查看class文件的第7个字节： 0x31-> JDK5, 0x32 ->JDK6, 0x33 ->JDK7; class文件格式的详细介绍见 Java class file .","tags":"Tech","url":"http://leetschau.github.io/eclipsexiang-mu-zhong-jdkde-ban-ben.html","loc":"http://leetschau.github.io/eclipsexiang-mu-zhong-jdkde-ban-ben.html"},{"title":"PHP开发环境搭建","text":"2017.8.23 Windows 安装PHP命令行： choco install php 交互式命令行： php - v php - a echo 'hello world' ; $ myv = 33 * 24 ; echo $ myv ; quit 运行内置web server: cat index.php <html> <head> <title> My Demo Page </title> </head> <body> <?php echo '<h1>Hello World, haha</h1>' ?> </body> </html> php -S 0.0.0.0:4000 在浏览器里打开 localhost:4000 . 2012.5.30 Web Server 首先试用了EasyPHP ，在台式机上安装后出现异常退出，似乎是C编译器版本不匹配所致， 又试用了 WampServer，启动后报\"403 Forbidden\"错误，没有访问权限， 解决的话自己要配perl，这产品太牛叉了， 最后试用了xampp ，不需要安装，解压后即可运行，开始报443端口被占用， 将 \\(XAMPP_DIR\\apache\\conf\\extra\\httpd-ssl.conf中Listen 443改为4430， $XAMPP_DIR\\apache\\conf/httpd.conf中Listen 80改为8000后运行 $XAMPP_DIR\\xampp_start.exe（80端口似乎被占用了，启动总不成功）， 连接localhost:8000成功，启动Apache实际上是运行\\) XAMPP_DIR\\apache\\bin\\httpd.exe， 启动MySql实际上是运行$XAMPP_DIR\\mysql\\bin\\mysqld.exe，通过Windows任务管理器可以分别看到这两个进程； HelloWorld 在$XAMPP_DIR/htdocs下建立文件夹phpEx，下面建立文件helloworld.php，内容如下： <html> <head><title> Yes I Do! </title></head> <body> <? echo \"Hello lord\" ; ?> <br> <b> <? echo \"Hello World!\" ?> </b><br> <i> <? echo \"Hello World!\" ?> </i><br> <u> <? echo \"Hello World!\" ?> </u><br> <font color= FF0000 > <? echo \"Hello World!\" ?> </font><br> <font color= 00FF00 > <? echo \"Hello World!\" ?> </font><br> <font color= 0000FF > <? echo \"Hello World!\" ?> </font><br> </body> </html> 浏览器中输入：http://localhost:8000/phpEx/helloworld.php，看到如下效果： 参考\"Start writing PHP code using XAMPP\". IDE Netbeans 6.9.1 with PHP plugin 安装调试器xdebug 安装 xdebug ，安装方法见xdebug 官网的 documentation , Install 一节， 下载哪个dll可以在线查询，很方便，安装完后用\" F:\\Software\\xampp\\php> php -m \"验证， 如果最后面有如下输出说明安装成功： [ Zend Modules ] Xdebug 在helloworld.php中加入下面的代码： <?php function fix_string($a) { echo \"Called @ \". xdebug_call_file(). \":\". xdebug_call_line(). \" from \". xdebug_call_function(); } $ret = fix_string(array('Derick')); header( \"X-Test\", \"Testing\" ); setcookie( \"TestCookie\", \"test-value\" ); var_dump( xdebug_get_headers() ); ?> 刷新http://localhost:8000/phpEx/helloworld.php，结果如下： 修改php文件后直接刷新页面即可看到效果，无需重启web server。 在NetBeans中调试 NetBeans调试PHP的方式是：只要一个php文件里加入了断点，且NetBeans处于运行状态， 在浏览器里打开这个页面时NetBeans会自动激活进入调试窗口。 Debugging PHP Source Code in the NetBeans IDE 给出了详细说明，断点行用红色标出， 当前运行行用绿色标出，变量（Variable）窗口里显示了当前变量： Customize NetBeans 界面改为英文：在netbeans.conf的netbeans_default_options的值后面追加 \"-J-Duser.language=zh -J-Duser.country=US\"，第一个参数要求netbeans支持中文字符， 第二个选项将界面语言改为英文（参考 Netbeans 6.0 设置为英文界面 ）； 代码格式化：Main Menu -> Source -> Format； 界面字体和字号：Main Menu -> Tools -> Options -> Fonts & Colors; if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/phpkai-fa-huan-jing-da-jian.html","loc":"http://leetschau.github.io/phpkai-fa-huan-jing-da-jian.html"},{"title":"Windows中删除文件关联","text":"使用TotalCMD查看jar文件内容很方便，但安装了java后安装程序将jar的文件关联改成了java， 导致双击jar文件后不是进入jar文件内部，而是用java.exe运行这个jar，想要查看内容还得用7zip打开， 很麻烦，解决方法是删除jar文件与java.exe的关联，最简单的方法是在命令行里输入： assoc .jar= 如果要删除扩展名为abc的关联，执行\"assoc .abc=\"即可，在Win7上验证通过。","tags":"Tech","url":"http://leetschau.github.io/windowszhong-shan-chu-wen-jian-guan-lian.html","loc":"http://leetschau.github.io/windowszhong-shan-chu-wen-jian-guan-lian.html"},{"title":"基于Eclipse+Pydev的Python开发环境","text":"Django开发 安装Pydev后可以新建Django项目，Ctrl+2+dj运行django项目；运行python module快捷键：F9，运行unittest快捷键：Ctrl+F9；","tags":"Tech","url":"http://leetschau.github.io/ji-yu-eclipsepydevde-pythonkai-fa-huan-jing.html","loc":"http://leetschau.github.io/ji-yu-eclipsepydevde-pythonkai-fa-huan-jing.html"},{"title":"Apache commons-io的字符串编解码问题","text":"用Apache org.apache.commons.io.input.Tailer监控日志文件变化很方便，但如果文件中有中文，回调函数TailerListener.handle中参数line是乱码，原因是目前的Tailer是按\"西欧语言\"（ISO8859-1）对日志文件进行解码的，而日志文件一般是用GBK或者UTF-8编码。解决方法是对line用ISO8859-1再进行一次编码得到原始的字节数组，然后用日志文件的格式进行解码，这样最终得到的字符串就OK了。实现方法如下： 服务类： ... LogMonitorListener lml = new LogMonitorListener(); Tailer lmt = new Tailer(logfile, lml, 3000); ... lmt.run(); 监听器类： public class LogMonitorListener extends TailerListenerAdapter { ... @Override public void handle(String line) { msg = new String(line.getBytes(\"ISO8859-1\"), \"GBK\") ; //用来处理GBK格式的日志 msg = new String(line.getBytes(\"ISO8859-1\"), \"UTF-8\") ; //用来处理UTF-8格式的日志 ...","tags":"Tech","url":"http://leetschau.github.io/apache-commons-iode-zi-fu-chuan-bian-jie-ma-wen-ti.html","loc":"http://leetschau.github.io/apache-commons-iode-zi-fu-chuan-bian-jie-ma-wen-ti.html"},{"title":"Django报\"ascii codec can't decode byte ... ordinal not in range 128\"错误解决方法","text":"下午在Django里连接telnet服务器，总报\"ascii codec can't decode byte ... ordinal not in range 128\"错误，参考，发现是由于Python2.x telnetlib的连接参数要求是str类型，但Django里所有的字符串都是unicode，二者不兼容导致上述错误，解决方法是用Django提供的smart_str()方法将unicode转换为str： from neconnector.models import Channel from django.utils.encoding import smart_str import telnetlib def translate_str(input): return smart_str(input, encoding='utf-8', strings_only=False, errors='strict') ch = get_object_or_404(Channel, pk=conn_id) #从数据库里取出unicode类型对象 ip = translate_str(ch.ip) # 转换为str tn = telnetlib.Telnet(ip) ... 同理，写入数据库时需要用smart_unicode方法做逆向转换。","tags":"Tech","url":"http://leetschau.github.io/djangobao-ascii-codec-cant-decode-byte-ordinal-not-in-range-128cuo-wu-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/djangobao-ascii-codec-cant-decode-byte-ordinal-not-in-range-128cuo-wu-jie-jue-fang-fa.html"},{"title":"基于Notepad++的Django开发环境","text":"Notepad++(np++) 6.1.3, plugin: TagsView & Light Explorer font: consolas 12 color theme: zenburn hotkey: activate tagview: alt-g; light explorer: alt-a; editor: not find yet 关于np++的配置系统，参考 NpWiki++ 上的 Notepad++'s configuration files 一节。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-notepadde-djangokai-fa-huan-jing.html","loc":"http://leetschau.github.io/ji-yu-notepadde-djangokai-fa-huan-jing.html"},{"title":"Django Tutorial Note","text":"以下是Django官网 Tutorial 的笔记。 create project E:\\MyDoc\\DjangoFiles> set PATH=%PATH%;F:\\Software\\Python27\\Scripts E:\\MyDoc\\DjangoFiles> django-admin.py startproject mysite （在命令执行的当前目录下生成polls目录结构） start project server python manage.py runserver （默认绑定8000端口，可用\"python manage.py runserver 8001\"指定其它server端口号） verify: http://localhost:8000 datebase setup mysite.settings.py: DATABASES = ... and TIME_ZONE = ... manage syncdb （为project级应用建立数据表） create app python manage.py startapp polls （在命令执行的当前目录下生成polls目录结构） mysite.settings.py: INSTALLED_APPS = ( ..., 'polls') 定义数据模型 polls.models.py: class Poll(models.Model): ... python manage.py sql polls （显示生成数据库的脚本） python manage.py syncdb （执行生成数据库的脚本） 可用python manage.py shell查看数据模型； url到python函数的过程 1. mysite.settings.py: ROOT_URLCONF = 'mysite.urls' mysite.urls.py: urlpatterns = patterns('', url ( r '&#94;polls/(?P<poll_id>\\d+)/$' , 'polls.views.detail' ), ...) polls.views.py中的detail（回调）函数，返回一个HttpResponse对象，其中可以指定模板，模板根目录在mysite.settings.py.TEMPLATE_DIRS中设置，polls.views.py中的模板参数是模板文件的相对路径（相对于模板根目录）。 整体而言，对于一个app来说，其MVC过程是：models -> urls -> views -> templates，当采用generic views的时候，MVC过程变为：models -> urls -> templates。 设计思想 Project由一组配置和一些app组成，二者之间是多对多关系，app可以复用于多个项目； 在Django的MVC结构中，model代表数据抽象，处理数据库相关事务，view是展现层； 客户端从服务端获取数据用GET，提交数据用POST； MVC in Django: model, template, view","tags":"Tech","url":"http://leetschau.github.io/django-tutorial-note.html","loc":"http://leetschau.github.io/django-tutorial-note.html"},{"title":"Java程序线程死锁分析","text":"Linux平台 jstack工具只对JDK6及以上有效，用jstack分析JDK5程序时报：\"The VM does not support the attach mechanism\"错误； C:\\Users\\chad> jps 1308 DeadLock 4780 Jps C:\\Users\\chad> F:\\Software\\jdk1.6.0_27\\bin\\jstack.exe 1308 2012-05-19 14:45:29 Full thread dump Java HotSpot(TM) Client VM (20.2-b06 mixed mode): ... Found one Java-level deadlock : \"Thread-1\": waiting to lock monitor 0x01adee04 (object 0x03c002d8, a deadlockEx.DeadLock \\(Friend), which is held by \"Thread-0\" \"Thread-0\": waiting to lock monitor 0x01ae0664 (object 0x03c002e8, a deadlockEx.DeadLock\\) Friend), which is held by \"Thread-1\" ... Found 1 deadlock. 测试样例（来自 Deadlock on Java docs ）： package deadlockEx; public class DeadLock { static class Friend { private final String name; public Friend(String name) { this.name = name; } public String getName() { return this.name; } public synchronized void bow(Friend bower) { System.out.format(\"%s: %s\" + \" has bowed to me!%n\", this.name, bower.getName()); bower.bowBack(this); } public synchronized void bowBack(Friend bower) { System.out.format(\"%s: %s\" + \" has bowed back to me!%n\", this.name, bower.getName()); } } public static void main(String[] args) { final Friend alphonse = new Friend(\"Alphonse\"); final Friend gaston = new Friend(\"Gaston\"); new Thread(new Runnable() { public void run() { alphonse.bow(gaston); } }).start(); new Thread(new Runnable() { public void run() { gaston.bow(alphonse); } }).start(); } } HP-UX平台 用gcore （不支持gcore的UX可用gdb ?）生成dump文件，文件名为core. ，用jmap将此文件转为hprof文件，再用visualVM分析； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/javacheng-xu-xian-cheng-si-suo-fen-xi.html","loc":"http://leetschau.github.io/javacheng-xu-xian-cheng-si-suo-fen-xi.html"},{"title":"通过dump文件分析Java程序运行状态","text":"Java程序的快照（dump）分为两种：thread dump, heap dump。前者记录了进程（process）中各线程（Thread）（在CPU中的）运行状态主要用来解决死锁（deadlock）问题，后者记录了Java堆的情况，主要用来分析内存泄露问题。 生成堆dump（heapdump）文件方法 1. 在启动Java程序时添加参数：-XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath= ，完整示例见文末； 启动程序； 用jps或者ps指令找到此程序pid，例如17992； 运行kill -3 ； 在my_dump_path下可以找到生成的dump文件，文件名为java_pid .hprof. ，例如：java_pid17992.hprof.20120519.141323 启动程序的完整脚本： !/bin/sh JARS=\"\" for i in ./*.jar; do JARS=\" \\(JARS\":\\) i done JAVA_OPTS=\"-XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath= \\(HOME/backup\" exec \"\\) /bin/java\" ${JAVA_OPTS} -cp $JARS com.leechau.mina.echoServer.EchoServer 分析dump文件 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/tong-guo-dumpwen-jian-fen-xi-javacheng-xu-yun-xing-zhuang-tai.html","loc":"http://leetschau.github.io/tong-guo-dumpwen-jian-fen-xi-javacheng-xu-yun-xing-zhuang-tai.html"},{"title":"在Linux系统上查找文件","text":"Find命令 格式：find <指定搜索范围> <指定条件> <指定动作> 其中搜索范围是一个目录名，指定条件包括文件名、文件属性（修改时间所属用户等）、所在位置特点（如目录深度等）等；指定动作包括打印（-print）等； 例如：find $HOME -name \"*.sh\"，查找用户根目录下所有以.sh结尾的文件，除了按文件名查找，find还可以按文件大小、类型、所属用户、用户组、修改时间、是否为空等，还可以指定找到文件后要执行的动作， 例如下面第一个指令是找到文件后运行ls命令，第3个指令是查找文件名中有echo且不属于root的文件（可以用!表示取反）： [ godu@goduserver ~ ] $ find . / backup / nep - name \"*echo*\" - ls 124059671 8 - rwxr - xr - x 1 godu godu 192 5 月 19 10 : 59 . / backup / nep / echoServerStart . sh [ godu@goduserver ~ ] $ find . / backup / nep - name \"*echo*\" ! - user godu [ godu@goduserver ~ ] $ find . / backup / nep - name \"*echo*\" ! - user root . / backup / nep / echoServerStart . sh find / proc /< pid >/ fd - type s （ 找所有socket文件 ） 结果为空 ， 用 - type l可知此目录下所有文件都为link文件 。 详见： linux查找文件命令find 引号问题 （2013-9-4更新） find -name 中 是glob格式，而且只匹配文件名，如果想用正则表达式匹配，则需要匹配完整路径名。 例如有这样一个文件：./CalcServer/src/com/boco/deploy/ConfigLoader.java，用 find . -name \"Co*.java\" 可以匹配上，但 find . -regex \"Co.*java\" 匹配不上，因为它只匹配了文件名，而不是包括路径的完整路径名，改为 find . -regex \".*Co.*java\" 就ok了。 参考：http://bbs.chinaunix.net/thread-612012-1-1.html 查找条件 （2013-10-17更新） 按时间特性查找 find -newerXY : 查找在某个时间点之后修改（更新，生成）的文件，例如： find . -newermt '2014-01-16 00:00' -name '*.py' 查找所有修改时间晚于1月16日0点的扩展名为py的文件。 find -mtime -1: 查找最近一天内被更改过的文件； mtime是按天查询，\"-mtime -7\" 查询修改时间在7天前到现在这段时间内的文件； mmin是按分钟查询，其他与mtime一样； atime, ctime分别是access time和change time（mtime是modification time），其他与mtime一样； find -newer 列出所有修改时间晚于 修改时间的文件； 查找深度限制 -maxdepth 用来指定查询的目录深度，一般作为find的第一个参数； 查找类型限制 \"-type f\" 表示只显示文件，\"-type d\" 表示只查询目录；另外还有l（链接），s(socket)等类型可选； 指定动作 \"-exec\": 格式: find -exec {} \\; 上面{}代表被查出来的项目， 命令以分号结尾，但为了避免分号在不同系统中的歧义，前面加反斜杠对分号进行转义； find -exec {} + 将所有find找到的条目放在一起，由 一次性执行，效率比\"find ... \\;\"版本高很多； \"-print\": 主要用来在管道命令中为其他命令传值； Locate命令 相当于 find -name ，但速度远快于find，因为Linux维护了一个文件列表数据库 （在Ubuntu上，这个数据库文件是/var/lib/mlocate/mlocate.db）， locate 命令查询这个数据库给出结果。由于数据库每天更新，所以如果查询最近的更改， 需要手工更新数据库： sudo updatedb 注意locate的搜索结果是包含路径的， 所以用locate 'abc '是搜不到文件名以abc开头的文件的，必须写为\" abc*\"; 文件名部分普通匹配：locate strom；对应Emacs中M-x locate; 只有在这种最简形式下，可以将locate ' strom '简写为locate storm; glob匹配：locate ' strom .gz'，搜索所有storm*.gz文件; locate 命令将 / 作为普通字符处理，所以 locate '*/bin/*' 能够找到 /home/robin/bin/prog ; 正则匹配：locate -r '. Storm. java'，或者：locate -r '. [Gg]roovy. '; 在特定路径下搜索指定扩展名文件：locate -r '. warez. [Vv]irtual[Bb]ox. [rpm|deb]' 用正则指定文件扩展名：locate -r 'Storm. .java' locate + grep效果很好，先用locate进行粗选，然后在grep中细化， 如查找版本号为2.2.0的一个Hadoop安装包： locate 2.2.0|grep hadoop ， 或者查找所有文件名为Groovy或者groovy的文件：locate -r '[Gg]roovy'|grep '[Gg]roovy' Ref: Linux的五个查找命令 5 Ways To Search For Files Using The Terminal Wildcards with \"Fast find\" Database","tags":"Tech","url":"http://leetschau.github.io/zai-linuxxi-tong-shang-cha-zhao-wen-jian.html","loc":"http://leetschau.github.io/zai-linuxxi-tong-shang-cha-zhao-wen-jian.html"},{"title":"logback笔记","text":"打印logback调试信息： 自动感知文件变化： ，不加scanPeriod的话，默认值是1分钟，一般用默认值就行； 不打印第一行格式信息： 不打印调试信息：将ch.qos.logback.core.ConsoleAppender包含的 改为 appender的级别设置：在appender里加filter，在filter上附加level； 日志中的日期格式： %date{yyyy-MMM-dd;HH:mm:ss.SSS} 2012-五月-14;16:05:44.667 ... %date{yyyy-MM-dd;HH:mm:ss} 2012-05-14;16:05:44","tags":"Tech","url":"http://leetschau.github.io/logbackbi-ji.html","loc":"http://leetschau.github.io/logbackbi-ji.html"},{"title":"Java程序的两种参数设置方法","text":"Java程序有两种参数传递方式，分别是虚拟机参数和程序参数，前者用java命令行参数-D设置，用System.getProperty()方法获取；后者在主类声明后面添加，用main()方法里的args[]获取。下面是演示程序。 ServiceNameDemo.java public class ServiceNameDemo { public static void main(String[] args) { System.out.println(\"vm param is: \" + System.getProperty(\"service_name\") + \"\\r\\nprogram param is: \" + args [ 0 ] + \" and \" + args [ 1 ] ); } } 下面是编译运行结果。 F:> javac ServiceNameDemo.java F:> java -cp . -Dservice_name=banana ServiceNameDemo apple melon vm param is: banana program param is: apple and melon 对应于Eclipse中的设置方法如下：","tags":"Tech","url":"http://leetschau.github.io/javacheng-xu-de-liang-chong-can-shu-she-zhi-fang-fa.html","loc":"http://leetschau.github.io/javacheng-xu-de-liang-chong-can-shu-she-zhi-fang-fa.html"},{"title":"Ubuntu上安装gevent","text":"安装libevent; 安装greenlet: sudo easy_install gevent (need net access) bingo! -> python-dev -> libpython2.7 deb包下载网站 ； sudo dpkg -i libpython2.7_2.7.2-5ubuntu1_i386.deb 2013-02-16： Ubuntu Server 12.04上自带python 2.7，所以只要安装greenlet, libevent和gevnet就行了， apt-get install python-pip apt-get install python-dev(否则安装greenlet报错) pip install greenlet pip install gevent 验证： 将下面的代码保存为gex.py，然后用python gex.py运行得到结果，但gevent官网install上所述的repl方式执行失败，原因不明。 import gevent from gevent import socket urls = ['www.google.com', 'www.example.com', 'www.python.org'] jobs = [gevent.spawn(socket.gethostbyname, url) for url in urls] gevent.joinall(jobs, timeout=2) [job.value for job in jobs] 本地安装方式： Ubuntu上：下载gevent-0.13.8.tar.gz和greenlet-0.4.0.zip（源码包）编译失败； Windows上：greenlet和gevent都有安装包，但在windows上安装libevent比较难，放弃；","tags":"Tech","url":"http://leetschau.github.io/ubuntushang-an-zhuang-gevent.html","loc":"http://leetschau.github.io/ubuntushang-an-zhuang-gevent.html"},{"title":"Eclipse的XML编辑器解决方案","text":"现在使用的Eclipse SDK 3.7.2里没有XML编辑器，无法进行语法高亮，也没有格式化（按层次控制缩进量）和设计视图，很不方便。对于ant文件，可以用Ant Editor来打开，ivy文件在装了IvyDE后也有自己的编辑器，但对于其他格式的XML文件（例如logback使用的配置文件），如果使用Ant editor打开，有语法高亮和格式化（Ctrl+shift+f），但会报语法错误（因为ant文件的顶层标签必须是project），让人很不爽。所以有了下面这个解决办法：在操作系统中设置用 firstobject XML Editor 打开XML文件，然后在Eclipse中选中要打开的xml文件，右键 -> Open With -> System Editor，如果希望根据具体情况选择编辑器，可以将XML打开程序设为 F4Menu ，再在F4Menu里关联。 firstobject XML Editor中，格式化的快捷键是F8。 外部编辑器有一个问题是当文件更改后需要手工在Eclipse里刷新才能生效（xml文件才会进入bin目录），所以外部编辑器不是一个理想的解决方案。 使用Eclipse for java developers版本自带xml编辑器； NetBeans也可以格式化xml文档。","tags":"Tech","url":"http://leetschau.github.io/eclipsede-xmlbian-ji-qi-jie-jue-fang-an.html","loc":"http://leetschau.github.io/eclipsede-xmlbian-ji-qi-jie-jue-fang-an.html"},{"title":"简化Windows上的Python运行脚本","text":"twisted的测试工具是trial，在 Dave对trial的介绍文章 中，运行测试的脚本是\"trial tests/test_poetry.py\"，在Windows平台上，安装twisted后，只是在 \\(PYTHON_HOME/Scripts下有一个trial.py文件，所以直接运行上面的脚本系统会返回\"无法识别的指令\"，必须写成\"\\) PYTHON_HOME/python \\(PYTHON_HOME/Scripts/trial.py tests/test_poetry.py\"，调试时很麻烦，在\\) PATH中增加 \\(PYTHON_HOME，就可以简写为\"python $PYTHON_HOME/Scripts/trial.py tests/test_poetry.py\"，如果希望Windows认为py文件是可运行的（类似于Unix平台的脚本中用\"#!/usr/bin/python\"设置执行脚本的文件），可以通过配置\\) PATHEXT实现，具体方法是在这个环境变量中增加\".py\"（与$PATH一样也是用分号隔开），就可以直接运行\"trial ...\"了。 Under the hood 执行assoc和ftype两个命令查看文件关联： C:\\Users\\chad> assoc|findstr py .py=Python.File .pyc=Python.CompiledFile .pyo=Python.CompiledFile .pyw=Python.NoConFile C:\\Users\\chad> ftype|findstr py Python.CompiledFile=\"F:\\Software\\Python27\\python.exe\" \"%1\" % Python.File=\"F:\\Software\\Python27\\python.exe\" \"%1\" % Python.NoConFile=\"F:\\Software\\Python27\\pythonw.exe\" \"%1\" %* 从上面可以看到，当运行\"trial ...\"时，系统的处理过程是：$PATH -> $PYTHON_HOME/Scripts -> trial ->trial.py -> .py -> Python.File -> \"F:\\Software\\Python27\\python.exe\" \"%1\" %*，最终将\"trial ...\"转换为\"F:\\Software\\Python27\\python.exe F:\\Software\\Python27\\Scripts\\trial.py ...\"执行。ftype命令的结果来自注册表，例如：HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Python.File\\shell\\open\\command。 Windows的文件关联原理参见\" 玩转Windows 7文件关联 \"，软件 FileTypesMan 管理文件关联很好用。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/jian-hua-windowsshang-de-pythonyun-xing-jiao-ben.html","loc":"http://leetschau.github.io/jian-hua-windowsshang-de-pythonyun-xing-jiao-ben.html"},{"title":"flex学习笔记","text":"flex helloworld ; 解压flex sdk, E:\\Docs\\flexFiles>set PATH=d:\\Apps\\flex_sdk_4.6\\bin E:\\Docs\\flexFiles>mxmlc hello.mxml 安装flash builder不需要改hosts文件 blazeds hello world: http://blog.sina.com.cn/s/blog_4c4a24db0100gu3i.html 要求预先安装flash builder","tags":"Tech","url":"http://leetschau.github.io/flexxue-xi-bi-ji.html","loc":"http://leetschau.github.io/flexxue-xi-bi-ji.html"},{"title":"基于Eclipse+MinGW的C开发环境","text":"下载Eclipse IDE for C/C++ Developers(CDT)和 mingw离线安装包 ； 安装mingw，将 \\(MINGW_DIR/bin加入到\\) PATH中；（实验一下） 解压Eclipse，新建一个C project，Toolchains选择\"MinGW GCC\"； bingo! 参考 Eclipse+CDT+MinGW开发环境配置 ； 另外还有一个 lcc ，界面太老土，居然不能调整界面字体大小，不用了。 2012-12-11更新： 运行一个C HelloWorld程序需要以下步骤： 解压MinGW，并将 \\(MINGW_DIR/bin加入到\\) PATH中； 启动Eclipse CDT； 新建一个C项目（Package Explorer的项目文件夹下出现\"Includes\"文件夹，证明MinGW被Eclipse找到了），在项目属性的\"C/C++ Build -> Tool Chain Editor\"里选MinGW； 写源代码； 项目上右键 -> Build Configuration -> build all，正确编译后Package Explorer的项目文件夹下应该有一个\"Binaries\"文件夹，里面有build生成的exe文件； 项目上右键 -> Run as -> Local C/C++ Application； 存在问题：由于MinGW中不包括gdb.exe，所以只能运行程序，不能调试程序，实用价值不大，尝试codeblocks； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ji-yu-eclipsemingwde-ckai-fa-huan-jing.html","loc":"http://leetschau.github.io/ji-yu-eclipsemingwde-ckai-fa-huan-jing.html"},{"title":"RMI运行实例","text":"计算机的远程通信有很多种方法， RPC 的设计目标是让一台主机（客户端）上的程序能够引用另一台主机（服务端）上对象，并运行它的方法，也就是\"跨地址空间的进程间通信\"， RMI 是RPC的Java语言实现。 本实例包含5个文件： // ================= Hello.java ==================== package test.rmi; import java.rmi.Remote; import java.rmi.RemoteException; /** 远程方法调用接口，定义远程调用方法 */ public interface Hello extends Remote { String sayHello() throws RemoteException; } //================= HelloServer.java ============================= package test.rmi; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.rmi.server.UnicastRemoteObject; / 服务器端，实现了Hello接口中的方法，用于实现远程调用方法的具体业务逻辑 / public class HelloServer extends UnicastRemoteObject implements Hello { private static final long serialVersionUID = 1L; String name; public HelloServer(String s) throws RemoteException { super(); name = s; } public String sayHello() throws RemoteException { return \"Hello from lc!\"; } public static void main(String[] args) { / 下面这句话若要加上，则需要进行权限的认证，即增加.policy文件 * 并且在命令行中使用如下格式 * java -Djava.security.policy=java.policy test.rmi.HelloServer / / System.setSecurityManager(new RMISecurityManager()); / Registry registry = null; try { / 启动注册服务器，使用了这个语句就不再需要在命令行环境中 启动registry服务了 / registry = LocateRegistry.getRegistry(); / 若没有获得连接，则此句会抛出异常，后面在捕获后进行相关处理 */ registry.list(); System.out.println(\"Register the exist server!\"); // \\(NON-NLS-1\\) } catch (RemoteException re) { try { int port = Integer.parseInt(Configur .getString(\"HelloServer.RegistryServerPort\")); // \\(NON-NLS-1\\) registry = LocateRegistry.createRegistry(port); System.out.println(\"Create Registry Server!\"); // \\(NON-NLS-1\\) } catch (Exception e) { e.printStackTrace(); } } try { HelloServer helloServer = new HelloServer(\"Hello\"); registry.rebind( Configur.getString(\"HelloServer.HelloServerName\"), helloServer); // \\(NON-NLS-1\\) System.out.println(\"HelloServer server start!\"); // \\(NON-NLS-1\\) } catch (Exception e) { e.printStackTrace(); } } } //================== HelloClient.java ============================ package test.rmi; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; / * 客户端，需要注册服务器并使用jndi */ public class HelloClient { public static void main(String[] args) { / 下面这句话若要加上，则需要进行权限的认证，即增加.policy文件 * 并且在命令行中使用如下格式 * java -Djava.security.policy=java.policy test.rmi.HelloServer / / System.setSecurityManager(new RMISecurityManager()); / try { / 注册服务器 */ String hostName = Configur .getString(\"HelloServer.RegistryServerName\"); int port = Integer.parseInt(Configur .getString(\"HelloServer.RegistryServerPort\")); Registry registry = LocateRegistry.getRegistry(hostName, port); Hello hello = (Hello) registry.lookup(Configur .getString(\"HelloServer.HelloServerName\")); String message = hello.sayHello(); System.out.println(message); } catch (Exception e) { e.printStackTrace(); } } } //================= Configur.java ============================= package test.rmi; import java.util.MissingResourceException; import java.util.ResourceBundle; /* * 获取系统运行所需要的配置信息，对应的配置文件名称为config.properties / public class Configur { private static final String BUNDLE_NAME = \"test.rmi.config\"; private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle .getBundle(BUNDLE_NAME); private Configur() { } /* * 通过key名称获得配置文件的相关信息 * @param key key名称 * @return String 配置文件信息 / public static String getString(String key) { try { return RESOURCE_BUNDLE.getString(key); } catch (MissingResourceException e) { return '!' + key + '!'; } } } //================= config.properties ============================= HelloServer.RegistryServerPort=1111 HelloServer.HelloServerName=HelloServer HelloServer.RegistryServerName=10.31.1.71 源代码目录是e:\\MyDoc\\JEx\\Ex1\\src，Eclipse自动生成的class文件在e:\\MyDoc\\JEx\\Ex1\\bin（以及包目录）下。 运行方法： E:\\MyDoc\\JEx\\Ex1\\bin> rmic test.rmi.HelloServer （rmic.exe是$JAVA_HOME/bin里的文件） 生成e:\\MyDoc\\JEx\\Ex1\\bin\\test\\rmi\\HelloServer_Stub.class文件（没有生成skeleton文件） E:\\MyDoc\\JEx\\Ex1\\bin> java test.rmi.HelloServer Create Registry Server! HelloServer server start! 关闭本机的Windows防火墙； copy HelloClient.class, HelloServer_Stub.class, Hello.class, Configur.class, config.properties到另一台机器，运行 java test.rmi.HelloClient ，返回\"Hello from lc!\"。 要运行Server只需要Hello.class, HelloServer.class, Configur.class, config.properties 4个文件，HelloServer_Stub.class只在客户端需要。 可以看到客户端新建了一个Hello类型的对象，然后调用了这个对象的方法sayHello，而这个对象和方法的定义在另一台主机上。 RMI是一种同步调用方式，也就是说代码运行到\"String message = hello.sayHello()\"是会阻塞（block），直到服务端返回sayHello的结果，与此相对， JMS 是异步发送消息，客户端发送完消息后不等待结果返回，运行后面的代码。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/rmiyun-xing-shi-li.html","loc":"http://leetschau.github.io/rmiyun-xing-shi-li.html"},{"title":"动态和静态类型语言中实现回调的方法","text":"静态语言实现回调的方法有待后续补充； Twisted Introduction from KRONDO by Dave Peticolas, Part6中使用的源代码twisted-client-3\\get-poetry.py很好的阐述了python中实现回调（call back）的方法，下面是get-poetry.py的简化版： from twisted.internet.protocol import Protocol, ClientFactory class PoetryProtocol(Protocol): poem = '' def dataReceived(self, data): self.poem += data def connectionLost(self, reason): self.poemReceived(self.poem) def poemReceived(self, poem): self.factory.poem_finished(poem) class PoetryClientFactory(ClientFactory): protocol = PoetryProtocol def init (self, callback): self.callback = callback # 将回调函数作为属性写入facotry对象中 def poem_finished(self, poem): self. callback (poem) # 神奇的是这个\"属性\"可以当方法用，只要在后面直接加括号和参数就OK了 def get_poetry(host, port, callback ): from twisted.internet import reactor factory = PoetryClientFactory(callback) reactor.connectTCP(host, port, factory) if name == ' main ': def got_poem (poem): poems.append(poem) if len(poems) == len(addresses): reactor.stop() for address in addresses: host, port = address get_poetry(host, port, got_poem ) # 将回调方法方法作为参数传给factory对象 回调方法的本质是：从服务器下载诗句，当下载完成时做某件事，如何做这件事（做这件事的步骤）就定义在回调函数get_poem中。同步方式下，下载完成等同于下载诗句的函数返回，异步方式下不能这么办，只能由感知到事件发生的对象运行回调函数这种方法达到目的。本例中，服务器在诗句下载完成后关闭与客户端的连接，所以客户端的protocol对象的 connectionLost方法（也是一个call back函数）首先感知到下载完成，然后调用自己对应的factory对象的poem_finished方法，在poem_finished方法中使用get_poem方法处理下载完的poem。这里的关键是我们用写入属性的方法将回调函数赋给factory对象，factory就可以在接到（来自于protocol对象的）通知的时候运行这个\"属性方法\"。Part 6的Figure 11很好的图示了上述过程。","tags":"Tech","url":"http://leetschau.github.io/dong-tai-he-jing-tai-lei-xing-yu-yan-zhong-shi-xian-hui-diao-de-fang-fa.html","loc":"http://leetschau.github.io/dong-tai-he-jing-tai-lei-xing-yu-yan-zhong-shi-xian-hui-diao-de-fang-fa.html"},{"title":"bat脚本的非阻塞调用","text":"例如现在要启动3个Server，每个都监听一个端口，因此需要在调用脚本之外的进程里运行，这就需要start命令： start F:\\Software\\Python27\\python.exe blocking-server/slowpoetry.py --port 10000 poetry/ecstasy.txt --num-bytes 30 start F:\\Software\\Python27\\python.exe blocking-server/slowpoetry.py --port 10001 poetry/fascination.txt start F:\\Software\\Python27\\python.exe blocking-server/slowpoetry.py --port 10002 poetry/science.txt 如果用call取代start，脚本会阻塞在第一个调用中，直到第一个调用返回才启动第二个。 使用set为变量赋值时，注意等号左右不要留空格，否则变量名和变量值会包括这些空格。","tags":"Tech","url":"http://leetschau.github.io/batjiao-ben-de-fei-zu-sai-diao-yong.html","loc":"http://leetschau.github.io/batjiao-ben-de-fei-zu-sai-diao-yong.html"},{"title":"为什么Python不需要接口","text":"尽管为Python增加接口的呼声一直存在，zope也为实现python的\"面向协议编程\"提供了接口（详见 zope文档 ），但Java中为了实现多态性而提供的接口对于Python而言是不需要的。首先看一个简单例子的Java版： InterfaceFunc.java public class InterfaceFunc { public static void main(String[] args) { MyInterface a = new CA(); MyInterface b = new CB(); deal(a); deal(b); } private static void deal(MyInterface instance) { instance.func(); } } MyInterface.java public interface MyInterface { void func(); } CA.java public class CA implements MyInterface { public void func() { System.out.println(\"I am A\"); } } CB.java public class CB implements MyInterface { public void func() { System.out.println(\"I am B\"); } } 对应的Python代码： class A: def func(self): print 'I am A' class B: def func(self): print 'I am B' def deal(obj): obj.func() a = A() b = B() deal(a) deal(b) 可以看到Python不需要接口的原因是其函数参数无需声明类型，只要参数能够完成函数要求其执行的操作就行，这就是 duck typing （中文叫\" 鸭子类型 \"）。","tags":"Tech","url":"http://leetschau.github.io/wei-shi-yao-pythonbu-xu-yao-jie-kou.html","loc":"http://leetschau.github.io/wei-shi-yao-pythonbu-xu-yao-jie-kou.html"},{"title":"egg包使用方法","text":"Python的egg文件相当于java的jar文件（实际上二者都是zip文件），Java中可以通过设置classpath（设置环境变量 \\(CLASSPATH或者java命令的 -cp参数）的方法引用jar包，python中则是通过设置\\) PYTHONPATH环境变量或者sys.path的方法引用egg文件，如果需要引用多个egg，在 $PYTHONPATH中以分号隔开。下面以 zope egg 为例说明引用egg文件的方法，首先下载egg文件：d:\\Apps\\SharedLibs\\zope.interface-3.8.0-py2.7-win32.egg。 命令行使用方法 F:\\ghost\\tempFiles\\twisted-intro> set PYTHONPATH=d:\\Apps\\SharedLibs\\zope.interface-3.8.0-py2.7-win32.egg F:\\ghost\\tempFiles\\twisted-intro> python twisted-deferred/defer-1.py Your poem is served: This poem is short. Finished 运行trial测试： F:\\ghost\\tempFiles\\twisted-intro\\tests> set PYTHONPATH=d:\\Apps\\SharedLibs\\zope.interface-3.8.0-py2.7-win32.egg F:\\ghost\\tempFiles\\twisted-intro\\tests> python d:\\Apps\\Python27\\Scripts\\trial.py test_poetry.py Eclipse中引用egg Eclipse->Window->Preference->PyDev->Interpreter - Python->System PYTHONPATH中添加这个文件即可； 制作egg包方法 setuptools安装方法 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/eggbao-shi-yong-fang-fa.html","loc":"http://leetschau.github.io/eggbao-shi-yong-fang-fa.html"},{"title":"来自Python世界的一篇优秀的异步通信框架博文","text":"Twisted Introduction from KRONDO by Dave Peticolas. Part 1: 非常好的解释了同步与异步处理方式的区别，以及适用的场合。 Part 2: 给出了基于socket的同步和异步客户端如何接收数据，随后引出了reactor模式，有利于理解twisted中的reactor对象。 Part 6: twisted-client-3\\get-poetry.py中回调的实现方法见\" 动态和静态类型语言中实现回调的方法 \"，另外twisted-client-3/get-poetry-1.py中的PoetryClientFactory.clientConnectionFailed方法定义在twisted.internet.protocol.ClientFactory（PoetryClientFactory的父类）中，所以它也是一个回调方法； Part 7: twisted-deferred/defer-1.py中：d.callback(arg)中的arg会作为参数传给got_poem，这个参数一般在got_poem方法中起\"结果\"的作用。got_poem可以带多个参数，但callback方法只能传一个，例如下面的代码可以运行通过： def got_poem(res, r2 = 'default'): print 'Your poem is served:' print res + ': ' + r2 ... d.callback('This poem is so short.') 但下面的代码会报参数个数错误： d.callback('This poem is so short.', 'default') Part 10: get-poetry中，生成deferred是在get_poetry方法中，fire deferred是在PoetryClientFactory的方法中，违反了第13节提到的对deferred\"谁生成，谁fire\"原则； Part 11: 本节的Discussion中，对Figure 26的说明里提到了file descriptors，根据此处的说明，我猜想p ython网络编程中的file descriptors可以理解为一个socket； Part 12: \"A Simple Client\"一节里的client用到了netcat工具，不能在Windows平台上运行，也不是linux预安装的工具，需要手工下载安装，所以我们用XShell或者SecureCRT充当客户端，运行这个例子的方法是：首先启动Server： python twisted-server-1/transformedpoetry.py --port 11000 然后客户端里运行： telnet localhost 11000 ，连上后（有\"Connection established.\"）发送： 27:cummingsify.HERE IS MY POEM, 可以收到信息： 15:here is my poem, 上面发送的信息是 netstring 格式，\"cummingsify.HERE IS MY POEM\"是真正的报文，cummingsify是协议名称，\"HERE IS MY POEM\"是诗句，收到的信息也是netstring格式，可以看到返回诗句（here is my poem）就是发送诗句的cummingsify变换（变为小写）。 变换流程是： main-> TransformFactory-> TransformProtocol.stringReceived（接收报文，解析出协议名称为 cummingsify）-> TransformFactory.transform(用getattr方法组装出xform_cummingsify方法名，然后调用xform_cummingsify方法处理poem)-> TransformFactory . xform_cummingsify -> TransformService . cummingsify （实际完成变换为小写的动作） -> 返回TransformProtocol.stringReceived继续运行，发送处理后的报文（self.sendString）； 关闭连接。 Part 13: 通过分析twisted-deferred/defer-10.py以及3个变体的输出的变化，观察嵌套deferred的行为： 变体1：倒数第二行\"deferred_2.callback(3)\"改为\"deferred_2.callback(5)\"，对应部分的输出变为 Notice the output from the third callback is missing. callback_3 got 5 Note the argument to the inner deferred's callback() 说明inner deferred的输出将作为N+1 outer deferred的输入，本例中 deferred_2没有callback，所以输入5直接作为输出，送给callback_3作为输入； 变体2：倒数第二行\"deferred_2.callback(3)\"改为\"deferred_2.errback(5)\"，对应部分的输出变为： Notice the output from the third callback is missing. Note the argument to the inner deferred's callback() Unhandled error in Deferred: Unhandled Error Traceback (most recent call last): Failure: builtin .int: 5 说明inner deferred失败的时候将运行N+1 outer deferred的errback，由于本例中N+1 outer deferred没有实现errback，所以异常作为Unhandled error在程序运行完后由系统输出，这一机制在Part 9对twisted-deferred/defer-unhandled.py的说明中进行了阐述； 变体3：在变体2的基础上，将\"d.addCallback(callback_3)\"变为\"d.addCallbacks(callback_3, errback_3)\"，同时增加对errback_3的定义： def errback_3(res): print 'errback_3 got', res return 33 对应部分的输出变为： Notice the output from the third callback is missing. errback_3 got [Failure instance: Traceback (failure with no frames): : 5 ] Note the argument to the inner deferred's callback() 由于outer deferred链的第3对增加了errback（errback_3），所以errback_3以inner deferred失败返回的结果（一个Failure对象）作为输入开始运行。 twisted-client-6\\get-poetry.py （简写为p6） 与 twisted-client-5\\get-poetry.py（简写为p5）比较，p5从服务器下载诗句后自己进行转换，p6首先从服务器下载诗句，然后上传到服务器上进行转换，再下载下来；p6的3个参数分别是transform服务器的端口、下载诗句的服务器端口（可以有多个），例如\"python twisted-client-6/get-poetry.py 10001 10002 10003\"是首先从10002和10003服务器上下载诗句，然后上传到10001服务器上进行转换，再下载下来； Part 14: deferred.pause()使得pause之后的所有动作都推迟到unpause之后开始运行，所以pause之后addCallback(定义deferred)与callback(fire deferred)先后顺序是无所谓的。 service = ProxyService(*server_addr)中的星号是什么意思？ twisted-server-2/poetry-proxy.py代码分析： 这个proxy由3部分组成：server, service, client。server接收用户的连接请求，包括PoetryProxyFactory和PoetryProxyProtocol两个类；service是连接server和client的纽带，由ProxyService类实现；client从external server处下载诗句，由PoetryClientFactory和PoetryClientProtocol类实现。server通过调用service的get_poem方法从client中取诗句，然后送到用户端，做到这一点是由两套\"异步\"过程保证的：client端（下载诗句）过程和server端（下载完成后缓存并发送给用户）过程，两个过程的纽带是PoetryClientFactory.deferred（以下简称pcd）。 client过程是：当有数据发送过来时，缓存到poem中，当external server与自己断开时，认为诗句下载完毕，调用PoetryClientFactory.poem_finished(poem)方法fire pcd； server过程是：当与用户建立连接（PoetryProxyProtocol.connectionMade）时，初始化一个service，调用service.get_poem()方法（在pcd中增加第一层callback set_poem：缓存诗句，并把诗句向下层callback传送，然后初始化client，开始client过程），然后向pcd增加第二层callback（向用户端传送诗句）和第三层callback（断开与客户端的连接）。 至此\"诗句下载完毕后怎么办\"就设置好了，只等下载完毕（client fire pcd），pcd的callback链开始运行。我们可以认为pcd是\"当诗句下载完成时\"。 我认为proxy2.0用defer.succeed实现\"同步过程defer化\"比1.0用maybeDeferred实现更优雅，至少maybeDeferred这个词不达意的名字（应该叫alwaysDeferred）就很容易误导开发者； Part 15: tests/test_poetry.py的test_client方法中，被测试的是返回值d，d在PoetryClientFactory的构造函数中初始化（第43行），其callback链在test_client方法中设置（第87行），在PoetryClientFactory.poem_finished方法中fire（第48行），fire的参数是（已下载完毕的）poem，所以进入callback链后运行got_poem(poem)，此方法将实际结果poem与预期结果TEST_POEM进行比较，验证二者是否一致。据此可知trial中测试的一般过程是（设生成测试结果（实际值）的对象为TDO，实际值（由TDO生成）为actual，预期值为exp，测试方法为TM）：TDO负责生成d，在条件达到时以actual为参数fire d，TM在d的callback链上配置测试条件（如assertEquals(actual,exp)之类验证测试通过与否的方法），并且(TM)返回d，这样当运行测试时trial执行reactor.run()方法（所以测试代码里没有reactor.run()），一切开始运转。 高并发网络服务的思考 by Lucifer探讨了reactor模式与多线程模式各自的优缺点，但说的好像不是很清楚；","tags":"Tech","url":"http://leetschau.github.io/lai-zi-pythonshi-jie-de-yi-pian-you-xiu-de-yi-bu-tong-xin-kuang-jia-bo-wen.html","loc":"http://leetschau.github.io/lai-zi-pythonshi-jie-de-yi-pian-you-xiu-de-yi-bu-tong-xin-kuang-jia-bo-wen.html"},{"title":"Add Multiple jar Files into Classpath","text":"运行java程序的脚本经常要将conf文件夹和lib文件夹中所有jar包加入到classpath里，送给java命令的-cp参数，当使用JDK6及以上版本时，可以写成： java -cp lib/*:conf com.boco.nep.Server 其中 代表 .jar或者*.JAR，参考\"http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath\"； 如果上面的方法无效，也可以采用遍历方法加入jar包： bash on Unix (start.sh in $APP_HOME/bin folder) JARS=\"./conf\" for i in ls ./lib/*.jar ; do JARS=\" \\(JARS\":\\) i done exec \"${JAVA_HOME}/bin/java\" -cp $JARS com.boco.nep.Server Windows (start.bat in $APP_HOME\\bin folder) @echo off cd ../lib set jars= SETLOCAL ENABLEDELAYEDEXPANSION for /f %%i in ('dir /b *.jar') do set jars=%%i;!jars! call java -cp %jars% com.boco.nes.mina.Server 注意jar包文件中不能有空格，否则jars中只有空格前的那一部分文件名； 语法解释 \"dir /b *.jar\"以紧凑格式列出lib文件夹下所有的jar包文件（不包括文件大小、修改时间等信息）； %%i是声明的循环变量（bat脚本中循环变量以%%开头加一个字母组成）； \"for /f in (set) do \"循环执行set中的每一个元素（详细语法可在命令行中指令\"for /?\"查看）； \"SETLOCAL ENABLEDELAYEDEXPANSION\"与\"!jars!\"配合实现变量jars的延迟赋值，其作用参考 批处理中setlocal enabledelayedexpansion的作用详细整理 。 Windows版中使用语法的含义可参考 Windows bat命令编写大全 ；for命令的用法； 多层目录遍历 Windows多层目录遍历可以用\"for /r\"或者\"for /f %%i ('dir /ad dir_name') do command\"，其中\"dir /ad\"表示只列出目录，参考 FOR /D 。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/add-multiple-jar-files-into-classpath.html","loc":"http://leetschau.github.io/add-multiple-jar-files-into-classpath.html"},{"title":"Python包安装过程","text":"以下是paramiko-1.7.7.1的安装过程，可以看到整个过程分为步，第一步是build， 就是拷贝源文件到build文件夹里， F : \\ VMFiles \\ tmpFiles \\ paramiko - 1 . 7 . 7 . 1 > F : \\ Software \\ Python27 \\ python . exe setup . py install running install running build running build_py creating build creating build \\ lib creating build \\ lib \\ paramiko copying paramiko \\ agent . py -> build \\ lib \\ paramiko copying paramiko \\ auth_handler . py -> build \\ lib \\ paramiko copying paramiko \\ ber . py -> build \\ lib \\ paramiko copying paramiko \\ buffered_pipe . py -> build \\ lib \\ paramiko copying paramiko \\ channel . py -> build \\ lib \\ paramiko copying paramiko \\ client . py -> build \\ lib \\ paramiko copying paramiko \\ common . py -> build \\ lib \\ paramiko copying paramiko \\ compress . py -> build \\ lib \\ paramiko copying paramiko \\ config . py -> build \\ lib \\ paramiko copying paramiko \\ dsskey . py -> build \\ lib \\ paramiko copying paramiko \\ file . py -> build \\ lib \\ paramiko copying paramiko \\ hostkeys . py -> build \\ lib \\ paramiko copying paramiko \\ kex_gex . py -> build \\ lib \\ paramiko copying paramiko \\ kex_group1 . py -> build \\ lib \\ paramiko copying paramiko \\ logging22 . py -> build \\ lib \\ paramiko copying paramiko \\ message . py -> build \\ lib \\ paramiko copying paramiko \\ packet . py -> build \\ lib \\ paramiko copying paramiko \\ pipe . py -> build \\ lib \\ paramiko copying paramiko \\ pkey . py -> build \\ lib \\ paramiko copying paramiko \\ primes . py -> build \\ lib \\ paramiko copying paramiko \\ resource . py -> build \\ lib \\ paramiko copying paramiko \\ rsakey . py -> build \\ lib \\ paramiko copying paramiko \\ server . py -> build \\ lib \\ paramiko copying paramiko \\ sftp . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_attr . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_client . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_file . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_handle . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_server . py -> build \\ lib \\ paramiko copying paramiko \\ sftp_si . py -> build \\ lib \\ paramiko copying paramiko \\ ssh_exception . py -> build \\ lib \\ paramiko copying paramiko \\ transport . py -> build \\ lib \\ paramiko copying paramiko \\ util . py -> build \\ lib \\ paramiko copying paramiko \\ win_pageant . py -> build \\ lib \\ paramiko copying paramiko \\ __init__ . py -> build \\ lib \\ paramiko running install_lib creating F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ agent . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ auth_handler . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ ber . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ buffered_pipe . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ channel . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ client . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ common . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ compress . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ config . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ dsskey . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ file . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ hostkeys . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ kex_gex . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ kex_group1 . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ logging22 . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ message . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ packet . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ pipe . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ pkey . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ primes . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ resource . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ rsakey . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ server . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_attr . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_client . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_file . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_handle . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_server . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ sftp_si . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ ssh_exception . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ transport . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ util . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ win_pageant . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko copying build \\ lib \\ paramiko \\ __init__ . py -> F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ agent . py to agent . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ auth_handler . py to auth_handler . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ ber . py to ber . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ buffered_pipe . py to buffered_pipe . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ channel . py to channel . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ client . py to client . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ common . py to common . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ compress . py to compress . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ config . py to config . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ dsskey . py to dsskey . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ file . py to file . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ hostkeys . py to hostkeys . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ kex_gex . py to kex_gex . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ kex_group1 . py to kex_group1 . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ logging22 . py to logging22 . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ message . py to message . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ packet . py to packet . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ pipe . py to pipe . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ pkey . py to pkey . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ primes . py to primes . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ resource . py to resource . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ rsakey . py to rsakey . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ server . py to server . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp . py to sftp . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_attr . py to sftp_attr . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_client . py to sftp_client . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_file . py to sftp_file . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_handle . py to sftp_handle . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_server . py to sftp_server . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ sftp_si . py to sftp_si . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ ssh_exception . py to ssh_exception . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ transport . py to transport . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ util . py to util . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ win_pageant . py to win_pageant . pyc byte - compiling F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko \\ __init__ . py to __init__ . pyc running install_egg_info Writing F : \\ Software \\ Python27 \\ Lib \\ site - packages \\ paramiko - 1 . 7 . 7 . 1 - py2 . 7 . egg - info","tags":"Tech","url":"http://leetschau.github.io/pythonbao-an-zhuang-guo-cheng.html","loc":"http://leetschau.github.io/pythonbao-an-zhuang-guo-cheng.html"},{"title":"Windows日志监测工具选型","text":"实际上就是在windows上实现unix上的\"tail -f\"功能。 logview4net: 需安装，免费，不能显示行号； LogViewer Pro: 需付费，不需安装，功能完善； LogExpert_1_4_4216: 免费，功能完善，但无法显示最后几行； notepad2: 不能实现实时监控，需手工按F5键更新； Tail for w32: 需要安装，不能显示行号，不能实时监控，免费； SnakeTail: 不需安装， 不能显示行号，不能实时监控，免费；","tags":"Tech","url":"http://leetschau.github.io/windowsri-zhi-jian-ce-gong-ju-xuan-xing.html","loc":"http://leetschau.github.io/windowsri-zhi-jian-ce-gong-ju-xuan-xing.html"},{"title":"Java的管道流","text":"java.io包里有两个关于管道传输的类，PipedInputStream和PipedOutputStream，它们可以看做是一个传输管道的两端，PipedOutputStream是发送端（入口），用write和flush方法向管道中\"推\"数据，PipedInputStream是接收端（出口），用read方法接收数据，构造这样一个管道的通常做法是： PipedOutputStream out = new PipedOutputStream(); PipedInputStream in = new PipedInputStream(out); 站在管道的角度看，将入口叫做\"output\"是一件很诡异的事，因此我估计java的开发者是站在管道使用者的角度命名，向管道里送数据是output，从管道里读数据是input吧。 如果这个管道只传输字符，还可以用java.io里的PipedReader和PipedWriter，使用方法与上述stream类相似。 apache sshd的ClientChannel类的setIn方法需要一个InputStream参数，而PipedInputStream是InputStream的子类，这样我们就可以用下面的方法向SshClient发送数据了： SshClient client = SshClient.setUpDefaultClient(); client.start(); ClientSession session = client.connect(\"10.0.2.47\", 22).await().getSession(); session.authPassword(\"user\", \"password\").await().isSuccess(); ClientChannel channel = session.createChannel(ClientChannel.CHANNEL_SHELL); // 到这里ssh client完成了登录动作 PipedOutputStream out = new PipedOutputStream(); channel.setIn(new PipedInputStream(out)); // 这两句建立了一个 pipedOut -> pipedIn -> ssh client的数据管道，下面就可以用write方法给client发数据了 ByteArrayOutputStream output = new ByteArrayOutputStream(); ByteArrayOutputStream err = new ByteArrayOutputStream(); channel.setOut(output); channel.setErr(err); channel.open(); // 到此连接通道已打开，可以接收指令了 pipedIn.write(\"pwd\\n\".getBytes()); pipedIn.flush(); // 向client发送指令 String res = output.toString(\"UTF-8\"); // 获取client收到的报文 output.reset(); // 清空接收缓存","tags":"Tech","url":"http://leetschau.github.io/javade-guan-dao-liu.html","loc":"http://leetschau.github.io/javade-guan-dao-liu.html"},{"title":"TextLineCodecFactory笔记","text":"Mina的TextLineCodecFactory将字符串编码为字节流，将字节流解码为字符串，下面是使用中遇到的两个问题。 TextLineCodecFactory改变了message的类型 acceptor上挂了textCodec后handler的messageReceived方法中的session是String型（用\"message.getClass().getName()\"查看）， [INFO] [2012-04-05 16:18:54,317] [com.leechau.mina.echoServer.EchoProtocolHandler] - [Received : hi(java.lang.String)] 否则是IoBuffer： [INFO] [2012-04-05 15:23:36,760] [com.leechau.mina.echoServer.EchoProtocolHandler] - [message type is: org.apache.mina.core.buffer.SimpleBufferAllocator$SimpleBuffer] 因此挂上TextLineCodecFactory后在handler的messageReceived方法中message参数可直接强转为String； 不能正确解码换行符问题及解决办法 连接Echo Server后有时会出现下面的现象： hi{enter} send: hi 造成这一现象的原因是下面的配置方法使TextLineCodecFactory使用了默认的编解码行分隔符（encoder/decoder line delimeter），即用Unix LineDelimeter(/n)作为编码行分隔符，用AUTO LineDelimeter（\\r或者\\n，详见Mina API doc对LineDelimeter类的说明）作为解码行分隔符： acceptor.getFilterChain().addLast(\"textCodec\",new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName(\"UTF-8\")))); 解决这一问题的办法是指定编解码行分隔符： acceptor.getFilterChain().addLast(\"textCodec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName(\"UTF-8\"), LineDelimiter.DEFAULT.getValue(), LineDelimiter.DEFAULT.getValue()))); 效果如下： hi{enter} send: hi 如果不希望每次session.write(msg)后编码器自动加上回车符，需要将编码行分隔符指定为NUL： acceptor.getFilterChain().addLast(\" textCodec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName(\"UTF-8\"), LineDelimiter.NUL.getValue(), LineDelimiter.DEFAULT.getValue()))); 效果如下： hi{enter} send: hi 源代码 Main.java package com.leechau.mina.echoServer; import java.net.InetSocketAddress; import java.nio.charset.Charset; import org.apache.mina.filter.codec.ProtocolCodecFilter; import org.apache.mina.filter.codec.textline.TextLineCodecFactory; import org.apache.mina.filter.logging.LoggingFilter; import org.apache.mina.transport.socket.SocketAcceptor; import org.apache.mina.transport.socket.nio.NioSocketAcceptor; public class Main { private static final int PORT = 8293; public static void main(String[] args) throws Exception { SocketAcceptor acceptor = new NioSocketAcceptor(); acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter()); acceptor.getFilterChain().addLast(\"textCodec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName(\"UTF-8\"), LineDelimiter.NUL.getValue() , LineDelimiter.DEFAULT.getValue()))); acceptor.setHandler(new EchoProtocolHandler()); acceptor.bind(new InetSocketAddress(PORT)); System.out.println(\"Listening on port \" + PORT); } } EchoProtocolHandler.java package com.leechau.mina.echoServer; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IoSession; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class EchoProtocolHandler extends IoHandlerAdapter { private static final Logger LOGGER = LoggerFactory .getLogger(EchoProtocolHandler.class); @Override public void messageReceived(IoSession session, Object message) throws Exception { LOGGER.info(\"Received : \" + message + \"(\" + message.getClass().getName() + \")\"); session.write(\"send: \"); session.write(message); } }","tags":"Tech","url":"http://leetschau.github.io/textlinecodecfactorybi-ji.html","loc":"http://leetschau.github.io/textlinecodecfactorybi-ji.html"},{"title":"TortoiseHg使用笔记","text":"安装Mercurial(Hg) 在 Mercurial官网 下载Mercurial（mercurial-1.8.0-x86.msi），装完后就可以通过命令行使用Hg了，然后下载安装图形界面（tortoisehg-2.0.0-hg-1.8-x86.msi）； 将文件编码设为中文 以保证提交信息中的中文能够正确显示：Workbench->File->Settings->TortoiseHg->UI language: zh_CN; 新建repo Workbench->File->New Repository; 选择repo路径； 增加文件：告诉Hg哪些文件需要版本跟踪； 依次选择repo名、Working Directory，在右下角任务区里勾选要进行版本管理的文件，右键\"增加\"； 提交文件：将当前状态保存为版本； 为了避免大量未识别文件（unknown型）占据任务列表，在\"状态\"过滤器中取消勾选\"unknown\"； 选中已增加的文件，写好提交记录信息后，点\"提交\"，这样当前的状态就进入版本控制了； 更新文件 在Eclipse里修改了文件，在Workbench中选中\"Working Directory\"然后点\"刷新\"按钮就可以看到修改的文件，因为这次修改是针对\"Working Directory\"的，其他版本不存在修改文件的问题； 如果需要提交，在提交信息里写好记录，点击\"提交\"即可； 删除Repo 首先在Workbench里删除repo（如下图），然后删除repo（e:\\MyDoc\\JEx\\Ex1\\src）下的.hg目录和.hgignore文件即可； 团队合作 假设ly想要从chad代码库中导入一个项目，修改后推送给chad，假设chad机器的主机名是chadpc（用\"ipconfig/all\"可以查看），过程如下： chad启动一个Web Server，供ly导入：【仓库->Web服务器->设置】，\"SSL加密推送\"设为为\"否\"，\"允许推送\"后面写上\"*\"，表示任何人都可以推送给本Web服务器，然后点击\"启动\"，用\"http://chadpc:8000\"测试服务器是否启动成功（chadpc是机器的主机名，； ly：【文件->克隆仓库】，\"源\"后面写\"http://chadpc:8000\"，\"目标\"后面写想要导出的位置； ly修改克隆后的项目中的某个文件； ly将修改提交到本地代码库； ly推送（push）给chad； chad将本地版本的head更新到ly推送的版本：选中本地头版本，右键->更新。 chad也可以从ly处\"拉\"（pull）更新到本地仓库： ly修改完代码后启动自己的Hg Web Server; chad点击\"检查可以从指定URL拉取的更改\"，点击\"接受\"，将ly的代码拉到自己的仓库中：","tags":"Tech","url":"http://leetschau.github.io/tortoisehgshi-yong-bi-ji.html","loc":"http://leetschau.github.io/tortoisehgshi-yong-bi-ji.html"},{"title":"Customize Code Template in Eclipse","text":"Window->Preferences->Java->Code Style->Code Templates: Comments->Types: Javadoc style of class, use Alt+Shift+J create; Code->New Java Files: Code Template of New Created Java Class File; Check \"Automatically add comments for new methods and types\" if you want javadoc added to your new created java file automatically. Here is my javadoc template of types: /** ${type_name} @author Chad Created: ${date} Last Modified: ${date} ${tags} */","tags":"Tech","url":"http://leetschau.github.io/customize-code-template-in-eclipse.html","loc":"http://leetschau.github.io/customize-code-template-in-eclipse.html"},{"title":"Mina读写事件的发生顺序","text":"这个Mina Echo Server包括服务器主类Main, 两个Filter类：MyFilter1, MyFilter2, 和一个handler类：EchoProtocolHandler。 import java.net.InetSocketAddress; import org.apache.mina.transport.socket.SocketAcceptor; import org.apache.mina.transport.socket.nio.NioSocketAcceptor; public class Main { public static void main(String[] args) throws Exception { SocketAcceptor acceptor = new NioSocketAcceptor(); acceptor.getFilterChain().addLast(\"myfilter1\", new MyFilter1()); acceptor.getFilterChain().addLast(\"myfilter2\", new MyFilter2()); acceptor.setHandler(new EchoProtocolHandler()); acceptor.bind(new InetSocketAddress(8293)); System.out.println(\"Listening on port \" + PORT); } } import org.apache.mina.core.filterchain.IoFilter; import org.apache.mina.core.filterchain.IoFilterChain; import org.apache.mina.core.session.IdleStatus; import org.apache.mina.core.session.IoSession; import org.apache.mina.core.write.WriteRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class MyFilter1 implements IoFilter { private static final Logger LOGGER = LoggerFactory .getLogger(MyFilter1.class); public void messageReceived(NextFilter nextFilter, IoSession session, Object message) throws Exception { LOGGER.info(\"MessageReceived!\"); nextFilter.messageReceived(session, message); } public void messageSent(NextFilter nextFilter, IoSession session, WriteRequest writeRequest) throws Exception { LOGGER.info(\"messageSent!\"); nextFilter.messageSent(session, writeRequest); } public void filterWrite(NextFilter nextFilter, IoSession session, WriteRequest writeRequest) throws Exception { LOGGER.info(\"filterWrite!\"); nextFilter.filterWrite(session, writeRequest); } // some other methods must implemented. } import org.apache.mina.core.filterchain.IoFilter; import org.apache.mina.core.filterchain.IoFilterChain; import org.apache.mina.core.session.IdleStatus; import org.apache.mina.core.session.IoSession; import org.apache.mina.core.write.WriteRequest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class MyFilter2 implements IoFilter { private static final Logger LOGGER = LoggerFactory .getLogger(MyFilter2.class); public void messageReceived(NextFilter nextFilter, IoSession session, Object message) throws Exception { LOGGER.info(\"MessageReceived!\"); nextFilter.messageReceived(session, message); } public void messageSent(NextFilter nextFilter, IoSession session, WriteRequest writeRequest) throws Exception { LOGGER.info(\"messageSent!\"); nextFilter.messageSent(session, writeRequest); } public void filterWrite(NextFilter nextFilter, IoSession session, WriteRequest writeRequest) throws Exception { LOGGER.info(\"filterWrite!\"); nextFilter.filterWrite(session, writeRequest); } // some other methods must implemented. } import org.apache.mina.core.buffer.IoBuffer; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IoSession; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class EchoProtocolHandler extends IoHandlerAdapter { private static final Logger LOGGER = LoggerFactory .getLogger(EchoProtocolHandler.class); @Override public void exceptionCaught(IoSession session, Throwable cause) { session.close(true); } @Override public void messageReceived(IoSession session, Object message) throws Exception { LOGGER.info(\"Received : \" + message); session.write(((IoBuffer) message).duplicate()); } @Override public void messageSent(IoSession session, Object message) { LOGGER.info(\"messageSent \" + message); } } 用XShell运行telnet localhost 8293，发一个字符串\"hi\"，运行结果如下： Listening on port 8293 [INFO] [2012-03-31 14:03:38,575] [com.leechau.mina.echoServer.MyFilter1] - [MessageReceived!] [INFO] [2012-03-31 14:03:38,576] [com.leechau.mina.echoServer.MyFilter2] - [MessageReceived!] [INFO] [2012-03-31 14:03:38,577] [com.leechau.mina.echoServer.EchoProtocolHandler] - [Received : HeapBuffer[pos=0 lim=4 cap=2048: 68 69 0D 0A]] [INFO] [2012-03-31 14:03:38,578] [com.leechau.mina.echoServer.MyFilter2] - [filterWrite!] [INFO] [2012-03-31 14:03:38,578] [com.leechau.mina.echoServer.MyFilter1] - [filterWrite!] [INFO] [2012-03-31 14:03:38,580] [com.leechau.mina.echoServer.MyFilter1] - [messageSent!] [INFO] [2012-03-31 14:03:38,580] [com.leechau.mina.echoServer.MyFilter2] - [messageSent!] [INFO] [2012-03-31 14:03:38,580] [com.leechau.mina.echoServer.EchoProtocolHandler] - [messageSent HeapBuffer[pos=0 lim=4 cap=2048: 68 69 0D 0A]] 可以看到messageReceived事件从Filter链顶端传播到handler；filterWrite事件发生在handler开始发送消息，但还未写入socket时，仅对Filter链有效，不作用于handler，从链尾向链首传播；messageSent事件发生在socket已被写入之后，从链顶端传播到handler；","tags":"Tech","url":"http://leetschau.github.io/minadu-xie-shi-jian-de-fa-sheng-shun-xu.html","loc":"http://leetschau.github.io/minadu-xie-shi-jian-de-fa-sheng-shun-xu.html"},{"title":"Mina的JMX支持","text":"以下是一个增加了JMX支持的Mina Echo Server. package org.apache.mina.echoServer; import java.lang.management.ManagementFactory; import java.net.InetSocketAddress; import javax.management.MBeanServer; import javax.management.ObjectName; import org.apache.mina.transport.socket.SocketAcceptor; import org.apache.mina.transport.socket.nio.NioSocketAcceptor; import org.apache.mina.integration.jmx.IoServiceMBean; public class Main { public static void main(String[] args) throws Exception { SocketAcceptor acceptor = new NioSocketAcceptor(); acceptor.setHandler(new EchoProtocolHandler()); acceptor.bind(new InetSocketAddress(PORT)); System.out.println(\"Listening on port \" + 8293); MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer(); IoServiceMBean acceptorMBean = new IoServiceMBean(acceptor); ObjectName acceptorName = new ObjectName(acceptor.getClass().getPackage().getName() + \":type=acceptor,name=\" + acceptor.getClass().getSimpleName()); mBeanServer.registerMBean(acceptorMBean, acceptorName); } } package org.apache.mina.echoServer; import org.apache.mina.core.buffer.IoBuffer; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IdleStatus; import org.apache.mina.core.session.IoSession; import org.apache.mina.filter.ssl.SslFilter; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class EchoProtocolHandler extends IoHandlerAdapter { private static final Logger LOGGER = LoggerFactory.getLogger(EchoProtocolHandler.class); @Override public void exceptionCaught(IoSession session, Throwable cause) { session.close(true); } @Override public void messageReceived(IoSession session, Object message) throws Exception { LOGGER.info(\"Received : \" + message); session.write(((IoBuffer) message).duplicate()); } } ivy.xml: 启动服务是需要加VM参数-Dcom.sun.management.jmxremote： 命令行启动：java -Dcom.sun.management.jmxremote -classpath org.apache.mina.echoServer.Main Eclipse中启动：Run->Debug configuration中，Name: Main , VM arguments: -Dcom.sun.management.jmxremote 启动JConsole，连接org.apache.mina.echoServer.Main； 进入Main的监控窗口后MBean->操作，可以手工运行acceptor的方法，例如点击Dispose，会关闭acceptor。","tags":"Tech","url":"http://leetschau.github.io/minade-jmxzhi-chi.html","loc":"http://leetschau.github.io/minade-jmxzhi-chi.html"},{"title":"Java的Buffer读取操作","text":"Buffer用于从channel中读（或者向channel写）数据，它有3个标记，分别是capacity, limit & position，其中capacity是此buffer的容量（固定值），buffer初始化时（使用allocate方法）设定；limit是有效数据的边界，即0~limit之间是可读/写的数据，position是下一个应该被读/写的位置。 Buffer有两种模式：写模式和读模式，写模式是向buffer中写数据（例如socketChannel.read(buffer)），读模式是从buffer中读出数据。 写模式下limit总等于capacity，读模式下limit是最近一次写入的数据位置。 使用buffer读写数据的基本过程是一个4步循环： 向buffer写入数据； buffer.flip(); // 把buffer从写模式切换到读模式 从buffer中读出数据； if (buffer.hasRemaining()) {buffer.compact();} else {buffer.clear();} // compact和clear方法将buffer切换回写模式，下面有解释 以上解释来自于 Java NIO Buffer 。 compact和clear方法 compact方法将未读完的数据（position与limit之间的数据）平移到buffer头部，然后将position设到这段数据的尾部，这样后面的写操作将在这段数据后追加（见SocketChannel.read()方法的javadoc），而不会覆盖这段数据，然后将limit设为capacity；clear方法令position=0; limit=capacity;从而为读数据做好准备，详见二者的javadoc。 wrap方法 ByteBuffer buffer = ByteBuffer.allocate(10); byte[] content = { 27, 91, 75, 116, 117 }; buffer = ByteBuffer.wrap(content); assertEquals(0, buffer.position()); assertEquals(5, buffer.limit()); assertEquals(5, buffer.capacity()); 以上表明wrap方法会改变ByteBuffer对象的容量（capacity），并将其置为读模式； 实例演示 下面以ByteBuffer为例说明Java的buffer读写操作，以及对相关的几个参数的影响； import java.nio.ByteBuffer; public class GetPutByteBuffer { public static void main(String[] args) { ByteBuffer byteBuffer = ByteBuffer.allocate(10); System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit() + \" capacity=\" + byteBuffer.capacity()); // pos=0 limit=10 capacity=10 byteBuffer.put((byte) 20); System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); // pos=1 limit=10 byteBuffer.put((byte) 33); System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); // pos=2 limit=10 byteBuffer.put((byte) 55); byteBuffer.flip(); System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); // pos=0 limit=3 System.out.println(byteBuffer.get()); // 20 System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); // pos=1 limit=3 byteBuffer.rewind(); System.out.println(byteBuffer.get()); // 20 System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); // pos=1 limit=3 System.out.println(\"the remaining is: \" + byteBuffer.remaining()); // the remaining is: 2 while (byteBuffer.hasRemaining()) { System.out.println(byteBuffer.get()); System.out.println(\"pos=\" + byteBuffer.position() + \" limit=\" + byteBuffer.limit()); } / * 33 * pos=2 limit=3 * 55 * pos=3 limit=3 / } } 可以看到buffer的capacity是一个固定值，初始化时设定，pos初始为0，limit初始等于capacity，一次读（get）或写（put）都使pos加一，limit不变，flip使limit=pos，pos=0，接收完数据开始读取时这个动作是必须的，rewind使pos=0，相当于重新开始读数据。","tags":"Tech","url":"http://leetschau.github.io/javade-bufferdu-qu-cao-zuo.html","loc":"http://leetschau.github.io/javade-bufferdu-qu-cao-zuo.html"},{"title":"Mina与netty的区别","text":"从messageReceived的参数上可以看出： netty是在channel上传递event，mina是在iosession中传递message（默认是iobuffer类型）；","tags":"Tech","url":"http://leetschau.github.io/minayu-nettyde-qu-bie.html","loc":"http://leetschau.github.io/minayu-nettyde-qu-bie.html"},{"title":"Netty笔记","text":"Upstream & Downstream Upstream指网络层向应用层传播，Downstream相反，应用层向网络层传播，所以Upstream Events的代表是messageReceived，DownStream Events的代表是write方法； Netty javadoc中对ChannelEvent和ChannelPipeline的说明； 2013-05-08更新： upstream消息（从网络对端读取消息）从pipeline的handler链的头执行到尾，downstream消息（向网络对端写消息）从handler链的尾执行到头，参考Netty doc \"Interface ChannelPipeline\"中的图示； 通道隔离和状态设置","tags":"Tech","url":"http://leetschau.github.io/nettybi-ji.html","loc":"http://leetschau.github.io/nettybi-ji.html"},{"title":"Netty Echo Server传输机制分析","text":"工作目录：/home/godu/backup；上传netty-3.2.6.Final.jar； 源文件： EchoServer.java import java.net.InetSocketAddress; import java.util.concurrent.Executors; import org.jboss.netty.bootstrap.ServerBootstrap; import org.jboss.netty.channel.ChannelPipeline; import org.jboss.netty.channel.ChannelPipelineFactory; import org.jboss.netty.channel.Channels; import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory; public class EchoServer { public static void main(String[] args) throws Exception { // Configure the server. ServerBootstrap bootstrap = new ServerBootstrap( new NioServerSocketChannelFactory( Executors.newCachedThreadPool(), Executors.newCachedThreadPool())); // Set up the pipeline factory. bootstrap.setPipelineFactory(new ChannelPipelineFactory() { public ChannelPipeline getPipeline() throws Exception { return Channels.pipeline(new EchoServerHandler()); } }); // Bind and start to accept incoming connections. bootstrap.bind(new InetSocketAddress(8349)); } } EchoServerHandler.java import java.util.concurrent.atomic.AtomicLong; import java.util.logging.Level; import java.util.logging.Logger; import org.jboss.netty.buffer.ChannelBuffer; import org.jboss.netty.channel.ChannelHandlerContext; import org.jboss.netty.channel.ExceptionEvent; import org.jboss.netty.channel.MessageEvent; import org.jboss.netty.channel.SimpleChannelUpstreamHandler; public class EchoServerHandler extends SimpleChannelUpstreamHandler { private static final Logger logger = Logger .getLogger(EchoServerHandler.class.getName()); private final AtomicLong transferredBytes = new AtomicLong(); public long getTransferredBytes() { return transferredBytes.get(); } @Override public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) { // Send back the received message to the remote peer. transferredBytes.addAndGet(((ChannelBuffer) e.getMessage()) .readableBytes()); e.getChannel().write(e.getMessage()); } @Override public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) { // Close the connection when an exception is raised. logger.log(Level.WARNING, \"Unexpected exception from downstream.\", e.getCause()); e.getChannel().close(); } } 启动Echo Server： javac -cp .:./netty-3.2.6.Final.jar EchoServerHandler.java javac -cp .:./netty-3.2.6.Final.jar EchoServer.java java -cp .:./netty-3.2.6.Final.jar EchoServer 连接Server：XShell里运行： telnet 10.0.2.47 8349 ，建立连接后输入 bcde 并回车后可以看到收到了bcde，整个过程用wireshark监控内容如下（监控完后导出结果方法：File->Export->File，保存类型为txt）： No. Time Source Destination Protocol Length Info 1 0.000000 10.32.1.103 10.0.2.47 TCP 66 10811 > 8394 [SYN] Seq=0 Win=8192 Len=0 MSS=1460 WS=256 SACK_PERM=1 Frame 1: 66 bytes on wire (528 bits), 66 bytes captured (528 bits) Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1) Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47) Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 0, Len: 0 Source port: 10811 (10811) Destination port: 8394 (8394) [Stream index: 0] Sequence number: 0 (relative sequence number) Header length: 32 bytes Flags: 0x02 (SYN) Window size value: 8192 [Calculated window size: 8192] Checksum: 0x976d [validation disabled] Options: (12 bytes) No. Time Source Destination Protocol Length Info 2 0.000267 10.0.2.47 10.32.1.103 TCP 66 8394 > 10811 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460 SACK_PERM=1 WS=128 Frame 2: 66 bytes on wire (528 bits), 66 bytes captured (528 bits) Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95) Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103) Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 0, Ack: 1, Len: 0 Source port: 8394 (8394) Destination port: 10811 (10811) [Stream index: 0] Sequence number: 0 (relative sequence number) Acknowledgement number: 1 (relative ack number) Header length: 32 bytes Flags: 0x12 (SYN, ACK) Window size value: 5840 [Calculated window size: 5840] Checksum: 0x0552 [validation disabled] Options: (12 bytes) [SEQ/ACK analysis] No. Time Source Destination Protocol Length Info 3 0.000295 10.32.1.103 10.0.2.47 TCP 54 10811 > 8394 [ACK] Seq=1 Ack=1 Win=65536 Len=0 Frame 3: 54 bytes on wire (432 bits), 54 bytes captured (432 bits) Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1) Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47) Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 0 Source port: 10811 (10811) Destination port: 8394 (8394) [Stream index: 0] Sequence number: 1 (relative sequence number) Acknowledgement number: 1 (relative ack number) Header length: 20 bytes Flags: 0x10 (ACK) Window size value: 256 [Calculated window size: 65536] [Window size scaling factor: 256] Checksum: 0x5bf4 [validation disabled] [SEQ/ACK analysis] No. Time Source Destination Protocol Length Info 4 5.669101 10.32.1.103 10.0.2.47 TCP 58 10811 > 8394 [PSH, ACK] Seq=1 Ack=1 Win=65536 Len=4 Frame 4: 58 bytes on wire (464 bits), 58 bytes captured (464 bits) Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1) Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47) Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 4 Source port: 10811 (10811) Destination port: 8394 (8394) [Stream index: 0] Sequence number: 1 (relative sequence number) [Next sequence number: 5 (relative sequence number)] Acknowledgement number: 1 (relative ack number) Header length: 20 bytes Flags: 0x18 (PSH, ACK) Window size value: 256 [Calculated window size: 65536] [Window size scaling factor: 256] Checksum: 0x951f [validation disabled] [SEQ/ACK analysis] Data (4 bytes) 0000 62 63 64 65 bcde Data: 62636465 [Length: 4] No. Time Source Destination Protocol Length Info 5 5.669359 10.0.2.47 10.32.1.103 TCP 60 8394 > 10811 [ACK] Seq=1 Ack=5 Win=5888 Len=0 Frame 5: 60 bytes on wire (480 bits), 60 bytes captured (480 bits) Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95) Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103) Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 5, Len: 0 Source port: 8394 (8394) Destination port: 10811 (10811) [Stream index: 0] Sequence number: 1 (relative sequence number) Acknowledgement number: 5 (relative ack number) Header length: 20 bytes Flags: 0x10 (ACK) Window size value: 46 [Calculated window size: 5888] [Window size scaling factor: 128] Checksum: 0x5cc2 [validation disabled] [SEQ/ACK analysis] No. Time Source Destination Protocol Length Info 6 5.669397 10.32.1.103 10.0.2.47 TCP 56 10811 > 8394 [PSH, ACK] Seq=5 Ack=1 Win=65536 Len=2 Frame 6: 56 bytes on wire (448 bits), 56 bytes captured (448 bits) Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1) Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47) Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 5, Ack: 1, Len: 2 Source port: 10811 (10811) Destination port: 8394 (8394) [Stream index: 0] Sequence number: 5 (relative sequence number) [Next sequence number: 7 (relative sequence number)] Acknowledgement number: 1 (relative ack number) Header length: 20 bytes Flags: 0x18 (PSH, ACK) Window size value: 256 [Calculated window size: 65536] [Window size scaling factor: 256] Checksum: 0x4edc [validation disabled] [SEQ/ACK analysis] Data (2 bytes) 0000 0d 0a .. Data: 0d0a [Length: 2] No. Time Source Destination Protocol Length Info 7 5.669574 10.0.2.47 10.32.1.103 TCP 60 8394 > 10811 [ACK] Seq=1 Ack=7 Win=5888 Len=0 Frame 7: 60 bytes on wire (480 bits), 60 bytes captured (480 bits) Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95) Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103) Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 0 Source port: 8394 (8394) Destination port: 10811 (10811) [Stream index: 0] Sequence number: 1 (relative sequence number) Acknowledgement number: 7 (relative ack number) Header length: 20 bytes Flags: 0x10 (ACK) Window size value: 46 [Calculated window size: 5888] [Window size scaling factor: 128] Checksum: 0x5cc0 [validation disabled] [SEQ/ACK analysis] No. Time Source Destination Protocol Length Info 8 5.682922 10.0.2.47 10.32.1.103 TCP 60 8394 > 10811 [PSH, ACK] Seq=1 Ack=7 Win=5888 Len=6 Frame 8: 60 bytes on wire (480 bits), 60 bytes captured (480 bits) Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95) Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103) Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 6 Source port: 8394 (8394) Destination port: 10811 (10811) [Stream index: 0] Sequence number: 1 (relative sequence number) [Next sequence number: 7 (relative sequence number)] Acknowledgement number: 7 (relative ack number) Header length: 20 bytes Flags: 0x18 (PSH, ACK) Window size value: 46 [Calculated window size: 5888] [Window size scaling factor: 128] Checksum: 0x88df [validation disabled] [SEQ/ACK analysis] Data (6 bytes) 0000 62 63 64 65 0d 0a bcde.. Data: 626364650d0a [Length: 6] No. Time Source Destination Protocol Length Info 9 5.887726 10.32.1.103 10.0.2.47 TCP 54 10811 > 8394 [ACK] Seq=7 Ack=7 Win=65536 Len=0 Frame 9: 54 bytes on wire (432 bits), 54 bytes captured (432 bits) Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1) Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47) Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 7, Ack: 7, Len: 0 Source port: 10811 (10811) Destination port: 8394 (8394) [Stream index: 0] Sequence number: 7 (relative sequence number) Acknowledgement number: 7 (relative ack number) Header length: 20 bytes Flags: 0x10 (ACK) Window size value: 256 [Calculated window size: 65536] [Window size scaling factor: 256] Checksum: 0x5be8 [validation disabled] [SEQ/ACK analysis] 可以看到第4个包是C向S发送bcde，第6个是向S发送回车，第8个包是S向C返回bcde回车；","tags":"Tech","url":"http://leetschau.github.io/netty-echo-serverchuan-shu-ji-zhi-fen-xi.html","loc":"http://leetschau.github.io/netty-echo-serverchuan-shu-ji-zhi-fen-xi.html"},{"title":"totalcmd解压插件","text":"bz2: BZIP2 ; 7z: wcx_7zip_0.7.6.5.bin.zip; 另有wcx_7z_plugin_1.0.1.0，需要额外找7zip4.x版exe文件，不好用；","tags":"Tech","url":"http://leetschau.github.io/totalcmdjie-ya-cha-jian.html","loc":"http://leetschau.github.io/totalcmdjie-ya-cha-jian.html"},{"title":"用autohotkey运行命令行指令","text":"网卡识别错误导致无法上网，需要在命令行中输入ipconfig /release和ipconfig /renew两个命令，执行这个动作的ahk脚本是： RunWait, %comspec% /c ipconfig /release && ipconfig /renew 其中RunWait的意思是以同步方式执行本条指令，即当ipconfig执行完毕后ahk脚本才执行（RunWait）后面的脚本，Run是异步方式； %comspec% /c ipconfig /release && ipconfig /renew 是windows的命令行语法，可以用如下方法验证： C:\\Users\\chad> echo %comspec% C:\\Windows\\system32\\cmd.exe C:\\Users\\chad> %comspec% /c dir /w && dir /w && pause","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeyyun-xing-ming-ling-xing-zhi-ling.html","loc":"http://leetschau.github.io/yong-autohotkeyyun-xing-ming-ling-xing-zhi-ling.html"},{"title":"关于ansi转义序列控制符","text":"颜色控制符 现象 Telnet发送ls指令收到的目录名（此目录名为2.1，用粗体标出）： < ESC > [ 00 m < ESC > [ 01 ; 34 m 2 . 1 < ESC > [ 00 m 对应的原始字节流是（16进制）： 1 b 5 b 30 30 6 d 1 b 5 b 30 31 3 b 33 34 6 d 32 2 e 31 1 b 5 b 30 30 6 d 解释 这些正文前后奇怪的字符序列是 ANSI escape sequence ， 也就是为了在 字符终端 （俗语所云的\"命令行窗口\"）上显示控制格式、字体颜色等东西， 由 ANSI 制定的，服务器发送给 终端 的字符序列定义，例如下图中为了区别文件和目录， 服务器将文件名的颜色设为白色，而将目录名（Desktop）设为蓝色， 终端收到原始报文 anaconda - ks . cfg < SPACE >< SPACE >< ESC > [ 00 m < ESC > [ 01 ; 34 mDesktop < ESC > [ 00 m < SPACE >< SPACE > install . log 后，按照ANSI标准解释其中的转义序列，再形成我们看到的不同颜色。这个标准中关于字体颜色定义部分叫做SGR( Select Graphic Rendition )，格式是： CSI code_num m 其中CSI( Control Sequence Introducer ，这里是 [ )是控制符起始标志， code_num是字体颜色代号（详见ansi escape code的 SGR parameters 一节中对代码30~37的说明）， 可以是单一代码，也可以是用分号分隔的多个代码，其中00表示关闭所有颜色选项（可以理解为\"复位\"）， 01表示\"亮色\"，34表示\"蓝色\"，所以上图的原始报文可以翻译为： anaconda - ks . cfg < 颜色初始化 >< 亮色、蓝色 > Desktop < 颜色初始化 > install . log 下面是一个 ls -l 命令的结果截图和对应的原始ASCII码，其中字体颜色有： 蓝色（30+4），红色（30+1），绿色（30+2）以及绿色背景（40+2）； drwxr - xr - x 2 godu boco 4096 2011 - 04 - 15 < ESC > [ 01 ; 34 maaa111 < ESC > [ 00 m drwxr - xr - x 4 godu boco 4096 2011 - 03 - 03 < ESC > [ 01 ; 34 maatest < ESC > [ 00 m - rw - r --r-- 1 godu boco 4899 2011-06-14 <ESC>[00mcrc32.c<ESC>[00m - rw - r --r-- 1 godu boco 579 2011-06-14 <ESC>[00mcrc32 oracle.txt<ESC>[00m drwxr - xr - x 4 godu boco 4096 2011 - 05 - 11 < ESC > [ 01 ; 34 mGoduDb_test < ESC > [ 00 m - rw ------- 1 godu boco 2836280 2011-05-11 <ESC>[01;31mGoduDb_test.zip<ESC>[00m drwxr - xr - x 7 godu boco 4096 2011 - 04 - 28 < ESC > [ 01 ; 34 mGODU - platform < ESC > [ 00 m drwxr - xr - x 7 godu boco 4096 2010 - 12 - 20 < ESC > [ 01 ; 34 mGODU - platform_bak5 - 6 < ESC > [ 00 m - rw - r --r-- 1 godu boco 56420261 2011-05-06 <ESC>[01;31mGODU-platform-V2.1_P2_20110506.tar.gz<ESC>[00m - rwxr - xr - x 1 godu boco 7652 2011 - 06 - 14 < ESC > [ 01 ; 32 mlibcrc32 . so < ESC > [ 00 m drwxr - xr - x 60 godu boco 4096 2011 - 05 - 06 < ESC > [ 01 ; 34 mterracotta < ESC > [ 00 m drwxrwxrwx 13 godu boco 4096 2011 - 02 - 16 < ESC > [ 34 ; 42 mterracotta - 2 . 7 . 2 < ESC > [ 00 m - rw - r --r-- 1 godu boco 58982400 2011-02-16 <ESC>[01;31mterracotta-2.7.2.tar<ESC>[00m - rw - r --r-- 1 godu boco 49970439 2011-02-16 <ESC>[01;31mterracotta-2.7.2.tar.gz<ESC>[00m 光标定位和擦除屏幕 屏幕绘制方面的主要有\"指定光标位置\"（CSI n;m H）和\"擦除显示\"两类， 后者包括\"擦除屏幕\"（CSI n J）和\"擦除行\"（CSI n K）两小类， 参数用法见 wiki对CSI Codes的说明 ，其中\"擦除行\"被用于用户输入退格键（Backspace）的处理， 当用户（client）向server发送退格键（0x08）时，server返回的是\"08 1b 5b 4b\"， 也就是\"Backspace [K\"，其中Backspace使光标向前一个字符， \" [\"是转义字符起始标志（CSI），\"CSI K\"表示擦除光标到行尾的所有内容。 下面是一个mina server的handler的sessionOpened方法，使用了CSI5;5H和CSI2J，客户端连入这个server的效果如下图： @Override public void sessionOpened ( IoSession session ) { byte [] aes = { 0x1b , 0x5b , 0x35 , 0x3b , 0x35 , 0x48 , 0x1b , 0x5b , 0x32 , 0x4a , 0x1b , 0x5b , 0x30 , 0x30 , 0x6d , 0x1b , 0x5b , 0x33 , 0x34 , 0x3b , 0x34 , 0x32 , 0x6d , 0x32 , 0x2e , 0x31 , 0x1b , 0x5b , 0x30 , 0x30 , 0x6d } ; String aesStr = new String ( aes ); session . write ( aesStr ); System . out . println ( aesStr ); } <ESC>(B : Set to US ASCII character set(see \" VT100 ESC sequences \"for detail); 设置窗口标题（Set Window Title） 用putty登录10.0.2.47的23端口，收到的原始报文如下（用Wireshark抓包）： \\ 033 ] 0 ; godu @goduserver : ~ \\ 007 [ godu@goduserver ~ ] $ 可以看到登录成功后窗体标题变了，原因就是上面的\"\\033]0;...\\007\"造成的； 参考： Color Bash Prompt 切换屏幕 \\033[?1049h 和 \\033[?1049l 分别是切换到新屏幕和切换回来，演示程序见笔记 演示切换屏幕控制序列的程序 。 参考： Alternate screen buffer in Xterm/FreeBSD DECSC in tmux vs xterm 光标显示/隐藏 \\033[?25h 和 \\033[?25l 分别是显示和隐藏光标； 模式 Normal和Application模式的区别见 Cursor key mode .","tags":"Tech","url":"http://leetschau.github.io/guan-yu-ansizhuan-yi-xu-lie-kong-zhi-fu.html","loc":"http://leetschau.github.io/guan-yu-ansizhuan-yi-xu-lie-kong-zhi-fu.html"},{"title":"用Wireshark分析Telnet交互过程","text":"Windows系统下 用XShell作为Telnet客户端连接47服务器，整个过程可以用Wireshark（验证版本：1.6.5）完整地记录下来。 Wireshark->Capture->Interface中设置要监视的网卡； Wireshark->Capture->Options->Capture Filter后写要监控的目标主机IP地址，这里写： host 10.0.2.47 ； Wireshark->Capture->Start； 启动XShell连接47：Xshell:> telnet 10.0.2.47 ； Wireshark将显示整个交互过程（见下图），可以看到主界面分为3部分，上面按时间顺序列出了每次交互的数据包（packet）；中间是这个数据包的详细内容，第一层Frame 14（xx层？）是xxx，第二层Ethernet II（链路层）主要由源和目标主机的网卡（Mac）地址组成，用ifconfig -a(Linux)或者ipconfig /all(windows)可以验证，第3层（网络层）是IP协议报头，主要包括源和目标的IP地址等，第4层（传输层）是TCP协议报头，主要包括源和目标的端口号、包序列号等，第5层（应用层）是Telnet数据；主界面的下部是此数据包的具体内容，以16进制显示。 连接后首先进行选项协商，然后传输数据，下面以\"是否回显\"为例详细说明协商过程，图中10.0.2.47是Telnet Server，10.32.1.56是Client。 第14步S要求C回显：ff fd 01，即IAC DO ECHO（见上图）； 第17步C回答S客户端不回显：ff fc 01，即IAC WONT ECHO； 第19步S通知C服务端将回显：ff fb 01，即IAC WILL ECHO； 第20步C同意服务端回显：ff fd 01，即IAC DO ECHO； 选项协商中各种搭配的具体含义参见\" The Telnet Protocol \"； 更改XSehll窗口尺寸引起的window size negotiation： ff fa 1f 00 62 00 1b ff f0，即IAC SB 31(Options: Window Size) 98 27 IAC SE 转换为Telnet语句： Suboption Begin: Negotiate About window size Width: 98 Height: 27 Command: Suboption End 命令行用法 C:\\Program Files\\Wireshark>tshark -D 1. \\Device\\NPF_{4DF0B9FD-57A8-43FC-9EC9-354B454E475D} (VMware Virtual Ethernet Adapter) 2. \\Device\\NPF_{CA8CAD23-7ADD-4F2B-8A77-1E9E6810FE38} (Broadcom NetLink (TM) Gigabit Ethernet Driver) 3. \\Device\\NPF_{53720D33-0B96-48DB-A977-07A0EC43F65B} (VMware Virtual Ethernet Adapter) tshark -f \"host 10.0.2.47\" -i 2 -c 20 -w myfile 用wireshark打开myfile 用tshark -F可以看到snoop好像是可以在solaris上打开的输入监控文件格式 Linux下 47上目前的操作系统是Red Hat Enterprise Linux Server release 5.4，安装tshark需要 libsmi-0.4.5-2.el5.x86_64.rpm 和 wireshark-1.0.15-1.el5_6.4.x86_64.rpm 两个包，安装过程很简单，首先将这个包上传到47上，然后执行： rpm -ivh libsmi-0.4.5-2.el5.x86_64.rpm rpm -ivh wireshark-1.0.15-1.el5_6.4.x86_64.rpm verify: [root@goduserver tool]# whereis tshark tshark: /usr/sbin/tshark /usr/share/man/man1/tshark.1.gz rpm包下载站点： pkgs.org ，备用站点： http://rpm.pbone.net/ 获取网卡列表： [root@goduserver tool]# tshark -D 1. eth3 2. ... 获取监测数据： [root@goduserver help]# tshark -i eth3 -w myoutput host 10.32.1.59 普通用户权限不够无法进行监测： [godu@goduserver ~]$ tshark -i eth3 host 10.32.1.59 Capturing on eth3 tshark: The capture session could not be initiated (socket: Operation not permitted)... 读取监测数据： [root@goduserver tool]# tshark -r myoutput -x -V 将监测数据保存为文本： [root@goduserver tool]# tshark -r myoutput -x -V > mytxt 或者将myoutput下载到PC上用Wireshark分析；","tags":"Tech","url":"http://leetschau.github.io/yong-wiresharkfen-xi-telnetjiao-hu-guo-cheng.html","loc":"http://leetschau.github.io/yong-wiresharkfen-xi-telnetjiao-hu-guo-cheng.html"},{"title":"Red Hat Enterprise上安装Telnet服务","text":"Red Hat Enterprise默认只提供ssh和sftp服务，没有提供telnet和ftp服务，安装过程是： 用sftp上传telnet server安装包：telnet-server-0.17-39.el5.x86_64.rpm； 使用root用户运行： rpm -ivh telnet*.rpm （普通用户安装会出现\"can't create transaction lock on...\"错误）-ivh中，i=install, v=Print verbose information, h=print hash marks； 2.1 安装前可以用 rpm -qpi telnet*.rpm 查看安装包的内容，参数含义：q=query, p=query an (uninstalled) package,i=display package information； 修改/etc/xinetd.d/telnet，将\"disable=yes\"改为\"disable=no\"； 重启xinetd： service xinetd restart （telnet服务进程由xinetd管理）。","tags":"Tech","url":"http://leetschau.github.io/red-hat-enterpriseshang-an-zhuang-telnetfu-wu.html","loc":"http://leetschau.github.io/red-hat-enterpriseshang-an-zhuang-telnetfu-wu.html"},{"title":"Win7中开启Telnet Server","text":"控制面板->程序->打开或关闭Windows功能，勾选【Telnet服务器】；运行【服务】（开始搜索框中输入services.msc）中将\"Telnet\"设为手工启动； （此步似乎可不做？）【登录】标签页中选【此账户】，然后键入 NT AUTHORITY\\LocalService，密码置空； 创建一个新的标准用户client（控制面板->用户账户和家庭安全->用户账户->管理账户->创建一个新账户），密码telnetclient； 运行secpol.msc（本地安全策略）; 打开本地策略->安全选项，找到网络访问--本地账户的共享和安全模型，右击属性，选择【经典】； 本地用户和组（运行lusrmgr.msc）管理界面中，【组 -> TelnetClients】（如果没有TelnetClients组则创建之），将client用户加入到此组中： 验证：用XShell/SecureCRT运行： telnet localhost ，看是否能连上； 以后需要使用Telnet服务时运行services.msc找到Telnet服务启动即可。 参考： win7环境下telnet完整配置与测试","tags":"Tech","url":"http://leetschau.github.io/win7zhong-kai-qi-telnet-server.html","loc":"http://leetschau.github.io/win7zhong-kai-qi-telnet-server.html"},{"title":"在表中插入字段的sql语句","text":"参考 给表增加一个字段的SQL怎写？ alter table add <字段名> <数据类型> default primary key","tags":"Tech","url":"http://leetschau.github.io/zai-biao-zhong-cha-ru-zi-duan-de-sqlyu-ju.html","loc":"http://leetschau.github.io/zai-biao-zhong-cha-ru-zi-duan-de-sqlyu-ju.html"},{"title":"用autohotkey帮助触摸板实现鼠标中键单击","text":"笔记本的触摸板没有中键，但在Chrome里用中键单击实现\"新标签页里打开链接\"是一个很常用的动作，偏偏我又不愿意每次用笔记本的时候接鼠标，只好请出无所不能的Autohotkey大仙了，下面的脚本运行后，先将鼠标移动到链接上，然后Alt+Space就实现了中键单击的效果。 !Space:: SendInput, {MButton}","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeybang-zhu-hong-mo-ban-shi-xian-shu-biao-zhong-jian-dan-ji.html","loc":"http://leetschau.github.io/yong-autohotkeybang-zhu-hong-mo-ban-shi-xian-shu-biao-zhong-jian-dan-ji.html"},{"title":"Virtual Desktop Tools on Windows","text":"Windows 10 Virtual Desktop Enhancer sdias/win-10-virtual-desktop-enhancer on github is written in autohotkey. No need to install, which is more light-weighted than VirtuaWin. It's configurations are all in settings.ini , easy to edit, view and save. Its taskbar icon is a digital number, which is clear to see as VirtuaWin. To make its shortcuts more i3wm-style, modify its configs as followings: SwitchDesktop = Alt MoveWindowToDesktop = Alt , Shift However, it conflicts with tmux configurations. When you SSH to a remote, open tmux there, and press Alt-2 , you can't jump to window no.2 in tmux. Instead you jump to the virtual desktop no.2. To fix this, modify the ~/.tmux.conf as follows: bind - n M - . command - prompt bind - n M - a select - window - t 1 bind - n M - s select - window - t 2 bind - n M - d select - window - t 3 bind - n M - f select - window - t 4 bind - n M - g select - window - t 5 bind - n M - u select - window - t 6 bind - n M - i select - window - t 7 bind - n M - o select - window - t 8 bind - n M - 9 select - window - t 9 Note: m0ngr31/VirtualDesktopManager on github is another option. But its taskbar icon is very hard to see. VirtuaWin VirtuaWin is incompatible with Windows built-in virtual desktop. Desktop layout in Settings of 3 columns and 2 rows (2 wide by 2 deep). Hotkey definitions: NAV Move to desktop 1: alt-win-u NAV Move to desktop 2: alt-win-i NAV Move to desktop 3: alt-win-o NAV Move to desktop 4: alt-win-j NAV Move to desktop 5: alt-win-k NAV Move to desktop 6: alt-win-l WIN Move to desktop 1: alt-shift-win-u WIN Move to desktop 2: alt-shift-win-i WIN Move to desktop 3: alt-shift-win-o WIN Move to desktop 4: alt-shift-win-j WIN Move to desktop 5: alt-shift-win-k WIN Move to desktop 6: alt-shift-win-l WIN Gather all windows: alt-win-h UI Open VirtuaWin setup: alt-win-p Note: NAV (abbr. for navigate ) means jump to . WIN (abbr. for window ) means move the activated window to . Gather all windows means moving windows in all desttops to current desktop. Verified on Windows 10 at 2018.2.13. Dexpot is another freeware like this.","tags":"Tech","url":"http://leetschau.github.io/virtual-desktop-tools-on-windows.html","loc":"http://leetschau.github.io/virtual-desktop-tools-on-windows.html"},{"title":"手工编译运行Computer Network中的示例Applet","text":"Kurose和Ross的Computer Network: A Top-Down Approach中有很多演示动画很好，这些动画都是用Java Applet做的，在网上看时需要给浏览器安装插件，而且处于安全性考虑浏览器一般都禁止播放Applet，好在 Computer Networking: A Top-Down Approach Fourth Edition Companion Website 提供了这些动画的源代码，本着自己动手丰衣足食的精神，下面以第一个动画为例说明手工编译运行的过程。 下载 Transmission versus Propagation Delay Applet (Chapter 1) 的源代码，保存为f:\\linesim\\LineSimApplet.java（源码中包名是linesim，所以要放在linesim文件夹下）； 编译LineSimApplet.java：F:\\linesim> javac LineSimApplet.java 建立html文件：F盘下新建test.html文件： 运行applet：F:> appletviewer test.html 注：计算机上需要预先安装jdk，appletviewer就在$JAVA_HOME/bin下；","tags":"Tech","url":"http://leetschau.github.io/shou-gong-bian-yi-yun-xing-computer-networkzhong-de-shi-li-applet.html","loc":"http://leetschau.github.io/shou-gong-bian-yi-yun-xing-computer-networkzhong-de-shi-li-applet.html"},{"title":"Win7命令行窗口中文变为乱码的修复方法","text":"打开一个命令行窗口，输入命令 chcp 936 ，将窗口当前代码页改为GBK； 窗口标题栏上【右键->默认值->默认代码页】改为【936...GBK】即可。 使用plink在windows命令行窗口连接linux服务器时，GBK代码页会导致显示问题， 就需要把窗口代码页改为UTF-8： chcp 65001 .","tags":"Tech","url":"http://leetschau.github.io/win7ming-ling-xing-chuang-kou-zhong-wen-bian-wei-luan-ma-de-xiu-fu-fang-fa.html","loc":"http://leetschau.github.io/win7ming-ling-xing-chuang-kou-zhong-wen-bian-wei-luan-ma-de-xiu-fu-fang-fa.html"},{"title":"自动生成/取消列表编号的ahk脚本","text":"生成效果如下： 原始文本： the first line; the second line; the third line; 转换后文本： the first line; the second line; the third line; 取消则是生成的逆过程，用于列表中插入新内容后用\"取消->再次生成\"的方法刷新列表编号。 生成脚本： &#94;b:: clipboard = SendInput, &#94;c ClipWait clipboard = my prefix %clipboard% my suffix SendInput, &#94;v return 取消脚本：","tags":"Tech","url":"http://leetschau.github.io/zi-dong-sheng-cheng-qu-xiao-lie-biao-bian-hao-de-ahkjiao-ben.html","loc":"http://leetschau.github.io/zi-dong-sheng-cheng-qu-xiao-lie-biao-bian-hao-de-ahkjiao-ben.html"},{"title":"putty编译过程","text":"在Win7上用Visual Studio编译putty源代码。 安装vs2005，只安装c++和.net framework sdk即可； 将putty-src.zip解压到e:\\MyDoc\\VSProjects\\Putty下； 用vs2005打开e:\\MyDoc\\VSProjects\\Putty\\WINDOWS\\MSVC\\PUTTY.DSW； 打开C:\\Program Files\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\Include\\Security.h，在第一行加上\"#define SECURITY_WIN32\"； 编译putty项目； 注：如果不做第4步，会报 fatal error C1189: #error : You must define one of SECURITY_WIN32, SECURITY_KERNEL, or Generating Code... 导致编译失败。","tags":"Tech","url":"http://leetschau.github.io/puttybian-yi-guo-cheng.html","loc":"http://leetschau.github.io/puttybian-yi-guo-cheng.html"},{"title":"移动窗口的ahk脚本","text":"有的程序启动后标题栏在桌面之外，造成程序窗口显示不全，而且无法拖动窗口改变位置，这时候无敌的autohotkey又可以大显身手了： 首先看任务栏得到这个窗口的标题（这里假设为 YTubePlayer ），然后写如下脚本： SetTitleMatchMode, 2 WinMove, YTubePlayer, , 20, 20 这样窗口就移动到能够拖拽和更改大小的位置了。运行脚本的方法有两种，一是存为.ahk文件后双击运行（前提是已经将ahk与autohotkey进行了后缀关联），而是安装 SciTE4AutoHotkey ，在这个编辑器里写好脚本后直接F5运行即可。","tags":"Tech","url":"http://leetschau.github.io/yi-dong-chuang-kou-de-ahkjiao-ben.html","loc":"http://leetschau.github.io/yi-dong-chuang-kou-de-ahkjiao-ben.html"},{"title":"Ldap服务器配置记录","text":"1 Server 使用OpenDS-2.2.1.zip。 1.1 on Windows 解压后运行$LDAP_HOME/setup.bat，会出现一个图形安装界面，使用默认值即可。 管理工具在$LDAP_HOME/bat/control-panel.bat，也是图形界面，可以开启或者停止ldap服务； 1.2 Server on Linux 由root用户解压后运行$LDAP_HOME/setup（因为ldap默认绑定389端口，而linux/unix要求小于1024的端口只能由管理员使用）。 2 Client Windows客户端是LdapBrowser，解压后运行其中的lbe.bat即可。","tags":"Tech","url":"http://leetschau.github.io/ldapfu-wu-qi-pei-zhi-ji-lu.html","loc":"http://leetschau.github.io/ldapfu-wu-qi-pei-zhi-ji-lu.html"},{"title":"MIT/GNU Scheme 笔记","text":"Edwin是MIT/GNU Scheme安装包附带的一个文本编辑器，似乎是Emacs的一个变体； Evaluate a expression in Edwin: c-x, c-e ; Quit Edwin: c-x, c-c ; 挂起Edwin返回到Scheme REPL模式： c-x, z （松开ctrl之后按z） Quit MIT/GNU Scheme: (exit) 启动MIT/GNU Scheme REPL模式的ahk快捷键定义： &#94;! s :: Run , \"C:\\Program Files\\MIT-GNU Scheme\\bin\\mit-scheme.exe\" --library \"C:\\Program Files\\MIT-GNU Scheme\\lib\" ; Start MIT / GNU Scheme 注：c-x表示同时按住ctrl和x键；","tags":"Tech","url":"http://leetschau.github.io/mitgnu-scheme-bi-ji.html","loc":"http://leetschau.github.io/mitgnu-scheme-bi-ji.html"},{"title":"GODU连接SSH网元的日志分析","text":"以下比较了登录密码正确和错误时日志的相同和不同之处。正常连接过程的日志： [INFO] [2012-02-09 13:56:39,067] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 管理模式，下发命令:cn id=1830753227] [DEBUG] [2012-02-09 13:56:39,071] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [DEBUG] [2012-02-09 13:56:39,074] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [INFO] [2012-02-09 13:56:39,075] [com.boco.godu.framework.command.CommandOpenne,984] - [NEID:1830753227;Channels:[channelID=52318885;channelName=FCGBSC7-5000端口;priority=0]] [INFO] [2012-02-09 13:56:39,075] [com.boco.godu.framework.command.CommandOpenne,759] - [get channelid:52318885] [INFO] [2012-02-09 13:56:39,076] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] FOUND ID:52318885] [DEBUG] [2012-02-09 13:56:39,077] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [DEBUG] [2012-02-09 13:56:39,079] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] ==================PreOccupy the NE=================] [DEBUG] [2012-02-09 13:56:39,079] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] NEID:1830753227;;channelID=52318885;channelName=FCGBSC7-5000端口;priority=0] [INFO] [2012-02-09 13:56:39,080] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 没有配置登录脚本] [INFO] [2012-02-09 13:56:39,080] [com.boco.godu.framework.ConnectorFactory,44] - [connecting ne with protocal:SSH] [INFO] [2012-02-09 13:56:39,081] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] Begin to Connection NE,10.0.2.47:22..............] [INFO] [2012-02-09 13:56:39,081] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 开始连接网元awaitUninterruptibly127.0.0.1:8900] [DEBUG] [2012-02-09 13:56:39,082] [com.boco.godu.adapter.telnet.TelnetConnectorHandler,150] - [create session:10_0_2_47&&1234&&6&&76] [INFO] [2012-02-09 13:56:39,083] [com.boco.godu.adapter.ssh.SshHandler,71] - [[76:/127.0.0.1:8900] SessionOpen,add 10_0_2_47&&1234&&6&&76to sessionMap] [DEBUG] [2012-02-09 13:56:39,086] [org.apache.velocity.runtime.log.Log4JLogChute,168] - [ResourceManager : found com/boco/godu/adapter/proxy/internalPojo.vm with loader org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader] [INFO] [2012-02-09 13:56:39,093] [com.boco.godu.adapter.proxy.ssh.SshProxy,116] - [ssh client try to connect:10.0.2.47@22] [INFO] [2012-02-09 13:56:39,238] [com.boco.godu.adapter.proxy.ssh.SshProxy,136] - [SSH-2.0-OpenSSH_4.3-------------------------------------------------] [INFO] [2012-02-09 13:56:39,242] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] [OpenNe] Connect 10.0.2.47:22 completed!] [DEBUG] [2012-02-09 13:56:39,244] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] Step1, get NE Name] [DEBUG] [2012-02-09 13:56:39,244] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] Step 2,Configure timeout] [INFO] [2012-02-09 13:56:39,245] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] [OpenNe] step 3, Terminal status fine] [DEBUG] [2012-02-09 13:56:39,245] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [INFO] [2012-02-09 13:56:39,247] [com.boco.godu.adapter.manager.ManagerMap,105] - [event:CONNECTION] [INFO] [2012-02-09 13:56:39,248] [com.boco.godu.common.util.GlobalUtil,430] - [get current platform:10_0_2_47&&1234&&0&&73] [DEBUG] [2012-02-09 13:56:39,248] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [INFO] [2012-02-09 13:56:39,249] [com.boco.godu.common.util.GlobalUtil,441] - [delete local or preoccupied ne:10_0_2_47&&1234&&0&&73] [DEBUG] [2012-02-09 13:56:39,250] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] step 4, remove the preoccupied ne] [DEBUG] [2012-02-09 13:56:39,250] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] step 5, config command status] [DEBUG] [2012-02-09 13:56:39,251] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] Step 6,Config timeout] [INFO] [2012-02-09 13:56:39,251] [com.boco.godu.adapter.ssh.SshHandler,71] - [[76:/127.0.0.1:8900] add filter LOGIN_ENDFLAG_FILTER; Class =com.boco.godu.adapter.filter.LoginEndFlagFilter] [INFO] [2012-02-09 13:56:39,252] [com.boco.godu.framework.command.CommandOpenne,1175] - [add connector EndFlag :>|<|#|\\ \\(|%] [DEBUG] [2012-02-09 13:56:39,252] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] Step 7,Config login_endflag_filter] [INFO] [2012-02-09 13:56:39,253] [com.boco.godu.adapter.manager.ManagerMap,105] - [event:NESUBSCRIBE] [DEBUG] [2012-02-09 13:56:39,253] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] [OpenNe] step 8, establish pub/sub relation] [DEBUG] [2012-02-09 13:56:39,253] [com.boco.godu.common.util.IoSessionHelper,72] - [(0x0000004C: nio socket, client, /127.0.0.1:58043 => /127.0.0.1:8900) send 0 to messageReceive for cached bufferas buffer:2Last login: Thu Feb 9 13:55:24 2012 from goduserver ] [INFO] [2012-02-09 13:56:39,254] [com.boco.godu.framework.command.CommandSetEndFlag,137] - [设置命令结束:vendor_id=1;ne_type=200;version=07B] [INFO] [2012-02-09 13:56:39,255] [com.boco.godu.adapter.ssh.SshHandler,71] - [[76:/127.0.0.1:8900] add filter ChineseByteFilter; Class =com.boco.godu.adapter.filter.ChineseByteFilter] [INFO] [2012-02-09 13:56:39,255] [com.boco.godu.adapter.ssh.SshHandler,71] - [[76:/127.0.0.1:8900] add filter ENDFLAGFILTER; Class =com.boco.godu.adapter.filter.CmdOverFilter] [DEBUG] [2012-02-09 13:56:39,255] [com.boco.godu.framework.commandover.CommandOverUtils,118] - [begin verify cmdover status by ne_type=200;version=07B;vendor_id=1] [DEBUG] [2012-02-09 13:56:39,256] [com.boco.godu.framework.commandover.CommandOverUtils,124] - [STARTING COMMAND OVER STATUS=1] [DEBUG] [2012-02-09 13:56:39,257] [com.boco.godu.framework.commandover.CommandOverUtils,131] - [STATUS=1 has empty overStatus] [DEBUG] [2012-02-09 13:56:39,257] [com.boco.godu.framework.commandover.CommandOverUtils,124] - [STARTING COMMAND OVER STATUS=2] [DEBUG] [2012-02-09 13:56:39,257] [com.boco.godu.framework.commandover.CommandOverUtils,131] - [STATUS=2 has empty overStatus] [DEBUG] [2012-02-09 13:56:39,258] [com.boco.godu.framework.commandover.CommandOverUtils,124] - [STARTING COMMAND OVER STATUS=3] [DEBUG] [2012-02-09 13:56:39,258] [com.boco.godu.framework.commandover.CommandOverUtils,131] - [STATUS=3 has empty overStatus] [DEBUG] [2012-02-09 13:56:39,258] [com.boco.godu.framework.commandover.CommandOverUtils,124] - [STARTING COMMAND OVER STATUS=4] [DEBUG] [2012-02-09 13:56:39,259] [com.boco.godu.framework.commandover.CommandOverUtils,129] - [END COMMAND OVER STATUS=4] [DEBUG] [2012-02-09 13:56:39,259] [com.boco.godu.framework.command.CommandSetEndFlag,202] - [命令结束表达式：{}] [DEBUG] [2012-02-09 13:56:39,279] [com.boco.godu.adapter.proxy.ssh.GODUSSHChannelEventListener,34] - [ssh channel receive:[91, 103, 111, 100, 117, 64, 103, 111, 100, 117, 115, 101, 114, 118, 101, 114, 32, 126, 93, 36, 32]as String:[godu@goduserver ~]\\) ] [INFO] [2012-02-09 13:56:39,284] [com.boco.godu.adapter.filter.LoginEndFlagFilter,50] - [found login mark] 登录密码错误时连接过程的日志： [INFO] [2012-02-09 14:00:08,073] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 管理模式，下发命令:cn id=1830753227] [DEBUG] [2012-02-09 14:00:08,077] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [DEBUG] [2012-02-09 14:00:08,078] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [INFO] [2012-02-09 14:00:08,078] [com.boco.godu.framework.command.CommandOpenne,984] - [NEID:1830753227;Channels:[channelID=52318885;channelName=FCGBSC7-5000端口;priority=0]] [INFO] [2012-02-09 14:00:08,079] [com.boco.godu.framework.command.CommandOpenne,759] - [get channelid:52318885] [INFO] [2012-02-09 14:00:08,079] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] FOUND ID:52318885] [DEBUG] [2012-02-09 14:00:08,080] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [DEBUG] [2012-02-09 14:00:08,081] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] ==================PreOccupy the NE=================] [DEBUG] [2012-02-09 14:00:08,082] [com.boco.godu.app.server.TelnetServerHandler,56] - [[73:/10.32.1.6:56183] NEID:1830753227;;channelID=52318885;channelName=FCGBSC7-5000端口;priority=0] [INFO] [2012-02-09 14:00:08,082] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 没有配置登录脚本] [INFO] [2012-02-09 14:00:08,083] [com.boco.godu.framework.ConnectorFactory,44] - [connecting ne with protocal:SSH] [INFO] [2012-02-09 14:00:08,083] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] Begin to Connection NE,10.0.2.47:22..............] [INFO] [2012-02-09 14:00:08,084] [com.boco.godu.app.server.TelnetServerHandler,71] - [[73:/10.32.1.6:56183] 开始连接网元awaitUninterruptibly127.0.0.1:8900] [DEBUG] [2012-02-09 14:00:08,085] [com.boco.godu.adapter.telnet.TelnetConnectorHandler,150] - [create session:10_0_2_47&&1234&&6&&79] [INFO] [2012-02-09 14:00:08,086] [com.boco.godu.adapter.ssh.SshHandler,71] - [[79:/127.0.0.1:8900] SessionOpen,add 10_0_2_47&&1234&&6&&79to sessionMap] [DEBUG] [2012-02-09 14:00:08,088] [org.apache.velocity.runtime.log.Log4JLogChute,168] - [ResourceManager : found com/boco/godu/adapter/proxy/internalPojo.vm with loader org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader] [INFO] [2012-02-09 14:00:08,098] [com.boco.godu.adapter.proxy.ssh.SshProxy,116] - [ssh client try to connect:10.0.2.47@22] [INFO] [2012-02-09 14:00:09,863] [com.boco.godu.adapter.ssh.SshHandler,71] - [[79:/127.0.0.1:8900] 关闭与网元的连接,返回到命令模式] [INFO] [2012-02-09 14:00:09,863] [com.boco.godu.adapter.ssh.SshHandler,71] - [[79:/127.0.0.1:8900] ====================Close NE routing information=======================10_0_2_47&&1234&&6&&79] [DEBUG] [2012-02-09 14:00:09,863] [com.boco.godu.common.util.GlobalUtil,549] - [find platform at 0 times] [WARN] [2012-02-09 14:00:15,595] [com.boco.godu.adapter.proxy.facade.ConnectorMonitorThread,25] - [proxy id=5d1d1a0b-aa1c-4a94-8a1d-3aade8327313 is not alive,destroy it] 二者比较可知，不同之处主要发生在 ssh client try to connect:10.0.2.47@22 这行日志后，正常的连接过程后面是： SSH-2.0-OpenSSH_4.3------------- ， 如果密码错误则后面的日志是\" 关闭与网元的连接,返回到命令模式 \"。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/godulian-jie-sshwang-yuan-de-ri-zhi-fen-xi.html","loc":"http://leetschau.github.io/godulian-jie-sshwang-yuan-de-ri-zhi-fen-xi.html"},{"title":"Access Internet with Tor Browser","text":"First download and install tor browser . When starting tor browser, choose Yes when asked for if the ISP blocked the tor network. Choose meek-azure for Trnasport type in Connect with provided bridges . Choose No when asked for if a local proxy is needed. Then click Connect button. Updated at 2017.12.29. 基于Tor的HTTP代理方案 使用工具： Vidalia , Tor and Polipo ； 用Tor连接tor网络，vidalia是tor的图形化配置界面，但tor只提供socks5代理， 需要用polipo将socks5转为http代理，以供其他程序使用，下面是搭建过程。 第一步：安装Polipo，下载安装包（polipo-1.0.4.1-forbidden-1-win32.exe），运行之， 安装在f:\\Software\\Polipo下，然后写配置文件（f:\\Software\\Polipo\\polipo.conf）： socksParentProxy = \"localhost:9050\" socksProxyType = socks5 diskCacheRoot = \"\" # disableLocalInterface = true 第二步：下载 Tor Browser Bundle ，里面包括了Tor, Vidalia和一个便携版的Firefox， 解压后运行Start Tor Browser.exe，出现vidalia界面： Vidalia Control Panal -> Settings -> General -> Proxy Application下勾选 \"Start a proxy ...\"，下面写上polipo.exe的路径，Application Arguments下面写： -c ，如下图： 配好后重启vidalia，验证tor和polipo运行成功的方法是命令行中运行： netstat -ano|findstr 9050 和 netstat -ano|findstr 8123 ， 其中9050是tor绑定的端口，8123是polipo绑定的端口； 第三步：配置要使用http代理的软件。 以GreenBrowser为例：在【工具->代理->设置代理】里新建一个名为polipo， 地址为 http://127.0.0.1:8123 的代理，【工具->代理】下会多一个【polipo】项， 选中它，在地址栏中输入 www.facebook.com , bingo! 应用实例1：calibre的代理设置 在windows系统中设置一个名为 HTTP_PROXY 的环境变量，值为 http://127.0.0.1:8123 ， 然后在calibre安装目录下运行 calibre-debug -c \"from calibre import get_proxies; print get_proxies()\" 如果出现 Using proxies: {'http': '127.0.0.1:8123'} 说明配置成功，启动calibre， 在Preference->Miscellaneous里可以看到代理已启动。 应用实例2：iTunes的代理设置 iTunes使用IE的代理设置，所以只要在IE里设置好polipo的信息（ 127.0.0.1:8123 ） 就OK了，但要注意Evernote也使用IE的代理设置， 所以不需要iTunes联网时不要开启IE的代理。 应用实例3：Eclipse的代理设置 Active Provider: Manual; HTTP -> Edit, Host: 127.0.0.1, Port: 8123，如下图：","tags":"Tech","url":"http://leetschau.github.io/access-internet-with-tor-browser.html","loc":"http://leetschau.github.io/access-internet-with-tor-browser.html"},{"title":"文件夹监控工具比较","text":"对文件夹监控软件的要求是：能同时监控多个指定的文件夹， 能够根据事件类型决定是否监控（例如是否只监控文件夹生成或者删除等）， 能够记录监控日志。 Watch 4 Folder : 目前的版本2.3监测不到子目录文件的变化，不可用； FolderMonitor和TrackFolderChanges同样功能太弱； 另有 watchDirectory ，收费软件，没有试； 基于TotalCMD的文件夹监控方法：改变前用TotalCMD的 DiskDir Extended 扩展为文件夹的所有子文件夹和文件做一个记录（方法见 TotalCommander的两款目录插件 ）， 改变后再做一次，然后用文本比较工具（例如vim diff或者notepad++的都很好用）观察变化；","tags":"Tech","url":"http://leetschau.github.io/wen-jian-jia-jian-kong-gong-ju-bi-jiao.html","loc":"http://leetschau.github.io/wen-jian-jia-jian-kong-gong-ju-bi-jiao.html"},{"title":"Building Android Developing Environment with Eclipse","text":"Prerequisite & background knowledge: W. Frank Ableson: Android in Action(3rd edition, Manning, 2012), chapter 1; Develop environment preparation: Installing the ADT Plugin ; Tutorial: Hello World Tutorial (see my notes in experience android developing with Eclipse ) Troubleshooting: Can not create a AVD for Android 4.0 ;","tags":"Tech","url":"http://leetschau.github.io/building-android-developing-environment-with-eclipse.html","loc":"http://leetschau.github.io/building-android-developing-environment-with-eclipse.html"},{"title":"Experience android developing with Eclipse","text":"This is my verification of android official Hello World Tutorial on my computer (win 7, android 4.0.3 with api level 15, eclipse helios, jdk 5). After \"Run the Application\" section of the tutorial, you have to wait patiently until the following logs appears in Console window: [2012-01-19 10:31:51 - HelloAndroid] Android Launch! [2012-01-19 10:31:51 - HelloAndroid] adb is running normally. [2012-01-19 10:31:51 - HelloAndroid] Performing org.leechau.android.helloworld.HelloAndroid activity launch [2012-01-19 10:31:51 - HelloAndroid] Automatic Target Mode: Preferred AVD 'my_avd' is not available. Launching new emulator. [2012-01-19 10:31:51 - HelloAndroid] Launching a new emulator with Virtual Device 'my_avd' [2012-01-19 10:31:52 - Emulator] emulator: warning: opening audio input failed [2012-01-19 10:31:52 - Emulator] [2012-01-19 10:31:56 - Emulator] emulator: WARNING: Unable to create sensors port: Unknown error [2012-01-19 10:31:56 - Emulator] emulator: emulator window was out of view and was recentered [2012-01-19 10:31:56 - Emulator] [2012-01-19 10:31:56 - HelloAndroid] New emulator found: emulator-5554 [2012-01-19 10:31:56 - HelloAndroid] Waiting for HOME ('android.process.acore') to be launched... [2012-01-19 10:32:32 - HelloAndroid] HOME is up on device 'emulator-5554' [2012-01-19 10:32:32 - HelloAndroid] Uploading HelloAndroid.apk onto device 'emulator-5554' [2012-01-19 10:32:32 - HelloAndroid] Installing HelloAndroid.apk... [2012-01-19 10:32:58 - HelloAndroid] Success! [2012-01-19 10:32:58 - HelloAndroid] Starting activity org.leechau.android.helloworld.HelloAndroid on device emulator-5554 [2012-01-19 10:32:59 - HelloAndroid] ActivityManager: Starting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=org.leechau.android.helloworld/.HelloAndroid } and then the following window appears: Yes, the expected \"Hello, World\" didn't appear, because the screen is locked! You have to drag the ring(surrounding \"lock\" icon) to \"unlock\" icon to unlock it(using your mouse): -> Then it works!","tags":"Tech","url":"http://leetschau.github.io/experience-android-developing-with-eclipse.html","loc":"http://leetschau.github.io/experience-android-developing-with-eclipse.html"},{"title":"批量删除gmail邮件","text":"以删除tor.com发送的邮件为例说明。 首先点击邮件搜索框右边的三角，在\"发件人\"下面写上\"tor.com\"： 点\"搜索\"按钮，看一下范围是否合适；如果合适的话点\"更多操作->创建过滤器->根据此搜索条件创建过滤器\"： 勾选\"删除邮件\"和\"同时……应用于……个会话\"，点\"创建过滤器\"即可。 注1：如果之后还想看到tor.com发来的邮件，则需删除这个过滤器； 注2：多个关键词筛选邮件时，空格表示\"与\"关系，\"||\"表示\"或\"关系； 注3：我常用的过滤器：from:(squirrel || lawlib || newlaw || time ||tor.com)","tags":"Tech","url":"http://leetschau.github.io/pi-liang-shan-chu-gmailyou-jian.html","loc":"http://leetschau.github.io/pi-liang-shan-chu-gmailyou-jian.html"},{"title":"SQuirrel SQL Client 连接 Derby 数据库过程","text":"前置步骤 解压derby安装包； 网络模式下作为Server需要运行 \\(DERBY_HOME/bin/startNetworkServer.bat， 内嵌模式下不需求运行此文件； 内嵌模式下使用\\) DERBY_HOME/bin/ij.bat创建数据库： connect 'jdbc:derby:e://mydoc//derbyfiles//godu;create=true' ; 或者使用Squirrel SQL创建数据库：首先安装内嵌驱动： Name: Apache Derby Embedded Example URL: jdbc:derby:path; Website URL: http://db.apache.org/derby/ Extra Class Path: f:\\Software\\db-derby-10.6.2.1-bin\\lib\\derby.jar（点击\"List Drivers\"） Class Name: org.apache.derby.jdbc.EmbeddedDriver 然后创建数据库： Name: derby@localhost Driver: Apache Derby Embedded URL: jdbc:derby:e:/mydoc/derbyfiles/godu;create=true;（如果不新建数据库，create=false） user name & password留空 确定后在Objects/derby@localhost/APP/TABLE下就可以看到NE表了， 之后就可以使用SQL语句创建表格、插入数据了，derby似乎没有\"用户\"的概念： create table conn(id int primary key, name varchar(20), protocol varchar(20), ip varchar(20), port int); 建表， insert into conn values(1,'10024723', 'telnet', '10.0.2.47', 23); 插入记录 update conn set id=10024723 where name='10024723'; 修改记录 alter table conn add password varchar(20); 插入新列 update conn set username='godu',password='godu' where id=10025022; 更新多个字段值 drop table ne; 删除表 内嵌式数据库与访问它的程序使用同一个JVM，所以当Squirrel SQL打开某个内嵌数据库时， ij.bat或者应用程序（通过JDBC）就不能访问该库； 网络模式下 安装Apache Derby Client驱动程序： 名字：Apache Derby Client； 地址示例：jdbc:derby:// [: ]/ [; = ]； 网站地址：http://db.apache.org/derby； 类路径：derbyclient-10.7.1.1.jar完整路径； 类名：org.apache.derby.jdbc.ClientDriver； 创建连接Derby数据库的别名： 名字：derby@67； 驱动程序：Apache Derby Client； 地址：jdbc:derby://10.0.3.67:1527/godu;create=true; 用户名：godu 密码：godu if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/squirrel-sql-client-lian-jie-derby-shu-ju-ku-guo-cheng.html","loc":"http://leetschau.github.io/squirrel-sql-client-lian-jie-derby-shu-ju-ku-guo-cheng.html"},{"title":"使用Eclipse的clojure plugins","text":"ctrl+enter","tags":"Tech","url":"http://leetschau.github.io/shi-yong-eclipsede-clojure-plugins.html","loc":"http://leetschau.github.io/shi-yong-eclipsede-clojure-plugins.html"},{"title":"Terracotta 2.7.2 Admin Console Guide","text":"http://www.terracotta.org/confluence/display/docs27/Admin+Console+Guide#AdminConsoleGuide-Roots","tags":"Tech","url":"http://leetschau.github.io/terracotta-272-admin-console-guide.html","loc":"http://leetschau.github.io/terracotta-272-admin-console-guide.html"},{"title":"几款文件加密工具","text":"Disguise Folder http://www.thewindowsclub.com/hide-secret-folders-disguise-folders-windows http://www.freewaregenius.com/disguise-and-hide-your-sensitive-folders-with-disguise-folders-for-windows-7/ Easy File Locker v1.3, Freeware，需要安装。 功能：可设置文件（夹）是否可读、可写、可删除、可见，实现机制是在操作系统驱动一级阻止未授权的读、写或者删除操作，而文件（夹）本身没有任何改变，因此当此软件被卸载，或者磁盘被没有安装此软件的系统读取时，被隐藏（或保护）的文件将失去保护，与普通文件一样。软件设置密码后，没有密码将不能打开软件，也不能卸载软件。 总结：不存在加解密过程，读写速度快，万一忘了密码也能找回数据（卸下硬盘挂在别的机器上，或者用PE系统启动），多用户切换不知道有没有隐藏功能？属于轻量级隐藏加密，适合于隐藏一些将自己的电脑短期借给别人用的场景； TrueCrypt v7.1, open source, 绿色软件（使用高级特性需安装）； 功能：有两种工作方式：文件方式和操作系统方式，文件方式类似于虚拟光驱，加载一个文件成为虚拟磁盘，操作系统方式下可以建立一个加密的操作系统； 总结：多重密码保护，可以生成隐藏操作系统，加密强度高，忘了密码数据就彻底别指望找回来了，适合于保护那些宁可销毁也不能泄露的数据； FireWall v0.1.8, 商业软件，免费版有功能限制； 功能：没有GUI，所有功能都集中在资源管理器的右键菜单里。对文件（夹）加密，加密后文件（夹）名称不变，内容变为乱码； 实验后发现实时加密功能似乎无效，还是我不会用？ AxCrypt 开源软件，试用了便携版，只能加密文件，不能加密文件夹，加密后生成一个axx文件，需手工删除原始文件，解密时选中axx文件输入密码即可。适合加密小文件； 总结 对于视频文件夹的隐藏和保护，不宜使用TrueCrypt，因为这样的文件夹体积一般在10G~100G的量级，如果加密为一个文件，其巨大的体积即使不使人生疑，也很容易被当做无用文件删除掉；也不宜使用FireWall，因为对这些文件主要是隐藏而不是对其内容进行加密，且对大文件加解密也比较费时间。","tags":"Tech","url":"http://leetschau.github.io/ji-kuan-wen-jian-jia-mi-gong-ju.html","loc":"http://leetschau.github.io/ji-kuan-wen-jian-jia-mi-gong-ju.html"},{"title":"在Chrome和Firefox之间同步书签","text":"二者之间用html文件作为中介实现书签同步。 Import / Export bookmarks in Chrome: Wrench Button -> Bookmarks -> Bookmark manager(Ctrl+Shift+O) -> Organize -> Import bookmarks from HTML file/ Export bookmarks to HTML file; Import / Export bookmarks in Firefox: \"Firefox\" Button(upper left corner of the browser window) -> Bookmarks -> Show All Bookmarks(Ctrl+Shift+B) -> Import and Backup -> Import bookmarks from HTML file/ Export bookmarks to HTML file; 验证版本：Chrome: 15.0, Firefox: 8.0.1; 这个方法的好处是简单易行，无需使用任何同步工具，不受Chrome和Firefox版本的限制，可以双向同步。","tags":"Tech","url":"http://leetschau.github.io/zai-chromehe-firefoxzhi-jian-tong-bu-shu-qian.html","loc":"http://leetschau.github.io/zai-chromehe-firefoxzhi-jian-tong-bu-shu-qian.html"},{"title":"Evernote中搜索笔记的方法","text":"如果要精确匹配，用双引号括起来，例如在搜索框里输入\"start.suffix\"，会搜出包含单独的start的笔记，要搜只含\"start.suffix\"的笔记，应该在搜索框里输入\"\"start.suffix\"\"； 搜索多个关键词可以用空格隔开；","tags":"Tech","url":"http://leetschau.github.io/evernotezhong-sou-suo-bi-ji-de-fang-fa.html","loc":"http://leetschau.github.io/evernotezhong-sou-suo-bi-ji-de-fang-fa.html"},{"title":"jvm提供的状态监控指令","text":"jps 类似于unix的ps指令，为其他监控工具提供进程标识（PID）； jstat 对[1]的补充如下：jstat使用-gc参数时，返回的结果包含如下项目： S0C S1C S0U S1U EC EU OC OU PC PU YGC YGCT FGC FGCT GCT 其中S0C表示Survivor0的容量（Capacity），S0U表示Survivor0已使用的空间（Utilization），单位都是KB （详见 http://docs.oracle.com/javase/6/docs/technotes/tools/share/jstat.html ）。 如果不关心值大小，而是已使用占容量百分比，则使用-gcutil参数，另外还有-class和-compiler参数可以监控对应线程类和编译器的行为。 jinfo jinfo -flags 用来查看某进程（用jps查出进程号PID）的JVM参数； jstack jstack -m 29517 jmap jmap -histo 29517 jmap -heap 29517 [1] 周志明：深入理解JAVA虚拟机，机械工业出版社，2011第4.2.2节。","tags":"Tech","url":"http://leetschau.github.io/jvmti-gong-de-zhuang-tai-jian-kong-zhi-ling.html","loc":"http://leetschau.github.io/jvmti-gong-de-zhuang-tai-jian-kong-zhi-ling.html"},{"title":"在包一级定制log4j日志输出","text":"软件开发和维护过程中，日志是必不可少的工具，对于一个10万行规模的产品，要分析它的某一部分，最简单的方法是将log4j配置文件的rootLogger的输出级别设置为debug，但这样将使产品的所有部分的debug信息都输出，一方面会对产品性能产生巨大影响，另一方面所关心部分的debug信息会淹没在其他debug日志里，比较好的解决方法是 将这一部分的debug日志单独输出到一个新的日志文件里进行分析 ，下面 以指令平台为例说明实现方法。原始的log4j.properties文件如下： log4j.rootLogger=INFO,stdout,R,errorlogger log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=[%p] [%d] [%c - %L] - [%m]%n log4j.appender.stdout.Threshold=INFO log4j.appender.R=org.apache.log4j.RollingFileAppender log4j.appender.R.layout=org.apache.log4j.PatternLayout log4j.appender.R.layout.ConversionPattern=[%p] [%d] [%c - %L] - [%m]%n log4j.appender.R.Threshold=INFO log4j.appender.R.File=../log/godu.log log4j.appender.R.MaxFileSize=20MB log4j.appender.R.MaxBackupIndex=5 log4j.appender.errorlogger=org.apache.log4j.RollingFileAppender log4j.appender.errorlogger.layout=org.apache.log4j.PatternLayout log4j.appender.errorlogger.layout.ConversionPattern=[%p] [%d] [%c] - [%m]%n log4j.appender.errorlogger.Threshold=ERROR log4j.appender.errorlogger.File=../log/error.log log4j.appender.errorlogger.MaxFileSize=20MB log4j.appender.errorlogger.MaxBackupIndex=5 可以看到这里定义了3个rootLogger（默认输出级别是INFO）：stdout向屏幕输出，R记录普通信息（指向godu.log，输出级别为INFO），errorlogger指向error.log，用来记录错误日志（ERROR及以上级别的日志）。现在我们要分析鉴权部分的工作过程，鉴权类都在com.boco.godu.framework.auth包里，要将这个包下所有类的debug信息输出到auth.log里。实现方法是在配置文件中增加一个专门处理auth包的logger： log4j.logger.com.boco.godu.framework.auth=DEBUG,authDebuger log4j.additivity.com.boco.godu.framework.auth=false log4j.appender.authDebuger=org.apache.log4j.RollingFileAppender log4j.appender.authDebuger.File=../log/auth.log log4j.appender.authDebuger.Append=false log4j.appender.authDebuger.MaxFileSize=2MB log4j.appender.authDebuger.MaxBackupIndex=10 log4j.appender.authDebuger.layout=org.apache.log4j.PatternLayout log4j.appender.authDebuger.layout.ConversionPattern=%d{MM-dd HH:mm:ss,SSS} %t %c,%L %p - %m%n 所以， 包一级定制logger的方法是 ： log4j.logger. =OUTPUT_LEVEL, logger_name 此logger的appender, layout的定义方法与rootLogger一样。上面第二行的作用是 避免详细日志写入rootLogger日志 ，否则新产生的大量debug日志会将之前已有的godu.log（以及godu.log.1等）冲掉，在现场环境下尤其要注意。它的一般形式是： log4j.additivity. =false 这样就保证了auth包的debug日志不写入godu.log，additivity的默认值是true，所以如果不定义additivity，默认debug日志分别写入godu.log和auth.log中。实验发现指定rootLogger的输出级别（log4j.appender.R.Threshold=INFO）也可以避免debug日志写入godu.log里，但定义additivity更明确，是更好的方法。 除了用来输出详细日志， 包一级定制还有一个用处：屏蔽输出 。如果不需要某些包的日志，只要将它的输出级别调高就可以了。例如我们不想看到mina包的info日志，只有mina报错才写日志，可以做如下处理： log4j.logger.org.apache.mina=WARN","tags":"Tech","url":"http://leetschau.github.io/zai-bao-yi-ji-ding-zhi-log4jri-zhi-shu-chu.html","loc":"http://leetschau.github.io/zai-bao-yi-ji-ding-zhi-log4jri-zhi-shu-chu.html"},{"title":"windows的自动登录和隐藏用户","text":"Launch Regedit. #r -> regedit Navigate to: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\winlogon Set: AutoAdminLogon = 1 (1 means enable auto login, 0 means disable it.) Tip: Try Regedit's 编辑->查找: AutoAdminLogon. Check for the existence of a REG_SZ type entry called DefaultUserName. If exists, the value should be the user who you wish to logon automatically. If not exists, then right-click in the right pane, 新建->字符串值, name it \"DefaultUserName\". Set the string value to the required UserName. 以上方法在 Windows7 旗舰版上通过验证。 可选步骤： 如果想为默认登录用户添加密码： Create a new String Value called DefaultPassword and set it as you want; If your Windows 7 Machine has joined a domain, then create a String Value called DefaultDomainName and set its value as that domain name; 上面的方法可以实现隐藏用户：创建一个新用户public，将其设为DefaultUserName， 然后AutoAdminLogon设为1，这样开机就自动进入了public用户， 只能用\"切换用户\"功能进入自己使用的用户，只要给自己使用的用户加上密码就可以阻止别人使用了。","tags":"Tech","url":"http://leetschau.github.io/windowsde-zi-dong-deng-lu-he-yin-cang-yong-hu.html","loc":"http://leetschau.github.io/windowsde-zi-dong-deng-lu-he-yin-cang-yong-hu.html"},{"title":"Linux中新建用户","text":"使用默认配置创建用户 useradd - p mypwd - m < username > -p指定用户密码，-m创建用户$HOME目录； 将此用户加入sudo组（可以使用sudo命令） Ubuntu: adduser <username> sudo CentOS and RHEL: 用 visudo -f /etc/sudoers 指令打开/etc/sudoers文件，在文件末尾追加下面的一行 ALL=(ALL) ALL 用 groups <username> 查看uername属于哪些组； 如果只是临时用一次root权限，可以不加入sudoer，而是执行： su - c \"<root_command>\" root 指令外边的双引号不能省略。 查看useradd指令的默认值 useradd - D 设置默认Shell（保存在 /etc/default/useradd中的SHELL值里）： useradd - D - s / bin / bash 也可以为某一用户单独指定参数： adduser [ - u uid ][ - g group ][ - d home ][ - s shell ] 详见man useradd。","tags":"Tech","url":"http://leetschau.github.io/linuxzhong-xin-jian-yong-hu.html","loc":"http://leetschau.github.io/linuxzhong-xin-jian-yong-hu.html"},{"title":"测试Scala代码","text":"on Windows test.bat内容： set JUnitPath = C : \\ Users \\ chad \\ . ivy2 \\ cache \\ junit \\ junit \\ jars \\ junit - 4 . 8 . 2 . jar set ScalaLibraryPath = F : \\ Software \\ scala - 2 . 9 . 1 . final \\ lib \\ scala - library . jar scalac - cp % JUnitPath % ;. SampleTest . scala rem java - cp % JUnitPath % ; % ScalaLibraryPath % ;. org . junit . runner . JUnitCore SampleTest SampleTest.scala内容： import java.util.ArrayList import org.junit.Test import org.junit.Assert._ class SampleTest { @Test def listAdd () { val list = new ArrayList [ String ] list . add ( \"Milk\" ) list add \"Sugar\" assertEquals ( 2 , list . size ()) } } 注：set表达式中，变量名、等号和值三者之间不能有空格，否则赋值失败。 on Linux","tags":"Tech","url":"http://leetschau.github.io/ce-shi-scaladai-ma.html","loc":"http://leetschau.github.io/ce-shi-scaladai-ma.html"},{"title":"电子书文件命名规则","text":"电子书指pdf，epub，mobi等格式的电子书籍。 作者 - 书名, 版本, 出版社, 出版年 [ISBN] 标签1, 标签2, ... - 制作者.扩展名 以上格式中所有标点符号均为英文符号，为保持简洁，书名只包含正标题，不含副标题。 作者、书名应与书籍实际作者、名称的语种保持一致（中文书籍用中文书名，英文书籍用英文书名），标签尽量使用英文，除非此标签是中文专有名词且无对应英文专有名词。 为易于查询，\"O'Reilly\"统一写作\"OReilly\"；","tags":"Tech","url":"http://leetschau.github.io/dian-zi-shu-wen-jian-ming-ming-gui-ze.html","loc":"http://leetschau.github.io/dian-zi-shu-wen-jian-ming-ming-gui-ze.html"},{"title":"scala的部署和运行过程","text":"部署Scala 将Scala发布包解压即可，现解压到/opt/Scala下，目录结构为： [godu@goduserver scala-2.9.1.final] \\( pwd;ls /opt/Scala/scala-2.9.1.final bin doc lib meta misc src 编译和运行Scala程序 [godu@goduserver ScalaFiles]\\) pwd /home/godu/ScalaFiles [godu@goduserver ScalaFiles] \\( ls -l 总计 16 drwx------ 2 godu godu 4096 11-24 03:33 investments -rw------- 1 godu godu 205 11-24 03:33 UseInvestment.scala [godu@goduserver ScalaFiles]\\) cat UseInvestment.scala import investments._ object UseInvestment { def main(args: Array[String]) { val investment = new Investment(\"XYZ Corporation\", InvestmentType.STOCK) println(investment.getClass()) } } [godu@goduserver ScalaFiles] \\( ls investments/ Investment.java InvestmentType.java [godu@goduserver ScalaFiles]\\) cat investments/InvestmentType.java package investments; public enum InvestmentType { SHORT_TERM, BOND, STOCK, REAL_ESTATE, COMMODITIES, COLLECTIBLES, MUTUAL_FUNDS } [godu@goduserver ScalaFiles] \\( cat investments/Investment.java package investments; public class Investment { private String investmentName; private InvestmentType investmentType; public Investment(String name, InvestmentType type) { investmentName = name; investmentType = type; } public int yield() { return 0; } } [godu@goduserver ScalaFiles]\\) javac investments/InvestmentType.java [godu@goduserver ScalaFiles] \\( javac investments/Investment.java [godu@goduserver ScalaFiles]\\) /opt/Scala/scala-2.9.1.final/bin/scalac UseInvestment.scala [godu@goduserver ScalaFiles]$ java -cp /opt/Scala/scala-2.9.1.final/lib/scala-library.jar:. UseInvestment class investments.Investment if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/scalade-bu-shu-he-yun-xing-guo-cheng.html","loc":"http://leetschau.github.io/scalade-bu-shu-he-yun-xing-guo-cheng.html"},{"title":"Linux和windows环境变量中路径分隔符的区别","text":"这里所说的路径指PATH和CLASSPATH这两个环境变量。 Unix/Linux系统的路径分隔符是冒号（:），Windows的路径分隔符是分号（;）。如果弄错了分隔符，比如在windows下用冒号分隔classpath中的路径，会导致冒号后面的路径无法被java识别，导致class ... not def或者def not found之类的错误。","tags":"Tech","url":"http://leetschau.github.io/linuxhe-windowshuan-jing-bian-liang-zhong-lu-jing-fen-ge-fu-de-qu-bie.html","loc":"http://leetschau.github.io/linuxhe-windowshuan-jing-bian-liang-zhong-lu-jing-fen-ge-fu-de-qu-bie.html"},{"title":"用vim注释多行代码","text":"例如有下面一段autohotkey代码，需要全部注释，也就是在行首加分号，在vim中有三种方法：替换，列操作和宏， !0:: ;msn DetectHiddenWindows, On Info_msn := TrayIcons(\"msnmsgr.exe\") StringSplit, TrayInfo_msn, Info_msn,| PostMessage, TrayInfo_msn1, TrayInfo_msn2, 0x0203,, ahk_id %TrayInfo_msn3% return 处理后变为： ; !0:: ;msn ; DetectHiddenWindows, On ; Info_msn := TrayIcons(\"msnmsgr.exe\") ; StringSplit, TrayInfo_msn, Info_msn,| ; PostMessage, TrayInfo_msn1, TrayInfo_msn2, 0x0203,, ahk_id %TrayInfo_msn3% ; return 替换 不保留行首空格：:%s/&#94;/; /g 可以先用V模式选中要替换的行，然后用s指令替换，vim会自动在:后面加上'<,'>，表示后面的指令仅对被选区域有效； 保留行首空格： 使用&引用search pattern：:%s/&#94;\\s*/&; /g 使用group + backreference实现：:%s/&#94;(\\s*)/\\1; /g 列操作 使用ctrl+q（ Windows的gVim）或者ctrl+v（linux字符终端的vim）进入列编辑模式，进入列编辑模式后与其他visual模式一样先选范围再执行操作，不同之处在于此模式下进入插入模式使用I（normal模式下I表示在行首插入），插入完字符后用Esc返回normal模式后才能看到每行的改变；下面以windows的gVim为例说明具体操作过程： gg -> ctrl+q -> 5j -> I -> ; -> 宏 gg -> q -> a -> i -> ; -> -> j -> q -> 5@a q表示开始录制宏，a是宏名，后面是插入一个分号，返回normal模式，向下移动一行，至此宏录制完毕，按q结束录制，@后跟宏名表示使用此宏，5表示重复运行5次； 总结 替换方法优点是操作简单，可以指定处理行的范围，但仅适用于在行首（或行尾）插入，其他位置实现就很麻烦了，列操作的优点是可以看到选区然后进行操作，比较直观，但操作的行必须连在一起，宏的优点是操作一次以后可以重复使用，可以在不连续的行上进行，可以根据实际情况选择解决方案。","tags":"Tech","url":"http://leetschau.github.io/yong-vimzhu-shi-duo-xing-dai-ma.html","loc":"http://leetschau.github.io/yong-vimzhu-shi-duo-xing-dai-ma.html"},{"title":"PL/SQL中修改字段值","text":"select * from tad_auth_define where object_id=216591690 for update ; 点\"编辑数据\"按钮（查询结果的上方，图标是一把锁），使图标变为打开锁状态，然后修改数据，然后用F10键提交，然后再一次点\"编辑数据\"按钮，使图标变回上锁状态；","tags":"Tech","url":"http://leetschau.github.io/plsqlzhong-xiu-gai-zi-duan-zhi.html","loc":"http://leetschau.github.io/plsqlzhong-xiu-gai-zi-duan-zhi.html"},{"title":"Ubuntu做Linux主机","text":"安装Ubuntu（验证版本：11.10） 注意网卡设置为Bridged方式； 启动Ubuntu后用Ctrl+Alt+T打开命令行窗口，或者用Ctrl+Alt+F1切换到命令行终端 （可以用F1~F6启动6个终端，用Ctrl+Alt+F7返回图形模式）； 设置root用户以安装软件 设置root用户密码：sudo passwd，输入新密码即可。 切换到root用户：su - 切换到用户chad：su - chad 安装telnet, ssh和sftp协议 Ubuntu默认的下载源被公司屏蔽了，所以要改为可以用的： System Settings->Software Source->Download from: mirrors.ustc.edu.cn/ubuntu 命令行执行： sudo apt - get install telnetd sudo / etc / init . d / openbsd - inetd restart sudo apt - get install openssh - server sudo / etc / init . d / ssh restart sudo apt - get install vsftpd 验证：ps -ef|grep ssh，看到有一个sshd的线程，说明ssh安装成功； ps -ef|grep ftp ，看到vsftpd进程，说明sftp安装成功。 下面是已验证的Client。 XShell连接配置： Protocol: SSH Host: 10.32.1.189(在命令行下用ifconfig -a获得IP地址) Port Number: 22 Username/pwd: ... SecureFX连接配置： Host : 10.32 . 1.189 Port Number : 23 Username / pwd : ... TotalCommander连接配置：只需填写连接名、主机名（10.32.1.189）和用户名、密码，其他全部使用默认值即可。 中文支持： 在安装Ubuntu系统的第一步选择语音时选中文，这样在安装系统的时候会下载中文语言包，安装速度比较慢，也可以在安装完成后再装中文语言包： System Settings -> Language Support -> Install/Remove Language 中添加对中文的支持，安装完成后点\"Apply System-Wide\"，然后重启，才能正确处理中文。 中文输入法 （需要现在language support 里装上中文？） $ sudo apt - get install fcitx $ im - switch - s fcitx - z default # 将 fcitx设为默认输入法 重启即可。 或者图形界面下\"Ubuntu Software Center\"里安装fcitx。 验证：打开gedit或者vi，Ctrl+Space会出现小企鹅界面，ps -ef|grep fcitx，能看到fcitx的进程。 配置：Ctrl+Space后桌面上方会出现fcitx面板，右键->Fcitx Config可以进行配置。 重启后若Ctrl+space输入法未启动，尝试以下方法： 1 ) System Settings -> Language Support -> Keyboard input method system中选择fcitx ； 2 ) \"Ubuntu Software Center\" 里 fcitx有好几项 ，多安装几项，包括 Fcitx Light UI , fcitx - sunpinyin , fcitx - table - all之类的 ； Mint 14中安装中文输入法 在Language Support中安装中文支持； 安装fcitx； 在用户主目录下新建.xprofile文件，内容如下： export LC_ALL=en_US.utf8 export XMODIFIERS=@im=fcitx export QT_IM_MODULE=xim export GTK_IM_MODULE=xim fcitx -d 如果要将界面改为中文，将第一行的en_US改为zh_CN（参考http://www.mintos.org/system/quantal-fcitx.html），使用中发现改为中文后有些地方的汉字会显示为乱码，所以最好保留英文界面。 多媒体应用 \"Ubuntu Software Center\"里安装smplayer，验证支持avi, rmvb, f4v等格式； 文档和图片编辑 默认支持pdf, txt, jpg；","tags":"Tech","url":"http://leetschau.github.io/ubuntuzuo-linuxzhu-ji.html","loc":"http://leetschau.github.io/ubuntuzuo-linuxzhu-ji.html"},{"title":"package and classpath","text":"[godu@goduserver test]$ pwd /home/godu/test [godu@goduserver test]$ cat com/AA.java package com; public class AA { public static void main(String[] args) { System.out.println(\"this is AA\"); } } [godu@goduserver test] \\( javac com/AA.java [godu@goduserver test]\\) java com.AA this is AA 以上说明当java类定义在一个包中时，要将java文件放在包指明的路径下，用javac full_path的形式编译，用java package_name.class_name的方法运行。 假设AA类引用了/ap/a/b/C.class文件（AA中有\"import a.b.C;\"），且C类的包名为\"a.b\"时（package a.b;），运行AA时用classpath参数引用C类： java -cp /ap com.AA 假设在/ap下将a文件夹打成了JAR包m.jar，则运行AA时将jar文件加入classpath即可： java -cp /ap/m.jar com.AA 更详细的说明见\" Java的classpath与package \"。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/package-and-classpath.html","loc":"http://leetschau.github.io/package-and-classpath.html"},{"title":"sed notes","text":"Synopsis sed [ options ] [ range ]< command >[ ;[range ]< command > ] < target_file > or: command_for_sed_input_text | sed [ options ] [ range ]< command > 其中range可以是指定行，也可以是一个正则表达式（即所有符合表达式的行）， 可以是开行前插入(i)，在行后追加(a)，替换行(c)，在终端输出行(p)等等； Options -n: 不显示未处理行，见下面实例； -i: \"in-place\" edit，见下面的实例； 删除文件中的空行 包括含几个空格、制表符的行： sed - i '/&#94;\\s*$/d' target - file 显示文件的指定部分 例如一个200万行的文件名为error.log，需要从第587700行开始显示200行： sed - n 587700 , 587900 p error . log 解释：sed的p指令是将匹配到的行显示到终端上，-n是只显示选中的行， 所以使用p指令必加-n选项，-n后面的两个数字分别是起始和终止行号， 最后是要处理的文件名。所以显示文件myfile的第m到第n行的命令是： sed - n m , np myfile 如果要显示的行是不连续的，需要用多个\"-e\"选项， 例如下面的命令打印input.txt文件的第1~10行，第53行和第200行： sed - ne 1 , 10 p - e 53 p - e 200 p input . txt 在文件的指定行前插入一行 在文件distro.txt第7行前插入一行\"ab cd\"： sed - i '7 i ab cd' distros . txt \"-i\"表示结果写回原文件，而不是打印到stdout， 即\"in-place\" edit。同理，在第7行后加一行就是： sed - i '7 a ab cd' distros . txt 把第7行替换为\"ab cd\"： sed '7 c ab cd' distros . txt 将多个编辑操作放在一个sed命令中进行 $ cat aaa the first line the 2nd line last line $ sed -e '1 a new line' -e '2 d' aaa the first line new line last line 首先，多个操作用\"-e\"选项组合在一起，其次，每个操作中的行指的是原始文件的行， 而不是前面操作之后新的行，上面例子中第一个操作是在第一行后插入一行， 然后删掉第2行，可以看到删掉的是原文件的第2行，而不是新插入的行。 使用正则表达式处理多个行 $ sed '/.*line/ a abc' aaa the first line abc the 2nd line abc last line abc 输出指定区域的文本 有一个配置文件，现在想输出小节名称和后面的两行文本： $ cat puppet . conf [ main ] The Puppet log directory . The default value is '$vardir/log' . logdir = / var / log / puppet Where Puppet PID files are kept . ... [ agent ] The file in which puppetd stores a list of the classes associated with the retrieved configuratiion . Can be loaded in the separate `` puppet `` executable using the `` --loadclasses`` option . The default value is '$confdir/classes.txt' . classfile = $ vardir / classes . txt ... $ sed - n '/\\[.*/,+2p' puppet . conf [ main ] The Puppet log directory . The default value is '$vardir/log' . [ agent ] The file in which puppetd stores a list of the classes associated with the retrieved configuratiion . Can be loaded in 这里使用了\" ,+N\"输出 行及以后的N行文本这一模式。 文件末尾操作 sed的行号中，\"$\"代表最后一行，所以下面两句是等价的： sed '$ a abcd' aaa echo \"abcd\" >> aaa 但sed显然功能更强，比如可以用'$ i ...'实现在最后一行前面插入。 替换一行的指定部分 要把数据库地址改为 mdb ，也就是把 mongodb:// 与 :27017... 之间的部分改成 mdb ， 方法是将要保留的部分放在正则表达式的group里， 替换的时候用backreference恢复要保留的部分， \\1 是前段， \\2 是后段，中间被替换的部分改为 mdb ： $ cat default . json { \"db\" : { \"address\" : \"mongodb://dba:dba@192.168.100.3:27017/staging\" , \"collection\" : \"Schedule2\" } } $ sed - i - r ' s % (. * \"address\" : \"mongodb://).*(:27017.*)% \\1 mdb \\2 %' default.json $ cat default . json { \"db\" : { \"address\" : \"mongodb://mdb:27017/staging\" , \"collection\" : \"Schedule2\" } } 由于文本中有 / ，所以sed的替换分隔符改成了 % 。 -i 的作用是修改原文件， -r 的作用是不需要为替换表达式中的括号转义。 参考：http://stackoverflow.com/questions/1074450/sed-replace-part-of-a-line","tags":"Tech","url":"http://leetschau.github.io/sed-notes.html","loc":"http://leetschau.github.io/sed-notes.html"},{"title":"用SamInside破解Windows登录密码","text":"用小马PE的USB-HDD+格式制作启动优盘； 笔记本启动时按ESC键，选择USB启动； 进入WinPE后，将%SystemRoot%/system32/config全部拷贝出来（WinXP这个文件夹是C:\\WINDOWS\\system32\\config）； 启动SamInside，选择File->Import SAM and SYSTEM Registry Files，依次选中config文件夹下的SAM和system两个文件； 主面板里会出现SAM文件里所有的用户，勾选要破解的用户； Service->Options->Brute-force Attack中设置好密码的字符集、长度等； Audit下勾选NT-Hash Attack和Brute-force Attack，然后Start Attack； 实战：SamInside v2.6.5.0采用brute-force方法破解华硕F5R笔记本上Windows XP Administrator用户的6位数字登录密码，用时不到一秒钟就得到了结果：531020，相当给力！此版本可以破解Windows NT, Windows 2000, Windows XP, Windows 2003, Windows Vista, Windows 7的密码。","tags":"Tech","url":"http://leetschau.github.io/yong-saminsidepo-jie-windowsdeng-lu-mi-ma.html","loc":"http://leetschau.github.io/yong-saminsidepo-jie-windowsdeng-lu-mi-ma.html"},{"title":"scala的方法和变量","text":"以下都是合法的方法声明 def myMethod def myMethod = \"Moof\" def myMethod() = \"Moof\" def myMethod(): String = \"Moof\" def foo(a: Int): String = a.toString def f2(a: Int, b: Boolean): String = if (b) a.toString else \"false\" def list T : List[T] = p :: Nil //类型参数 def sum T <: Number : Double = as.foldLeft(0d)( + .doubleValue) //有限定范围的类型参数 def largest(as: Int*): Int = as.reduceLeft((a, b) => a max b) //可变长度参数列表 def mkString T : String = as.foldLeft(\"\")( + .toString)","tags":"Tech","url":"http://leetschau.github.io/scalade-fang-fa-he-bian-liang.html","loc":"http://leetschau.github.io/scalade-fang-fa-he-bian-liang.html"},{"title":"Scala中Call by Name与普通参数调用的区别","text":"先看下面的例子（引自[1]）： def nano() = { println(\"Go into nano\") System.nanoTime } def delayed(t: => Long) = { println(\"In delayed method\") println(\"Param: \"+t) t } def undelayed(t: Long) = { println(\"In not delayed method\") println(\"Param: \"+t) t } 在scala中以call by name方式调用nano： scala> delayed(nano()) 结果为： In delayed method Go into nano Param: 4475258994017 Go into nano res3: Long = 4475259694720 以普通方式调用nano： scala> notDelayed(nano()) 结果为： Go into nano In not delayed method Param: 4513758999378 res4: Long = 4513758999378 上述3个method中，delayed()和notdelayed()是caller（调用者），nano()是callee（被调用者）。可以看出当以普通方式调用callee时，nano()会在caller一开始运行的时候被计算一遍，在caller内部用到callee时，只要取出之前得到的结果即可，不会重新执行一遍callee；但Call by Name方式下不会预计算callee，而是严格地在每个使用callee的地点完整运行一遍callee。 [1] David Pollak, Beginning Scala, Apress, 2009, p31","tags":"Tech","url":"http://leetschau.github.io/scalazhong-call-by-nameyu-pu-tong-can-shu-diao-yong-de-qu-bie.html","loc":"http://leetschau.github.io/scalazhong-call-by-nameyu-pu-tong-can-shu-diao-yong-de-qu-bie.html"},{"title":"VIM的键映射","text":"ESC键 在vim中ESC是一个重度使用的键，但不幸的是这个键离手的默认位置比较远（最初设计VIM的键盘与现在的键盘不同，那个时候的ESC键基本上处在现在TAB键的位置上），按一次就得看一下键盘，严重影响VIM这种神器的使用者的风范，解决这个问题最好的方法不是刻苦训练手的机械记忆，首先训练比较花时间，其次孔子他老人家教导我们君子不器，我们怎么能把自己（的一部分）训练成机器呢？最后也是最重要的理由是：即使能训练出来，手在键盘上来回飞舞还是比较花时间， 基于以上理由，我决定采用如下键映射方法解决这个问题。 在$vim/_vimrc里加上： imap ;; < ESC > cmap ;; < ESC > 这样，在插入和命令行模式下，只要连按两个分号就相当于按了一次ESC键。那么，如果在插入模式下确实需要输入;;怎么办呢？只要在输入第一个;之后停顿一下，再输入就行了，详见\":h timeout\"。对上述代码的详细解释见附1和附2。 上面是用;;代替ESC键，其实在还有别的很多替代方案，比如用jj代替ESC也比较常见，详见\" Avoid the escape key \"， 但我觉得都没有;;方案方便、安全、有效。 Ctrl键 比较普遍的方案是用Capslock键代替Ctrl键，这个vim自己就搞不定了，比较好的方法是用另一个神器：Autohotkey完成这个功能，下面的ahk代码实现Capslock键代替Ctrl键，而原来Capslock键的功能用Shift+Capslock实现； # IfWinActive VIM ; if in vim + Capslock :: Capslock ; make shift+Caps-Lock the Caps Lock toggle Capslock :: Control ; make Caps Lock the control button # IfWinActive ; end if in vim 详见\" MovingTheCtrlKey \"。 附1：键映射与模式 所谓键映射，就是将一个按键（或者组合按键）转换为另一个按键（或者组合按键）。为什么要转换呢？主要是为了提高效率，比如原始键位置太远，或者要输入的东西太多，或者需要两手同时操作。由于vim有多种模式，就出现了一个键映射在什么模式下有效的问题。以上面的ESC键为例，VIM一共有5种模式（详见:h map-modes）：normal, insert, operator-pending, visual, command-line，需要按ESC的只有insert和command-line两种，其他3种模式中jj往往表示光标移动，若映射会造成操作不便。map系列指令的第一个字母表示模式，上述五个模式分别用n, i, o, v, c表示（详见\":h map-overview\"），所以imap表示仅在insert模式下这个映射有效。 附2：map与noremap的区别 若有\"map A B\"和\"map B C\"，则\"map A B\"最终的效果是执行C，这就是映射定义的嵌入与递归问题（详见\":h noremap\"），不论是否存在\"map B C\"，\"noremap A B\"都执行B。结合附1的说明，nnoremap就是normal模式下的noremap指令；","tags":"Tech","url":"http://leetschau.github.io/vimde-jian-ying-she.html","loc":"http://leetschau.github.io/vimde-jian-ying-she.html"},{"title":"为VIM增加新的语法支持","text":"添加语法高亮和自动缩进 以Scala语言为例。 在scala 2.9.1安装包的misc\\scala-tool-support\\vim下有4个文件夹： ftdetect, indent, plugin和syntax，将这4个文件夹合并到$vim/vimfiles （例如C:\\Program Files\\Vim\\vimfiles）对应的文件夹中， 这样打开扩展名为scala的文件时就会自动增加语法高亮和缩进了。 如果没有语法高亮和自动缩进效果，在$vim/_vimrc中增加： filetype on \" Switch on filetype detection and loads filetype indent on \" indent file (indent.vim) for specific file types syntax on \" Turn on syntax highligthing set autoindent \" Copy indent from the row above set si \" Smart indent set showmatch \" Show matching bracets when text indicator is over them 文件名匹配的原理见： :h new-filetype 手工启动语法高亮的方法： copy scala . vim to $ vim / vim72 / syntax ; open test . scala with vim : set syntax = scala 详见 :h mysyntaxfile 添加代码导航（code insight） 下载 Exuberant Ctags 5.8，解压； 下载 Tag List vim plugin 4.5，解压到$vim/vimfiles下； 到这里就可以显示ctags支持的语言（如C, JAVA, PYTHON等）了， 但Scala不在支持之列，需要手工添加ctags和taglist对scala的支持： 新建$HOME/.ctags文件（对于Windows是命令行程序cmd.exe的启动位置， win7下是c:\\Users[user_name].ctags，例如c:\\Users\\chad.ctags），内容如下： --langdef=scala --langmap=scala:.scala --regex-scala=/&#94;[ \\t]*class[ \\t]+([a-zA-Z0-9_]+)/\\1/c,classes/ --regex-scala=/&#94;[ \\t]*trait[ \\t]+([a-zA-Z0-9_]+)/\\1/t,traits/ --regex-scala=/&#94;[ \\t]*type[ \\t]+([a-zA-Z0-9_]+)/\\1/T,types/ --regex-scala=/&#94;[ \\t]*def[ \\t]+([a-zA-Z0-9_\\?]+)/\\1/m,methods/ --regex-scala=/&#94;[ \\t]*val[ \\t]+([a-zA-Z0-9_]+)/\\1/C,constants/ --regex-scala=/&#94;[ \\t]*var[ \\t]+([a-zA-Z0-9_]+)/\\1/l,local variables/ --regex-scala=/&#94;[ \\t]*package[ \\t]+([a-zA-Z0-9_.]+)/\\1/p,packages/ --regex-scala=/&#94;[ \\t]*case class[ \\t]+([a-zA-Z0-9_]+)/\\1/c,case classes/ --regex-scala=/&#94;[ \\t]*final case class[ \\t]+([a-zA-Z0-9_]+)/\\1/c,case classes/ --regex-scala=/&#94;[ \\t]*object[ \\t]+([a-zA-Z0-9_]+)/\\1/o,objects/ --regex-scala=/&#94;[ \\t]*private def[ \\t]+([a-zA-Z0-9_]+)/\\1/pd,defs/ 这样每次ctags被调用时就会读取这个文件， 语法格式详见\" Creating a user-defined language \"。 在$vim/_vimrc里增加： let Tlist_Ctags_Cmd = \"f:/Software/ctags58/ctags.exe\" let tlist_scala_settings = 'scala;c:Classes;t:Traits;o:Objects;m:Methods;p:Packages;C:Constants;l:Local variables;T:Types' 可以看到tlist_scala_settings的定义与.ctags里的定义是有对应关系的， 以上参考了taglist文档第9节：\" Extending \"；还可以增加一个开/关taglist窗口的快捷键： nnoremap <silent> <F4> :TlistToggle<CR> taglist常用操作： 在taglist窗口按F1；添加自动补全 下载插件 AutoComplPop 和 L9 ，解压到 \\(vim/vim72目录下（plugin, doc, autoload都要解压， 且不能解压到\\) vim/vimfiles下），重启VIM即可。 验证环境： Win7, vim v7.2, AutoComplPop v2.14.1, L9 v1.1。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/wei-vimzeng-jia-xin-de-yu-fa-zhi-chi.html","loc":"http://leetschau.github.io/wei-vimzeng-jia-xin-de-yu-fa-zhi-chi.html"},{"title":"Add tags to files with Xplorer2","text":"Win7 nowadays supports adding tags to files, and sorting/displaying files according to tags. However, only documents created by Office or image files support adding tags, while my favorite tag-arranged files are pdfs and archives (zip, rar, iso, etc). So this nested functionality of win7 can not satisfy me. Meanwhile, TotalCommander can add comments to files, but this functionality is insignificant, because these comments are stored in a separated file, which means if the target file is copied/moved to another place, comments will be lost. Today I find this longing functionality in Xplorer2, which only works under NTFS format. Firstly you can add comments(here I use it as tags) to any kinds of files by selecting this file and [Action->Set comments]. Then you can search or select files with a particular tag as follow: Open the find files window: ctrl+f; Add a new rule in the \"Additional Rules\" frame; In \"Rule definition\" panel, select \"Comment\" from \"Property & description\" drop-down list, and specify the tags in the textbox beneath \"Text Settings\"; Bingo! For more details see \"Attaching comments to selected items\" of Xplorer2's documents.","tags":"Tech","url":"http://leetschau.github.io/add-tags-to-files-with-xplorer2.html","loc":"http://leetschau.github.io/add-tags-to-files-with-xplorer2.html"},{"title":"buffer-related operations in vim","text":"Build-in Shortcuts :enew open a new buffer in the current window (old buffers still exist); :e open a existed file in the current window; :sp open a file in a horizontal split window; :vsp open a file in a vertical split window; :new open a new buffer in a horizontal split window; :vnew open a new buffer in a vertical split window; :ls list all buffers available. Current buffer is marked as \"%a\" and last edited buffer marked as \"#\"; :b[N] switch to [N]th buffers, [N] is buffer number from :ls command; :b# switch to last edited buffer; :bn switch to next buffer(based on buffer number); :bp switch to previous buffer(based on buffer number); :bd close current buffer(if this is the only one buffer, a new one will be created); :sbn/:sbp open the next/previous buffer in a horizontal split window; :vert sbn open the next buffer in a vertical split window; :bd[N] close buffer number [N], [N] is buffer number from :ls command; :sb[N] open buffer [N] in a horizontal split window; :vert sb[N] open another buffer in a vertical split window; :vs / C-w v split window vertically; :clo / C-w q close window; :q quit vim no matter how many buffers exist, or close window when more than one window exist; Read :h buffer for more. Recommended user defined shortcuts In .vimrc: noremap h noremap l noremap k noremap j nnoremap q q","tags":"Tech","url":"http://leetschau.github.io/buffer-related-operations-in-vim.html","loc":"http://leetschau.github.io/buffer-related-operations-in-vim.html"},{"title":"netstat指令笔记","text":"指令参数 c: show continous output every second t: tcp protocol u: udp protocol p: show PID & program name to which each socket belongs l: only show listening port n: show numeric port number instead of protocol name 各项输出含义 Local Address Remote Address Swind Send-Q Rwind Recv-Q State 10.168.68.191.41872 10.168.68.230.389 50320 0 50320 0 ESTABLISHED . . 0 0 49152 0 IDLE 10.168.68.191.40297 10.168.68.230.389 50320 0 50320 0 ESTABLISHED 10.168.68.191.23 10.173.0.165.39679 64128 0 49232 0 ESTABLISHED 10.168.68.191.1234 10.173.0.132.4721 64987 0 5840 0 ESTABLISHED 10.168.68.191.1234 10.173.0.132.4722 64987 0 5840 0 ESTABLISHED 10.168.68.191.23 10.173.0.165.36957 64128 0 49232 0 ESTABLISHED Rwind/Swind: tcp window size","tags":"Tech","url":"http://leetschau.github.io/netstatzhi-ling-bi-ji.html","loc":"http://leetschau.github.io/netstatzhi-ling-bi-ji.html"},{"title":"检查windows的端口连接情况","text":"例如服务器10.0.2.47上运行GODU，在1234端口上监听，netstat -an得到如下结果： [godu@goduserver ~]$ netstat -an|grep 1234 tcp 0 0 :::1234 :::* LISTEN tcp 0 0 ::ffff:127.0.0.1:1234 ::ffff:127.0.0.1:57233 TIME_WAIT tcp 0 0 ::ffff:10.0.2.47:1234 ::ffff:10.32.1.9:49694 ESTABLISHED 其中10.32.1.9是本机IP，如何验证本机上也有与47的连接？在命令行下运行netstat指令结果如下： C:\\Users\\chad>netstat -an|findstr \"49694\" TCP 10.32.1.9:49694 10.0.2.47:1234 ESTABLISHED 这样就验证了本机的49694端口正在与47的1234端口连接。 总结：windows和linux的netstat指令通用，管道操作符\"|\"通用，linux的grep对应windows的findstr。","tags":"Tech","url":"http://leetschau.github.io/jian-cha-windowsde-duan-kou-lian-jie-qing-kuang.html","loc":"http://leetschau.github.io/jian-cha-windowsde-duan-kou-lian-jie-qing-kuang.html"},{"title":"SQL语法笔记","text":"结果取并集：Union 计算结果数量：Count()","tags":"Tech","url":"http://leetschau.github.io/sqlyu-fa-bi-ji.html","loc":"http://leetschau.github.io/sqlyu-fa-bi-ji.html"},{"title":"Use VIM as Lightweight Scala IDE","text":"This is a demo of how to use VIM as a lightweight IDE to run Scala scripts. We will create a script named \"HelloWorld.scala\" and run it under /home/godu/test for linux or e:\\mydoc\\scalafiles for windows. Prerequisite We can compile and run Scala scripts in console. This means we've already installed JRE and scala run-time files, and defined necessary enviroment variables such as JAVA_HOME and SCALA_HOME, and add $SCALA_HOME/bin to $PATH. Create & Run Source Files In Linux: cd / home / godu / test vi HelloWorld . scala < INSERT > println ( \"hello, world!\" ) < ESC > : w HelloWorld . scala : ! scala % In Windows: < Open gvim > : lcd e : \\ mydoc \\ scalafiles < INSERT > println ( \"hello, world!\" ) < ESC > : w HelloWorld . scala : ! scala % Add IDE functionality support syntax hightlight, auto-indent, auto-complete, code insight, etc, see note \"为VIM增加新的语法支持\"; _vimrc settings for scala IDE let Tlist_Ctags_Cmd = \"f:/Software/ctags58/ctags.exe\" let tlist_scala_settings = 'scala;c:Classes;t:Traits;o:Objects;m:Methods;p:Packages;C:Constants;l:Local variables;T:Types' nnoremap < silent > < F4 > : TlistToggle < CR > nnoremap < silent > < F9 > :! scala %< CR > colo evening imap jj < ESC > cmap jj < ESC > set directory = C : \\ Windows \\ Temp set backupdir = C : \\ Windows \\ Temp set clipboard += unnamed set guifont = Consolas : h13 set guioptions = set ts = 2 cd e :/ mydoc / scalafiles For more information about the usage of filename-relative shortenings, use the following command for detail. : h filename - modifiers Frequently Used: :!echo % // show file name and extension :!echo %< // show only file name :!echo %:t:r // show only file name :!echo %:p // show full path :!echo %:e // show only file extension","tags":"Tech","url":"http://leetschau.github.io/use-vim-as-lightweight-scala-ide.html","loc":"http://leetschau.github.io/use-vim-as-lightweight-scala-ide.html"},{"title":"JVM的内存管理机制","text":"JVM使用的内存分为两部分：堆（Heap）和栈（Stack），简单理解，堆可以看做是数据区，栈可以看做是指令区；下面详细说明二者的区别。 堆中存放的是对象实例（但不包括对象的方法，因为方法是指令，放在栈里），new出来的对象都放在堆里，对象不再被使用（不可达）时由GC（垃圾回收）机制回收，而无需代码显式释放，堆由于是在运行时动态分配的，因此存取速度比较慢； 栈中存放基本数据类型（primitive types: byte, int, float, long, char, boolean, etc）、常量、指令（例如对象的方法）和对象的引用地址（对象实例在堆中分配以后，需要在栈中保存一个4字节的堆内存地址，也就是所谓的对象句柄，用来确定该对象实例在堆中的位置）。栈中数据存取的速度比堆快，仅次于寄存器，但它必须在编译期间指定，且由于它采用FIFO(first in, first out)方式分配内存，因此不存在内存回收问题，因此GC是仅工作在堆上的。 堆又可以分为3个部分：年轻代（Young Generation,YG）、老代（Old Generation,OG）和永久代（Permanent Generation,PG），新创建的对象都放在YG里，经过几次GC后仍然生存的就被放到了OG里，PG里放的是类信息以及相关元数据（详见[1]）；YG的GC最频繁，PG的GC最少，这样可以极大地提高JVM的性能； [1] 维基百科对JVM的堆的说明：http://en.wikipedia.org/wiki/Java_Virtual_Machine#Heap","tags":"Tech","url":"http://leetschau.github.io/jvmde-nei-cun-guan-li-ji-zhi.html","loc":"http://leetschau.github.io/jvmde-nei-cun-guan-li-ji-zhi.html"},{"title":"JVM选项的含义","text":"如下这段代码是启动GODU的脚本，其中的JAVA_OPTS中的各个参数是什么意思呢？ JAVA_OPTS=\" -Xms512m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=128m -Dfile.encoding=GBK\" TC_INSTALL_DIR=/opt/godu/terracotta-2.7.2 TC_CONFIG_PATH=\" \\({GODU_HOME}/conf/tc-config.xml\" set -- -q . \"\\) /bin/dso-env.sh\" exec \"${JAVA_HOME}/bin/java\" -Dservice_name=godu1.2.1 ${TC_JAVA_OPTS} \\ -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8400 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false \\ -Djava.awt.Window.locationByPlatform=true \\ ${JAVA_OPTS} \\ -cp $JARS com.boco.godu.app.AppMain 1234 -Xms512m : 给JVM的堆（Heap）分配初始内存512MB，也是堆内存的下限； -Xmx1024m : 指定JVM堆内存的上限是1024MB，当这个值偏小时程序可能会出现java.lang.OutOfMemory错误，此错误来自JVM，不是Throwable的，无法用try...catch...捕捉； -XX:PermSize=128m : 给JVM的永久生存对象（见笔记\"JVM的内存管理机制\"）分配的初始内存为128MB，也是下限值； -XX:MaxPermSize=128m : 指定JVM给永久生存对象分配内存的上限是128MB， 当这个值偏小时程序可能会出现java.lang.OutOfMemory:PermGen space错误，同样无法用try...catch...捕捉； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/jvmxuan-xiang-de-han-yi.html","loc":"http://leetschau.github.io/jvmxuan-xiang-de-han-yi.html"},{"title":"Scala IDE比较","text":"scala ide plugins for netbeans:nb scala ide plugins for intelliJ IDEA: idea scala ide plugins for eclipse: ec nb:汉化不完整，且不能切换到英文，出现中文错误提示不便于搜索解决方法；调试时总报断点位置错误；不能运行单个类，只鞥运行某个项目里的主类，没有语法提示； idea: 运行、响应速度慢，使用方法与习惯差别比较大， ec: 没有离线安装包，在线安装速度慢，失败率高，ide本身目前处在开发过程中，质量不稳定； 结论：企业级应用目前只有idea比较靠谱，做简单的练习notepad++/vim是王道，虽然没有代码导航，没有自动补全，没有语法高亮……","tags":"Tech","url":"http://leetschau.github.io/scala-idebi-jiao.html","loc":"http://leetschau.github.io/scala-idebi-jiao.html"},{"title":"为Netbeans指定JDK路径","text":"安装netbeans 6.9.1时必须jdk版本不得低于1.6，由于本机上默认的JDK是1.5，直接运行netbeans的安装程序提示jdk版本太低，退出安装，为解决这个问题，将如下内容保存为run.bat，放在netbeans安装文件（netbeans-6.9.1-ml-javase-windows.exe）相同目录下，然后运行这个bat，搞定！ set JAVA_HOME=f:\\Software\\jdk1.6.0_18 set PATH=%PATH%;%JAVA_HOME%\\bin; netbeans-6.9.1-ml-javase-windows.exe","tags":"Tech","url":"http://leetschau.github.io/wei-netbeanszhi-ding-jdklu-jing.html","loc":"http://leetschau.github.io/wei-netbeanszhi-ding-jdklu-jing.html"},{"title":"使用IntelliJ IDEA编译Scala程序","text":"Step1: File->New Project->Create project from scratch： Step2: Input project name, and select project type: Java Module Step 3: Create source directory: use default settings and next; Step 4: Select Scala as tech used by project, and set scala SDK directory: Step 5: Create a new Scala Class, which type is Object: Step 6: Complete the demo code: Step 7: Run this main method: And get the result:","tags":"Tech","url":"http://leetschau.github.io/shi-yong-intellij-ideabian-yi-scalacheng-xu.html","loc":"http://leetschau.github.io/shi-yong-intellij-ideabian-yi-scalacheng-xu.html"},{"title":"Xplorer2使用笔记","text":"Main Window Fonts: Tools->Options->Window->Main Font; External Text Editor: Tools->Options->General External Text Editor(I prefer F4); Auto Column Width in Detailed View: Tools->Options->Advanced->Automatically resize Name column in detailed view On Hotkeys Check up assigned hotkeys: Customize->Keyboard Use(Use Ctrl+f and F3 to search in text); Customize Hotkeys: Customize->Keyboard; Frequently userd hotkeys Ctrl+e: 全部/平分目录面板； tab: 目录面板跳转； shift+tab: 到地址栏； ctrl+tab: 到目录树； ctrl+tab, ctrl+shift+tab: 跳转到mini scrap； ctrl+alt+左/右: tab间跳转； alt+左/右: 历史跳转； CTRL+SHIFT+ : 跳转到某盘根目录； Alt+F1: 显示驱动器列表； Alt+F2: 显示跳转历史； shift+bs: 跳转到根目录； ctrl+bs: 跳转到桌面； ctrl+shift+drag: 在对面窗体创建当前项的快捷方式； CTRL+SHIFT+F1: 设置临时书签； CTRL+F1: 跳转到临时书签； F7：新建文件； F8: 新建文件夹； Ctrl + Numpad+: 自动调整列宽度 Alt+c: 拷贝完整路径+文件名； ctrl+ins: open selected item in a new tab in active pannel ctrl+alt+ins: open selected item in a new tab in inactive pannel ctrl+q: open preview pannel[View->quick viewer] Userful parts in user manual Navigating in different windows of x2 缺点和不足 没有rar, 7z解压插件； 没有\"在当前位置打开命令行窗口\"； 优点（与TC相比） 具有给文件加comments的能力；","tags":"Tech","url":"http://leetschau.github.io/xplorer2shi-yong-bi-ji.html","loc":"http://leetschau.github.io/xplorer2shi-yong-bi-ji.html"},{"title":"Eclipse中监视对象变化","text":"调试遗留代码时经常遇到的一个问题是由于对代码不了解，一个变量（Java里经常表现为对象的字段，尤其是全局(static)字段）经常在自己不知道的地方被改变，如果能够在这个对象被改变的时候停住，则非常有利于理解代码的运行流程非常有好处，在Eclipse中设置这样的断点很容易，就是在这个字段声明的行加断点，这样在Breakpoints View里就可以看到这个对象在何种情况下暂停了。如下图是对userPriMap字段添加监视断点。","tags":"Tech","url":"http://leetschau.github.io/eclipsezhong-jian-shi-dui-xiang-bian-hua.html","loc":"http://leetschau.github.io/eclipsezhong-jian-shi-dui-xiang-bian-hua.html"},{"title":"在Windows中安装字体","text":"WinXP下安装字体： 资源管理器进入C:\\Windows\\Fonts文件夹，主菜单【文件->安装新字体】。 Win7下安装字体： 双击字体文件（ttf等），出现字体预览窗体，点击\"安装\"即可。","tags":"Tech","url":"http://leetschau.github.io/zai-windowszhong-an-zhuang-zi-ti.html","loc":"http://leetschau.github.io/zai-windowszhong-an-zhuang-zi-ti.html"},{"title":"Lingoes安装词典和语音库","text":"安装词典： 选项->词典，出现\"词典管理\"窗体，点\"安装\"，从磁盘上选择要安装的词典文件（扩展名为ld2的文件），勾选\"添加到索引组\"和\"取词组\"； 安装语音库： 第一步：解压语音库。找到Lingoes安装目录下的speech文件夹（例如c:\\Program Files\\Lingoes\\Translator2\\speech），根据语音库的名字新建一个文件夹（例如LongmanModern），然后将语音库文件解压到这个文件夹里，即LongmanModern下有A, B, C...这些目录。 第二步：将语音库添加到Lingoes中。【设置->语音->真人发音引擎->声音】后的下拉框中选择\"LongmanModern\"，然后点击\"重建索引文件\"。 Bingo!","tags":"Tech","url":"http://leetschau.github.io/lingoesan-zhuang-ci-dian-he-yu-yin-ku.html","loc":"http://leetschau.github.io/lingoesan-zhuang-ci-dian-he-yu-yin-ku.html"},{"title":"一台服务器上部署多个Terracotta的方法","text":"在window server 2003 下，利用apache2.2.11+tomcat6+terracotta 群集不能复制session（http://forums.terracotta.org/forums/posts/list/2342.page） 其中提到更新服务器配置的方法： bin/tim-get.sh upgrade tc-config.xml 实际upgrade应为update； 但doc指出tim是Terracotta integration module，应该与启动服务器配置无关。","tags":"Tech","url":"http://leetschau.github.io/yi-tai-fu-wu-qi-shang-bu-shu-duo-ge-terracottade-fang-fa.html","loc":"http://leetschau.github.io/yi-tai-fu-wu-qi-shang-bu-shu-duo-ge-terracottade-fang-fa.html"},{"title":"修改Linux系统端口LAST_ACK状态的持续时间","text":"如果一台Linux服务器上某端口出现LAST_ACK状态，说明是客户端主动与它断开连接，服务器在等待客户端发送ACK+1，如果客户端没有发送，过一段时间服务器会自动断连接，这里\"一段时间\"的长度可以用sysctl命令设置（下面是设置为10s）： sysctl -w net.inet.ip.rtexpire=10 sysctl -w net.inet.ip.rtminexpire=10 sysctl命令可以对Linux系统进行多方面的配置，列出所有可配置项的命令是sysctl -a，详细使用方法可以man sysctl查看。","tags":"Tech","url":"http://leetschau.github.io/xiu-gai-linuxxi-tong-duan-kou-last_ackzhuang-tai-de-chi-xu-shi-jian.html","loc":"http://leetschau.github.io/xiu-gai-linuxxi-tong-duan-kou-last_ackzhuang-tai-de-chi-xu-shi-jian.html"},{"title":"定制bash命令提示符","text":"使用shell时经常要知道当前路径，如果将它写在提示符里很节省很多敲pwd的动作，方法是在启动文件(.bash_profile, .bashrc)里加上： export PS1=\"[\\u@\\h \\w]\\$ \" 效果如下： [godu@NOP2-HWXX /opt/godu/terracotta-2.7.2]$ pwd /opt/godu/terracotta-2.7.2 如果想持久化此效果，在~/.bash_profile文件（如果没有新建之）里追加上面的export语句。 说明： PS1是bash里表示命令提示符的环境变量，\\u表示用户名，\\h表示host name，\\w表示完整路径名，\\W表示当前路径名，\\$表示提示符（更多选项google\"bash prompt ps1\"）。以上在Solaris 10和CentOS 6中验证。","tags":"Tech","url":"http://leetschau.github.io/ding-zhi-bashming-ling-ti-shi-fu.html","loc":"http://leetschau.github.io/ding-zhi-bashming-ling-ti-shi-fu.html"},{"title":"用Notepad++构建轻量级Scala开发环境","text":"构建过程类似于笔记\" 基于Notepad++和Tcc的C语言开发环境 \"，只是把tcc换成 scala-2.9.1，从Scala官网下载最新版 scala-2.9.1.final.zip，解压后形成目录f:\\Software\\scala-2.9.1.final。 【插件->NppExec->Execute】打开Execute窗口，输入： NPP_SAVE cd \" \\((CURRENT_DIRECTORY)\" \"f:\\Software\\scala-2.9.1.final\\bin\\scalac.bat\" \"\\) (FULL_CURRENT_PATH)\" \"f:\\Software\\scala-2.9.1.final\\bin\\scala.bat\" \"$(NAME_PART)\" 点Save保存此脚本为\"Run Scala\"；第一行脚本表示保存文件，第二行将当前目录设为源代码所在目录，第三行脚本编译scala源文件，第4行运行编译后的class文件； 后面的给这个脚本添加快捷键部分与设置tcc相同，不赘述。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-notepadgou-jian-qing-liang-ji-scalakai-fa-huan-jing.html","loc":"http://leetschau.github.io/yong-notepadgou-jian-qing-liang-ji-scalakai-fa-huan-jing.html"},{"title":"文件夹同步软件比较","text":"比较软件列表 Toucan: GNU/GPL, 绿色； Allway Sync免费版: ASF； GoodSync: GS, proprietary ware; TotalCommander: TC, proprietary ware; Microsoft SyncToy: ST; Super Flexible File Synchronizer Pro v5.54a: SFFS，proprietary ware; SyncBackPro: proprietary ware, SBP; Areca: 开源，绿色，适用于\"备份\"，不适用于\"同步\"，因为Areca中的\"Repository\"相当于同步目标位置，Source相当于同步源，但它会在Repo里自动加一个全数字组成的子目录，它的强大之处是可以像SVN一样记录每次备份的历史，为备份加密，备份前后可以执行脚本； Free File Sync: 开源，绿色，有多种同步模式，但好像不支持智能盘符； 过滤器 同步软件的过滤器最好具有复杂逻辑判断能力，例如：将文件夹A备份到文件夹B，去除其中>500MB的文件，但其中FA, FB除外（也就是说FA,FB仍然要备份）。 以下是各软件的过滤器比较： Toucan：可以用\"Rules\"定义； ASF: 有文件大小定义，但试用后达不到预期目标； GS: 没有文件大小定义，只有文件名定义； TC: 没有过滤器功能； SBP: 似乎有，但似乎很复杂； SFFS: 过滤器功能很强大，包括Include/Exclude列表、尺寸大小、时间戳等多种方式过滤； 任务导出/导入 如果没有复杂逻辑筛选功能，但具备任务的导入/导出功能，那么仍然可以满足前面提到的复杂备份要求，办法是手工定义文件排除列表，然后导出任务，这样系统或者软件重装后只要导入先前定义好的任务列表即可。 目前试用的有： GS: 手工生成排除列表的功能比较直观好用，也具备导入/导出任务功能； ASF, SFFS也具备导入/导出任务功能； 智能盘符 GS不具备； ASF具备； SFFS可以在路径名中直接写盘符，例如：U52:\\Backup\\PersonalFinance 还可以勾选如下选项：Edit Profile->Advanced Settings->Job->Right-hand volume must be:... 同步记录文件夹 很多同步软件会在同步目标文件夹下生成一些特殊的文件夹，例如GoodSync会生成gs_data文件夹，ASF生成_SYNCAPP文件夹，ST在源和目标文件夹下都生成一个SyncToy*.dat文件，很不好，这方面Toucan和SFFS做的比较好，不生成任何额外的文件夹。 总结 Toucan是一款全功能（同步、备份、加密）软件，能过滤，能自己写脚本，支持在命令行下运行，不在文件夹下新建记录文件（夹），无需安装，推荐。使用方法详见\"Settings->Help\"，备份Calibre书库用Sync->Mirror方法备份，这种模式下即使目标比源新时也用源覆盖目标，保证绝对的单向备份。","tags":"Tech","url":"http://leetschau.github.io/wen-jian-jia-tong-bu-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/wen-jian-jia-tong-bu-ruan-jian-bi-jiao.html"},{"title":"everything搜索笔记","text":"搜索选项 Search目录下有4个选项，分别是Match Case, Match Whole Word, Match Path和Enable Regex，其中的Match Path是指当搜索目标为C:\\时，所有C盘下的文件都会被找到。 在特定目录中查找 Everything认为多个关键词之间的空格表示 AND 关系，所以可以用这个约定实现特定目录中的查找： （全部或者部分） 路径名<空格>keyword 。 例如对于F:\\warez\\Develop\\Java\\java_ee_sdk-5_01-solaris-i586.bin文件，如下方法都能找到： java solaris java solaris bin f:\\warez solaris java solaris java* solaris 但 java*solaris 是查不到的，因为这个表达式要求文件名必须以solaris结尾。","tags":"Tech","url":"http://leetschau.github.io/everythingsou-suo-bi-ji.html","loc":"http://leetschau.github.io/everythingsou-suo-bi-ji.html"},{"title":"D-Link DSL无线路由器设置笔记","text":"怎样修改无线网卡的SSID值 首先登录：http://192.168.1.1/ 高级配置->基本配置，修改SSID后点\"应用\"即可。 备份无线网卡的配置 管理->备份配置","tags":"Tech","url":"http://leetschau.github.io/d-link-dslwu-xian-lu-you-qi-she-zhi-bi-ji.html","loc":"http://leetschau.github.io/d-link-dslwu-xian-lu-you-qi-she-zhi-bi-ji.html"},{"title":"uname指令","text":"以下是一台Solaris 10服务器的配置信息， bash-3.00 \\( uname -a SunOS NOP2-HWXX 5.10 Generic_138888-03 sun4u sparc SUNW,Sun-Fire-15000 bash-3.00\\) uname -i SUNW,Sun-Fire-15000 bash-3.00 \\( uname -m sun4u bash-3.00\\) uname -n NOP2-HWXX bash-3.00 \\( uname -p sparc bash-3.00\\) uname -r 5.10 bash-3.00 \\( uname -s SunOS bash-3.00\\) uname -v Generic_138888-03 bash-3.00$ uname -X System = SunOS Node = NOP2-HWXX Release = 5.10 KernelID = Generic_138888-03 Machine = sun4u BusType = Serial = Users = OEM# = 0 Origin# = 1 NumCPU = 16 下面分别解释uname各选项含义： -a 全部显示； -i 显示name of platform； -m 显示机器的硬件名称； -n 显示此机器在网络中的节点名称（node name）； -p 显示此机器的ISA（Instruction Set Architechture，指令集框架）或者处理器（processor）名称；上文的SPARC是Sun公司的微处理器商标名； -r 显示操作系统的release level（可以理解为版本号？）； -s 默认选项，显示操作系统名称； -v 显示操作系统内核ID； -X 分行显示操作系统相关的各项参数名称和值，注意最后一行的CPU核数； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/unamezhi-ling.html","loc":"http://leetschau.github.io/unamezhi-ling.html"},{"title":"SunOS与Solaris系统的对应关系","text":"下文绝大部分译自维基百科Solaris词条的\"历史\"部分： http://en.wikipedia.org/wiki/Solaris_(operating_system)#History 1987年，AT&T与Sun公司宣布合作开发当时市场上最流行的类Unix操作系统（BSD, System V, Xenix）的融合版：Unix System V Release 4，即SVR4。1991年9月4日，Sun宣布用基于SVR4的系统替代使用中的SunOS 4，它的内部名称是SunOS 5，市场名称是Solaris 2。除了SunOS 4.1.x被命名为Solaris 1之外，Solaris仅指基于SVR4的SunOS 5.0及其以后的版本。SunOS的minor version被包含进了Solaris的release number中，例如：Solaris 2.4对应于SunOS 5.4，Solaris2.6之后，Sun去掉了主版本号2（类似与JDK 1.5变成了JDK 5），所以Solaris 7对应于SunOS 5.7，目前最新的SunOS 5.10对应于Solaris 10。","tags":"Tech","url":"http://leetschau.github.io/sunosyu-solarisxi-tong-de-dui-ying-guan-xi.html","loc":"http://leetschau.github.io/sunosyu-solarisxi-tong-de-dui-ying-guan-xi.html"},{"title":"Unix系统的用户和用户组","text":"下面三篇文章写得不错： Linux 用户（user）和用户组（group）管理概述 ； 用户（User）和用户组（Group）配置文件详解 ： Linux 用户管理工具介绍 ：","tags":"Tech","url":"http://leetschau.github.io/unixxi-tong-de-yong-hu-he-yong-hu-zu.html","loc":"http://leetschau.github.io/unixxi-tong-de-yong-hu-he-yong-hu-zu.html"},{"title":"查找匹配括号","text":"源代码分析时经常要找匹配的括号，Notepad2中实现这个功能的方法是：光标放在一个括号处，【Edit->Special->Find Matching Brace】，要选择到匹配括号处，用【 Edit->Special->Select to Matching Brace 】。","tags":"Tech","url":"http://leetschau.github.io/cha-zhao-pi-pei-gua-hao.html","loc":"http://leetschau.github.io/cha-zhao-pi-pei-gua-hao.html"},{"title":"制表符转换为空格","text":"由于制表符的不定长特性，在纯文本显示时经常出现不能对齐的问题，因此一般需要转换为空格，Ultraedit有这个功能，但实际上Notepad2也有这个能力： 选中要转换的文字后【Edit->Convert->Untabify Selection】。","tags":"Tech","url":"http://leetschau.github.io/zhi-biao-fu-zhuan-huan-wei-kong-ge.html","loc":"http://leetschau.github.io/zhi-biao-fu-zhuan-huan-wei-kong-ge.html"},{"title":"Map的putAll方法验证","text":"下面的程序验证了Map的putAll方法的行为特性，代码如下： import java.util.HashMap; public class Map_putAllTest { public static void main(String[] args){ //两个map具有不同的key HashMap map1=new HashMap(); map1.put(\"1\", \"A\"); HashMap map2 = new HashMap(); map2.put(\"2\", \"B\"); map2.put(\"3\", \"C\"); map1.putAll(map2); System.out.println(map1); //两个map具有重复的key HashMap map3=new HashMap(); map3.put(\"1\", \"A\"); HashMap map4 = new HashMap(); map4.put(\"1\", \"B\"); map4.put(\"3\", \"C\"); map3.putAll(map4); System.out.println(map3); } } 保存为F:\\Map_putAllTest.java，编译和运行结果如下： F:>javac Map_putAllTest.java 注意：Map_putAllTest.java 使用了未经检查或不安全的操作。 注意：要了解详细信息，请使用 -Xlint:unchecked 重新编译。 F:>java Map_putAllTest {3=C, 2=B, 1=A} {3=C, 1=B} F:> 上例说明A.putAll(B)方法就是将B的内容全部放入A中，如果有重复的key1，则用B中key1对应的value（B.get(key1)）覆盖A中key1对应的value。","tags":"Tech","url":"http://leetschau.github.io/mapde-putallfang-fa-yan-zheng.html","loc":"http://leetschau.github.io/mapde-putallfang-fa-yan-zheng.html"},{"title":"Terracotta的Unable to find communications stack问题解决方法","text":"2008-05-27 10:17:26,358 INFO - Unable to find communications stack. ConnectionID(2.33fc6df7282c4217854f022429b230e1) not found. ... 这个错误的原因是由于之前连Terracotta的客户端在老的Terracotta服务down了以后一直重连，这个新的Terracotta起来后收到的是重连请求，由于新的TC不知道这个重连的具体情况，所以打印了这条日志，解决方法是关闭客户端的重连请求。详见： http://forums.terracotta.org/forums/posts/list/1092.page","tags":"Tech","url":"http://leetschau.github.io/terracottade-unable-to-find-communications-stackwen-ti-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/terracottade-unable-to-find-communications-stackwen-ti-jie-jue-fang-fa.html"},{"title":"线程显示不全的解决方法","text":"云南现场GODU服务器型号为 SunOS 5.10，即solaris 10，用ps -ef不能显示全部的线程名，只能显示第一行，要显示完整线程名需要用下面的命令： /usr/ucb/ps -auwwx|grep java godu 7729 0.1 3.523351362257000 ? S 8ÔÂ 19 860:07 /usr/jdk/instances/jdk1.5.0/bin/java -server -Xms2048m -Xmx2048m -XX:NewSize=512m -XX:MaxNewSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dcom.sun.management.jmxremote -Dtc.install-root=./.. -cp ./../lib/tc.jar com.tc.server.TCServerMain 所以看terracotta线程不能只看有没有terracotta，还要看是否存在TCServerMain","tags":"Tech","url":"http://leetschau.github.io/xian-cheng-xian-shi-bu-quan-de-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/xian-cheng-xian-shi-bu-quan-de-jie-jue-fang-fa.html"},{"title":"ftp常用命令","text":"open: 连接远端服务器，例如open 10.0.2.47； pwd: 获取远端当前目录； put: 上传文件； get: 下载文件；get pwd.ldif bin: 进入binary传输模式； hash: 传输过程中显示打印#； lcd: 改变本地文件夹，例如：lcd d:\\ lpwd: 显示本地当前目录； bye: 与远端服务器断开连接；","tags":"Tech","url":"http://leetschau.github.io/ftpchang-yong-ming-ling.html","loc":"http://leetschau.github.io/ftpchang-yong-ming-ling.html"},{"title":"打包与压缩","text":"zip and unzip 压缩web文件夹到web.zip文件中，不包括web中所有.svn文件夹：zip web.zip -r web -x ' .svn/ ' 追加新目录到已有压缩文件中：zip web.zip -r newdir，如果需要在web.zip的dir1/subdir/subsubdir下增加一个文件new.xml，新建dir1/subdir/subsubdir，将new.xml拷贝过去形成dir1/subdir/subsubdir/new.xml，然后zip web.zip -r dir1，web.zip中dir1/subdir/subsubdir下的其他文件不受影响； 解压缩到指定文件夹：unzip web.zip -d dst_extract_dir 解压web.zip中的top/sub/aa.js文件到当前目录下，保留目录结构： unzip web.zip top/sub/aa.js 解压web.zip中的top/sub/aa.js文件到指定目录下，保留目录结构： unzip web.zip top/sub/aa.js -d dst_extract_dir 解压web.zip中的top/sub/aa.js文件到指定目录下，不保留目录结构（文件直接放在指定目录下，没有top/sub文件夹）： unzip -j web.zip top/sub/aa.js -d dst_extract_dir unzip -j build/GcpCollector.zip GcpCollector/lib/core/GcpServerCore.jar -d integral_test/lib 读取jar包的meta info: unzip -p target.jar META-INF/MANIFEST.MF （-p选项将文件内容输出到stdout上） 压缩与解压命令：gzip/zip/gunzip/unzip 压缩/解压缩gz文件：gzip/gunzip filename 二者默认在压缩/解压后删除原始文件，如果想要保留的话用-c选项： gzip -c myfile.txt > myfile.gz gunzip -c test.tar.gz > test.tar gzcat test.tar.gz > test.tar（gzcat<=>gunzip -c，linux不支持此命令）； 查看压缩包里文件清单的命令 tar -t gzip -l unzip -l web.zip unzip -l web.zip | less 适用于文件内容比较多，且需要查看某一部分的情况 less web.zip tar -tvf只能显示tar文件和tar文件打成的gz包中的内容，如果是 直接用gzip压缩文件，tar -t是无效的，要用： gzip -l filename.gz 来查看文件清单。 打包和解包命令：tar 压缩当前目录里的所有文件到/home/test/kk.tar文件中： tar - cvf / home / test / kk . tar * 将当前目录里的aa和bb两个文件打包到kk.tar中： tar - cvf / home / test / kk . tar aa bb 将s3目录下的所有文件打包到k3.tar.gz中（Solaris不支持-z选项）： tar czf k3 . tar . gz s3 /* 查看k3.tar.gz的内容： tar - tvf k3 . tar . gz 输出为： -rw-rw-r-- test/test 10240 2011-10-14 03:05:15 s3/aa -rw-rw-r-- test/test 11 2011-10-13 09:30:43 s3/bb 即包括s3目录也打进了压缩包里； 将/home/test/ss/tt.tar解压到/home/test/s3下（要求s3文件夹已存在）： tar - xvf / home / test / ss / tt . tar - C / home / test / s3 若不用-C指定解压目录，则解压到当前目录下； tar参数说明： -c表示创建tar文件；-x表示解压文件；-v表示verbose，即显示处理过程；-f要求后面紧跟要处理的tar文件的文件名；-z表示用gzip压缩生成的tar文件； Solaris的tar命令没有-z选项，不能用tar -zxvf命令解压gz文件，必须先用： gunzip filename.gz（或者gzip -d filename.gz） 解压成tar包，然后用tar -xvf解包。 附： 下面是将terracotta-2.7.2目录下的所有内容打包后在tc272-2目录里解压的过程： [godu@goduserver terracotta-2.7.2]$ tar -cvf /home/godu/tc272.tar * [godu@goduserver terracotta-2.7.2] \\( cd [godu@goduserver ~]\\) mkdir tc272-2 [godu@goduserver ~] \\( cd tc272-2 [godu@goduserver tc272-2]\\) tar -xvf /home/godu/tc272.tar 这个过程除了生成一个tar文件外，等价于将terracotta-2.7.2目录下的所有内容拷贝到tc272-2目录里： [godu@goduserver ~]$ mkdir tc272-2 [godu@goduserver ~]$ cp -r terracotta-2.7.2/* tc272-2/ 删除tc272-2目录： [godu@goduserver ~]$ rm -r tc272-2 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/da-bao-yu-ya-suo.html","loc":"http://leetschau.github.io/da-bao-yu-ya-suo.html"},{"title":"调整chm文件的字体大小","text":"例如要将chm文件中的字体调到最大，打开IE浏览器，页面->文字大小->最大。 在Win7上试验通过。","tags":"Tech","url":"http://leetschau.github.io/diao-zheng-chmwen-jian-de-zi-ti-da-xiao.html","loc":"http://leetschau.github.io/diao-zheng-chmwen-jian-de-zi-ti-da-xiao.html"},{"title":"Eclipse中source folder定义错误的解决方法","text":"在使用新的Eclipse打开旧的workspace时有时会出现source folder定义错误的情况，例如原本的定义是名为src的source folder下有包名为org.apache，现在被Eclipse解析为source folder（或者普通folder）为src/org，apache为包名，这样下面程序编译都会出错，解决方法是：直接打开该工程的.classpath文件，找到名为 src/org的 classpathentry条目 删除，然后在Eclipse中刷新工程，这时src会变为一个普通folder，右键之，选择Build Path->Use as Source Folder，OK。","tags":"Tech","url":"http://leetschau.github.io/eclipsezhong-source-folderding-yi-cuo-wu-de-jie-jue-fang-fa.html","loc":"http://leetschau.github.io/eclipsezhong-source-folderding-yi-cuo-wu-de-jie-jue-fang-fa.html"},{"title":"Windows7下MSN和Outlook最小化解决办法","text":"Windows7下outlook、msn这些软件最小化的默认行为行为都是最小化到任务栏，而不是托盘区，很占地方，下面的方法让它们隐藏到托盘区，且可以用快捷键恢复窗口。 最小化到托盘区 Outlook到托盘区比较简单，就是在托盘区图标上右键，选【最小化时隐藏】即可。msn相对复杂些，首先找到msnmsgr.exe这个文件右键->属性->兼容性，勾选\"以兼容模式运行这个程序\"，在下拉列表里选\"Windows Vista\"。这样用Alt+F4（或点击关闭按钮）关闭MSN后，托盘区就会出现MSN的图标了。 恢复窗口 用autohotkey脚本（见笔记\"激活托盘区程序的ahk脚本\"），且需要首先自定义托盘区图标的显示规则，让outlook/msn图标始终显示。 2013-01-05更新： Outlook最小化后用Executor激活，MSN用MSNLite，可以自定义显示/隐藏面板快捷键；","tags":"Tech","url":"http://leetschau.github.io/windows7xia-msnhe-outlookzui-xiao-hua-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/windows7xia-msnhe-outlookzui-xiao-hua-jie-jue-ban-fa.html"},{"title":"破解Excel文件打开密码","text":"使用了Passware Password Recovery Kit Enterprise(v10.3.2585)，这个软件的优点是能够破解多种密码，CPU占有率低，上手快，易于制定密码规则。","tags":"Tech","url":"http://leetschau.github.io/po-jie-excelwen-jian-da-kai-mi-ma.html","loc":"http://leetschau.github.io/po-jie-excelwen-jian-da-kai-mi-ma.html"},{"title":"Windows托盘化工具","text":"试验了TrayIt（v4.6.5.5）和TrayEverything（v1.3）， 前者只能最小化到托盘区，只能用鼠标双击恢复窗口，而不能定义恢复快捷键， 后者在windows 7下工作不稳定，Options修改后程序会失去响应。 今天（2013-02-12）试用了 RBTray ， 优点：开源，绿色，操作简单。 使用方法： 右键窗口的最小化按钮使之进入托盘区，左键功能不变，单击托盘区图标恢复。 程序运行后没有任何图标，退出RBTray的方法是右键被最小化到托盘区的任一个图标，点击\"Exit RBTray\"。 另外下载了TrayIt，但需要安装，不方便，放弃；","tags":"Tech","url":"http://leetschau.github.io/windowstuo-pan-hua-gong-ju.html","loc":"http://leetschau.github.io/windowstuo-pan-hua-gong-ju.html"},{"title":"GreenBrowser常用设置","text":"【GreenBrowser选项->常规->禁止多个GreenBrowser进程】； 快捷键 隐藏显示浏览器窗口：Ctrl+`（反引号，在【GreenBrowser选项->其他->显示/隐藏GreenBrowser热键】中设置）；","tags":"Tech","url":"http://leetschau.github.io/greenbrowserchang-yong-she-zhi.html","loc":"http://leetschau.github.io/greenbrowserchang-yong-she-zhi.html"},{"title":"HAProxy安装笔记","text":"HAProxy的名字来自于 High-availability clusters \"，关于计算机集群，可以参考\" Computer cluster \"。 假设haproxy安装在10.0.2.47上，被负载均衡的两个GODU服务器分别在10.0.2.47和10.32.1.38上。安装部署的过程并不复杂： 上传压缩包并解压 ftp 10.0.2.47 hash bin put f:\\warez\\Develop\\HAProxy\\haproxy-1.4.17.tar.gz tar -zxvf haproxy-1.4.17.tar.gz make make TARGET=linux26 结果是生成一个新的可执行文件：-rwxrwxr-x 1 godu godu 1601387 09-06 10:50 haproxy install 切换成root用户：su - root，口令root 安装：make install 安装完成后在/usr/local目录下生成一个haproxy目录，结构为： drwxr-xr-x 3 root root 4096 09-07 10:04 doc drwxr-xr-x 2 root root 4096 09-07 10:04 sbin drwxr-xr-x 3 root root 4096 09-07 10:04 share 配置 在这个目录下新建一个名为haproxy.conf的文件，内容为： global maxconn 65535 uid 0 gid 0 defaults mode tcp timeout connect 5000ms timeout client 30000ms timeout server 30000ms listen test1 bind 0.0.0.0: 1357 mode tcp server s1 10.0.2.47:1234 server s2 10.32.1.38:1234 其中bind后面的端口是haproxy的端口，两个server是被haproxy负载均衡的GODU服务器； 启动 在/usr/local/haproxy下输入命令 sbin/haproxy -f haproxy.conf 使用haproxy 将10.0.2.47 1357作为GODU群的\"门面\"即可， telnet 10.0.2.47 1357 （相对于不用haproxy时的telnet 10.0.2.47 1234）。","tags":"Tech","url":"http://leetschau.github.io/haproxyan-zhuang-bi-ji.html","loc":"http://leetschau.github.io/haproxyan-zhuang-bi-ji.html"},{"title":"绿色djvu阅读软件","text":"官方的djvu viewer都需要安装，总算找到一个绿色版的，名为STDU Viewer，可以阅读的格式包括DjVu, PDF, TIFF, XPS, FB2等，版本为1.6.2。","tags":"Tech","url":"http://leetschau.github.io/lu-se-djvuyue-du-ruan-jian.html","loc":"http://leetschau.github.io/lu-se-djvuyue-du-ruan-jian.html"},{"title":"Shell中的替换和引用","text":"Shell中的替换有4种形式，分别是： Filename substitution (called globbing) Value-based variable substitution Command substitution Arithmetic substitution Filename substitution指文件名的通配符，包括*,?和[]，分别表示任意长度字符串、单个字符和字符集合，例如： ls ch*可以列出ch01 ch23等，ls ch?可以列出ch1 chs等，ls ch[01]可以列出ch0或者ch1 Value-based variable substitution是变量替换，基本方法是$variable_name。 下面的例子演示了两点：一是\":-\"的用法（若HOST未赋值，则表达式值为localhost，HOST保持不变，详见[1] Hour 8: Substitution），二是字符串可以直接组合。 bash-3.00 \\( pp=\\) \"$ \" bash-3.00$ echo $pp localhost$ bash-3.00 \\( pp=\\) \"$ \" bash-3.00$ echo $pp /opt/godu$ Command substitution是将一个命令的输出进行替换，基本方法是用反引号或者$(...)括起命令，在指令替换有嵌套时用后者更方便，如 bash-3.00$ mydate= date bash-3.00$ echo $mydate Mon Sep 5 17:04:42 CST 2011 bash-3.00 \\( echo $(date) 2012年 05月 18日 星期五 14:34:19 CST Arithmetic substitution是进行算术表达式求值，基本格式是\\) ((...))，例如： foo=$(( ((5 + 3*2) - 4) / 2 )) 单引号将内部的所有元字符（metacharactor）视为一般字符输出，双引号内$,`,\\这些元字符（详见[1] Table 9.1）不被视为一般字符，例如： bash-3.00$ echo 'I have $23' I have $23 bash-3.00 \\( echo \"I have $23\" I have 3 bash-3.00\\) echo 'I have \\ \\(23' I have \\\\) 23 bash-3.00 \\( echo \"I have \\\\) 23\" I have $23 bash-3.00 \\( echo ' date ' date bash-3.00\\) echo \" date \" 2012年 05月 18日 星期五 14:55:40 CST bash-3.00 \\( echo \"\\) (date)\" 2012年 05月 18日 星期五 14:57:07 CST [1] Sriranga Veeraraghavan, Sams Teach Yourself Shell Programming in 24 Hours, Sams Publishing, 1999 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/shellzhong-de-ti-huan-he-yin-yong.html","loc":"http://leetschau.github.io/shellzhong-de-ti-huan-he-yin-yong.html"},{"title":"Windows7快捷键","text":"Win + 1, Win + 2 – 在任务栏中快速切换程序，任务栏第一位固定是Chrome， 因此这个快捷键超级有用； Win + M - 最小化窗口； Win+ 上/下/左/右 – 移动当前激活窗口；其中Win +左/右 为移动窗口到屏幕两边， 占半屏，Win + 上 为最大化当前窗口，下为恢复当前窗口，结合Win+M一起使用； Win + Shift + 左/右：扩展屏幕模式下，将当前窗口在两个屏幕间移动； Win + Tab - 图形化的窗口切换，WinXP中Alt+Tab的增强版； Win + Pause – 打开系统属性，即【开始->计算机->右键属性】； Ctrl + Shift + Esc – 快速打开Windows任务管理器； Ctrl + Shift + 左键 – 用管理员权限打开程序； Win + B – 移动光标到系统托盘； Win + P – 在显示器与投影间相互切换； 其他快捷键： Shift+ 鼠标右键 – 增强版右键发送到 （似乎没什么用） Shift + 右键 –> 在当前文件夹用命令行打开 （相当于TotalCMD的Ctrl+G） Win + 空格 – 闪现桌面 （似乎没什么用） Win + Shift + 左/右 – 针对双显示器：移动当前窗口到左/右边的显示器上 （暂时用不上） Win + T – 显示任务栏窗口微缩图并回车切换 （不如win+tab好用） Shift + 左键 – 在任务栏对已打开的程序/文件夹再打开一次 （似乎没什么用） Ctrl + Shift + N – 创建一个新的文件夹 （相对于TotalCMD的F7）","tags":"Tech","url":"http://leetschau.github.io/windows7kuai-jie-jian.html","loc":"http://leetschau.github.io/windows7kuai-jie-jian.html"},{"title":"绿色版虚拟光驱软件","text":"以前用的都是Daemon Tools，但这个软件需要破解，且不是绿色版的，现找用微软自己出的\"Virtual CD-Rom Control Panel\"代替它。从微软下载到的安装包是一个zip型exe文件，运行它，选好解压位置，例如f:\\Software\\VirtualCDControlPanel21，解压出来3个文件，然后按照readme.txt的步骤做就行了，需要说明以下几点： VCdRom.sys可以不拷贝到%SystemRoot%\\system32\\drivers下； mount文件时，文件路径名中不能有空格，否则会导致加载失败，最好也不要有中文； 如果mount之前光驱里已有镜像，先Eject，再mount，mount之后可以点OK退出VCdControlTool界面，虚拟光驱继续存在； 要卸载虚拟光驱，用VCdControlTool的\"Remove Drive\"按钮；","tags":"Tech","url":"http://leetschau.github.io/lu-se-ban-xu-ni-guang-qu-ruan-jian.html","loc":"http://leetschau.github.io/lu-se-ban-xu-ni-guang-qu-ruan-jian.html"},{"title":"用notepad2代替notepad","text":"Windows自带的notepad.exe功能比较弱， notepad2 是一个比较好的替代方案， 下载\"Notepad2 4.2.25 Setup (x64)\"， 安装时会提示是否要替代Windows自带的notepad，选择同意就可以了。","tags":"Tech","url":"http://leetschau.github.io/yong-notepad2dai-ti-notepad.html","loc":"http://leetschau.github.io/yong-notepad2dai-ti-notepad.html"},{"title":"autohotkey快捷键脚本快速更新方法","text":"假设快捷键文件保存在e:\\MyDoc\\ahkFiles\\hotkeyDefs.ahk中，由于这个文件会经常更新，每次定义了新的快捷键后都要做如下步骤： 找到这个脚本文件并打开->修改文件->保存文件->重新载入文件（使新定义生效）； 每次现找脚本再用鼠标重复这个动作很麻烦，实际上有比较简单的解决方法，在脚本文件里加上如下快捷键定义： !+e:: Edit ; edit this file !+r:: Reload ; reload this file 这样每次需要修改时用Alt+Shift+E就可以打开这个脚本，修改完关闭后用Alt+Shift+R就可以更新快捷键定义了。 默认用notepad打开脚本文件，如果想用其他编辑器修改，可以把第一行改为： !+e:: Run, f:\\Software\\notepad2\\Notepad2.exe e:\\MyDoc\\ahkFiles\\hotkeyDefs.ahk 或者参见笔记\"用notepad2代替notepad\"，但不推荐这个方法。","tags":"Tech","url":"http://leetschau.github.io/autohotkeykuai-jie-jian-jiao-ben-kuai-su-geng-xin-fang-fa.html","loc":"http://leetschau.github.io/autohotkeykuai-jie-jian-jiao-ben-kuai-su-geng-xin-fang-fa.html"},{"title":"安装Windows 7步骤","text":"安装系统 制作装有PE系统的U盘，我用的是小马PE，制作过程是：用虚拟光驱加载小马PE，运行后按照程序指示制作U盘； 用此U盘启动电脑，进入winPE环境； 用虚拟光驱工具加载win7系统安装盘的ISO文件； 用安装工具指向该虚拟光驱装win7； 装完后关机，拔掉U盘，重启系统； 从硬盘启动后进行后续的安装和配置，这样win7就装好了； 提高方便性的设置 自动登录：见笔记 windows的自动登录和隐藏用户 ； 使某程序可以自动启动： 方法一，对所有程序取消安全确认：控制面板->用户账户和家庭安全->用户账户->更改用户账户控制设置，将安全性设为最低一档，这种方法降低了系统安全性，不推荐； 方法二，针对某一具体程序进行修改（以启动Everything为例）：任务计划程序（Task Scheduler）->创建任务（Create Task）： \"常规\"标签页下勾选\"使用最高权限运行\"; \"操作\"标签页下\"新建\"一个操作，\"程序或者脚本\"后填上Everything可执行文件的路径，如\"D:\\Apps\\Everything\\Everything-1.2.1.371.exe\"，确认后返回\"创建任务\"窗体； \"设置\"标签页中确认勾选\"运行按需运行任务\"，\"如果此任务已运行，以下规则适用\"下面选\"请勿启动新实例\"； 参考 Run UAC restricted programs without the UAC prompt 和 Make Vista launch UAC restricted programs at startup with Task Scheduler 方法三：使用 Microsoft Application Compatibility Toolkit","tags":"Tech","url":"http://leetschau.github.io/an-zhuang-windows-7bu-zou.html","loc":"http://leetschau.github.io/an-zhuang-windows-7bu-zou.html"},{"title":"Icescrum安装过程","text":"下载bundle包：icescrum_R3_11_bundle.zip 解压到f:\\Software\\icescrum_R3_11_bundle\\下； 由于icescrum_R3_11需要jdk版本为1.6+，所以需要修改一下f:\\Software\\icescrum_R3_11_bundle\\start.bat，在\"@echo off\"后面加上： set JAVA_HOME=f:\\Software\\jdk1.6.0_18 set PATH=%JAVA_HOME%\\bin 运行start.bat，如果tomcat启动不成功，检查8080端口是否已被占用； tomcat启动成功后，打开浏览器输入： http://localhost:8080/icescrum ，即可开始敏捷之旅 :) 另：同类软件agilefant也不错，当前版本为2.0.4，但安装时需要配置数据库，所以选用了icescrum。","tags":"Tech","url":"http://leetschau.github.io/icescruman-zhuang-guo-cheng.html","loc":"http://leetschau.github.io/icescruman-zhuang-guo-cheng.html"},{"title":"subclipse同步错误的修复方法","text":"有时用subclipse（eclipse的svn插件）同步SVN库时会出现\"connection refused by the server\"错误，如下图： 解决方法如下：在Window->Preferences->Team->SVN->SVN接口改为\"JavaHL\"，如下图：","tags":"Tech","url":"http://leetschau.github.io/subclipsetong-bu-cuo-wu-de-xiu-fu-fang-fa.html","loc":"http://leetschau.github.io/subclipsetong-bu-cuo-wu-de-xiu-fu-fang-fa.html"},{"title":"eclipse的terracotta插件手工制作过程","text":"本文仅涉及terracotta2.7.2的eclipse插件手工制作过程； 从具有terracotta插件的eclipse（例如f:\\Software\\Eclipse_Galileo下）的plugins文件夹下提取以下4个文件夹和一个文件，制成压缩包。 http_www_terracotta_org_config\\ org.terracotta.dso_2.7.2.r11005_v20081209\\ terracotta\\ terracotta-4_xsd\\ terracotta-4.xsd 要在新的eclipse上安装terracotta插件时，将此压缩包解压到plugins文件夹下即可。注意这个方法仅对eclipse SDK有效，对eclipse for Java developer无效。","tags":"Tech","url":"http://leetschau.github.io/eclipsede-terracottacha-jian-shou-gong-zhi-zuo-guo-cheng.html","loc":"http://leetschau.github.io/eclipsede-terracottacha-jian-shou-gong-zhi-zuo-guo-cheng.html"},{"title":"Java中数值类型的存储方法","text":"下面的程序（改自IBM DevelopWorks的\"Getting Started with NIO\"中的TypesInByteBuffer.java）用一个ByteBuffer对象存储了一个int和一个long，比较清晰的演示了int和long在内存中是如何存储的。 package com.ibm.nio; import java.nio.ByteBuffer; public class TypesInByteBuffer { static public void main(String args[]) throws Exception { ByteBuffer buffer = ByteBuffer . allocate ( 64 ); buffer . putInt ( 30 ); buffer . putLong ( 7000000000000 L ); buffer . flip (); // set a breakpoint here System . out . println ( buffer . getInt ()); System . out . println ( buffer . getLong ()); } } 在flip处设置一个断点，查看buffer的值如下： [0, 0, 0, 30, 0, 0, 6, 93, -48, -125, 112, 0,...] 前4个字节存储int，这里是30，后8个字节存储long，这里是 7000000000000L，由于一个字节是8个bit，因此要把一个8字节的内存中的long型数ABCDEFGH转换为10进制数，计算公式是： A 256&#94;7 + B 256&#94;6 + C 256&#94;5 + D 256&#94;4 + E 256&#94;3 + F 256&#94;2 + G 256 + H 如果某一位是负数，则用256减去它再进行计算。 所以用Pyhton语法验证就是：6 256 5+93*256 4+(256-48) 256 3+(256-125)*256 2+112 256，结果就是 7000000000000L。 对于浮点数（float和double型），转换为二进制相对复杂些，参见\"IEEE Standard 754 Floating Point Numbers\"，除了Java语言，C、C++、C#等也都使用相同的方法存储整数和浮点数。","tags":"Tech","url":"http://leetschau.github.io/javazhong-shu-zhi-lei-xing-de-cun-chu-fang-fa.html","loc":"http://leetschau.github.io/javazhong-shu-zhi-lei-xing-de-cun-chu-fang-fa.html"},{"title":"Java范型方法中T与?的比较","text":"Java范型从范围上分，有范型类和范型方法两种，这里只讨论范型方法，从语义上来说，范型中的 T 和 ? 都有\"任意一个类\"（或者\"任意一种类型\"）的意思，那么二者的区别是什么呢？我认为是 T 可以放在Field或者Method名称前作为类型名，而 ? 不行，除此之外本质上完全一样，下面的代码是一个实例。 package org.leechau.genericEx; import java.util.ArrayList; import org.junit.Before; import org.junit.Test; public class GenericTest { private final ArrayList p1 = new ArrayList (); private final ArrayList p2 = new ArrayList (); public String ma(ArrayList pa) { return pa.get(0).toString(); } public String mb(ArrayList <?> pa) { return pa.get(0).toString(); } @Before public void setUp() throws Exception { p1.add(\"1st strings\"); p2.add(51); } @Test public void testMa() { System.out.println(ma(p1)); System.out.println(ma(p2)); } @Test public void testMb() { System.out.println(mb(p1)); System.out.println(mb(p2)); } } 下面的代码演示了如何分别用 T 和 ? 完成相同的实现。 T版： package org.leechau.genericEx; import java.util.Collection; public abstract class Animal { public void playWith(Collection playGroup) {} } package org.leechau.genericEx; import java.util.ArrayList; import java.util.Collection; public class Dog extends Animal { @Override public void playWith(Collection playGroup) { System.out.println(this.toString() + \" play with \" playGroup.toString()); } public static void main(String[] args) { Collection dogs = new ArrayList (); Dog aDog = new Dog(); aDog.playWith(dogs); } } ?版： package org.leechau.genericEx; import java.util.Collection; public class Animal2 { public void playWith(Collection <? extends Animal2> playGroup) {} } package org.leechau.genericEx; import java.util.ArrayList; import java.util.Collection; public class Dog2 extends Animal2 { @Override public void playWith(Collection<? extends Animal2> playGroup) { System.out.println(this.toString() + \" play with \" playGroup.toString()); } public static void main(String[] args) { Collection dogs = new ArrayList (); Dog2 aDog = new Dog2(); aDog.playWith(dogs); } } Java的范型（尤其是实现机制）给我的感觉是不够优雅，当一堆<>嵌套在一起的时候让人觉得像天书一样，背离了Java简洁易用的原则，但即便如此，毕竟现在Java还是产品开发（尤其是大规模产品）的主流工具，我们有必要理解它的一些细节。[1]的Part I,II 和[2]的第12章对范型的讲解比较透彻，[3]的4.3.7节则对Java范型进行了中肯的评价， [1]的Part III探讨了如何将没有范型的老代码改为有范型的新代码以保证类型安全 。 [1] Venkat Subramaniam, Generics in Java [2] Cay S. Horstmann, Core Java. Volume I, Fundamentals, 8th ed, 2007.9 [3] Bruce A. Tate, Beyond Java, 2005.9","tags":"Tech","url":"http://leetschau.github.io/javafan-xing-fang-fa-zhong-tyu-de-bi-jiao.html","loc":"http://leetschau.github.io/javafan-xing-fang-fa-zhong-tyu-de-bi-jiao.html"},{"title":"确定当前使用的Shell的种类","text":"如何知道当前使用的是什么Shell？ echo $0 (sh, bash, ksh, csh, tcsh上验证有效）； ps|grep $$ ，看最后一项，或者： ps|grep $$ |awk '{print $4}' (sh, bash, ksh, csh, tcsh上验证有效）； 输入一个系统不认识的命令（如aaa）获得系统提示，在有些shell上无效，不推荐； 另： echo $SHELL （用户默认的Shell，但不实时反映当前shell）； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/que-ding-dang-qian-shi-yong-de-shellde-chong-lei.html","loc":"http://leetschau.github.io/que-ding-dang-qian-shi-yong-de-shellde-chong-lei.html"},{"title":"Check port usage in Windows","text":"netstat -ano 通过命令结果中的PID号对应到Windows进程上。 参考：\"利用Windows内置功能轻松查看端口使用情况\"（ http://li-donghui123-163-com.iteye.com/blog/248028 ）","tags":"Tech","url":"http://leetschau.github.io/check-port-usage-in-windows.html","loc":"http://leetschau.github.io/check-port-usage-in-windows.html"},{"title":"网元断开连接的日志分析方法","text":"一次连接唯一的标识符是ip+port。当 首先，GAPI的日志中要有session，例如： logger.info(session + \" has login GODU\"); 对应的日志输出为： 2011-07-31 15:55:02,859 [pool-5-thread-1248] [com.boco.godu.gapi.mina.filter.data.GoduDataLoginFilter,30] [INFO] - [pool-1-thread-11332] (0x00001CD7: nio socket, client, / 10.131.62.61:38359 => / 10.131.62.46:1234 ) has login GODU 其中黑体字部分分别是GAPI端和GODU accepter端的ip地址和端口号，红字部分是确定 本次连接终端侧的唯一标识符，后面的\"10.131.62.46:1234\"是GODU服务器的IP地址和端口。 其次，在GODU日志中查找红字部分，在openne部分可以找到终端侧与 [INFO] [2011-08-11 01:42:40,708] [com.boco.godu.app.server.TelnetServerHandler] - [[30080:/ 10.131.62.61:14409 ] Begin to Connection NE, 10.134.16.100:6000 ..............]","tags":"Tech","url":"http://leetschau.github.io/wang-yuan-duan-kai-lian-jie-de-ri-zhi-fen-xi-fang-fa.html","loc":"http://leetschau.github.io/wang-yuan-duan-kai-lian-jie-de-ri-zhi-fen-xi-fang-fa.html"},{"title":"日志文件的筛选","text":"处理日志文件的一个常用操作是筛选出有某一特殊标志的行，日志文件一般比较大，用Ultraedit之类的软件处理会很慢，一般的方法是用Unix的grep命令重定向到一个文件中，例如要筛选出godu.log中所有有\"25:/10.0.2.47:54431\"的行，在godu.log所在目录下输入指令： grep '25:/10.0.2.47:54431' godu.log >new.log 会把godu.log中所有包含\"25:/10.0.2.47:54431\"的行放入 当前目录下新生成new.log文件中。如果输入的指令是\\ grep '25:/10.0.2.47:54431' >new.log 则是对当前目录下所有文件操作，将所有包含 \"25:/10.0.2.47:54431\"的行找出来放在new.log文件中。","tags":"Tech","url":"http://leetschau.github.io/ri-zhi-wen-jian-de-shai-xuan.html","loc":"http://leetschau.github.io/ri-zhi-wen-jian-de-shai-xuan.html"},{"title":"log4j使用笔记","text":"Java程序最常用的日志系统大概就是apache的log4j了，它的功能简单说就是\"记录日志\"。 它主要由logger、appender和layout这3个对象构成，logger是一个具体的\"记录器\"，appender是记录器的\"输出对象\"，它可以是屏幕输出、文件、界面组件、socket等。layout是appender的属性，决定appender所代表的输出中，一条具体的记录由哪些信息组成，排列顺序等。 每一个logger都有一个名字，名字是logger初始化时由getLogger的参数决定的，例如下面的logger的名字是com.foo： Logger logger = Logger . getLogger ( \"com.foo\" ); 名字是logger的唯一标识符，例如下面的x和y两个logger实际上是同一个对象： Logger x = Logger . getLogger ( \"wombat\" ); Logger y = Logger . getLogger ( \"wombat\" ); 名字还具有继承性，例如名为com.foo.bar的logger是com.foo这个logger的子logger，com.foo又是com的子logger，子logger会继承所有上级logger的appender。这种继承类似于java包的父目录和子目录的关系，详见[1]的\"Named Hierarchy\"部分。 类似于根目录的概念，rootLogger是logger hierarchy的顶端，简单的log4j应用中，只定义rootLogger的appender，所有类中的logger就继承了rootLogger的特性。 为一个logger指定appender是在log4j配置文件中定义的，格式是： log4j . rootLogger = level_name , appender_name1 , appender_name2 , ... 或： log4j.logger.logger_name=level_name, appender_name1, appender_name2, ... 前者为rootLogger指定appender，后者为某一个具体的logger指定appender。定义appender属性的方法是： log4j . appender . appender_name = ... log4j . appender . appender_name . layout = ... 例如下面的代码为rootLogger指定了appender A1，并设置A1为界面输出，然后指定了输出的格式，最后一行指定了com.foo的输出级别为WARN，com.foo及其子logger低于WARN的日志将不记录，由于com.foo没有指定appender，所以继承rootLogger的A1作为其输出： log4j . rootLogger = DEBUG , A1 log4j . appender . A1 = org . apache . log4j . ConsoleAppender log4j . appender . A1 . layout = org . apache . log4j . PatternLayout log4j . appender . A1 . layout . ConversionPattern =% d [ % t ] %- 5 p % c - % m % n log4j . logger . com . foo = WARN logger的级别常用的有debug, info, warn, error四种，详见\" log4j日志的输出级别设置 \"；appender常用的有 ConsoleAppender（控制台输出）、 DailyRollingFileAppender（按照一定的频率滚动输出日志，例如每月、每周、每天、每小时等）和 RollingFileAppender（到一定文件大小时滚动输出） 三种；layout常用的有SimpleLayout, PatternLayout, HTMLLayout, XMLLayout四种，后两种用来输出html和xml文本。不论哪种layout，都输出的是纯文本，因此各种appender与各种layout可以随意组合。 如果对项目中一些类的日志进行特殊处理（例如更改输出级别、指定新的输出文件等），见笔记\" 在包一级定制log4j日志输出 \"。 下面是一个完整的日志演示，首先是测试用例，只打一条日志： package com . boco . godu . gapi . logger ; import org.apache.log4j.Logger ; import org.junit.Test ; public class Log4jDemo { private final Logger logger = Logger . getLogger ( this . getClass ()); @Test public void testGapiLogger () { logger . info ( \" Apache Logger \" ); } } log4j.properties文件： log4j . rootLogger = debug , console , ft , fh , fx log4j . appender . console = org . apache . log4j . ConsoleAppender log4j . appender . console . layout = org . apache . log4j . SimpleLayout log4j . appender . ft = org . apache . log4j . RollingFileAppender log4j . appender . ft . File = . / log / debug . log log4j . appender . ft . Append = false log4j . appender . ft . MaxFileSize = 2 MB log4j . appender . ft . MaxBackupIndex = 10 log4j . appender . ft . layout = org . apache . log4j . PatternLayout log4j . appender . ft . layout . ConversionPattern =% d { MM - dd HH : mm : ss , SSS } % t % c , % L % p - % m % n log4j . appender . fh = org . apache . log4j . RollingFileAppender log4j . appender . fh . File = . / log / debug . html log4j . appender . fh . Append = false log4j . appender . fh . MaxFileSize = 2 MB log4j . appender . fh . MaxBackupIndex = 10 log4j . appender . fh . layout = org . apache . log4j . HTMLLayout log4j . appender . fh . layout . LocationInfo = true log4j . appender . fh . layout . Title = Test Log4j Layout log4j . appender . fx = org . apache . log4j . RollingFileAppender log4j . appender . fx . File = . / log / debug . xml log4j . appender . fx . Append = false log4j . appender . fx . MaxFileSize = 2 MB log4j . appender . fx . MaxBackupIndex = 10 log4j . appender . fx . layout = org . apache . log4j . xml . XMLLayout log4j . appender . fx . layout . LocationInfo = true rootLogger一共挂了4个appender，分别是一个控制台输出，一个纯文本格式日志，一个html格式日志，一个xml格式日志。 运行测试用例后的效果如下（黑体字和红圈是源代码打出的日志）： 控制台输出： INFO - Apache Logger 纯文本文件： 08-11 16:04:03,343 main com.boco.godu.gapi.logger.Log4jDemo,11 INFO - Apache Logger html文件： xml文件： < log4j : event logger = \"com.boco.godu.gapi.logger.Log4jDemo\" timestamp = \"1313049843343\" level = \"INFO\" thread = \"main\" > < log4j : message ><! [ CDATA [ Apache Logger ]] ></ log4j : message > < log4j : locationInfo class = \"com.boco.godu.gapi.logger.Log4jDemo\" method = \"testGapiLogger\" file = \"Log4jDemo.java\" line = \"11\" /> </ log4j : event >","tags":"Tech","url":"http://leetschau.github.io/log4jshi-yong-bi-ji.html","loc":"http://leetschau.github.io/log4jshi-yong-bi-ji.html"},{"title":"Mantis安装过程笔记","text":"安装平台：Windows Server 2003 R2 Enterprise x64 Edition 软件： EasyPHP-5.3.6.1 mantisbt-1.2.6 安装过程： 首先安装EasyPHP，一路next即可，安装到默认位置即可，路径中可以有空格； 将 mantisbt-1.2.6解压到 EasyPHP的www目录下，具体过程可参考 EasyPHP 3 + Mantis 1.2 快速搭建安装免费开源的中文缺陷管理平台 ； 配置： C:\\Program Files (x86)\\EasyPHP-5.3.6.1\\conf_files中将\"Listen 127.0.0.1:80\"和\"ServerName 127.0.0.1:80\"改为本机的IP地址，否则只能在本机登录mantis，局域网的其他机器不能访问。这部分的配置可参考 一步到位安装 Mantis Bug 跟踪系统 ，但其中有些东西已经过时了，例如对EasyPHP版本的限制、路径不能有空格等。","tags":"Tech","url":"http://leetschau.github.io/mantisan-zhuang-guo-cheng-bi-ji.html","loc":"http://leetschau.github.io/mantisan-zhuang-guo-cheng-bi-ji.html"},{"title":"Convert Java codes to UML diagram","text":"Power Designer -> File -> Reverse Engineer -> Object Language Object Language: Java Reverse engineer: Java directories Add ...","tags":"Tech","url":"http://leetschau.github.io/convert-java-codes-to-uml-diagram.html","loc":"http://leetschau.github.io/convert-java-codes-to-uml-diagram.html"},{"title":"Ivy配置文件编写规范","text":"各依赖条目按严格按字母顺序排列； 对于平行开发的多个项目产品之间的依赖关系，要将changing参数设为true，否则可能造成缓存更新不及时导致编译错误； 如果要避免依赖传递，使用 conf=\"compile->master\"，如果要显式的打开依赖传递，则使用transitive=\"true\"； 例如：","tags":"Tech","url":"http://leetschau.github.io/ivypei-zhi-wen-jian-bian-xie-gui-fan.html","loc":"http://leetschau.github.io/ivypei-zhi-wen-jian-bian-xie-gui-fan.html"},{"title":"GAPI的同步返回实现方法","text":"GAPI 所基于 MINA 是一个异步网络通信框架，因此要实现 API 调用的同步方式返回，需要采用锁机制，即在主线程启动 filter 后进入\"睡眠\"状态， 当filter 处理任务完毕后唤醒主线程继续运行。具体实现的方法如下（以 execScript() 方法为例）。 测试用例： public class SimpleExpScriptTest { private IConnection conn; @Test public void testPWD() throws Exception { conn = ConnFactory.getInstance().getConnection(Constants.PORT_CONNECT_GODU_DATA); conn.setSyncType(Constants.TYPE_DATA_CMD_SYNC); if (conn.getConnection(\" <7001> \", \"goduapp\", \"10.0.2.47\", 1234, 100)) { System . out . println ( \" Connect GODU OK! \" ) ; } conn.sendGoduCmd(\"settelnetcodec switch=y\"); conn.set_script_timeout(500); Map params = new HashMap (); params.put(\"user_name\", \"test\"); params.put(\"old_pwd\", \"godu123\"); params.put(\"new_pwd\", \"testgodu\"); IResult result = conn. execScript (\"-1200187081\", \"script/PWD\", \"\", params); System.out.println(\"***result is:\\n\" + result.getString()); } } execScript 方法： package com.boco.godu.gapi.conn; import ... public class GoduDataConnection extends AbstractConnection { private static final GapiLogger logger = LogUtils.getLogger(this.getClass().getName()); private final Object lock = new Object(); //对象锁 public IResult execScript(String ne_id, String scriptPath, String name, Map params) throws ... { // check if connected GODU successfully ... // parse script file GoduScript gs = new GoduScript(scriptPath, script_buffer_size, params); // add execute_script filter session.getFilterChain().addBefore(...); // open NE ... // 在执行完脚本或者超时之前阻止代码继续运行，在ExecScriptFilter.messageReceived方法中解锁 GapiIosessionUtils. lockSession (session, lock , script_timeout ); GoduReturnResult res = new GoduReturnResult(); String script_result = (String) session.getAttribute( ExecScriptFilter . EXEC_SCRIPT_RESULT , \"\" ); res.setArrays(script_result.getBytes()); int return_status = (Integer) session.getAttribute( ExecScriptFilter . EXEC_SCRIPT_RETURN_STATUS , 0 ); res.setReturnStatus(return_status); return res; } } 这样代码运行到lockSession时暂停，直到超时时间到，或者被其他线程上持有同一个锁的\"唤醒\"方法唤醒，这实现了同步方式的前一半：下面是同步方式的后一半：filter执行脚本完毕后唤醒主线程继续运行： package com.boco.godu.gapi.mina.filter.data; import ... public class ExecScriptFilter extends AGapiFilter { @Override public void messageReceived(NextFilter nextFilter, IoSession session, Object message ) throws Exception { ... if (...) { // 如果脚本执行完毕： ... GapiIosessionUtils . unlockSession ( session ) ; return ; } ... } } 那么 lockSession 和 unlockSession 方法又是如何实现的呢，继续往下看： public class GapiIosessionUtils { public static void lockSession(final IoSession session, final Object lock , final int timeout ) throws ... { try { if ( session . isConnected () && ! session . isClosing ()) { long beforeLockTime = System . currentTimeMillis () ; session . setAttribute ( GoduFilterConstants . GODU_DATA_LOCK , lock ) ; session . getConfig () . setBothIdleTime ( timeout ) ; ThreadUtil . waitIt ( lock , timeout * 1000 + 1000 ) ; long afterLockTime = System . currentTimeMillis () ; logger . debug ( \" lockTime= \" + ( afterLockTime - beforeLockTime ) + \" ms \" ) ; } } catch (Exception e) { e . printStackTrace (); logger . error ( \"lockSession exception: \" , e ); throw new GapiException ( e ); } } public static void unlockSession(final IoSession session) throws ... { try { if ( session . isConnected () && ! session . isClosing ()) { Object status = session . getAttribute ( GoduFilterConstants . GODU_DATA_LOCK ) ; ThreadUtil . notifyIt ( status ) ; } } catch (Exception e) { ... } } } 可以看到加锁的时候将锁（lock对象）放在了session的一个attribute上，解锁的时候从这个attribute上取出这个锁，然后解锁。这里用到的 冻结线程的 waitIt 方法以及唤醒线程的 notifyIt 方法实现如下： package com.boco.godu.common.util; public class ThreadUtil { public static void waitIt (final Object o, final long time) { synchronized (o) { try { if ( time == - 1 ) { o . wait () ; } else { o . wait ( time ) ; } } catch ( InterruptedException iex ) { iex . printStackTrace () ; } } } public static void notifyIt (final Object o) { synchronized (o) { o . notifyAll (); } } } 当代码到 o.wait(time); 时进入阻塞状态（停止运行，实际上是java.lang.Object.wait()方法），直到下列情况之一出现： 超时时间time到； 被唤醒，也就是调用同一个对象的notifyAll方法（即java.lang.Object.notifyAll()方法）。","tags":"Tech","url":"http://leetschau.github.io/gapide-tong-bu-fan-hui-shi-xian-fang-fa.html","loc":"http://leetschau.github.io/gapide-tong-bu-fan-hui-shi-xian-fang-fa.html"},{"title":"Groovy正则表达式复杂逻辑判断实例","text":"下面的两个pattern（p1和p2）分别代表了(A or B) and (C or D)和(A and B) or (C and D)的跨行匹配结果，当然还可以用正则表达式构建更复杂的pattern，但这个实例证明了Groovy具备跨行匹配复杂逻辑表达式的能力。 值得注意的是，多行匹配文本时需要在匹配字符串前加\"(?ms)\"。 该实例同时演示了Groovy闭包的使用方法。 源代码 msg1 = '''one two three four five six''' msg2 = '''Jan Feb Mar Apr May Jun''' msg3 = '''one two three Apr May Jun''' msg4 = '''Jan Feb Mar four five six''' p1 = / (?ms) (two|Feb).*(five|May)/ p2 = / (?ms) (two. five)|(Feb. May)/ msgs = [msg1, msg2, msg3, msg4] patterns = [p1, p2] patterns.each { pattern-> println 'pattern is: '+pattern msgs.each { msg-> println 'msg is: '+msg println 'match result is:' matcher = msg =~ pattern if (matcher) println \"true\" else println \"false\" println '---' } println '===' } 运行结果 pattern is: (?ms)(two|Feb).*(five|May) msg is: one two three four five six match result is: true msg is: Jan Feb Mar Apr May Jun match result is: true msg is: one two three Apr May Jun match result is: true msg is: Jan Feb Mar four five six match result is: true === pattern is: (?ms)(two. five)|(Feb. May) msg is: one two three four five six match result is: true msg is: Jan Feb Mar Apr May Jun match result is: true msg is: one two three Apr May Jun match result is: false msg is: Jan Feb Mar four five six match result is: false ===","tags":"Tech","url":"http://leetschau.github.io/groovyzheng-ze-biao-da-shi-fu-za-luo-ji-pan-duan-shi-li.html","loc":"http://leetschau.github.io/groovyzheng-ze-biao-da-shi-fu-za-luo-ji-pan-duan-shi-li.html"},{"title":"基于Tcc的C语言编译器","text":"TCC: Tiny C Compiler 是一款Windows平台上的迷你型C编译器，适合于学习算法时编译、演示一些简单的C语言程序，下面分别是基于vim和Notepad++的两种开发环境搭建方法。 安装TCC TCC是绿色软件，下载软件包（tcc-0.9.25-win32-bin.zip）后解压即可运行，假设解压到\"d:\\apps\\tcc\"目录下。 vim 将以下程序保存到hello.c文件中。 #include main() { printf(\"hello, world!!!\\n\"); } 运行\":!d:\\Apps\\tcc\\tcc.exe -run %\" Notepad++ 需要的软件： Notepad++ v5.8.3 绿色版和它的NppExec插件； 编译器 下载tcc的windows压缩包后解压到一个目录下，例如\"f:\\Software\\tcc\"； 语法高亮 Notepad++内置了对C语言的语法高亮，如果在\"语言\"菜单下没有\"C\"语言项，在【设置->首选项->语言】下从\"禁用项\"列表中把C放到\"启用项\"列表中即可。 命令行输出 安装NppExec：下载NppExec后解压到npp安装目录的plugins文件夹下，例如我的npp绿色版路径是f:\\Software\\Notepad++583，则解压后目录结构为f:\\Software\\Notepad++583\\plugins\\NppExec.dll和f:\\Software\\Notepad++583\\plugins\\NppExec（下面是几个.h文件），压缩包doc目录下文件放在f:\\Software\\Notepad++583\\plugins\\doc下。启动Npp后可看到【插件->NppExec】菜单，【插件->NppExec->Show Console Dialog】打开命令输出窗口，可用【插件->NppExec->Change Console Font】修改输出窗口的字体和字号； 定义运行脚本 【插件->NppExec->Execute】打开Execute窗口，输入 NPP_SAVE \"f:\\Software\\tcc\\tcc.exe\" \"$(FULL_CURRENT_PATH)\" -run 点Save保存此脚本为\"Run C\"；第一行脚本表示保存文件，第二行脚本使用了tcc.exe的-run参数，将编译、连接、运行一次性搞定； 定义菜单项 【插件->NppExec->Advanced Options】中选择\"Run C\"，然后勾选\"Place to the Macro submenu\"； 绑定快捷键 【设置->管理快捷键】的\"Macros\"或者\"Plugins commands\"下面找到\"Run C\"，为其设置一个快捷键； 编译运行 Npp中打开前述hello.c文件，【宏->Run C】或者使用前面设置的快捷键启动Run C脚本，在Console窗口中可以看到程序的输出。","tags":"Tech","url":"http://leetschau.github.io/ji-yu-tccde-cyu-yan-bian-yi-qi.html","loc":"http://leetschau.github.io/ji-yu-tccde-cyu-yan-bian-yi-qi.html"},{"title":"日期格式转换的正则表达式实现","text":"原始文本： 2011年7月18日：修改密码的核心功能开发完毕； 2011年7月19日：上午换座位，下午提交了著作权文档的电子流程； 目标格式文本： 2011-7-18：修改密码的核心功能开发完毕； 2011-7-19：上午换座位，下午提交了著作权文档的电子流程； vim实现 : % s / \\ ( \\ d \\{ 4 }\\ ). \\ ( \\ d \\{ 1 , 2 }\\ ). \\ ( \\ d \\{ 1 , 2 }\\ ). / \\ 1 - \\ 2 - \\ 3 / g 说明： 采用 :%s/old/new/g 命令进行替换，其中%表示对所有行进行替换操作，最后的g参数表明对一行中所有的new均替换为old。\\d代表任意数字，old pattern中每个括号（即(...)）中的内容构成一个group member，new pattern中对group member的引用用\\1、\\2、\\3...代表，即\"BRE\", back references. Groovy实现 oriStr = '''2011年7月18日：修改密码的核心功能开发完毕； 2011年7月19日：上午换座位，下午提交了著作权文档的电子流程；''' ; pattern = /( \\ d { 4 } ) \\ W ( \\ d { 1,2 } ) \\ W ( \\ d { 1,2 } ) \\ W /; matcher = oriStr =~ pattern ; matcher . each { all,y,m,d-> println 'Patten is : '+all; println ' Replaced by : '+y+' - '+m+' - '+d; }; println ' ***** '; println oriStr.replaceAll (pattern) {all,y,m,d->y+' - '+m+' - ' + d ;} ; 运行结果： Patten is : 2011 年 7 月 18 日 Replaced by : 2011 - 7 - 18 Patten is : 2011 年 7 月 19 日 Replaced by : 2011 - 7 - 19 ***** 2011 - 7 - 18 ：修改密码的核心功能开发完毕； 2011 - 7 - 19 ：上午换座位，下午提交了著作权文档的电子流程； 说明： 跨行字符串用三引号括起来；匹配模式用\" /.../\" 括起来；用模式匹配字符串时，每一次成功匹配构成了matcher的一个元素（代码中用matcher.each得到），如果模式当中包含group（可以matcher.hasGroup()判断），则这个元素本身也是一个List，其中第一个元素是符合模式的substring（代码中的all），各个group member可以用下标引用，也可以分别起名字（代码中分别为y、m、d）。这部分内容可参见《Groovy in Action》（2007版）第3.5节\"Working with regular expressions\"。Groovy的String.replaceAll方法包括两个参数，第一个是要被代替的pattern，第二个是用来代替pattern的closure，该closure的返回结果是最后一行代码的值。 例如： println oriStr.replaceAll (pattern) {all,y,m,d->y+'-'+m+'-'+d;return 'Date'}; 的输出是： Date ：修改密码的核心功能开发完毕； Date ：上午换座位，下午提交了著作权文档的电子流程； 基于文件读写的Groovy实现 pattern = /( \\ d { 4 } ) \\ W ( \\ d { 1,2 } ) \\ W ( \\ d { 1,2 } ) \\ W /; convStr = '' ; new File ( 'f:/Edit3.txt' ) . eachLine { convStr += (it.replaceAll (pattern) {all,y,m,d->y+'-'+m+'-'+d } )+ '\\n' } new File ( 'f:/conv.txt' ) . write convStr ; 说明： 第4行的it表示此行文本（字符串）。","tags":"Tech","url":"http://leetschau.github.io/ri-qi-ge-shi-zhuan-huan-de-zheng-ze-biao-da-shi-shi-xian.html","loc":"http://leetschau.github.io/ri-qi-ge-shi-zhuan-huan-de-zheng-ze-biao-da-shi-shi-xian.html"},{"title":"Java assert关键字的使用方法","text":"assert后面的表达式为假时会抛出AssertionError类对象，此类继承自Throwable类，可以用try..catch(AssertionError e)...语句捕获并处理，如果不处理，将会向其他Exception一样向上层调用抛出，导致线程运行中断。 使用assert的方法 assert适用于定义服务器的能力边界，如最大负载等，不适于对外部条件（例如检验用户输入格式）进行判断（参考http://stackoverflow.com/questions/1276308/exception-vs-assertion），因为处理这类问题的方法是给出一个反馈信息，而不是中断服务。基于此，应用开发初期可以用assert将流程运行的前提条件写出来，但在产品发布前应将这些临时assert改成正式的错误处理语句。 JUnit的assert*提供了比内置assert更丰富的判断方法，但本质上仍然是抛出AssertionError，且增加了对JUnit的依赖，因此不建议用JUnit代替assert。 （2012-12-19更新） Java的assert关键字是从JAVA SE 1.4 引入的，为了和老版本兼容，Java在执行的时候默认是不启动断言检查的，这种情况下所有的assert语句都将被忽略。要开启断言检查，则需要在运行时加参数-enableassertions或-ea来开启，在Eclipse中，就是在要运行的类（或测试方法）的Run Configurations中的\"Arguments\"下的\"VM arguments\"部分写上：\"-ea\"。为了避免由于忘记加这个开关造成assert失效导致错误的测试结果，建议不要使用java的assert，而使用JUnit的org.junit.Assert.assertTrue(expr)方法。 assert关键字的两种用法： assert 如果 为true，则程序继续执行。 如果为false，则抛出 java.lang.AssertionError； assert : <提示信息> （boolean表达式和提示信息之间用冒号分隔） 如果 为true，则程序继续执行。 如果为false，则抛出java.lang.AssertionError，并输出提示信息。 另外assert后面可以指定对哪些类断言生效，详见 深入解析Java的新特性assertion 。","tags":"Tech","url":"http://leetschau.github.io/java-assertguan-jian-zi-de-shi-yong-fang-fa.html","loc":"http://leetschau.github.io/java-assertguan-jian-zi-de-shi-yong-fang-fa.html"},{"title":"Use \"Resolve dependency in workspace\" feature of IvyDE to resolve project dependency in develop stage","text":"","tags":"Tech","url":"http://leetschau.github.io/use-resolve-dependency-in-workspace-feature-of-ivyde-to-resolve-project-dependency-in-develop-stage.html","loc":"http://leetschau.github.io/use-resolve-dependency-in-workspace-feature-of-ivyde-to-resolve-project-dependency-in-develop-stage.html"},{"title":"IoConnector和IoSession的关系以及上挂Filter的区别","text":"IoConnector是Mina框架下的网络接收端，当它与服务端建立连接后返回一个代表连接的IoSession，具体过程如下： IoConnector connector = new NioSocketConnector(50); ConnectFuture connFuture = connector.connect(new InetSocketAddress(ip, port)); boolean b = connFuture.awaitUninterruptibly(10000); if (b) { IoSession session = connFuture.getSession(); ... } 也就是用IoConnector的connect方法得到一个ConnectFuture，再用此ConnectFuture的getSession方法得到IoSession。 本质上Filter是与连接（也就是IoSession）相关联的，但由于下面的两个原因，导致需要在Connector上定义filter链。 首先是filter链需要在连接建立前就要定义好，这样才能实现\"一建立连接就做某事\"这种功能，在已经存在的Session（也就是连接）上挂filter显然无法达到这种效果； 其次是Connector每与服务端建立一个连接就会生成一个Session，且这些Session的行为具有很大的相似性，也就是上面的filter一般也是一样的，这样为多个session定义相同的一组filter显然是一种dirty work； 简而言之，就是Connector上挂filter链属于\"配置\"定义，而session上挂filter链属于\"运行时\"定义，当连接关闭（断开）后，这个filter链也就不存在了。 下面是二者挂filter链的具体方法。 对于Connector： DefaultIoFilterChainBuilder chain = IoConnector.getFilterChain(); chain. addLast (String name, IoFilter filter); 对于session： IoFilterChain chain = session.getFilterChain(); chain. addLast (String name, IoFilter filter);","tags":"Tech","url":"http://leetschau.github.io/ioconnectorhe-iosessionde-guan-xi-yi-ji-shang-gua-filterde-qu-bie.html","loc":"http://leetschau.github.io/ioconnectorhe-iosessionde-guan-xi-yi-ji-shang-gua-filterde-qu-bie.html"},{"title":"更新ivy资源库的自动化脚本","text":"为产品库添加一个新jar包需要下面几个步骤： 根据jar包名字，从maven库里得到依赖定义字符串； 将该字符串加上配置说明和下载脚本（参见笔记\"依赖管理常用vim脚本\"）； 将已下载条目备份文件（installed.txt）另存为old.bpk； 将build.xml中的下载条目插入到installed.txt中（按字母顺序排列）； 用新的下载脚本替换build.xml中原有的下载脚本； 运行ant命令将jar包下载到产品库中； 在ivy.xml中加入依赖条目，解析之； 以下是上面1~5步的自动化脚本。 #------------------------------------------------------------------------------- # Purpose: download jars to public repo # Author: Li Chao # Created: 28-06-2011 # # Demonstration: # install Apache Log4j 1.2 # 1. from mvnrepository.com we got the dep string: # # 2. modify dep_str in this file with above dep string: # 3. run this file, copy modified dep string: # # 4. open a shell and run ant cmd to download jars of log4j # 5. paste modified dep string to ivy.xml and resolve it #------------------------------------------------------------------------------- #!/usr/bin/env python import os, re dep_str = ' ' cmd_pattern = ' \\(\\{from.resolver\\}\" to=\"\\\\) \\{to.resolver\\}\"/>' script = 'build.xml' def conv_str(): \"\"\" covert dep_str to custom_ivy_dep string and ivy_install string; \"\"\" custom_ivy_dep = dep_str.replace('/>',' conf=\"compile->master\"/>') print 'Copy the following String:\\n%s' %custom_ivy_dep keys = re.findall(r'\"\\S+\"', dep_str) if len(keys)!=3: raise Exception('Format wrong of input string!') global ivy_install ivy_install = '<ivy:install organisation=%s module=%s revision=%s '\\ 'from=\" ${ from . resolver } \" to=\" ${ to . resolver } \"/>' %tuple(keys) def do_bpk(): \"\"\" create backup file(filename: installed.txt/old.bpk): 1 extract old install string from build . xml ; 2 delete old . bpk if it exists ; 3 rename installed . txt to old . bpk ; 4 read old . bpk file , insert old install string and create installed . txt file ; \"\"\" installed = 'installed.txt' old_bpk ='old.bpk' xml_file = open(script) global xml_str xml_str = xml_file.read() xml_file.close() old_install = re.findall(cmd_pattern, xml_str, re.M)[0] print 'old install string is:\\n%s' %old_install if os.path.exists(old_bpk): os.remove(old_bpk) if os.path.exists(installed): os.rename(installed, old_bpk) else: raise Exception('%s does not exist!'%installed) installed_file = open(old_bpk) installed_items = installed_file.read() installed_file.close() all_items = installed_items.split('\\n') all_items.append(old_install) all_items.sort() bpk_file = open(installed,'w') bpk_file.write( '\\n'.join(all_items) ) bpk_file.close() def build_script(): \"\"\" modify install script(build.xml): replace old install string with new one \"\"\" xml_file = open(script,'w') new_xml = re.sub(cmd_pattern, ivy_install, xml_str) xml_file.write(new_xml) xml_file.close() def main(): conv_str() do_bpk() build_script() if name == ' main ': main() 代码中的技术点包括： 格式化字符串的生成方法：%后面必须接一个tuple； 如何使用正则表达式进行文本的搜索（findall）和替换(sub)； 字符串的join方法进行list的组合，也可以用reduce方法： total_str = reduce(lambda x,y:x+y, str_list) 但用join方法更简洁。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/geng-xin-ivyzi-yuan-ku-de-zi-dong-hua-jiao-ben.html","loc":"http://leetschau.github.io/geng-xin-ivyzi-yuan-ku-de-zi-dong-hua-jiao-ben.html"},{"title":"数码照片按拍摄时间分文件夹保存","text":"拍摄的大量数码照片需要根据拍摄的时间分别放到不同的文件夹里，例如2011年6月27日拍摄的照片要放在名为\"2011-6-27\"的文件夹里。拍摄时间是根据文件的\"最后修改时间\"属性确定的，因为\"创建时间\"属性是会随着文件的拷贝而变化的，不能作为拍摄时间的根据。当然如果用画图或者photoshop修改了照片，那么 \"最后修改时间\"属性也不是拍摄时间了，但文件的【属性->摘要->照片拍照时间】项仍能显示出真实的拍照时间，但如何取这个属性尚不清楚，故本文不涉及。下面是源代码： ============================================== #------------------------------------------------------------------------------- # Author: Li Chao # Created: 27-06-2011 # # Purpose: 将相机SD卡上的照片按照拍摄日期放入硬盘上当前目录下的不同的文件夹中。 # # Usage: # step 1: 将本文件拷贝到目标文件夹中； # step 2: 在这个文件夹下新建一个run.bat，内容如下： # python arrangePhotos.py [photo_path] [last_backup_date] # 第1个参数是SD卡里照片所在文件夹路径，第二个参数是已备份的最后日期； # step 3: 运行run.bat # # Example: python arrangePhotos.py h:/transfer/pics 2011-06-10 #------------------------------------------------------------------------------- #!/usr/bin/env python import sys, os, time, shutil from datetime import date def main(): photos_path = sys.argv[1] last_bp = time.strptime(sys.argv[2], \"%Y.%m.%d\") last_bp_epoch = time. mktime (last_bp) for item in os.listdir(photos_path): modif_time = os.path. getmtime (os.path.join(photos_path,item)) if modif_time - last_bp_epoch <= 3600*24 : continue cre_date_obj = date.fromtimestamp(modif_time) cre_date = cre_date_obj.strftime(\"%Y.%m.%d\") if not os.path.exists(cre_date): os . mkdir ( cre_date ) print '\\n%s' % cre_date shutil.copy2(os.path.join(photos_path,item), cre_date) print '.' , if name == ' main ': main() ============================================================== 对源代码的解释： 时区问题： 由于time.mktime()方法和os.path.getmtime()都是以1970-1-1 08:00:00为起点，因此将这些时间数转换为日期、时间时，一定要用time.localtime()方法，如果用time.gmtime()，则会得到错误的值，下面这段代码演示了两种方法的区别： import time gm_sec = time.gmtime(0) print gm_sec gm = time.strftime('%Y-%m-%d, %X', gm_sec) print 'UTC start point is %s' %gm lc_sec = time.localtime(0) print lc_sec lc = time.strftime('%Y-%m-%d, %X', lc_sec) print 'local time start point is %s' %lc second_day = time.mktime(time.strptime('1970-1-2', \"%Y-%m-%d\")) print 'second day is %s hours after first day' %(second_day/3600) 输出为： time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0) UTC start point is 1970-01-01, 00:00:00 time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0) local time start point is 1970-01-01, 08:00:00 second day is 16.0 hours after first day 加粗的部分表明东8区的时间起点是1970-1-1 08:00:00。 为什么修改时间要比最后一次备份时间多一天（即24小时，3600*24秒）？ 例如最后一次备份时间是2011年6月27日，last_bp_epoch的值对应于27日0点0分，当处理一张2011年6月27日晚11点拍摄的照片时，modif_time - last_bp_epoch = 23 hour，这张照片已经备份过了，不应该再次备份，因此modif_time - last_bp_epoch > 24hour时才需要备份； 怎样让print语句的输出不换行？ 在字符串后面加逗号即可。","tags":"Tech","url":"http://leetschau.github.io/shu-ma-zhao-pian-an-pai-she-shi-jian-fen-wen-jian-jia-bao-cun.html","loc":"http://leetschau.github.io/shu-ma-zhao-pian-an-pai-she-shi-jian-fen-wen-jian-jia-bao-cun.html"},{"title":"语音朗读软件使用小记","text":"最先下的是\"方正畅听2008\"，但装上之后发现根本不能正常朗读，发出来的声音伴有巨大的杂音，完全听不清。 后来使用了小众软件推荐的\"随读\"，语音引擎选用了Neospeech的中文-Liang，输出设为\"16kHz 16Bit Stereo\"。没有导出为MP3功能（通过插件可以导出MP3），只能朗读txt文件。 再后来又试用了免费的eSpeak，以及NextUp出品的TextAloud，综合比较TextAloud是最优秀的，其中的批量转换MP3功能尤其值得称道。 语音引擎方面，通过使用发现，中文的Lily（女声）和Liang（男声）效果最好，Wang（男声）和Hui（女声）效果一般，英文的Bridget和Julie似乎都不错。 另：[NeoSpeech.TTS][女声].NeoSpeech.Chinese.Lily.zip安装后的破解方法如下（不破解的话会在每次朗读前加一小段说明）： 打开安装目录C:\\Program Files\\VW\\VT\\Lily\\M16-SAPI5\\data-common\\verify下新建一个文本文件：verification.txt，写入： License:effacee1e9a0c118ca2dd64bdf6a66c3cc3d82fbee5a11f7002cb600ec1900e8de006e8f00152800adc100f14a0115d5:*:VoiceText:0:1:Nextup:WindowsNT2KXP::; --- Label Print --- CODE: VoiceText-02FF-278E-8AE6 Site name: Nextup Host ID: * Expiration Date: unlimited Maximum Channel: 1 Operating System: WindowsNT2KXP 保存后重新启动朗读软件即可，无需重启系统。","tags":"Tech","url":"http://leetschau.github.io/yu-yin-lang-du-ruan-jian-shi-yong-xiao-ji.html","loc":"http://leetschau.github.io/yu-yin-lang-du-ruan-jian-shi-yong-xiao-ji.html"},{"title":"Notepad++手工配色","text":"Notepad++的手工配色相对比较智能，对于其内置的语言，在【设置->语言格式设置】中进行，【选择主题】中可以选择不同的配色主题，确定主题后，在【语言】中选择要修改的语言，在【格式名称】中选择修改那种元素，然后修改颜色和字体；对于非内置语言，则需要使用其内置的\"User Defined Languages\"对话框；对于一种新语言，首先从网上下载其语法高亮模板，然后再根据自己的要求使用这个对话框修改，直到满意为止。具体来说： 下载语法高亮文件（xml文件），如果notepad++当前文件夹下没有 userDefineLang.xml 这个文件，将下载的文件放在此文件夹（与notepad++.exe同目录）下，并命名为userDefineLang.xml，如果已经有这个文件，则把下载内容追加到 userDefineLang.xml 末尾； 启动Notepad++，【视图->自定义语言对话框】打开\"User Defined Languages\"对话框，在【自定义语言】下应该有刚才添加的语言； 如果没有，用【Import】按钮导入下载的XML文件； 对不满意的配色和内容进行修改，然后用【Export】导出，以备将来再次导入； 修改的方法参见帮助文档的\"User Defined Languages\"一节，简单地说，能够定制的特性有：普通文本的前/背景色，关键字集合的内容和前/背景色，代码折叠的开始、结束标志，注释的样式和颜色，数字的颜色，运算符的内容和颜色，以上所有内容的字体、字号，转义符号的定义（避免\"aa\\\"bb\"被解析成一对半字符串）等；","tags":"Tech","url":"http://leetschau.github.io/notepadshou-gong-pei-se.html","loc":"http://leetschau.github.io/notepadshou-gong-pei-se.html"},{"title":"关于段落格式重排","text":"段落重排是指：指定左边界（left margin）和右边界（right margin），所有文本都从左边界开始，到右边界结束（换行），超出的插入换行符（折行），不足的删除换行符补足，在此基础上，还可以指定对齐方式（左对齐、右对齐、居中、填充），以及悬挂缩进（hanging indent）值，也就是从第二行开始的左边界，从而实现更为精细的段落格式控制。 在Ultraedit中，要做段落重排，首先要在【格式->段落格式化->段落设置/格式化】对话框中设定前述参数，然后选中要重排的文本，用【格式->段落格式重排】就可以实现重排。下面是实例演示（使用等宽字体才能保证右对齐的效果）： 原始文本： The idea of supersymmetry was the key to the creation of supergravity, but the concept had actually originated years earlier with theorists 重排后： 左边界0，右边界40： The idea of supersymmetry was the key to the creation of supergravity, but the concept had actually originated years earlier with theorists 左边界4，右边界45： The idea of supersymmetry was the key to the creation of supergravity, but the concept had actually originated years earlier with theorists 左边界4，右边界45，悬挂缩进2： The idea of supersymmetry was the key to the creation of supergravity, but the concept had actually originated years earlier with theorists 左边界0，右边界45，右对齐： The idea of supersymmetry was the key to the creation of supergravity, but the concept had actually originated years earlier with theorists Notepad++的 TextFX插件也有重排功能（TestFX->TextFX Edit->ReWrap），但只能指定右边界，重排功能与UE相比偏弱。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-duan-luo-ge-shi-zhong-pai.html","loc":"http://leetschau.github.io/guan-yu-duan-luo-ge-shi-zhong-pai.html"},{"title":"删除源代码文件里的注释和空行","text":"有时需要对大量的源代码文件做删除空行和注释的操作，手工处理效率会很低，可以用cloc工具（ http://cloc.sourceforge.net ）来完成。 例如要处理d:\\godu21\\GODU_Server\\GODU_V2.1\\src\\下所有的源代码文件，将去掉空行和注释的新文件放在f:\\Software\\cloc-1.53下： 第一步：将cloc.exe文件拷贝到f:\\Software\\cloc-1.53下； 第二步：在f:\\Software\\cloc-1.53下启动命令行，并运行：cloc --strip-comments=nj d:\\godu21\\GODU_Server\\GODU_V2.1\\src 命令格式为：cloc [options] src_path，cloc将处理后的文件放在当前目录下。命令中\"--strip-comments=\"后面是新文件的扩展名，例如原文件是ConnectKeyFilter.java，则处理后的对应文件为f:\\Software\\cloc-1.53\\ConnectKeyFilter.java.nj。","tags":"Tech","url":"http://leetschau.github.io/shan-chu-yuan-dai-ma-wen-jian-li-de-zhu-shi-he-kong-xing.html","loc":"http://leetschau.github.io/shan-chu-yuan-dai-ma-wen-jian-li-de-zhu-shi-he-kong-xing.html"},{"title":"Java和Groovy脚本互相调用实例","text":"本实例是GODU动态脚本的一个技术简化版，演示了java调groovy， groovy又调java的运行过程。 测试用例： package com . boco . godu . integration ; import java.util.HashMap ; import java.util.Map ; import org.apache.log4j.Logger ; import org.junit.After ; import org.junit.AfterClass ; import org.junit.Before ; import org.junit.BeforeClass ; import org.junit.Test ; import com.boco.godu.gapi.ConnManager ; import com.boco.godu.gapi.Constants ; import com.boco.godu.gapi.IConnection ; import com.boco.godu.gapi.IResult ; public class SimpleExpScriptTest { private static final Logger logger = Logger . getLogger ( SimpleExpScriptTest . class ); private IConnection conn ; @Before public void setUp () throws Exception { conn = ConnManager . getDataConn ( \"10.0.2.47\" , 1234 , \"< aa ><7001><administrator><autocmd>\" , \"goduapp\" , Constants . TYPE_DATA_CMD_SYNC , 5 ); } @After public void tearDown () throws Exception { conn . close (); } @Test public void testImport () throws Exception { Map < String , String > params = new HashMap < String , String > (); params . put ( \"cmd1\" , \"ls\" ); params . put ( \"id\" , 3 ); IResult result = conn . execScript ( \"ImportEx\" , params ); } } Java代码：IConnection.java package com . boco . godu . gapi ; public interface IConnection { ...... // other method definition public IResult execScript ( String name , Map < String , Object > params ) throws Exception ; } GoduDataConnection.java package com . boco . godu . gapi . conn ; public class GoduDataConnection extends AbstractConnection { ...... // Other IConnection Methods public IResult execScript ( String name , Map < String , Object > params ) throws Exception { String [] roots = new String [] { \" e:/MyDoc/Project/GoduScript \" } ; GroovyScriptEngine gse = new GroovyScriptEngine ( roots ) ; Binding binding = new Binding () ; for ( Entry < String , Object > item : params . entrySet ()) { binding . setVariable ( item . getKey () , item . getValue ()) ; } GapiIosessionUtils giu = new GapiIosessionUtils () ; binding . setVariable ( \" giu \" , giu ) ; gse . run ( name , binding ) ; System . out . println ( binding . getVariable ( \" result \" )) ; // 运行结果是这里输出\"11\"，即3*2+5。 return null ; } } GapiIosessionUtils.java package com . boco . godu . gapi . util ; public class GapiIosessionUtils { ...... // other method public int testM ( int x , int y ) { return x * 2 + y ; } } groovy代码：e:\\MyDoc\\Project\\GoduScript\\ImportEx def send ( cmd ) { def result = giu . testM ( cmd , 5 ) ; return result ; } result = send ( id ) 运行过程： 测试用例 -> GoduDataConnection.java -> groovy代码 -> GapiIosessionUtils.java； 总结 binding的setVariable中定义的变量， 如giu是com.boco.godu.gapi.util.GapiIosessionUtils对象，id是int型数据， 在groovy脚本里直接使用，可以出现在脚本的任何地方， 且无需声明类型，无需使用import导入定义该变量的类， 例如对于giu来说，如果在java代码中，需要 import com.boco.godu.gapi.util.GapiIosessionUtils 。","tags":"Tech","url":"http://leetschau.github.io/javahe-groovyjiao-ben-hu-xiang-diao-yong-shi-li.html","loc":"http://leetschau.github.io/javahe-groovyjiao-ben-hu-xiang-diao-yong-shi-li.html"},{"title":"srt文件的时间轴平移处理","text":"有时srt字幕文件与视频文件的时间不完全吻合，有一个时间差，这就需要对srt文件的时间轴进行平移，具备这个功能的软件很多，比如：Subtitle Tool, subresync, sabbu, Sub Station Alpha等；但最方便的还是在线处理，下面这两个网站都是专门做字幕文件的时间轴处理的： http://subshifter.bitsnbites.eu/ http://subtitle.ss-birthdayreminder.com/","tags":"Tech","url":"http://leetschau.github.io/srtwen-jian-de-shi-jian-zhou-ping-yi-chu-li.html","loc":"http://leetschau.github.io/srtwen-jian-de-shi-jian-zhou-ping-yi-chu-li.html"},{"title":"terracotta启动命令说明","text":"terracotta的启动命令是： nohup $TC_INSTALL_DIR/bin/start- tc -server.sh 1>/ dev /null 2>/ dev /null & nohup是后台运行程序（即使终端退出也继续运行程序）； $TC_INSTALL_DIR/bin/start-tc-server.sh 是要运行的程序； Unix的标准输入（STDIN）、标准输出（STDOUT）、标准错误（STDERR）分别用数字0、1和2表示，\">\"是重定向符，\"/dev/null\"类似于windows的回收站，只不过进去的信息就出不来了（被称为字节黑洞），所以连起来就是： 在后台运行terracotta程序，屏蔽标准输出和标准错误，即使用户退出也继续运行。 参考： nohup的含义 What does \"> /dev/null 2>&1″ mean? 1>/dev/null 2>/dev/null 跟在命令行后面，什么目的？","tags":"Tech","url":"http://leetschau.github.io/terracottaqi-dong-ming-ling-shuo-ming.html","loc":"http://leetschau.github.io/terracottaqi-dong-ming-ling-shuo-ming.html"},{"title":"javadoc动作中排除某些类","text":"设计产品的类结构时，有些类的作用是与产品的其他部分交互，因此必须是public类型的，但又不希望暴露给用户，因此打产品包的javadoc时，这些类是不生成javadoc的。假设某个包里共有10个接口，其中有一个是不生成javadoc的，写出另外9个接口名显然是很dirty的方法，比较好的方法是定义一个exclude，例如： <javadoc sourcepath= \" ${ src . dir } \" destdir= \" ${ build . javadoc . dir } \" encoding = \"GBK\" docencoding = \"GBK\" packagenames = \"com.boco.godu.gapi.exception\" > < sourcefiles > < fileset dir= \" ${ src . dir } /com/boco/godu/gapi\" > <include name= \"*.java\"/ > < exclude name= \"IConnPool.java\"/ > </fileset> </ sourcefiles > </javadoc> 上面的例子表明，对于整个包（package）统一生成javadoc的，采用的内嵌的packagenames定义（可以用逗号隔开多个包名），对于需要exclude的包，用 + 定义，可以非常方便的使用exclude功能。","tags":"Tech","url":"http://leetschau.github.io/javadocdong-zuo-zhong-pai-chu-mou-xie-lei.html","loc":"http://leetschau.github.io/javadocdong-zuo-zhong-pai-chu-mou-xie-lei.html"},{"title":"Job Control of Unix","text":"主要参考书籍：Unix For Dummies: Chapter 13: Job Control. 一个Job有前台（foreground）和后台（background）两种运行方式； 前后程序的转换： 直接（启动时）作为后台程序运行：当一个命令后面加上\" &\"时（&前有一个空格），就进入了后台运行模式； 中途前台=>后台：一个正在前台运行的命令用快捷键 Ctrl+Z 将其挂起（不消耗CPU时间），然后用 bg 命令使其进入后台运行状态； 后台=>前台：所有后台运行的job可以用 jobs 命令列出，其中带+号的是当前job，其余是非当前job。用 fg %n 的方法将一个后台job转换到前台，其中n是jobs命令中给出的序号； 如果需要终止某个job，先用 jobs 列出，然后用 kill %n 的方法停止； 后台程序需要用户输入时，将进入停止状态；当用户使用 stty tostop 命令打开免输出打扰时，后台程序的要输出时将进入停止状态；","tags":"Tech","url":"http://leetschau.github.io/job-control-of-unix.html","loc":"http://leetschau.github.io/job-control-of-unix.html"},{"title":"如何获得Java文件的当前目录","text":"测试用例所在工程目录为： D:/workspace/EasyMockDemo ，要获得当前类所在路径： package org . leechau . groovyEmbedded ; import org.junit.Test ; public class HelloWorld { @Test public void HelloTest () throws Exception { String path = this . getClass () . getResource ( \"\" ) . getPath (); System . out . println ( path ); } } 输出： /D:/workspace/EasyMockDemo/bin/org/leechau/groovyEmbedded/ 如果将 getResource(\"\")改为getResource(\"/\")，则输出为： /D:/workspace/EasyMockDemo/bin/ 如果希望获得项目目录，则用 System.out.println(System.getProperty(\"user.dir\")); 输出为： D:\\workspace\\EasyMockDemo .","tags":"Tech","url":"http://leetschau.github.io/ru-he-huo-de-javawen-jian-de-dang-qian-mu-lu.html","loc":"http://leetschau.github.io/ru-he-huo-de-javawen-jian-de-dang-qian-mu-lu.html"},{"title":"Groovy文件与类的关系","text":"Python中，文件是一个模块，可以包含多个类、函数或者普通语句，但Groovy采用了与Java一样的机制，即一个文件对应一个类， 具体的实现机制如下：（主要参考了 Groovy in Action : page:190） 在Groovy中类和文件的对应关系并不像Java中那么固定(Java中一个文件只能有一个声明为public的类和其他一些非公共的类和内嵌类) 。在同一个groovy文件中可以包含多个public的类定义。具体规则如下： 纯脚本：如果在一个groovy文件中没有任何类定义，它将被当做script来处理，也就意味着这个文件将被透明的转换为一个Script类型的类，这个类的类名是脚本的文件名（不含扩展名和包名，在default包中）。groovy文件的内容被打包进run方法，另外在新产生的类中被加入一个main方法使外部代码可以执行该脚本； 纯类（类名是文件名）：如果在groovy文件正好有一个类的定义，并且该类的名字与文件名称相同，那么这就和java中的类与文件的一一对应关系相同。在一个groovy文件中可以包含多个不同可见性的类定义，并且没有强制性的要求其中有一个类的类名与文件名相同。groovyc编译器会很乐于把该文件中定义的所有的类都编译成*.class文件。如果你希望能够直接调用这个groovy script，比如说在使用groovy命令行或者在某个IDE中执行，那么你应该在该文件中的第一个类中定义一个main方法； 脚本/类混合：在一个groovy文件中可以混合类的定义和脚本定义。在这种情况下，那些脚本代码将会放入默认存在的主类（文件名类）的run方法，所以在这种情况下你不应该再定义一个和文件同名的类，否则会出现\"类重复定义\"错误。反过来说，如果显式地定义了主类，则主类之外，除了定义其他类，不能有任何其他脚本代码（包括语句和函数）；","tags":"Tech","url":"http://leetschau.github.io/groovywen-jian-yu-lei-de-guan-xi.html","loc":"http://leetschau.github.io/groovywen-jian-yu-lei-de-guan-xi.html"},{"title":"如何做Groovy单元测试","text":"Groovy的单元测试可以通过两种方法进行，一是用JUnit框架， 二是用Groovy自己的TestSuite测试。JUnit测试代码是Java代码， GroovyTestSuite的测试代码是groovy代码，且只能一次运行测试类中所有的TestCase， 灵活性较JUnit方法稍差。下面是一个实例： 被测试类Song.groovy： package org.leechau.ut; class Song { def name def artist def genre String toString(){ \" ${ name } , ${ artist } , ${ genre } \" } def getGenre(){ genre?.toUpperCase() } } class Song2 { def name2 def ex(){ println name2 } } JUnit测试文件SongTest.java： package org . leechau . ut ; import org.junit.Assert ; import org.junit.Test ; public class SongTest { @Test public void testToString () { Song sng = new Song (); sng . setArtist ( \"Lee\" ); Assert . assertEquals ( \"Lee\" , sng . getArtist ()); } } Groovy测试文件TestSong2.groovy： package org . leechau . ut2 ; import groovy.util.GroovyTestCase import org.leechau.ut.Song import org.leechau.ut.Song2 class SongTest2 extends GroovyTestCase { void testGetGenre () { def sng = new Song () sng . setGenre \"Pop\" assertEquals ( sng . getGenre (), \"POP\" ) } void testSong2 (){ def sng2 = new Song2 () sng2 . setName2 \"Song2\" assertEquals ( sng2 . getName2 (), \"Song2\" ) } } 且需要进行运行设置： 在Java Application中新建一个run configuration； Main标签下的Main Class写：groovy.util.GroovyTestSuite，且勾选\"Include System Libraries when searching for a main class\"； Arguments标签下program arguments下写上测试脚本的相对路径，如：src\\org\\leechau\\ut2\\SongTest2.groovy； 运行该配置； 结果如下：","tags":"Tech","url":"http://leetschau.github.io/ru-he-zuo-groovydan-yuan-ce-shi.html","loc":"http://leetschau.github.io/ru-he-zuo-groovydan-yuan-ce-shi.html"},{"title":"在48服务器上安装并使用PyScripter编辑的方法","text":"类似于BVT这样的脚本一般都运行在服务器上，在本机调试好再移动到服务器上比较麻烦，理想方法是在服务器上直接调试python源代码，这就需要有IDE支持，下面说明了在48服务器上使用绿色版PyScripter的完整过程。 以用户名 ser2 登录48服务器（地址：10.0.2.48）； 将PyScripter_confs_on48.zip解压到C:\\Documents and Settings\\ serv2 \\Application Data下，即PyScripter.ini的绝对路径为： C:\\Documents and Settings\\serv2\\Application Data\\PyScripter\\PyScripter.ini 解压PyScripter-v2.4.1.zip到任意位置，运行其中的PyScripter.exe启动PyScripter； 从SVN上下载源代码； ================================= 注1：第2步的目的是将PyScripter常用的设置（如字号大小，背景颜色，快捷键等）一次性设置好，这些设置都保存在前述的 \" C:\\Documents and Settings\\serv2\\Application Data\\PyScripter\\PyScripter.ini \"文件中。 注2：第1步中的登录用户名要与第2步中的路径名一致（这里都是serv2），否则当前用户没有其他用户目录的写权限，不可能解压文件；","tags":"Tech","url":"http://leetschau.github.io/zai-48fu-wu-qi-shang-an-zhuang-bing-shi-yong-pyscripterbian-ji-de-fang-fa.html","loc":"http://leetschau.github.io/zai-48fu-wu-qi-shang-an-zhuang-bing-shi-yong-pyscripterbian-ji-de-fang-fa.html"},{"title":"Ivy可以在ant中直接使用的变量","text":"在 ant 文件中使用 进行解析后，可以使用如下变量： ivy.organisation ivy.module ivy.revision ivy.resolved.configurations 例如如下代码： \\({junit.test.result}\"/> <javac srcdir= \"\\) {test.src.dir}\" destdir= \" \\({test.class.dir}\" encoding= \"GBK\" > <classpath> <pathelement location= \"\\) {build.dist.dir}/ \\({ ivy.module }-\\) { ivy.revision }.jar\" /> 需要注意的是由于这些变量仅在 后才生成，因此不要用 将它们的赋给一个变量，因为所有的变量赋值都是在任务（target）之前进行的（不论赋值的位置是否在包含 的target之后），因此变量肯定是得不到上述变量的值的。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ivyke-yi-zai-antzhong-zhi-jie-shi-yong-de-bian-liang.html","loc":"http://leetschau.github.io/ivyke-yi-zai-antzhong-zhi-jie-shi-yong-de-bian-liang.html"},{"title":"射手网字幕编码修改笔记","text":"用射手播放器自动下载的视频用文本编辑器打开后经常是乱码，实验后发现主要是由于这些文件使用Big5编码格式，用Notepad2就可以进行编码转换，但Notepad2没有中文繁简体转换的功能，用Word进行转换是一种比较完整的解决方案，下面是详细操作过程： 用Word打开这个srt文件，Word会自动侦测其编码格式； 打开文件后，选中所有文本后用【审阅->繁转简】转为简体并保存：在【是否保存为这种格式】对话框里选\"否\"，然后在保存对话框中将【保存类型】选为【纯文本(*.txt)】，文件名框中将扩展名改为srt，在随后出现的编码对话框里【文本编码】选【其他编码】，在编码列表里选【Unicode (UTF-8)】，确定即可。","tags":"Tech","url":"http://leetschau.github.io/she-shou-wang-zi-mu-bian-ma-xiu-gai-bi-ji.html","loc":"http://leetschau.github.io/she-shou-wang-zi-mu-bian-ma-xiu-gai-bi-ji.html"},{"title":"CD管理和检索软件比较","text":"之前一直用EverCD+，考虑到鸡蛋不能放在一个篮子里，又找了几款功能类似的进行了比较，主要考察一下几个功能： 多个镜像：一个数据文件可以包含多个目录的镜像，便于数据管理和搜索； 目录更新：目录内容发生变化后，更新其在管理软件中的镜像（对于一次性写光盘不存在更新问题）； 多种搜索类型：除了按名称搜索，还能按大小、日期等搜索； 导出、导入为通用数据文件：如csv、xml文件等； 备选软件 WhereIsIt：商业软件，暂未找到破解版； VVV (Virtual Volumes View)：开源软件（C++写成），无需安装，支持多个镜像，支持更新和搜索，不能导入，能够导出为CSV文件；有源代码下载，体积小巧（Windows压缩包4MB，源代码2MB）； Visual CD：免费软件，需安装， 间接支持多个镜像（ 一个vcc文件只能对应一个目录镜像，但可以在多个vcc文件内搜索 ）， 支持更新和搜索，不能导入csv和xml，导出功能强（能够导出为html、txt、rtf和txt格式）； Offline CD Browser：免费软件，数据文件放在了默认的安装文件内，安全性差，界面老土，支持更新和搜索，多种搜索类型，无导入和导出功能； Blue Mirror DVD/CD Indexer：安装过程需要联网，间接支持多个镜像（一个数据文件只包含一个镜像，但可以用\"Merge with File\"合并多个数据文件），似乎没有更新功能和搜索功能，可以导出为CSV文件； EverCD+：支持导出为xml文件； GCstar：安装文件很大，似乎是一个个人文档管理软件，严格来说不属于光盘管理软件； 总结 VVV无需安装，体积小，功能完善，开源，是EverCD+比较好的替代品； 这类软件都没有从csv、xml文件导入的功能，所以目前的EverCD+数据文件可能无法导入到其他软件中。","tags":"Tech","url":"http://leetschau.github.io/cdguan-li-he-jian-suo-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/cdguan-li-he-jian-suo-ruan-jian-bi-jiao.html"},{"title":"Haskell Notes","text":"Update in Nov 2018: Install Haskell Platform with sudo apt install haskell-platform , which include ghc, cabal, and stack. Or only install ghc, cabal and hoogle with sudo apt install ghc cabal-install hoogle . Verified on Ubuntu 16.04 Server. Written in 2011: On Linux Installation sudo apt - get install aptitude sudo aptitude install haskell - platform verified on Linux Mint 14 Xfce. Install hoogle (offline documentation of Haskell): cabal update cabal install alex happy && cabal install hoogle Ref: http://stackoverflow.com/questions/11753979/cabal-install-hoogle-error Very slow, you can use the online version ; modify ~/.cabal/conifg: remote - repo : old . hackage . haskell . org : http : // old . hackage . haskell . org Ref: http://hackage.haskell.org/ http://www.haskell.org/haskellwiki/Hoogle $ cabal update $ cabal install hoogle $ ~/.cabal/bin/hoogle data # create database $ ~/.cabal/bin/hoogle map # search \"map\" Save the following lines to ~/.ghci to enable you use \":hoogle\" or \":doc\" to get doc info in ghci: :def hoogle \\ x -> return $ \" :!hoogle \\ \"\" ++ x ++ \" \\ \"\" :def doc \\ x -> return $ \" :!hoogle --info \\ \"\" ++ x ++ \" \\ \"\" Sample Project Based on http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program; create home folder: take haq ; create source file \"Haq.hs\"; stick it in version control: git init git add Haq . hs git commit - m \"add first source\" add a build system: cabal init ; modify .cabal file: add \"Haq.hs\" after \"-- main-is:\" and uncomment this line(delete \"--\"); If you donot specify the license type, comment out the line \"license-file\"; cabal update cabal install --prefix= --user run app: bin/haq me under , or run app in-place (under current directory): dist/build/haq/haq me verified on Haskell Platform 7.4.2, Linux Mint 14: $ ghc --version The Glorious Glasgow Haskell Compilation System, version 7.4.2 Miscellaneous ghc: compiler ghci: interactive shell; runghc: run haskell script without compile Compile haskell source file to executable: $ ghc --make <FileName>.hs -o <ExeFileName> for example: $ ghc --make Test.hs -o test GHCi usage get current working directory: :!pwd (you can use :! to run any shell command); turn on/off type declaration: :set +t, :unset +t get type information of a object: :t define local variable and show bindings: let x = 3 , :show bindings load module: :m +Data.Ratio change cwd: :cd load file: :l quit ghci shell: :q get function doc: :i Syntax comments: -- comparison: /=, >, < boolean operation: not, || , && Haskell requires type names to start with an uppercase letter, and variable names must start with a lowercase letter. To construct a rational number: 11 % 29 (after \":m +Data.Ratio\") values in \"where\", \"case\" and \"let\" clause must keep the SAME indentions; Shell Interaction Library shqq, shelly Ref: Shelly: Write your shell scripts in Haskell On Windows Use sublime text 2 as text editor, use cmder as console. In Sublime Text 2 main menu: [Preferences -> Settings -- User], remove \"Vintage\" from \"ignored_packages\" to enable Vintage. Use intero as haskell plugin for vim When open a .hs file in neovim aftering installed the plugin parsonsmatt/intero-neovim , the intero compiling failed: ... Logs have been written to : / home / leo / . stack / global - project / . stack - work / logs / haskeline - 0 . 7 . 4 . 3 . log $ cat / home / leo / . stack / global - project / . stack - work / logs / haskeline - 0 . 7 . 4 . 3 . log / usr / bin / ld . gold : error : cannot find - ltinfo collect2 : error : ld returned 1 exit status $ / usr / bin / ld . gold - ltinfo -- verbose Attempt to open // lib / x86_64 - linux - gnu / libtinfo . so failed Google libtinfo.so ubuntu , find libtinfo-dev : $ sudo apt install libtinfo-dev libtinfo-dev : Depends: libtinfo5 (= 6 .0+20151024-2ubuntu1 ) but 6 .0+20160213-1ubuntu1 is to be installed","tags":"Tech","url":"http://leetschau.github.io/haskell-notes.html","loc":"http://leetschau.github.io/haskell-notes.html"},{"title":"视频分割、合并软件比较","text":"特点 支持格式：是否同时支持AVI、MPG、RM、RMVB、WMV等视频格式的分割； 输入时间：直接输入时间，而不是用游标拖动； 多段剪辑：是否支持从一个文件中设置多个片段，一次性剪辑出来； 快速分割：是否能够在不重新编码的情况下分割视频； Boilsoft Video Cutter 不能分割rmvb，有时会出现不能预览视频的情况，支持输入时间（操作比较麻烦），支持多段剪辑，支持快速分割； Boilsoft.Video.Splitter 所有分割均失败； Ultra Video Splitter 支持所有格式，支持输入时间，不支持多段剪辑，支持快速分割； SolveigMM Video Splitter 支持AVI和WMV以及多种音频格式，支持输入时间，多段剪辑，快速分割，支持批处理操作，能够对进度条进行缩放，有视频（仅AVI、WMV、ASF）和音频合并功能，分割质量好，快捷键支持好； 结论：当分割AVI、WMV、ASF格式文件时用SolveigMM Video Splitter，分割RM格式文件时用Ultra Video Splitter。","tags":"Tech","url":"http://leetschau.github.io/shi-pin-fen-ge-he-bing-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/shi-pin-fen-ge-he-bing-ruan-jian-bi-jiao.html"},{"title":"删除过期的文件夹","text":"BVT将每天检出并运行单元测试的源代码放入一个以日期命名的文件夹中，每个文件夹都很大，因此需要及时清除比较老的文件夹以节约磁盘空间，例如今天是5月11日，bvt运行目录e:\\bvt_build下有如下文件夹和文件： 2011-04-18\\ 2011-04-19\\ 2011-04-22\\ 2011-04-25\\ 2011-04-27\\ 2011-05-10\\ 2011-05-09\\ 2011-05-08\\ backup\\ note.txt 现在的要求是仅保留今天、昨天和前天共3天的文件夹，其余文件夹删除（文件都保留），技术关键有两点：一是怎样将字符串形式的日期转换为可以用来做减法的date对象，以便判断与今天的间隔，这里采用的方法是：先将字符串转换为一个datetime对象，然后转换为一个timestamp（实数），再将timestamp转换为date对象；二是怎样将时间间隔（timedelta）对象转换为整型数以便进行比较，这里用的方法是得到timedelta对象后取其days属性。代码如下： import os,shutil,time from datetime import datetime, timedelta, date today = date.today() sub_items = os.listdir('e:/bvt_build') for item in sub_items: try: timeFloat = time.mktime(time.strptime(item, \"%Y-%m-%d\")) the_day = date.fromtimestamp(timeFloat) time_span = (today - the_day).days if time_span > 2: shutil . rmtree ( os . path . join ( 'e:/bvt_build' , item )) except: continue 运行后的结果如下： 2011-05-09\\ 2011-05-10\\ backup\\ note.txt","tags":"Tech","url":"http://leetschau.github.io/shan-chu-guo-qi-de-wen-jian-jia.html","loc":"http://leetschau.github.io/shan-chu-guo-qi-de-wen-jian-jia.html"},{"title":"bvt脚本运行环境设置","text":"tools目录：来自svn； log目录以及下面的bvt.log文件：自动生成；","tags":"Tech","url":"http://leetschau.github.io/bvtjiao-ben-yun-xing-huan-jing-she-zhi.html","loc":"http://leetschau.github.io/bvtjiao-ben-yun-xing-huan-jing-she-zhi.html"},{"title":"Python的目录文件拷贝","text":"Python中进行目录（包括其中所有的文件和子目录）的拷贝时，如果使用shutil 模块，有两个方法，分别是copy()和copytree()方法，copy只能拷贝单个文件，copytree虽然可以拷贝整个目录，但要求目标目录必须不存在。当需要把多个源目录中的文件、子目录拷贝到一个目标目录下时，不能用这个方法，解决的方法是使用distutils.dir_util 模块的copy_tree方法。示例代码如下： from distutils.dir_util import copy_tree copy_tree('e:\\GODU_SERVER_2.2\\bin', 'e:\\bvt_build\\2011-05-10\\GODU_SERVER_2.2\\bin') copy_tree('e:\\GODU_SERVER_2.2\\conf', 'e:\\bvt_build\\2011-05-10\\GODU_SERVER_2.2\\conf') 详见用户手册。","tags":"Tech","url":"http://leetschau.github.io/pythonde-mu-lu-wen-jian-kao-bei.html","loc":"http://leetschau.github.io/pythonde-mu-lu-wen-jian-kao-bei.html"},{"title":"Python的变量共享问题","text":"模块中的多个类之间经常要共享某一变量，比如生成BVT报告的JUnit适配器类实例需要根据Cobertura适配器类实例的计算出来的有效行数计算千行代码测试用例数，又比如适配器类在备份BVT报告时需要知道报告备份的地址，而这个地址是保存在BVT类中的。 以上场景都需要解决变量在类实例间的传递问题，办法有4个：使用模块级的全局变量、使用类的静态成员变量、使用环境变量、定义为global。 模块级全局变量适用于此变量在模块内共享的情况，优点是简单易懂，在模块开始部分定义一个空字典，条目的key是该条目的功能说明； 类静态成员适用于该变量是类的普遍特性的情况，用 self. class .var_name 的方法定义，用 ClassName.var_name 的方法获取。 环境变量和global变量适用于在模块间共享变量的情况，但对数据的封装性比较差，尽量不要使用。","tags":"Tech","url":"http://leetschau.github.io/pythonde-bian-liang-gong-xiang-wen-ti.html","loc":"http://leetschau.github.io/pythonde-bian-liang-gong-xiang-wen-ti.html"},{"title":"Gnucash的投资记录","text":"投资活动主要涉及3个账户：资产（Asset）下的子账户记录投资金额，收入（Income）下的子账户记录投资收入，支出（Expense）下的子账户记录投资费用支出（例如银行手续费，证券交易费等）。 以购买A银行的货币基金为例，4月2日用储蓄账户B买入2000元基金，在【资产->投资】下建立子账户【A银行货币基金】，从 B 账户transfer 2000元到 【A银行货币基金】账户，（待续） 总结： 买入：资产->储蓄账户 transfer to 资产->投资账户； 收入：收入->投资收入 transfer to 资产-> 投资账户； 卖出： 资产-> 投资账户 transfer to 资产->储蓄账户； 参见：Gnucash手册->Chapter 8. Investments->Interest Bearing Accounts->Account Setup.","tags":"Tech","url":"http://leetschau.github.io/gnucashde-tou-zi-ji-lu.html","loc":"http://leetschau.github.io/gnucashde-tou-zi-ji-lu.html"},{"title":"在测试中使用对象持久化","text":"对象的保存： import shelve testdb = shelve.open('e:\\bvtdb') testdb['bvt'] = bvt testdb.close() 提取对象： import shelve db = shelve.open('e:\\bvtdb') bvt = db['bvt'] builder = ReportBuilder(bvt)","tags":"Tech","url":"http://leetschau.github.io/zai-ce-shi-zhong-shi-yong-dui-xiang-chi-jiu-hua.html","loc":"http://leetschau.github.io/zai-ce-shi-zhong-shi-yong-dui-xiang-chi-jiu-hua.html"},{"title":"用map实现两个list的元素对位运算","text":"例如[1,2]与[11,25]的对位相加得到[12,27]，对位相减得[-10, -23]，对位相乘得[11,50]等。 最简单的例子： aa = [3,50] bb = [16,7] aa = map(lambda x,y: x+y, aa,bb) print aa #output: [19, 57] 累积运算的例子： acc = [0,0,0,0] for i in range(3): inc = [i 3,i+5] 2 acc = map(lambda x,y: x + y, acc, inc) print acc #output: [9, 18, 9, 18] acc = [0,0,0,0] for i in range(3): inc = [i 3,i+5] 2 acc = map(lambda x,y: x - y, acc, inc) print acc #output: [-9, -18, -9, -18]","tags":"Tech","url":"http://leetschau.github.io/yong-mapshi-xian-liang-ge-listde-yuan-su-dui-wei-yun-suan.html","loc":"http://leetschau.github.io/yong-mapshi-xian-liang-ge-listde-yuan-su-dui-wei-yun-suan.html"},{"title":"Emule使用笔记","text":"在Emule界面上点\"帮助\"进入emule的帮助网页，下面是几个常用功能的说明所在的位置。 文件搜索：特色功能->搜索文件 避免封emule协议：特色功能->乱序协议加密 更新服务器列表：指南与问答->下载并维护可信的服务器列表以及IPfilter","tags":"Tech","url":"http://leetschau.github.io/emuleshi-yong-bi-ji.html","loc":"http://leetschau.github.io/emuleshi-yong-bi-ji.html"},{"title":"Python函数调用中的值传递和引用传递问题","text":"这一问题O' Reilly出版的\"Learning Python\" 2nd Edition的 13.4 节有专门论述，对于不可变(immutabe)对象，函数参数（这里是x和y）只是函数（这里是change）名字空间里对象（这里是0和[3,4]）的一个新名字，当x=1时，x指向了一个新对象，外层的X与0之间的引用关系不受影响，类似于Pascal的 \"值传递\"，对于可变(mutable)对象，由于不存在重新赋值，因此函数内部对y一部分的改变使外层的k也发生了变化，类似于Pascal的\"引用传递\"了。如果希望对可变对象使用\"值传递\"，就得在调用过程中创造一个\"副本\"，这样函数内部对副本的修改就不会影响原件了。 用一个例子说明， 首先是引用传递版本 ： def change(x,y): x = 1 y[0] = 'aa' X = 0 k = [3,4] change(X,k) print X,k #output: 0 ['aa', 4] 然后是\"值传递\"版本： def change(x,y): x = 1 y[0] = 'aa' X = 0 k = [3,4] change(X,k [:] ) print X print k #output: 0 [3, 4] 为什么k[:]是k的副本呢？\"Learning Python\"的 7.5 节解释说\"Slice expressions with empty limits copy sequences\"，就是说k[:]是首先取出k所有元素组成一个sequence，然后将这个sequence转换成一个新的list，所以k[:]和k是不相关的。","tags":"Tech","url":"http://leetschau.github.io/pythonhan-shu-diao-yong-zhong-de-zhi-chuan-di-he-yin-yong-chuan-di-wen-ti.html","loc":"http://leetschau.github.io/pythonhan-shu-diao-yong-zhong-de-zhi-chuan-di-he-yin-yong-chuan-di-wen-ti.html"},{"title":"Python代码规范","text":"见 PEP 8 - Style Guide for Python Code 。 命名约定 Prescriptive: Naming Conventions 中指明：package, module, function, method命名采用lower_case_with_underscores风格，其中包名尽量不要用下划线（因此package和module最好只有一个单词），class采用CapWords风格，内部类和非public方法以下划线开头；常量采用ALL_CAPITAL_WITH_UNDERSCORES风格； 参考： lower_case_with_underscores,CapWords（以及其他）风格 的说明； 类继承约定 类成员分为public（供用户使用）、protected（供本类和子类使用，python术语叫\"subclass API\"）和private（仅供本类使用）三类，public采用lower_case风格，protected采用_lower_case风格（以下划线开头），private采用__lower_case风格（双下划线开头）。 空行 类之间以双空行分隔；类内方法间以单空行分隔；函数内部逻辑块间以单空行风格；","tags":"Tech","url":"http://leetschau.github.io/pythondai-ma-gui-fan.html","loc":"http://leetschau.github.io/pythondai-ma-gui-fan.html"},{"title":"thunderbird发送纯文本邮件","text":"向邮件列表中发邮件时，要求邮件格式必须是纯文本格式的，在thunderbird中，邮件格式（plain text或者html格式）在【工具->账户设置->[账户名称]->通讯录】下的\"以HTML格式编写消息\"中设置，英文版此开关的位置是【Tools -> Account Settings -> [Account Name]-> Composition & Addressing -> Compose messages in HTML format】。 当用纯文本格式发送邮件时取消勾选此项即可，判断正在撰写的邮件是否为纯文本格式很简单，看【主题】下面是否有HTML格式工具栏即可： 纯文本邮件： HTML格式邮件： 另：Thunderbird的撰写邮件的正文窗口中右键->【粘贴为引文】功能在回复邮件时很有用！","tags":"Tech","url":"http://leetschau.github.io/thunderbirdfa-song-chun-wen-ben-you-jian.html","loc":"http://leetschau.github.io/thunderbirdfa-song-chun-wen-ben-you-jian.html"},{"title":"事件和任务的区别","text":"事件（event）和任务（task）的区别在于，任务有是否完成的概念，而事件的一个特征是\"时间不等人，过了就过了\"。比如，生日、纪念日、节假日等为全天事件；几点钟开始的会议一般为事件。对于某些安排，可以根据您自己的情况，建立为事件和任务都可以。比如，\"缴纳电话费\"，您可以建立为事件，到时间提醒你一下就行了；但是如果你想跟踪缴纳电话费这件事情是否完成了，则可以建立为任务，当缴纳完电话费后，再把该任务标记为\"已完成\"就行了。","tags":"Tech","url":"http://leetschau.github.io/shi-jian-he-ren-wu-de-qu-bie.html","loc":"http://leetschau.github.io/shi-jian-he-ren-wu-de-qu-bie.html"},{"title":"Outlook与Thunderbird","text":"Thunderbird(TB)的优势：跨平台，多标签浏览，缺点是不具备任务管理功能，需安装插件，但新版本往往不兼容老版本的插件，Outlook的优势是任务管理功能完善，下面是相同的功能在OL和TB中的实现方法。 备份与恢复 TB: 在Linux下只要备份~/.thunderbird文件夹就好，需要把账户和邮件完整转移到另一台机器上，也是只要把~/.thunderbird文件夹拷贝过去就OK了； 设置邮件账户 TB和OL都建立邮件账户时支持IMAP协议，比POP3协议好，因为IMAP协议不会将邮件下载到本地，节约了硬盘空间； TB中公司邮局的设置： [My Account] -> Settings -> 接收邮件: Server Settings -> Server Name: boco.com.cn; Port: 110; Username: li*@boco.com.cn; Connection Security: None; Authentication method: Password, transmitted insecurely; 发送邮件: Outgoing Server(SMTP): Server Name: boco.com.cn; Port: 25; \"Connection Security\" & \"Authentication method\" are same with receiving settings above; 邮件签名 OL：【工具->选项->邮件格式->签名】可设置多个签名，写邮件时任选一个； TB：【工具->账户设置->[某一账户]->签名文字】，一个账户固定一个签名，灵活性稍差； 任务列表 OL有专门的【日历】或者【任务】，可将邮件设置为任务；TB通过安装Lightning插件实现，支持将邮件设为任务（邮件上右键->【转换到...】）； 最小化到托盘区以及激活 OL使用在托盘区图标上右键设置的方法；TB通过安装一个名为MinimizeToTray的插件实现，二者都不能实现从托盘区激活，都需要用autohotkey脚本实现激活； 2011-09-08：从TB转回Outlook，主要是当前的TB6已经不能用Lightning做任务管理了。 2013-9-4：TB的新邮件通知功能比较弱，显示一个提示窗口，几秒钟之后就消失了，待解决；","tags":"Tech","url":"http://leetschau.github.io/outlookyu-thunderbird.html","loc":"http://leetschau.github.io/outlookyu-thunderbird.html"},{"title":"Thunderbird采用IMAP协议连接GMail时的ssl_error_rx_record_too_long问题","text":"用Thunderbird（版本：3.1.9）连接GMail时，总是报ssl_error_rx_record_too_long错误，解决办法是：在【工具->账户设置->[Gmail账号名]->服务器->连接安全】的值由【SSL/TLS】改为【STARTTLS】。","tags":"Tech","url":"http://leetschau.github.io/thunderbirdcai-yong-imapxie-yi-lian-jie-gmailshi-de-ssl_error_rx_record_too_longwen-ti.html","loc":"http://leetschau.github.io/thunderbirdcai-yong-imapxie-yi-lian-jie-gmailshi-de-ssl_error_rx_record_too_longwen-ti.html"},{"title":"mingle安装步骤","text":"安装postgresql（postgresql-9.0.3-1-windows.exe） 数据库superuser密码设为111，见左下图； locale选C；（http://www.daniel-journey.com/archives/574），见右下图； 安装完后不要勾选\"Launch Stack Builder\"； 修改postgresql配置 ${PostgreSQL_install}\\9.0\\data\\pg_hba.conf文件中，将\"host all all 127.0.0.1/32 md5\"中md5改为trust； （https://www.zipsupport.com/support/index.php?_m=knowledgebase&_a=viewarticle&kbarticleid=492） 建立Postgresql数据库 启动pgAdmin； 【服务器->postgres->属性】，保证属性设置如右图： 【服务器->postgres->连接】，输入superuser密码111； 右键【数据库->新建数据库】：创建一个名为mingle的数据库，创建后效果如右图； 右键【登录角色->新建登录角色】，创建一个名为mingle的登录角色： 安装mingle（mingle_windows_3_3_22836_b160044f673a.exe）这里没什么要说明的，按照说明完成安装即可；","tags":"Tech","url":"http://leetschau.github.io/minglean-zhuang-bu-zou.html","loc":"http://leetschau.github.io/minglean-zhuang-bu-zou.html"},{"title":"TortoiseSVN日志字体和字号调整","text":"TortoiseSVN提供的\"show log\"功能很有用，但默认的显示文件log历史的字体太小看不清，这个字体的设置在【TortoiseSVN ->Settings->General->Dialogs 1->Font for log messages】中设置，默认是8，修改为10或者12即可。 修改前后对比如下（基于Version 1.6.2）： 修改前： 修改后：","tags":"Tech","url":"http://leetschau.github.io/tortoisesvnri-zhi-zi-ti-he-zi-hao-diao-zheng.html","loc":"http://leetschau.github.io/tortoisesvnri-zhi-zi-ti-he-zi-hao-diao-zheng.html"},{"title":"制表符控制与行首缩进","text":"以Notepad2为例，在【Settings->Tab Settings】中，有\"Tabulator\"（有些软件叫\"Tab Stop Value\"）和\"Indentation\"（有些软件叫\"Indent Spaces\"）两个值需要设置。tab stop value的意思是：（这里都 假设tab stop设为6，indent space设为3）首先顶格（行首无空格，第1列）输入\"a\"，然后按tab键，再输入b\"，这时\"is\"将出现在第7列上，再按tab并输入c，这时c将出现在第13列上，再按tab并输入d，d出现在第19列上。也就是tab后面的文字总出现在6*i+1的列上，但如果输入abcdefg，再按tab并输入h，则h出现在第13列上。这说明 tabulator的含义实际上是\"列宽\" ，一段文字后面的tab将填满列宽的整数倍，以保证下一段文字出现在列宽的倍数上，这样就实现了表格式的对齐。在行首上按tab，发现跳到了第4列，说明 indent spaces指定了行首缩进的宽度是多少 。为了直观地体验tab和indent的含义，打开notepad2，将 tab stop设为6，indent space设为3，输入：a{tab}b{tab}c{tab}d{tab}e{tab}f{enter}a{tab}bc {tab}def {tab}ghijklmn{tab}o{enter}{tab}abcde{tab}fg，效果如下：","tags":"Tech","url":"http://leetschau.github.io/zhi-biao-fu-kong-zhi-yu-xing-shou-suo-jin.html","loc":"http://leetschau.github.io/zhi-biao-fu-kong-zhi-yu-xing-shou-suo-jin.html"},{"title":"用pysvn和svnant检出某一日期的svn库中的源代码","text":"任务要求：用户给出一个时间起点和一个终点， 检出此时间段内每天的svn库中的源代码进行代码行变化分析。 pysvn方案 pysvn检出特定日期源代码需要在checkout（或者export）方法中的revision 参数中设置日期值，此参数是一个pysvn.Revision对象， 构造此对象需要提供一个float型的参数（从epoch到指定日期的秒数）， 因此将一个可指定偏移量的日期时间对象转换为这个float对象是程序的难点，具体方法是： 利用date（或者datetime）对象和timedelta得到区间内每天的date对象 => 转换为字符串 => 用time.strptime()方法将其转换为struct_time对象 => 用time.mktime()方法将其转换为float时间。 源代码： from datetime import datetime , timedelta theDay = datetime . strptime ( '2011-4-1' , \"%Y-%m- %d \" ) yesterday = theDay - timedelta ( days = 1 ) yesterdayStr = yesterday . strftime ( \"%Y-%m- %d \" ) print yesterdayStr 或者转换为float时间： import os , sys , commands , shutil , time from datetime import date , timedelta sys . path . append ( 'E:/BVT/Hudson/jobs/GODU/workspace/GODU_BVT/tools' ) os . environ [ 'Path' ] = 'E:/BVT/Hudson/jobs/GODU/workspace/GODU_BVT/tools;' + os . getenv ( 'Path' ) proj_list = [ 'GODU_SERVER' , 'GAPI' , 'GODU_WEB' ] src_path = os . path . join ( os . getcwd (), 'checkoutSrc' ) svn_root = 'http://10.0.2.59:8118/svn/godu/Development-Area/3-SCL/Trunk/' svn_path_list = [ 'GODU_SERVER' , 'GAPI' , 'GODU_Web/goduDS' ] def createReport ( startYear , startMon , startDay , endYear , endMon , endDay ): try : resultFile = open ( 'diffcountReport.txt' , 'wt' ) import pysvn svn_client = pysvn . Client () svn_client . set_default_username ( 'bvt' ) svn_client . set_default_password ( 'bvt' ) startDate = date ( startYear , startMon , startDay ) endDate = date ( endYear , endMon , endDay ) timeSpan = ( endDate - startDate ) . days + 1 for i in range ( timeSpan ): theDay = startDate + timedelta ( days = i ) yesterday = theDay - timedelta ( days = 1 ) dayStr = str ( theDay ) timeStruct = time . strptime ( dayStr , \"%Y-%m- %d \" ) # if dayStr is a datetime object, the format string should be \"%Y-%m-%d %H:%M:%S\" timeFloat = time . mktime ( timeStruct ) revdate = pysvn . Revision ( pysvn . opt_revision_kind . date , timeFloat ) resultFile . write ( dayStr + ': \\n\\n ' ) try : for i in range ( 3 ): svn_client . export ( svn_root + svn_path_list [ i ], os . path . join ( src_path , dayStr , proj_list [ i ]), revision = revdate ) oldCodePath = os . path . join ( src_path , str ( yesterday ), proj_list [ i ]) newCodePath = os . path . join ( src_path , dayStr , proj_list [ i ]) resultFile . write ( proj_list [ i ] + ': \\n ' ) resultFile . write ( os . popen ( 'diffcount ' + oldCodePath + ' ' + newCodePath ) . read ()) except Exception , e : print e oldSumCodePath = os . path . join ( src_path , str ( yesterday )) newSumCodePath = os . path . join ( src_path , dayStr ) resultFile . write ( 'Summary: \\n ' ) resultFile . write ( os . popen ( 'diffcount ' + oldSumCodePath + ' ' + newSumCodePath ) . read ()) return True finally : resultFile . close () if __name__ == '__main__' : createReport ( 2011 , 1 , 26 , 2011 , 3 , 30 ) svnant方案 svnant中指定时间相对比较简单，因为它的 本身就接受字符串格式的日期，但ant中并没有提供日期偏移的方法，因此如果只检出1天（或几天）的代码，用svnant比较好，但如果检出几十天的代码，就必须手工实现日期偏移的方法了。 安装svnant的方法比较简单，将svnant.jar、svnClientAdapter.jar、svnjavahl.jar、svnkit.jar共4个jar包copy到$ANT_HOME/lib下，在build.xml里添加一个taskdef就OK了，见下面的源代码： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project name= \"CheckoutSrc\" basedir= \"./\" default= \"checkout\" > <property name= \"proj.root.url\" value= \"http://10.0.2.59:8118/svn/godu/Development-Area/3-SCL/Trunk/GAPI/doc\"/ > <property name= \"src.dir\" value= \" ${ basedir } /checkouts\"/ > <typedef classpath= \"svnant.jar\" resource= \"org/tigris/subversion/svnant/svnantlib.xml\"/ > <target name= \"checkout\" > <svn username= \"bvt\" password= \"bvt\" dateFormatter= \"yyyy-MM-DD\" > <export srcUrl= \" ${ proj . root . url } \" destPath= \" ${ src . dir } \" revision= \"2011-01-27\"/ > </svn> </target> </project> 参考文献： python中解析日期时间字符串为struct_time对象 pysvn和svnant中取svn的旧版本 不加说明时，pysvn和svnant都是取最新版本（Head版本）的svn数据，但也可以取指定的版本，二者都支持根据版本号或者版本日期两种方式确定export的内容。 pysvn svn_client.export(config.get('svn','test_proj_path'), config.get('local','build_folder_name'),revision=pysvn.Revision(pysvn.opt_revision_kind.number, 4712)) 详细说明见pysvn文档中对pysvn.Revision对象的说明。 svnant <export srcUrl= \" ${ proj . root . url } /@{projName}\" destPath= \" ${ build . tmp . dir } \" revision= \"4712\"/ > 详细说明见svnant中对export的解释：http://subclipse.tigris.org/svnant/svn.html#export","tags":"Tech","url":"http://leetschau.github.io/yong-pysvnhe-svnantjian-chu-mou-yi-ri-qi-de-svnku-zhong-de-yuan-dai-ma.html","loc":"http://leetschau.github.io/yong-pysvnhe-svnantjian-chu-mou-yi-ri-qi-de-svnku-zhong-de-yuan-dai-ma.html"},{"title":"diffcount和cobertura的代码行计算结果说明","text":"做java程序的代码行计算时，用diffcount计算出来的代码行数的NBNC（非空非注释）行数是真实的代码行数，而cobertura的\"line valid\"项的值是一个折算值，二者的关系是：${line valid}=(0.46~0.47)*NBNC。diffcount中java与C的代码行折算值为0.41（一行java代码相当于0.41行C代码），与0.46~0.47这个范围相差不大，所以猜测cobertura中的行数大概是折算后的C代码行数。实际计算TestCases/KLOC（每千行代码测试用例数）时，采用何种方式计算代码行数均可，只要QA要求和项目周期中保持一致的计算方法即可。","tags":"Tech","url":"http://leetschau.github.io/diffcounthe-coberturade-dai-ma-xing-ji-suan-jie-guo-shuo-ming.html","loc":"http://leetschau.github.io/diffcounthe-coberturade-dai-ma-xing-ji-suan-jie-guo-shuo-ming.html"},{"title":"最简单的Socket通信之Python版","text":"功能很简单，首先运行Server，当启动Client并向Server发送‘hi'时， Server回答一句问候语，当Client发送其他信息时，Server回答'bye'并关闭连接、退出。 Server端： import sys , socket serv = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) serv . bind (( 'localhost' , 7788 )) serv . listen ( 2 ) while True : connection , address = serv . accept () try : connection . settimeout ( 35 ) buf = connection . recv ( 1024 ) if buf == 'hi' : connection . send ( 'welcome to server!' ) else : connection . send ( 'bye!' ) connection . close () sys . exit ( 0 ) except socket . timeout : print 'time out!' Client端： import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( 'localhost' , 7788 )) import time time . sleep ( 2 ) sock . send ( 'hi' ) print sock . recv ( 1024 ) sock . close () 注意Server和Client都在本机运行时，要在不同的软件上运行， 例如Server用WingIDE跑，Client用PyScripter跑。 Server端通信的基本过程是：建立socke对象->bind->listen->connection周期->close， 其中connection周期是： 首先用socket server的accept方法生成一个新的socket对象（习惯上成为connection）， 然后用connection的send/rec方法发送/接收数据， 最后调用connection的close方法关闭连接。 由于服务器经常要以\"服务\"的形式不断处理客户连接， 因此connection周期通常要放在一个循环体里。 Client端通信的基本过程是：建立socke对象->connect->send/recv->close。","tags":"Tech","url":"http://leetschau.github.io/zui-jian-dan-de-sockettong-xin-zhi-pythonban.html","loc":"http://leetschau.github.io/zui-jian-dan-de-sockettong-xin-zhi-pythonban.html"},{"title":"基于ivy的源代码调试方法","text":"项目PORJ_TEST是项目PROJ的测试项目。在它的ivy中引用了PROJ的jar包。由于PROJ正处于开发阶段，源代码更改频繁， 在运行PROJ_TEST中的测试时，需要进入PROJ的jar包内部设置断点、调试源代码。传统的方法是在PROJ_TEST的Build Path中添加PROJ项目，但这样显然与ivy中定义的引用发生了冲突，且容易在打包时出现问题，怎样让ivy引用的jar包也能提高源代码？方法如下： PROJ项目的ivy.xml文件（ivy配置文件）： PROJ项目的build.xml文件（Ant构建脚本）： <?xml version=\"1.0\" encoding=\"UTF-8\"?> <javac srcdir=\" \\({src.dir}\" destdir=\"\\) \" classpathref=\"lib.path\" encoding=\"GBK\" debug=\"true\"/> \\({build.dist.dir}/\\) {product.name}- \\({ivy.revision}-jar.jar\" basedir=\"\\) {build.class.dir}\"> \\({build.dist.dir}/\\) {product.name}- \\({ivy.revision}-source.jar\" basedir=\"\\) {src.dir}\"> <ivy:publish artifactspattern=\"${build.dist.dir}/[artifact]-[revision]-[type].[ext]\" resolver=\"${publish.resolver}\" status=\"integration\" overwrite=\"true\"/> PROJ_TEST项目的ivy.xml文件： if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ji-yu-ivyde-yuan-dai-ma-diao-shi-fang-fa.html","loc":"http://leetschau.github.io/ji-yu-ivyde-yuan-dai-ma-diao-shi-fang-fa.html"},{"title":"在Windows上安装和卸载Git","text":"相比于集中式版本控制系统SVN，Git的优点是分布式的版本控制，比SVN更先进（在网上搜svn git，有很多比较二者的文章），Windows平台上的Git客户端 Tortoisegit很易用，文档也很完善。 安装Git时，首先要安装msysgit，这个是Git的完整编译环境，下载msysgit官网上的fullinstall安装包（exe文件），运行后即可自动完成安装。这时能以命令行方式使用Git了，但命令行方式显然不方便，因此需要安装客户端 Tortoisegit，也是从 Tortoisegit官网上下载exe安装包然后运行即可，安装后需要在Setting里设置一下msysgit的目录。 卸载Git时首先卸载Tortoisegit，在\"添加/删除程序\"里卸载，然后删除msysgit的文件夹，如果删不掉，找到 git_shell_ext.dll 文件所在目录，在命令行下运行 regsvr32/u git_shell_ext.dll ，然后再删除就OK了。","tags":"Tech","url":"http://leetschau.github.io/zai-windowsshang-an-zhuang-he-xie-zai-git.html","loc":"http://leetschau.github.io/zai-windowsshang-an-zhuang-he-xie-zai-git.html"},{"title":"Notepad++宏编辑","text":"Notepad++没有提供对录制宏的编辑功能（当前使用版本为5.8.3），但手工完全可以进行编辑。首先，Notepad++编辑器中录制的宏实际保存在${INSTALL_FOLDER}/ shortcuts.xml 中。","tags":"Tech","url":"http://leetschau.github.io/notepadhong-bian-ji.html","loc":"http://leetschau.github.io/notepadhong-bian-ji.html"},{"title":"从CD光盘制作适合MP4播放的音乐文件","text":"将CD盘制作为无损的APE/FLAC格式是最佳选择，但制作要分两步，首先将CD中的音轨抓取出来成为wav文件（推荐使用EAC(Exact Audio Copy)），然后用wav文件制作APE/FLAC文件（推荐使用Monkey's Audio），比较麻烦，对于音源（CD盘）和外设（音响、耳机）质量都很一般的我而言，实在没必要这么严格。经过试验发现用Windows Media Player自带的\"音频无损\"方式制作出来的wma文件质量完全能满足我的要求，具体制作方法如下： 1.打开Windows Media Player，主菜单【工具->选项->翻录音乐】，【翻录音乐到此位置】下面设置好输出wma文件的位置，【翻录设置】下面的\"格式\"选【Windows Media音频无损】，【确定】。找不到主菜单？把Media Player窗口上能点的按钮都点一遍总能找到的，比如最小化按钮左边那个倒三角按钮。 2.插入CD，切换到【翻录】面板，勾上要翻录的音乐，【翻录音乐】。 bingo，把喜欢的CD放进MP4随时欣赏吧:)","tags":"Tech","url":"http://leetschau.github.io/cong-cdguang-pan-zhi-zuo-gua-he-mp4bo-fang-de-yin-le-wen-jian.html","loc":"http://leetschau.github.io/cong-cdguang-pan-zhi-zuo-gua-he-mp4bo-fang-de-yin-le-wen-jian.html"},{"title":"用AutoHotkey做汉字到Unicode字符串的转换","text":"要把汉字转换为搜的形式，也就是在汉字的Unicode Big Endian编码前面加\"&#x\"，后面加分号。例如\"\"字转换后为\"搜\"（英文字符无需转换）。 前置条件：native2ascii.exe文件，autohotkey。 算法流程： 输入要转换的汉字； 生成临时文件； 用native2ascii处理该文件； 获取native2ascii的输出放入字符串res中； 以\"\\u\"分割res，以\"ꪪ\"形式重新组合，存入字符串res2； 将res2放入剪贴板； AHK源码：","tags":"Tech","url":"http://leetschau.github.io/yong-autohotkeyzuo-yi-zi-dao-unicodezi-fu-chuan-de-zhuan-huan.html","loc":"http://leetschau.github.io/yong-autohotkeyzuo-yi-zi-dao-unicodezi-fu-chuan-de-zhuan-huan.html"},{"title":"使用Git进行版本控制","text":"安装（Ubuntu系统）：sudo apt-get install git-core 配置用户： $ git config --global user.name \"Scott Chacon\" $ git config --global user.email \"schacon@gmail.com\" 新建仓库，并加入源代码： godu@guserver:~$ mkdir gitRepo godu@guserver:~$ mv GoduServer gitRepo 初始化仓库：在需要建立仓库的文件夹下运行：git init godu@guserver:~$ cd gitRepo/ godu@guserver:~/gitRepo$ git init 添加版本控制：godu@guserver:~/gitRepo$ git add . 查看当前状态（有哪些文件可以提交）：godu@guserver:~/gitRepo$ git status 提交版本：git commit 参考： Git Community Book中文版","tags":"Tech","url":"http://leetschau.github.io/shi-yong-gitjin-xing-ban-ben-kong-zhi.html","loc":"http://leetschau.github.io/shi-yong-gitjin-xing-ban-ben-kong-zhi.html"},{"title":"SciTE使用笔记","text":"以下修改均在${SCITE_PATH}\\user\\SciTEUser.properties文件中进行。 调整编辑区的字体和字号： style.*.32=font:Consolas,size:14 ； 编辑区背景颜色： style.*.32= font:Consolas,size:14, back:#CCCCCC ； 取消自动生成备份文件： make.backup=0 （如果原来已设此值为1则将其改为0）； 删除空行：Ctrl+L 自动补全：autocompleteword.automatic=1 选中部分的颜色加深：selection.alpha=80（值越大颜色越深） 自动缩进使用4个空格，不用tab：options->change indentation settings,uncheck \"Use tabs\" 显示行号：line.margin.visible=1 显示状态栏：statusbar.visible=1 多行注释/反注释：Ctrl+Q 待完善的功能： 9 怎样转换编码格式？ 10 怎样实现自动编号？ 11 SciTE的主要问题是如果一个包含汉字的ANSI编码的文件在SciTE里打开会出现乱码，必须用npp或者UE转换为utf-8编码才行； 12 SciTE的优点是有内置的python运行命令，基本可以取代IDLE； 13 如何进行跨行替换？ 例如要把 23 34 54 替换为：23 34 54，【替换】对话框中勾选\"使用反斜线\"，将\"\\r\"替换为空即可。 再比如删除空行，将\"\\r\"替换为空即可。","tags":"Tech","url":"http://leetschau.github.io/sciteshi-yong-bi-ji.html","loc":"http://leetschau.github.io/sciteshi-yong-bi-ji.html"},{"title":"怎样在类外部测试私有方法和设置/读取私有变量","text":"有些私有方法有很明确的功能，算法比较复杂，不测可能会出问题。测的话最简单的方法是把测试用例写在类内部，例如下面的类： package com.boco.godu.gapi; import static org.junit.Assert.assertEquals; import org.junit.Test; public class ConnManager { private static String buildConnPoolID(int connType, String ip, int port, String loginArg1, String loginArg2) { return connType + ip; } @Test public void testPoolID() { assertEquals(\"23ipstr\", buildConnPoolID(23, \"ipstr\", 3, null, null)); } } 但这样测会有几个问题：首先是如果测试方法很多，会把源代码文件搞得很臃肿，其次发布的时候需要将测试代码删除（毕竟不是产品的一部分），以后再需要测试的时候还得重写，最后这样的测试在BVT的时候无法运行，工作量也无法体现出来（BVT的测试用例都是写在单独的测试类中）。所以理想的方法是把测试方法写在单独的测试类中。 下面采用Java的反射机制实现这一目标。首先是被测类： package org.leechau.testPrivateMethod; public class ClassTested { private String buffer ; private String privateFoo (int a, String b) { return a + b; } } 然后是测试类： package org.leechau.testPrivateMethod; import static org.junit.Assert.assertEquals; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import org.junit.BeforeClass; import org.junit.Test; public class PrivateMethodTest { private static ClassTested oClassTested; private static Method newPrivateFoo; private static Field buffer; @BeforeClass public static void buildDupObj() throws NoSuchMethodException { // Get the class of the private method. oClassTested = new ClassTested(); Class<?> cNewClassTested = oClassTested. getClass (); // Change the property of the private method to be accessible. newPrivateFoo = cNewClassTested. getDeclaredMethod (\"privateFoo\", int.class, String.class); newPrivateFoo. setAccessible (true); buffer = cNewClassTested . getDeclaredField (\"buffer\"); buffer. setAccessible (true); buffer. set ( oClassTested , \"abcdefg\"); } @Test public void privateFooTest() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { // Run the private method. Object oActual = newPrivateFoo. invoke (oClassTested, new Integer(169), new String(\"_ABC\")); // Test the private method String sActual = oActual.toString(); String sExpected = \"169_ABC\"; assertEquals(sActual, sExpected); Object result = buffer. get ( oClassTested ); assertEquals(\"bcdefg\", result); } @Test public void privateFooTest2() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException { Object oActual = newPrivateFoo. invoke (oClassTested, new Integer(169), new String(\"_DEF\")); String sActual = oActual.toString(); String sExpected = \"169_DEF\"; assertEquals(sActual, sExpected); } } 这里要注意的是，JUnit 4里一个测试类执行顺序为：@BeforeClass –> @Before –> @Test –> @After –> @AfterClass，其中@BeforeClass和@AfterClass标记仅在测试类的初始化和清理时运行一次且必须是static方法，而@Before/@After标记是在每个@Test方法运行前/后都运行一遍，因此每一个测试方法的调用顺序为：@Before –> @Test –> @After。在JUnit 3里没有@BeforeClass和@AfterClass标记，起初始化和清理任务的方法必须命名为SetUp()和TearDown()。","tags":"Tech","url":"http://leetschau.github.io/zen-yang-zai-lei-wai-bu-ce-shi-si-you-fang-fa-he-she-zhi-du-qu-si-you-bian-liang.html","loc":"http://leetschau.github.io/zen-yang-zai-lei-wai-bu-ce-shi-si-you-fang-fa-he-she-zhi-du-qu-si-you-bian-liang.html"},{"title":"激活托盘区程序的ahk脚本","text":"下面的脚本实现了激活系统托盘区（system tray）Outlook程序的效果（Windows XP），第一行是不在托盘区出现一个autohotkey的图标，这样做的好处是显得比较酷，缺点是如果想中断这个脚本，就只能在任务管理器里关进程（Autohotkey.exe）了。第二行是运行脚本的快捷键（这里是Win键+\"]\"键），后面是脚本的具体内容，大体意思是首先用TrayIcons函数找到进程\"OUTLOOK.EXE\"的各种参数，然后用PostMessage方法向这个进程发指令，令其窗口显示出来，TrayIcons函数中涉及了很多Windows API，俺就不懂了，好用就行。 使用方法：首先要安装Autohotkey_L v1.0.92.02，将下面的代码保存为一个 UTF-8格式 编码的文本文件，扩展名为ahk，双击运行之。 NoTrayIcon ]:: DetectHiddenWindows, On Info := TrayIcons(\"OUTLOOK.EXE\") ; 激活Outlook，这个名字是任务管理器的\"进程\"里程序对应的进程名称 StringSplit, TrayInfo, Info,| PostMessage, TrayInfo1, TrayInfo2, 0x0203,, ahk_id %TrayInfo3% ; 这句话实现了激活托盘区程序 return ; Found and abused from ; http://www.autohotkey.com/forum/topic17314.html ; thx, Sean ... GREAT WORK! TrayIcons(sExeName = \"\") { WinGet, pidTaskbar, PID, ahk_class Shell_TrayWnd hProc := DllCall(\"OpenProcess\", \"Uint\", 0x38, \"int\", 0, \"Uint\", pidTaskbar) pRB := DllCall(\"VirtualAllocEx\", \"Uint\", hProc, \"Uint\", 0 , \"Uint\" , 20 , \"Uint\" , 0 x1000 , \"Uint\" , 0 x4 ) VarSetCapacity(btn, 20) VarSetCapacity(nfo, 24) VarSetCapacity(sTooltip, 128) VarSetCapacity(wTooltip, 128 * 2) SendMessage, 0x418, 0, 0, ToolbarWindow321, ahk_class Shell_TrayWnd Loop, %ErrorLevel% { SendMessage, 0x417, A_Index - 1, pRB, ToolbarWindow321, ahk_class Shell_TrayWnd DllCall(\"ReadProcessMemory\", \"Uint\", hProc, \"Uint\", pRB, \"Uint\", &btn, \"Uint\", 20, \"Uint\", 0) iBitmap := NumGet(btn, 0), idn := NumGet(btn, 4), Statyle := NumGet(btn, 8) dwData := NumGet(btn,12), iString := NumGet(btn,16) DllCall(\"ReadProcessMemory\", \"Uint\", hProc, \"Uint\", dwData, \"Uint\", &nfo, \"Uint\", 24, \"Uint\", 0) hWnd := NumGet(nfo, 0), uID := NumGet(nfo, 4) nMsg := NumGet(nfo, 8) WinGet, pid, PID, ahk_id %hWnd% WinGet, sProcess, ProcessName, ahk_id %hWnd% WinGetClass, sClass, ahk_id %hWnd% If !sExeName || (sExeName = sProcess) || (sExeName = pid) { DllCall(\"ReadProcessMemory\", \"Uint\", hProc, \"Uint\", iString , \"Uint\" , & wTooltip , \"Uint\" , 128 * 2 , \"Uint\" , 0 ) DllCall(\"WideCharToMultiByte\", \"Uint\", 0, \"Uint\", 0, \"str\", wTooltip , \"int\" , - 1 , \"str\" , sTooltip , \"int\" , 128 , \"Uint\" , 0 , \"Uint\" , 0 ) sTrayIcons .= nMsg \"|\" uID \"|\" hWnd } } DllCall(\"VirtualFreeEx\", \"Uint\", hProc, \"Uint\", pRB, \"Uint\", 0, \"Uint\", 0x8000) DllCall(\"CloseHandle\", \"Uint\", hProc) Return sTrayIcons }","tags":"Tech","url":"http://leetschau.github.io/ji-huo-tuo-pan-qu-cheng-xu-de-ahkjiao-ben.html","loc":"http://leetschau.github.io/ji-huo-tuo-pan-qu-cheng-xu-de-ahkjiao-ben.html"},{"title":"virtualenv使用笔记","text":"以在沙箱中安装googlemaps(http://pypi.python.org/pypi/googlemaps/1.0.2)为例说明如何用virtualenv隔离安装python第3方库 // 离线安装virtualenv(http://pypi.python.org/pypi/virtualenv)：首先下载安装包(gz文件)，解压后运行： F:\\ghost\\tempFiles\\virtualenv-1.7.1.2>setup install （无法找到setup？参考笔记：***） // 生成沙箱 E:\\Docs\\PythonSandbox>virtualenv gmapenv ... // 进入沙箱 E:\\Docs\\PythonSandbox>cd gmapenv\\Script （linux下是cd gmapenv/bin） // 测试googlemaps是否已安装 E:\\Docs\\PythonSandbox\\gmapenv\\Script>python -c \"import googlemaps\" （在Windows平台上用单引号会报错） // 激活沙盒 E:\\Docs\\PythonSandbox\\gmapenv\\Script>activate （实际上是在$PATH前面加上了当前路径，以保证安装的库放在当前路径下） // 在线安装第3方库 (gmapenv) E:\\Docs\\PythonSandbox\\gmapenv\\Script>pip install googlemaps // 验证测试googlemaps已安装 (gmapenv) E:\\Docs\\PythonSandbox\\gmapenv\\Script>python -c \"import googlemaps\" // 卸载googlemaps (gmapenv) E:\\Docs\\PythonSandbox\\gmapenv\\Script>pip uninstall googlemaps // 退出沙盒： (gmapenv) E:\\Docs\\PythonSandbox\\gmapenv\\Script>deactivate 注：当不能在线安装时：首先进入隔离环境activate，当安装包是zip格式文件（exe,gz,egg），用easy_install installer_file_name.ext（如aa.exe, bb.gz, cc.egg）的方法安装（参考http://stackoverflow.com/questions/3271590/can-i-install-python-windows-packages-into-virtualenvs）；对于msi格式的安装文件还没有找到安装在隔离环境中的方法（所以最好还是在线安装）； 注2：activate只是将隔离环境的python.exe放在了$PATH的最前面，这样安装库时会安装在隔离环境的site-packages里； 注3：需要卸载一个隔离环境时只要删除文件夹就OK了； 主要参考 http://wiki.pylonshq.com/display/pylonscookbook/Using+a+Virtualenv+Sandbox 中的windows部分。","tags":"Tech","url":"http://leetschau.github.io/virtualenvshi-yong-bi-ji.html","loc":"http://leetschau.github.io/virtualenvshi-yong-bi-ji.html"},{"title":"使用Cobertura做代码覆盖率测试","text":"经验总结：首先要把cobertura.jar包含ant的classpath路径中，其次要求它包含在测试用例的classpath中； 使用cobertura做代码覆盖率测试中出现的问题：覆盖率始终为0，不论是否有可用的测试用例都如此； 解决问题的历程： 第一步：在被测工程中增加了一个很简单的方法，在测试工程中增加了一个对前述方法的测试，发现覆盖度仍为0，由此确定是使用cobertura的方法有问题，而不是测试用例覆盖度确实为0； 第二步：分离了cobertura中进行junit测试报告（以下简称为cob-junit）与cobertura测试报告（之前是放在一个文件夹里，难以区分哪些是junit的报告，哪些是cobertura的报告，后来放在了两个不同的文件夹中）； 第三步：分离后发现：cob-junit的测试报告与纯junit测试报告显示的测试数不同，纯junit的测试用例数正确，cob-junit测试用例数总为1，且运行错误（error），说明测试用例未能启动；检查错误原因：提示\"java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/HasBeenInstrumented\"； 第四步：尝试解决上述错误。google后发现引起这个错误的原因是没有把cobertura.jar包含在测试用例的classpath中，也就是测试工程的ivy.xml文件的依赖条目里没有cobertura的jar包，将它加入到ivy.xml的依赖条目中后，解决了覆盖度始终为0的问题； 经验总结： 对于自己不熟悉的技术，不要走捷径，如把cob-junit与cobertura测试报告放在一个文件夹里； 出错后要仔细阅读错误报告，寻找能够代表这个错误的关键词句，如\"java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/HasBeenInstrumented\"； 如果通过错误报告自己不能解决，使用搜索引擎查找前一步中的关键词句，寻找解决问题的可能经验； 如果暂时找不到能解决问题的经验，则按照软件（这里是cobertura）的Tutorial（一般来自官网）构建一个最简单的原型，并使其正常工作，然后不断向自己的问题靠拢，在不断修改原型的过程中对可能出错的方面进行筛选，最终锁定出错的位置； 实践中面对一些古怪的错误，往往要重复、交叉进行很多次第3步和第4步，才能最终解决问题。","tags":"Tech","url":"http://leetschau.github.io/shi-yong-coberturazuo-dai-ma-fu-gai-lu-ce-shi.html","loc":"http://leetschau.github.io/shi-yong-coberturazuo-dai-ma-fu-gai-lu-ce-shi.html"},{"title":"视频格式转换软件比较","text":"此处比较的软件共6种，分别是： 狸窝全能：狸窝全能视频转换器，Leawo Video Converter v2.7.0.0 Softstunt： Softstunt RM RMVB Converter Any Video Conv: Any Video Converter Professional v2.7.6 软件名称/功能特点 多种格式转换 转换速度 CPU占用率 合并视频 已完成百分比 视频剪辑 目标文件大小 任务列表 任务完成自动关机 已消耗时间 剩余时间 狸窝全能 全部格式 快 100% 能 标识 具备 标识 具备 具备 标识 标识 Softstunt 仅rm->多种格式 慢 单任务40%，双任务80% 不能 标识 不具备 无标识 具备 不具备 无标识 无标识 Any Video Conv 全部格式 快 单任务50% 能 标识 具备 无标识 具备 具备 无标识 无标识 整体而言，Softstunt生成的avi体积太大，CPU占有率太高，一开始转换就无法进行其他工作了，只能转换rm格式视频，在本次PK中首先出局。Leawo和Any的功能都不错，leawo的易用性更胜一筹，Any生成的avi文件体积只是leawo版的一半左右（相同的avi制式），且实验证明用Any生成的xvid格式的avi影片能够在电视上正常放映， 最终的胜出者是 Any Video Converter 。 Any转换格式设置方法： 首先导入影片，以rmvb影片为例，在右边的\"视频输出\"部分，【编码器(video codec)】选【xvid】；【大小(video size)】选【原先的】；【比特率】选【768】；【帧率】设置为与被转换的影片一样；\"音频输出\"部分全部用默认值即可。","tags":"Tech","url":"http://leetschau.github.io/shi-pin-ge-shi-zhuan-huan-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/shi-pin-ge-shi-zhuan-huan-ruan-jian-bi-jiao.html"},{"title":"使用jetty做webserver示例","text":"使用jetty做webserver大体可分为3步：首先配置webserver，如指定起始页是哪个文件等，然后利用jetty写一个server，放在某一个类的main()方法里，最后用shell脚本启动这个main()方法。但实际启动webserver的过程则正好相反，用户首先运行shell脚本，这个脚本运行一个java的main()方法，这个方法里定义了配置文件在什么地方，首先启动哪个页面。下面按照运行顺序分别说明这三个步骤。 运行启动脚本 脚本应该是一个bat(on windows)或者sh(on unix)文件，下面是一个bat示例： \"%JAVA_HOME%\\bin\\java\" -javaagent:%GODU_HOME%\\WebRoot\\WEB-INF\\lib\\spring\\org.springframework.instrument-3.0.4.RELEASE.jar -Xms256m -Xmx512m -Dfile.encoding=GBK -Dservice_name=goduweb -Djava.awt.Window.locationByPlatform=true -cp %JARS% com.boco.godu.web.server. SimpleJettyServer 8080 实际上就是在%JARS%指定的所有jar包里搜索名为SimpleJettyServer的类，运行其main方法，且带一个参数8080； 写启动类 下面是一个类main()方法内容： public static void main(final String[] args) throws Exception { if(args.length>0){ try{ port= Integer.parseInt(args[0]); }catch(NumberFormatException e){ throw new Exception(\"web端口设置出错！\"); } } Server server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector.setPort(port); connector.setThreadPool(new QueuedThreadPool(150));// 设置服务线程数量 server.addConnector(connector); WebAppContext context = new WebAppContext(); context.setContextPath(\"/godu\"); context.setDescriptor(\"WebRoot/WEB-INF/web.xml\"); context.setResourceBase(\"WebRoot\"); context.setConfigurationDiscovered(true); server.setHandler(context); server.start(); } 其中\"Server server = new Server();\"中的Server类的全名是org.eclipse.jetty.server.Server，因此最后\"server.start()\"启动的就是一个jetty服务器，这种jetty服务器的特点是运行在启动它的shell(windows上是bat)命令进程中，当这个进程被关闭时，相应的webserver也就不存在了； 配置webserver 从第二步中可以看出，server的配置信息放在了\"WebRoot/WEB-INF/web.xml\"中，这个文件中有如下一段： index.jsp 这就定义了当用户在浏览器里输入服务器IP地址并回车后，初始页面是WebRoot文件夹下的index.jsp文件；","tags":"Tech","url":"http://leetschau.github.io/shi-yong-jettyzuo-webservershi-li.html","loc":"http://leetschau.github.io/shi-yong-jettyzuo-webservershi-li.html"},{"title":"gnucash的借款操作","text":"主要参考：gnucash手册：Chapter 7. Loans，示例：A Personal Loan to a friend (How-To) 需要在资产（Asset）账户下建立一个\"借出钱款\"账户，借钱给张三，就是把钱款从个人资产（如银行账户、钱包）账户转到借出账户，在备注里注明借给张三，张三还款就是从借出账户转回资产账户。如果要进行更细致的资金流跟踪，可以在借出账户下建立某人专门的借出账户，这样就可以统计一段时间内针对此人的借出明细。 如果借给某人并规定分期还款方式和利息，gnucash可以计算出每期应归还的数额，示例见Chapter 7. Loans下的A Personal Loan to a friend (How-To)和Calculations两节。 比如自己借款2000元给朋友Mike，","tags":"Tech","url":"http://leetschau.github.io/gnucashde-jie-kuan-cao-zuo.html","loc":"http://leetschau.github.io/gnucashde-jie-kuan-cao-zuo.html"},{"title":"PyScripter使用手记","text":"版本：2.4.1.0 运行调试快捷键：默认的几个快捷键都很不方便，在 Tools->Options->IDE shortcuts->Run中修改，将actDebug（调试）快捷键设为F9，将actDebugAbort（退出调试）设为F2； 编辑器背景颜色： Tools->Options->Editor Options->Syntax Colors，【Element】选【Space】，【Background Color】选【#CCCCCC】； 界面语言：【View->Language】； 运行选中的代码（这个功能很强悍）：【Edit->Source Code->Execute selection】； 代码模板：快捷键：Ctrl+J（在Tools->Options->IDE Shortcuts->Edit->actInsertTemplate下面修改）； 常用快捷键 （在 Tools->Options->Editor Options->keystrokes 中设置， 设置新的快捷键后要点Update按钮使新设置生效 ） 代码补全快捷键（Code Completion）：Alt+J 删除行快捷键：Ctrl+Y； 行选择模式：Ctrl+Shift+L，普通选择模式：Ctrl+Shift+N 选择到匹配括号：Shift+Ctrl+]（对小括号和中括号都有效，光标放在左右括号处均可），仅跳转光标不选中是Ctrl+]； 选择光标右侧一个单词：Ctrl+Shift+Right（光标放在单词开始处按快捷键，如果是多个单词可以多按几次，或者放在单词结尾处按Ctrl+shift+left） 设置书签：Shift+Ctrl+1/2/3...，跳转到书签：Ctrl+1/2/3... 函数搜索：Ctrl+G，可用来快速跳转到某函数；","tags":"Tech","url":"http://leetschau.github.io/pyscriptershi-yong-shou-ji.html","loc":"http://leetschau.github.io/pyscriptershi-yong-shou-ji.html"},{"title":"Windows输入法切换快捷键的一个bug","text":"Windows系统默认的中英文输入法切换快捷键是Ctrl+Space，但这个设置有一个bug，就是如果修改了这个设置，就无法再改回去了，快捷键里必须有一个Shift，很不方便，下面是一个解决办法： 1、任务栏上的\"语言栏\"图标上右键-->设置，出现\"文字服务和输入语言\"窗体，选中\"中文简体-美式键盘\"，【删除】；【 确定】后可能需要重启； 2、再次进入 \"文字服务和输入语言\"窗体，【添加】，【输入语言】选\"中文（中国）\"，【键盘布局/输入法】选 \"中文简体-美式键盘\"，如果没有这一项，选\"中文（繁体）-美国键盘\"。 3、在【键设置】里【输入法/非输入法切换】里取消勾选【启用按键顺序】； 4、在 \"文字服务和输入语言\"窗体的【默认输入语言】下拉框里选【中文（中国）- 美国键盘】，这样默认打开的程序就是英文输入法状态了； Windows7下如果误删了默认输入法，会造成不管什么窗体都进入中文输入法的状态，非常别扭，解决方法是在控制面板->区域和语言->键盘和语言->更改键盘，出现 \"文字服务和输入语言\"窗体，在列表的最下面的\"中文（简体，中国）\"下勾选\"中文（简体）-美式键盘\"，确定即可找回丢失的语言栏。","tags":"Tech","url":"http://leetschau.github.io/windowsshu-ru-fa-qie-huan-kuai-jie-jian-de-yi-ge-bug.html","loc":"http://leetschau.github.io/windowsshu-ru-fa-qie-huan-kuai-jie-jian-de-yi-ge-bug.html"},{"title":"Python发送邮件时的抄送问题","text":"python使用smtp模块的sendmail()方法发送邮件时，并不区分是\"发送给\"、\"抄送给\"还是\"密送给\"，都一视同仁的放在该方法的第二个参数中，但邮件头（也就是收到的邮件中头部\"收件人\"、\"抄送\"等信息）却是由第三个参数决定，也就是说邮件的表现形式是在邮件头里定义的，所以如果想\"密送\"给某人，只要把他的地址加在第二个参数里，而不要在邮件头里出现就行了。下面是代码实例。 import smtplib , ConfigParser , datetime from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart config = ConfigParser . ConfigParser () config . read ( 'build.cfg' ) try : mail_server = smtplib . SMTP ( config . get ( 'mail' , 'server_addr' )) mail_server . set_debuglevel ( 1 ) mail_server . login ( config . get ( 'mail' , 'username' ), config . get ( 'mail' , 'password' )) except Exception , e : exit () from_addr = config . get ( 'mail' , 'from_addr' ) to_addr = config . get ( 'mail' , 'to_addr' ) copyto_addr = config . get ( 'mail' , 'copyto_addr' ) sending_date = datetime . datetime . now () . strftime ( \" %d /%m/%Y %H:%M\" ) message_body = '<html><body>aa</body></html>' msg = MIMEMultipart () msg . add_header ( 'From' , from_addr ) msg . add_header ( 'To' , to_addr ) msg . add_header ( 'Cc' , copyto_addr ) msg . add_header ( 'Subject' , config . get ( 'mail' , 'subject' )) msg . add_header ( 'Date' , sending_date ) msg . attach ( MIMEText ( message_body , 'html' )) mail_server . sendmail ( from_addr , to_addr . split () + copyto_addr . split (), msg . as_string ()) mail_server . quit () 在代码所在文件夹下写一个build.cfg文件，内容如下： [ mail ] server_addr : 124.127.106.5 username : lichao1 password : aba ... from_addr : LiChao < lichao1 @ boco . com . cn > to_addr : lichao1 @ boco . com . cn zhaohuaqiao_kkk @ boco . com . cn copyto_addr : leechau @126. com liu_xin_kkk @ boco . com . cn subject : BVT Reports","tags":"Tech","url":"http://leetschau.github.io/pythonfa-song-you-jian-shi-de-chao-song-wen-ti.html","loc":"http://leetschau.github.io/pythonfa-song-you-jian-shi-de-chao-song-wen-ti.html"},{"title":"代码行汇总算法","text":"原始数据如下图，现需对每一种语言分类汇总各项指标，例如需计算3个项目中所有java语言增加的总行数（Addition列的52881、4828、14621的和）。每一个项目中语言的种类和数量是不可预知的，但针对一种语言进行的各项统计是确定的（这里共进行8项统计，其中前7项要按语言汇总，即做和，第8项RATE对某种语言是固定值，汇总时不要相加，照写即可）。 算法分为3步： 1、将取得的数据依次放入list中，形成一个一维list； 2、顺序遍历该list，获得语言项的下标位置，每种语言的名字是字典的key，下标列表是对应的value； 3、根据上面生成的字典依次对相同语言的对应条目进行做和，最后一项照写； 下面是代码实现，其中 tested 是原始数据在第一步后形成的一维list， index_dict 是第二步后形成的下标列表字典， summary 是最终的汇总数据列表。 tested = [ ' java ' , ' 4 ' , ' 5 ' , ' 0.41 ' , ' xml ' , ' 3 ' , ' 7 ' , ' 0.23 ' , ' java ' , ' 23 ' , ' 42 ' , ' 0.41 ' , ' xml ' , ' 63 ' , ' 82 ' , ' 0.23 ' ] index_dict = {} for item in tested : if item . isalpha () : if not index_dict . has_key ( item ) : index_dict [ item ] = [] index_dict [ item ]. append ( tested . index ( item )) tested [ tested . index ( item ) ] = ' - ' print ( index_dict ) summary = [] for item in index_dict : summary . append ( item ) index_list = [ k + 1 for k in index_dict [ item ]] summary . append ( sum ( int ( tested [ k ] ) for k in index_list )) index_list = [ k + 2 for k in index_dict [ item ]] summary . append ( sum ( int ( tested [ k ] ) for k in index_list )) summary . append ( tested [ index_dict [ item ][ 0 ] + 3 ] ) print ( summary ) 输出是（python 2.6）： { 'xml' : [ 4 , 12 ], 'java' : [ 0 , 8 ] } [ 'xml' , 66 , 89 , '0.23' , 'java' , 27 , 47 , '0.41' ]","tags":"Tech","url":"http://leetschau.github.io/dai-ma-xing-hui-zong-suan-fa.html","loc":"http://leetschau.github.io/dai-ma-xing-hui-zong-suan-fa.html"},{"title":"用minidom解析xml文档","text":"原始xml文档（下划线部分是要解析的数据）： <?xml version=\"1.0\"?> <!DOCTYPE coverage SYSTEM \"http://cobertura.sourceforge.net/xml/coverage-04.dtd\"> 解析为list： test_datasets = [] import xml.dom.minidom dom = xml.dom.minidom.parse('e:\\MyDoc\\Project\\GODU_BVT\\build\\2011-01-18\\GODU_WEB\\build\\result\\cov\\coverage-summary.xml') raw_test_res = dom.getElementsByTagName('coverage')[0] test_datasets.append(raw_test_res.attributes['lines-covered'].value) test_datasets.append(raw_test_res.attributes['lines-valid'].value) test_datasets.append(raw_test_res.attributes['line-rate'].value) test_datasets.append(raw_test_res.attributes['branches-covered'].value) test_datasets.append(raw_test_res.attributes['branches-valid'].value) test_datasets.append(raw_test_res.attributes['branch-rate'].value) test_datasets.append(raw_test_res.attributes['complexity'].value) return test_datasets 解析为字典： test_datasets = {} import xml.dom.minidom dom = xml.dom.minidom.parse('e:\\MyDoc\\Project\\GODU_BVT\\build\\2011-01-18\\GODU_WEB\\build\\result\\cov\\coverage-summary.xml') raw_data_set = dom.getElementsByTagName('coverage')[0].attributes for the_attr in raw_data_set.values(): test_datasets[the_attr.name] = the_attr.value return test_datasets","tags":"Tech","url":"http://leetschau.github.io/yong-minidomjie-xi-xmlwen-dang.html","loc":"http://leetschau.github.io/yong-minidomjie-xi-xmlwen-dang.html"},{"title":"关于Python的嵌套域（nested scope）","text":"周五下午因为嵌套函数的问题反复折腾了几个小时，今天终于搞明白了，python2.6手册里对\"nested scope\"有一段定义，并结合\"OReilly - Python in a Nutshell\"第4.10.6.2节，总结如下： 1 python支持嵌套函数； 2 内层函数可以访问外层函数中定义的变量，但不能重新赋值（rebind）； 3 内层函数的local namespace不包含外层函数定义的变量（见下面的演示程序）； 4 避免出现低版本（<=2.1）不支持nested scope问题的方法：在内层函数参数列表中使用默认参数： (copied from \"OReilly - Python in a Nutshell\" section 4.10.6.2) def make_adder_1(augend): # works with any version def add(addend, _augend=augend ): return addend+_augend return add 演示程序： def outterfunc(): def innerfunc(): cc = bb+'2' print 'inner:',locals() # bb = 3 #这句会造成运行失败 bb = '3' outer = 'out' innerfunc() print 'outter:',locals() bb=31 outterfunc() 输出： inner: {'cc': '32', 'bb': '3'} outter: {'innerfunc': , 'outer': 'out', 'bb': '3'} 从输出可以看到，外层函数里定义的outer变量没有出现在内层函数的local namespace里，但被引用的变量bb却出现了，这一特点值得注意。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-pythonde-qian-tao-yu-nested-scope.html","loc":"http://leetschau.github.io/guan-yu-pythonde-qian-tao-yu-nested-scope.html"},{"title":"python的ConfigParser模块使用方法","text":"ConfigParser模块读取的配置文件的基本格式是：分节，节名称用中括号括起来，每节内有key:value对，中间用冒号分隔，冒号前的空格会被忽略掉； [SectionName1] name1: value1 name2: value2 [SectionName2] name3: value3 配置文件中可以有注释，有两种风格，一种是#号开头，一种是分号开头。#号必须在行首，分号可以在行中， 但分号前必须有一个空格 。下面的代码读取build.cfg文件中mail节中to_addr的内容： import ConfigParser config = ConfigParser.ConfigParser() config.read('build.cfg') to_addr = config.get('mail','to_addr') build.cfg的内容为： [mail] to_addr: lichao1@boco.com.cn ;this is comments","tags":"Tech","url":"http://leetschau.github.io/pythonde-configparsermo-kuai-shi-yong-fang-fa.html","loc":"http://leetschau.github.io/pythonde-configparsermo-kuai-shi-yong-fang-fa.html"},{"title":"用python发送各种形式的邮件","text":"分别是发送纯文本邮件、html格式邮件，以及带附件的html格式邮件。纯文本邮件消息体是普通字符串，html格式邮件中消息体是MIMEText型对象，这种对象的特点是不能加附件；带附件的html格式邮件中消息体是MIMEMultipart型对象，正文和附件都用attach()方法添加。 代码如下（红色字体部分是一个html格式文本的示例，可跳过不看）： import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart if name ==' main ': msg_body=''' <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> BVT Report </p> <p>body { </p> <p>font:normal 68% verdana,arial,helvetica; </p> <p>color:#000000; </p> <p>} </p> <p>table tr td, table tr th { </p> <p>font-size: 68%; </p> <p>} </p> <p>table.details tr th{ </p> <p>font-weight: bold; </p> <p>text-align:left; </p> <p>background:#a6caf0; </p> <p>} </p> <p>table.details tr td{ </p> <p>background:#eeeee0; </p> <p>} </p> <p>p { </p> <p>line-height:1.5em; </p> <p>margin-top:0.5em; margin-bottom:1.0em; </p> <p>} </p> <p>h1 { </p> <p>margin: 0px 0px 5px; font: 165% verdana,arial,helvetica </p> <p>} </p> <p>h2 { </p> <p>margin-top: 1em; margin-bottom: 0.5em; font: bold 125% verdana,arial,helvetica </p> <p>} </p> <p>h3 { </p> <p>margin-bottom: 0.5em; font: bold 115% verdana,arial,helvetica </p> <p>} </p> <p>h4 { </p> <p>margin-bottom: 0.5em; font: bold 100% verdana,arial,helvetica </p> <p>} </p> <p>h5 { </p> <p>margin-bottom: 0.5em; font: bold 100% verdana,arial,helvetica </p> <p>} </p> <p>h6 { </p> <p>margin-bottom: 0.5em; font: bold 100% verdana,arial,helvetica </p> <p>} </p> <p>.Error { </p> <p>font-weight:bold; color:red; </p> <p>} </p> <p>.Failure { </p> <p>font-weight:bold; color:purple; </p> <p>} </p> <p>.Properties { </p> <p>text-align:right; </p> <p>} </p> <p> Unit Test Results Summary Tests Failures Errors Success rate Time 382 3 382 36.0466666667% 1.65 Diffcount Report GODU SERVER LANG ADD MOD DEL A&M BLK CMT NBNC RATE Java 52774 0 0 52774 5501 8036 39344 0.41 XML 399 0 0 399 0 0 399 0.12 GAPI LANG ADD MOD DEL A&M BLK CMT NBNC RATE Java 52774 0 0 52774 5501 8036 39344 0.41 XML 399 0 0 399 0 0 399 0.12 GODU WEB LANG ADD MOD DEL A&M BLK CMT NBNC RATE Java 52774 0 0 52774 5501 8036 39344 0.41 XML 399 0 0 399 0 0 399 0.12 ''' mail_server = smtplib.SMTP('124.127.106.5') # use 'smtp.163.com' to send email with 163 mail_server.set_debuglevel(1) mail_server.login('lichao1', 'abaqus67') #发送纯文本邮件 #from_addr = 'LiChao lichao1@boco.com.cn ' #to_addr = 'LiChao lichao1@boco.com.cn ' #subj = 'hello' #date = datetime.datetime.now().strftime(\"%d/%m/%Y %H:%M\") #msg = \"From: %s\\nTo: %s\\nSubject: %s\\nDate: %s\\n\\n%s\" % (from_addr, to_addr, subj, date, message_body) #mail_server.sendmail(from_addr, to_addr, msg) #发送html格式邮件 #msg = MIMEText (msg_body, 'html') #msg['From'] = 'LiChao lichao1@boco.com.cn ' #msg['To'] = 'LiChao lichao1@boco.com.cn ' #msg['Subject'] = 'hello' #mail_server.sendmail('LiChao lichao1@boco.com.cn ', 'LiChao lichao1@boco.com.cn ', msg.as_string()) #发送带附件的html格式邮件 msg = MIMEMultipart () part2 = MIMEText(msg_body, 'html') msg. attach (part2) att = MIMEText(open('e:\\BVT\\GODU-BVT\\GCIF\\build\\2011-01-12\\GAPI\\build\\result\\junit\\junit-noframes.html', 'rt').read()) att[\"Content-Type\"] = 'application/octet-stream' att[\"Content-Disposition\"] = 'attachment; filename=\"JUnitReport.html\"' msg. attach (att) msg['From'] = 'LiChao lichao1@boco.com.cn ' msg['To'] = 'LiChao lichao1@boco.com.cn ' msg['Subject'] = 'hello' mail_server.sendmail('LiChao lichao1@boco.com.cn ', 'LiChao lichao1@boco.com.cn ', msg.as_string()) mail_server.quit() 注意：sendmail()发送邮件时，如果收件人有多个，必须放在一个list中作为参数，如果是字符串，则只发给第一个人，似乎只有python2.6要求是list型参数。","tags":"Tech","url":"http://leetschau.github.io/yong-pythonfa-song-ge-chong-xing-shi-de-you-jian.html","loc":"http://leetschau.github.io/yong-pythonfa-song-ge-chong-xing-shi-de-you-jian.html"},{"title":"用lxml模块解析JUnit生成的测试报告","text":"JUnit的测试结果首先保存在xml文档中，然后生成html格式的测试报告，这份报告中的数据是用一段javascript代码根据 xml文档的数据 计算出来的，因此我们要获取测试结果数据，就只能分析html文档，这方面lxml模块（codespeak.net/lxml/）的功能比较令人满意，利用lxml的xpath语法可以方便地得到某个标签的内容，下面是一个分析样例文本： <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"> Unit Test Results. </p> <p>...(1000多行) </p> <p> Unit Test Results. Summary Tests Failures Errors Success rate Time 24 0 24 0.00% 0.155 ... 效果见下图： 解析html的目的是取出文本中黑体字表示的数据。 解析函数是： from lxml import html def parseJUnitReport(html_filename): html_doc = html.parse(html_filename).getroot() res_tbl = html_doc.xpath(\"//html//body//table\")[1] test_item_names = [k.text for k in res_tbl.xpath('.//tr//th')] # list comprehension test_datasets = [k.text for k in res_tbl.xpath('.//tr//td')] return dict(zip(test_item_names,test_datasets)) 测试代码： aa = 'e:\\BVT\\GODU-BVT\\GCIF\\build\\GAPI\\build\\result\\junit\\junit-noframes.html' print build.parseJUnitReport(aa) 运行结果如下： {'Failures': '0', 'Tests': '24', 'Errors': '24', 'Success rate': '0.00%', 'Time': '0.155'} 从解析函数可以看到： 导入lxml.html后，其parse方法的参数是一个文件路径字符串，用xpath()方法得到的是一个包含 内所有的 的list，由于目标table位于第二位，所以取[1]得到table对象res_tbl，然后在它的下面取 里的 ，得到标题行，对于每个得到的节点，需要用它的text属性得到文本内容，这里使用了list的comprehension功能，用一行代码就取到每个元素的text属性并组成了新的list（test_item_names和test_datasets），然后用zip方法将两个list组合成了一个list，再用dict方法将list转换成了字典。","tags":"Tech","url":"http://leetschau.github.io/yong-lxmlmo-kuai-jie-xi-junitsheng-cheng-de-ce-shi-bao-gao.html","loc":"http://leetschau.github.io/yong-lxmlmo-kuai-jie-xi-junitsheng-cheng-de-ce-shi-bao-gao.html"},{"title":"unix中切换用户和查询当前用户名","text":"切换用户： su - username 注意横杠的两边都要有空格； 查询当前用户名称： whoami 查询主机上所有登录用户： who -uH","tags":"Tech","url":"http://leetschau.github.io/unixzhong-qie-huan-yong-hu-he-cha-xun-dang-qian-yong-hu-ming.html","loc":"http://leetschau.github.io/unixzhong-qie-huan-yong-hu-he-cha-xun-dang-qian-yong-hu-ming.html"},{"title":"几种常见的编程等宽字体","text":"Consolas：2005年微软随VS.NET 2005发布的一款专用编程字体，Windows自带，Linux上付费安装； Dejavu Sans Mono: Mint 14 build-in, 贴近手写体； Liberation Mono: Mint 14 build-in, much like Dejavu Mono, 似乎更方正一些； Droid Sans Mono: Mint 14 build-in，0中间没有斜线； Inconsolata: 字体比较小，低分辨率下可能比较好看，install it on Ubuntu with apt-get install ttf-inconsolata Courier New：经典、常见； Monaco：比较不常见； Lucida Sans Typewriter：字形偏瘦，不是我喜欢的类型； Lucida Console：字形尚可，但行间距太窄 Fixedsys：阵型字体，方方正正，感觉比较生硬； 编程用字体选择标准： 所有字符等宽 简洁、清晰、规范的字符形体 支持ASCII码为128以上的扩展字符集 空白字符(ASCII: 0x20)与其他字符等宽 '1'、'l'和'i'等三个字符易于区分 '0'、'o'和'O'等三个字符易于区分 双引号、单引号的前后部分易于区分，最好是镜像对称的 清晰的标点符号外形，尤其是大括符、圆括符和方括符","tags":"Tech","url":"http://leetschau.github.io/ji-chong-chang-jian-de-bian-cheng-deng-kuan-zi-ti.html","loc":"http://leetschau.github.io/ji-chong-chang-jian-de-bian-cheng-deng-kuan-zi-ti.html"},{"title":"ivy缓存的自动更新问题","text":"ivy的哲学是\"一个版本，一个jar包\"，即要求只要更新jar包，就必须使用新的版本号，但在某些情况下这个原则有问题，比如项目A的测试版本放在产品库的测试区中，更新频率非常高，一天之内就可能更新好几次，这样每次一个新版本号太浪费空间了，一般就都命名为alpha版（或者snapshot版），每次新提交时覆盖旧的jar包以及ivy文件。假设项目B用A的产品，能不能在A提交一个新的jar包后，就自动更新B的本地缓存呢？答案是可以。 要实现本地缓存的自动更新，需要在3处进行说明： 首先是项目B的ivy.xml文件中，在依赖A的条目上指明\"changing=\"true\"\"： 其次是项目A的ivy.xml的说明部分（ 标签里）不要设置publication属性，例如： 对应的发布产品A的ant任务（ivy:publish）中也不要设置pubdate属性，这样A被发布到产品库中后，其ivy文件的 标签里会自动增加publication=\"...\"，就是发布时的真实时间，ivy的自动更新机制就是比较cache和产品库中的这个标志是否一致来决定是否更新缓存； 最后是要在设置文件里指明自动更新，就是在resolvers里将checkmodified设置为true，注意当使用chain resolver时，两处都要设置，例如： 由于发布区不存在alpha版本问题，因此发布区的resolver就不必自动更新了。网上有说checkmodified和changingPattern两个属性都要设置，根据我的实验，后者不设也能实现自动更新，所以就不要自找麻烦了。","tags":"Tech","url":"http://leetschau.github.io/ivyhuan-cun-de-zi-dong-geng-xin-wen-ti.html","loc":"http://leetschau.github.io/ivyhuan-cun-de-zi-dong-geng-xin-wen-ti.html"},{"title":"python的telnet客户端交互","text":"代码实例： import telnetlib ftp_serv_addr = '10.0.2.47' ftp_usrname = 'godu1' ftp_password = 'godu1' tn = telnetlib.Telnet(ftp_serv_addr) tn.read_until('ogin: ') tn.write(ftp_usrname+'\\n') tn.read_until('assword: ') tn.write(ftp_password+'\\n') tn.read_until('$ ') aa = tn.write('ps -ef|grep CMD\\n') print(aa) print('=====') bb = tn.read_until('$ ') print(bb) 运行结果： None ===== ps -ef|grep CMD UID PID PPID C STIME TTY TIME CMD godu1 4973 4945 0 16:00 pts/2 00:00:00 grep CMD [godu1@goduserver ~]$ 上面的例子首先说明了telnet客户端与服务端的交互都是用write方法发命令，用read_until方法接收返回结果。可以看到登录过程也是如此（只是返回结果的期望不同），write方法不返回结果，read_until方法返回所有接收到的字符串，包括命令提示符。","tags":"Tech","url":"http://leetschau.github.io/pythonde-telnetke-hu-duan-jiao-hu.html","loc":"http://leetschau.github.io/pythonde-telnetke-hu-duan-jiao-hu.html"},{"title":"用ftplib的storlines上传文件","text":"上传文本文件：ftp_client.storlines(\"STOR \" + the_file, open(full_name, \"rt\")) 上传二进制文件：ftp_client.storbinary(\"STOR \" + pkg_names[0], open(full_pkg_name, \"rb\")) 需要用cwd首先设置好传文件的目标文件夹，然后用storlines命令上传，如果目标文件夹下已有同名文件，则不论上传的文件是否比已存在的新，都会覆盖已有的文件，下面的代码验证了以上结论，首先在F盘根目录下生成一个aa.txt文件，然后运行下面代码，然后修改aa.txt并再次运行下面的代码，可以看到ftp上的文件被更新了。 import ftplib fc = ftplib.FTP('10.0.2.47','godu1','godu1') import os os.chdir('f:\\') fc.storlines('STOR aa.txt',open('f:\\aa.txt','rt'))","tags":"Tech","url":"http://leetschau.github.io/yong-ftplibde-storlinesshang-chuan-wen-jian.html","loc":"http://leetschau.github.io/yong-ftplibde-storlinesshang-chuan-wen-jian.html"},{"title":"在python中调用可执行程序时如何设置环境变量","text":"首先以ant为例说明： 设置环境变量 首先要设ANT_HOME，其次要设path（只设path不设ANT_HOME，ant会报错，所以ANT_HOME必须设）。 os.environ['ANT_HOME'] = os.path.join(root_path,'tools','apache-ant-1.8.1') os.environ['path'] = os.path.join(root_path,'tools','apache-ant-1.8.1','bin') 调用格式 output = os.popen(r'ant init').read() print(output) 这里要注意的是 不能用 sys.path.append(ant_path)代替 os.environ['path']=...这一句，因为sys.path中虽然有ant的路径，但使用os.popen(...)时python只在系统的path里找可执行程序名，不会去sys.path里找（sys.path仅用于python找包，见博文\"python添加新包的方法\"），如果path中指定的ant路径不存在，python不会继续找sys.path，而是直接给出一个空结果（不会返回\"程序名不存在\"这样的提示信息，因为python直接调用操作系统底层的C API，而提示信息是cmd.exe加上的）。","tags":"Tech","url":"http://leetschau.github.io/zai-pythonzhong-diao-yong-ke-zhi-xing-cheng-xu-shi-ru-he-she-zhi-huan-jing-bian-liang.html","loc":"http://leetschau.github.io/zai-pythonzhong-diao-yong-ke-zhi-xing-cheng-xu-shi-ru-he-she-zhi-huan-jing-bian-liang.html"},{"title":"python中两种拷贝目录方法的比较","text":"首先是用python自己的api： shutil.copytree('./build/tested/doc', './build/tested/build/doc') 优点是改变平台时不需要修改代码，缺点是doc文件夹下所有的东西都会被拷贝，包括隐藏目录； 其次是使用windows的api： result = subprocess.call(['xcopy', '.\\build\\tested\\doc', '.\\build\\tested\\build\\doc','/I']) 与上面的优缺点正好相反。","tags":"Tech","url":"http://leetschau.github.io/pythonzhong-liang-chong-kao-bei-mu-lu-fang-fa-de-bi-jiao.html","loc":"http://leetschau.github.io/pythonzhong-liang-chong-kao-bei-mu-lu-fang-fa-de-bi-jiao.html"},{"title":"同时发布两种产品的ant脚本","text":"\\({build.dist.dir}/\\) {product.name}- \\({ivy.revision}-jar.jar\" basedir= \"\\) {build.class.dir}\" > \\({vendor.name}\" /> <attribute name= \"Product-Name\" value= \"\\) {product.name}\" /> \\({ivy.revision}\" /> <attribute name= \"Build-Date\" value= \"\\) {build.date}\" /> \\({build.time}\" /> </manifest> </jar> <jar destfile= \"\\) {build.dist.dir}/ \\({product.name}-\\) {ivy.revision}-source.jar\" basedir= \" \\({src.dir}\" > <manifest> <attribute name= \"Vendor\" value= \"\\) {vendor.name}\" /> \\({product.name}\" /> <attribute name= \"Version\" value= \"\\) {ivy.revision}\" /> \\({build.date}\" /> <attribute name= \"Build-Time\" value= \"\\) {build.time}\" /> \\({build.dist.dir}/[artifact]-[revision]-[type].[ext]\" resolver= \"\\) {publish.resolver}\" overwrite= \"true\" organisation= \"com.boco.ty\" module= \"gapi\" revision= \"alpha\" /> if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/tong-shi-fa-bu-liang-chong-chan-pin-de-antjiao-ben.html","loc":"http://leetschau.github.io/tong-shi-fa-bu-liang-chong-chan-pin-de-antjiao-ben.html"},{"title":"python的目录遍历方法说明","text":"python的os.walk()方法十分强大，它对目录的遍历不能指定深度，也就是一直遍历到最深处为止，且采用深度优先的遍历方法，第一个参数是要遍历的文件夹路径，第二个参数topdown如果为真，则从根向下遍历，若为假，则从最深处向根遍历，示例如下： import os for root, dirs, files in os.walk('f:\\aa', topdown=False): print('root=',root) print('dirs=',dirs) print('files=',files) 输出如下： root= f:\\aa\\22\\33 dirs= [] files= ['f44'] root= f:\\aa\\22 dirs= ['33'] files= ['f33'] root= f:\\aa\\222\\333 dirs= [] files= [] root= f:\\aa\\222 dirs= ['333'] files= [] root= f:\\aa dirs= ['22', '222'] files= ['f22'] 如果去掉第二行中的\"topdown=False\"，输出如下： root= f:\\aa dirs= ['22', '222'] files= ['f22'] root= f:\\aa\\22 dirs= ['33'] files= ['f33'] root= f:\\aa\\22\\33 dirs= [] files= ['f44'] root= f:\\aa\\222 dirs= ['333'] files= [] root= f:\\aa\\222\\333 dirs= [] files= [] 如果仅仅是列出第一层目录名，则用listdir()： print(os.listdir('f:\\aa')) 的输出是： ['22', '222', 'f22']","tags":"Tech","url":"http://leetschau.github.io/pythonde-mu-lu-bian-li-fang-fa-shuo-ming.html","loc":"http://leetschau.github.io/pythonde-mu-lu-bian-li-fang-fa-shuo-ming.html"},{"title":"python添加新包的方法","text":"python查找包实际上是在sys.path中找，利用这一点可以方便的在运行时添加新包。 例如现在要添加一个名为pysvn的包，原始安装包是一个zip包，其中只有一个名为pysvn的目录， 所有文件都在这个目录下（例如__init__.py以及一堆dll文件）， 将这个包解压至E:\\BVT\\GODU-BVT\\pyTest下， 也就是E:\\BVT\\GODU-BVT\\pyTest\\pysvn下有 init .py 以及一堆dll文件， 然后运行如下脚本： import sys sys . path . append ( 'E: \\\\ BVT \\\\ GODU-BVT \\\\ pyTest' ) import pysvn ... 就可以使用pysvn模块了。另外用 import sys print ( sys . path ) 可以看到， \\({PYTHON_HOME}\\lib\\site-packages已经被预先加入到sys.path中了， 所以更简单的方法是直接把pysvn解压到\\) \\lib\\site-package目录下， 这样导入包时就可以省略前面的sys.path.append动作， 但由于权限问题操作系统不允许解压到site-packages下时，这一招就没用了。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/pythontian-jia-xin-bao-de-fang-fa.html","loc":"http://leetschau.github.io/pythontian-jia-xin-bao-de-fang-fa.html"},{"title":"ant流程控制之for语句","text":"在ant脚本中实现for循环需要使用ant-contrib.jar（http://ant-contrib.sourceforge.net/），在使用前需要将该jar包放在ant的classpath中，并在build脚本中定义： 然后就可以在脚本中使用了： Letter @{letter}","tags":"Tech","url":"http://leetschau.github.io/antliu-cheng-kong-zhi-zhi-foryu-ju.html","loc":"http://leetschau.github.io/antliu-cheng-kong-zhi-zhi-foryu-ju.html"},{"title":"Run JUnit Test in Command Line","text":"在F盘下生成JunitCLEx.java文件： import org.junit.Test ; import static org.junit.Assert.assertEquals ; public class JunitCLEx { @Test public void hello () { assertEquals ( 24 + 5 , 26 ); } } 再生成一个run.bat文件： set CLASSPATH = d : \\ workspace \\ GAPI_TEST \\ build \\ lib \\ junit-4 . 8 . 2 . jar ; f : \\ javac JunitCLEx . java java org . junit . runner . JUnitCore JunitCLEx 运行这个批处理，看看结果，再把JunitCLEx.java中 assertEquals(24+5,26); 中的26改为29，重新运行一遍看看结果。 命令行运行JUnit的基本过程分三步： 设置classpath（注意测试代码自己的路径也要加进去）； 编译测试代码； 运行JUnit：java org.junit.runner.JUnitCore <测试类名>；","tags":"Tech","url":"http://leetschau.github.io/run-junit-test-in-command-line.html","loc":"http://leetschau.github.io/run-junit-test-in-command-line.html"},{"title":"在ant脚本中调用另外的ant脚本","text":"例如在build.xml中要运行 \\({tested.dir}下的build.xml： <ant antfile=\"\\) /build.xml\" InheritAll=\"false\"> 注意其中的InheritAll=\"false\"，是避免主脚本中的变量定义 进入被调脚本中； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/zai-antjiao-ben-zhong-diao-yong-ling-wai-de-antjiao-ben.html","loc":"http://leetschau.github.io/zai-antjiao-ben-zhong-diao-yong-ling-wai-de-antjiao-ben.html"},{"title":"ant的copy标签使用方法","text":"对于ant里拷贝用的 标签的用法，此文（来自 http://electiger.blog.51cto.com/112940/39575 ）讲得很好，注意其中黑体字部分，今天被这个问题耽误了20分钟。 Ant真是太方便了，以前都没注意到它。功能很强大，能创建数据库，配置服务器，部署发布应用……只需要写好build.xml文件，剩下的就交给ant来\"安装\"你的WEB应用了。 Appfuse的第一个ant命令是ant new，其任务是建立一个新命名的project，少不了会复制很多文件。build.xml中也有很多copy操作，为了搞清楚ant new到底干了些什么事，还是先把copy操作了解一下。看了会ant的DOCS，网上也找了些文章，发现copy这部分都是一带而过，讲得很浅，于是我就只有自己实验下，发现还有点收获。 ant版本为1.6.5。 拷贝单个文件到指定目录下。 例： \\({basedir}/new\" file=\"\\) {basedir}/old/old1.txt1\"> 将 \\({basedir}/old/old.txt文件拷贝到\\) /new下 拷贝一批文件到指定目录下 例： < include name = \" old1.txt \" /> < include name = \" old2.txt \" /> < exclude name = \" old8.txt \" /> 这里fileset定义的是原文件的组成形式， 子属性表示包括， 子属性表示排除，很简单，通过他们组合实现多文件的筛选，当然我这个例子用得很傻。比如 < include name = \" appgen/** \" /> < include name = \" ibatis/** \" /> < exclude name = \" **/*.log \" /> 拷贝appget目录和ibatis目录下除了.log文件以外的其它所有文件和子目录。 可以把 简写成 ，includes可以理解成include的复数形式，包含多个文件时用逗号隔开，excludes也一样。 拷贝一个目录到指定目录下 例： < include name = \" appgen \" /> < include name = \" appgen/ \" /> < include name = appgen /**\" /> <include name=\"appgen/***\" /> 同样使用 属性，name指定目录名，不过这里要分两种情况，用 子属性和不用 子属性. 若使用 ， 又要分三种情况 若是\"appgen\"，则只会拷贝名为appgen的空目录过去，它里面的文件和子目录则不会拷贝。 若是\"appgen/\"，或\"appgen/**\"，则会把整个appgen目录拷贝过去，包括里面的文件和子目录。 若是\"appgen/ \"，则只会把该目录和该目录下第一级子目录的所有东西拷贝过去，而不会拷贝第二级和第二级以下的。注：\"appgen/ \"这儿是一个 号， 号若大于两个，也跟一个 号是同样效果。比如\"appgen/ \"和\"appgen/****\"都只拷贝appgen目录下第一级子目录。 注：若appeng这个目录本身就是个空目录，无论怎么写，这个空目录都不会被拷贝。也就是说，copy操作不会产生创建空目录的作用，要想创建空目录，只有用mkdir。 若不使用任何 属性，如 则会拷贝${basedir}/old下的所有文件和子目录。 注： 使用 排除目录时，目录名必须写成\"dirName/\"或\"dirName/**\"形式，否则不会生效。 以上是三种拷贝到目录的种类，注意如果计算机中没有todir指定的路径，ant将会自动创建这个路径。 拷贝单个的文件： 〈copy tofile=\"old.txt\" file=\"new.txt\" /〉就这么简单就行了。 当然也可以写成 这里includes就只能写一个文件，不能写上多个文件，因为不能将多个文件复制到一个文件中去，所以这样麻烦的写法是没有意义的。 复制肯定还要涉及到同名覆盖的问题，ant在copy类的API中说明：Files are only copied if the source file is newer than the destination file，这里的newer是指文件的修改时间，即使你在修改时文件内容没有任何变化，只是导致修改时间变了，ant同样会覆盖同名文件，也就是说，ant不会检查文件内容。 对于是复制目录的情况，由于目录没有修改时间，ant还是通过检查目录内文件的修改时间来决定是否覆盖的，若目录内某文件修改时间有变化，则会覆盖这个文件，而不是整个目录。 如果要强行覆盖， 有个overwrite属性，默认为false，改成true就行了。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/antde-copybiao-qian-shi-yong-fang-fa.html","loc":"http://leetschau.github.io/antde-copybiao-qian-shi-yong-fang-fa.html"},{"title":"依赖管理常用vim脚本","text":"为依赖条目加上配置说明 效果示例 ： 转换前： 转换后： 方法 ：在_vimrc文件里加上如下代码： function Add_Conf() \"为ivy的dependency条目加上conf=\"...\" %s/\\/>/ conf=\"compile->master\"\\/> endfunction command AddConf call Add_Conf() map :AddConf 将依赖条目变为下载条目 效果示例 ： 转换前： 转换后： \\({from.resolver}\" to=\"\\) {to.resolver}\"/> \\({from.resolver}\" to=\"\\) {to.resolver}\"/> \\({from.resolver}\" to=\"\\) {to.resolver}\"/> 方法 ：在_vimrc文件里加上如下代码： function Dep_to_Install() \" 将ivy的dependency条目转换为脚本安装条目 %s/dependency/ivy:install/g %s/org=/organisation=/g %s/name=/module=/g %s/rev=/revision=/g %s/conf=\"compile->master\"/from=\" \\({from.resolver}\" to=\"\\) \"/g endfunction command Dep2Inst call Dep_to_Install() map :Dep2Inst if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yi-lai-guan-li-chang-yong-vimjiao-ben.html","loc":"http://leetschau.github.io/yi-lai-guan-li-chang-yong-vimjiao-ben.html"},{"title":"依赖项目文本排序（python实现）","text":"ivy的依赖文件如果条目很多，不排序的话会很乱，例如： \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> （ori.txt中这里是空行） 排成这样就比较好看了： \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> \\({from.resolver}\" to=\"\\) {to.resolver}\" /> 实际上就是每行按字母顺序排序，手工排费时费力，下面的脚本就是实现这个功能的，将最上面的文本保存为e:/MyDoc/Project/IvyInstallScripts下的build_old_backup.txt（注意最后一行文字后面要有一个空行）中，运行此脚本，排好的文本保存在build_old_backup.txt中，未排序的原始文本保存在build_old_backup.bak中，如果文件夹下已经有build_old_backup.bak，则会首先删除此bak文件，再执行上面的操作： import os if name == ' main ': #name of the source file srcFileName = 'e:/MyDoc/Project/IvyInstallScripts/build_old_backup' haveXML = os.path.exists(srcFileName+'.txt') haveBAK = os.path.exists(srcFileName+'.bak') if haveXML and haveBAK: os.remove(srcFileName+'.bak') if haveXML: os.rename(srcFileName+'.txt', srcFileName+'.bak') haveBAK = True if not haveBAK: print(\"no source file, quit now!\") exit() # open the src file oriScript = open(srcFileName+'.bak','rt') #the destination file destScript = open(srcFileName+'.txt','wt') try: wholeTxt = [] for curLine in oriScript: # print ( len ( curLine )) wholeTxt . append ( curLine ) wholeTxt.sort() for curLine in wholeTxt: destScript . write ( curLine ) finally: oriScript.close() destScript.close() 下面是简单版：更为易用，保存为一个.py文件即可。 \"\"\" 将文本中的各行按字母顺序排序。使用方法： 将待排序的文本保存在脚本所在目录下，运行脚本，结果保存在dst.txt文件中。 \"\"\" import os oriScript = open('./ori.txt','rt') dstScript = open('./dst.txt','wt') try: wholeTxt = [] for curLine in oriScript: wholeTxt.append(curLine) noDupList = list(set(wholeTxt)) # delete potential duplicated lines in wholeTxt noDupList.sort() for curLine in noDupList: dstScript.write(curLine) finally: oriScript.close() dstScript.close() if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yi-lai-xiang-mu-wen-ben-pai-xu-pythonshi-xian.html","loc":"http://leetschau.github.io/yi-lai-xiang-mu-wen-ben-pai-xu-pythonshi-xian.html"},{"title":"解决SecureCRT中删除会话后无法重建问题","text":"SecureCRT和SecureFX中创建一个会话（例如名为\"10.0.2.47\"）后，如果删除这个会话，然后再创建一个同样名字的会话，就会报错，原因是SecureCRT在C盘上创建了一个配置文件，用户删除会话时，这个配置文件没有更新（ \"10.0.2.47\" 这一条目在配置文件中仍然存在），导致用户创建同名会话时SecureCRT认为已存在了，解决方法是：删除C:\\Documents and Settings\\a\\Application Data\\VanDyke\\Config文件夹（配置文件是这个文件夹下的\"Recent File List SecureCRT.ini\"文件）。","tags":"Tech","url":"http://leetschau.github.io/jie-jue-securecrtzhong-shan-chu-hui-hua-hou-wu-fa-zhong-jian-wen-ti.html","loc":"http://leetschau.github.io/jie-jue-securecrtzhong-shan-chu-hui-hua-hou-wu-fa-zhong-jian-wen-ti.html"},{"title":"Ant + JUnit: NoClassDefFoundError问题解决办法","text":"使用Ant+JUnit跑测试用例时如果出现\"NoClassDefFoundError\"问题，注意一下classpath里的JUnit版本是否为4.5，如果是将其替换为4.0或者4.8。 参见： http://stackoverflow.com/questions/1171264/ant-junit-noclassdeffounderror 使用 标签运行JUnit测试时，test的name属性要写类的全名，否则会报\" NoClassDefFoundError\"错误，例如： 如果name写成\" AdminFilterTest \"，则出 \" NoClassDefFoundError\"错误 。 的子标签 中，若需要引用class文件，使用 \\({test.class.dir}\"/>，其中test.class.dir定义为： <property name=\"test.class.dir\" value=\"\\) {build.dir}/test\"/> 若需要引用jar文件，则使用 ，其中\"lib.path\"定义为： 完整的测试任务实例如下： \\({test.src.dir}\" destdir=\"\\) {test.class.dir}\" classpathref=\"lib.path\" classpath=\" \\({build.class.dir}\" encoding=\"GBK\" optimize=\"off\" debug=\"on\"/> <junit printsummary=\"yes\" haltonfailure=\"no\"> <classpath> <pathelement path=\"\\) {test.class.dir}\"/> \\({build.class.dir}\"/> <path refid=\"lib.path\"/> </classpath> <test name=\"com.boco.godu.gapi.AdminFilterTest\" todir=\"\\) {test.xml.result}\"> \\({test.report.dir}\"> <fileset dir=\"\\) {test.xml.result}\"> if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ant-junit-noclassdeffounderrorwen-ti-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/ant-junit-noclassdeffounderrorwen-ti-jie-jue-ban-fa.html"},{"title":"自动生成srt格式的脚本（Python实现）","text":"用威力导演制作短片，这个软件有个导入srt字幕的功能，可以写好文本后一次性导入短片的字幕，比手工在威力导演里写快多了，srt文本中，每一条字幕的格式是： 序号 起止时间 字幕内容 例如： 1 00:00:08,0 --> 00:00:13,0 发展历程 2 00:00:13,0 --> 00:00:18,0 2006年 通用产品线正式成立 ... 这种格式在字幕的条数发生变化时修改起来很麻烦，比如一共有50条字幕，在第3条后加一条新字幕，则后面47条的序号、起止时间点都要修改，简直是噩梦，为此编写了下面的Python脚本，现在只要将字幕写成如下格式，用脚本处理后就能生成上面要求的格式了： 发展历程 2006年 通用产品线正式成立 ... 其中主要的技术点有（Python 3.1）： 时间偏移用timedelta对象，时间点用datetime对象，不能用time对象，因为time对象和timedelta对象不能做和； 时间转换为字符串的方法是strftime() 地址字符串要用\"/\"代替\"\\\"； 将待处理文件保存为ANSI格式文本，在脚本里配好地址（这里是\"f:/视频制作\"）就可以了。 下面是脚本内容： #!/usr/bin/env python from datetime import datetime, timedelta if name == ' main ': #读原始文件 oriScript = open('f:/视频制作/rawScript.srt','rt') #写目标文件 destScript = open('f:/视频制作/destScript.srt','wt') try: block = '' seqNo = 1 startTime = datetime(1980,1,1,0,0,8) for curLine in oriScript: # print ( len ( curLine )) if curLine . isspace () and len ( block ) > 0 : #本行是空行 destScript . write ( str ( seqNo ) + ' \\n ' ) #写字幕序号 endTime = startTime + timedelta ( seconds = 5 ) #写起止时间： destScript . write ( startTime . strftime ( \" %X \" ) + ' ,0 --> ' + endTime . strftime ( \" %X \" ) + ' ,0 \\n ' ) destScript . write ( block + ' \\n ' ) block = '' #清空缓存 seqNo = seqNo + 1 #序号递增 startTime = endTime #本条的终止时间是下一条的起始时间 else : block = block + curLine #当前行追加到缓存中 finally: oriScript.close() destScript.close()","tags":"Tech","url":"http://leetschau.github.io/zi-dong-sheng-cheng-srtge-shi-de-jiao-ben-pythonshi-xian.html","loc":"http://leetschau.github.io/zi-dong-sheng-cheng-srtge-shi-de-jiao-ben-pythonshi-xian.html"},{"title":"Hudson/Jenkins 笔记","text":"ivy的settings文件在【Manage Hudson->Configure System->Global properties->Environment variables->Add】中设置； build.xml中需要的变量可以在项目的Configure->Build->Advanced->Properties】中添加， 例如： ivy.settings.path=d:/workspace/ivysettings.xml ； 一个job的源代码在该job的【Configure->Source Code Management->Subversion->Modules->Repository URL】中指定， 例如： http://10.0.2.59:8118/svn/godu/Development-Area/3-SCL/Trunk/GAPI ； 发送Email在【Manage Hudson->Configure System->E-mail Notification】中指定， 【SMTP server】指定邮件服务器的IP地址（可用 ping boco.com.cn 获取）， 【System Admin E-mail Address】写上发件人Email地址， 【Advanced->Use SMTP Authentication】下写上发件人的用户名和密码； 如果Hudson服务器设置了安全管理，匿名用户无法管理， 可以将hudson根目录下的config.xml中的 <authorizationStrategy .../> 改为 <authorizationStrategy class=\"hudson.security.AuthorizationStrategy$Unsecured\"/> 2013-05-09更新： 安装为Windows服务：用java -jar jenkins.war启动后在管理界面中点击\"Install as a windows service\"， 安装完毕后在控制面板的服务里可以看到一个名为\"jenkins\"的系统服务，启动类型为\"自动\"， 这样每次启动机器后jenkins服务就自动启动了， 参考 https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service 修改界面语言：Jenkins使用浏览器的语言作为它的界面语言， 所以如果使用IE的话可以通过更改iE的语言配置达到更改Jenkins界面语言的目的： IE菜单->Internet选项->常规->外观->语言，将英语放在语言列表的第一位。 配置邮件帐号： [Jenkins Location -> System Admin e-mail address]中填写管理员email地址，此地址将作为BVT的发送地址； [邮件通知 -> SMTP服务器] 中写邮件服务器的ip地址；勾选\"使用SMTP认证\"，\"用户名\"和\"密码\"填写管理员帐号的用户名和密码； 验证方法：勾选\"通过发送测试邮件测试配置\"，填写\"Test e-mail recipient\"地址，然后点击\"Test configuration\"； 隐藏Disable状态的Project 新建一个View，在[Job Filters -> Status Filter]中选择\"Enabled jobs only\"; Trouble Shooting 如果报找不到Gradle.bat错误，尝试将浏览器默认语言改为中文，Jenkins全局配置的GRADLE_HOME的路径名后面加反斜杠； 如果Gradle构建成功，提取测试结果失败，在项目配置里，Gradle Task中写两个任务：clean和build； install jenkins on Ubuntu install jenkins FAILED following these instructions on jenkins official site: wget - q - O - http : // pkg . jenkins - ci . org / debian / jenkins - ci . org . key | sudo apt - key add - sudo sh - c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list' sudo apt - get update sudo apt - get install jenkins So download jenkins.war manually and start it as following: nohup java - jar jenkins . war 1 > jenkins . log 2 > jenkins . log & reinstall jenkins plugin failed for some reason, so if you upgrade jenkins, you have to: stop jenkins service remove $HOME/.jenkins folder; download new jenkins.war; restart jenkins service. some other dir: /etc/logrotate.d/jenkins /etc/jenkins /etc/default/jenkins /usr/share/jenkins /var/lib/jenkins /var/log/jenkins /opt/jenkins /run/jenkins /root/.jenkins remove jenkins and install new one give some good advices to remove Jenkins completely. 基于Jenkins 1.5。","tags":"Tech","url":"http://leetschau.github.io/hudsonjenkins-bi-ji.html","loc":"http://leetschau.github.io/hudsonjenkins-bi-ji.html"},{"title":"Ivy的配置管理","text":"一个项目的Ivy文件（ivy.xml）主要定义了项目的三部分内容： 项目本身属性：例如开发项目的组织名称，项目名称、项目版本、项目状态、发布日期等； 项目发布产品的定义：逐条列出项目发布的产品，每个产品条目包括：产品名称、产品类型、产品扩展名等； 项目依赖产品的定义：逐条列出产品运行和发布所需要的依赖包的列表，每个依赖包条目包括：该依赖包的组织名、模块名、版本号以及其他特征说明； 为了增加ivy的管理能力以应对复杂的实际应用环境，Ivy提供了配置（configuration）功能，一个配置包含两方面的内容，首先是属于此配置的产品，其次是属于此配置的依赖包。Ivy的依赖管理不是建立在产品的基础上，而是建立在配置的基础上，例如模块（项目）MA的产品AA需要将模块MB的产品AB（jar包）添加到classpath中才能运行，在Ivy文件中不是声明\"AA依赖于AB\"，而是需要声明\"MA的配置CA依赖MB的配置CB\"，也就是在MA的ivy.xml文件中会有： 由于一个配置对应一个产品，因此上面的声明实际意思是说：CA对应的AA依赖于CB对应的AB。产品与配置的对应关系在 标签中声明： Ivy查找jar包的工作过程 以上面的定义为例，MA搜索MBjar包的过程是： 第一步：MA根据项目指定的ivysetting.xml文件中的defaultResolver属性找到用哪个resolver解析MA的ivy.xml文件的dependency条目，这里是chain-repo，它的第一个解析器chain-release的解析模式是：\"${release.repo.dir}/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]\"，所以ivy会去 \"sftp://godu:bocogodu@10.0.2.47:22/opt/ArtifactRepo/ReleaseArea/[organisation]/[module]\" 这个路径下寻找jar包，具体到 这一条目，用OB替换[organisation]，用MB替换[module]，变成了 sftp://godu:bocogodu@10.0.2.47:22/opt/ArtifactRepo/ReleaseArea/OB/MB（后面简写为\"OB/MB\"）； 第二步：找到OB/MB后，根据chain-release下面的ivy pattern的定义，找到下面的ivys文件夹里的ivy-2.1.xml文件，此文件中的 一节中，CB这个配置对应的artifact名称是AB，type是jar，ext是jar，因此chain-release下面的artifact pattern就被翻译成了： \"sftp://godu:bocogodu@10.0.2.47:22/opt/ArtifactRepo/ReleaseArea/OB/MB/jars/AB-2.1.jar\"，这个jar包就被作为MB项目发布的AB这个jar包被MA项目引用了。 如果OB/MB下没有ivys/ivy*.xml文件，则artifact默认值是模块名MB，type是jar，ext是jar，所以当需要向产品库里增加单独的jar包时（不是来自Maven Repository），需要首先确定该包的 org 、 module 、 revision 三个属性，然后将jar包命名为 module - revision .jar放在 org / module /jars目录下即可。 上述ivysettings.xml文件内容如下： 采用这种方式，可以解决以下几种复杂情况。 一个模块发布多个产品 例如模块MB发布了一个制作报表工具，这个工具有一套统一的API，只要调用这套API就能制作出各种各样的报表，包含API和XP风格报表实现的产品名为AB_XP（需要第三方包DEP_XP才能运行），包含API和苹果风格报表的产品名为AB_APPLE （需要第三方包DEP_APPLE才能运行），MB的ivy文件应为（这里DEP_XP和DEP_APPLE分别定义在mod_xp和mod_apple的default配置中）： <?xml version=\"1.0\" encoding=\"UTF-8\"?> 模块MA是一个自动测试工具，测试完成后需要用模块MB提供的工具生成测试结果报告，MA发布两个产品：AA_XP（生成XP风格报表，需引用AB_XP）和AA_APPLE（生成苹果格式的报表，需引用AB_APPLE），则MA的ivy文件应为： <?xml version=\"1.0\" encoding=\"UTF-8\"?> 这样模块MA中的ivy进行解析（resolve）的时候，不仅会引用产品AB_XP和AB_APPLE，也会引用DEP_XP和DEP_APPLE，如果将上面 里的transitive=\"true\"改为transitive=\"false\"，则只引用AB_XP和AB_APPLE，不引用DEP_XP和DEP_APPLE。 产品的部分依赖 假设模块MB的产品AB的功能很多，实现所有功能所依赖的第三方包有50个（dep_1~dep_50），模块MA的产品AA只需要使用AB的一个功能，而这个功能只需要dep_15一个三方包，这时如果采用transitive=\"true\"方式引用AB，则会把所有50个三方包都引入到AB的lib中，体积会很大，用配置就可以在AB中为AA专门定制一个conf，使transitive=\"true\"方式下AA只取AB和dep_15，AB的ivy.xml如下： <?xml version=\"1.0\" encoding=\"UTF-8\"?> ...... ...... 另外一种解决方法是把dep_15手工加到MA的依赖中，这时可为MB建立一个\"Nontransitive\"配置（习惯上称为master）：仅在 里出现，而不出现在 中，实例可参见很多Maven库里第三方包的ivy.xml文件。这样master配置不包含任何依赖，即使写MA的依赖时注明transitive=\"true\"，也引不到任何MB的依赖包。 使用这种master配置要注意的是：在 中所有条目都不能省略conf=\"...\"。当MB的被依赖项目之一dep_x只有jar包没有ivy配置时，如果省略conf部分，则该依赖对所有配置生效（包括master），这时MB的master就不完全是\"Nontransitive\"了，而是包括省略conf的条目（dep_x），如果MA依赖MB的master，就会把dep_x也引过来，解决办法就是在MB的 的dep_x条目中标明：conf=\"compile-> \"（其中compile是用于MB自己编译的配置）。 依赖配置的通配和后备机制 在依赖配置中，如果被依赖的项目只有jar包，没有ivy配置，或者不清楚被依赖项目的配置情况，可用星号（\" \"）表示任何配置，例如：conf=\"compile->*\"； 如果被依赖项目可能有master配置，可用后备配置：conf=\"compile->master(*)\"，即当master配置不存在时，使用任何配置。","tags":"Tech","url":"http://leetschau.github.io/ivyde-pei-zhi-guan-li.html","loc":"http://leetschau.github.io/ivyde-pei-zhi-guan-li.html"},{"title":"ivy异常处理经验总结","text":"问题描述 ：找不到配置（2010年12月2日出现并解决） GAPI依赖GODU，在GODU的ivy.xml里添加了新的configuration，名为gapi_runtime，然后重新publish到产品仓库中，然后让GAPI依赖GODU的 gapi_runtime，即：","tags":"Tech","url":"http://leetschau.github.io/ivyyi-chang-chu-li-jing-yan-zong-jie.html","loc":"http://leetschau.github.io/ivyyi-chang-chu-li-jing-yan-zong-jie.html"},{"title":"Eclipse编辑器配色的配置文件","text":"基本编辑器配色： \\({workspace}\\.metadata\\.plugins\\org.eclipse.core.runtime\\.settings\\org.eclipse.ui.editors.prefs Java语法配色：\\) .metadata.plugins\\org.eclipse.core.runtime.settings\\org.eclipse.jdt.ui.prefs XML语法配色： \\({workspace}\\.metadata\\.plugins\\org.eclipse.core.runtime\\.settings\\org.eclipse.wst.xml.ui.prefs Python语法配色（仅在安装了Pydev插件后有效）：\\) .metadata.plugins\\org.eclipse.core.runtime.settings\\org.python.pydev.prefs 手工配好编辑器颜色后（参见博文\"手工设置Eclipse文本编辑器的配色\"），将以上文件保存起来，对于一个新的Workspace，用以上文件覆盖自动生成的文件即可。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/eclipsebian-ji-qi-pei-se-de-pei-zhi-wen-jian.html","loc":"http://leetschau.github.io/eclipsebian-ji-qi-pei-se-de-pei-zhi-wen-jian.html"},{"title":"手工设置Eclipse文本编辑器的配色","text":"Eclipse中不同的文件都有自己专门的编辑器配色设置，下面分别说明。 文本编辑器的背景色： Window->Preferences-> General->Editors->Text Editors->Appearance color options->Background color； java文件：Window->Preferences->Java->Editor->Syntax Coloring； properties文件：Window->Preferences->Java->Properties Files Editor； python文件：安装Pydev插件后，Window->Preferences->Pydev->Editor； 被标记的变量的背景色在Window->Preferences->Editors->Text Editors->Annotations->Occurrences(Pydev)中设置； Eclipse默认的配色还不错，就是白色的背景太亮了，将背景色调成浅灰色（红绿蓝都设为233）即可。","tags":"Tech","url":"http://leetschau.github.io/shou-gong-she-zhi-eclipsewen-ben-bian-ji-qi-de-pei-se.html","loc":"http://leetschau.github.io/shou-gong-she-zhi-eclipsewen-ben-bian-ji-qi-de-pei-se.html"},{"title":"中文Windows上安装Jython字符串处理异常的解决办法","text":"The Jython console didn't work properly on my Chinese version Windows XP. It can not interprete the strings properly. e.g. print \"hello world\" .... Looks like it's looking for a futher input. After I input a '\\n', ther console crashed and complains LookupError: unknown encoding 'gb18030'. This error never happens on the English version Windows XP. So, this problem definitely caused by the system default encoding. With a few hours study for the JVM & the Jython encoding setting, I found 2 solutions. 1) Change the JVM default character encoding Start up the jython with option -Dfile.encoding=UTF8,then the Jython console's encoding will be UTF8 as well. e.g. jython - Dfile . encoding = UTF8 For change the JVM encoding automatically, you can also create one environment variable JAVA_TOOL_OPTIONS to -Dfile.encoding=UTF8. e.g. set JAVA_TOOL_OPTIONS = \"-Dfile.encoding=UTF8\" 2) Change the Jython console character encoding Start up the jython with option -Dpython.console.encoding=UTF8 e.g. jython - Dpython . console . encoding = UTF8 Or add this setting in the Jython registry file. On my laptop, the file is C:\\jython25\\registry Now, you enjoy. 2013-03-19更新 命令行输出 java -jar -Dpython.console.encoding=UTF-8 jython-2.5.3.jar 执行文件 java -jar -Dfile.encoding=UTF-8 jython-2.5.3.jar test.txt 目前都不能输入汉字","tags":"Tech","url":"http://leetschau.github.io/zhong-wen-windowsshang-an-zhuang-jythonzi-fu-chuan-chu-li-yi-chang-de-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/zhong-wen-windowsshang-an-zhuang-jythonzi-fu-chuan-chu-li-yi-chang-de-jie-jue-ban-fa.html"},{"title":"客户端socket连接的106号错误分析","text":"Python的socket模块提供了基于socket的网络连接方法，分为server端和client端，在python2.6中，使用server需依次调用下面的方法： socket(), bind(), listen(), accept()，其中socket方法是构造函数，可多次调用accept()方法与多个client通信。使用client依次调用 socket()和connect()方法即可。 如果一个client已经用connect()或者connect_ex()方法连接了，在没有close()的情况下再次 connect()或者connect_ex()，则会出现106号错误： Python: Socket Error 106: 'Transport endpoint is already connected'，connect()方法抛出106号异常，而connect_ex()方法返回值为106（连接成功的返回值为0），解决方法是每次连接时创建一个新的socket，或者先调用close()关闭后再连接。 用connect_ex((host, port))探测端口是否绑定不是很可靠，除了上述106错误外，还有111,即连接被拒绝，建议使用\"nc -z host port\"代替，不过需要操作系统有netcat，支持nc指令。","tags":"Tech","url":"http://leetschau.github.io/ke-hu-duan-socketlian-jie-de-106hao-cuo-wu-fen-xi.html","loc":"http://leetschau.github.io/ke-hu-duan-socketlian-jie-de-106hao-cuo-wu-fen-xi.html"},{"title":"用Gnucash做财务分析","text":"财务分析主要目的是搞清楚一段时间内支出的去向，某类消费所占的比重有多少，主要用到的工具是 Reports->Income & Expense目录下的Expense Barchart、Expense Piechart、Income Barchart和Income Piechart四项。 其中Barchart是饼图，用来分析总体收入/支出中各种成分所占的比重，Barchart是柱状图，以时间为横轴，以支出金额为纵轴，显示各种消费成分随时间的变化。 对于每一个分析图，都可以指定分析的时间段、消费种类的数量（例如一共有8种支出类型，但Barchart报告的\"Max Bar\"设为5，则消费量最少的4中类型合起来作为Other显示在柱状图中）、目标账户（account），以及图的高度、宽度等，Barchart还可以指定时间单位，选择以日/周/月/季度/年为单位。还可以用Print将报告打印出来，Export功能输出的是空的html文档，可能目前这个功能还没实现？ Gnucash的资金流报告工具也很有用：Reports->Income & Expense->Cash Flow，生成指定账户（account）资金的流入/流出报告。资金流报告适于具体分析某一账户（如针对日常用品支出，现金付账了多少，信用卡付账了多少），但不适用于分析整体支出状况（如日常用品与其他类型支出的对比占多大比重），这方面用Piechart分析最合适。","tags":"Tech","url":"http://leetschau.github.io/yong-gnucashzuo-cai-wu-fen-xi.html","loc":"http://leetschau.github.io/yong-gnucashzuo-cai-wu-fen-xi.html"},{"title":"Python代码的打包和部署工具","text":"setuptools，详情google: python setuptools 等同于java中的jar，python叫作egg，也就是\"蛇蛋\" 与java中classpath对应的概念是sys.path","tags":"Tech","url":"http://leetschau.github.io/pythondai-ma-de-da-bao-he-bu-shu-gong-ju.html","loc":"http://leetschau.github.io/pythondai-ma-de-da-bao-he-bu-shu-gong-ju.html"},{"title":"Eclipse的变量标记开关","text":"例如有如下代码： int var_a = 0; int var_b = var_a + 2; 当光标在var_a变量上时，Eclipse会将代码进行如下标记： int var_a = 0; int var_b = var_a + 2; 这一特性在编写和分析代码时很有用，当这一功能关闭时，用如下方法打开此功能： Eclipse菜单->Window->Preferences->Java->Editor->Mark Occurences，勾选\"Mark occurences of the selected element in the current file\"以及下面的所有选项。","tags":"Tech","url":"http://leetschau.github.io/eclipsede-bian-liang-biao-ji-kai-guan.html","loc":"http://leetschau.github.io/eclipsede-bian-liang-biao-ji-kai-guan.html"},{"title":"Ivy使用手册","text":"安装和配置 安装 Ivy 下载并解压 Ivy-2.2.0 ； Eclipse->Window->Preferences->Ant->Runtime->Global Entries->Add External JARs ，添加 IVY 压缩包里的 ivy-2.2.0.jar 和 jsch-0.1.31.jar 。 安装 IvyDE Eclipse->Help->Install New Software->Add->Location 设为： http://www.apache.org/dist/ant/ivyde/updatesite 根据要求完成后续安装过程。 配置 Ivy Eclipse->Window->Preferences->Ivy->Settings->Ivy settings path 设为： ${project_loc}/ivysettings.xml 开发过程改进 项目根目录下将不再有 lib 文件夹，相应地两个文件： ivy.xml 和 ivysettings.xml ，开发人员在 ivy.xml 中声明本项目依赖的包（包括第三方包和其他项目的发布包）， ivysettings.xml 定义项目共享库的位置以及从库中获取包的方法。这两个文件由共享库管理员维护，通过 SVN 保持项目成员间的一致。 classpath 整合 使用 Ivy 的第一步是将 Ivy 管理的依赖包整合进项目的 classpath 中，首先将项目依赖写入 ivy.xml 文件，然后设置项目属性： Java Build Path->Libraries->Add Library->IvyDE Managed Dependencies ，后面使用默认设置即可。 依赖管理 开发过程中需要增加依赖包时，根据包的类型不同分两种情况分别说明。 引用第三方包 以 dom4j-1.6.1 为例，在 Maven 共享库 上搜索\" dom4j \"，选择搜索结果中的\" dom4j>dom4j \"，点击进入后选择 1.6.1 版，点击进入后找到\" Apache Ivy \"，将下面的内容（依赖说明） 拷贝到 ivy.xml 中，并增加\" transitive=\"false\" \"（以避免下载 dom4j 的依赖包）： 保存文件后如果出现\"包无法解析\"错误，说明共享库中没有此三方包，需要将依赖说明发给共享库管理员，由其更新共享库后重新解析即可。 引用项目发布包 在 ivy.xml 中添加： 定义项目发布包 定义本项目所发布的产品，以便于其他项目引用，在 ivy.xml 的 publications 部分声明产品名称、类型、扩展名等，例如： 发布过程改进 打包脚本 纯 Ant 打包脚本向 Ant+Ivy 打包脚本迁移非常简单，只要在编译任务开始前增加\"获取\"任务，其他完全保持不变： 通过修改 pattern 属性，可以将依赖包在 lib 文件夹里以不同的方式组织，例如安装\"类型\"属性分文件夹放置： pattern=\"${lib.dir}/[type]/[artifact].[ext]\" 发布项目产品 在 ant 脚本中添加以下任务： <ivy:publish artifactspattern=\"${build.dist.dir}/[artifact].[ext]\" resolver = \" \" status = \" \" pubrevision = \" \" /> release 发布时， status=release ，非 release 发布时，去掉 status 和 pubrevision 属性。","tags":"Tech","url":"http://leetschau.github.io/ivyshi-yong-shou-ce.html","loc":"http://leetschau.github.io/ivyshi-yong-shou-ce.html"},{"title":"UNIX中上安装软件","text":"需要在Unix上运行ant，以下过程以安装apache-ant-1.8.1-bin.zip为例。 解压并上传软件文件夹（由于Unix上解压比较麻烦，最好在本机上解压后用 SecureFX上传 ） 设置环境变量 cd （回到 \\(HOME目录下） vi .profile （编辑定义文件），如果是bash，则该文件名为.bash_profile 在文件末尾加上： ANT_HOME=/home/boco/dist-repo/apache-ant-1.8.1 （设置变量） export ANT_HOME （使该变量变为全局变量） PATH=\\) PATH:${ANT_HOME}/bin （注意Unix的分隔符为冒号） 使更新生效： . .profile （点，空格，点profile） 为ant赋予运行权限 cd ${ANT_HOME}/bin chmod 755 ant 注1：要查询一个环境变量的值，用 echo $ANT_HOME ； 注2：文件操作最好在SecureFX上进行。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/unixzhong-shang-an-zhuang-ruan-jian.html","loc":"http://leetschau.github.io/unixzhong-shang-an-zhuang-ruan-jian.html"},{"title":"用IvyDE整合Ivy与Eclipse","text":"IvyDE的安装 采用 自动安装方式 安装 IvyDE（ 手工安装方式 失败， 原因不清楚 ）； 将Ivy依赖加入到项目的classpath中 例如项目A依赖项目B的方法，由于项目B没有被加入到classpath中，A里使用B项目的方法就会被标记为\"无法解析\"，解决方法是将ivy声明的依赖包加入到classpath中，详细过程在 这里 ，IvyDE使用的方法是先将依赖包下载到本地的Ivy Cache里，然后加入到classpath中；","tags":"Tech","url":"http://leetschau.github.io/yong-ivydezheng-he-ivyyu-eclipse.html","loc":"http://leetschau.github.io/yong-ivydezheng-he-ivyyu-eclipse.html"},{"title":"基于ANT-IVY的自动构建系统的使用规范","text":"安装Eclipse的IvyDE插件，选择\"自动安装\"模式； Eclipse->Window->Preferences->Ivy->Settings->Ivy settings path: ${project_loc}/ivysettings.xml 当开发者需要添加新的依赖包时： 向库管提出要求； 库管 将三方包下载到共享库中； 库管更新ivy.xml文件； 开发阶段尽量不要更新产品库。开发阶段代码更新频繁，功能不稳定，这一阶段构建的jar包尽量不要提交到产品库（ivy:publish），以保证其他依赖项目使用的jar包是稳定的； 构建最终发布包时，所有开发项目要向产品库进行提交，保证库中得到产品是最终版；","tags":"Tech","url":"http://leetschau.github.io/ji-yu-ant-ivyde-zi-dong-gou-jian-xi-tong-de-shi-yong-gui-fan.html","loc":"http://leetschau.github.io/ji-yu-ant-ivyde-zi-dong-gou-jian-xi-tong-de-shi-yong-gui-fan.html"},{"title":"使用sftp连接Ivy库时缺包异常的处理方法","text":"使用sftp resolver时出现 java.lang. NoClassDefFoundError : com/jcraft/jsch/JSchExceptio 异常的处理方法： 命令行：将 \\({IVY_HOME}/lib/jsch-0.1.31.jar拷贝到\\) /lib下； Eclipse中：用Window->Preference->Ant->Runtime->Global Entries->Add External JARs加 jsch-0.1.31.jar； 异常出现的ivy文件（文件名：ivysettings.xml）： if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/shi-yong-sftplian-jie-ivyku-shi-que-bao-yi-chang-de-chu-li-fang-fa.html","loc":"http://leetschau.github.io/shi-yong-sftplian-jie-ivyku-shi-que-bao-yi-chang-de-chu-li-fang-fa.html"},{"title":"本机Ivy库的访问设置","text":"以下是ivysettings.xml文件内容（注意绝对路径的写法）：","tags":"Tech","url":"http://leetschau.github.io/ben-ji-ivyku-de-fang-wen-she-zhi.html","loc":"http://leetschau.github.io/ben-ji-ivyku-de-fang-wen-she-zhi.html"},{"title":"示例创建过程","text":"在47上上传库目录； 项目根目录下创建 build.xml、 ivy.xml、 settings文件夹（包含 ivysettings.xml文件）； 修改 build.xml文件： 配置文件位置：name=\"ivy.settings.dir\" value=\"./settings\" 修改ivysettings.xml文件： resolver类型和位置： 修改ivysettings.properties文件： repository.dir=sftp://10.0.2.47/home/boco/dist-repo/repository","tags":"Tech","url":"http://leetschau.github.io/shi-li-chuang-jian-guo-cheng.html","loc":"http://leetschau.github.io/shi-li-chuang-jian-guo-cheng.html"},{"title":"Ivy文件说明","text":"ivy.xml文件 此文件用来定义某个模块（module）的依赖情况； 表明该文件使用的哪个版本的ivy语法； 域说明是这个xml文件定义的是哪个module的依赖； 依赖的声明方法：在http://mvnrepository.com/搜索到要用的第三方包后，点击\"detail\"可以看到它在ivy中如何引用（ ... 标签说明自己开发的项目要发布的包（一般是jar文件），可为每个包定义一个所属的配置（configuration），以便于别人使用（参见tutorial->Using Ivy Module Configurations）； 可在此文件中自 定义 标签，以便于在dependency中使用，参见Ivy文档：Documentation (2.2.0) > Reference > Introduction > Main Concepts > Extra attributes； build.xml文件 只有声明了xmlns...，才能使用ivy指令（ivy ant task，如 、 之类）； ivy指令中，install用来从公共库中下载包到企业库中，resolve用来从企业库中获取包到本地ivy缓存（cache）中，retrieve用来从本地缓存取包到本地开发环境（project workspace）中，publish将本地编译好的包放入企业库中供其他项目使用； retrieve命令在脱离Eclipse环境下使用时需要先运行resolve命令，例如Eclipse下在javac之前需要如下任务： \\({lib.dir}/[artifact]-[Revision].[ext]\" /> </target> 脱离Eclipse之后应写为如下形式： <target name= \"resolve\" depends= \"init\" description= \"...\" > <ivy:resolve file= \"./ivy_file.xml\" /> <ivy:retrieve pattern= \"\\) {lib.dir}/[artifact]-[Revision].[ext]\" /> ivysettings.xml文件 resolvers链是在 resolvers标签的chain子标签 中定义的，一个artifact会用这个链中的resolver依次查找； resolver的功能包括两部分：一是寻找依赖项目的ivy文件，二是寻找依赖项目的产品（artifact）；resolver确定了库的位置，常见的有IBiblio resolver（从maven库中取包）、sftp resolver（企业架设共享库服务器）和FileSystem resolver（本机上的库）三种； 如果出现模块描述文件（module descriptions，如ivy文件）与产品（module artifacts，如jars）分离的情况，可在本文件中用dual标签定义各自的位置； properties标签从一个properties文件里提取值保存到变量中，这是一种灵活且方便的设置变量的方法； settings标签进行一些初始化工作，例如cache目录位置的定义、定义默认resolver等； modules标签定义哪个module使用哪个resolver（发布时有用），未提及的module使用默认resolver，使用这个标签可以为项目自制产品定义专门的resolver，例如： < modules > < module organisation = \"com.boco\" name = \"g*\" matcher = \"glob\" resolver = \"home-made\" /> if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ivywen-jian-shuo-ming.html","loc":"http://leetschau.github.io/ivywen-jian-shuo-ming.html"},{"title":"Ivy入门笔记","text":"安装过程 命令行安装 下载和安装JDK5、Eclipse3.5、Ant 1.8、Ivy 2.2； 安装JDK：成功标志：在命令行下运行java命令，得到java命令行帮助； 安装Ant：解压Ant，在系统环境变量中设置JAVA_HOME（例如c:\\Program Files\\Java\\jdk1.5.0_22）、ANT_HOME，将 \\({ANT_HOME}/bin加入到path中；成功标志：在命令行下运行ant命令得到\"Buildfile: build.xml does not exist!...\"； 在Eclipse里建两个项目，其中A引用B的方法； 安装ivy：解压ivy，设置环境变量IVY_HOME，将ivy-2.2.0.jar拷贝到\\) /lib目录中，在${IVY_HOME}\\src\\example\\hello-ivy下运行ant，如果出现\"BUILD SUCCESSFUL\"，说明IVY安装成功； eclipse中的安装 eclipse->Window->Preferences->Ant->Runtime->Global Entries->Add External JARs，选中IVY压缩包里的ivy-2.2.0.jar，测试： Eclipse中新建一个项目，在此项目下新建一个build.xml文件，内容为： <? xml version = \"1.0\" encoding = \"UTF-8\" ?> < project name = \"project\" default = \"default\" xmlns:ivy = \"antlib:org.apache.ivy.ant\" > < taskdef resource = \"org/apache/ivy/ant/antlib.xml\" uri = \"antlib:org.apache.ivy.ant\" /> < target name = \"default\" > < ivy:settings /> < ivy:info organisation = \"org.apache.ivy\" module = \"ivy\" revision = \"2.0.0\" property = \"ivyinfo\" /> < echoproperties prefix = \"ivyinfo\" /> 运行此文件，如果显示\" BUILD SUCCESSFUL \"说明安装成功； 采用自动安装方法安装IvyDE，手动安装失败，原因不清楚； Eclipse中的实验用例采用Ivy发布包自带例子中的dependence； 常用术语 被依赖项目：dependee(parent) 依赖源项目：depender(child) 其他 如果是用ant执行ivy，Build.xml文件中定义的变量可以在ivy.xml文件中直接使用，典型的例子见${IVY_HOME}\\src\\example\\dependence中，在depender和dependee的build.xml文件中定义\"ivy.settings.dir\"，在ivysettings.xml文件中直接使用该变量； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ivyru-men-bi-ji.html","loc":"http://leetschau.github.io/ivyru-men-bi-ji.html"},{"title":"开发流程改进","text":"测试驱动 重视测试计划评审会。测试部会根据自己对需求文档的理解形成自己的测试计划，然后根据测试计划生成测试用例，详见QC平台； 自动打包和自动测试问题 开发过程中全局变量和接口的统一问题","tags":"Tech","url":"http://leetschau.github.io/kai-fa-liu-cheng-gai-jin.html","loc":"http://leetschau.github.io/kai-fa-liu-cheng-gai-jin.html"},{"title":"GnuCash笔记","text":"【Actions->Transfer】，箭头左边是transfer from，右边是transfer to。 现金消费：钱包里的现金（资产）->支出 工资收入：工资（收入）->XX银行（资产） 信用卡： 消费： XX 信用卡->支出 用储蓄卡还款：XX银行（资产）->XX信用卡（负债） 现金还款： 钱包里的现金（资产）-> XX信用卡（负债） 参考： 阿潘道 » 花了一个周末，搞定GnuCash之信用卡和个人借贷 阿潘道 » 再战GnuCash之基本买卖交易","tags":"Tech","url":"http://leetschau.github.io/gnucashbi-ji.html","loc":"http://leetschau.github.io/gnucashbi-ji.html"},{"title":"计算总值的Ultraedit脚本","text":"// 使用方法：首先在一个空文本文件总写上需要做和的数字，每个数一行，选中所有数字，然后运行本脚本 var lineTerminator = \"\\r\\n\"; var str = UltraEdit.activeDocument.selection; var resultArr = new Array(); resultArr = str.split(lineTerminator); var itemCnt = resultArr.length; var total = 0; for (var i = 0; i < itemCnt; i++) { total = total+parseFloat(resultArr[i]); } UltraEdit.activeDocument.bottom(); UltraEdit.activeDocument.write(\"\\r\\n======================\\r\\n\"); UltraEdit.activeDocument.write(\"Total value is: \" + total + \" Yuan.\\r\\n\"); UltraEdit.activeDocument.write(\"Totally \"+itemCnt+\" items in the list.\"); //UltraEdit.outputWindow.write(\"Total value is: \" + total + \" Yuan.\"); //UltraEdit.outputWindow.write(\"Totally \"+itemCnt+\" items in the list.\");","tags":"Tech","url":"http://leetschau.github.io/ji-suan-zong-zhi-de-ultraeditjiao-ben.html","loc":"http://leetschau.github.io/ji-suan-zong-zhi-de-ultraeditjiao-ben.html"},{"title":"怎样获取计算机上次启动时间","text":"有时候需要知道最近一次电脑的启动时间（或者关闭时间），在Windows XP下，有两种方法可以得到这个信息。 事件查看器方法 【控制面板->管理工具->事件查看器->系统（ 在左边的窗口中，Win7下是在\"Windows日志\"下 ）->右键->属性】，在打开的【系统属性】窗口中选择【筛选器】，在【事件类型】下面 仅 选中【信息】复选项，并在【事件来源】列表中选择【eventlog】项，【确定】返回事件查看器。右边的窗口中，【事件】下面为6005的表示开机，6006表示关机。基本上可以查看最近3个月以来计算机的开/关机记录。 日志文件方法 【开始->运行】里输入\"schedlgu.txt\"，在打开的文件里搜索\"任务计划程序服务\"，下面的一行就是计算机 开/关机记录。下面是一个样例： …… \"任务计划程序服务\" 已退出于 2010-10-12 18:21:45 \"任务计划程序服务\" 已启动于 2010-10-13 8:11:11 …… 注：Notepad++ v5.6/5.7的中文搜索好像有问题，经常出现搜不到的情况，如果搜不到 \"任务计划程序服务\"这个字符串，可以用其他文本编辑器（如Vim、UE等）试试。","tags":"Tech","url":"http://leetschau.github.io/zen-yang-huo-qu-ji-suan-ji-shang-ci-qi-dong-shi-jian.html","loc":"http://leetschau.github.io/zen-yang-huo-qu-ji-suan-ji-shang-ci-qi-dong-shi-jian.html"},{"title":"Javadoc中插入超链接","text":"Javadoc中插入的超链接可分为两类，一类是在@see 标记后面写上class_qualified_name#method_name，编译后的效果是\"另请参见……\"，例如 @see com.boco.godu.gapi.IResult#getByteArray() 编译后得到： 另请参见： IResult.getByteArray() 另一类是使用html的语法插入超链接，例如超链接是 样例 ，被指向的地方是 场景一：查看网元磁盘空间（数据端口的同步场景） ，这样就可以实现指向一个html文件的某一小节。","tags":"Tech","url":"http://leetschau.github.io/javadoczhong-cha-ru-chao-lian-jie.html","loc":"http://leetschau.github.io/javadoczhong-cha-ru-chao-lian-jie.html"},{"title":"字符编解码的故事","text":"本文为转载，有少许修订，原文出处不详。 很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们认为8个开关状态作为原子单位很好，于是他们把这称为\"字节\"。 再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出更多的状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为\"计算机\"。 开始计算机只在美国用。八位的字节一共可以组合出256（2的8次方）种不同的状态。 他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端设备或者打印机遇上这些约定好的字节时，就要做一些约定的动作。遇上 00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，对于终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20（十进制32）以下的字节状态称为\"控制码\"。 他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的 文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的\"Ascii\"编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。 后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们用到的许多字母在ASCII中根本没有，为了也可以在计算机中保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称\"扩展字符集\"。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！ 等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉，并且规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做\"GB2312\"。GB2312 是对 ASCII 的中文扩展。 但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人（如朱镕基的\"镕\"字）。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准（https://en.wikipedia.org/wiki/Windows-936），GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。 后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。 中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 \"DBCS\"（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍： \"一个汉字算两个英文字符！一个汉字算两个英文字符……\" 因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个\"汉字系统\"，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么\"倚天汉字系统\"才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 真是计算机的巴比伦塔命题啊！ 正在这时，大天使加百列及时出现了 —— 一个叫ISO（国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它\"Universal Multiple-Octet Coded Character Set\"，简称 UCS, 俗称 \"UNICODE\"。 UNICODE 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些\"半角\"字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于\"半角\"英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。 这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是 的，从 UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的\"一个字符\"！同时，也都是统一的\"两个字节\"，请注意\"字符\"和\"字节\"两个术语的不同， \"字节\"是一个8位的物理存贮单元，而\"字符\"则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。 从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 UNICODE 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。 但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。 如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立那一天吧！ UNICODE 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到 UTF时并不是直接的对应，而是要过一些算法和规则来转换。 受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的 INTEL 架构；而另一些是采用高位先发送的方式。在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符——如果之后的文本是高位在位，那就发送\"FEFF\"，反之，则发送\"FFFE\"。不信你可以用二进制方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？ 从UNICODE到UTF8的转换规则（见 Unicode, UTF-8 tutorial ） ： Unicode UTF-8 0000 - 007F 0xxxxxxx 0080 - 07FF 110xxxxx 10xxxxxx 0800 - FFFF 1110xxxx 10xxxxxx 10xxxxxx 例如\"汉\"字的Unicode编码是6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。这个过程的代码实现见笔记 Unicode到UTF-8编码转换的Java实现 。 讲到这里，我们再顺便说说一个很著名的奇怪现象：当你在 windows 的记事本里新建一个文件，输入\"联通\"两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。 其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。 当一个软件打开一个文本时，它要做的第一件事是决定这个文本究竟是使用哪种字符集的哪种编码保存的。软件一般采用三种方式来决定文本的字符集和编码： 检测文件头标识，提示用户选择，根据一定的规则猜测 最标准的途径是检测文本最开头的几个字节，开头字节 Charset/encoding,如下表： EF BB BF UTF-8 FE FF UTF-16/UCS-2, little endian FF FE UTF-16/UCS-2, big endian FF FE 00 00 UTF-32/UCS-4, little endian. 00 00 FE FF UTF-32/UCS-4, big-endian. 当你新建一个文本文件时，记事本的编码默认是ANSI（代表系统默认编码，在中文系统中一般是GB系列编码）, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，\"联通\"的内码是： c1 1100 0001 aa 1010 1010 cd 1100 1101 a8 1010 1000 注意到了吗？第一二个字节、第三四个字节的起始部分的都是\"110\"和\"10\"，正好与UTF8规则里的两字节模板是一致的， 于是当我们再次打开记事本时，记事本就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了\"00001 101010\"，再把各位对齐，补上前导的0，就得到了\"0000 0000 0110 1010\"，不好意思，这是UNICODE的006A，也就是小写的字母\"j\"，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有\"联通\"两个字的文件没有办法在记事本里正常显示的原因。 而如果你在\"联通\"之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。 2012-8-9补充：汉字基本都在Unicode区间的4E00~9FA5，所以所以UTF-8编码后一定是3个字节，不可能是2个字节。 完整的Unicode字符编码表见Unicode官网的 Code Charts 。","tags":"Tech","url":"http://leetschau.github.io/zi-fu-bian-jie-ma-de-gu-shi.html","loc":"http://leetschau.github.io/zi-fu-bian-jie-ma-de-gu-shi.html"},{"title":"文字的编码问题","text":"我们需要将文字保存在磁盘上，但磁盘上只能存储0和1（实际上是存储介质的两种状态），不能存储文字，这就出现了一个问题，如何将文字转换为二进制数字串？ 文件的编码/解码就是解决文字<=>二进制串这一环节如何相互转换的问题。 简单地说，GBK和Unicode分别是一种码表，也就是为每一个字符指定一个两个字节组成的代码，例如 \"汉\"字的Unicode编码为0x6C49，GBK编码为0xBABA（0x是一个字头，表示后面的是16进制字串）。 Unicode编码 Unicode由ISO（国际标谁化组织）制定，它虽然解决了各种语言之间转换的难题，但也有问题，首先是不论什么字符都2个字节表示，网络上英文信息占大部分，由此造成的空间浪费很可观，其次是 Unicode不兼容ASCII编码方案，为了解决这些问题，出现了 UTF-8方案。 Unicode到UTF-8的转换方法详见 字符编解码的故事 。 GBK编码 GBK编码规则：《汉字内码扩展规范(GBK)》（ 全国信息技术标准化技术委员会 ）： 01-09区为特殊符号；16-55区为一级汉字，按拼音排序；56-87区为二级汉字，按部首/笔画排序。 每个汉字及符号以两个字节来表示。第一个字节称为\"高位字节\"，第二个字节称为\"低位字节\"，用这个字的区、位号加上0xA0就得到了对应的字节码。例如\"啊\"字是 第16区第1个字，所以 区位码是 1601 ， 编码方法：0xA0+ 16 = 0x B0 ， 0xA0+ 1 = 0x A1 ，所以得到\"啊\"的 字节码 B0A1 ，可以用UltraEdit查看字符的字节码验证。 GB2312是GBK的早期版本，能表示6000个汉字，由于容量较小，现已被GBK取代。 解码过程 在Windows系统中打开文件时，使用猜的方式选择解码方案。如果文件开头使用了FEFF或FFFE，就认为是Unicode/UTF-8编码，否则为ANSI编码，在中文系统下，就是用GBK解码。GBK解码时，如果一个字节大于 0x7F（ 127），就证明这个字节与后面的字节组成了一个汉字，由于汉字的字节码总大于0xA0，英文字节码总小于 0x7F ，因此二者泾渭分明，不会混淆。 用猜的方式确定文件的编码方案绝大多数情况下没有问题，但凡事总有特例，详见 字符编解码的故事 对\"联通\"编码/解码过程的说明。","tags":"Tech","url":"http://leetschau.github.io/wen-zi-de-bian-ma-wen-ti.html","loc":"http://leetschau.github.io/wen-zi-de-bian-ma-wen-ti.html"},{"title":"用Python做不同进制间的数字转换","text":"将其他进制数字转换为10进制数字 调用Python内置int()函数把该字串转为数字。以下为在Python解释器编程环境下的操作示范： 把十六进制的字串转为十进制数字： int('ff', 16) 255 把十进制数字转换为以十六进制表示之字串 调用内置的hex()函数： hex(255) '0xff ' 文字和十六进制数字的互相转换 调用BinAscii模块其中的b2a_hex()函数，可把以ASCII编码的文字以十六进制表示： import binascii print binascii.b2a_hex('联通') c1aacda8 反之也可把以十六进制表示的文字，换成以ASCII编码的文字： print binascii.a2b_hex('baba') 汉","tags":"Tech","url":"http://leetschau.github.io/yong-pythonzuo-bu-tong-jin-zhi-jian-de-shu-zi-zhuan-huan.html","loc":"http://leetschau.github.io/yong-pythonzuo-bu-tong-jin-zhi-jian-de-shu-zi-zhuan-huan.html"},{"title":"UNIX文件的编码问题","text":"根据目前的实验结果，在Windows下生成的ANSI编码文件转为Unix格式后，Unix脚本（例如用awk命令取该文件某一行的某一段数据）可以正确读取； Windows下生成的UTF-8编码文件转为Unix格式后， Unix脚本不能正确读取，因此日志文件在Notepad++中打开后，应为Unix, ANSI格式，在Ultraedit中应为Unix格式，而不是U8-UNIX格式。","tags":"Tech","url":"http://leetschau.github.io/unixwen-jian-de-bian-ma-wen-ti.html","loc":"http://leetschau.github.io/unixwen-jian-de-bian-ma-wen-ti.html"},{"title":"技术类书籍读书笔记撰写内容","text":"1 这本书的主要内容是什么？ 1.1 概括这本书主要内容的关键字； 1.2 用尽量简短的句子说明这本书在说什么； 1.3 列出这本书的大纲，以及各部分之间的关系； 1.4 确定作者想要解决的问题； 2 我从这本书中得到了什么？ 2.1 我希望通过这本书解决什么（哪些）问题？ 2.2 针对这个（这些）问题此书是怎么论述的？（读书笔记的主体部分） 2.3 此书的论述与我的问题相关度如何？还有哪些地方本书没有涉及？ 2.4 简要叙述此书还有哪些有价值的信息？","tags":"Tech","url":"http://leetschau.github.io/ji-zhu-lei-shu-ji-du-shu-bi-ji-zhuan-xie-nei-rong.html","loc":"http://leetschau.github.io/ji-zhu-lei-shu-ji-du-shu-bi-ji-zhuan-xie-nei-rong.html"},{"title":"网络通信框架选型","text":"事件驱动的异步IO通信框架 Apache Mina , JBoss Netty , Grizzly (Java), Twisted , gevent (python), eventmachine (Ruby), POE (Perl), Node.js (JavaScript), libevent (C) 各框架实现的Echo Server Twisted , libevent (不是echo server，但讲了很多基础知识), gevent , eventmachine , Node.js , Netty , Grizzly , POE ，按先后顺序进行学习。 选型的依据： 功能： 截取模式： Mina: Filter-Handler; Netty/Grizzly: Handler only 支持的Filter/Handler： Mina: blacklist filters, compression filters, connection throttling filters, SSL filters, logging filters, protocol codecs such as delimiter based, and HTTP. Grizzly provides support for SSL, custom protocol codecs, logging, and HTTP; Netty: Base64 encoding/decoding, delimiter based codecs, fixed length codecs, HTTP handlers, logging handlers, Java object serialization/deserialization codecs, Google Protocol Buffer codecs, SSL handlers, simple string codecs, and handlers used to control bandwidth, traffic shaping, etc. There are also several utility handlers that may be used to build custom handlers such as a replay handler, timeout handler , frame decoder, etc;（Netty在支持基于已有的Handler构建用户Handler方面更灵活） 高级缓存 Netty: ChannelBuffer中封装了多个ByteBuffer实例的引用（而非拷贝），支持zero copy，支持标记与重设\"读指针\"(Reader)索引，支持搜索、切片、读写不同类型数据； Mina: 与Netty基本类似，但不支持zero copy（在Mina 3中实现）； Socket and Protocol Independence 三者均支持，使通信框架底层技术变化（例如从NIO向AIO过渡）时，无需更新业务逻辑代码； 可定制的协议与POJO 三者均支持，POJO在网络传输中的作用是什么？ 线程模型 三者均使用线程池模型，应付高并发能力良好； 性能： 速度：MINA能够满足要求（并发800+），Netty=Grizzly>MINA； 内存占用量：Netty=Mina<Grizzly 扩展性：采用此框架的项目代码是否易于修改，易于在已有功能基础上拓展新功能； 易用性：框架的简洁程度，API Docs是否完善，Tutorials是否丰富，论坛是否活跃； 与GODU的整合能力/迁移成本；","tags":"Tech","url":"http://leetschau.github.io/wang-luo-tong-xin-kuang-jia-xuan-xing.html","loc":"http://leetschau.github.io/wang-luo-tong-xin-kuang-jia-xuan-xing.html"},{"title":"用WinHTTrack下载博客","text":"创建一个存放博客的总目录，例如： \"E:\\MyDoc\\WinHTTrackFiles\\Blogs\"； 启动WinHTTrack； 【下一步】之后在【工程名】里写\"李四\"，【总保存路径】里写\"E:\\MyDoc\\WinHTTrackFiles\\Blogs\"，这样所有网站内容就会被下一步； 【操作】选【下载网站】（如果是更新，则双击李四.whtt文件即可）； 【Web地址】填博客地址； 【选项->限制->最大深度】设为2，【最大外部链接深度】设为0。 勾选【 选项->链接->首先保存html文件 】； 开始下载进程后，【已扫描链接】后面的数据由三部分组成，例如：248/251(+5)，其中251表示需要下载的所有链接数量，248表示已下载的链接数量，+5含义尚不清楚。","tags":"Tech","url":"http://leetschau.github.io/yong-winhttrackxia-zai-bo-ke.html","loc":"http://leetschau.github.io/yong-winhttrackxia-zai-bo-ke.html"},{"title":"log4j日志输出格式参数定义","text":"PatternLayout (Apache Log4j 1.2.16 API) Conversion Character Effect c Used to output the category of the logging event. The category conversion specifier can be optionally followed by precision specifier , that is a decimal constant in brackets. If a precision specifier is given, then only the corresponding number of right most components of the category name will be printed. By default the category name is printed in full. For example, for the category name \"a.b.c\" the pattern %c{2} will output \"b.c\". C Used to output the fully qualified class name of the caller issuing the logging request. This conversion specifier can be optionally followed by precision specifier , that is a decimal constant in brackets. If a precision specifier is given, then only the corresponding number of right most components of the class name will be printed. By default the class name is output in fully qualified form. For example, for the class name \"org.apache.xyz.SomeClass\", the pattern %C{1} will output \"SomeClass\". WARNING Generating the caller class information is slow. Thus, use should be avoided unless execution speed is not an issue. d Used to output the date of the logging event. The date conversion specifier may be followed by a date format specifier enclosed between braces. For example, %d{HH:mm:ss,SSS} or %d{dd MMM yyyy HH:mm:ss,SSS} . If no date format specifier is given then ISO8601 format is assumed. The date format specifier admits the same syntax as the time pattern string of the SimpleDateFormat . Although part of the standard JDK, the performance of SimpleDateFormat is quite poor. For better results it is recommended to use the log4j date formatters. These can be specified using one of the strings \"ABSOLUTE\", \"DATE\" and \"ISO8601\" for specifying AbsoluteTimeDateFormat , DateTimeDateFormat and respectively ISO8601DateFormat . For example, %d{ISO8601} or %d{ABSOLUTE} . These dedicated date formatters perform significantly better than SimpleDateFormat . F Used to output the file name where the logging request was issued. WARNING Generating caller location information is extremely slow and should be avoided unless execution speed is not an issue. l Used to output location information of the caller which generated the logging event. The location information depends on the JVM implementation but usually consists of the fully qualified name of the calling method followed by the callers source the file name and line number between parentheses. The location information can be very useful. However, its generation is extremely slow and should be avoided unless execution speed is not an issue. L Used to output the line number from where the logging request was issued. WARNING Generating caller location information is extremely slow and should be avoided unless execution speed is not an issue. m Used to output the application supplied message associated with the logging event. M Used to output the method name where the logging request was issued. WARNING Generating caller location information is extremely slow and should be avoided unless execution speed is not an issue. n Outputs the platform dependent line separator character or characters. This conversion character offers practically the same performance as using non-portable line separator strings such as \"\\n\", or \"\\r\\n\". Thus, it is the preferred way of specifying a line separator. p Used to output the priority of the logging event. r Used to output the number of milliseconds elapsed from the construction of the layout until the creation of the logging event. t Used to output the name of the thread that generated the logging event. x Used to output the NDC (nested diagnostic context) associated with the thread that generated the logging event. X Used to output the MDC (mapped diagnostic context) associated with the thread that generated the logging event. The X conversion character must be followed by the key for the map placed between braces, as in %X{clientNumber} where clientNumber is the key. The value in the MDC corresponding to the key will be output. See MDC class for more details. % The sequence %% outputs a single percent sign.","tags":"Tech","url":"http://leetschau.github.io/log4jri-zhi-shu-chu-ge-shi-can-shu-ding-yi.html","loc":"http://leetschau.github.io/log4jri-zhi-shu-chu-ge-shi-can-shu-ding-yi.html"},{"title":"通信框架学习笔记","text":"Netty是如何处理信息的？例如Netty中有Handler，是否有filter？是否也使用链式结构？IoSession对应的类是什么？ Netty如何处理session与properties在时间上的矛盾？","tags":"Tech","url":"http://leetschau.github.io/tong-xin-kuang-jia-xue-xi-bi-ji.html","loc":"http://leetschau.github.io/tong-xin-kuang-jia-xue-xi-bi-ji.html"},{"title":"软件开发类书籍","text":"我也能做CTO之程序员职业规划 [专著] / 高阳著，北京 : 电子工业出版社, 2009， 国图基藏库 卓有成效的程序员，Neal Ford，机械工业出版社,2009-03 ， 国图基藏库 走出软件作坊，阿朱，电子工业出版社，2009-01 高效程序员的45个习惯 [专著] = Practices of an agile developer : 敏捷开发修炼之道 / (美)Venkat Subramaniam，(美)Andy Hunt著 ; 钱安川，郑柯译， 国图中文外借室 Expert one-on-one J2EE Development without EJB中文版 [专著] / (美)Rod Johnson，(美)Juergen Hoeller著 ; JavaEye译，北京 : 电子工业出版社, 2005， 国图基藏库 ， 国图中文外借室 C++网络编程. 卷1, 运用ACE和模式消除复杂性 [专著] = C++ network programming. Volume 1, Mastering complexity with ACE and patterns / (美)Douglas C. Schmidt，(美)Stephen D. Huston著 ; 於春景译，电子工业出版社, 2007， 国图 基藏库，北区中文图书区 C++网络编程. 卷2, 基于ACE和框架的系统化复用 [专著] / Douglas C.Schmidt，Stephen D.Huston著 ; 马维达译，电子工业出版社, 2004 ACE程序员指南 [专著] : 网络与系统编程的实用设计模式 / (美)Stephen D.Huston等著 ; 马维达译，北京 : 中国电力出版社, 2004 ， 国图 基藏库，北区中文图书区","tags":"Tech","url":"http://leetschau.github.io/ruan-jian-kai-fa-lei-shu-ji.html","loc":"http://leetschau.github.io/ruan-jian-kai-fa-lei-shu-ji.html"},{"title":"关于软件开发的一篇很好的文章","text":"最近听到过多起软件行业\"项目经理\"的故事了，其实就是能堆砌几个技术框架用用；或者动辄就说自己写什么框架，然后谈论说struts2等框架如何如何慢云云来忽悠菜鸟，于是写出此文，谈谈想法。 淘宝用开源，微软用自己的东西，金山什么都用，Google、IBM和ORACLE以及JBOSS则全力支持OpenSource，诸多公司，我也不细评了，从最终产品运行效率看，微软最差，Windows Live系列的产品慢的不成样（最近几个月才略有改观），反倒是用开源的一个比一个快；看看google和淘宝。所以说，没有什么快慢，只是用的人如何。 管理也好，技术也好，都是渗透着一种文化，而这种文化以及文化背后的可操作性的东西，不亲身体验，是永远无法学会和想明白的。 说说我们公司的软件开发文化吧。 首先是最为本质的东西，作为软件企业，我们追求什么？答案很简单：第一是生产力，第二是可维护性（所谓的可维护性里面包括了可扩展性），第三是精英团队。 这里解释一下，为什么1，2，3是这样的顺序而不是其他。 首先我们是一家公司，正如杰克韦尔奇所说，任何一家公司和企业，第一目标是利润，永远不能偏离这个目标；而这也是一切其他文化的基础。一个简单的例子，20万的项目，20个人月和5个人月的成本差异显然是巨大的，而我们的目标则要努力压缩这个人月的数字以期最大化利润；而最大化的利润也意味着员工的薪水空间和企业的高速成长。而可维护性意味着在团队人员流动以及新人加入时，可以有无缝接替；或者客户需求变更或者架构提升时，可以几乎无痛的切换。第三点精英团队，并非是找一堆清华的高材生，而是一个成长型的，真诚团结并且务实的团队。我们要做的是让一群聪明年轻人成长为精英，让他们拥有切实的能力和自信，从而立足于一个行业并受到同行和客户的尊敬。可能有人会问，为什么不提用户？我想说的是：任何一家企业，都必须尊重用户，而也只有精英团队，才能真正的为客户提供高质量产品和服务，而不是每天生活在抱怨和混乱的项目开发中。 那么我们如何实现这些文化呢？ 首先我们讲生产力的话题。作为我本人来说，我对各种新技术都喜欢研究一下，但是极少高度深入；作为\"架构师\"的角色，我喜欢把这种研究的氛围推广。不过研究归研究，如果要应用到项目中那还是有原则的，比如：A.不能简化代码量的，不用；B.难以上手的，不用；C.不稳定的，不用；D.自己造轮子的（缺乏可持续维护），不用。 基于这几个原则，目前热门技术中，我们不用EXT或者Flex，因为它违反了A和B；不用ibatis，因为违反了A；不用GWT，因为违反了B；基本不用微软的方案，因为很多MS的方案都违反C；而不自己造轮子，尽量基于标准的Spring/Struts2/Hibernate框架，则是处于人员更迭和维护的考虑，具体可参考J2EE design and development without EJB；我也后悔用Mina，因为缺乏持续性的维护，这方面显然不如netty和grizzly。 那么我们使用什么呢？为了简化代码量，我们使用了Springside的方案，提供了最简单实用的CRUD和Web分页以及复杂查询方案；并更进一步的使用了Sitemesh，从而最大成度的屏蔽了绝大多数开发人员和HTML/CSS打交道的机会；这样也不用在EXT和FLEX间折腾了；Struts2的Convention插件提供了足够简单（我认为不是最）的Web映射机制，可以大量减少配置；Spring则提供了声明性事物（基于Aspectj或者元数据声明），对象依赖的自动装配，以及未来可扩充（暴露服务）框架；而对Hibernate的深入理解，可以解决绝大多数情况下的存储问题；当然我们从来不搞绝对化，特殊情况特殊处理，该JDBC直接操作的时候我也绝不会滥用Hibernate。另外，对多线程编程、锁机制、网络以及底层IO的精通，这些都成为团队可以在项目中快速前进的优势。 当然如何来衡量呢？ 比如Hibernate，如下几个问题：1，什么是ThreadLocal，Hibernate如何结合ThreadLocal？2，你能马上说出来inverse和cascade关系，cascade种类以及差异吗？3，Hibernate什么情况下，会产生inner join，什么情况下会产生outer join？可以强制吗？什么架构的情况下应该避免一对多和表连接？ 如果你能快速的不查资料的回答上来这几个问题，那么我相信你绝对不会讨厌Hibernate，也绝对不会有常见的使用上的困惑。比如Hibernate结合Hibenrate search和solr，可以用最少量的代码为我们带来高效的企业级海量数据检索。 另外，为了提升生产力我们还采取了Scrum的开发模式，并结合XP，推崇TDD，从UnitTest到selenium都是团队工作必不可少的亲密伙伴（这么多年来实在厌烦了V字形的传统模式，以及一堆堆的文档），我们鼓励写清洗的代码，代码就是文档，注释就是需求。我们使用了CI工具，比如hudson或者bamboo；使用jira或者trac来让每个成员明确项目每个迭代中的目标，考虑到我们是年轻的团队，发布周期一般是2周而不是更长；使用maven（部分结合ant）来做项目生命周期管理，使用firebug来进行各种web相关内容的调试和测试，虽然很少提及但是我们熟悉Linux以及各种分布式解决方案…… 诚然，工具和框架的堆砌并非可以达到目标，必须让这些实践和其中蕴含的价值观深入人心，才可能让这一切产生威力。我们从很早就开始推行的代码价值观，比如优先处理错误，变量命名规则，代码书写的规则和技巧，和最近我看到的thoughtworks文集中提到的几乎完全一样；这些\"最佳实践\"构成了团队务实的开发理念。 总结性的说，上面提到的一切，新技术，敏捷，过程改进，其实都是为了能够产生生产力的\"最佳实践\"。 当然，空谈永远难以解决问题，技术上的务实和有效评估并提出方案才是王道。比如文章开始提到的struts2性能问题，作为我们的解决方案，会是：首先评估项目规模，评估每秒的并发request数，用ab等工具来评估时间最长的几个action，使用jprofiler等工具来查找本地瓶颈并解决（比如sql缺乏优化，多表连接等带来的性能问题），使用ehcache并做gzip压缩来处理网络传输上的问题。 那么有了这些，团队就有战斗力了吗？答案并非\"不\"，而是\"不确定\"。一个稳定而高效的团队，团结，有责任心，正直而勤奋，彼此信任但不依赖，各种优秀品质必须存在于每个人身上。术业有专攻，但是品行不可能有差异，一个新人，要么同化，要么离开，没有第三种选择，这也是我们为什么更喜欢可塑性更强的年轻人的原因。这一切如何产生呢？我们的原则是在中国，我们相信企业文化来自于老板，来自于\"带头大哥\"，言传身教决定了这一切；所以对中层人员的提拔是必须绝对谨慎的，这会影响整个公司的价值观和未来方向。 最后，推荐几本书，我相信思想的变化比学几样技术更能提升一个人的价值，而这些提升，大多来自于书籍。 A.J2EE design and development without EJB B.《走出软件作坊》 C.杰克韦尔奇《赢》 感谢这些书籍的作者。","tags":"Tech","url":"http://leetschau.github.io/guan-yu-ruan-jian-kai-fa-de-yi-pian-hen-hao-de-wen-zhang.html","loc":"http://leetschau.github.io/guan-yu-ruan-jian-kai-fa-de-yi-pian-hen-hao-de-wen-zhang.html"},{"title":"Ultraedit多个窗口的排布","text":"UE v16中打开多个文件时，默认的方式是有一个文件标签面板（【高级->配置->Application Layout->File Tabs->Operation->Dockable tabs】修改面板是否dockable），各个文件窗口不能自由排列，【窗口】菜单下的【层叠】、【水平平铺】、【垂直平铺】都不可用，若要恢复窗口位置自由移动，用【视图->视图/列表->打开文件标签】。","tags":"Tech","url":"http://leetschau.github.io/ultraeditduo-ge-chuang-kou-de-pai-bu.html","loc":"http://leetschau.github.io/ultraeditduo-ge-chuang-kou-de-pai-bu.html"},{"title":"手工修改UltraEdit的配色","text":"Ultraedit的配色主要分为两部分，一是全局性的，二是某种语言特有的语法配色。全局设置在【视图->设置颜色】中定义，语法配色在本语言的wordfile里定义。 全局配色 由很多项目组成，例如 普通文本 （Plain Text）、被选中文本（Selected Text）、光标所在行（Active Line）等，每一项又有\"文字颜色\"和\"背景颜色\"两个子项组成，先点击\"Plain Text\"条，再点击右边的\"Text Color\"或者\"Background Color\"，就可以修改普通文本的文字颜色和背景色，其他项目修改方法相同。 语法配色是对 全局配色 中 普通文本 颜色设置的覆盖（Override），它不影响 全局配色 中除 普通文本 外其他项目的颜色设置， wordfile文件位置在 【高级->配置->Editor Display->Syntax Highlighting->Full directory path for wordfile】中设置； 从外部导入wordfile时，将文件拷贝到上述位置，如果在 下面的 【 Language Selection】下拉框中 找不到该文件对应的语言条目，可能是文件编码格式不是ANSI的，需改为ANSI格式。 以修改sh文件（Unix Shell脚本）的配色为例，首先用UE 打开一个sh文本，然后 在【高级->配置->Editor Display->Syntax Highlighting->Language Selection】中选择对应的wordfile ，然后点击【Open】打开这个wordfile，然后修改配色（后面详述），对wordfile修改的效果会在wordfile文件保存后立刻在sh文件中表现出来。 修改wordfile文件中的颜色定义（ 以修改关键字grep的颜色为例 ）： 打开这个wordfile文件后，找到grep所在的以/Cn起始的行（n是一个数字），此行中\"Colors\"后面的数字串就是grep颜色的定义， 选中这个数字串，然后 【编辑->插入颜色】，拾色器图标右边的就是该数字串对应的颜色，点击它，选择一个新颜色，然后点击【Output】下面的\"Editor\"按钮，数字串就被更新了。 此行中\"Colors Back\"和\"Colors Auto Back\"的含义尚不清楚， 除了被wordfile定义的语言关键字外，其他字体的颜色定义在 wordfile文件起始处的\"/Colors\"后面定义， 普通变量的颜色定义是第一个数字，第4个数字代表字符串颜色； \"/Colors Back\"、\"/Colors Auto Back\"作用不清楚。 本文针对的UE版本：UE Professional v16.10","tags":"Tech","url":"http://leetschau.github.io/shou-gong-xiu-gai-ultraeditde-pei-se.html","loc":"http://leetschau.github.io/shou-gong-xiu-gai-ultraeditde-pei-se.html"},{"title":"在Ant脚本中使用时间戳","text":"时间戳在项目自动构建中广泛使用，例如在jar文件的manifest文件中，以及最后zip包的文件名里等，时间戳对应的Ant命令是 ，这个标签既可以用在一个 内部，也可以放在 外部用作\"全局\"变量，全局变量的好处在于\"一次定义，多处可用\"，下面分别是内部和外部使用的两个例子，注意 \"build.date\"在 中赋值后就可以在其他地方使用了 ： 内部： ...... 外部： ......","tags":"Tech","url":"http://leetschau.github.io/zai-antjiao-ben-zhong-shi-yong-shi-jian-chuo.html","loc":"http://leetschau.github.io/zai-antjiao-ben-zhong-shi-yong-shi-jian-chuo.html"},{"title":"日志核查工具脚本业务逻辑","text":"用户确定线程号qth和时间范围[qst, qet]； 读入文本文件； 将有效行标志位vline设为false； 读入第一行数据，判断是否为日志输出； 若是：提取线程号thread_no和时间cur_time，将vline设为true； 否则： 若vline=true，输出该行 否则忽略该行； 若线程号不是qth 忽略该行； 若cur_time<qst忽略该行； 输出本行数据，循环读入下一行文本； 用grep -n定位起始位置，awk先判断时间范围，再判断线程号，当时间超出上限时，直接退出（close），不必读后续行（next）。 echo \"Please input thread number:\" read qth echo \"Please input start time:\" read qst echo \"Please input end time:\" read qet echo $qth awk 'BEGIN{ isLogLine=0; qth='\" \\(qth\"'; qst='\"\\) qst\"'; qet='\" \\(qet\"'; } { if(substr(\\) 3,2,7)==\"thread_\"){ #检查是否为日志输出列 thread_no=substr( \\(3,9,length(\\) 3)-9); if(thread_no==qth){ print \"the thread is in line:\" print NR } } }' logex if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ri-zhi-he-cha-gong-ju-jiao-ben-ye-wu-luo-ji.html","loc":"http://leetschau.github.io/ri-zhi-he-cha-gong-ju-jiao-ben-ye-wu-luo-ji.html"},{"title":"统计代码行工具","text":"diffcount计算代码行主要有两种方式：一是计算某一个文件夹中源代码的数量： diffcount -c D:\\workspace\\GODU_API1.1\\src 二是比较两个文件夹的差异：diffcount e:\\build\\tested\\src1 e:\\build\\tested\\src2。 这两种情况下均可以在后面加--for-program-reading参数，使得返回结果只有计算数据（没有表头以及说明文字），更方便与应用程序处理。 比较两个文件夹差异时，如果两个文件夹都不存在，或者两个文件夹完全相同时（都不存在也是一种特殊的\"相同\"），diffcount返回结果都为空，因此用程序处理diffcount结果时，对于返回为空的情况，建议保持其为空的状态，不要将空转换为0，因为0意味着两个文件夹完全相同，但也可能是两个文件夹都不存在。","tags":"Tech","url":"http://leetschau.github.io/tong-ji-dai-ma-xing-gong-ju.html","loc":"http://leetschau.github.io/tong-ji-dai-ma-xing-gong-ju.html"},{"title":"使用TestNG进行并发测试","text":"写并发测试用例的时候不要用JUnit，它不支持并发，将测试函数写在public static void main(String[] args)中。但如果一个测试类里有多个并发测试case的时候这招就不灵了，需要用testng解决这个问题。在Eclipse中使用TestNG需要首先安装testng for eclispe的plugin（见[1]），然后引用testng的jar包。然后就可以写测试用例了。 testng声明并发测试很简单，示例如下（改自[3]）： import org.testng.annotations.Test; @Test(invocationCount = 5, threadPoolSize = 3) public void testThreadPool() { System.out.println(\"Thread: \" + Thread.currentThread().getId()); } 参数含义：（引自[2]） invocationCount: The number of times this method should be invoked.（线程体总共被执行多少次）； threadPoolSize: The size of the thread pool for this method. The method will be invoked from multiple threads as specified by invocationCount.（线程池的大小，也就是并发的线程数目是多少） Note: this attribute is ignored if invocationCount is not specified 上面这个例子输出可能如下： Thread: 14 Thread: 13 Thread: 15 Thread: 14 Thread: 13 即程序共运行5次，共有3个线程。 [1] http://testng.org/doc/download.html [2] http://testng.org/doc/documentation-main.html [3] http://hi.baidu.com/sunshine/blog/item/9d355982cb1200a40cf4d2c9.html http://www.raptorconsultants.com/uncategorized/testng-junit/","tags":"Tech","url":"http://leetschau.github.io/shi-yong-testngjin-xing-bing-fa-ce-shi.html","loc":"http://leetschau.github.io/shi-yong-testngjin-xing-bing-fa-ce-shi.html"},{"title":"VIM的跨行查找和匹配数量","text":"跨行用\\n表示，例如 用4\\n56可以匹配到： 4 56 中，查询一段文本中pattern出现的次数，类似于UltraEdit中的\"Count All\"功能，用:%s/pattern//gn， 例如统计文档中有多少空格分隔的单词可以使用：:%s/[&#94; ]+//gn（ []中&#94;开头后跟一个字符表示该字符的补集，例如[&#94;a]表示除a外的所有字符），实际上是利用了s命令的n参数。","tags":"Tech","url":"http://leetschau.github.io/vimde-kua-xing-cha-zhao-he-pi-pei-shu-liang.html","loc":"http://leetschau.github.io/vimde-kua-xing-cha-zhao-he-pi-pei-shu-liang.html"},{"title":"美铁之战TXT文件的修改脚本","text":"用VIM将美铁之战的txt文件改为适合手机阅读的格式，参见\"用VIM修改《红太阳是怎样升起的》\"一文。 下面是脚本： \"每段起始处加段落标记 %s/&#94;\\s* \\(/<P>/g \"在每行后加一个空格 %s/\\S\\) /& /g \"将所有文本合为一行 1,$j! \"将段落标志替换为回车 %s/ /\\r\\r/g \"去掉行首的一个空格 %s/&#94;\\s//g if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/mei-tie-zhi-zhan-txtwen-jian-de-xiu-gai-jiao-ben.html","loc":"http://leetschau.github.io/mei-tie-zhi-zhan-txtwen-jian-de-xiu-gai-jiao-ben.html"},{"title":"Windows ADSL上网设置方法","text":"网上邻居->右键_>属性->【创建一个新的连接】->【连接到Internet】->手动设置我的连接->【用要求用户名和密码的宽带来连接】->【输入连接名】（自己定义即可）->【输入用户名和密码】","tags":"Tech","url":"http://leetschau.github.io/windows-adslshang-wang-she-zhi-fang-fa.html","loc":"http://leetschau.github.io/windows-adslshang-wang-she-zhi-fang-fa.html"},{"title":"Word2007不显示图像问题的解决办法","text":"适用场景：打开Word文档后，所有显示图形的地方都只显示一个框，而不显示图形，预览时可看到图形。 解决办法：关闭\"图片框\"选项。 具体步骤： 1. 单击\"Microsoft Office 按钮\"，然后单击\"Word 选项\"。 2. 单击\"高级\"。 3. 在\"显示文档内容\"下，取消勾选\"图片框\"复选框。 4. 单击\"确定\"。","tags":"Tech","url":"http://leetschau.github.io/word2007bu-xian-shi-tu-xiang-wen-ti-de-jie-jue-ban-fa.html","loc":"http://leetschau.github.io/word2007bu-xian-shi-tu-xiang-wen-ti-de-jie-jue-ban-fa.html"},{"title":"CMMI相关图书","text":"Integrating CMMI and Agile Development: Case Studies and Proven Techniques for Faster Performance Improvement http://www.sei.cmu.edu/library/abstracts/books/9780321714107.cfm CMMI Survival Guide: Just Enough Process Improvement","tags":"Tech","url":"http://leetschau.github.io/cmmixiang-guan-tu-shu.html","loc":"http://leetschau.github.io/cmmixiang-guan-tu-shu.html"},{"title":"Java的classpath与package","text":"按：这是一篇来自chinaitlab的讨论Java中classpath与package关系的文章，写的非常通俗易懂，尤其是篇末的红字段落，描述了package与classpath配合确定类文件位置的过程，很有用，平时用eclipse时这些设置都由eclipse自动完成了，但手工编译时不懂这些机制就无法正确设置每个类文件的package和import声明，从而无法正确的编译和运行，因此了解这一机制非常重要。 Java 很诱人，但对于刚跨入Java门槛的初学者来说，编译并运行一个无比简单的Java程序简直就是一个恶梦。明明程序没错，但各种各样让人摸不着头脑的错误信息真的让你百思不得其解，许多在Java门口徘徊了很久的初学者就这样放弃了学习Java的机会，很是可惜。笔者也经历过这个无比痛苦的阶段，感觉到编译难的问题就出在classpath的设置及对package的理解之上。本文以实例的方式，逐一解决在编译过程中所出现的各种classpath的设置问题。本文实例运行的环境是在Windows XP + JDK 1.5.0。对其他的环境，读者应该很容易进行相应的转换。 下载并安装JDK1.5.0，并按默认路径，安装到C:\\Program Files\\Java\\jdk1.5.0中。 用鼠标单击WindowsXP的\"开始\"->\"运行\"，在弹出的运行窗口中输入cmd，按确定或回车，打开一个命令行窗口。 在命令行中输入： java 有一列长长的洋文滚了出来，这是JDK告诉我们java这个命令的使用方法。其中隐含了一个重要信息，即JDK安装成功，可以在命令行中使用java此命令了。 在命令行中输入 javac 屏幕显示： 'javac' 不是内部或外部命令，也不是可运行的程序或批处理文件。 这是由于windows找不到javac这个命令的原因。这就不明白了，java与javac都是JDK在同一个子目录里面的两个文件，为什么可以直接运行java而不能直接运行javac呢？原来，Sun公司为了方便大家在安装完JDK后马上就可以运行Java类文件，在后台悄悄地将java命令加入了Path的搜索路径中，因此我们可以直接运行java命令(但我们是看不到它到底是在哪设置的，无论是在用户的Path或系统的Path设置中均找不到这个java存放的路径)。但Sun所做的到此为止，其他JDK的命令，一概不管，需要由用户自己添加到搜索路径中。 既然如此，那我们自己添加Path的搜索路径吧。对\"我的电脑\"按右键，选\"属性\"，在\"系统属性\"窗口中选\"高级\"标签，再按\"环境变量\"按钮，弹出一个\"环境变量\"的窗口，在用户变量中新建一个变量，变量名为\"Path\"，变量值为\"C:\\Program Files\\Java\\jdk1.5.0\\bin;%PATH%\"。最后的%PATH%的意思是说，保留原有的Path设置，且将目前的Path设置新加到其前面。一路按\"确定\"退出(共有3次)。关掉原来的命令行窗口，依照第2步，重新打开一个新的命令行窗口。在此窗口中输入 javac 长长的洋文又出现了，这回是介绍javac的用法。设置成功。 So far so good. 到目前为止，我们已经可以编程了。但是，这不是一个好办法。因为随着以后我们深入学习Java，我们就会用到JUnit、Ant或NetBeans等应用工具，这些工具在安装时，都需要一个名为指向JDK路径的\"JAVA_HOME\"的环境变量，否则就安装不了。因此，我们需要改进第5步，为以后作好准备。依照第5步，弹出\"环境变量\"的窗口，在用户变量中新建一个变量，变量名为\"JAVA_HOME\"，变量值为\"C:\\Program Files\\Java\\jdk1.5.0\"。注意，这里的变量值只到jdk1.5.0，不能延伸到bin中。确定后，返回\"环境变量\"的窗口，双击我们原先设定的Path变量，将其值修改为\"%JAVA_HOME%\\bin;%PATH%\"。这种效果与第5步是完全一样的，只不过多了一个JAVA_HOME的变量。这样，以后当我们需要指向JDK的路径时，只需要加入\"%JAVA_HOME%\"就行了。至此，Path路径全部设置完毕。一路确定退出，打开新的命令行窗口，输入 javac 如果长长的洋文出现，Path已经设置正确，一切正常。如果不是，请仔细检查本步骤是否完全设置正确。 开始编程。在C盘的根目录中新建一个子目录，名为\"JavaTest\"，以作为存放Java源代码的地方。打开XP中的记事本，先将其保存到JavaTest文件夹中，在\"文件名\"文本框中输入\"Hello.java\"。注意，在文件名的前后各加上一个双引号，否则，记事本就会将其存为\"Hello.java.txt\"的文本文件。然后输入以下代码： public class Hello { public static void main(String[] args) { System.out.println(\"Hello, world\"); } } 再次保存文件。 在命令行窗口中输入 cd C:\\JavaTest 将当前路径转入JavaTest中。然后，输入 javac Hello.java JDK就在JavaTest文件夹中编译生成一个Hello.class的类文件。如果出现\"1 error\"或\"XX errors\"的字样，说明是源代码的输入有误，请根据出错提示，仔细地按第7步的代码找出并修正错误。请读者注意甄别代码输入有误的问题与classpath设置有误的问题。因为本文是关于如何正确设置classpath及package的，因此，这里假设读者输入的代码准确无误。到目前为此，由于我们是在源代码的当前路径下编译，因此，不会出现classpath设置有误的问题。 在命令行窗口中输入 java Hello 屏幕出现了 Hello world 成功了，我们已经顺利地编译及运行了第一个Java程序。 但是，第8步及第9步是不完美的，因为我们是在JavaTest这个存放源码的文件夹中进行编译及运行的，因此，一些非常重要的问题并没有暴露出来。实际上，第8步的\"javac Hello.java\"及第9步的\"java Hello\"涉及到两个问题，一是操作系统如何寻找\"javac\"及\"java\"等命令，二是操作系统如何寻找\"Hello.java\"及\"Hello.class\"这些用户自己创建的文件。对于\"javac\"及\"java\"等命令，由于它们均是可执行文件，操作系统就会依据我们在第6步中设置好的Path路径中去寻找。而对于\"Hello.java\"及\"Hello.class\"这些文件，Path的设置不起作用。由于我们是在当前工作路径中工作，java及javac会在当前工作路径中寻找相应的java文件(class文件的寻找比较特殊，详见第11步)， 因此一切正常。下面我们开始人为地将问题复杂化，在非当前工作路径中编译及运行，看看结果如何。 10. 在命令行窗口中输入 cd C: 转入到C盘根目录上，当前路径离开了存放源码的工作区。输入 javac Hello.java 屏幕出现： error: cannot read: Hello.java 1 error 找不到Hello.java了。我们要给它指定一个路径，告诉它到C:\\JavaTest去找Hello.java文件。输入 javac C:\\JavaTest\\Hello.java OK，这回不报错了，编译成功。 输入 java C:\\JavaTest\\Hello 这回屏幕出现： Exception in thread \"main\" java.lang.NoClassDefFoundError: C:\\JavaTest\\Hello 意思为在\"C:\\JavaTest\\Hello\"找不到类的定义。明明C:\\JavaTest\\Hello是一个.class文件，为什么就找不到呢？原来，Java对待.java文件与.class文件是有区别的。对.java文件可以直接指定路径给它，而java命令所需的.class文件不能出现扩展名，也不能指定额外的路径给它。 那么，如何指定路径呢？对于Java所需的.class文件，必须通过classpath来指定。 依照第5步，弹出\"环境变量\"窗口，在用户变量中新建一个变量，变量名为\"classpath\"，变量值为\"C:\\JavaTest\"。一路按\"确定\"退出。关闭原命令行窗口，打开新的命令行窗口，输入 java Hello \"Hello world\"出来了。由此可见，在\"环境变量\"窗口中设置classpath的目的就是告诉JDK，到哪里去寻找.class文件。这种方法一旦设置好，以后每次运行java或javac时，在需要调用.class文件时，JDK都会自动地来到这里寻找。因此，这是一个全局性的设置。 除了这种在环境变量\"窗口中设置classpath的方法之外，还有另一种方法，即在java命令后面加上一个选项classpath，紧跟着不带扩展名的class文件名。例如， java -classpath C:\\JavaTest Hello JDK遇到这种情况时，先根据命令行中的classpath选项中指定的路径去寻找.class文件，找不到时再到全局的classpath环境变量中去寻找。这种情况下，即使是没有设置全局的classpath环境变量，由于已经在命令行中正确地指定类路径，也可以运行。 为了在下面的例子中更好地演示classpath的问题，我们先将全局的classpath环境变量删除，而在必要时代之以命令行选项-classpath。弹出\"环境变量\"窗口，选中\"classpath\"的变量名，按\"删除\"键。 此外，java命令中还可以用cp，即classpath的缩写来代替classpath，如java -cp C:\\JavaTest Hello。特别注意的是，JDK 1.5.0之前，javac命令不能用cp来代替classpath，而只能用classpath。而在JDK 1.5.0中，java及javac都可以使用cp及classpath。因此，为保持一致，建议一概使用classpath作为选项名称。 我们再次人为地复杂化问题。关闭正在编辑Hello.java的记事本，然后将JavaTest文件夹名称改为带空格的\"Java Test\"。在命令行中输入 javac C:\\Java Test\\Hello.java 长长的洋文又出来了，但这回却是报错了： javac: invalid flag: C:\\Java JDK将带有空格的C:\\Java Test分隔为两部分\"C:\\Java\"及\"Test\\Hello.java\"，并将C:\\Java视作为一个无效的选项了。这种情况下，我们需要将整个路径都加上双引号，即 javac \"C:\\Java Test\\Hello.java\" 这回JDK知道，引号里面的是一个完整的路径，因此就不会报错了。同样，对java命令也需要如此，即 java -classpath \"C:\\Java Test\" Hello 对于长文件名及中文的文件夹，XP下面可以不加双引号。但一般来说，加双引号不容易出错，也容易理解，因此，建议在classpath选项中使用双引号。 我们再来看.java文件使用了其他类的情况。在C:\\Java Test中新建一个Person.java文件，内容如下： public class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } } 然后，修改Hello.java，内容如下： public class Hello { public static void main(String[] args) { Person person = new Person(\"Mike\"); System.out.println(person.getName()); } } 在命令行输入 javac \"C:\\Java Test\\Hello.java\" 错误来了： C:\\Java Test\\Hello.java:3: cannot find symbol symbol: class Person JDK提示找不到Person类。为什么javac \"C:\\Java Test\\Hello.java\"在第14步中可行，而在这里却不行了呢？第14步中的Hello.java文件并没有用来其他类，因此，JDK不需要去寻找其他类，而到了这里，我们修改了Hello.java，让其使用了一个Person类。根据第11步，我们需要告诉JDK，到哪里去找所用到的类，即使这个被使用的类就与Hello.java一起，同在C:\\Java Test下面！输入 javac -classpath \"C:\\Java Test\" \"C:\\Java Test\\Hello.java\" 编译通过，JDK在C:\\Java Test文件夹下同时生成了Hello.class及Person.class两个文件。实际上，由于Hello.java使用了Person.java类，JDK先编译生成了Person.class，然后再编译生成Hello.class。因此，不管Hello.java这个主类使用了多少个其他类，只要编译这个类，JDK就会自动编译其他类，很方便。输入 java -classpath \"C:\\Java Test\" Hello 屏幕出现了 Mike 成功。 第15步说明了在Hello.java中如何使用一个我们自己创建的Person.java，而且这个类与Hello.java是同在一个文件夹下。在这一步中，我们将考查Person.java如果放在不同文件夹下面的情况。 先将C:\\Java Test文件夹下的Person.class文件删除，然后在C:\\Java Test文件夹下新建一个名为DF的文件夹，并将C:\\Java Test文件夹下的Person.java移动到其下面。在命令行输入 javac -classpath \"C:\\Java Test\\DF\" \"C:\\Java Test\\Hello.java\" 编译通过。这时javac命令没有什么不同，只需将classpath改成C:\\Java Test\\DF就行了。 在命令行输入 java -classpath \"C:\\Java Test\" Hello 这时由于Java需要找在不同文件夹下的两个.class文件，而命令行中只告诉JDK一个路径，即C:\\Java Test，在此文件夹下，只能找到Hello.class，找不到Person.class文件，因此，错误是可以预料得到的： Exception in thread \"main\" java.lang.NoClassDefFoundError: Person at Hello.main(Hello.java:3) 果真找不到Person.class。在设置两个以上的classpath时，先将每个路径以双引号引起来，再将这些路径以\";\"号隔开，并且每个路径与\";\"之间不能带有空格。因此，我们在命令行重新输入： java -classpath \"C:\\Java Test\";\"C:\\Java Test\\DF\" Hello 编译成功。但也暴露出一个问题，如果我们需要用到许多分处于不同文件夹下的类，那这个classpath的设置岂不是很长！有没有办法，对于一个文件夹下的所有.class文件，只指定这个文件夹的classpath，然后让JDK自动搜索此文件夹下面所有相应的路径？有，只要使用package。 package简介。Java中引入package的概念，主要是为了解决命名冲突的问题。比如说，在我们的例子中，我们设计了一个很简单的Person类，如果某人开发了一个类库，其中恰巧也有一个Person类，当我们使用这个类库时，两个Person类出现了命名冲突，JDK不知道我们到底要使用哪个Person类。更有甚者，当我们也开发了一个很庞大的类库，无可避免地，我们的类库中与其他人开发的类库中命名冲突的情况就会越来越多。总不能为了避免自己的类名与其他人开发的类名相同，而让每个编程人员都绞尽脑汁地将一个本应叫Writer的类强行改名为SarkuyaWriter，MikeWriter, SmithWriter吧？ 现实生活中也是如此。假如你名叫张三，又假如与你同一单位的人中有好几个都叫张三，那你的问题就来了。某天单位领导在会上宣布，张三被任命为办公室主任，你简直不知道是该哭还是该笑。但如果你的单位中只有你叫张三，你才不会在乎全国叫张三的人有多少个，因为其他张三都分布在全国各地、其他城市，你看不见他们，摸不着他们，自然不会担心。 Sun从这个\"张三问题\"受到了很大的启发，为解决命名冲突问题，就采取了\"眼不见心不烦\"的策略：将每个类都归属到一个特定的区域中，在同一个区域中的所有类，都不允许同名；而不同区域的类，由于相互看不到，则允许有同名的类存在。这样，就解决了命名冲突的问题，正如北京的张三与上海的张三毕竟不是同一人。这个区域在Java中就叫package。由于package在Java中非常重要，如果你没有定义自己的package，JDK将会你的类都归到一个默认的无名package中。 自定义package的名称可以由各个程序员自由创建。作为避免命名冲突的手段，package的名称最好足以与其他程序员的区别开来。在互联网上，每个域名都是唯一的，因此，Sun推荐将你自己的域名倒写后作为package的名称。如果你没有自己的域名，很可能只是因为囊中羞涩而不去申请罢了，并不见得你假想的域名与其他域名发生冲突。例如，笔者假想的域名是sarkuya.com，目前就是唯一的，因此我的package就可以定名为com.sarkuya。谢谢Java给了我们一个免费使用我们自己域名的机会，唯一的前提是倒着写。当然，每个package下面还可以带有不同的子package，如com.sarkuya.util，com.sarkuya.swing，等等。 定义package的方式是在相应的.java文件的第一行加上\"package packagename;\"的字样，而且每个.java文件只能有一个package。实际上，Java中的package的实现是与计算机文件系统相结合的，即你有什么样的package，在硬盘上就有什么样的存放路径。例如，某个类的package名为com.sarkuya.util，那么，这个类就应该必须存放在com/sarkuya/util的路径下面。至于这个com/sarkuya/util又是哪个文件夹的子路径，第18步会谈到。 package除了有避免命名冲突的问题外，还引申出一个保护当前package下所有类文件的功能，主要通过为类定义几种可视度不同的修饰符来实现：public, protected, private, 另外加上一个并不真实存在的friendly类型。 对于冠以public的类、类属变量及方法，包内及包外的任何类均可以访问； protected的类、类属变量及方法，包内的任何类，及包外的那些继承了此类的子类才能访问； private的类、类属变量及方法，包内包外的任何类均不能访问； 如果一个类、类属变量及方法不以这三种修饰符来修饰，它就是friendly类型的，那么包内的任何类都可以访问它，而包外的任何类都不能访问它(包括包外继承了此类的子类)，因此，这种类、类属变量及方法对包内的其他类是友好的，开放的，而对包外的其他类是关闭的。 前面说过，package主要是为了解决命名冲突的问题，因此，处在不同的包里面的类根本不用担心与其他包的类名发生冲突，因为JDK在默认情况下只使用本包下面的类，对于其他包，JDK一概视而不见：\"眼不见心不烦\"。如果要引用其他包的类，就必须通过import来引入其他包中相应的类。只有在这时，JDK才会进行进一步的审查，即根据其他包中的这些类、类属变量及方法的可视度来审查是否符合使用要求。如果此审查通不过，编译就此卡住，直至你放弃使用这些类、类属变量及方法，或者将被引入的类、类属变量及方法的修饰符改为符合要求为止。如果此审查通过，JDK最后进行命名是否冲突的审查。如果发现命名冲突，你可以通过在代码中引用全名的方式来显式地引用相应的类，如使用 java.util.Date = new java.util.Date() 或是 java.sql.Date = new java.sql.Date()。 package的第三大作用是简化classpath的设置。还记得第16步中的障碍吗？这里重新引用其java命令： java -classpath \"C:\\Java Test\";\"C:\\Java Test\\DF\" Hello 我们必须将所有的.class文件的路径一一告诉JDK，而不管DF其实就是C:\\Java Test的子目录。如果要用到100个不同路径的.class文件，我们就得将classpath设置为一个特别长的字符串，很累。package的引入，很好地解决了这个问题。package的与classpath相结合，通过import指令为中介，将原来必须由classpath完成的类路径搜索功能，很巧妙地转移到import的身上，从而使classpath的设置简洁明了。我们先看下面的例子。 先在Hello.java中导入DF.Person。代码修改如下： import DF.Person; public class Hello { public static void main(String[] args) { Person person = new Person(\"Mike\"); System.out.println(person.getName()); } } 再将DF子文件夹中的Person.java设置一个DF包。代码修改如下： package DF; public class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } } 好了，神奇的命令行出现了： javac -classpath \"C:\\Java Test\" \"C:\\Java Test\\Hello.java\" java -classpath \"C:\\Java Test\" Hello 尽管这次我们只设置了C:\\Java Test的classpath，但编译及运行居然都通过了！事实上，Java在搜索.class文件时，共有三种方法： 一是全局性的设置，详见第12步，其优点是一次设置，每次使用； 二是在每次的javac及java命令行中自行设置classpath，这也是本文使用最多的一种方式，其优点是不加重系统环境变量的负担； 三是根据import指令，将其内容在后台转换为classpath。JDK将读取全局的环境变量classpath及命令行中的classpath选项信息，然后将每条classpath与经过转换为路径形式的import的内容相合并，从而形成最终的classpath. 在我们的例子中，JDK读取全局的环境变量classpath及命令行中的classpath选项信息，得到C:\\Java Test。接着，将import DF.Person中的内容，即DF.Person转换为DF\\Person, 然后将C:\\Java Test与其合并，成为C:\\Java Test\\DF\\Person，这就是我们所需要的Person.class的路径。在Hello.java中有多少条import语句，就自动进行多少次这样的转换。而我们在命令行中只需告诉JDK最顶层的classpath就行了，剩下的则由各个类中的import指令代为操劳了。这种移花接木的作法为我们在命令行中手工地设置classpath提供了极大的便利。 应注意的一点是，import指令是与package配套使用的，只有在某类通过\"package pacakgename;\"设定了包名后，才能给其他类通过import指令导入。如果import试图导入一个尚未设置包的类，JVM就会报错。 我们接下来看，当使用JDK类库时，classpath如何设置。 修改Hello.java，内容如下： import DF.Person; import java.util.Date; public class Hello { public static void main(String[] args) { Date date = new Date(); System.out.println(date); Person person = new Person(\"Mike\"); System.out.println(person.getName()); } } JDK类库存放于C:\\Program Files\\Java\\jdk1.5.0\\jre\\lib\\rt.jar文件中。关于jar文件的介绍，已经超出了本文的范围， 感兴趣的读者可以阅读Horstmann写的Core Java一书 。 jar文件可以用WinRar打开。用WinRar打开后，可以看到里面有一些文件夹，双击其中的java文件夹，再双击util的文件夹，可以在看到Date.class文件就在其中。如果你看过Data.java或其他JDK类库的源码(在C:\\Program Files\\Java\\jdk1.5.0\\src.zip文件中)，你就会发现，像java、util这些文件夹均是package。这也是Hello.java第2行中使用了import指令的原因。 我们可以通过WinRar的查找功能来定位某个类所在的包。在\"查找文件\"的窗口中的\"要查找的文件名\"文本框中输入Date.class，就会查找出在rt.jar文件中存在两个Date.class文件，一个是java\\sql\\Date.class，另一个是java\\util\\Date.class。其中，sql下面的Date.class文件与数据库有关，并非我们这里所需，java\\util\\Date.class才是我们所要的。 rt.jar文件就像本文中的C:\\Java Test中一样，是JDK类库的唯一入口。我们可以在命令行的classpath选项指定.jar文件。需要注意，.jar文件的classpath设置有些特珠。在以前的例子中，我们设置classpath时都是设置了路径就行了，而对于.jar文件，我们必须将.jar文件名直接加到classpath中。 在命令行输入 javac -classpath \"C:\\Program Files\\Java\\jdk1.5.0\\jre\\lib\\rt.jar\";\"C:\\Java Test\" \"C:\\Java Test\\Hello.java\" java -classpath \"C:\\Program Files\\Java\\jdk1.5.0\\jre\\lib\\rt.jar\";\"C:\\Java Test\" Hello 这样当然没有问题，因为我们指定了rt.jar文件及C:\\Java Test两个classpath。但且慢，在命令行输入： javac -classpath \"C:\\Java Test\" \"C:\\Java Test\\Hello.java\" java -classpath \"C:\\Java Test\" Hello 不可思议的是，编译及运行成功了！令人惊讶的是在我们将classspath只设置为C:\\Java Test的情况下，JDK如何得出java.util.Date的classpath？ 原因在于，就像java的Path路径已经悄悄在后台设置好一样，rt.jar的classpath路径也悄悄地在后台设置了。因此，我们不必多此一举手工设置其classpath了。 最后一点需要谈到的是，如果主类恰好也在一个package中(在大型的开发中，其实这才是一种最常见的现象)，那么java命令行的类名前面就必须加上包名。 在C:\\Java Test下面新建一个文件夹，名为NF。将C:\\Java Test下面的Hello.class删除，将Hello.java移到NF文件夹下。打开NF文件夹下的Hello.java，为其设置package属性。 package NF; import DF.Person; import java.util.Date; public class Hello { public static void main(String[] args) { Date date = new Date(); System.out.println(date); Person person = new Person(\"Mike\"); System.out.println(person.getName()); } } 编译与以前没啥区别，只不过是修正一下改过之后的路径。 javac -classpath \"C:\\Java Test\" \"C:\\Java Test\\NF\\Hello.java\" 而java命令行却有了变化 java -classpath \"C:\\Java Test\" NF.Hello 上面命令行语句中，NF.Hello告诉JDK，Hello.class在NF的package下面。 至此，本文有关classpath及package的问题的讨论已经全部结束。由此可见，Java的入门的确非常不易。如果初学Java的程序员一见到Java的编译竟是如此的复杂，多半就会抽身而退。因此，笔者认为，Sun在J2SE的Tutorial中故意将编译的问题尽量简单化，以吸引更多的Java初学者。一旦品尝了Java的香醇可口的美味后，就不用担心他们退出了，因为咖啡是非常容易让人上瘾的。","tags":"Tech","url":"http://leetschau.github.io/javade-classpathyu-package.html","loc":"http://leetschau.github.io/javade-classpathyu-package.html"},{"title":"Java中classpath与包名关系的一个试验","text":"通过修改源文件中包名和手工编译源文件的方法，说明使用Java引用的方法是： JAR文件实际上是zip格式压缩包，假设包结构为dir_a/dir_b/c.class（dir_a目录下是dir_b目录，dir_b目录下是c.class文件），将该JAR包的绝对路径加入到classpath中，然后在源文件里用import a.b.c的方法使用c类。下面分别用手工编译、运行不同包名源文件的方法证明以上论述。 方案1：类文件中不写包名： DOS命令为： cd e:\\ex\\leechau set CLASSPATH=e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-jdk14-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-api-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\mina-core-2.0.0-RC1.jar;. javac SamplMinaServerHandler.java javac MyMinaServer.java java MyMinaServer SamplMinaServerHandler.java文件内容为： // package ex.leechau; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IoSession; public class SamplMinaServerHandler extends IoHandlerAdapter{ private int count=0; //当一个客端端连结进入时 @Override public void sessionOpened(IoSession session) throws Exception { System.out.println(\"incomming client : \"+session.getRemoteAddress()); } //当一个客户端关闭时 @Override public void sessionClosed(IoSession session) { System.out.println(\"one Clinet Disconnect !\"); } @Override public void messageReceived(IoSession session, Object message) throws Exception { //我们己设定了服务器解析消息的规则是一行一行读取,这里就可转为String: String s=(String)message; // Write the received data back to remote peer System.out.println(\"收到客户机发来的消息: \"+s); //测试将消息回送给客户端 session.write(s+count); count++; } } MyMinaServer.java文件内容为： // package ex.leechau; import java.io.IOException; import java.net.InetSocketAddress; import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder; import org.apache.mina.filter.codec.ProtocolCodecFilter; import org.apache.mina.filter.codec.textline.TextLineCodecFactory; import org.apache.mina.transport.socket.SocketAcceptor; import org.apache.mina.transport.socket.nio.NioSocketAcceptor; public class MyMinaServer { public static void main(String[] args) throws IOException { //创建一个非阻塞的Server端Socket,用NIO SocketAcceptor acceptor = new NioSocketAcceptor(); //创建接收数据的过滤器 DefaultIoFilterChainBuilder chain = acceptor.getFilterChain(); //设定这个过滤器将一行一行(/r/n)的读取数据 chain.addLast(\"myChin\", new ProtocolCodecFilter(new TextLineCodecFactory())); //设定服务器端的消息处理器:一个SamplMinaServerHandler对象, acceptor.setHandler(new SamplMinaServerHandler()); // 服务器端绑定的端口 int bindPort=9988; //绑定端口,启动服务器 acceptor.bind(new InetSocketAddress(bindPort)); System.out.println(\"Mina server is listening on port: \" + bindPort); } } 方案2：类文件中写包名，在源文件目录下编译： cd e:\\ex\\leechau set CLASSPATH=e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-jdk14-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-api-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\mina-core-2.0.0-RC1.jar;e:\\ javac SamplMinaServerHandler.java javac MyMinaServer.java java MyMinaServer SamplMinaServerHandler.java和MyMinaServer.java文件取消方案1中包名上的注释。 方案3：类文件中写包名，在项目根目录下编译： cd e:\\ set CLASSPATH=e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-jdk14-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\slf4j-api-1.3.0.jar;e:\\MyDoc\\JEx\\MinaServer\\lib\\mina-core-2.0.0-RC1.jar;. javac ex/leechau/SamplMinaServerHandler.java javac ex/leechau/MyMinaServer.java java ex/leechau/MyMinaServer SamplMinaServerHandler.java和MyMinaServer.java文件与方案2一样。 以上3中方案都可以是Mina Server正常运行，但如果在有包名的情况下使用方案1的方法定义classpath，则编译MyMinaServer.java时会出现\"无法识别SamplMinaServerHandler\"错误。","tags":"Tech","url":"http://leetschau.github.io/javazhong-classpathyu-bao-ming-guan-xi-de-yi-ge-shi-yan.html","loc":"http://leetschau.github.io/javazhong-classpathyu-bao-ming-guan-xi-de-yi-ge-shi-yan.html"},{"title":"用UltraEdit Color Scheme Manager修改UE的配色主题","text":"UltraEdit的各种配置信息都保存在一个叫UEdit32.ini的文件中，配色主题是其中的一部分，UltraEdit Color Scheme Manager为修改此部分提供了一个便捷的工具，用户可首先生成自己的配色文件（或者使用别人制作的配色文件），然后用它导入到UEdit32.ini中，就实现了添加配色主题的目的。具体步骤是： 下载压缩包uecolors_v1.2.1.1006.zip，解压，运行其中的uecolors.exe； 为UltraEdit Color Scheme Manager指定UE的ini文件位置【Settings->Set INI File Location】，根据版本不同，ini文件可能出现在两处：c:\\Documents and Settings\\Administrator\\Application Data\\IDMComp\\UltraEdit\\UEdit32.ini或者UE的安装目录下； 【File->Open Scheme】将做好的配色主题文件导入（例如压缩包里自带的Borland.ueTheme），【File->Export Theme to UE】； 运行UE，【View->Set Colors->Save】保存配色主题； 关闭UE，打开UEdit32.ini，将默认的配色主题名字user scheme 1 改为自己定义的名字； That's it.","tags":"Tech","url":"http://leetschau.github.io/yong-ultraedit-color-scheme-managerxiu-gai-uede-pei-se-zhu-ti.html","loc":"http://leetschau.github.io/yong-ultraedit-color-scheme-managerxiu-gai-uede-pei-se-zhu-ti.html"},{"title":"jEdit使用笔记","text":"安装 首先下载jar包，然后命令行执行：java -jar jeditInstall.jar 安装完毕后，在安装目录下执行：java -jar jedit.jar 修改字体 Options -> Global Options: Text Area: Editor字体； Appearence: 列表、工具栏等处的字体； Java开发相关插件 ProjectViewer, JavaSideKick, Console, JSwat或者JavaDebugger Console: 修改字体：Options -> Plugin Options -> Console -> General -> Font; jEdit的问题与DrJava一样，就是不具备专用IDE（如Eclipse）的代码感知功能，例如动态检查语法错误，缺包（import语句解析失败）提示等，目前的解决方案是Eclipse + viPlugin；","tags":"Tech","url":"http://leetschau.github.io/jeditshi-yong-bi-ji.html","loc":"http://leetschau.github.io/jeditshi-yong-bi-ji.html"},{"title":"用Notepad++实现轻量级Java IDE","text":"打开Notepad++的命令窗口 主菜单【插件->NppExec->Show Console Dialog】 设置环境变量 设置JAVA_HOME为：f:\\warez\\Develop\\Java\\jdk1.5.0_16 验证：在npp命令窗口中输入javac并回车，如果输出javac的帮助信息说明环境变量设置成功；","tags":"Tech","url":"http://leetschau.github.io/yong-notepadshi-xian-qing-liang-ji-java-ide.html","loc":"http://leetschau.github.io/yong-notepadshi-xian-qing-liang-ji-java-ide.html"},{"title":"Eclipse插件安装方法","text":"Eclipse SDK 3.7支持在dropins文件夹中安装插件，解压后的目录格式为：$ECLIPSE_DIR/dropins/ /plugins(features)，如下图所示： $ECLIPSE_DIR/dropins | __IvyDE | | __plugins | | __features | __Terracotta | __plugins 以上方法在Eclipse SDK 3.7下安装ivyde和terracotta两个插件成功。 下面是旧版Eclipse的安装方法，供参考。 Eclipse Galileo安装插件主要有3中方式：直接解压、菜单和外部插件。直接解压就是将插件中plugins和features目录中的文件解压到eclipse对应的目录中，这显然不是好办法，一旦插件要升级或者不想用了，卸载会变得及其困难。菜单方法就是用elipse菜单【Help->Install New Software】装插件，试了一下似乎不好用，插件管理确实是eclipse需要加强的地方（也或许是开发者认为做这个功能没必要？）。外部插件就是写link文件，比较而言这种方法是最好的，想卸载的时候只要去掉link文件就行了。 过程如下： 1、解压插件。确定插件解压目录，如f:\\warez\\IDEs\\EclipsePlugins\\，将插件解压到这个目录下，目录结构如下： f:\\warez\\IDEs\\EclipsePlugins\\language\\eclipse\\plugins\\ f:\\warez\\IDEs\\EclipsePlugins\\language\\eclipse\\features\\ 也就是保证每一个插件目录（这里是 language ）下是 eclipse，再下面是 plugins和features。 2、在 eclipse解压目录 下新建文件夹 links（也就是links与eclipse.exe处在相同目录下），例如： f:\\warez\\IDEs\\Eclipse0901\\eclipse.exe与f:\\warez\\IDEs\\Eclipse0901\\links\\； 3、在 links 下新建一个 link 文件，比如 language.start ， 后缀名可以任意取，如 .link,.ini,.txt 等等 , 只要 link 文件名和插件文件安装目录中的最后文件夹名一致即可， 在这里我的插件安装目录结构为 f:\\warez\\IDEs\\EclipsePlugins\\language\\， 所以 link 文件名就命名为 language.start， 如果你的插件安装目录结构为 D:\\eclipse\\myPlugins\\languagepack, 则 link 文件名应为 languagepack.start 。 4、在 language.start 中写入如下一句话：path=F:/warez/IDEs/EclipsePlugins/language， 即 path= 你的插件安装目录（ 路径字符串中要用/代替\\ ， language后面不要写\"/\" ）； 5、启动 eclipse：在 f:\\warez\\IDEs\\Eclipse0901下运行 eclipse -clean； 如果发现查件没有安装成功，按下面的步骤debug： 1、确认配置好插件启动eclipse时一定要用eclipse -clean的方法启动，这样eclipse会重新检查、加载一遍插件，之后再启动eclipse就不需要-clean参数了。 2、若还不行，删除 f:\\warez\\IDEs\\Eclipse0901\\configuration下的org.eclipse.update目录（这是一个记录插件更新情况的文件夹），删除掉这个文件夹后， eclipse 会重新扫描所有的插件； 3、若还不行，最有效的办法是分析工作目录下 .metadata目录下的.log文件（如 d:\\workspace.metadata.log），如果插件未能正确加载，会在目录里给出加载插件失败的信息；","tags":"Tech","url":"http://leetschau.github.io/eclipsecha-jian-an-zhuang-fang-fa.html","loc":"http://leetschau.github.io/eclipsecha-jian-an-zhuang-fang-fa.html"},{"title":"设计原则","text":"依赖都定义在接口中（依赖倒置原则），接口的设计要符合\"只有一个原因引起接口变化\"（单一职责原则）。","tags":"Tech","url":"http://leetschau.github.io/she-ji-yuan-ze.html","loc":"http://leetschau.github.io/she-ji-yuan-ze.html"},{"title":"VBA 语法概述","text":"标识符 标识符是一种标识变量、常量、过程、函数、类等语言构成单位的符号， 利用它可以完成对变量、常量、过程、函数、类等的引用。 命名规则如下： 字母打头，由字母、数字和下划线组成，如 A987b_23Abc 字符长度小于40，（Excel2002以上中文版等，可以用汉字且长度可达254个字符） 不能与VB保留字重名，如public, private, dim, goto, next, with, integer, single等 运算符 运算符是代表VB某种运算功能的符号。 赋值运算符: = 数学运算符: &、+ (字符连接符)、+(加)、-（减）、Mod（取余）、\\（整除）、*（乘）、/（除）、-（负号）、&#94;（指数） 逻辑运算符: Not（非）、And（与）、Or（或）、Xor（异或）、Eqv（相等）、Imp（隐含） 关系运算符: = （相同）、<>（不等）、>（大于）、<（小于）、>=（不小于）、<=（不大于）、Like、Is 位运算符: Not（逻辑非）、And（逻辑与）、Or（逻辑或）、Xor（逻辑异或）、Eqv（逻辑等）、Imp（隐含） 数据类型 VBA共有12种数据类型，具体见下表，此外用户还可以根据以下类型用Type自定义数据类型。 数据类型 类型标识符 字节 字符串型 String $ 字符长度(0-65400) 字节型 Byte 无 1 布尔型 Boolean 无 2 整数型 Integer % 2 长整数型 Long & 4 单精度型 Single ! 4 双精度型 Double # 8 日期型 Date 无 8 公元100/1/1-9999/12/31 货币型 Currency @ 8 小数点型 Decimal 无 14 变体型 Variant 无 以上任意类型，可变 对象型 Object 无 4 4, 变量与常量: 1）VBA允许使用未定义的变量，默认是变体变量Variant。 2）在模块通用说明部份，加入 Option Explicit 语句可以强迫用户进行变量定义。 3）变量定义语句及变量作用域 Dim 变量 as 类型 '定义为局部变量，如 Dim xyz as integer Private 变量 as 类型 '定义为私有变量，如 Private xyz as byte Public 变量 as 类型 '定义为公有变量，如 Public xyz as single Global 变量 as 类型 '定义为全局变量，如 Globlal xyz as date Static 变量 as 类型 '定义为静态变量，如 Static xyz as double 一般变量作用域的原则是，那部份定义就在那部份起作用，模块中定义则在该模块那作用。 常量为变量的一种特例，用Const定义，且定义时赋值，程序中不能改变值，作用域也如同变量作用域。 如下定义： Const Pi = 3 . 1415926 as single 数组是包含相同数据类型的一组变量的集合，对数组中的单个变量引用通过数组索引下标进行。 在内存中表现为一个连续的内存块，必须用Global或Dim语句来定义。 定义规则如下： Dim 数组名 ([ lower to ] upper [, [ lower to ] upper , … .]) as type ; Lower缺省值为0。 二维数组是按行列排列，如XYZ(行，列)。 除了以上固定数组外，VBA还有一种功能强大的动态数组，定义时无大小维数声明； 在程序中再利用Redim语句来重新改变数组大小，原来数组内容可以通过加preserve关键字来保留。 例如： Dim array1() as double : Redim array1(5) : array1(3)=250 : Redim preserve array1(5,10) 注释和赋值语句 注释语句是用来说明程序中某些语句的功能和作用； VBA中有两种方法标识为注释语句。 单引号 ' : 例如： '定义全局变量；可以位于别的语句之尾，也可单独一行 Rem : 例如： Rem 定义全局变量；只能单独一行 赋值语句是进行对变量或对象属性赋值的语句，采用赋值号 = ， 如 X=123：Form1.caption=\"我的窗口\" 。 对对象的赋值采用 set myobject=object 或 myobject:=object 的形式。 书写规范 1）VBA不区分标识符的字母大小写，一律认为是小写字母； 2）一行可以书写多条语句，各语句之间以冒号 : 分开； 3）一条语句可以多行书写，以空格加下划线 _ 来标识下行为续行； 4）标识符最好能简洁明了，不造成歧义。 判断语句 If ... Then ... Else 语句 示例： If A > B And C < D Then A = B + 2 Else A = C + 2 If x > 250 Then x = x - 100 或者，可以使用块形式的语法： If condition Then [ statements ] [ ElseIf condition - n Then [ elseifstatements ] ... [ Else [ elsestatements ]] End If 示例： If Number < 10 Then Digits = 1 ElseIf Number < 100 Then Digits = 2 Else Digits = 3 End If Select Case…Case…End Case 语句 如1： Select Case Pid Case \" A101 \" Price = 200 Case \" A102 \" Price = 300 …… Case Else Price = 900 End Case 3 ） Choose 函数 choose(index, choce-1,choice-2,…,choice-n)，可以用来选择自变量串列中的一个值， 并将其返回，index 必要参数，数值表达式或字段，它的运算结果是一个数值， 且界于 1 和可选择的项目数之间。 choice 必要参数，Variant表达式，包含可选择项目的其中之一。 如： GetChoice = Choose(Ind, \"Speedy\", \"United\", \"Federal\") Switch函数 Switch(expr-1, value-1[, expr-2, value-2 _ [, expr-n,value-n]]) switch函数和Choose函数类似，但它是以两个一组的方式返回所要的值， 在串列中，最先为TRUE的值会被返回。 expr 必要参数，要加以计算的 Variant 表达式。 value 必要参数。如果相关的表达式为 True，则返回此部分的数值或表达式， 没有一个表达式为 True，Switch 会返回一个 Null值。 循环语句 1) For Next语句 以指定次数来重复执行一组语句: For counter = start To end [ Step step ] ' step 缺省值为 1 [ statements ] [ Exit For ] [ statements ] Next [ counter ] 示例： For Words = 10 To 1 Step - 1 ' 建立 10 次循环 For Chars = 0 To 9 ' 建立 10 次循环 MyString = MyString & Chars ' 将数字添加到字符串中 Next Chars ' Increment counter MyString = MyString & \" \" ' 添加一个空格 Next Words 2) For Each…Next语句: 主要功能是对一个数组或集合对象进行，让所有元素重复执行一次语句 For Each element In group Statements [Exit for] Statements Next [element] 如1： For Each rang2 In range1 With range2.interior .colorindex=6 .pattern=xlSolid End with Next 这上面一例中用到了 With…End With 语句，目的是省去对象多次调用，加快速度；语法为： With object [statements] End With 3) Do…loop语句 在条件为true时，重复执行区块命令 Do {while |until} condition ' while 为当型循环，until为直到型循环，顾名思义，不多说啦 Statements Exit do Statements Loop 或者使用下面语法 Do ' 先do 再判断，即不论如何先干一次再说 Statements Exit do Statements Loop {while |until} condition 10,其他类语句和错误语句处理 A, 其他循环语句:结构化程序使用以上判断和循环语句已经足够，建议不要轻易使用下面的语句，虽然VBA还支持。 1)Goto line 该语句为跳转到line语句行 2)On expression gosub destinatioinlist 或者 on expression goto destinationlist 语句为根据 exprssion表达式值来跳转到所要的行号或行标记 3)Gosub line…line…Return语句， Return 返回到 Gosub line行，如下例： Sub gosubtry() Dim num Num=inputbox(\"输入一个数字，此值将会被判断循环\") If num>0 then Gosub Routine1 ：Debug.print num：Exit sub Routine1: Num=num/5 Return End sub 4) while…wend语句 只要条件为TRUE，循环就执行，这是以前VB老语法保留下来的， 如下例： while condition ' while I<50 [statements] ' I = I + 1 wend ' Wend 附录 错误语句处理 执行阶段有时会有错误的情况发生，利用On Error语句来处理错误，启动一个错误的处理程序。 语法如下： On Error Goto Line '当错误发生时，会立刻转移到line行去 On Error Resume Next '当错误发生时，会立刻转移到发生错误的下一行去 On Erro Goto 0 '当错误发生时，会立刻停止过程中任何错误处理过程 11,过程和函数 过程是构成程序的一个模块，往往用来完成一个相对独立的功能。过程可以使程序更清晰、更具结构性。VBA具有四种过程：Sub 过程、Function函数、Property属性过程和Event事件过程。 A, Sub过程:Sub 过程的参数有两种传递方式：按值传递(ByVal)和按地址传递(ByRef)。如下例： {{ Sub password (ByVal x as integer, ByRef y as integer) If y=100 then y=x+y else y=x-y x=x+100 End sub Sub call_password () Dim x1 as integer Dim y1 as integer x1=12 y1=100 Call password (x1,y1) ‘调用过程方式：1. Call 过程名(参数1, 参数2…) ; 2. 过程名 参数1, 参数2… debug.print x1,y1 ‘结果是12、112，y1按地址传递改变了值，而x1按值传递，未改变原值 End sub }} B, Function函数:函数实际是实现一种映射，它通过一定的映射规则，完成运算并返回结果。参数传递也两种：按值传递(ByVal)和按地址传递(ByRef)。如下例： Function password(ByVal x as integer, byref y as integer) as boolean If y=100 then y=x+y else y=x-y x=x+100 if y=150 then password=true else password=false End Function Sub call_password () Dim x1 as integer Dim y1 as integer x1=12 y1=100 if password then ‘调用函数：1. 作为一个表达式放在=右端 ; 2. 作为参数使用 debug.print x1 end if End sub C, Property属性过程和Event事件过程:这是VB在对象功能上添加的两个过程，与对象特征密切相关，也是VBA比较重要组成，技术比较复杂，可以参考相关书籍。 12,内部函数 在VBA程序语言中有许多内置函数，可以帮助程序代码设计和减少代码的编写工作。 A．测试函数 IsNumeric(x) ‘是否为数字, 返回Boolean结果，True or False IsDate(x) ‘是否是日期, 返回Boolean结果，True or False IsEmpty（x） ‘是否为Empty, 返回Boolean结果，True or False IsArray(x) ‘指出变量是否为一个数组。 IsError(expression) ‘指出表达式是否为一个错误值 IsNull(expression) ‘指出表达式是否不包含任何有效数据 (Null)。 IsObject(identifier) ‘指出标识符是否表示对象变量 数学函数 Sin(X)、Cos(X)、Tan(X)、Atan(x) 三角函数，单位为弧度 Log(x) 返回x的自然对数 Exp(x)返回 ex Abs(x) 返回绝对值 Int(number)、Fix(number) 都返回参数的整数部分，区别：Int 将 -8.4 转换成 -9，而 Fix 将-8.4 转换成 -8 Sgn(number) 返回一个 Variant (Integer)，指出参数的正负号 Sqr(number) 返回一个 Double，指定参数的平方根 VarType(varname) 返回一个 Integer，指出变量的子类型 Rnd（x）返回0-1之间的单精度数据，x为随机种子 字符串函数 Trim(string) 去掉string左右两端空白 Ltrim(string) 去掉string左端空白 Rtrim(string) 去掉string右端空白 Len(string) 计算string长度 Left(string, x) 取string左段x个字符组成的字符串 Right(string, x) 取string右段x个字符组成的字符串 Mid(string, start,x) 取string从start位开始的x个字符组成的字符串 Ucase(string) 转换为大写 Lcase(string) 转换为小写 Space(x) 返回x个空白的字符串 Asc(string) 返回一个 integer，代表字符串中首字母的字符代码 Chr(charcode) 返回 string，其中包含有与指定的字符代码相关的字符 转换函数 CBool(expression) 转换为Boolean型 CByte(expression) 转换为Byte型 CCur(expression) 转换为Currency型 CDate(expression) 转换为Date型 CDbl(expression) 转换为Double型 CDec(expression) 转换为Decemal型 CInt(expression) 转换为Integer型 CLng(expression) 转换为Long型 CSng(expression) 转换为Single型 CStr(expression) 转换为String型 CVar(expression) 转换为Variant型 Val(string) 转换为数据型 Str(number) 转换为String 时间函数 Now 返回一个 Variant (Date)，根据计算机系统设置的日期和时间来指定日期和时间。 Date 返回包含系统日期的 Variant (Date)。 Time 返回一个指明当前系统时间的 Variant (Date)。 Timer 返回一个 Single，代表从午夜开始到现在经过的秒数。 TimeSerial(hour, minute, second) 返回一个 Variant (Date)，包含具有具体时、分、秒的时间。 DateDiff(interval, date1, date2[, firstdayofweek[, firstweekofyear]]) 返回 Variant (Long) 的值，表示两个指定日期间的时间间隔数目 Second(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一分钟之中的某个秒 Minute(time) 返回一个 Variant (Integer)，其值为 0 到 59 之间的整数，表示一小时中的某分钟 Hour(time) 返回一个 Variant (Integer)，其值为 0 到 23 之间的整数，表示一天之中的某一钟点 Day(date) 返回一个 Variant (Integer)，其值为 1 到 31 之间的整数，表示一个月中的某一日 Month(date) 返回一个 Variant (Integer)，其值为 1 到 12 之间的整数，表示一年中的某月 Year(date) 返回 Variant (Integer)，包含表示年份的整数。 Weekday(date, [firstdayofweek]) 返回一个 Variant (Integer)，包含一个整数，代表某个日期是星期几 13, 文件操作 1）文件 Dir[(pathname[, attributes])] ；pathname 可选参数，用来指定文件名的字符串表达式，可能包含目录或文件夹、以及驱动器。如果没有找到 pathname，则会返回零长度字符串 (\"\"); attributes 可选参数。常数或数值表达式，其总和用来指定文件属性。如果省略，则会返回匹配 pathname 但不包含属性的文件。 2）删除 Kill pathname 从磁盘中删除文件, pathname 参数是用来指定一个文件名 RmDir pathname 从磁盘中删除删除目录，pathname 参数是用来指定一个文件夹 3）打开 Open pathname For mode [Access access] [lock] As [#]filenumber [Len=reclength] 能够对文件输入/输出 (I/O)。 pathname 必要。字符串表达式，指定文件名，该文件名可能还包括目录、文件夹及驱动器。 mode 必要。关键字，指定文件方式，有 Append、Binary、Input、Output、或 Random 方式。如果未指定方式，则以 Random 访问方式打开文件。 access 可选。关键字，说明打开的文件可以进行的操作，有 Read、Write、或 Read Write 操作。 lock 可选。关键字，说明限定于其它进程打开的文件的操作，有 Shared、Lock Read、Lock Write、和 Lock Read Write 操作。 filenumber 必要。一个有效的文件号，范围在 1 到 511 之间。使用 FreeFile 函数可得到下一个可用的文件号。 reclength 可选。小于或等于 32，767（字节）的一个数。对于用随机访问方式打开的文件，该值就是记录长度。对于顺序文件，该值就是缓冲字符数。说明 对文件做任何 I/O 操作之前都必须先打开文件。Open 语句分配一个缓冲区供文件进行 I/O 之用，并决定缓冲区所使用的访问方式。如果 pathname 指定的文件不存在，那么，在用 Append、Binary、Output、或 Random 方式打开文件时，可以建立这一文件。如果文件已由其它进程打开，而且不允许指定的访问类型，则 Open 操作失败，而且会有错误发生。如果 mode 是 Binary 方式，则 Len 子句会被忽略掉。 重要 在 Binary、Input 和 Random 方式下可以用不同的文件号打开同一文件，而不必先将该文件关闭。在 Append 和 Output 方式下，如果要用不同的文件号打开同一文件，则必须在打开文件之前先关闭该文件。 4）读入 Input #filenumber, varlist 从已打开的顺序文件中读出数据并将数据指定给变量 Get [#]filenumber, [recnumber], varname将一个已打开的磁盘文件读入一个变量之中。 5）写入 Write #filenumber, [outputlist] 将数据写入顺序文件 Print #filenumber, [outputlist] 将格式化显示的数据写入顺序文件中 Put [#]filenumber, [recnumber], varname 将一个变量的数据写入磁盘文件中。 6）关闭 Close [filenumberlist] 关闭 Open 语句所打开的输入/输出 (I/O) 文件 注意 如果今后想用 Input # 语句读出文件的数据，就要用 Write # 语句而不用 Print # 语句将数据写入文件。因为在使用 Write # 时，将数据域分界就可确保每个数据域的完整性，因此可用 Input # 再将数据读出来。使用 Write # 还能确保任何地区的数据都被正确读出。Write 与 Print # 语句不同，当要将数据写入文件时，Write # 语句会在项目和用来标记字符串的引号之间插入逗号。Write # 语句在将 outputlist 中的最后一个字符写入文件后会插入一个新行字符，即回车换行符，(Chr(13) + Chr(10))。 7）其他文件函数 LOF(filenumber) 返回一个 Long，表示用 Open 语句打开的文件的大小，该大小以字节为单位。 EOF(filenumber) 返回一个 Integer，它包含 Boolean 值 True，表明已经到达为 Random 或顺序 Input 打开的文件的结尾。 Loc(filenumber) 返回一个 Long，在已打开的文件中指定当前读/写位置 Seek(filenumber) 返回一个 Long，在 Open 语句打开的文件中指定当前的读/写位置","tags":"Tech","url":"http://leetschau.github.io/vba-yu-fa-gai-shu.html","loc":"http://leetschau.github.io/vba-yu-fa-gai-shu.html"},{"title":"解析java源文件","text":"尝试从java源文件中解析出类、方法、属性等信息，但下面的代码没有完全实现。 Sub parseJava() Dim package_name as String 'read a file Documents.Open FileName:=\"f:\\CommandCm.java\", ConfirmConversions:=False, ReadOnly:=True paraNo = ActiveDocument.Paragraphs.Count For lineNo = 1 To paraNo Set curParaWords = ActiveDocument.Paragraphs(lineNo).Range.Words Dim strCurPara as String strCurPara = ActiveDocument.Paragraphs(lineNo).Range.Text If InStr(strCurPara, \"package\")=1 Then '包名是package后、分号前的部分 tmpStr = Right(strCurPara,Len(strCurPara)-Len(\"package\")-1) package_name = Left(tmpStr, Len(tmpStr)-2) End If If InStr(strCurPara, \"public class\")=1 Then '类名是这一行的第三个单词，且不含末尾空格 class_name = RTrim(curParaWords(3).Text) End If If InStr(strCurPara, \"public interface\")=1 Then '接口名是这一行的第三个单词，且不含末尾空格 class_name = RTrim(curParaWords(3).Text) End If Select Case curParaWords(2).Text Case \"public\" Case \"private\" Case \"protected\" Case Else End Case If curParaWords(2)=\"public\" Then '接口名是这一行的第三个单词，且不含末尾空格 class_name = RTrim(ActiveDocument.Paragraphs(lineNo).Range.Words(3).Text) End If Next lineNo ActiveDocument.Close End Sub 下面是业务逻辑： 数据结构： 类相关数据表ClassInfo（Map） key: name, description, class_name, package, extends, interface; 属性数据表PropInfo（List ） 方法数据表MethodInfo（List ） 文本格式约定： 顶格、package起首代码行为package声明行； 顶格、public class起首的代码行是类声明行； 顶格、 public interface起首的代码行是接口声明行； 一个tab后跟public、private、protected是方法或者属性 有左括号的是方法， 左括号前单词是方法名，方法名前是返回值的数据类型； 无左括号 的是 属性，等号左边单词是属性名，若无等号分号前单词是属性名，若都没有输出一条 \"文件名：行号：异常属性/方法，手工提取\" 提示； 一个tab后跟其他字母 输出一条\"文件名：行号：异常属性/方法，手工提取\"提示； 一个tab后跟非字母符号（如/*是注释，@是编译标志）略过； 流程： 用户输入目标目录 将文件名保存在ClassInfo.name和class_name中； 加载该目录下所有java文件， 对于一个java文件： 第一次文本逐行读取：提取除方法/属性说明外所有信息； 第二次文本逐行读取：寻找以\"* 方法名\"开始的行，作为方法说明，放入对应的方法Map中；","tags":"Tech","url":"http://leetschau.github.io/jie-xi-javayuan-wen-jian.html","loc":"http://leetschau.github.io/jie-xi-javayuan-wen-jian.html"},{"title":"Java程序员的推荐阅读书籍","text":"作为Java程序员来说，最痛苦的事情莫过于可以选择的范围太广，可以读的书太多，往往容易无所适从。我想就我自己读过的技术书籍中挑选出来一些，按照学习的先后顺序，推荐给大家，特别是那些想不断提高自己技术水平的Java程序员们。 在这份推荐阅读书籍的名单中，我没有列举流行的软件框架类学习书籍，例如Struts，Hibernate，Spring之类，也没有列举AJAX方面的书籍。是因为这类书籍容易过时，而上述的大半书籍的生命周期都足够长，值得你去购买和收藏。 Java编程入门类 对于没有Java编程经验的程序员要入门，随便读什么入门书籍都一样，这个阶段需要你快速的掌握Java基础语法和基本用法，宗旨就是\"囫囵吞枣不求甚解\"，先对Java熟悉起来再说。用很短的时间快速过一遍Java语法，连懵带猜多写写代码，要\"知其然\"。 1、《Java编程思想》 在有了一定的Java编程经验之后，你需要\"知其所以然\"了。这个时候《Java编程思想》是一本让你知其所以然的好书，它对于基本的面向对象知识有比较清楚的交待，对Java基本语法，基本类库有比较清楚的讲解，可以帮你打一个良好的Java编程基础。这本书的缺点是实在太厚，也比较罗嗦，不适合现代人快节奏学习，因此看这本书要懂得取舍，不是每章每节都值得一看的，挑重点的深入看就可以了。 2、《Agile Java》中文版 这本书是出版社送给我的，我一拿到就束之高阁，放在书柜一页都没有翻过，但是前两天整理书柜的时候，拿出来一翻，竟然发现这绝对是一本好书！这本书一大特点是以单元测试和TDD来贯穿全书的，在教你Java各种重要的基础知识的过程中，潜移默化的影响你的编程思维走向敏捷，走向TDD。另外这本书成书很新，以JDK5.0的语法为基础讲解，要学习JDK5.0的新语法也不错。还有这本书对于内容取舍也非常得当，Java语言毕竟类库庞大，可以讲的内容太多，这本书选择的内容以及内容的多寡都很得当，可以让你以最少的时间掌握Java最重要的知识，顺便培养出来优秀的编程思路，真是一本不可多得的好书。 虽然作者自己把这本书定位在入门级别，但我不确定这本书用来入门是不是稍微深了点。 Java编程进阶类 打下一个良好的Java基础，还需要更多的实践经验积累，我想没有什么捷径。有两本书值得你在编程生涯的这个阶段阅读，培养良好的编程习惯，提高你的代码质量。 1、《重构 改善既有代码的设计》 这本书名气很大，不用多介绍，可以在闲暇的时候多翻翻，多和自己的实践相互印证。这本书对你产生影响是潜移默化的。 2、《测试驱动开发 by Example》 本书最大特点是很薄，看起来没有什么负担。你可以找一个周末的下午，一边看，一边照做，一个下午就把书看完，这本书的所有例子跑完了。这本书的作用是通过实战让你培养TDD的思路。 Java架构师之路 到这个阶段，你应该已经非常娴熟的运用Java编程，而且有了一个良好的编程思路和习惯了，但是你可能还缺乏对应用软件整体架构的把握，现在就是你迈向架构师的第一步。 1、《Expert One-on-One J2EE Design and Development》 这本书是Rod Johnson的成名著作，非常经典，从这本书中的代码诞生了springframework。但是好像这本书没有中译本。 2、《Expert One-on-One J2EE Development without EJB》 这本书由gigix组织翻译，多位业界专家参与，虽然署名译者是JavaEye，其实JavaEye出力不多，实在是忝居译者之名。 以上两本书都是Rod Johnson的经典名著，Java架构师的必读书籍。在我所推荐的这些书籍当中，是我看过的最仔细，最认真的书，我当时读这本书几乎是废寝忘食的一气读完的，有小时候挑灯夜读金庸武侠小说的劲头，书中所讲内容和自己的经验知识一一印证，又被无比精辟的总结出来，读完这本书以后，我有种被打通经脉，功力爆增的感觉。 但是后来我看过一些其他人的评价，似乎阅读体验并没有我那么high，也许是因为每个人的知识积累和经验不同导致的。我那个时候刚好是经验知识积累已经足够丰富，但是还没有系统的整理成型，让这本书一梳理，立刻形成完整的知识体系了。 3、《企业应用架构模式》 Martin的又一本名著，但这本书我只是泛泛的看了一遍，并没有仔细看。这本书似乎更适合做框架的人去看，例如如果你打算自己写一个ORM的话，这本书是一定要看的。但是做应用的人，不看貌似也无所谓，但是如果有空，我还是推荐认真看看，会让你知道框架为什么要这样设计，这样你的层次可以晋升到框架设计者的角度去思考问题。Martin的书我向来都是推崇，但是从来都没有像Rod Johnson的书那样非常认真去看。 4、《敏捷软件开发 原则、模式与实践》 Uncle Bob的名著，敏捷的经典名著，这本书比较特别，与其说是讲软件开发过程的书，不如说讲软件架构的书，本书用了很大篇幅讲各种面向对象软件开发的各种模式，个人以为看了这本书，就不必看GoF的《设计模式》了。 软件开发过程 了解软件开发过程不单纯是提高程序员个人的良好编程习惯，也是增强团队协作的基础。 1、《UML精粹》 UML其实和软件开发过程没有什么必然联系，却是软件团队协作沟通，撰写软件文档需要的工具。但是UML真正实用的图不多，看看这本书已经足够了，完全没有必要去啃《UML用户指南》之类的东西。要提醒大家的是，这本书的中译本翻译的非常之烂，建议有条件的看英文原版。 2、《解析极限编程 拥抱变化》XP 这是Kent Beck名著的第二版，中英文对照。没什么好说的，必读书籍。 3、《统一软件开发过程》UP 其实UP和敏捷并不一定冲突，UP也非常强调迭代，测试，但是UP强调的文档和过程驱动却是敏捷所不取的。不管怎么说，UP值得你去读，毕竟在中国真正接受敏捷的企业很少，你还是需要用UP来武装一下自己的，哪怕是披着UP的XP。 4、《敏捷建模》AM Scott Ambler的名著，这本书非常的progmatic，告诉你怎么既敏捷又UP，把敏捷和UP统一起来了，又提出了很多progmatic的建议和做法。你可以把《解析极限编程 拥抱变化》、《统一软件开发过程》和《敏捷建模》这三本书放在一起读，看XP和UP的不同点，再看AM是怎么统一XP和UP的，把这三种理论融为一炉，形成自己的理论体系，那么你也可以去写书了。 软件项目管理 如果你突然被领导提拔为项目经理，而你完全没有项目管理经验，你肯定会心里没底；如果你觉得自己管理项目不善，很想改善你的项目管理能力，那么去考PMP肯定是远水不解近渴的。 1、《快速软件开发》 这也是一本名著。可以这样说，有本书在手，你就有了一个项目管理的高级参谋给你出谋划策，再也不必担心自己不能胜任的问题了。这本书不是讲管理的理论的，在实际的项目管理中，讲这些理论是不解决问题的，这本书有点类似于\"软件项目点子大全\"之类的东西，列举了种种软件项目当中面临的各种问题，以及应该如何解决问题的点子，你只需要稍加变通，找方抓药就行了。","tags":"Tech","url":"http://leetschau.github.io/javacheng-xu-yuan-de-tui-jian-yue-du-shu-ji.html","loc":"http://leetschau.github.io/javacheng-xu-yuan-de-tui-jian-yue-du-shu-ji.html"},{"title":"TotalCommander的两款目录插件","text":"CatalogMaker 与 DiskDir Extended 是两个用于生成文件夹目录的totalCmd插件。 将指定目录下所有文件、文件夹以指定格式存储在一个文本文件中，可作为EverCD+的轻量级替代品。 安装： 在TotalCmd中双击zip文件，tc会提示是否安装插件，确认后一路按默认安装即可。 使用： 选中要生成目录结构的文件夹，按alt+F5，【压缩格式】中在下拉框里选lst， 然后点【配置】，设置输出格式后确认，在对面目录下生成一个lst文件，实际就是一个纯文本文件。 二者比较： catalogmaker生成的目录更易读，但diskdirextended能够读出压缩包里的文件列表，二者各有优缺点。","tags":"Tech","url":"http://leetschau.github.io/totalcommanderde-liang-kuan-mu-lu-cha-jian.html","loc":"http://leetschau.github.io/totalcommanderde-liang-kuan-mu-lu-cha-jian.html"},{"title":"镜像文件制作/装载软件","text":"镜像文件制作 ultraISO、winISO和Nero就不说了，以下比较几款免费镜像制作/装载软件。 Folder2iso：绿色软件，免安装，将文件夹做成ISO文件， 其中【Charset】一般设为cp936或者EUC-CN（有中文路径和文件）或者默认 （无中文），UltraISO的替代品； isoDisk：能装载iso文件到虚拟光驱中（类似Daemon，其虚拟光驱盘符从A开始， 最多可加载20个），不能装载其他镜像文件（如img、bin、nrg等），还能将CD中的光盘做成ISO文件； ImgBurn：功能很全的一个freeware，但是没有装载ISO文件的功能。 ISORecorder：光盘刻录软件（取代Nero），似乎也能将文件夹做成ISO文件； TotalISO：这个是一个TotalCmd的插件，仅是一个界面，要光盘刻录功能还要借助其他软件； 总结：以目前的硬盘容量，基本无需刻录光盘，因此用Folder2iso制作ISO文件， 然后用Daemon或者isoDisk装载使用即可。 镜像文件加载工具 Pismo File Mount Audit Package ： freewaregenius推荐，需要安装，安装后右键需要mount的文件， 选择mount或者quick mount加载，前者是传统的加载方式，可以指定一个驱动器盘符， 后者更方便，直接把镜像文件变成一个文件夹，双击进入文件夹运行程序， 卸载是在文件夹上右键，选择unmount，就还原成原始的镜像文件了； 这个软件支持装载iso和zip文件，不支持cue, ape, rar等格式， 也不支持linux格式的bin文件； WinArchiver Virtual Drive ：貌似属于免费试用+加收费软件，需要安装； 参考：http://www.freewaregenius.com/another-forty-three-of-the-best-free-windows-enhancements-that-you-should-know-about-part-2/ 第11、12项","tags":"Tech","url":"http://leetschau.github.io/jing-xiang-wen-jian-zhi-zuo-zhuang-zai-ruan-jian.html","loc":"http://leetschau.github.io/jing-xiang-wen-jian-zhi-zuo-zhuang-zai-ruan-jian.html"},{"title":"使用输入流读取数据时的阻塞问题","text":"使用java.io.BufferedInputStream.read(byte[])方法读取Socket中传过来的数据时，如果需要超时退出判断机制，一定要注意B ufferedInputStream.available()的使用。下面的代码片段是一个很标准的读取过程，其中第5行的判断很重要，因为read( byte[] )方法本身是阻塞的，如果自始至终is没有收到任何数据，就会一直阻塞在read()方法上（第6行），导致整个超时判断机制失去作用，而 available()方法的使用避免了这种可能性。 示例程序代码： 01 try { 02 long startTime = System.currentTimeMillis(); 03 while (someCriteria) { 04 byte[] cache = new byte[1024]; 05 if (is.available() > 0) { 06 int count = is.read(cache); 07 if (count <= 0) { 08 if (System.currentTimeMillis() - startTime >= timeout) { 09 throw new GapiException(\"Connection Time Out!\"); 10 } 11 continue; 12 } 13 // 后续处理 14 } 15 if (System.currentTimeMillis() - startTime >= timeout) { 16 throw new GapiException(\"Connection Time Out!\"); 17 } 18 Thread.sleep(10); 19 } 20 } catch (Exception e) { 21 logger.error(\"ERROR: \", e); 22 } 程序流程图：","tags":"Tech","url":"http://leetschau.github.io/shi-yong-shu-ru-liu-du-qu-shu-ju-shi-de-zu-sai-wen-ti.html","loc":"http://leetschau.github.io/shi-yong-shu-ru-liu-du-qu-shu-ju-shi-de-zu-sai-wen-ti.html"},{"title":"将GnuCash界面语言设为英文","text":"日期： 2008-01-01 作者： muzuiget 在XP下用 GnuCash 一段时间后感觉不错，功能够用，跨平台，在Uuntu下继续用。 不过界面汉化不全，半中半英的，很不顺眼，反正英文都看得懂了，把它设为英文界面好了。 Windows XP： 在Windows XP下是在安装目录下的bin文件夹，用文本编辑器打开\"gnucash.bat\"文件，加上这两行 set LANGUAGE=en_EN set LANG=en_EN（ 注：GnuCash2.2.9 winXp版中的启动文件是 gnucash.cmd,处理方法相同 ） 整个文件看起来像 set PATH=C:\\Program Files\\gnucash\\bin;C:\\Program Files\\gnucash\\lib;C:\\Program Files\\gnucash\\lib\\gnucash;%PATH% set GUILE_WARN_DEPRECATED=no (...) set LTDL_LIBRARY_PATH=C:\\Program Files\\gnucash\\lib set LANGUAGE=en_EN set LANG=en_EN start gnucash-bin Ubuntu： 在Ubuntu下，我打开HOME目录下的\".GnuCash\"文件，看看有没有类似的文件，没有，去查文档，找到方法，比在Windows下更简单，用这条命令运行GnuCash就可以了 env LANG=en_EN gnucash %f","tags":"Tech","url":"http://leetschau.github.io/jiang-gnucashjie-mian-yu-yan-she-wei-ying-wen.html","loc":"http://leetschau.github.io/jiang-gnucashjie-mian-yu-yan-she-wei-ying-wen.html"},{"title":"剪贴板软件比较","text":"剪贴板软件的功能要求包括：固定条目（favorite clips）、粘贴控制，强力粘贴（power paste）、条目排列（clips arrangements）、合并条目（merge clips）、条目组织（organize clips）、Clipboard Routing、快捷键定义、富文本控制（RichText）、条目数量设置等， 固定条目 （favorite clips） 有一些东西经常用，又比较长，敲键盘太慢，希望有个软件能把这些东西记下来，需要用的时候能够很方便地调出来，比如GODU的登录用户名 <7001> ，也就是所谓的\"固定条目\"功能。 最先用的是Ditto，固定条目功能找不到，分组平时也用不到， 感觉不好用，用了一段时间后放弃了。 然后是CLCL，固定条目放在一个叫\"Template\"的地方，但奇怪的是选中条目后回车却不粘贴，不靠谱，放弃。 然后是 clipx ，要实现固定条目需要下一个叫stickies的插件，装好后在Configuration下 stickies中add，就可以实现固定条目功能了。将快捷键设置为Alt+P，然后字母键是固定条目，比CLCL少按一个键，且快捷键可自定义，数字是普通条目。 ClipCache设置固定条目（这里叫\"favorite clips\"）的方法是在clipcache主窗口里右键该条目，然后选\"Add to favorite clips\"为该条目设一个标签（label），然后为\"Favorite Clips\"设置快捷键（在Tools->Options->Hotkey->Show Favorites），以后需要使用该条目时，用设好的快捷键呼出favorite clips窗口，然后用label匹配想要的条目即可，支持简写，例如有个条目的标签是\"gu\"，只写\"g\"然后回车即可。 Ditto、Clipx和CLCL详细的功能对比参见善用佳软上的文章：\"剪贴板增强软件综述:CLCL,ClipX,Ditto等\"（ http://xbeta.info/clipx-clcl-ditto.htm ），后面介绍了一个叫ArsClip的软件，功能很多，但我都用不上，不过它是开源的这一点很好。 粘贴控制 Windows默认的粘贴快捷键是\"Ctrl+v\"，但有些程序有自己特殊的快捷键，例如SecureCRT是\"SHIFT+INSERT\"，\"cmd.exe\"是\"Alt+space+e+p\"应具备识别某一窗口然后定制特殊快捷键的能力。在Clipcache中是在 Tools->Options-> Pasting中定义。 强力粘贴（power paste） 例如文件1里有20处文本需要放到文件2的20个地方，基本的方法是文件1里复制，切换到文件2，粘贴，在切回文件1，处理20条文本需要80次鼠标和键盘动作，借助power paste则只需要在文件1里连续复制20次，再切到文件2里连续粘贴20次即可，只需要41次动作。目前所有的开源/免费软件中仅Hamsin Clipboard（v 3.03）支持此功能，但此软件只能记录10条clip，它有单独的power paste模式，进入此模式后才能开始连续复制，之前的clip是不能连续粘贴的。clipcache对强力粘贴支持很好，可定义单独的快捷键，且有两种移动方向，结合它的条目排序功能（默认是按使用时间排序，还可以按名称、大小、加入时间等排序）和条目组织功能（将某组条目放入一个单独的文件夹中），能够极大简化大量条目的复制/粘贴劳动量。 条目排列 改变条目的排列顺序，例如按使用时间、名称、大小、加入时间等方式排列条目，只有软件具备强力粘贴、条目合并等功能时改变排列次序才有意义。 合并条目 将N个条目合并为一个条目，可以进行各种格式转换，例如每个条目一行、条目之间插入tab、删除条目起始/结尾空格、删除空行等等，目前只有clipcache具备此功能。 条目组织 可以将条目分类组织，例如放在不同的文件夹里，这项功能也是配合强力粘贴才有意义。 Clipboard Routing 在网页/文件A里复制时，能够自动切到目标窗口粘贴，然后再切换回A里，目前仅clipcache支持此功能。 快捷键定义 似乎只有CLCL不支持快捷键定义，其他软件都支持，clipcache快捷键定义中不支持Win键。 富文本控制 主要是是否能够粘贴富文本和图片，以及是否支持将富文本转换为普通文本（plain text），clipcache具备此功能，如果要clipcache直接将拷贝到的RichText粘贴为PlainText（而不需要专门\"转换\"），在clipcache主菜单【Tools->Options->Capture】中取消勾选【Capture HTML】。 条目数量设置 clipcache没有上限限制，支持3种限制策略：按条目数量限制、按数据库大小限制、按日期限制（如删除N天前的条目）。 总结 整体而言开源/免费软件的功能远弱于商业软件，clipcache的条目组织能力目前只有Ditto可以相比，但Ditto其他方面远逊，","tags":"Tech","url":"http://leetschau.github.io/jian-tie-ban-ruan-jian-bi-jiao.html","loc":"http://leetschau.github.io/jian-tie-ban-ruan-jian-bi-jiao.html"},{"title":"log4j配置文件编码不同可能导致log4j日志运行异常","text":"有时即使log4j的配置文件log4j.properties放在了正确的位置上，内容也没有错误，但运行程序时总报appender异常，无法生成日志文件。可能的原因是配置文件的编码与项目设定的编码不一致（例如项目设置的编码是GBK，配置文件的编码使用UTF-8），导致读配置文件失败。解决的办法是将配置文件转换为项目设置的编码格式，为保证转换成功，文件中（包括注释部分）最好不要使用中文。","tags":"Tech","url":"http://leetschau.github.io/log4jpei-zhi-wen-jian-bian-ma-bu-tong-ke-neng-dao-zhi-log4jri-zhi-yun-xing-yi-chang.html","loc":"http://leetschau.github.io/log4jpei-zhi-wen-jian-bian-ma-bu-tong-ke-neng-dao-zhi-log4jri-zhi-yun-xing-yi-chang.html"},{"title":"将队列转换为字符串","text":"LinkedBlockingQueue inputQ = new LinkedBlockingQueue (); Byte[] destArr = inputQ.toArray( new Byte[0]); byte [] resultArr = new byte [destArr. length ]; for ( int i = 0; i < resultArr. length ; i++) { resultArr[i] = destArr[i].byteValue(); } strRes = new String(resultArr); 转换过程是：队列==>Byte数组==>byte数组==>字符串。下面是应用了此一转换的完整的Result类实现。 /** 通过字节队列创建一个新的返回结果实例 @param inputQ 结果字节队列 @param cmdType 命令返回类型 */ public Result( final LinkedBlockingQueue inputQ, final int cmdType) { cmdReturnType = cmdType; Byte[] destArr = inputQ.toArray( new Byte[0]); byte [] resultArr = new byte [destArr. length ]; for ( int i = 0; i < resultArr. length ; i ++) { resultArr[ i ] = destArr[ i ].byteValue(); } strRes = new String(resultArr); }","tags":"Tech","url":"http://leetschau.github.io/jiang-dui-lie-zhuan-huan-wei-zi-fu-chuan.html","loc":"http://leetschau.github.io/jiang-dui-lie-zhuan-huan-wei-zi-fu-chuan.html"},{"title":"在队列中寻找字符串算法","text":"在一个队列destQ中，从前向后搜索是否有字符串flag，下面是算法实现以及测试程序。回溯功能暂未实现。 private int findFlag( final LinkedBlockingQueue destQ, final String flag) { byte [] flagArr = flag.getBytes(); Byte[] destArr = destQ.toArray( new Byte[0]); int matchCount = 0; // 已匹配的字节数 int flagPos = -1; // 标志末尾的编号 int i = 0; int backupIndex = 0; // 用于回溯的索引 while (i <= destQ.size()) { if (flag.length() <= matchCount) { flagPos = i; break ; } else { if (destArr[i] == flagArr[matchCount]) { matchCount++; } else { matchCount = 0; // i = backupIndex; } } i = i + 1; if (matchCount == 1) { backupIndex = i; } } return flagPos; } @Test public void runFindFlag() { LinkedBlockingQueue analyzerBuffer = new LinkedBlockingQueue (); for ( int i = 33; i < 123; i++) { analyzerBuffer.offer( new Byte(( byte ) i)); } String endFlag = \"123\" ; int endFlagPos = findFlag(analyzerBuffer, endFlag); List cmplXmlStr = new ArrayList (); analyzerBuffer.drainTo(cmplXmlStr, endFlagPos); System. out .println(cmplXmlStr); }","tags":"Tech","url":"http://leetschau.github.io/zai-dui-lie-zhong-xun-zhao-zi-fu-chuan-suan-fa.html","loc":"http://leetschau.github.io/zai-dui-lie-zhong-xun-zhao-zi-fu-chuan-suan-fa.html"},{"title":"为Eclipse配置绿色版JDK","text":"1、解压JDK，例如f:\\warez\\Develop\\Java\\jdk1.5.0_16； 2、修改环境变量，在Path中增加：f:\\warez\\Develop\\Java\\jdk1.5.0_16\\bin； 3、解压Eclipse，例如f:\\warez\\IDEs\\Eclipse0621目录下；启动Eclipse（f:\\warez\\IDEs\\Eclipse0621\\eclipse.exe），如果提示找不到jre，可以用 \"f:\\warez\\IDEs\\Eclipse0621\\eclipse.exe -vm f:\\warez\\Develop\\Java\\jdk1.5.0_16\\bin\" 的方式启动； 4、在Eclipse的Window==>Preferences==>Java==>Installed JREs中添加： F:\\warez\\Develop\\Java\\jdk1.5.0_16； 5、重启Eclipse，如果仍然提示找不到jre，在Installed JREs==>Execution Enviroments中选对应的JDK版本打勾； 6、重启Eclipse验证设置成功； 7、为eclipse.exe增加快捷键，例如在Hoekey里加一行：~@E = Run|\"f:\\warez\\IDEs\\Eclipse0621\\eclipse.exe\"","tags":"Tech","url":"http://leetschau.github.io/wei-eclipsepei-zhi-lu-se-ban-jdk.html","loc":"http://leetschau.github.io/wei-eclipsepei-zhi-lu-se-ban-jdk.html"},{"title":"LinkedBlockingQueue的drainTo方法示例代码","text":"LinkedBlockingQueue analyzerBuffer = new LinkedBlockingQueue (); String abc = \"abc\" ; analyzerBuffer.offer(abc); List tmp = new ArrayList (); analyzerBuffer.drainTo(tmp); System. out .println(tmp); System. out .println(analyzerBuffer); analyzerBuffer.offer(abc); analyzerBuffer.offer(abc); analyzerBuffer.drainTo(tmp); System. out .println(tmp); System. out .println(analyzerBuffer); 输出： [abc] [] [abc, abc, abc] []","tags":"Tech","url":"http://leetschau.github.io/linkedblockingqueuede-draintofang-fa-shi-li-dai-ma.html","loc":"http://leetschau.github.io/linkedblockingqueuede-draintofang-fa-shi-li-dai-ma.html"},{"title":"arraycopy将数组分为两部分时游标的设置方法","text":"System.arraycopy是复制数组的一个常用工具，它在游标处如何分为两个是一个需要注意的问题，例如下面的示例代码： byte [] src = { 104, 101, 108, 108, 111 }; int endPos = 2; byte [] dest = new byte [endPos]; byte [] surplus = new byte [src. length - endPos]; System. arraycopy (src, 0, dest, 0, dest. length ); System. arraycopy (src, endPos, surplus, 0, src. length - endPos); 游标（变量endPos）位置为2时，dest数组是{104, 101}，surplus数组是{108, 108, 111}。 也就是说，编号为游标的元素（从0开始编号）在原数组分割后变为后面数组的第一个元素。","tags":"Tech","url":"http://leetschau.github.io/arraycopyjiang-shu-zu-fen-wei-liang-bu-fen-shi-you-biao-de-she-zhi-fang-fa.html","loc":"http://leetschau.github.io/arraycopyjiang-shu-zu-fen-wei-liang-bu-fen-shi-you-biao-de-she-zhi-fang-fa.html"},{"title":"VIM的搜索模式","text":"用VIM当文本分析器分析log4j打出的日志时，有一个问题很棘手，那就是经常要搜索 [DEBUG] [2010-08-09 15:44:49,421] [com.boco.godu.GAPI.impl.DataReader] 这样的字符串，直接在/后面粘贴上字符串肯定不行，因为里面有大量的[、]、-、点号、冒号这样的特殊字符，要想能查到，就得在它们之前加反斜杠\\，每次查都这么一下，实在太麻烦，解决方法是：告诉VIM所有字符都是普通字符，不用做正则符号，告诉的方法就是设置magic属性，VIM默认是magic状态，可以用:set nomagic的方法切换到普通搜索模式，但这样一来以后再想用正则搜索还得再写:set magic，比较麻烦，最简单的方法是在/和要查找的字符串中间加上\\V（注意是大写V，小写代表完全相反的意思），例如 bad.magic dam dbm dcm aa dkm 用/d.m搜，d.m、dam、dbm等等都符合，改为/\\Vd.m，就只有d.m符合了（\\V前后都没有空格）。 关于\\V详见:h magic。","tags":"Tech","url":"http://leetschau.github.io/vimde-sou-suo-mo-shi.html","loc":"http://leetschau.github.io/vimde-sou-suo-mo-shi.html"},{"title":"VIM的文件编码问题","text":"转换文件编码 :set fileencoding=gbk/utf-8 关于vim的编码 Vim 有四个跟字符编码方式有关的选项，encoding、fileencoding、fileencodings、termencoding (这些选项可能的取值请参考 Vim 在线帮助 :help encoding-names)，它们的意义如下: 1. encoding：Vim内部（软件自身）使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。默认是根据你的locale选择。用户手册上建议只在 .vimrc 中改变它的值，事实上也只有在.vimrc 中改变它的值才有意义。为了理解这个参数的含义，可做如下实验： 启动一个VIM，用:set encoding查询当前该参数的值，例如为utf-8，然后执行:set encoding=latin1，然后随便写一个命令让VIM提示出错，你会发现提示信息全是乱码。 反过来，如果你的VIM在运行后提示信息、菜单等处是乱码，可以用:set encoding=...来尝试一下别的编码。你可以用另外一种编码来编辑和保存文件，如你的vim的encoding为utf-8，所编辑的文件采用cp936编码，VIM会自动将读入的文件转成utf-8(VIM的能读懂的方式），而当你写入文件时，又会自动转回成GBK（文件的保存编码)。 1. fileencoding：VIM中当前编辑的文件的字符编码方式，VIM保存文件时也会将文件保存为这种字符编码方式 (不管是否新文件都如此)，可用:set fileencoding查询当前文件的编码类型，用:set fileencoding=utf-8将当前文件转换为utf-8格式。 1. fileencodings：VIM读文件时尝试的编码方案的列表，启动时VIM按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终尝试成功的字符编码方式。因此最好将Unicode 编码方式放到这个列表的最前面，将拉丁语系编码方式 latin1 放到最后面。 1. termencoding：VIM所工作的终端 (或者 Windows 的 Console 窗口) 的字符编码方式。如果VIM所在的term与VIM编码相同，则无需设置。如其不然，你可以用VIM的termencoding选项将自动转换成term 的编码。这个选项对Windows 下的gVim 无效（gVim是GUI 模式的，不是Console模式），因此无需关心这个参数，一般置空就行了。 Windows下的gVim的vimrc文件关于文件编码部分应设为： set encoding=utf-8 set fileencodings=utf-8,chinese,latin-1 set fileencoding=utf-8 其中编码方案的第二项chinese主要是为了保持与windows上的很多默认编码格式兼容（如记事本的ANSI格式）。chinese 是个别名，在Unix 里表示gb2312，在Windows里表示cp936，也就是GBK与微软的ANSI兼容。当VIM打开cp936格式的文件时，编辑完后不要用:set fileencoding=utf-8命令将其转换为utf-8格式再保存，因为VIM生成的utf-8格式文件不带BOM表，与windows仍不兼容。","tags":"Tech","url":"http://leetschau.github.io/vimde-wen-jian-bian-ma-wen-ti.html","loc":"http://leetschau.github.io/vimde-wen-jian-bian-ma-wen-ti.html"},{"title":"Vim的剪贴板操作","text":"Normal模式下，用双引号加剪贴板编号（可以是数字和字母）来引用这个剪贴板，后面加上复制/粘贴命令就用使用这个剪贴板了，例如： \"1yw：将光标所在单词拷贝到1号剪贴板上； \"cd$：将从光标到行尾的内容剪切到c号剪贴板上； \"dp：将d号剪贴板上的内容粘贴到光标后； 用:reg可以查看vim剪贴板的列表。","tags":"Tech","url":"http://leetschau.github.io/vimde-jian-tie-ban-cao-zuo.html","loc":"http://leetschau.github.io/vimde-jian-tie-ban-cao-zuo.html"},{"title":"vim的代码缩进","text":"例如下面一段代码： \\({vendor.name}\" /> <attribute name=\"Product-Name\" value=\"\\) {project.name}_core\" /> \\({build.date}\" /> <attribute name=\"Build-Time\" value=\"\\) {build.time}\" /> 现在要统一缩进6个tab，在UltraEdit里首先要选中文本，然后按6次tab，VIM中的操作是：首先按V（shift+v）进入行visual模式，然后按7次j选中这段文本（或者7j也行），然后按\"6>\"（shift+.），如果不确定几个tab，可先>一次，这时自动退出了visual模式，再次缩进不需要重复上述操作，只要按点号（\".\"，重复前次命令）即可。 2013-01-10更新：上面的方法太麻烦了，gg>G即可。如果只缩进第2～6行：2G>6G 下面的代码vim有更智能的缩进方法： public static int rank(int key, int[] a) { int lo = 0; int hi = a.length - 1; while (lo <= hi) { // Key is in a[lo..hi] or not present. int mid = lo + (hi - lo) / 2; if (key < a[mid]) hi = mid - 1; else if (key > a[mid]) lo = mid + 1; else return mid; } return -1; } 假设光标在while循环内的某处，用>aB就可以缩进，<aB反缩进，其中a表示包括分隔符（这里是{和}），B表示block，即代码块（参考http://www.viemu.com/a-why-vi-vim.html）。 上面的方法移动整个代码块，如果只想把嵌套部分向内缩进，将光标放在块内的任意行首，然后用>iB，重复这个缩进动作用\".\"命令。 2013-10-28更新： 上面的方法是手工缩进，但vim支持大部分编程语言的自动缩进（用\"=\"键），即根据打开文件的扩展名决定缩进方法，上面的缩进一条指令搞定：ggvG= 与手工缩进相比，自动缩进受文件扩展名的限制，例如无法在xml文件的buffer里修改C代码的缩进； if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/vimde-dai-ma-suo-jin.html","loc":"http://leetschau.github.io/vimde-dai-ma-suo-jin.html"},{"title":"VIM的窗口和标签页操作","text":"窗口 创建水平/ 垂直 分隔的窗口：:new/:vnew 切换左/右/上/下窗口为当前窗口：ctrl+w, h/l/k/j 切换顶/底部窗口为当前窗口：ctrl+w, t/b 在窗口间跳转（用来在两个窗口间跳转很方便）：ctrl+w, w 交换窗口内容：C-w,C-r 或者 C-w,C-x 前面的更顺手 旋转窗口内容：C-w, r （第1个窗口中的文件显示在第2个窗口中，第2个窗口中文件显示在第3个窗口中，……，最后一个窗口中的文件显示在第1个窗口中）； 移动窗口：（例如原来是两个窗口一上一下，位于下面的窗口向左移动后，将变成左右布局） ctrl-w H(shift+h)/L/K/J 向左/右/上/下移动窗口 窗口最大化：上下分割窗口情况下，C-w （按住Ctrl再按w，松开ctrl和w，再按 ） ，左右分割情况下，ctrl+w, | 水平增加窗口尺寸：C-w +；减少窗口尺寸：C-w - 窗口最大化后复原：ctrl+w, = 关闭窗口： :close，简写为:clo，用于关闭但不退出vim的情形； 在新窗口中显示文件：ctrl+w, shift+s（适于对比同一文件的不同部分） 针对所有窗口的操作 :qa (quit all) :wa (write all) :wqa (write & quit all) :qa! (quit all without write) 分隔窗口（用于显示同一个文档中的不同部分）：水平分割：:split，垂直分割：:vsplit 关闭当前窗口：:hide shortcut definitions for easier window navigations nnoremap < C - J > < C - W >< C - J > nnoremap < C - K > < C - W >< C - K > nnoremap < C - L > < C - W >< C - L > nnoremap < C - H > < C - W >< C - H > set splitbelow set splitright nnoremap < C - o > : vsp < CR > : FufCoverageFile < CR > The last one need installation of plugin FuzzyFinder. Open existing buffer in a split widnow Get target buffer id: :ls ; Open it in a horizental window: :sb<n> , where is the window id Open it in a vertical window: :vert sb<n> ; In the result of :ls command, \"#\" means alternative buffer, which is the most recently used buffer. \"a\" means active buffer. \"+\" means this buffer is modified. \"%\" means this buffer is in the current window. Run :h :ls to full list. So you can use :vert sb# to open most recently used buffer in a vertical split window. 标签页 创建新标签页：:tabnew 切换到下一个标签页：gt，前一个标签页：gT（前面都没有冒号） Jump to th tab: gt, for example \"3gt\" jump to 3rd tab directly; 关闭标签页：:q Open multiple files in different tabs in command line: $ vim -p files* Open every existing buffer in a new tab: : tab all or: : tab sba where \"sba\" means open all buffer in a new window, and :tab convert the window operation to tab operation; 详见:h tabpage 与多个buffer相关的操作见\"buffer-related operations in vim\"。","tags":"Tech","url":"http://leetschau.github.io/vimde-chuang-kou-he-biao-qian-ye-cao-zuo.html","loc":"http://leetschau.github.io/vimde-chuang-kou-he-biao-qian-ye-cao-zuo.html"},{"title":"VIM的命令历史","text":"例如有一段文本，将所有CTRL替换为ctrl，将所有A替换为a，也就是执行了:%s/CTRL/ctrl/g和:%s/A/a/g两条命令，然后进行了很多其他编辑，最后关闭VIM。 后来又有一段文本，也需要将所有CTRL替换为ctrl，将所有A替换为a，这时候不需要重新敲上面两个命令，只需要输入:%s，然后按向上键，:%s/CTRL/ctrl/g就自己跑出来了。 如果不确定以前用过这个命令没有，可以用:his查看已输入命令的历史列表，编号越大，表示离现在越近。","tags":"Tech","url":"http://leetschau.github.io/vimde-ming-ling-li-shi.html","loc":"http://leetschau.github.io/vimde-ming-ling-li-shi.html"},{"title":"VIM的寄存器","text":"VIM的寄存器分为3种，一种以数字命名，一种以字母命名，还有一种名字其他符合，如星号\"*\"。 数字寄存器标号是0~9，每次拷贝操作时如果不指定寄存器名字，则默认放在0寄存器中，原来0中的内容放到1中，1放到2中，依此类推，原来9中的内容被舍弃； 字母寄存器的标号是a~z，它们的内容保持不变； 还有一些以符号命名的寄存器，详见:h reg，用:reg命令可以列出所有寄存器以及它们的值。","tags":"Tech","url":"http://leetschau.github.io/vimde-ji-cun-qi.html","loc":"http://leetschau.github.io/vimde-ji-cun-qi.html"},{"title":"用VIM查找特定字符串","text":"分析文本的时候经常出现的一个场景是：在关键字key的后面使用了一个变量，现在需要知道如何定义这个变量，但不知道它的名字，也不知道定义它的位置，一般采用的方法是先查找key，找到这个变量的名字，如str，然后再查找str，一般最开始处的str就是定义的位置。但有时str可能很长，对于UltraEdit这样的软件这个动作很简单，选中str，然后F3即可，但VIM没有这个功能，实现这个动作相对稍微麻烦些： 1、用/key找到str； 2、拷贝这个str（注1）； 3、/ 0查找选中的字符串；即先输入/，然后ctrl+r，然后输入0（原因见博文\"VIM的寄存器\"）。 注1： 不论中英文字符串，都是用标点或者空格作为word之间的分隔符，对于英文字符串，词与词之间有空格，用ynw比较好（其中n是词的个数，标点算一个词，例如project.classpath是3个word），用y3w就可以拷贝到寄存器中，中文字符串词间无空格，可用ynl拷贝（l是向右移动命令，n表示移动次数，即字数）。","tags":"Tech","url":"http://leetschau.github.io/yong-vimcha-zhao-te-ding-zi-fu-chuan.html","loc":"http://leetschau.github.io/yong-vimcha-zhao-te-ding-zi-fu-chuan.html"},{"title":"log4j日志的输出级别设置","text":"log4j日志文件的输出级别分为7级，由高到低依次是：off, fatal, error, warn, info, debug, all。 在\"log4j.properties\"文件的log4j.appender.***.Threshold属性中设置输出的优先级，例如log4j.appender.stdout.Threshold=DEBUG。 比自己低级别的输出将不会出现在对应的log文件里，例如设置为error，则warn,info,debug级别的日志不写入log文件，设置为info则debug信息不写入log文件。通过在不同的log文件里设置不同的Threshold级别的方法，可以已达到分类输出的目的，例如错误日志文件专门记录error，信息日志记录除调试信息以外的日志，调试日志记录所有输出的日志。 除了针对appender设置屏蔽级别，还可以针对某一个类设置屏蔽级别，例如： log4j.logger.com.boco.godu.GAPI.impl.Connection=WARN 这样com.boco.godu.GAPI.impl.Connectio类中所有级别低于WARN的日志都不会输出。","tags":"Tech","url":"http://leetschau.github.io/log4jri-zhi-de-shu-chu-ji-bie-she-zhi.html","loc":"http://leetschau.github.io/log4jri-zhi-de-shu-chu-ji-bie-she-zhi.html"},{"title":"基于JUnit的测试包和测试用例的模板","text":"测试用例 模板代码见附录 1 ，实际的测试代码写在方法 dataPortTest 中，注意这个方法不能有参数和返回值，前面用 @Test 标示，就可以用 JUnit 测了，如果这个测试用例仅仅做单个测试，不加到测试包中，可以去掉 suite 和 SyncActorTest 两个方法。 测试包 模板代码见附录 2 ， addTest 的参数格式是 new TestClassName(\"testMethodName\") ，一个测试类中可以有多个测试方法，一个包中可以测很多类，测试包可以很方便地选择需要测试的类和方法。 附录 1 package com.boco.godu.GAPI; import junit.framework.Assert; import junit.framework.TestCase; import junit.framework.TestSuite; import org.junit.Test; public class SyncActorTest extends TestCase { public static TestSuite suite() { TestSuite suite = new TestSuite(); suite.addTest(new SyncActorTest(\"dataPortTest\")); return suite; } public SyncActorTest(final String name) { super(name); } @Test public void dataPortTest() { ConnFactory connFactory = new ConnFactory(\"10.0.2.47\", 1235); connFactory.setUserName(\" <7001> \"); connFactory.setPassword(\"goduapp\"); Assert.assertEquals(\"goduapp\", connFactory.getPassword()); try { IConnection conn = connFactory.getConnection(); Assert.assertEquals(IConnection.CONNECTION_INITIAL, conn.getStatus()); ISyncActor syncActor = conn.getSyncActor(); Document recXml = syncActor.sendCmd(\"ls id=1938695146\").getXml(); // some other Assert... syncActor.close(); conn.close(); } catch (Exception e) { e.printStackTrace(); } } } 附录 2 package com.boco.godu.GAPI; import junit.framework.TestCase; import junit.framework.TestSuite; public class GapiTestSuite extends TestCase { public static TestSuite suite() { TestSuite suite = new TestSuite(); suite.addTest(new SyncActorTest(\"dataPortTest\")); suite.addTest(new SyncActorTest(\"dataPortTest2\")); suite.addTest(new SyncActorTest2(\"...\")); suite.addTest(...); return suite; } }","tags":"Tech","url":"http://leetschau.github.io/ji-yu-junitde-ce-shi-bao-he-ce-shi-yong-li-de-mo-ban.html","loc":"http://leetschau.github.io/ji-yu-junitde-ce-shi-bao-he-ce-shi-yong-li-de-mo-ban.html"},{"title":"Java线程间传递数据的方法","text":"","tags":"Tech","url":"http://leetschau.github.io/javaxian-cheng-jian-chuan-di-shu-ju-de-fang-fa.html","loc":"http://leetschau.github.io/javaxian-cheng-jian-chuan-di-shu-ju-de-fang-fa.html"},{"title":"将JavaDoc生成接口文档的方法","text":"\"删除第三行前导空格，保存第三行文字 let title = getline(3) \"写：方法名称： \"将第一行内容写在后面 \"若有\"参数\"行，将此行与下一行合并，去掉前导空格 \"若有\"返回\"行，将此行与下一行合并，去掉前导空格 原始javadoc文本 setPassword public void setPassword(java.lang.String password) 设置登录密码 参数： password - 登录密码","tags":"Tech","url":"http://leetschau.github.io/jiang-javadocsheng-cheng-jie-kou-wen-dang-de-fang-fa.html","loc":"http://leetschau.github.io/jiang-javadocsheng-cheng-jie-kou-wen-dang-de-fang-fa.html"},{"title":"用Hoekey实现托盘程序的快捷键激活","text":"实现托盘程序的快捷键激活要用到 Hoekey 的两个功能：显示窗口类名和 Show 命令。 1 、取得目标窗口的类名 在 Hoekey 中定义： ~@T= MsgBox|%t: %l|show window name and class|10 在目标窗口为活动窗口的情况下按 win+alt+T ，显示出窗口的类名（ %l ），记下来； 2 、用 Show 命令显示这个窗口 在 Hoekey 中定义： 快捷键 = Show| 目标窗口类名，例如下面的是用 ctrl+shift+t 激活 MSN 程序： _&#94;T = Show|MSBLWindowClass Show 命令只能显示被 Hoekey 的 Hide 命令隐藏的窗口，因此还要再定义： ~right=Hide||1 ; 当前窗口隐藏到系统托盘 对于 MSN 、 Outlook 这个的程序本身就会在托盘区显示图标，再显示一个不好看，因此可以将 Hide 命令的第二个参数设为 2 ，这个被隐藏的程序就彻底消失了，只能用 Hoekey 的Show命令激活。 另： Hoekey 的详细使用文档是 Hoekey 安装文件目录的 hoekey.htm 文件。","tags":"Tech","url":"http://leetschau.github.io/yong-hoekeyshi-xian-tuo-pan-cheng-xu-de-kuai-jie-jian-ji-huo.html","loc":"http://leetschau.github.io/yong-hoekeyshi-xian-tuo-pan-cheng-xu-de-kuai-jie-jian-ji-huo.html"},{"title":"用VIM修改《红太阳是怎样升起的》","text":"高华的大作：《红太阳是怎样升起的：延安整风运动的来龙去脉》原始文本是从 PDF 文件导出的 TXT 文件，需要改为手机上阅读比较方便的格式，下面是修改过程。 提取处理文本 从全文（见附件）中提取一节，篇幅不宜超过十页，否则处理它用的时间太长，例如第一章第一节\"一、「农民党」、「军党」和毛泽东的「书记独裁」问题\"。拷贝到 VIM 中。 删除脚注 删除每页下面的脚注，找到行首的\"①\"后手工删除相关段落，用 /&#94; ①查找目标； 删除页码 目标文本： 人闻名于中共，其活动基本上也是围绕军事武装…… 10 ----------------------- Page 11----------------------- 的一个侧面。中共中央认为毛的理论观点仍…… 步骤 1 ：寻找前面至少 38 个空格，后面是数字的行删除之： :g/&#94;\\s{38,}\\d*/d 步骤 2 ：寻找 23 个连字符后面一个空格接 Page 的行删除之： :g/&#94;-{23}\\sPage/d 标出标题 手工寻找标题所在行，在标题头插入 ，用宏可提高效率； qa （大写 i 插入行首） （ ESC ），以后找到标题行后 @a 即可； 标出段落 前面有 4 个空格的行，将 4 个空格替换为 ： :%s/&#94;\\s{4}/ /g 合并行 将所有文本合为一行： nJ ，命令中 n 是总行数 -1 清除所有空格 :%s/\\s+//g 将段落标志 替换为回车 :%s/ /\\r/g 至此文本的处理就完毕了，用博文\"第一行为文件名保存的文件的实现方法（ VIM 版）\"中介绍的方法定义一个快捷键，将处理好的文本存为一个单独的文件，用 notepad++ 转为 UTF-8 格式（带 BOM ）后放入手机中。 附：处理脚本1 \"标出脚注，在脚注文本前面加 %s/&#94;[①②③④⑤⑥⑦⑧⑨]\\s\\S+/ &/g \"删除页码 g/&#94;\\s{10,}\\d \\s /d \"将页开始行替换为 %s/&#94;-{23}\\sPage. \\(/<P>/g \"标出各种标题，在标题文本前面加<P> %s/&#94;\\s*第.\\{1,2}章/<P>&、/g %s/&#94;\\s*[一二三四五六七八九十]\\s/<P>&，/g %s/&#94;\\s*[一二三四五六七八九十]、/<P>&/g %s/&#94;\\s*\\d、/<P>&/g \"标出段落 %s/&#94;\\s\\{4}/<P>/g \"将所有文本合为一行 1,\\) j! \"清除所有空格 %s/\\s+//g \"将段落标志替换为回车 %s/ /\\r/g 处理脚本2（脚本1在手机上看效果欠佳，且脚本运行需要比较长的时间） \"delete all blank lines g/&#94;\\s \\(/d \"标出脚注，在脚注文本前面加空行 %s/&#94;[①②③④⑤⑥⑦⑧⑨]\\s\\S\\+/\\r&/g \"删除页码 g/&#94;\\s\\{10,}\\d*\\s*/d \"将页开始行替换为空行 %s/&#94;-\\{23}\\sPage.*\\) /\\r/g \"标出各种标题，在标题文本前面加空行 %s/&#94;\\s 第.{1,2}章/\\r\\r&、/g %s/&#94;\\s [一二三四五六七八九十]\\s/\\r&，/g %s/&#94;\\s [一二三四五六七八九十]、/\\r&/g %s/&#94;\\s \\d、/\\r&/g \"标出段落 %s/&#94;\\s{4}/\\r/g 将以上内容保存到F:\\toMobile.txt中，用:so f:\\toMobile.txt运行之。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/yong-vimxiu-gai-hong-tai-yang-shi-zen-yang-sheng-qi-de.html","loc":"http://leetschau.github.io/yong-vimxiu-gai-hong-tai-yang-shi-zen-yang-sheng-qi-de.html"},{"title":"VIM正则表达式的懒惰模式","text":"例如有如下一段话： Another whale sighting occurred on , <2004>. AK and HI 要匹配每一个<...>，如果用<. >匹配，则匹配到的目标是 , <2004>，也就是尽量大的匹配范围，要将匹配模式改为尽量小（即懒惰模式），需要用{-}代替 ，即写成<.{-}>，就可以达到目标了。","tags":"Tech","url":"http://leetschau.github.io/vimzheng-ze-biao-da-shi-de-lan-duo-mo-shi.html","loc":"http://leetschau.github.io/vimzheng-ze-biao-da-shi-de-lan-duo-mo-shi.html"},{"title":"远程连接Unix服务器的方法","text":"在 SecureCRT 中\"快速连接\"下：【协议】： SSH2 ，【主机名】： 10.0.2.47 ，【端口】： 22 ，【防火墙】：无，【用户名】： boco ，密码： bocogodu ； 服务器上常用的 Unix 命令 uname –a ：显示当前操作系统信息； ls ：显示当前路径下文件； pwd ：显示当前路径； ps –ef|grep godu ：搜索所有包含 godu 的活动进程； clear ：清空屏幕； kill：终止进程；","tags":"Tech","url":"http://leetschau.github.io/yuan-cheng-lian-jie-unixfu-wu-qi-de-fang-fa.html","loc":"http://leetschau.github.io/yuan-cheng-lian-jie-unixfu-wu-qi-de-fang-fa.html"},{"title":"运行VIM脚本的方法","text":"1 将VIM脚本写在一个文本文件中，扩展名任意，一般就用txt，例如保存在f盘根目录下：f:\\ex.txt； 2 在VIM中用:so（:source的简写）命令运行之：:so f:\\ex.txt。 脚本文件中的注释以英文的双引号（\"）起始。","tags":"Tech","url":"http://leetschau.github.io/yun-xing-vimjiao-ben-de-fang-fa.html","loc":"http://leetschau.github.io/yun-xing-vimjiao-ben-de-fang-fa.html"},{"title":"VIM文本格式转换一例","text":"原文本： public static final int GODU_CMD_PORT = 1234; public static final int GODU_MONITOR_PORT = 5678; public static final int GODU_SUBSCRIBE_PORT = 6789; public static final String LOGIN = \"login:\"; public static final String LOGIN_PASSWORD = \"password:\"; public static final String GODU_PROMPT = \"[GODU-CMD]\"; public static final String GODU_OPT_START = \"BOCOGODUACKSTART\"; public static final String GODU_OPT_END = \"BOCOGODUACKEND\"; public static final String NE_OPT_START = \"BOCOGODUCMDSTART\"; public static final String NE_OPT_END = \"BOCOGODUCMDEND\"; 目标文本： godu.cmd.port = 1234 godu.monitor.port = 5678 godu.subscribe.port = 6789 login = login: login.password = password: godu.prompt = [GODU-CMD] godu.opt.start = BOCOGODUACKSTART godu.opt.end = BOCOGODUACKEND ne.opt.start = BOCOGODUCMDSTART ne.opt.end = BOCOGODUCMDEND 操作过程： 1. 删除前导空格：:%s/&#94;\\s*//g 1. 删除每行的前4个单词，将第5个单词转化为小写（使用宏）： qad4wguwjq 9@a 1. 将下划线改为点号：:%s/_/./g 1. 删除行尾分号：:%s/;$//g 1. 删除双引号：:%s/\"//g","tags":"Tech","url":"http://leetschau.github.io/vimwen-ben-ge-shi-zhuan-huan-yi-li.html","loc":"http://leetschau.github.io/vimwen-ben-ge-shi-zhuan-huan-yi-li.html"},{"title":"为VIM添加Python扩展","text":"VIM的自带的脚本功能很强，但只能用在VIM自己上，如果让它支持Python脚本，那简直就无敌了，这个想法当然不是我想出来的，应该说英雄所见略同，于是乎vim7.2就内建了对python2.4的支持，这么有前途的功能当然得尝尝鲜啦，下面就是实现过程： 1 检查vim是否支持python；用:version命令，找其中的\"python/dyn\"一项，如果前面是加号，表示支持，如果是减号，就另找一个支持的吧 2 拷贝python24.dll文件到system32目录下； 3 测试代码：:py import sys :py print sys.version 4 如果能够输出python的版本信息则说明可以使用python扩展了。 第二步里用到的dll文件可以到 http://www.dll-files.com 下载，压缩包只有800多K，实在不愧小强的称号！我在winXP平台上拷贝完dll文件后无需重启windows就可以使用。 VIM脚本中使用Python代码的详细方法参加VIM中的对:python命令的说明（:h :py）。","tags":"Tech","url":"http://leetschau.github.io/wei-vimtian-jia-pythonkuo-zhan.html","loc":"http://leetschau.github.io/wei-vimtian-jia-pythonkuo-zhan.html"},{"title":"第一行为文件名保存的文件的实现方法（VIM版）","text":"问题描述 例如文档1的内容是： this is doc A the following is contents ... 要保存为\"this is doc A.txt\"； 文档2的内容是： that is B some words more ... 要保存为\"that is B.txt\"。 文档的数量很多，无法对每一文档手工保存，希望有一款文本编辑器能用脚本（或者宏之类的）实现该功能。 解决方案 在_vimrc文件中加上如下内容： function Blog_Save() \" 删除空行，包括全是空格的行 g/&#94;\\s* \\(/d \" 将文件第一行内容保存在变量line中 let line = getline(1) \" 去掉其中的非法字符，如\\等 let line = substitute(line, '[:/\\\\]', '-', 'g') let line = substitute(line, '&#94;\\s\\+', '', 'g') let line = substitute(line, '\\s\\+\\) ', '', 'g') let line = substitute(line, ' ', '\\ ', 'g') let line = substitute(line, '\\r', '', 'g') \" 执行保存文件命令，其中点号是连接符，类似于PHP中的用法 exe 'sav '.line.'.txt' endfunction \" 定义一个【用户自定义命令】 command BlogSav call Blog_Save() \" 键映射 :map :BlogSav 这段代码整体分为3部分：第一部分定义了一个函数，第二部分为这个函数定义了一个【用户自定义命令】，以便于在VIM的普通模式下用:+command的方法使用，第3部分是一个键映射，将按 、输入:BlogSav、按回车键这一系列动作映射到F5键上，这样只要按一下F5键，就实现了【问题描述】一节中设想的功能。 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/di-yi-xing-wei-wen-jian-ming-bao-cun-de-wen-jian-de-shi-xian-fang-fa-vimban.html","loc":"http://leetschau.github.io/di-yi-xing-wei-wen-jian-ming-bao-cun-de-wen-jian-de-shi-xian-fang-fa-vimban.html"},{"title":"VIM命令格式说明","text":"VIM 的命令格式由 4 部分组成：操作次数，动作名称，目标的数量，目标名称 其中操作次数和目标的数量两项如不指明，则视为1。 原文来自网络，其中\" Vi Syntax \"一节写的尤其好，对什么是动作、什么是目标解释的非常清楚。 The vi is a text editor. It is small, powerful, and standard on most UNIX systems. The vi often frustrates new users with a unique distinction between its two modes: Command Mode and Insert/Overtype Mode. This distinction, although difficult to become accustomed to for many users, provides great power and ability to the editor. Insert/Overtype Mode is designed for inserting text only. All text manipulations and cursor moving should be done from with in Command Mode. Entering the vi prompt $ vi prompt $ vi file1 file2 … prompt $ vi - r file #Recover file from crash prompt $ vi + string file #Execute ex command \" string \" prompt $ vi @rcfile #Read commands from rcfile Insert/Overtype Mode Insert/Overtype Mode is solely for entering text. To leave one of these two modes press the [ESC] key. If you wish to enter the ESC character or any other control character while in insert mode: type [CONTROL]-V and then the control sequence. The only difference between Insert Mode and Overtype Mode is that characters are placed in front of the text after the cursor in Insert Mode, where as existing characters are overwritten in Overtype Mode. Command Mode Entering Insert Mode: a — append text, after the cursor i — insert text, before the cursor R — enter Overtype Mode A — append text, after end of line I — insert text, before first non-whitespace character o — open new line below cursor in Insert Mode O — open new line above cursor in Insert Mode vi Syntax vi commands follow the general form: n operator m object which means: execute operator n times on m objects. If n and/or m are omitted, they default to 1. Operators which take objects are (if the operator is pressed twice then the object is the current line) c — Change d — Deletion ' cy — Yank, if c is omitted, uses general buffer. < — shift lines left by shiftwidth variable > — shift lines right by shiftwidth variable ! cmd — filter trough cmd The operators < , >, and ! are line based so the set of objects is diminished greatly. Operators which do not take objects: s — Substitute x — Delete character r — Replace character ~ — change case of character Objects (if given with out an operator are interpreted as a cursor motion command): w — forward until beginning of word e — forward until end of word b — backward until beginning of word $ — forward until end of line &#94; — backward until first non-whitespace character 0 — backward until first column of line nG — line number n n| — column n of current line /pat — forward until beginning of pat, search ?pat — backward until beginning of pat, backward search n — repeat last search N — repeat last search/backward search, but in opposite direction % — until match of parenthesis, brace, or bracket tc — until next appearance of c on current line Tc — backward until next appearance of c on current line fc — until and including next appearance of c on current line Fc — backward until and including next appearance of c on current line ; — repeat last f, F, t, or T , — repeat last f, F, t, or T in reverse } — forward until end of paragraph { — backward until end of paragraph ) — forward until end of sentence ( — backward until end of sentence ]] — forward until end of section [[ — backward until end of section nH — n lines before first line on screen; n defaults to 0 nL — n lines before last line on screen; n defaults to 0 M — the middle line of the screen j — down one line k — up one line h — left one character l — right one character [BS] — left one character, backspace usually equals H [SPACE] — right one character _ — the entire current line - — until first non-whitespace character on previous line + — until first non-whitespace character on next line [RETURN] — until first non-whitespace character on next line Miscellaneous u — undo last change U — undo entire line \" cp — put \" c or general buffer after the cursor \" cP — put \" c or general buffer before the cursor mc — set mark with character c `c — goto mark c ‘ c — goto beginning of line with mark c `` — return to position before mark jump or search ''— return to beginning of line before mark jump or search J — join two lines D — delete rest of line C — change rest of line Y — yank current line into general buffer & — execute last ex-style substitution . — execute last modification ! object command — send object as stdin to command and replace with stdout [Ctrl]G - print information about file map x y — when character x is pressed, execute y map! x y — map input mode character x to string y ab x y — x is an abbreviation for y, changes are made on the fly su — Suspend the current editor session sh — run a shell ex Commands ex syntax ex commands in the vi follow this general form: address command which means: Execute command on specific lines obtained from the address part of the general form. If address is omitted, current line is used. Keep in mind that the ex is a line based editor, so all actions are line based. addresses: % — all lines in file x,y — lines x to y . — current line n — line number: n $ — last line of file x-n — n lines before line x x+n — n lines after line x /pat/ — forward to line containing pat ?pat? — backward to line containing pat Some commands are: s/pat/text/ — substitute 1st match of pat with text s/pat/text/g — substitute every match of pat with text s/pat/text/n — substitute the nth occurrence of pat with text ya c — yank into buffer c or the general buffer if c is omitted g address cmd — execute cmd on all lines which satisfy address > — shift right < — shift left d — delete line ! UNIX-cmd — execute UNIX-cmd on line m address — move lines to address refer to ex manual page for more commands The vi environment variables set You can customize your environment with this command by typing set var=value, this will set the specified var to value for a scalar variable. For boolean variables, use set var to set and set novar to unset. You can see which variables are set by just typing the set by its self. You can see a list of all variables by typing set all. Some environment variables are specific to the ex editor and some are specific to the vi editor. I have included both. boolean variables: autoindent(ai) — begin editing next line at same level of indent-ion as this one. autowrite(aw) — write current buffer before leaving exrc(ex) — tells vi/ex if it should read the .exrc file in the current directory. errorbells — editor sends a beep to the terminal when an incorrect ignorecase(ic) — ignore case of characters in searches. list — place a $ at the end of each line and a &#94;I on each tab. magic — allow ., [, and * to be interpreted as special characters in RE ' s. number(nu) — number lines in left margin showmatch(sm) — when closing a paren., brace or bracket; move the visual cursor to opening item to check scope showmode(smd) — show type of insert mode wrapscan(ws) — when searching and at bottom of file, continue searching from the top scalar variables: shiftwidth — number of spaces to to insert on a shift operation File Saving and Loading wq — write file and quit w — write file w file — write to specified file w! — overwrite existing file e file — edit new file r file — put contents of file q — quit the editor q! — force quit the editor, do not save changes x — quit the editor, save file if it was modified ZZ — quit the editor, save file if it was modified n — start editing next file in list rew — rewind file list, start editing 1st file on argument list again Q — quit vi and enter ex pre — Preserve file. rec file — recover file Examples j — move cursor down k — move cursor up h = [BS] — move cursor left l = [SPACE] — move cursor right + = [RETURN] — first non-whitespace character on next line cw — change word dd = d_ — delete line yy = y_ — yank current line into the general buffer \" ayj — yank current line and one below into buffer a yfc — yank until next occurrence of c on current line into the general buffer 3dl = d3l — delete next 3 characters 4c( = 2c2( = c4( — change next 4 sentences % — while on a brace, paren., or bracket; shift right until closing brace, etc. :%!sort = :1, \\(!sort — sort current file :5,10s/foo/bar/2 — change the second occurrence of foo with bar on lines 5-10 3J — Join next 2 lines to current one 3,9m\\) — move lines 3 through 9 to the end of the file ab w/o with out — when w/o is typed change to with out :?foo?,/bar/d — delete from the reverse match of foo until the next match of bar g/{/,/}/< — shift all lines between, and including, a \" { \" and a \" } \" left : \\(4,\\) d - delete last five lines of buffer :%s/(.) (.)$/2 1/ — swap everything before and after the first space if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/vimming-ling-ge-shi-shuo-ming.html","loc":"http://leetschau.github.io/vimming-ling-ge-shi-shuo-ming.html"},{"title":"UML中关联(association)和依赖(dependency)的区别","text":"下面是从网上搜集的一些关联(association)和依赖(dependency)区别的看法： 1. Dependency Relationship Draw a dependency relationship between two classes, or between a class and an interface, to show that the client class depends on the supplier class/interface to provide certain services, such as: ?The client class accesses a value (constant or variable) defined in the supplier class/interface. ?Operations of the client class invoke operations of the supplier class/interface. ?Operations of the client class have signatures whose return class or arguments are instances of the supplier class/interface. A dependency relationship is a dotted line with an arrowhead at one end:The arrowhead points to the supplier class. Association Relationship An association provides a pathway for communication. The communication can be between use cases and actors, between two classes or between a class and an interface. Associations are the most general of all relationships and consequentially the most semantically weak. If two objects are usually considered independently, the relationship is an association 2. Martin Fowler If you have an association from Class A to Class B then that means every instance of class A has some kind of link to class B. Now exactly what people mean by \"some kind of link\" varies, it may be a conceptual link, a method of the form getA or a field inside class A. But the usual notion is that the link exists at all times (although if the lower bound is 0 it may be empty). This link can be used by any method of A and, if exposed, by other classes too. With a parameter the connection between A and B only exists within the scope of the method that took the parameter. No other method can use the connection. As such that, for most people I come across, means that it is not an association. The dependency means that if you change the interface of B then you may have to change A. An association usually implies a dependency, but not vice-versa, as the parameter example suggests. 3. Robert C. Martin However, association is not free of semantics. An association is a data relationship. i.e. the implementation must use some sort of data variable to implement it. Typically this is done with some kind of member variable or instance variable that refers to the associate. In C++ we might create a pointer variable, in Java a reference variable. Or we might use some kind of string that represents the associate in a dictionary somewhere. In order for a message to be send between two objects, an association must exist between their two classes; and that association must be navigable in the direction that the message was sent. 4. quote: What is the difference between Association and Dependency? My understanding so far was: If an object of class A has a reference to an object of class B in its attribute structure, it is association. Robert C. Martin's answer: Er, well, uh -- hmmm. That's as good a definition as any I suppose. There are so many different colloquialisms and slangs for UML that I guess it hardly matters any more. There was a time when an association was the channel between classes over which messages were sent. No message, no association. But that rule has been relaxed by so much conventional usage that I don't think it can hold any more. Nowadays we seem to use association and aggregation interchangeably to represent a data field (except, of course, that everybody has their own private definition for what the white diamond means.) Dependency if very commonly used to represent an argument passed to a function. This was not the original intent of UML, but it's the way things have turned out. There was a time when dependency meant that a class knew about another, but did not send messages. Data structures had dependencies on their members because they didn't send them messages, whereas classes had associations with their members because they did send them messages. But that nice separation has gotten so badly muddled that it has become useless. Perhaps you can read from my tone that I'm pretty disillusioned with UML. Too bad. It could have been a standard. Now, I think its just going to be a confusing compendium of confounding conventions. 5. // From UML 2.0 Superstructure Final Adopted Specification: \"An association describes a set of tuples whose values refer to typed instances.\" (p. 97) \"A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation.\" (p. 124) 6. 依赖是比关联弱的关系，关联代表一种结构化的关系，体现在生成的代码中，以java为例： 若类A单向关联指向类B，则在类A中存在一个属性B b。 若类A依赖类B，则不会有这个属性，类B的实例可能存在于某个方法调用的参数中，或某个方法的局部变量中。 7. 关联有双向与单向之分，类A与类B双向关联可以是A与B相互可以作为对方的一个attribute，单向的话，就指其中一个类作为另一个类中的 attribute；依赖就只有单向的，不存在attribute的问题，例如类A依赖类B，表示在类A中有三种类B的使用方法：一是类B是全局的，二是类B在类A中实例化，三是类B作为参数被传递 8. 关联是一种结构关系，表现为一个对象能够获得另一个对象的实例引用并调用它的服务（即使用它）；依赖是一种使用关系，表现为一个对象仅仅是调用了另一个对象的服务。","tags":"Tech","url":"http://leetschau.github.io/umlzhong-guan-lian-associationhe-yi-lai-dependencyde-qu-bie.html","loc":"http://leetschau.github.io/umlzhong-guan-lian-associationhe-yi-lai-dependencyde-qu-bie.html"},{"title":"Hoekey使用笔记","text":"非常好的一款系统快捷键定制软件（名字是Hoekey而不是Hotkey），压缩包只有20多KB，功能却很强大。 所有的快捷键定义在hoekey.ini文件中，以下是几个常用的例子： =Rem|-- 我的定义 -- ~P = Run|e:\\MyDoc\\PKM2\\PKManager.exe ;启动某一程序 ~Z = Wait|1000 = Msg|Progman|274|61808|2 ; 关闭显示器 ~3 = Transparency ; Set current window to be ~4 = AlwaysOnTop ; transparent and on top 从上面的例子可以看出，如果要快捷键执行一系列动作，顺次写在等号后面即可。关闭显示器之所以要先有一个等待的动作，是因为如果不等待，快捷键本身会使屏幕重新启动。Hoekey定义了很多\"关键字\"，这些关键字的含义见[1]，完整的说明文档见Hoekey软件文档（安装目录下的hoekey.htm文件）或者网站（ http://www.bcheck.net/apps/hoekey.htm ）。 注意不要使用~R、~D、~E这些windows默认的快捷键，否则Hoekey会报错。 参考文献[1]： http://hi.baidu.com/ly055442/blog/item/e69ebacec3b4453db600c885.html Hoekey文档中文译文 标准格式： 键位=动作|选项1|选项2|选项3|选项4|选项5 ; 功能描述 辅助键代号： ~ = WIN键 _ = Shift键 &#94; = Ctrl键 @ = Alt键 例如： ~@G = win + Alt +G 动作列及参数： 新建窗口动作：Run, RunDialog, MsgBox, Input, Apps Run 格式：Run|程序路径|窗口运行方式|等待|运行目录 ·程序路径后的参数（路径[空格]参数）： %s = 当前选中的文本内容. %S = 当前选中的文本内容(URL) %c = 当前所在目录, %d = 当前盘符 %i = hoekey ini 文件 %t = 当前窗口标题 %l = 当前窗口类 （这个参数在处理窗口的很多命令中都会用到，如Hide/Unhide/Show等，可用 ~@T = MsgBox|%t #!!# %l|show window name and class|10 获得当前窗口的类名） %u = 最近一次 Input 动作的结果 %U = 最近一次 Input 动作的结果(URL) %f = 当前日期 %g = 当前时间 (无秒) %h = 当前时间 (有秒) ·窗口运行方式： 0 = 普通模式； 2 = 最小化； 3 = 最大化 ·等待： 1 = 退出后继续运行； 2 = 只运行一个实例 ·运行目录： 运行程序所在的目录环境, % 参数一样适用 特殊举例：用记事本打开当前选中的文字，自动生成\"选中文字.txt\"，并且以窗口最大化方式打开记事本。 ~N=Run|notepad.exe %s|3 RunDialog 格式：RunDialog|运行目录 打开Windows的运行对话框 MsgBox 格式：MsgBox|文本|标题|延时 特殊举例： 按一下快捷键，弹出窗口显示当前年月日时分秒，并在弹出5秒后自动关闭。 &#94;T=MsgBox|%f %h|现在时间|5 Input 格式：Input|文本|标题|延时|参数 特殊举例：打开一个输入框，输入关键字后，调用GreenBrowser的Google引擎搜索这个关键字，输入框文本是\"Google 搜索\"，对话框标题是\"wuchang测试Google搜索\"，延时5秒后自动确定。 ~I=Input|Google 搜索:|wuchang测试Google搜索|5|%u =Run|\"C:\\GreenBrowser\\GreenBrowser.exe\" \" http://www.google.com/search?q=%u \" Apps 格式：Apps|0=显示被隐藏的应用程序（默认）, 1=显示全部 显示被hoekey隐藏的应用程序列表 特殊举例：显示内存中所有应用程序的列表，双击某个应用程序名称后，立即显示该应用程序。 ~_F4=Apps|1 特殊举例：如果需要按下一组快捷键，同时打开多个应用程序，比如这样： @R=Run|C:\\APP\\1.exe =Run|C:\\APP\\2.exe 当前窗口动作： Move, MoveRel, Center, AlwaysOnTop, Transparency, Hide, Unhide, UnhideAll, Show, Editify, Kill Move 格式：Move|窗口类|左间距|上间距|宽度|高度 按你设定的大小和桌面位置，放置当前的应用程序窗口 特殊举例： 将当前程序窗口 靠左50 靠上50，宽度500，高度500的位置放置 ~ V=Move||50|50|500|500 MoveRel 格式：MoveRel|窗口类|左|上|宽|高 微调修改窗口大小和位置 特殊举例：将当前窗口宽度+10像素，高度-10像素 ~&#94;8=MoveRel||||10|-10 Center 格式：Center|窗口类|无宽度或高度定义 在桌面上置中当前窗口 无宽度或高度定义: 1 = 垂直； 2 = 水平 特殊举例：一般置中 ~&#94;V=Center 特殊举例：垂直置中 ~&#94;V=Center||1 AlwaysOnTop 格式：AlwaysOnTop|窗口类 将当前窗口强制总在最前面 特殊举例：设定Win+T后当前窗口总在最前 ~T=AlwaysOnTop Transparency 格式：Transparency|窗口类|透明度(0-100) 设置窗口透明度 特殊举例：将记事本窗口透明度调为50% @T=Transparency|记事本|50 Hide 格式：Hide|窗口类|1 = 缩小到系统托盘； 2 = 完全隐藏 特殊举例：将当前应用程序窗口缩小的系统托盘 ~H=Hide||1 Unhide 格式：Unhide|窗口类 特殊举例：显示最近通过hoekey隐藏的应用程序窗口 ~U=Unhide UnhideAll 格式：UnhideAll 特殊举例：显示所有被hoekey隐藏的应用程序 ~A=UnhideAll Show 格式：Show|窗口类 特殊举例：未知 Editify 格式：Editify 特殊举例：可让所有应用程序中的文本（标题栏、状态栏，输入框等位置）抓取下来并列表，方便你将他们复制到剪贴板，这个功能不错。 ~Y=Editify Kill 格式：Kill 特殊举例：不用多说，一个快捷键便可杀进程。 ~K=Kill 超能： Keys 格式：Keys|按键|间隔时间 \\s:shift down \\S:shift up \\c:control down \\C:control up \\a:alt down \\A:alt up \\w:win down \\W:win up \\z:right mouse button/context menu \\n:回车 \\t:tab \\l:left \\k:right \\u:up \\d:down \\h:home \\e:end \\i:insert \\x:delete \\b:backspace \\p:escape %s will be replaced with current selection. %c will be replaced with current directory, %d with current drive %i = hoekey ini file %t = current window title, %l = current window class %u = results of last Input function %f = current date %g = current time (no seconds) %h = current time (seconds) %% for a % Also environment strings will be expanded, e.g. %temp%, %path%, %os% &#94;~K=Keys|\\x\\d\\h\\h &#94;~K=Keys|\\z\\d\\d\\k\\|3000 Volume 格式：Volume|音量数值(0-100) 特殊举例：设定音量为50% ~7=Volume||70 Wait 格式：Wait|毫秒 特殊举例：通过快捷键打开Becky（最大化），等待3秒后，自动启动FreePops。 ~B=Run|c:\\becky\\becky.exe|3 =Wait|3000 =Run|c:\\FreePops\\FreePopsd.exe Eject 格式：Eject|驱动器盘符|锁定=0； 打开=1, 关闭=2 特殊举例：弹出h:光驱 ~K=Eject|h: HoeKey 系统功能 Config 弹出设置窗口（严格说是命令列表窗口） TrayIcon 格式：TrayIcon|打开=1, 关闭=0|系统托盘图标上的浮动提示 特殊举例：运行HoeKey之后自动显示托盘图标，提示为HoeKey Start=TrayIcon|1|HoeKey HotKeys 格式：HotKeys|打开=1, 关闭=0 特殊举例：关闭Hoekey的所有快捷键 ~0=HotKeys|0| Reload 格式：Reload|文件路径|添加=1 特殊举例：将另一个配置文件 user2.ini 的内容添加到当前配置文件中 ~R=Reload|user2.ini|1 Rem 格式：Rem|命名描述 特殊举例：这是在配置列表里添加一个类别名称，比如\"我的快捷键\",可以将自己设定的快捷键放在这行下面。 =Rem|我的快捷键 特殊动作 Config 格式：Config=动作|自定… 特殊举例：在点击Hoekye的config按钮后，同时执行以上某一个动作 Start 格式：Start=动作|自定… 特殊举例：就像上面的打开Hoekey系统托盘图标一样，可以将一个命令放在Start行，那么Hoekey启动后会自动执行这个动作。比如弹出一个消息框，写\"欢迎回来\"，5秒后自动关闭消息。 Start=MsgBox|欢迎回来！||5 Load 格式：Load=动作|自定… 特殊举例：当设置功能打开后自动执行一个动作，比如弹出一个消息提示框提示自己。 还有一些针对特殊软件的功能键，或者一些键盘多媒体键等，HoeKey都有所考虑，并在其帮助文件中详细列出了，如果有特殊需要可以参考一下那里。 HoeKey作为一个快捷键工具，简单的操作方式就是这样，只要设定好了，会带来很多的便利。 学习使用，身体健康。 附1： Msg|Progman|793|0|655360 ; Volume + Msg|Progman|793|0|589824 ; Volume - Msg|Progman|793|0|524288 ; Volume mute Msg||274|61488 ; 最大化 Msg||274|61472 ; 最小化 Msg||274|61728 ; 还原 Msg||274|61536 ; 关闭 Msg|0|274|61760 ; 启动屏幕保护 ~F4=Wait|1000 =Msg|Progman|274|61808|2 ; 关闭显示器 附2： Msg|Winamp v1.x|273|40044 ; Winamp: prev Msg|WMPlayerApp|793|0|786432 ; WMP - prev Msg|TTPlayer_PlayerWnd|273|32005 ; TTplayer - prev Msg|Winamp v1.x|273|40045; Winamp: play Msg|WMPlayerApp|793|0|851968; WMP - Stop Msg|TTPlayer_PlayerWnd|273|32002 ; TTplayer - stop Msg|Winamp v1.x|273|40046 ; Winamp: pause Msg|WMPlayerApp|793|0|917504; WMP - Pause Msg|TTPlayer_PlayerWnd|273|32001 ; TTplayer - Pause/play Msg|Winamp v1.x|273|40048 ; Winamp: next Msg|WMPlayerApp|793|0|720896 ; WMP - next Msg|TTPlayer_PlayerWnd|273|32006 ; TTplayer - next","tags":"Tech","url":"http://leetschau.github.io/hoekeyshi-yong-bi-ji.html","loc":"http://leetschau.github.io/hoekeyshi-yong-bi-ji.html"},{"title":"Eclipse带参数调试的方法","text":"下面是体现带参数调试的一个代码demo，首先输出参数的数量，然后依次输出每个参数。 public class ArgsEx { public static void main(String[] args) { int argNum = args.length; System.out.println(\"args number is = \"+argNum); for (int i = 0; i < args.length; i++) { System.out.println(args[i]); } } } 在Eclipse主菜单【Run->Debug Configurations】下，首先根据自己的工程类型（一般是Java Application）新建一个\"New Launch Configuration\"，右边面板上首先设置这个configuration的名字（Name），【Main】标签页下设置要调试的工程和main函数的位置（一般就是默认给出的），【Arguments】标签页下的【Program Arguments】下写上参数，如果有多个参数，每行写一个。【Run】菜单下的【Debug Configurations】和【Run Configurations】是互相联系的，二者保持一致，即在Debug Configurations中修改会导致Run Configurations做同样的变化。","tags":"Tech","url":"http://leetschau.github.io/eclipsedai-can-shu-diao-shi-de-fang-fa.html","loc":"http://leetschau.github.io/eclipsedai-can-shu-diao-shi-de-fang-fa.html"},{"title":"更改默认的SVN用户","text":"删除C:\\Documents and Settings[用户名]\\Application Data\\Subversion\\auth\\svn.simple下所有文件，再次登录后输入新的用户名密码即可。 SVN登录信息：lichao1, aba...","tags":"Tech","url":"http://leetschau.github.io/geng-gai-mo-ren-de-svnyong-hu.html","loc":"http://leetschau.github.io/geng-gai-mo-ren-de-svnyong-hu.html"},{"title":"Mina学习笔记","text":"1 Mina 在客户端和服务端的工作流程是什么？ 1.1 客户端通信过程 1. 通过 SocketConnector 同服务器端建立连接 2. 链接建立之后 I/O 的读写交给了 I/O Processor 线程， I/O Processor 是多线程的 3. 通过 I/O Processor 读取的数据经过 IoFilterChain 里所有配置的 IoFilter ， IoFilter 进行消息的过滤，格式的转换，在这个层面可以制定一些自定义的协议 4. 最后 IoFilter 将数据交给 Handler 进行业务处理，完成了整个读取的过程 5. 写入过程也是类似，只是刚好倒过来，通过 IoSession.write 写出数据，然后 Handler 进行写入的业务处理，处理完成后交给 IoFilterChain ，进行消息过滤和协议的转换，最后通过 I/O Processor 将数据写出到 socket 通道 2 IoAcceptor 与 IoConnector 的区别是什么？ 2.1 Acceptor 作为服务器端的连接接受者， SocketAcceptor 用来监听端口，同客户端建立连接，连接建立之后的 I/O 操作全部交给 IoProcessor 进行处理 IoAcceptor acceptor = new NioSocketAcceptor(); acceptor.bind( new InetSocketAddress(PORT) ); 2.2 Connector 作为连接客户端， SocketConector 用来和服务器端建立连接，连接成功，创建 IoProcessor Thread （不能超过指定的 processorCount ）， Thread 由指定的线程池进行管理， IoProcessor 利用 NIO 框架对 IO 进行处理，同时创建 IoSession 。连接的建立是通过 Nio 的 SocketChannel 进行。 NioSocketConnector connector = new NioSocketConnector(processorCount); ConnectFuture future = connector.connect(new InetSocketAddress(HOSTNAME, PORT)); 建立一个 I/O 通道 3 IoService 与 IoSession 的区别是什么？ IoSession 是用来保持 IoService 的上下文，一个 IoService 在建立 Connect 之后建立一个 IoSession （一个连接一个 session ）， IoSession 的生命周期从 Connection 建立到断开为止。 IoSession 做两件事情： 1. 通过 IoSession 可以获取 IoService 的所有相关配置对象 ( 持有对 IoService ， Processor 池， SocketChannel ， SessionConfig 和 IoService.IoHandler 的引用 ) 2. 通过 IoSession.write 是数据写出的入口 详见： jjvv 在 javaeye 上的博文： MINA 原理 http://www.javaeye.com/topic/599925","tags":"Tech","url":"http://leetschau.github.io/minaxue-xi-bi-ji.html","loc":"http://leetschau.github.io/minaxue-xi-bi-ji.html"},{"title":"Eclipse快捷键","text":"Eclipse的快捷键可以Window -> Preferences -> General -> Keys中设置，下面列表首先是该项目的英文名称，以方便在搜索框中搜索到该项，修改为更合适自己的快捷键，第二项是默认的快捷键，第三项是功能描述。 导航类（在窗口、标签、列表项之间切换） Open Resource: Ctrl+Shift+R，搜索指定的类 Activate Editor: F12, 激活Editor Quick Access: Ctrl+3, 激活Quick Access搜索框（Juno版） Next View: Ctrl+F7, View间跳转 Next Perspective: Ctrl+F8, Perspective间跳转 Ctrl+PageUp/PageDown 前/后一个Editor Tab（类似于Ctrl+F6，但不显示列表） Previous/Next: Ctrl+,/., 前/后一个（什么？） Next Page: Alt+F7, Console（控制台）间跳转 Show In ...: Alt+Shift+W, 在Editor里显示Package/Outline/etc View Show in breadcrumb: Alt+Shift+B（可以用\"Open Resource\"搜索框结合Breadcrumb代替package explorer做资源间跳转） Editor相关 Ctrl+1 显示错误修复建议 Ctrl+/ 注释当前行,再按则取消注释 Ctrl+↑/↓ 上/下滚行（光标不动） Ctrl+1 快速修复(最经典的快捷键,就不用多说了) Alt+↓ 当前行和下面一行交换位置(特别实用, 可以省去先剪切,再粘贴了) Alt+↑ 当前行和上面一行交换位置(同上) Alt+←/→ 前/后一处编辑位置 Alt+/ 代码助手 Ctrl+D 删除当前行 Ctrl+E 显示所有打开文件列表（之后输入文件首字母可以快速定位到文件） Ctrl+L 转至行 Ctrl+Q 定位到最后编辑的地方 Ctrl+Shift+F 格式化代码 Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后) Shift+Ctrl+Enter 在当前行插入空行(原理同上条) Ctrl+Alt+↓ 复制当前行到下一行(复制增加) Ctrl+Alt+↑ 复制当前行到上一行(复制增加) Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力) Alt+Shift+Z 重构的后悔药 (Undo) 搜索类 Ctrl+G 搜索变量声明 Ctrl+J 正向增量查找 Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查) Ctrl+K 查找下一个当前搜索项（Ctrl+F中的项） Ctrl+Alt+H 显示一个方法的调用关系（调用关系显示在Call Hierarchy窗口中，在分析代码运行流程时特别有用） 显示类 Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性 Ctrl+O 快速显示 OutLine Ctrl+L 定位在某行 (对于程序超过100行的人就有福音了) Ctrl+M 最大化当前View (再按则反之) Ctrl+T 快速显示当前类的继承结构，根类在上，再按一次则以根类在下方式显示； Ctrl+F10 显示当前View的属性菜单 Ctrl+Shift+L 根据当前视图显示所有快捷键 Debug...: Alt+D, 显示debug面板（自定义，与全屏插件联合使用） 其他 Alt+Shift+N 根据列表新建...，例如\"Alt+Shift+N, C\"是新建类 参考： List of Shortcuts for the Eclipse Java IDE","tags":"Tech","url":"http://leetschau.github.io/eclipsekuai-jie-jian.html","loc":"http://leetschau.github.io/eclipsekuai-jie-jian.html"},{"title":"Eclipse中使用SLF4J的一个例子","text":"Java程序最常用的日志系统大概就是apache的log4j了，它的功能简单说就是\"记录日志\"。对于类库型的Java应用，例如GAPI，本身没有main程序，总是被其他程序调用，这类系统如果自身使用log4j记录日志，会出现自身的日志系统与调用程序的日志系统冲突的问题，解决的方法就是把GAPI的日志用一个\"门面\"实现，运行时由调用程序实现日志的输出，slf4j就是这样的一个解决方案。 在Eclipse中新建一个Project名为Ex1，创建包com.leechau，创建类MySLF4J，代码如下： package com.leechau; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class MySLF4J { public static void main(String[] args) { Logger logger = LoggerFactory.getLogger(HelloWorld.class); logger.info(\"Hello World\"); } } } 提示无法解析包名slf4j，【Project->Properties->Java Build Path->Libraries】中，【Add External JARs】,加上log4j-1.2.14.jar、slf4j-api-1.5.0.jar、slf4j-log4j12-1.5.0.jar三个文件即可。 运行文件，出现报错：WARN No appenders could be found for logger... 这是因为slf4j需要读取一个叫log4j.properties的文件，以确定logger的行为，例如Log文件放在什么位置，文件名是什么等等，如果没有这个文件就会出现上面的问题，在使用logger的类文件所在的source folder下新建一个名为\"log4j.properties\"的文件，文件内容为： log4j.rootCategory=DEBUG,stdout,R,errorlogger 第1个 appender将log写到屏幕 log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=[%p] [%d] [%c] - [%m]%n log4j.appender.stdout.Threshold=DEBUG log4j.logger.org.apache.mina.filter.executor.OrderedThreadPoolExecutor=WARN log4j.logger.org.apache.mina.core.filterchain.IoFilterEvent=WARN log4j.logger.org.apache.mina.filter.codec.ProtocolCodecFilter=WARN 第1个配置文件，用于输出运行时调试信息 log4j.appender.R=org.apache.log4j.RollingFileAppender log4j.appender.R.layout=org.apache.log4j.PatternLayout true表示每次在文件尾写入新的日志信息，false表示新的日志覆盖旧的日志文件 log4j.appender.R.Append=true log4j.appender.R.layout.ConversionPattern=[%p] [%d] [%c] - [%m]%n log4j.appender.R.Threshold=INFO log4j.appender.R.File=./log/Test.log #此参数设置log文件名 log4j.appender.R.MaxFileSize=8000KB log4j.appender.R.MaxBackupIndex=5 第2个配置文件，用于输出运行时错误信息 log4j.appender.errorlogger=org.apache.log4j.RollingFileAppender log4j.appender.errorlogger.layout=org.apache.log4j.PatternLayout log4j.appender.errorlogger.layout.ConversionPattern=[%p] [%d] [%c] - [%m]%n log4j.appender.errorlogger.Threshold=ERROR log4j.appender.errorlogger.File=./log/error.log log4j.appender.errorlogger.MaxFileSize=8000KB log4j.appender.errorlogger.MaxBackupIndex=5 更新一下项目，运行即可。每一个source folder可以拥有自己的\"log4j.properties\"文件，在此文件中指定不同的log文件名，即可为每一个source folder建立自己的日志文件。 关于log4j的使用方法以及log4j.properties文件设置方法的详细说明见笔记\"log4j使用笔记\"。","tags":"Tech","url":"http://leetschau.github.io/eclipsezhong-shi-yong-slf4jde-yi-ge-li-zi.html","loc":"http://leetschau.github.io/eclipsezhong-shi-yong-slf4jde-yi-ge-li-zi.html"},{"title":"Eclipse使用笔记","text":"如何为Eclipse安装插件？尤其是SVN？ 放入$ECLIPSE_HOME/dropins文件夹比较好； 从SVN中更新代码 在Project名称上右键->Team->更新； 调整Eclipse Editor的字体和字号 Window->Preferences->General->Appearance->Colors and Fonts->Basic->Text Font->Edit. 断点管理 IDE下端的\"Show view as a fast view\"中选\"Other\"，然后在\"Debug\"类下选\"Breakpoints\"，所有的断点都会在这个view中列出。 使用Run/Debug快捷键 Window->Preference->Run/Debug->Launching->Launching Operation, check \"Always launch the previously launched application\"，这样F11/Ctrl+F11总是Debug/Run上一次的Config，而不会运行Editor里的代码； 代码自动提示 Window->Preference->Java->Editor->Content Assist->Auto Activation，里面可以定制激活代码自动完成的延时时间，哪些字符可以触发自动完成等，默认只有输入\"点\"时会触发，如果需要在输入a，b和c时也触发，写成\"abc.\"，但实际使用后发现自动触发导致编辑器速度变慢，影响输入体验，所以保持默认设置（只有输入\"点\"时触发）比较好。 在确实需要代码提示时，可以用快捷键激活，设置代码提示快捷键的位置是： Window -> Preference -> General -> Keys -> Scheme:Default -> Command:Content Assist，默认是Alt+/，不顺手，改为Shift+Tab键比较好，定义此键不能直接按shift+tab，而是点右侧三角按钮，从中选择Shift+Tab，如下图： 调整代码提示显示速度 Eclipse中鼠标停在代码上时出现的浅黄色提示窗口叫\"Hover\"，如果它出现的速度太快会影响看代码，它延时出现的设置需要在注册表里进行：HKEY_CURRENT_USER -> Control Panel -> Mouse里新建一个类型为REG_SZ（字符串值）类型的项，名为\"MouseHoverTime\"，一般设为400，也就是鼠标悬停400毫秒后显示Hover； 调整默认的快捷键 有些快捷键属于\"重度依赖\"，但默认的设置比较复杂，比如： 在开发和调试间切换需要频繁用到\"Next Perspective\"，默认是Ctrl+F8，建议改为Alt+O（不要设置为F7这样的单键，因为单键需要多按一次Enter确认）； 多个进程同时调试（尤其是Server/Client）时频繁使用\"Next Page\"，默认是Alt+F7，建议改为Alt+C； \"Minimize Active View\"建议修改为F7，要恢复（Restore） 这些最小化的View可以用Window->Reset Perspective菜单项，对应的按键是Alt, W, R；要显示某个最小化状态下的View可用快捷键\"Alt + Shift + Q\"，后面跟一个按键的方式激活这个View，例如Breakpoint对应B键，Console对应C键等，Debug无对应按键，可设置为D键；之后如果想返回Editor，用F12键； 隐藏Eclipse的工具栏 Help -> Welcome; Window -> Show Toolbar; shutdown Welcome page; 用Quick Access功能快速定位配置项 Quick Access（默认快捷键Ctrl+3）是从Eclipse 4后才出现的，它能够记忆用户最近使用的功能，因此一些常用功能会出现在待选项的最上面，使用很方便。下面是一些常用的操作： 查看某项功能的快捷键：[Ctrl+3 -> Keys]，菜单操作：[Window -> Preferences -> General -> Keys]； 打开项目属性面板：[Ctrl+3 -> properties]，选择\"Properties - Properties\"，打开当前文件所在项目的属性面板，不需要先选中项目；","tags":"Tech","url":"http://leetschau.github.io/eclipseshi-yong-bi-ji.html","loc":"http://leetschau.github.io/eclipseshi-yong-bi-ji.html"},{"title":"TotalCMD的颜色功能笔记","text":"TotalCMD的颜色功能在两个地方比较有用。 显示最近更改过的文件 【配置->选项->显示->颜色->按文件类型设置颜色->添加->设置->高级】， 勾选【不早于】，在后面写上1日，然后【确定】，在随后出现的颜色选择面板里选红色。 用同样的方法将7天内更改过的文件设为浅蓝色； 不同的文件类型设为不同的颜色 参照【配置->选项->显示->颜色->按文件类型设置颜色】中已经预定义的那些条目进行设置即可。","tags":"Tech","url":"http://leetschau.github.io/totalcmdde-yan-se-gong-neng-bi-ji.html","loc":"http://leetschau.github.io/totalcmdde-yan-se-gong-neng-bi-ji.html"},{"title":"Java网络通信程序（一对多）","text":"在前文\"Java网络通信程序（一对一）\"基础上，实现了一个服务器为多个客户端提供服务的功能，本文基于[1]之10.3.9节例10-4和10-5，修正了一些变量递增错误，删去了两个无用的变量。本文使用的客户端程序与前文完全相同。 MultiTalkServer.java倒数第6行代码表明代码中可以直接使用同一目录下其他public类（这里是ServerThread类），无需import。 [1] 陈明：Java语言程序设计，清华大学出版社，2009.6 MultiTalkServer.java import java.io. ; import java.net. ; public class MultiTalkServer{ static int clientNum = 1; public static void main(String args[]) throws IOException { ServerSocket serverSocket = null; boolean listening = true; try { serverSocket = new ServerSocket(4700); System.out.println(\"MultiTalkServer Started.\\n\"); } catch (IOException e){ System.out.println(\"Could not listen to port 4700.\"); System.exit(-1); } while (listening) { new ServerThread(serverSocket.accept(), clientNum).start(); //直接引用同一文件夹下的其他公共类 clientNum++; } serverSocket.close(); } } ServerThread.java import java.io. ; import java.net. ; public class ServerThread extends Thread { Socket socket = null; int clientNum; public ServerThread(Socket socket, int num){ this.socket = socket; clientNum = num; } public void run(){ try{ String line; BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter os = new PrintWriter(socket.getOutputStream()); System.out.println(\"Connected to Client #\"+clientNum+\".\"); System.out.println(); do{ line = is.readLine(); System.out.println(\"Client #\"+clientNum+\" says: \"+line); System.out.println(\" To Client\"+clientNum+\": you said: \"+line); System.out.println(); os.println(\"You said: \"+line); os.flush(); } while (! line.equals(\"bye\")); os.close(); is.close(); socket.close(); } catch (Exception e){ System.out.println(\"Error:\"+e); } } }","tags":"Tech","url":"http://leetschau.github.io/javawang-luo-tong-xin-cheng-xu-yi-dui-duo.html","loc":"http://leetschau.github.io/javawang-luo-tong-xin-cheng-xu-yi-dui-duo.html"},{"title":"Java网络通信程序（一对一）","text":"本文是基于[1]之10.3.8节的阅读笔记，文末的两个java程序改自该节例10-2和10-3。 Client/Server结构的Java程序由两个独立的程序组成，每个程序的核心功能都由4个对象相互协作实现： 1 Socket，这是网络通信的核心； 2 信息发送者：是一个PrintWriter对象，与Socket的输出流绑定，负责发送信息，见Server程序第26行，Client程序第12行； 3 信息接收者：是一个BufferedReader对象，首先与Socket的输入流绑定，然后将输入的字节流转换为字符流，见Server程序第25行，Client程序第13行； 4 用户输入处理器：这个对象处理本地用户的输入，将输入字符串以合适的形式保存或者展现，不涉及网络，服务端程序代码见27行，客户端见11行； 之所以接收者需要加一层字节流到字符流的转换（用InputStreamReader实现），是因为网络传输的字节而非字符。 这类程序的基本结构由4个步骤组成： 1 创建Socket，Server端可分为两个子步骤（见程序第8-23行），第一步是创建一个ServerSocket对象，第二步是用它的accept方法在某一端口监听，等待客户端连接（程序运行到这里进入等待状态，也就是书中所谓的\"阻塞\"，在未收到客户端连接之前，不运行后面的代码）；Client端比较简单（见程序第8行），创建一个Socket对象就OK了； 2 为Socket配置信息发送和接收者，服务端程序代码见25、26行，客户端见12、13行； 3 开始进行信息传递，代码见第29-36行（服务端）和15-22行（客户端），服务端运行到第30行is.readLine()等待socket的输入流，进入等待状态，与此同时客户端运行到第17行sin.readLine()等待用户输入，例如用户输入'aa'并回车，则程序执行到第20行is.readLine()（第20行）进入等待socket输入流状态，同时服务端收到了客户端os.flush()发送的信息并打印出来（第30行），得到用户输入（第32行）后向客户端发送（第35行），本次通信完成，客户端得到了socket的输出流后打印出来（第20行），本次通信完成。以上就此一次完整的do while循环内容。 4 通信结束，关闭Socket，见第37-46行（服务端）和24-31行（客户端）。 [1] 陈明：Java语言程序设计，清华大学出版社，2009.6 TalkServer.java（服务端程序） 01 import java.io. ; 02 import java.net. ; 03 04 public class TalkServer { 05 06 public static void main(String[] args) { 07 try{ 08 ServerSocket server = null; 09 try{ 10 server = new ServerSocket(4700); 11 System.out.println(\"Server Started.\"); 12 } 13 catch(Exception e){ 14 System.out.println(\"Can not listen to:\"+e); 15 } 16 Socket socket = null; 17 try{ 18 socket = server.accept(); 19 System.out.println(\"Connected to Client.\"); 20 } 21 catch(Exception e){ 22 System.out.println(\"Error:\"+e); 23 } 24 String line; 25 BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream())); 26 PrintWriter os = new PrintWriter(socket.getOutputStream()); 27 BufferedReader sin = new BufferedReader(new InputStreamReader(System.in)); 28 System.out.println(); 29 do{ 30 System.out.println(\"Client \"+is.readLine()); 31 System.out.println(\"To Client:\"); 32 line = sin.readLine(); 33 System.out.println(); 34 os.println(line); 35 os.flush(); 36 } while(! line.equals(\"bye\")); 37 os.close(); 38 is.close(); 39 socket.close(); 40 server.close(); 41 } 42 catch (Exception e){ 43 System.out.println(\"Error:\"+e); 44 } 45 } 46 } TalkClient.java（客户端程序） 01 import java.io. ; 02 import java.net. ; 03 04 public class TalkClient { 05 06 public static void main(String[] args) { 07 try { 08 Socket socket = new Socket(\"127.0.0.1\",4700); 09 System.out.println(\"Connected to Server.\"); 10 System.out.println(); 11 BufferedReader sin = new BufferedReader(new InputStreamReader(System.in)); 12 PrintWriter os = new PrintWriter(socket.getOutputStream()); 13 BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream())); 14 String readline; 15 do{ 16 System.out.print(\"To Server:\"); 17 readline = sin.readLine(); 18 os.println(readline); 19 os.flush(); 20 System.out.println(\"Server says:\"+is.readLine()); 21 System.out.println(); 22 } 23 while (! readline.equals(\"bye\")); 24 os.close(); 25 is.close(); 26 } 27 catch(Exception e){ 28 System.out.println(\"Error\"+e); 29 } 30 } 31 }","tags":"Tech","url":"http://leetschau.github.io/javawang-luo-tong-xin-cheng-xu-yi-dui-yi.html","loc":"http://leetschau.github.io/javawang-luo-tong-xin-cheng-xu-yi-dui-yi.html"},{"title":"TotalCMD 7.5常用快捷键","text":"wincmd.ini文件中的[Shortcuts]一节下面是默认和用户定义的快捷键， 可以通过修改这个文件设置TotalCmd的快捷键。 Ctrl + Up: 激活命令行，按esc关闭命令行； shift + f4：新建一个文件 shift + f12：同步文件夹 alt + e：跳转到【我的电脑】 alt + r：跳转到【网上邻居】，下面有【删除程序】等 alt + w：跳转到【桌面】 alt + d: 编辑当前路径； ：解压选定文件到当前目录下（alt+F9是解压到对面窗口） 次常用快捷键： alt + a：文件夹是否也按时间排序","tags":"Tech","url":"http://leetschau.github.io/totalcmd-75chang-yong-kuai-jie-jian.html","loc":"http://leetschau.github.io/totalcmd-75chang-yong-kuai-jie-jian.html"},{"title":"Linux常用命令笔记","text":"apt-get install/remove 安装/卸载软件；* cat 显示文本文件； aspell 交互式拼写检查命令； basename 两种用法：1. 去掉路径，返回文件名：basename /foo/bar -> bar； 去掉后缀，返回文件名：basename foo.bar .bar -> foo cat 显示文件内容，例如\"cat /proc/cpuinfo\"可以查看CPU信息；有用的几个选项： -A: 显示不可见字符；-n显示行号，-s将相邻的多个空行合并为一个空行 （只针对显示内容，不影响原文件内容）； cd 改变目录； chmod 修改文件属性，chmod user/group/other/all +/- read/write/execute filename, 例如chmod u+x file1是只给file1的user赋予执行权限； 参考 How to Set File Permissions Using `chmod' chown 变更文件（或目录）的拥有者（或所属群组）， 例如root用户执行\"chown godu:root -R ./ArtifactRepo\"表示将当前目录下的 ArtifactRepo目录及子目录所有权变更给godu用户和root用户组； comm 比较文件，适于比较短的文件间做比较； cp 拷贝文件；cp -r src_folder dst_folder 拷贝目录； cut 截取文件每一行中的一部分，\"-c\"以字符为单位，\"-f\" 以域为单位 （要求以tab为分隔符，空格无效）；\"-d\"指定域的分隔符； date 显示系统日期和时间，使用-s参数可以设置日期和时间：date -s \"2 OCT 2006 18:00:00\" df 显示磁盘使用情况，例如\"df -h $HOME\"是显示用户主目录的已用和可用的磁盘空间； diff 比较两个文件或者目录，\"-c\"采用context格式，\"-u\"采用unified格式； dmidecode 显示硬件设备信息； dpkg 包管理，dpkg -l 列出所有已安装包；dpkg -l 查询 的情况（是否安装，版本等）；dpkg -i 安装包；dpkg -r 卸载包；dpkg -P 完全卸载（purge）； du -sh : 查看文件夹占用的磁盘空间大小('s' stands for summary, 'h' stands for human readable），要打印某目录下所有项目（目录和文件）尺寸汇总： du -sh * ， 如果只打印目录： du -h --max-depth=1 <folderName> ； 将以上汇总按尺寸大小升序（从小到大）排列： du -s * | sort -n ， 降序排列： du -s * | sort -rn (r stands for reverse)， 排序时不要加-h选项（它会导致排序错误，例如5M会被排在6k之前）； List largest 10 folders in current folder: du -s *|sort -rn|head env 列出环境变量 exit 退出； expand 将文件中的tab转换为spaces; export 将变量定义为环境变量（仅用于bash，格式为export VAR_NAME=var_value）； find 查找文件，最常用格式：find -name ， 例如查找当前目录下名为test的文件和目录：find . -name test，详见 Linux查找文件命令find free 查看系统memory使用情况，第一行（Mem）是考虑了内核缓冲后的使用率， 第二行（\"-/+ buffer/cache\"）才是软件使用的内存； genisoimage 将光盘制作为ISO文件，类似的还有dvdbackup，但需要安装，用dd也可以， 但据说可能会出错，因为没有错误校验； grep 从文件中查找字符串， grep -c <regex> 表示计算 出现的次数， 参考笔记\" Replace a String in Multiple Files in a Directory on Linux \"； grep -P \"\\d\" <filename> : 使用PCRE格式的正则表达式； grep -F <regex> : 正则表达式内所有字符均不转义； gzip/gunzip 压缩/解压缩gz文件； hdparm 获取或者设置硬件信息； hwinfo 类似于lshw, Ubuntu上需要安装：apt-get install hwinfo, 内容十分庞杂，或者叫详细； inxi -Fx: 显示易于阅读的设备信息，格式最易于阅读； inxi -I: 系统总内存和已使用内存，总进程数，运行时间等； inxi -N: 显示网卡信息； inxi -tx cm: 显示实时CPU和内存使用情况； inxi -r: 显示软件源； iostat 显示系统磁盘当前的IO状况（Ubuntu，CentOS支持，Red Hat不支持） ip 查询IP相关信息， ip addr = ifconfig , 其他还有 ip route 和 ip link ; less 查看文本文件内容，或者压缩文件（如zip, tar.gz, jar, war等）的内部结构， 操作类似于只读版vi，如用/查找，j, k, gg, G浏览等； ln 创建文件链接（link），一般创建的是软链接（symbolic link）， 在target_dir目录下创建src_file1，src_file2等文件的软链接： ln -s src_file1 src_file2 ... [target_dir] ， 最常用的格式是在目标目录下运行\"ln -s src_file\"， 就在当前目录下创建了一个与src_file同名的软链接（src_file可以是绝对路径或者相对路径）, or give the link a new name: cd $target_dir; ln -s /source/to/link new_link_name ls 显示当前目录下内容，可用选项： -d : 显示目录（而不是目录中的内容）； -R : 显示所有子目录中的内容，类似于tree，但不写成树状； -m : 目录项之间用逗号做分隔符（而不是换行符），主要用于向其他程序做管道输入； lsb_release -a 显示操作系统的distro ID和版本号，而不仅是uname提供的内核情况， 此指令适用于Ubuntu，CentOS和Redhat，Redhat还可以用\"cat /etc/redhat-release\"查看distro ID； lsblk -f 显示块设备信息，用于确定未mount的USB设备卷标、硬盘分区信息等； lscpu 显示CPU相关信息； lshw 列出硬件信息，比hwinfo精炼一些； lsof 列出打开的文件， -p 可以指定某个进程打开的文件， -u 指定用户打开的文件， -c 某个命令打开的文件， -i 显示打开的网络端口， -i :22 显示谁连接了22端口， -i tcp 显示所有打开的TCP连接， -a -u bvt -i 显示bvt用户打开的所有网络端口， 其中 -a 表示后面的 -u bvt 与 -i 两个参数间是AND关系； Ref: A Unix Utility You Should Know About: lsof and Finding open files with lsof lspci 显示PCI硬件设备信息，为Gentoo等Linux内核内核安装驱动时有用； lsusb 显示USB总线信息； mkdir 新建文件夹，-p指令可以用来建立多级目录，配合{}，可以一次建立一个目录树， 例如 mkdir -p godu/{bin/{bin1,bin2},lib/{lib1,lib2}} 可以建立一个3层目录树（用tree或者ls -R指令查看结果）； more 分屏显示文件内容； mount 用来挂载设备，如果没有参数则显示当前已挂载的设备； mpstat 显示系统cpu当前状态（CentOS和Redhat支持） netstat 显示某个进程使用了哪个端口，或者某个端口被哪个进程使用， 例如\"netstat -tupln|grep :1527\"可以查询所有包含1527的进程-端口关系； rm 删除文件（和目录），例如删除当前目录下有一个tcp_rpc子目录， 删除其中所有.gitignore文件（包括所有子目录）：\"rm -ri tcp_rpc/* /.git \"， 其中选项r表示包含所有子目录，i表示删除前询问； rm -r folder_name 删除目录（如果子目录很多需要手工确认删除，可以用rm -rfv强制删除）； passwd 修改密码； paste 将多个文件的对应行连接在一起， 例如paste -d '-' file1 file2将file1的第一行与file2的第一行以'-'连接，后面各行依此类推； pgrep 根据指定规则找出进程PID，相当于 ps -ef| grep ... ， -l 列出进程名， -lf 列出完整进程名； pkill 关闭符合指定规则的PID，相当于\"pgrep ...|xargs kill\"； ps 显示进程信息； pwdx [PID] 显示[PID]指定进程的当前工作目录，可以先用ps命令查到进程的PID，再用这个命令找工作目录； rename 更改文件名。例如将所有 .mkd 文件扩展名改为 .md ： rename 's/\\.mkd$/\\.md/' *.mkd rsync: rsync [options] src dst, \"-r\": recursive, if src is a directory, \"rsync -r src dst\" means \"src\" itself with all things in it will be copied to dst, while \"rsync -r src/ dst\" will copy all things under \"src\" except \"src\" itself to \"dst\"; \"-C\": If you want avoid copy \".svn\" or \".git\" folder; \"-u\" means update, if the file in dst is newer than that in src, it will not be copied; \"-a\" means archive, keep the meta data (modify date and time, etc) of src files when copy, equals to \"-rlptgoD\"; \"-t\" keep the modification time of original files; \"-v\" means verbose; \"--delete\" means delete files in destination folder which not exist in source folder; \"-p\" means keep permissions between src and dst; \"-l\" copy symlinks as symlinks; script 开始将屏幕输出记录到 中，输入exit结束日志记录； setenv csh中定义环境变量，格式为setenv VAR_NAME var_value（与bash的export不同，变量名与值之间是空格而非等号）； sort 以行为单位排序，\"-n\" 数字排序，例如 du -s <target_path> | sort -n 可以按文件夹大小排序； -k 指定排序的项，例如下面需要对多个文件夹（Common, Element, Service）下的子目录汇总后按文件名排序， 由于文件名是第9项（默认以空格或者tab为分割符，可以用\"-t\"指定其他分隔符），所以sort的选项设置为\"-k 9,9\"： drwxrwxr-x 7 bvt bvt 4096 Nov 12 10:24 datasource_core $ ll Common Element Service | sort -k 9,9 sort支持用多个-k选项对多个域做不同种类的排序，下面的命令首先对第一个域做字母排序，然后对第二个域做数字排序： sort - k 1 , 1 - k 2 n distros . txt source .profile 载入环境变量； stat 显示文件详细信息 su 参考 Switch User Command in Linux sudo passwd 在新装好系统中为root设置密码； tar -zxvf或者gzip -d加tar -xvf解压缩； tee 将stdin的内容同时重定向到stdout和文件中： ls /usr/bin|tee ls.txt|grep zip time 计算程序运行时间，输出中的total值是时钟时间，还有一个 /usr/bin/time -p 指令输出的\"real\"值是实际的时钟时间；实例见 Calculate PI in 3 Languages Dynamically ； top 具体功能以及与prstat的关系待查； touch 更改文件的最后修改时间， -r <filename> ：设置为 的时间； -d <timeString> ：从字符串读取时间，可以是相对时间，这二者连用， 可以实现\"将A文件的时间设为比B文件早两天\"这样的效果： touch -r fileB -d '-2 days' fileA tr 字符变换，例如将多行文本汇总到一行，以逗号分隔：cat | tr '\\n' ',' tree 用树状结构显示文件夹，-L 3表示只显示最上面3层目录；-d表示只显示目录，不显示文件； type 显示命令类型，有shell builtin（如type自身）,shell function（如cd），以及外部命令，显示命令文件路径； uptime 系统已经运行的时间、用户数、CPU负载量，与top指令的第一行输出相同； whereis 查找可执行文件和文档的位置， 例如Shell中无法执行 ifconfig 时用 whereis 可以找到 ifconfig 所在的路径； which 显示命令在PATH环境变量中第一个出现的位置， 尤其适用于一个命令在PATH中有多个版本，可以用which确定当前执行版本的完整路径； who: list all users logged onto the host whois: get the owner information of a domain, for example: whois boco.com.cn xargs xxd: 以16进制显示文件内容，与UltraEdit的Hex模式类似； zip: zip <file_name> -r <folder_name>","tags":"Tech","url":"http://leetschau.github.io/linuxchang-yong-ming-ling-bi-ji.html","loc":"http://leetschau.github.io/linuxchang-yong-ming-ling-bi-ji.html"},{"title":"\"柴油机总体分析系统\"开发手记","text":"该项目是应贾德文要求，做一个后端数值计算＋前端GUI实现，要求开发工具兼具较强的数值计算能力（尤其是矩阵和向量计算）、易用性（不需要内存、指针、堆栈、消息等专门知识）、用户图形界面（GUI）开发和程序打包（生成单一exe文件）功能。备选方案有pyhton、matlab和scilab，matlab是商业软件，体积庞大，GUI和打包比较麻烦，scilab数值计算功能一般，语法比较独特，GUI采用Tcl实现，好像也没有打包功能，而python平台在这方面表现最好，numpy模块的数值计算功能强大，GUI设计方面，简单界面可选Tkinter，复杂的可选wxPython，打包用py2exe模块，因此本项目最终选择在WinXP + python2.5平台上完成。 tkinter的界面设计基本方法：多层frame嵌套； 一般是两句定义一个控件，第一句定义控件特征，第二句定义放置方法，Label和Button可实现单语句定义； 向量数字的格式化输出，同时转化为长度固定的字符串： Python中[for ii in aa]的强大功能：见附件的第212、213行（给resMtx幅值的语句，在表达式中使用for语句）； Text的tab控制输出格式：格式字符串也可实现对齐，但tab stop有4种对齐方式，功能更强； GUI字体的设置方法：定义专门的字体设置字符串； 中文GUI界面的编码问题：在文件头加上：# - - coding:utf-8 - -，指明用utf8编码； CheckBox的判断： 界面上取得的字符串转化为数组，进行数学运算后表现在界面上： from numpy import * from Tkinter import * def solve1(): resStr = inp_txt.get('1.0',END) bb = fromstring(resStr,'d',-1,' ').reshape(3,-1) print type(bb) print bb.shape out_txt.insert('1.0', transpose(bb)) root = Tk() top = Frame(root) top.pack(side='top') inp_txt = Text(top, font=('Times',12),height=5,width=30) inp_txt.insert('1.0','12 23\\n34 45\\n34.5 98.234') inp_txt.pack(side='top') Button(top, text='solve', command=solve1).pack(side='top',padx=40) out_txt = Text(top, font=('Times',12),height=5,width=30) out_txt.pack(side='top') root.mainloop() 其他python编程实践：单句代码的折行、多句代码放在一行；pass语句的作用； 下面是Anova.py文件内容： # - - coding:utf-8 - - from Tkinter import Tk, Frame, LabelFrame, Label, Entry, Text, Button, \\ IntVar, Checkbutton, X, CENTER, NUMERIC, END from numpy import zeros, transpose, fromstring, reshape import rwMtx as rwm from tkMessageBox import showwarning def Anova7(schMtx, calcMtx): k = 7 # total number of factors m = 3 # total number of levels n = 18 # total number of experiments r = n/m # here add the format check T = sum(calcMtx) CT = T 2/n QT = sum(calcMtx 2) ST = QT - CT K = zeros((m ,k)) K[0,0] = sum(calcMtx[0:3]) + sum(calcMtx[9:12]) K[1,0] = sum(calcMtx[3:6]) + sum(calcMtx[12:15]) K[2,0] = sum(calcMtx[6:9]) + sum(calcMtx[15:18]) K[0,1] = calcMtx[0]+calcMtx[3]+calcMtx[6]+calcMtx[9]+calcMtx[12]+calcMtx[15] K[1,1] = calcMtx[1]+calcMtx[4]+calcMtx[7]+calcMtx[10]+calcMtx[13]+calcMtx[16] K[2,1] = calcMtx[2]+calcMtx[5]+calcMtx[8]+calcMtx[11]+calcMtx[14]+calcMtx[17] K[0,2] = calcMtx[0]+calcMtx[3]+calcMtx[8]+calcMtx[10]+calcMtx[14]+calcMtx[16] K[1,2] = calcMtx[1]+calcMtx[4]+calcMtx[6]+calcMtx[11]+calcMtx[12]+calcMtx[17] K[2,2] = calcMtx[2]+calcMtx[5]+calcMtx[7]+calcMtx[9]+calcMtx[13]+calcMtx[15] K[0,3] = calcMtx[0]+calcMtx[5]+calcMtx[6]+calcMtx[10]+calcMtx[13]+calcMtx[17] K[1,3] = calcMtx[1]+calcMtx[3]+calcMtx[7]+calcMtx[11]+calcMtx[14]+calcMtx[15] K[2,3] = calcMtx[2]+calcMtx[4]+calcMtx[8]+calcMtx[9]+calcMtx[12]+calcMtx[16] K[0,4] = calcMtx[0]+calcMtx[5]+calcMtx[7]+calcMtx[11]+calcMtx[12]+calcMtx[16] K[1,4] = calcMtx[1]+calcMtx[3]+calcMtx[8]+calcMtx[9]+calcMtx[13]+calcMtx[17] K[2,4] = calcMtx[2]+calcMtx[4]+calcMtx[6]+calcMtx[10]+calcMtx[14]+calcMtx[15] K[0,5] = calcMtx[0]+calcMtx[4]+calcMtx[8]+calcMtx[11]+calcMtx[13]+calcMtx[15] K[1,5] = calcMtx[1]+calcMtx[5]+calcMtx[6]+calcMtx[9]+calcMtx[14]+calcMtx[16] K[2,5] = calcMtx[2]+calcMtx[3]+calcMtx[7]+calcMtx[10]+calcMtx[12]+calcMtx[17] K[0,6] = calcMtx[0]+calcMtx[4]+calcMtx[7]+calcMtx[9]+calcMtx[14]+calcMtx[17] K[1,6] = calcMtx[1]+calcMtx[5]+calcMtx[8]+calcMtx[10]+calcMtx[12]+calcMtx[15] K[2,6] = calcMtx[2]+calcMtx[3]+calcMtx[6]+calcMtx[11]+calcMtx[13]+calcMtx[16] Q = zeros(k) for i in range(k): Q[i] = sum(K[:,i]**2)/r S = Q - CT Se = ST - sum(S) # error of S dofLevel = m - 1 # degree of freedom dofSum = n - 1 dofErr = dofSum - dofLevel * k sms = S / dofLevel # sum of mean square errSms = Se / dofErr F0 = sms / errSms Ap = (F0 - F0.min())/((F0.max() - F0.min())/0.9) + 0.1 A = (Ap/sum(Ap)).transpose() R = zeros((k,m)) for i in range(k): R[i,:] = (schMtx[i,:] - schMtx[i,:].min())/((schMtx[i,:].max() - schMtx[i,:].min())/0.9) + 0.1 B = zeros(m) for i in range(m): dd = zeros(k) for j in range(k): dd[j] = min(A[j],R[j,i]) B[i] = max(dd) min_index = B.argmin() # optimization result # assemble the return value: return B, schMtx[:,min_index] def Anova5(calcMtx): k = 5 # total number of factors m = 3 # total number of levels n = 18 # total number of experiments r = n/m # here add the format check T = sum(calcMtx) CT = T 2/n QT = sum(calcMtx 2) ST = QT - CT K = zeros((m ,k)) K[0,0] = sum(calcMtx[0:3]) + sum(calcMtx[9:12]) K[1,0] = sum(calcMtx[3:6]) + sum(calcMtx[12:15]) K[2,0] = sum(calcMtx[6:9]) + sum(calcMtx[15:18]) K[0,1] = calcMtx[0]+calcMtx[3]+calcMtx[6]+calcMtx[9]+calcMtx[12]+calcMtx[15] K[1,1] = calcMtx[1]+calcMtx[4]+calcMtx[7]+calcMtx[10]+calcMtx[13]+calcMtx[16] K[2,1] = calcMtx[2]+calcMtx[5]+calcMtx[8]+calcMtx[11]+calcMtx[14]+calcMtx[17] K[0,2] = calcMtx[0]+calcMtx[3]+calcMtx[8]+calcMtx[10]+calcMtx[14]+calcMtx[16] K[1,2] = calcMtx[1]+calcMtx[4]+calcMtx[6]+calcMtx[11]+calcMtx[12]+calcMtx[17] K[2,2] = calcMtx[2]+calcMtx[5]+calcMtx[7]+calcMtx[9]+calcMtx[13]+calcMtx[15] K[0,3] = calcMtx[0]+calcMtx[5]+calcMtx[7]+calcMtx[11]+calcMtx[12]+calcMtx[16] K[1,3] = calcMtx[1]+calcMtx[3]+calcMtx[8]+calcMtx[9]+calcMtx[13]+calcMtx[17] K[2,3] = calcMtx[2]+calcMtx[4]+calcMtx[6]+calcMtx[10]+calcMtx[14]+calcMtx[15] K[0,4] = calcMtx[0]+calcMtx[4]+calcMtx[8]+calcMtx[11]+calcMtx[13]+calcMtx[15] K[1,4] = calcMtx[1]+calcMtx[5]+calcMtx[6]+calcMtx[9]+calcMtx[14]+calcMtx[16] K[2,4] = calcMtx[2]+calcMtx[3]+calcMtx[7]+calcMtx[10]+calcMtx[12]+calcMtx[17] Q = zeros(k) for i in range(k): Q[i] = sum(K[:,i]**2)/r S = Q - CT Se = ST - sum(S) # error of S dofLevel = m - 1 # degree of freedom dofSum = n - 1 dofErr = dofSum - dofLevel * k sms = S / dofLevel # sum of mean square errSms = Se / dofErr F0 = sms / errSms optLevel = K.argmin(0)+1 resMtx = {'factors':['A', 'B', 'C', 'D', 'E', 'Error', 'Sum'], 'S':['%10.5f'%ii for ii in S], 'Se':'%10.5f'%Se, 'ST':'%10.5f'%ST,\\ 'dofLevel':dofLevel, 'dofErr':dofErr, 'dofSum':dofSum, 'sms':['%10.5f'%ii for ii in sms], 'errSms':'%10.5f'%errSms, 'F0':['%10.5f'%ii for ii in F0], 'optLevel':optLevel} return resMtx def Anova4(calcMtx): k = 4 # total number of factors m = 3 # total number of levels n = 9 # total number of experiments r = n/m # here add the format check T = sum(calcMtx) CT = T 2/n QT = sum(calcMtx 2) ST = QT - CT K = zeros((m ,k)) K[0,0] = calcMtx[0]+calcMtx[1]+calcMtx[2] K[1,0] = calcMtx[3]+calcMtx[4]+calcMtx[5] K[2,0] = calcMtx[6]+calcMtx[7]+calcMtx[8] K[0,1] = calcMtx[0]+calcMtx[3]+calcMtx[6] K[1,1] = calcMtx[1]+calcMtx[4]+calcMtx[7] K[2,1] = calcMtx[2]+calcMtx[5]+calcMtx[8] K[0,2] = calcMtx[0]+calcMtx[5]+calcMtx[7] K[1,2] = calcMtx[1]+calcMtx[3]+calcMtx[8] K[2,2] = calcMtx[2]+calcMtx[4]+calcMtx[6] K[0,3] = calcMtx[0]+calcMtx[4]+calcMtx[8] K[1,3] = calcMtx[1]+calcMtx[5]+calcMtx[6] K[2,3] = calcMtx[2]+calcMtx[3]+calcMtx[7] Q = zeros(k) for i in range(k): Q[i] = sum(K[:,i]**2)/r S = Q - CT Se = min(S) # error of S dofLevel = m - 1 # degree of freedom dofSum = n - 1 dofErr = dofLevel sms = S / dofLevel # sum of mean square errSms = Se / dofErr F0 = sms / errSms optLevel = K.argmin(0)+1 resMtx = {'factors':['A', 'B', 'C', 'D', 'Error', 'Sum'], 'S':['%10.5f'%ii for ii in S], 'Se':'%10.5f'%Se, 'ST':'%10.5f'%ST,\\ 'dofLevel':dofLevel, 'dofErr':dofErr, 'dofSum':dofSum, 'sms':['%10.5f'%ii for ii in sms], 'errSms':'%10.5f'%errSms, 'F0':['%10.5f'%ii for ii in F0], 'optLevel':optLevel} return resMtx def Anova3(calcMtx): k = 3 # total number of factors m = 3 # total number of levels n = 9 # total number of experiments r = n/m # here add the format check T = sum(calcMtx) CT = T 2/n QT = sum(calcMtx 2) ST = QT - CT K = zeros((m ,k)) K[0,0] = calcMtx[0]+calcMtx[1]+calcMtx[2] K[1,0] = calcMtx[3]+calcMtx[4]+calcMtx[5] K[2,0] = calcMtx[6]+calcMtx[7]+calcMtx[8] K[0,1] = calcMtx[0]+calcMtx[3]+calcMtx[6] K[1,1] = calcMtx[1]+calcMtx[4]+calcMtx[7] K[2,1] = calcMtx[2]+calcMtx[5]+calcMtx[8] K[0,2] = calcMtx[0]+calcMtx[5]+calcMtx[7] K[1,2] = calcMtx[1]+calcMtx[3]+calcMtx[8] K[2,2] = calcMtx[2]+calcMtx[4]+calcMtx[6] Q = zeros(k) for i in range(k): Q[i] = sum(K[:,i]**2)/r S = Q - CT Se = ST - sum(S) # error of S dofLevel = m - 1 # degree of freedom dofSum = n - 1 dofErr = dofSum - dofLevel * k sms = S / dofLevel # sum of mean square errSms = Se / dofErr F0 = sms / errSms optLevel = K.argmin(0)+1 resMtx = {'factors':['A', 'B', 'C', 'Error', 'Sum'], 'S':['%10.5f'%ii for ii in S], 'Se':'%10.5f'%Se, 'ST':'%10.5f'%ST,\\ 'dofLevel':dofLevel, 'dofErr':dofErr, 'dofSum':dofSum, 'sms':['%10.5f'%ii for ii in sms], 'errSms':'%10.5f'%errSms, 'F0':['%10.5f'%ii for ii in F0], 'optLevel':optLevel} return resMtx def Anova2(calcMtx): k = 2 # total number of factors m = 3 # total number of levels n = 9 # total number of experiments r = n/m # here add the format check T = sum(calcMtx) CT = T 2/n QT = sum(calcMtx 2) ST = QT - CT K = zeros((m ,k)) K[0,0] = calcMtx[0]+calcMtx[1]+calcMtx[2] K[1,0] = calcMtx[3]+calcMtx[4]+calcMtx[5] K[2,0] = calcMtx[6]+calcMtx[7]+calcMtx[8] K[0,1] = calcMtx[0]+calcMtx[3]+calcMtx[6] K[1,1] = calcMtx[1]+calcMtx[4]+calcMtx[7] K[2,1] = calcMtx[2]+calcMtx[5]+calcMtx[8] Q = zeros(k) for i in range(k): Q[i] = sum(K[:,i]**2)/r S = Q - CT Se = ST - sum(S) # error of S dofLevel = m - 1 # degree of freedom dofSum = n - 1 dofErr = dofSum - dofLevel * k sms = S / dofLevel # sum of mean square errSms = Se / dofErr F0 = sms / errSms optLevel = K.argmin(0)+1 resMtx = {'factors':['A', 'B', 'Error', 'Sum'], 'S':['%10.5f'%ii for ii in S], 'Se':'%10.5f'%Se, 'ST':'%10.5f'%ST,\\ 'dofLevel':dofLevel, 'dofErr':dofErr, 'dofSum':dofSum, 'sms':['%10.5f'%ii for ii in sms], 'errSms':'%10.5f'%errSms, 'F0':['%10.5f'%ii for ii in F0], 'optLevel':optLevel} return resMtx def F0_evaluate(input_array, factor_number): #F0数组显著性判断函数 #print input_array if factor_number==5: F_005 = 4.74 F_001 = 9.55 elif factor_number==2: F_005 = 6.94 F_001 = 18 else: F_005 = 19 F_001 = 99 eval_res = [] for theValue in input_array: theNumber = float(theValue) if theNumber>F_001: eval_res.append('* ') elif theNumber<F_005: eval_res.append('-') else: eval_res.append(' ') return eval_res def solve_7(): tStr = txt_sch.get('1.0',END) schemeMtx = transpose(fromstring(tStr,'d',-1,' ').reshape(3,-1)) tStr = txt_expRes.get('1.0',END) calcResMtx = fromstring(tStr,'d',-1,' ') txt_optRes.delete(0, END) txt_optRes.insert(0, Anova7(schemeMtx, calcResMtx)[0]) txt_optSch.delete(0, END) txt_optSch.insert(0, Anova7(schemeMtx, calcResMtx)[1]) def solve_2345(): selected_item = chkb1.get()+chkb2.get()+chkb3.get()+chkb4.get()+chkb5.get() if selected_item == 5: calcResFile = open('data/expRes5.txt','r') calcResMtx = rwm.read(calcResFile) calcResFile.close() theRes = Anova5(calcResMtx) tt = '\\t'+theRes['factors'][0]+'\\t'+theRes['S'][0]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][0]+'\\t'+theRes['F0'][0]+'\\t'+F0_evaluate(theRes['F0'],5)[0]+'\\n' \\ +'\\t'+theRes['factors'][1]+'\\t'+theRes['S'][1]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][1]+'\\t'+theRes['F0'][1]+'\\t'+F0_evaluate(theRes['F0'],5)[1]+'\\n' \\ +'\\t'+theRes['factors'][2]+'\\t'+theRes['S'][2]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][2]+'\\t'+theRes['F0'][2]+'\\t'+F0_evaluate(theRes['F0'],5)[2]+'\\n' \\ +'\\t'+theRes['factors'][3]+'\\t'+theRes['S'][3]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][3]+'\\t'+theRes['F0'][3]+'\\t'+F0_evaluate(theRes['F0'],5)[3]+'\\n' \\ +'\\t'+theRes['factors'][4]+'\\t'+theRes['S'][4]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][4]+'\\t'+theRes['F0'][4]+'\\t'+F0_evaluate(theRes['F0'],5)[4]+'\\n' \\ +'\\t'+theRes['factors'][5]+'\\t'+theRes['Se']+'\\t'+str(theRes['dofErr'])+'\\t' +theRes['errSms']+'\\n' \\ +'\\t'+theRes['factors'][6]+'\\t'+theRes['ST']+'\\t'+str(theRes['dofSum']) f3_res.delete('1.0', END) f3_res.insert('1.0', tt) txt_optLevel.delete(0, END) txt_optLevel.insert(0, theRes['optLevel']) elif selected_item == 4: calcResFile = open('data/expRes4.txt','r') calcResMtx = rwm.read(calcResFile) calcResFile.close() theRes = Anova4(calcResMtx) tt = '\\t'+theRes['factors'][0]+'\\t'+theRes['S'][0]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][0]+'\\t'+theRes['F0'][0]+'\\t'+F0_evaluate(theRes['F0'],4)[0]+'\\n' \\ +'\\t'+theRes['factors'][1]+'\\t'+theRes['S'][1]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][1]+'\\t'+theRes['F0'][1]+'\\t'+F0_evaluate(theRes['F0'],4)[1]+'\\n' \\ +'\\t'+theRes['factors'][2]+'\\t'+theRes['S'][2]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][2]+'\\t'+theRes['F0'][2]+'\\t'+F0_evaluate(theRes['F0'],4)[2]+'\\n' \\ +'\\t'+theRes['factors'][3]+'\\t'+theRes['S'][3]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][3]+'\\t'+theRes['F0'][3]+'\\t'+F0_evaluate(theRes['F0'],4)[3]+'\\n' \\ +'\\t'+theRes['factors'][4]+'\\t'+theRes['Se']+'\\t'+str(theRes['dofErr'])+'\\t' +theRes['errSms']+'\\n' \\ +'\\t'+theRes['factors'][5]+'\\t'+theRes['ST']+'\\t'+str(theRes['dofSum']) f3_res.delete('1.0', END) f3_res.insert('1.0', tt) txt_optLevel.delete(0, END) txt_optLevel.insert(0, theRes['optLevel']) elif selected_item == 3: calcResFile = open('data/expRes3.txt','r') calcResMtx = rwm.read(calcResFile) calcResFile.close() theRes = Anova3(calcResMtx) tt = '\\t'+theRes['factors'][0]+'\\t'+theRes['S'][0]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][0]+'\\t'+theRes['F0'][0]+'\\t'+F0_evaluate(theRes['F0'],3)[0]+'\\n' \\ +'\\t'+theRes['factors'][1]+'\\t'+theRes['S'][1]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][1]+'\\t'+theRes['F0'][1]+'\\t'+F0_evaluate(theRes['F0'],3)[1]+'\\n' \\ +'\\t'+theRes['factors'][2]+'\\t'+theRes['S'][2]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][2]+'\\t'+theRes['F0'][2]+'\\t'+F0_evaluate(theRes['F0'],3)[2]+'\\n' \\ +'\\t'+theRes['factors'][3]+'\\t'+theRes['Se']+'\\t'+str(theRes['dofErr'])+'\\t' +theRes['errSms']+'\\n' \\ +'\\t'+theRes['factors'][4]+'\\t'+theRes['ST']+'\\t'+str(theRes['dofSum']) f3_res.delete('1.0', END) f3_res.insert('1.0', tt) txt_optLevel.delete(0, END) txt_optLevel.insert(0, theRes['optLevel']) elif selected_item == 2: calcResFile = open('data/expRes2.txt','r') calcResMtx = rwm.read(calcResFile) calcResFile.close() theRes = Anova2(calcResMtx) tt = '\\t'+theRes['factors'][0]+'\\t'+theRes['S'][0]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][0]+'\\t'+theRes['F0'][0]+'\\t'+F0_evaluate(theRes['F0'],2)[0]+'\\n' \\ +'\\t'+theRes['factors'][1]+'\\t'+theRes['S'][1]+'\\t'+str(theRes['dofLevel'])+'\\t' \\ +theRes['sms'][1]+'\\t'+theRes['F0'][1]+'\\t'+F0_evaluate(theRes['F0'],2)[1]+'\\n' \\ +'\\t'+theRes['factors'][2]+'\\t'+theRes['Se']+'\\t'+str(theRes['dofErr'])+'\\t' +theRes['errSms']+'\\n' \\ +'\\t'+theRes['factors'][3]+'\\t'+theRes['ST']+'\\t'+str(theRes['dofSum']) f3_res.delete('1.0', END) f3_res.insert('1.0', tt) txt_optLevel.delete(0, END) txt_optLevel.insert(0, theRes['optLevel']) else: showwarning('项目选择错误','请选择至少两项') #===================== 界面设计 =========================== root = Tk() top = Frame(root) top.pack(side='top') #========定义字体============ font_chs = ('宋体', 12) font_eng = ('Times', 12) #==========标题==================== lbl_Title = Label(top, text='柴油机结构系统优化软件', font=('宋体', 16)).pack(side='top', padx=15, pady=10, ipadx=10, fill=X) #=============第1部分=============== f1 = LabelFrame(top, text='柴油机总体参数', font=font_chs) f1_1 = Frame(f1, padx=10) Label(f1_1, text='功率：', font=font_chs).pack(side='left') txt_power = Entry(f1_1, font=font_eng) txt_power.pack(side='left') f1_1.pack(side='left') f1_2 = Frame(f1, padx=10) Label(f1_2, text='气缸数：', font=font_chs).pack(side='left') txt_cyNo = Entry(f1_2, font=font_eng) txt_cyNo.pack(side='left') f1_2.pack(side='left') f1_3 = Frame(f1, padx=10) Label(f1_3, text='冲程数：', font=font_chs).pack(side='left') txt_strikeNo = Entry(f1_3, font=font_eng) txt_strikeNo.pack(side='left') f1_3.pack(side='left') f1.pack(side='top', padx=15, pady=10, ipadx=10, ipady=10, fill=X) #=============第2部分=============== f2 = LabelFrame(top, text='柴油机本体结构参数评价及优化', font=font_chs) f2_1 = Frame(f2, pady = 10) f2_1_1 = Frame(f2_1, padx=1) Label(f2_1_1, text='方案：', font=font_chs).pack(side='left') txt_sch = Text(f2_1_1, font=font_eng, height=3, width=40) txt_sch.pack(side='left') f2_1_1 .pack(side='left') f2_1_2 = Frame(f2_1, padx=10) Label(f2_1_2, text='试验结果：', font=font_chs).pack(side='left') txt_expRes = Text(f2_1_2, font=font_eng, height=3, width=10) txt_expRes.pack(side='left') f2_1_2 .pack(side='left') Button(f2_1, text='参数分析', font=font_chs, command=solve_7).pack(side='left',padx=40) f2_1.pack(side='top') f2_2 = Frame(f2, padx=1) f2_2_1 = Frame(f2_2, padx=10) Label(f2_2_1, text='评价结果：', font=font_chs).pack(side='left') txt_optRes = Entry(f2_2_1, font=font_eng, bg='grey', width=32) txt_optRes.pack(side='left',anchor='c') f2_2_1.pack(side='left') f2_2_2 = Frame(f2_2) Label(f2_2_2, text='优选方案：', font=font_chs).pack(side='left') txt_optSch = Entry(f2_2_2, font=font_eng, bg='grey', width=32) txt_optSch.pack(side='left',anchor='c') f2_2_2.pack(side='left') f2_2.pack(side='top',anchor='w') f2.pack(side='top', padx=15, pady=5, ipadx=1, ipady=10, fill=X) #=============第3部分=============== f3 = LabelFrame(top, text='柴油机系统布置优化', font=font_chs) f3_top = Frame(f3) f3_1 = Frame(f3_top, padx=10) chkb1 = IntVar(); chkb2 = IntVar(); chkb3 = IntVar(); chkb4 = IntVar(); chkb5 = IntVar() chb_inlet = Checkbutton(f3_1, text='进排气系', font=font_chs, variable=chkb1) chb_inlet.pack(side='top', anchor='w') chb_lub = Checkbutton(f3_1, text='润滑系', font=font_chs, variable=chkb2) chb_lub.pack(side='top', anchor='w') chb_cool = Checkbutton(f3_1, text='冷却系', font=font_chs, variable=chkb3) chb_cool.pack(side='top', anchor='w') chb_start = Checkbutton(f3_1, text='起动系', font=font_chs, variable=chkb4) chb_start.pack(side='top', anchor='w') chb_turbo = Checkbutton(f3_1, text='增压器中冷装置', font=font_chs, variable=chkb5) chb_turbo.pack(side='top', anchor='w') f3_1.pack(side='left') f3_2 = Frame(f3_top, padx=10) Button(f3_2, text='求解', font=font_chs, command=solve_2345).pack(side='left') f3_2.pack(side='left') f3_3 = Frame(f3_top, padx=10) f3_3_1 = Frame(f3_3) Label(f3_3_1, text='方差来源', font=font_chs).pack(side='left', anchor='w') Label(f3_3_1, text='偏差平方和', font=font_chs).pack(side='left', padx=8) Label(f3_3_1, text='自由度', font=font_chs).pack(side='left', padx=8) Label(f3_3_1, text='方差', font=font_chs).pack(side='left', padx=25) Label(f3_3_1, text='F0值', font=font_chs).pack(side='left', padx=20) Label(f3_3_1, text='显著性', font=font_chs).pack(side='left', anchor='e', padx=4) f3_3_1.pack(side='top', fill=X, expand=1) f3_res = Text(f3_3, font=font_eng, bg='grey', height=7, width=65, tabs=('1c',CENTER,\\ '3c',NUMERIC,'5.5c',NUMERIC,'7c',NUMERIC,'9.2c',NUMERIC,'11.5c',CENTER)) f3_res.pack(side='top') f3_3.pack(side='left') f3_top.pack(side='top') f3_bottom = Frame(f3, pady =10) Label(f3_bottom, text='优水平：', font=font_chs).pack(side='left') txt_optLevel = Entry(f3_bottom, font=font_eng, bg='grey', width=32) txt_optLevel.pack(side='left',anchor='c') f3_bottom.pack(side='top', anchor='e', ipadx=90) f3.pack(side='top', padx=15, pady=10, ipadx=10, ipady=10, fill=X) root.title('柴油机结构系统优化软件') root.mainloop()","tags":"Tech","url":"http://leetschau.github.io/chai-you-ji-zong-ti-fen-xi-xi-tong-kai-fa-shou-ji.html","loc":"http://leetschau.github.io/chai-you-ji-zong-ti-fen-xi-xi-tong-kai-fa-shou-ji.html"},{"title":"由chm文件生成txt文件","text":"将chm文件转为htm文件 ChmDecoder（正式名称为CHM Encoder），文件位置：E:\\Software\\chmdecoder\\chmdecoder.exe 将htm文件转为txt文件 TextForever，文件位置：E:\\Software\\TextForever168\\TextForever.exe 【Html->Text】标签页中点击【典型中文HTML】，不勾选【输出链接文字】 合并txt文件 TextForever【文件合并】标签页中，根据情况设置后【开始合并】。","tags":"Tech","url":"http://leetschau.github.io/you-chmwen-jian-sheng-cheng-txtwen-jian.html","loc":"http://leetschau.github.io/you-chmwen-jian-sheng-cheng-txtwen-jian.html"},{"title":"利用Python计算日期平移","text":"数码相机的日期如果不准，推算出正确的日期比较麻烦，下面的python代码可以解决这个问题，例如某张标记日期为2009年9月11日的照片，实际拍摄时间是2010年2月17日，那么标记时间是2009年7月1日的照片的实际拍摄时间是： from datetime import date delta = date(2010,2,17) - date(2009,9,11) date(2009,7,1) + delta","tags":"Tech","url":"http://leetschau.github.io/li-yong-pythonji-suan-ri-qi-ping-yi.html","loc":"http://leetschau.github.io/li-yong-pythonji-suan-ri-qi-ping-yi.html"},{"title":"Python脚本文件中使用中文","text":"Python做图形用户界面（GUI）开发时经常要在界面上显示中文，需要做如下处理（详见[1]和[2]2.3节）： 在py文件的首行写上：# - - coding:utf-8 - - 保存py文件时要存为utf-8格式文件。 [1] Python2.6 Documentation: The Python Language Reference: 2.1.4 Encoding declarations [2] 孙广磊，征服Python—语言基础与典型应用，北京：人民邮电出版社，2007","tags":"Tech","url":"http://leetschau.github.io/pythonjiao-ben-wen-jian-zhong-shi-yong-zhong-wen.html","loc":"http://leetschau.github.io/pythonjiao-ben-wen-jian-zhong-shi-yong-zhong-wen.html"},{"title":"用Ultraedit调试tk程序","text":"tk没有自己的编译环境，Ultraedit中仅3步就可以打造一个tk调试环境： 1. 为UE添加tcl/tk语法高亮支持：从UE的网站上下载tcl/tk的wordfile； 2. 添加编译命令到菜单中：UE主菜单【高级->工具配置】出现\"工具配置窗口： 在【命令】标签页中： 点击按钮\"插入\" 【菜单项目】：运行tk程序 【命令行】：wish85 %n%e（%n表示当前文件名（不含扩展名），%e表示当前文件名的扩展名） 【工作目录】：%p（当前文件的路径） 在【输出】标签页中： 选择【Output to List Box】（运行结果显示在输出窗口中，此窗口在【窗口->输出窗口】或者【视图->视图/列表->输出窗口】处设置开闭，其他几项是输出到指定的文件中）和【Capture Output】（否则输出不会被捕捉到） 为菜单项添加快捷键：【高级->配置->键盘映射】中找到【高级－用户工具1】，在【按下新的键】中设置自己喜欢的热键，例如F6。 参考博文《如何用UltraEdit编译和运行java程序》。 注：UEv16中，标签页也是可浮动的，感觉不方便，在【配置->Application Layout->File Tabs->Operation】中取消勾选【Dockable Tabs】。","tags":"Tech","url":"http://leetschau.github.io/yong-ultraeditdiao-shi-tkcheng-xu.html","loc":"http://leetschau.github.io/yong-ultraeditdiao-shi-tkcheng-xu.html"},{"title":"动力学计算提纲v4","text":"要比较的输出量 活塞裙部径向接触力；活塞裙部轴向接触力；气缸套累积摩擦功；反推力边间隙功率； 预紧力对各输出量的影响分析 原始数据：10′锥角下的4个计算方案S5～S8，每个输出量对应一张图，该图由4条曲线组成，对应S5～S8； 气缸套锥角对各输出量的影响分析 原始数据：预紧力为520kN的4个方案S4，S8，S12，S16，每个输出量对应一张图，该图由4条曲线组成，对应S4，S8，S12，S16；","tags":"Tech","url":"http://leetschau.github.io/dong-li-xue-ji-suan-ti-gang-v4.html","loc":"http://leetschau.github.io/dong-li-xue-ji-suan-ti-gang-v4.html"},{"title":"Word 2007技巧3则","text":"晚饭后无事，拿来顾经宇的《就这样享用WORD》，其中第六篇有几处技巧很好，总结如下： * 使正文文字出现在目录中：（p285）【插入->文档部件->域->TC】，填上【文字项】和【大纲级别】，插入目录时勾选【目录项域】； * 删除空行：（p303）【替换】对话框中，【查找内容】设为\"&#94;p&#94;p\"，【替换为】设为\"&#94;p\"，勾选【忽略空格】，几轮之后就可以达到目的； * 用\"替换\"功能提高书写效率：（p303）例如文章中有一个变量名为\"Drx\"，首先需要写Drx，然后将第一个\"D\"改为Symbol字体，然后将x改为下标，然后选中三个字母改为斜体，如果这个变量名出现多次，写起来非常麻烦，解决方法是：在出现\"Drx\"的地方都写为Drx，文章写完后，写一个\"Drx\"然后剪切，打开【替换】对话框，【查找内容】设为Drx，【替换为】设为【&#94;c】（即【特殊格式->\"剪贴板\"内容】），然后全部替换。以前解决这个问题的方法是采用Office剪贴板，但感觉不如这个方法好。 另：如果记得命令，手工插入域更方便，插入域的快捷键是Ctrl+F9，单独运行一个域的快捷键是Shift+F9，运行所有域是Alt+F9。","tags":"Tech","url":"http://leetschau.github.io/word-2007ji-qiao-3ze.html","loc":"http://leetschau.github.io/word-2007ji-qiao-3ze.html"},{"title":"vim使用笔记","text":"基本文件操作 打开文件：:e 保存文件：:w 保存并退出：:wq或者:x 另存为：:sav 关闭文件（但不退出vim）：:bd（参见笔记 buffer-related operations in vim ） 退出vim：:q 打开光标处的文件: gf 参考笔记 Vim的文件浏览 界面与显示 修改界面配色风格：:colo evening （colo是colorscheme的简写，evening风格在gVim上比较好，ron风格在vim console上效果好） 是否折行：:set wrap/nowrap 开/关行号：:set nu/:set nonu （number和nonumber的简写） 开/关语法高亮：:syntax on/off 显示/隐藏制表符（tab）和结尾符号：:set list/nolist，tab显示为&#94;I，结尾符显示为$，空格仍显示为空； 刷新屏幕：Ctrl+L vim console的界面提示语句中如果有中文，则Windows命令行窗口的代码页必须设置为GBK（cp936），否则vim console的中文提示信息会变为乱码。 关闭搜索结果的高亮显示：:noh（nohlsearch的简写）； gvim相关选项 隐藏所有界面组件：:set go= （go是guioptions的简写） 显示水平滚动条：:set go+=b 显示垂直滚动条：:set go+=r 显示菜单栏：:set go+=m 显示工具栏：:set go+=T 更多guioptions相关定制选项见:h guioptions 定制界面字体/字号 gVim (gvim.exe) 界面菜单方式：在字体/字号菜单中选择：:set guifont=* 命令方式： :set guifont=Consolas:h13 查询当前使用的字体/字号：:set guifont vim console ( vim.exe on Windows or vi on Linux) 由于 vim console使用操作系统的命令行窗口，可以通过修改命令行窗口（ConEmu on Windows or Terminator on Linux）属性中字体和字号的方法达到改变的目的，但由于Windows的GBK代码页中只提供点阵和新宋体两种字体，都不好看，当平常简单的文本查看和编辑工具的话，建议使用gVim，如果一定要用vim console，可以用ConEmu之类的命令行增强工具改变字体； 打开（修改）vim启动配置文件 以下方法可以用全局书签来代替（2013-8-13更新） :e \\(MYVIMRC（或\\) myvimrc）或者主菜单【编辑->启动设定】 （用于gVim） :so % 修改完_vimrc后无需重启vim即可让新_vimrc生效，_vimrc里有函数时此方法无效 以上只对gVim有效，在Ubuntu上全局配置文件为/etc/vim/vimrc，但最好不要改它，因为即使改了之后要生效也得重启系统，而且影响其他用户的配置，比较好的方法是在用户$HOME下新建一个.vimrc文件，写上用户自己定制的特性，修改.vimrc后即刻生效。 光标移动 参考笔记\" Cursor move in vi\"； 文档查找（相当于windows下的ctrl+f） 行内查找 f/F：向前查找/向后查找； t/T：跳转到查找目标的前一个字符（主要与d,c等编辑指令配合使用）； 分号（;）：重复最近一次查找；逗号（,）：撤销最后一次查找； 跨行查找 /searched string match case: option 1：/searched string \\c ；option 2：using \"set ic/noic\" command to switch between ignore/match case(ic means igore case); match whole word only: \\<匹配词首，>匹配词尾，所以全字匹配就是\\<searched string>; search & replace word under the cursor: 光标置于要查找的单词上，\"*\"标出所有相同单词，ciw替换单词（参考 Search and replace the word under the cursor ） incremental search: set incsearch 文本替换 将光标下的单词替换为剪贴板里的单词：viwp，其中viw是选中一个词，p是粘贴； :%s/four/4/g，\"%\"这个范围意为对所有行执行该命令，\"g\"标志则指示替换操作将一行中所有出现的目标字串都进行替换； 不过如果你的文件里面有\"thirtyfour\"这样的词, 结果就不是你想要的了, 它将会被替换为\"thirty4\". 要避免这种例外. 可以在要替换的目标字前面加上\"\\<\", 它匹配一个word的起始位置：:%s/\\<four/4/g； 但是碰到\"fourty\"这样的词还是会弄错. \">\"可以用来指示一个word的结束位置：:%s/\\<four>/4/g； 如果你是在写程序，你可能只想替换那些出现在注释中的\"four\"，代码中的留下，这可有点为难，\"c\"标志可以让每个目标被替换之前询问你的意见：:%s/\\<four>/4/gc； 文本查找和替换的更多功能见笔记\"用vim注释多行代码\"和http://vim.wikia.com/wiki/Search_and_replace。 Copy/Paste Vim中的y,d,p（拷贝yank，剪切，粘贴）放在了自己独有的一个剪贴板上，与windows的公用剪贴板不同，如果要将拷贝内容放入windows剪贴板，在拷贝命令前加\"+（\"*表示VIM自己的剪贴板），例如\"+yl00j就是将100行文本拷贝到windows剪贴板，vim剪贴板的使用方法见笔记 Vim的剪贴板操作 。 若想y, p的时候直接放在windows剪贴板上，只要在_vimrc里加一句：set clipboard+=unnamed（将无名寄存器与windows的+寄存器连接）就可以了（只在Windows上有效）。 拷贝/剪切一整行：yy/dd 光标前/后粘贴文本：P/p 从外部粘贴文本时防止缩进递增 用 set noai 关闭自动缩进，粘贴，然后 set ai 复原； 或者粘贴之后，选中要重排的段落然后用等号（\"=\"）自动设置缩进； VIM的操作方式 动作命令＋位移，例如拷贝光标下的一个字符：yl（l表示向右移动一个字符）；拷贝从光标开始的100行文本：y100j。其中y代表拷贝，j是向下移动一行，100j就是向下移动100行。 窗口（视图）和标签页的更多说明见笔记\" VIM的窗口和标签页操作 \"； * 与多个buffer相关的操作见\" buffer-related operations in vim \"。 命令的自动补全： 输入前面的字符后按tab； 显示/隐藏非ASCII码字符：:set list/nolist Visual模式：类似于windows的\"先选择再操作\"的方式，先hjkl或者其他光标移动键或者鼠标选择一个范围，再执行一个命令，如删除d，拷贝y等；v进入普通选择模式，V进入行选择模式，Ctrl+Q或者Ctrl+V进入列选择模式； 列模式：见\" 用vim注释多行代码 \"； 改变备份文件和swp文件的目录 vim打开一个文件（例如file.txt）后会生成一个file.txt.swap文件，非正常退出VIM（没有保存文件）时可以用这个文件恢复，修改前的文件被另存为file.txt~，这两个文件都很有用，但默认是放在file.txt所在目录下，看上去比较杂乱，下面的指令将这两个文件放在temp文件夹下以解决这个问题： set directory = C : \\ Windows \\ Temp set backupdir = C : \\ Windows \\ Temp 可以用set nobakupfile和set noswapfile不让这两个文件生成，但不建议这样做。 转换目标文件的行结束符格式 确定采用 dos 还是 unix 格式的行结束符。 查询：:set ff? （ff是fileformat的简写） 改变dos格式文件为unix格式：:set ff=unix （shell下运行DOS格式文件会出现\"/bin/sh&#94;M: bad interpreter...\"错误） 设置新建文件的 dos/unix 格式 设置默认格式为 unix：在 .vimrc 中 加入 set ffs=unix,dos 设置默认格式为 dos：在 .vimrc 中 加入 set ffs=dos,unix 制表符（tab）相关的配置 包括下面4个参数： set autoindent \"设置自动缩进，缩写为ai set tabstop=4 \" tab的宽度是4个空格 ，缩写为 ts set shiftwidth = 4 \" 使用>>时缩进的空格数，缩写为sw，>>是在标准状态下缩进，而用tab需要来回在标准和insert模式间切换； set expandtab \" tab转换为空格 ，缩写为 et 将缩进设为4个空格是许多编程语言（如Java）的习惯。双引号（\"）是vim脚本中的注释（comment）符号 将行首缩进为tab的文本内容替换为空格的命令（即untabify indent）是\":retab\"（需要先set expandtab）； Normal模式下的常用编辑指令 光标前/后插入：i/a 光标所在行的行首/尾插入：I/A 光标的上/下一行插入：O/o 删除单个字符：x 替换单个字符：r（替换后仍然是normal模式，而不像s进入插入模式） 进入覆盖模式：R 删除光标所在字符并进入插入模式：s 参考 A Tale of Two (Vim) Commands: \"s\" and \"c\" 删除光标所在行并进入插入模式：S 进入字符选择（visual）模式：v 进入行选择模式：V 使用书签：参考笔记\" Note about marks in vi \"； 自动缩进(auto indent)：= 已验证对Java, C, XML文件有效，不同于\"自动格式化 auto format\"，后者可以将在同一行上的代码重排到多行并缩进； 缩进与反缩进（indent/unindent）：>、<（详见:help shift-left-right） 重复上一次操作：.（参考http://www.viemu.com/a-why-vi-vim.html） 选中光标所在单词：* 移动光标到行首/尾：0/$ 移动光标到匹配括号处：% 大小写变换：将 范围内的文字转换为大/小写，gU/u/~ ，例如:gUw将光标开始处的一个单词转换为大写，gu$将光标开始到行尾文字转换为小写，\"~\"表示大小写切换，例如g~w表示将光标开始处的单词大小写对换；单个的~表示切换光标下字母大小写； c键 删除指定范围（如一个词，一句话，一段）并进入插入模式，例如ciw将删除光标所在词并进入插入模式，其中i表示inner，即不包括单词旁边的空格、括号、引号等，w表示范围是word，cas将删除整句(s: sentence)以及周围的分隔符（a表示含分隔符），还可以简写为cw，详见 The Power and Precision of Vim's Text Objects: Efficient, Elegant, Awesome 。 c键后面还可以跟光标移动指令，例如cft删除的范围是从光标到t字符出现的地方，c2w删除光标开始处的两个word。 C键删除从光标到行尾并进入插入状态。 如果使用v键进入visual模式选中文本，则c键与s键的功能一样，都是删掉选中的文本然后进入插入模式。 路径相关操作 设置vim的启动路径：配置文件_vimrc里加上\"cd <当前路径>\"，例如：cd e:\\MyDoc\\MobileBook； 显示当前路径：\":pwd\" 改变当前路径：\":lcd <目标路径>\" 与Shell交互 执行系统命令：:! ，例如列出当前文件夹下文件：:!ls；又如在vim中运行\"ruby <当前文件>\"写为：\":!ruby %\"，参见笔记 Use VIM as lightweight IDE ； 将系统命令的输出插入到当前buffer中：!! 临时进入shell: :sh，返回vi: C-d Autocomplete C-n, or C-p if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/vimshi-yong-bi-ji.html","loc":"http://leetschau.github.io/vimshi-yong-bi-ji.html"},{"title":"提高康佳手机电子书的打开速度","text":"型号：康佳D266 方法：通过实践发现，康佳 手机 打开某些txt文件的速度很快，有些却很慢，分别用UltraEdit打开这两种txt文件，【视图->显示空格/制表符】，可以看到慢的一种是ASCII格式，每一行末都有一个\"$\"符号（表示换行），快的一种是Unicode格式，换行符类似于小写的q（但竖线变成了两条），将ANSI转换为Unicode格式的方法是【文件->转换->ASCII转Unicode】（不是【文件->转换->ASCII转UTF-8（Unicode编辑）】，这样生成的是乱码）。","tags":"Tech","url":"http://leetschau.github.io/ti-gao-kang-jia-shou-ji-dian-zi-shu-de-da-kai-su-du.html","loc":"http://leetschau.github.io/ti-gao-kang-jia-shou-ji-dian-zi-shu-de-da-kai-su-du.html"},{"title":"自制旅游DV电影的流程","text":"使用的软件 CyberLink DVD Suite v7.0 （讯连科技出品）； Canopus Procoder 2 ； UltraISO ； DAEMON （虚拟光驱）； Nero7.0 ； 制作方法 导入和筛选素材 ：首先运行 CyberLink DVD Suite 中的威力导演（ PowerDirector ），将 DV 拍摄的原始素材（威力导演可以识别 mod 格式的视频文件）加入到媒体库（快捷键 F3 ）中，对素材进行筛选，不合格的右键从媒体库中删除，然后选中所有可用的片段，右键【添加到视频轨】，这样选中的片段会按先后顺序出现在软件下方面板的主视频轨中； 剪辑：在主视频轨中选中需要剪辑的片段，右键【编辑视频 -> 剪辑】，可设置视频的起始时间、持续时间等； 添加转场效果 ：点击左上侧的【转场室】（快捷键 F7 ），将需要的转场效果拖到主视频轨中，如果片段很多，可以点击转场效果下面的【对所有对象应用随机转场效果】按钮，一次性添加转场效果； 添加混音效果 （快捷键 F7 ），先记住原始音量的位置，在视频轨中将游标放在起始处，将视频音量标签拖到最低处， 在视频轨中将游标放在合适的某个地方， 将视频音量标签拖回到正常音量的位置，这样就做好了一个音量渐大的效果； 添加背景音乐 ：在媒体室（F3）导入一段音乐，右键【添加到声轨】，剪辑一下即可； 添加其他效果：点击左上侧的【标题室】、【画外音录制室】、【章节室】等，可以为视频添加标题、混音、画外音、章节等效果； 生成完整的初级视频：点击上方的【制作】，创建一个完整的（包含各片段及转场效果） AVI 格式的视频文件 produce.avi ； 添加片头、片尾：重新打开威力导演，导入 produce.avi ，添加到主视频轨，在主视频轨中选中这个片段，然后点击左下侧的【 Magic Style 】，选中一个风格，先【预览】，再【应用】； 生成最终的影片：与第 5 步的方法相同，生成最终视频 final.avi ； 制作一个 DVD 硬盘镜像：启动 ProCoder2 ，原始文件选 final.avi ，目标文件中【添加】一个【 CD/DVD->DVD->MPEG2-DVD-PAL(VOB) 】（可发现原始文件和目标文件的视频帧大小都是 720*576 ），设置好输出路径，然后【转换】， ProCoder2 会在指定的路径下生成一个文件夹 aa ，里面的内容的格式与 DVD 光盘的要求一致； 刻 DVD 盘：启动 UltraISO ，将 aa 中的内容制作成 aa.iso 文件； DVD 验证：用虚拟光驱 DAEMON 加载 aa.iso ，用 CyberLink DVD Suite 中的 PowerDVD 或者暴风影音的【 Open DVD 】播放这个文件，验证 DVD 盘； 刻盘：启动 nero7 ，用光盘对拷的方法刻盘。 注 1 ：第 5 步之所以要生成一个初级视频，是因为如果将 Magic Style 直接应用在第 4 步生成的视频（多个 DV 片段和转场效果组成的序列）上，会丢失转场效果，且每个 DV 片段播放两遍，原因不清楚； 注 2 ： 上面的步骤为了保险起见，首先输出为 avi ，在用 procoder2 转为 dvd ，实际上威力导演可以在第 6 步完成后将视频直接刻盘； 注 3 ：如果不需要制作 DVD 盘，可以让 ProCoder2 直接输出 rmvb 格式的视频文件，体积相对较小；","tags":"Tech","url":"http://leetschau.github.io/zi-zhi-lu-you-dvdian-ying-de-liu-cheng.html","loc":"http://leetschau.github.io/zi-zhi-lu-you-dvdian-ying-de-liu-cheng.html"},{"title":"使用Elsevier的Latex模板投稿","text":"Elsevier的Latex模板有专用的类定义文件：elsart.cls和elsart5p.cls，还有模板文件instructions-num.tex和写作指导文件template-num.tex，首先下载这些文件，在template-num.tex的基础上加入自己的内容就行了，排版效果比word强的多，且比Word模板更容易使用。要注意的是： 1. 用英文投稿时，如果使用的包中有\\usepackage[english,frence]{babel}，将frence之类的语言去掉，或者整个注释掉这一行，以防止\"abastract,reference\"之类的词变成法文或者其他什么文； 2. 插图的处理：将图片做成eps文件，然后用\\includegraphics调入，由于PDFLatex不能处理eps文件，因此首先用Latex生成dvi文件（可用YAP察看），如果需要生成pdf文件，可用dvi2pdf转成pdf文件（这些操作都在ChinaTex安装包->WinEdt的Accessories目录下）。例如： \\begin{figure} \\centering \\scalebox{0.9}{\\includegraphics{fig/fig2.eps}} \\caption{the center cracked tension specimen and its one-quarter finite element model} \\label{fig 2} \\end{figure} 其他参见上述说明文档，以及陈志杰：LATEX入门与提高（第二版），高等教育出版社，2006 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/shi-yong-elsevierde-latexmo-ban-tou-gao.html","loc":"http://leetschau.github.io/shi-yong-elsevierde-latexmo-ban-tou-gao.html"},{"title":"Word中生成目录格式的VBA代码","text":"要求在页面的最右边生成一个右对齐的制表符（以控制页码的位置），制表符的前导字符是\"-\"（标题与页码之间的符号），页码统一写为\"A-5\"，然后手工输入正确的页码。 Sub makeMenu() Selection.MoveDown Unit:=wdParagraph, Count:=1 Selection.EndKey Selection.ParagraphFormat.TabStops.Add Position:=CentimetersToPoints(15.24 _ ), Alignment:=wdAlignTabRight, Leader:=wdTabLeaderDashes Selection.TypeText Text:=vbTab Selection.TypeText Text:=\"A-5\" End Sub","tags":"Tech","url":"http://leetschau.github.io/wordzhong-sheng-cheng-mu-lu-ge-shi-de-vbadai-ma.html","loc":"http://leetschau.github.io/wordzhong-sheng-cheng-mu-lu-ge-shi-de-vbadai-ma.html"},{"title":"Python常用语句","text":"Python中的字符串可以用单引号或者双引号括起来； 查询一个对象a的类型： type(a) or a.__class__ , or type(a).__name__(class name as string type) 查询矩阵的维数： shape(a) 变形，用 reshape() 或者 resize() 查询一个函数的用法， help(funcName) 文件路径的写法： e:\\\\MyDoc\\\\test.txt 查询当前系统有多少模块可用： help('modules') 查询某一个模块的信息： help(moduleName) ，有时模块名上可能需要加引号，如果报错， 可以先 help() 进入help环境后在输入模块名； 用dir函数查询模块、函数的信息：例如 dir(moduleName) 可以查询所有该模块包含的所有属性和方法； PYTHON的包使用很方便，在一个文本文件中写n个函数（名为f1、f2……）， 然后保存为moduleName.py，使用这些函数的方法是： from moduleName import f moduleName . f1 ( … ) 采用输出字符串方法调试Python代码的语句（Python 2.x）是： print ， 要输入多个变量，用逗号隔开，即 print a,b,c... 在任何使用字符串的地方都可以用格式化字符串形式，例如下面的语句是从ftp上下载指定的文件： ftp.retrbinary('RETR %s' % src_file_name, dest_file.write) 其中 retrbinary 函数的第一个参数是字符串， 这里 'RETR %s' % src_file_name 与 'RETR ' + src_file_name 是完全等价的。 关于格式字符串的详细信息可google \"python 格式化字符串\"。 获取命令行参数：使用sys模块的argv列表实现， sys.argv[0] 代表python文件本身， sys.argv[1] 代表第一个参数，依此类推，例如： $ cat getArgs . py import sys print sys . argv print 'number of args: ' , len ( sys . argv ) print sys . argv [ 1 ] print sys . argv [ 2 ] $ python getArgs . py 111 222 [ 'getArgs.py' , '111' , '222' ] number of args : 3 111 222 如果脚本在某种情况下需要退出执行，用 sys.exit() .","tags":"Tech","url":"http://leetschau.github.io/pythonchang-yong-yu-ju.html","loc":"http://leetschau.github.io/pythonchang-yong-yu-ju.html"},{"title":"Word排版笔记","text":"排版的基本原则是将内容与版式相分离，也就是将TeX排版的精神运用到WORD中，具体包括： i. 所有文本的格式采用【格式】来生成，不要手工生成； i. 在中文文档中不使用空格，一切间距用【格式】来控制； i. 不要手工输入编号，包括图和表格的序号，在引用图和表格时一定要用【交叉引用】； i. 将长文档的每章单独作为一个文件保存，这个文件中没有任何格式，所有格式在主控文档中定义； \"制表符\"就是tab，可以通过点击标尺的下边来生成，可以水平拖动以改变位置，当向下拖动时就是删除该制表符，可以用选择多行文本，统一生成一个制表符的方法对齐多行文本； 关于图、表序号： i. 选中图后插入【题注】，需要引用该图时插入【交叉引用】，如果希望\"图 1\"的两个字中间没有空格，可手工删除； i. 自动更新问题：Ctrl+A然后F9即可（【更新域】快捷键F9）。 关于主控文档和子文档 关于文档保护：【工具－保护文档】 i. 将文档设为只读（不能作任何修改），只有在密码正确的情况下才能修改内容：勾选【编辑限制】，限制类型选为【未作任何更改（只读）】，然后【启动强制保护】即可；要修改时【工具－取消文档保护】，输入密码即可； i. 只允许不知道密码的人添加批注：与上面相同，只是限制类型选为【批注】即可； i. 允许修改内容，但修改的地方必须由作者确认后才能生效：与上面相同，只是限制类型选为【修订】即可；要接受修订内容，首先要取消文档保护，然后在【审阅】工具栏上点【接受所选修订】即可； i. 文件开启密码和修改密码（不知道的话无法打开文件和修改文件）：【工具－选项－安全性】中设置；这个设置容易造成文档变成只读，无法修改，慎用！感觉【保护文档】功能比较可靠； 关于参考文献的编写，基本有四种方法： i. 将参考文献作为普通的编号项放在文末，每条参考文献手工输入，文中使用【交叉引用】来引用这些编号项，这种方法可以适应各种格式，操作也相对简单，当参考文献数量不大时（手工输入量不大，也不存在文档搜索等问题）是最好的解决方案； i. 将参考文献作为尾注放在文末，这种方法操作很繁琐（例如要该尾注格式，去掉分隔线等等），而且有一定的限制，比如同时引用多处文献可能会出问题； i. 使用EndNote软件管理参考文献（WORD2007可以使用EndNote X），这种方法最专业，只需输入参考文献的各个信息项，EndNote负责所有其他工作，参考文献数据库可以作为单独的文件保存，可以搜索已有的文献等等许多管理功能，这种方法适用于有大量参考文献进行管理； i. 使用WORD2007自带的参考文献功能，位置在【引用－引文和书目】，具备基本的文档管理功能，但参考文献的样式不能自己定制，而且自带的格式不符合现有的参考文献格式（自动序号格式，但自带\"著者－年代\"格式），因此中文论文无法使用这种方法； 加入批注时的作者名称可以在【工具－选项－用户信息】中修改； 自动生成目录功能：WORD默认将样式为【标题1】～【标题3】的文字生成目录，可以在【插入－引用－索引和目录－目录】中进行设置，例如如果将【标题4】也加入目录，可以将【显示级别】调高；每一级目录文字的字体、字号、大小等所有格式属性可以在【修改】按钮中进行更改； WORD的版本控制：【文件－版本】中可以为当前的文档保存一个版本，勾选【关闭时自动保存版本】可以在每次关闭文档后自动保存一个版本，该设置只对某一具体文件有效； i. 如何比较不同版本的区别？ 如何利用一个已有的文档制作一个模版，例如论文模版、项目报告模版等？ 关于带序号公式的排版方法 i. WORD2003中的排版方法 a. 建立一个\"公式\"格式，特点是数学公式居中对齐，自动编号，并居右对齐： 公式前、后各放置一个tab，后面是序号，也就是\"tab 公式 tab 序号\"的形式，然后选中这个段落（整行），【格式－样式与格式】，在\"所选文字的格式\"下拉框中点\"新建样式\"，在名称中输入\"我的公式\"，【确定】即可，后面再输入公式，仍然是\"tab 公式 tab 序号\"，然后将格式设置为\"我的公式\"即可； a. 公式序号的自动排序：将手写的公式序号删除，然后插入一个题注（不要先选中公式），标签名称设为【公式】，选中插入的这个题注，插入一个【书签】，【书签名】可以用中文，例如\"Pn的值\"，在需要引用这个公式的地方插入交叉引用，【引用类型】为\"书签\"，【引用内容】为\"书签文字\"即可。（用快捷键Ctrl+G可以方便地定位书签。）以后如果更改了公式的顺序，Ctrl+A然后F9即可（【更新域】快捷键F9）； i. WORD2007中的排版方法：安装MathType6.0后，会出现一个【MathType】选项卡，下面【Insert Equations】列中有一个【Right-numbered】专门用来插入带序号的公式，版式与上面word2003中的一样，但对需要引用的公式仍需手工添加书签，才能引用这些公式（交叉引用）； 自动为章节编号：方法是修改内建样式【标题n】，使它们前面带上序号。 分别给第一、二层标题加上序号，调整第二层标题的【多级符号】，将其【级别】设置为2，这样WORD就自动为下面层级的标题设置了相应的编号格式； 具体操作是：第二层标题上右键－项目符号和编号－多级符号－自定义，将【级别】选为【2】即可； 图文混排的原则：图片全部采用嵌入式，居中，下面图名的序号用题注，居中； 更改已有的一个样式并在所有应用该样式的地方生效：首先修改应用了该样式的一个实例，然后在样式上右键－【更新以匹配选择】即可。（【格式－样式与格式】可以调出样式工具栏。） WORD2007自带的公式编辑功能比较弱，比如有如下问题： i. 数学公式不是斜体，需要手工转换为斜体； i. 单行的数学公式与制表符不能同行，否则会被强制转化为行内公式，导致公式出现错误的字体（例如在分式中分子分母的字体会自动减小）； 自动生成编号或者项目符号的方法 i. 自动生成编号：输入\"1\"（或者\"1）\"、\"（1）\"，全、半角均可）后按tab； i. 自动项目符号：输入\"*\"后按空格； i. 二级编号变成一级编号：连续两次回车； i. 结束编号或者项目符号：连续回车直到编号消失；","tags":"Tech","url":"http://leetschau.github.io/wordpai-ban-bi-ji.html","loc":"http://leetschau.github.io/wordpai-ban-bi-ji.html"},{"title":"如何用MathType生成Latex方程","text":"将默认输出选项设为LaTeX：Preferences->Translators->Translation to other language->TeX--AMS-LaTeX； 在MathType中输入公式； 写好公式后选中，cut或者copy，在需要的地方paste即可； 注意： 在【参数－自定义键盘】中可以看已有的快捷键，并自己定义新的； 在MathType中输入的公式可以保存为eps文件；MathType可直接打开这种文件进行编辑； 使MathType能够接受LaTeX输入：Preferences->Workspace Preferences->勾选Allow TeX language entry from the keyboard，输入LaTeX文本后回车即可； 另： 一个不错的Latex网站： LaTeX 编辑部 ； 一个强大的latex编辑和预览工具： jaxedit ，此工具可以在左边面板编辑latex源代码，在右边实时显示结果，用javascript实现，有在线版和离线版，离线版只有3M多，完全支持汉字，比安装臃肿的CTEX强多了。","tags":"Tech","url":"http://leetschau.github.io/ru-he-yong-mathtypesheng-cheng-latexfang-cheng.html","loc":"http://leetschau.github.io/ru-he-yong-mathtypesheng-cheng-latexfang-cheng.html"},{"title":"Ultraedit使用笔记","text":"ctrl+b 写程序的时候，括号一般要一一对应的，但是如果嵌套太多，看花眼了，怎么办？你把光标放在括号开始的地方，按ctrl+b，UE 会帮你找到相对应的括号结尾的地方。你还可以试试连着多按几次ctrl+b。 F3 默认情况下,当你按F3的时候UE可以查找现在选中的内容，F3是下一个符合的内容，ctrl+f3是上一个符合的内容.(请查advanced/configuration/Find标签) ctrl+f2 程序会有很多行你当然可以记得你要到的行数，然后用ctrl+g，然后输入行号，到所在的行。但是用ctrl+f2我觉得更方便。比如说你要频繁在多个function中切换。可以在function开始的地方，按一下ctrl+f2，给这一行加一个书签。然后再另外的function开始的地方，也来一下ctrl+f2，有书签的地方，字的背景色会不同。当你想换到下一个书签的时候，就按f2,但是想到上一个标签怎么办？ctrl+f2?不对，嘿嘿，再按就是加书签或 者取消当前行的书签了。应该是alt +f2. 简单的用正则表达式的查找替换 有时候会有一些简单文本处理的工作。比如你手头有一个文本，需要给所有行后边添加一个\";\"。用查找替换来完成 ctrl +r,查找 '&#94;p' 替换为'&#94;p;',(记得选中regular Expressions,这样才能用正则表达式的功能。)然后你可以选replace all(alt+a)，或者点开始，一个一个的查找，替换，这样的好处是知道都替换了那些，有些时候你可能不想全部替换 把类似'{ \\(abc}'替换为'var abc=abc;',abc有可能是其他字符 ctrl+r,查找 '{&#94;\\) &#94;(*&#94;)}' 替换为'var &#94;1=&#94;1;'(记得选中regular Expressions,这样才能用正则表达式的功能。)然后你可以选replace all(alt+a)，或者点开始，一个一个的查找，替换。 自定义快捷键 UE很多功能都有快捷键，但不是所有的都有。11.00有一个Text2html的功能。我工作中遇到了要对大量代码进行这种操 作的情况。我就想自己定一个快捷键。 advanced/configuration/key mapping 在commands里面找到你要用的command.我这里是HTMLConvertSpecialChars,然后点Pres s new key下面的输入框，设置一个自己觉得爽，不冲突的快捷键。比如ctrl+alt+s.然后点ok.这样用常用的功能 ，可以成倍 提高效率。 计算选中区域数字的合 比如如下文本 2 23a1 4 1.1 5 6 先选中，然后Column/(sum column/Selection),UE会以空格，字母分割数字，告诉你一个总数 UE的列编辑功能 首先要alt+c，进入列编辑模式 这是后，你可以用鼠标选择一个方形的区域。删除，复制全看你喜欢了。 如果你想在每一行第二个字符开始加入一个'test'，在列编辑模式下，定位光标到第一行，第二列。 Column/(Insert/Fill column) ,你还可以用这个功能插入行数。在列编辑状态下的复制粘贴都很有意思，某些情况下可以取得意想不到的 效果。 UE的比较 UE内置一个比较功能，可以帮你比较2个文件的不同 file/compare files... 如果你打开了2个要比较的文件，UE会把这2个文件自动填入2个要比较的文件位置，不然，你要用browse功 能去找到那2个文件，设置一下text还是bin,是否要ignore一些你不关心的东西。然后点击compare就到比 较界面。你可以设置只显示不同或者相同或者都显示。日常的应用是可以了。 (有点像BC，不知道谁抄谁的 ) 加入当前时间 有时候写代码要注释，比如那天改的，按一下F7试试。 打开的文件中切换 如果打开多个文件,要在多个文件中切换,用鼠标点,麻烦,试一下ctrl+tab 好多多窗口的软件都支持这个功能。 恢复到上次存盘状态 一个文件改动多了，想undo到最初状态，file/revert to saved. 文件备份,重命名 一个文件要备份,你如果选save as了，那当前打开的就是你save as之后的文件了。 用fle/(make copy/backup) 你还可以直接重命名当前编辑的文件 file/Rename file UE的project功能 11.00以后有了一个自动打开上次关闭时打开着的文件这个功能了，以前好像没有。这就可以用到Project功能 。其实就是定 义一组相关的文件。 project/(new project/workspace),UE会要求你存一个 .prj的文件。下次你可以打开UE的时候，project/(o pen project/workspace),继续上次的那个project的session工作。 也可以file/(recent project/workspace) UE的function列表功能 打开一个程序文件，比如 .js 确保view/view as( )/Javascript 选择view/(view/lists)/function list.也可以用F8 大块代码缩进的调整 选中要调整的代码块 按tab,进行缩进，你再按一下shift+tab。效果咋样？ UE的右键功能 去处行末的空格 选中要去空格的区域。点右键/format/menu../trim trailing spaces 删除整行 定位光标要删除的行。点右键/delete/delete line,(也可以用ctrl+e) 给代码加注释 首先要确定选中了正确的语法加亮显示 view/view as( )/Javascript 然后选中要注释的部分 点右键/delete/comment add 或者comment remove 格式化代码 首先要确定选中了正确的语法加亮显示 view/view as(*)/Javascript 然后选中要格式化的部分，就是让代码的缩进好看点 点右键/format menu/reIndent selection 不过，如果你的代码是一行，没有按照句子分号。好像没啥效果。 复制当前编辑文件的路径 如果你要把当前文件作其他处理，需要这个文件的路径，这个功能可以不用再去敲路径 点右键 copy file path/name 复制当前编辑文件的路径 点右键 copy file path/name 打开文件内容中的文件 如果文件的内容里面有 \"c:\\test.txt\" 或者\"http://www.test.com/js/test.js\" 这样的内容 你可以把鼠标定位到上面，点右键。弹出的菜单最上边会多个选项 \"c:\\test.txt\" 或者\"http://www.test.com/.../test.js\" 点击它，打开相应文件。 调整，添加语法高亮显示 advanced/configuration/syntax Highlighting 点击下边的full path name for word list后边的open 打开的文件如：d:\\Program Files\\UltraEdit\\WORDFILE.TXT 就是UE语法高亮显示的配置文件 /L1\"C/C++\" 就是第一种语言，/L2就是第二种。目前这些word files 可以从下面连接下载到 http://www.ultraedit.com/index.php?...id=40#wordfiles 用的时候，下载相应的word file,复制出来，粘贴到d:\\Program Files\\UltraEdit\\WORDFILE.TXT，注意修改刚开始的/L1和你现有系统匹配。 好像对xml.xsl的显示不是很好，不够准确f 运行dos命令，直接得到结果 F9,会跳出来一个窗口，让你输入命令和工作目录。比如 dir c: 会列出来c盘的目录。如果你要给朋友发目录列表，除了从dos窗口复制过来，还可以用这个简单的方法。加上 一下简单的列编辑。结 果就更好看了。 内置的ascii table view/ascii table 有时候需要知道某个字母的ascii值，从这里就能查出来 !是33 A是65 。。。 11.00之后的code folding功能 就是可以把一个function展开或者合上。如果你用了11的版本却没有这个功能，请查看advanced/configur ation/general/display/Enable show/hide lines and code folding是否为on 但是对xml的支持不是很好，没有xmlspy好。 内置的多个剪贴板 你点右键可以看到 clipboards，里面内置了10个剪贴板。按说windows的copy只能复制一个内容。如果你要复制多个内容，跟据不 同的情况进行粘贴，这10个剪贴板，应该够你用了。 ctrl+0-9的数字键，是在剪贴板之间切换。比如 ctrl+1,然后copy了内容\"a\" ctrl+2,然后copy了内容\"b\" 你如果想paste a，就要先按1下ctrl+1再ctrl+v,要paste b，就按一下ctrl+2再ctrl+v 我有时候不小心更换了剪贴板，就奇怪从别的地方复制的东西粘贴不过来。这种情况要注意 if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML'; mathjaxscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"Tech","url":"http://leetschau.github.io/ultraeditshi-yong-bi-ji.html","loc":"http://leetschau.github.io/ultraeditshi-yong-bi-ji.html"},{"title":"用UltraEdit编辑LaTeX文档","text":"CTEX套装自带的 LaTeX 编辑器是 WinEdt。除了对中文 spellcheck、自动换行支持不好外，还有很多\"智能\"的毛病，比如经常一回车，刚敲过的两行就被WinEdt自动排版了。UltraEdit 实在是令人叹为观止的一款文本编辑器，我一直使用其编辑文本文件，如果能用它来编辑 LaTeX 就好了。事实上，UE 早已为我们准备好这种功能了 拿出来共享一下。 1. LaTeX 关键字的自动着色。 到UltraEdit 的官方网站下载Wordfile，TeX/LateX（ATT98580，在www.ultraedit.com上找）。打开 UltraEdit 目录下的 wordfile.txt 文件，把你下载下来的 wordfile 附加在末尾，用 copy/paste 就行了。另外 wordfile.txt 中是以 \"/L \" 来作为一种语言的开始标记，其中\" \"代表数字序号，注意 LATEX 的序号不要和原先的语言（如C、Perl、 HTML等）冲突就行了。 这时候你再打开一个.tex文件看看，是不是耳目一新？ 2. LaTeX Tag的自动插入。还是在www.ultraedit.com上下载LATEXtag.txt，按照对应格式 copy/paste 到 UE 目录下的 taglist.txt 文件中。记得要在最后的 [Group List] 里加上对应项目。 然后打开 UE，按 Ctrl+F8可以看到效果。 3. 不脱离 UltraEdit 环境即对 TeX 文件进行编译和预览。 这部分实现 WinEdt 的部分功能，通过几个工具栏按钮来编译、预览 LaTex。 3.1 编译LaTeX 在UE的菜单项，选择 Advanced->Tool Configurations， Command Line: Latex \"%p%n.tex\" Working Directory: %p Menu Item Name: LaTeX Save Active File: 选中 Show Dos Box: 选中 Capture Output: 不选，如果选中的话自动打开.log文件 然后点 Insert，这样就加入了一个菜单项。这时用 UE 打开一个 Tex 文件，然后在 Advanced 菜单的最下面多了个菜单项：Latex，点它，就可以编译LaTeX文件了！还可以用 UE 的自定义工具栏功能，把自定义的菜单项加到工具栏上。 补充：在这里，可以通过对话框的 ADVANCE 选项，添加工具的图表，下同。 3.2 用 YAP 预览 其他的就大同小异了。 Command Line: yap \"%p%n.dvi\" Working Directory: %p Menu Item Name: View with YAP Windows Program: 选中 注，其他皆不选。 3.3 编译成 ps 文件 Command Line: dvips \"%p%n.dvi\" Working Directory: %p Menu Item Name: DVIPS Windows Program: 不选 Save Active File: 不选 Show Dos Box: 选中 Capture Output: 不选 3.4 用 GSView 预览 Command Line: \"gsview32\" \"%p%n.ps\" Working Directory: %p Menu Item Name: View with GSView Windows Program: 选中 Save Active File: 不选 Show Dos Box: 不选 Capture Output: 不选 3.5 制作 PDF 文件 Command Line: ps2pdf \"%p%n.ps\" Working Directory: %p Menu Item Name: PS2PDF Windows Program: 不选 Save Active File: 不选 Show Dos Box: 选中 Capture Output: 不选 3.6 用 Acrobat Reader 预览生成的 PDF 文件 Command Line: \"AcroRd32.exe\" \"%p%n.pdf\" Working Directory: %p Menu Item Name: View with Acrobat Windows Program: 选中 Save Active File: 不选 Show Dos Box: 不选 Capture Output: 不选 4 利用UltraEdit编辑LaTeX——在Yap预览时定位源文件 WinEdt和Yap结合非常紧密，用Yap预览由WinEdt生成的dvi文件时，看到需要改的地方，双击一下，就可以打开WinEdt，并且定位到要修改的那一行，非常方便。用UltraEdit一样可以实现这个功能！ 首先打开Yap，菜单 -> View -> Options -> Inverse Search，这个页面是控制定位源文件的。在\"Program\"一栏一般是WinEdt，或者为空。在第二栏\"Command\"里，写上UltraEdit的命令行方式，比如： \"F:\\Software\\Green\\UltraEdit-32\\Uedit32.exe\" \"%f/%l\" 这一行的作用Yap讲的很清楚，就是用来打开dvi相应的tex文件的程序及设置。其中 %f 是tex文件的名字，%l 是鼠标所处的行号。然后点确定，关闭对话框。UltraEdit功能真是强大，它支持用命令行打开文件时指定行号和列号的定位。现在还没有结束，你需要保证你的dvi文件里包含回溯用的源文件信息。在编译LATEX的时候，加上一个options: LATEX -src-specials \"%p%n.tex\" 然后打开生成的 test.dvi，会发现Yap的状态栏里会显示： test.tex L:26 即该dvi文件对应的源文件的名字，以及当前鼠标所处在源文件的行号。如果编译的时候不加 -src-specials，这个地方会提示： (no source specials found) OK，在Yap里双击一下你想去的位置，看看UltraEdit打开了没？再看看光标所处的行，是不是你想去的地方？","tags":"Tech","url":"http://leetschau.github.io/yong-ultraeditbian-ji-latexwen-dang.html","loc":"http://leetschau.github.io/yong-ultraeditbian-ji-latexwen-dang.html"},{"title":"用Word制作讲义的封皮","text":"WORD2003中：【格式->背景->填充效果->纹理】，选一个比较适合制作讲义的封面； 默认情况下背景不会被打印，为打印出来，按如下操作： 在\"工具\"菜单上，单击\"选项\"，然后单击\"打印\"选项卡。 勾选\"背景色和图像\"，然后单击\"确定\"即可。","tags":"Tech","url":"http://leetschau.github.io/yong-wordzhi-zuo-jiang-yi-de-feng-pi.html","loc":"http://leetschau.github.io/yong-wordzhi-zuo-jiang-yi-de-feng-pi.html"},{"title":"一些Word文档处理中常用的VBA代码","text":"下面这些VBA过程用来在Word中完成一些常用的编辑功能，7年前还是读博时整理的，今天打开修改一下，加上源代码渲染。 Sub delBlankLine () ' 删除只有一个回车的行 i = 1 paNo = ActiveDocument . Paragraphs . Count While i <= paNo chNo = ActiveDocument . Paragraphs ( i ) . Range . Characters . Count If chNo = 1 Then ActiveDocument . Paragraphs ( i ) . Range . Delete paNo = paNo - 1 Else i = i + 1 End If Wend End Sub Sub OpenDoc () ' ' 打开一个文件，给出提示，然后退出 ' Documents . Open FileName : = \" f:\\CommandCm.java \" , ConfirmConversions : = False , ReadOnly : = True MsgBox \" opened! \" ActiveDocument . Close End Sub Sub debugDemo () ' 用 Debug.Print调试VBA代码 ' 输出结果在\"立即窗口\"中呈现，用Visual Basic编辑器【视图->立即窗口】调出 ' 下面演示了输出当前文档的第一段文本 Dim TestString As String TestString = ActiveDocument . Paragraphs ( 1 ) . Range . Text Debug . Print TestString End Sub Sub DeleteLine () ' ' 删除特定的行 ' 宏在 2006-11-19 由 李超 录制 ' paraNo = ActiveDocument . Paragraphs . Count For i = 1 To paraNo chNo = ActiveDocument . Paragraphs ( i ) . Range . Characters . Count If chNo = 25 Then If ActiveDocument . Paragraphs ( i ) . Range . Characters ( 12 ) = \" \" Then ActiveDocument . Paragraphs ( i ) . Range . Text = \" ********* \" + Chr ( 13 ) End If Else wordNo = ActiveDocument . Paragraphs ( i ) . Range . Words . Count If wordNo > 1 Then ActiveDocument . Paragraphs ( i ) . Range . Words ( wordNo - 1 ) . Text = ActiveDocument . Paragraphs ( i ) . Range . Words ( wordNo - 1 ) . Text + \" \" End If End If Next End Sub Sub delNumber () ' 删除文本中的数字 paraNo = ActiveDocument . Paragraphs . Count For i = 1 To paraNo chNo = ActiveDocument . Paragraphs ( i ) . Range . Characters . Count For j = 1 To chNo isNo = AscW ( ActiveDocument . Paragraphs ( i ) . Range . Characters ( j )) If isNo > 47 And isNo < 58 Then ActiveDocument . Paragraphs ( i ) . Range . Characters ( j ) = \" \" End If Next Next End Sub Sub 上标 () ' ' 上标 Macro ' 宏在 2006-12-9 由 李超 录制 ' With Selection . Font . NameFarEast = \" 宋体 \" . NameAscii = \" Times New Roman \" . NameOther = \" Times New Roman \" . Name = \" Times New Roman \" . Size = 12 . Bold = False . Italic = False . Underline = wdUnderlineNone . UnderlineColor = wdColorAutomatic . StrikeThrough = False . DoubleStrikeThrough = False . Outline = False . Emboss = False . Shadow = False . Hidden = False . SmallCaps = False . AllCaps = False . Color = wdColorAutomatic . Engrave = False . Superscript = True . Subscript = False . Spacing = 0 . Scaling = 100 . Position = 0 . Kerning = 1 . Animation = wdAnimationNone . DisableCharacterSpaceGrid = False . EmphasisMark = wdEmphasisMarkNone End With End Sub Sub ModifyPicSize () ' ' ModifyPicSize Macro ' 宏在 2006-12-17 由 李超 录制 ' Selection . InlineShapes ( 1 ) . Fill . Visible = msoFalse Selection . InlineShapes ( 1 ) . Fill . Solid Selection . InlineShapes ( 1 ) . Fill . Transparency = 0 # Selection . InlineShapes ( 1 ) . Line . Weight = 0 . 75 Selection . InlineShapes ( 1 ) . Line . Transparency = 0 # Selection . InlineShapes ( 1 ) . Line . Visible = msoFalse Selection . InlineShapes ( 1 ) . LockAspectRatio = msoTrue Selection . InlineShapes ( 1 ) . Height = 361 . 15 Selection . InlineShapes ( 1 ) . Width = 278 . 95 Selection . InlineShapes ( 1 ) . PictureFormat . Brightness = 0 . 5 Selection . InlineShapes ( 1 ) . PictureFormat . Contrast = 0 . 5 Selection . InlineShapes ( 1 ) . PictureFormat . ColorType = msoPictureAutomatic Selection . InlineShapes ( 1 ) . PictureFormat . CropLeft = 0 # Selection . InlineShapes ( 1 ) . PictureFormat . CropRight = 0 # Selection . InlineShapes ( 1 ) . PictureFormat . CropTop = 0 # Selection . InlineShapes ( 1 ) . PictureFormat . CropBottom = 0 # End Sub","tags":"Tech","url":"http://leetschau.github.io/yi-xie-wordwen-dang-chu-li-zhong-chang-yong-de-vbadai-ma.html","loc":"http://leetschau.github.io/yi-xie-wordwen-dang-chu-li-zhong-chang-yong-de-vbadai-ma.html"},{"title":"如何利用VBA嵌入C++ Builder驱动Office","text":"下面的代码是点击Button1后，新建一个Excel文档，并在指定的单元格上添加一个超链接。 void __fastcall TForm1::Button1Click(TObject *Sender) { Variant vHandleExcelApp, vHandleWorkbook, vHandleSheet, vHandleCell; AnsiString ansi,tmpStr; tmpStr = \"file:///E:\\aaa\\zOut1\\sss.txt\"; //字符串中\"\\\"要写成\"\\\" //this->Edit1->Text = ansi; try{ vHandleExcelApp = Variant::CreateObject(\"Excel.Application\"); } catch(...) { Application->MessageBox(\"无法启动Excel\", \"错误\", MB_ICONSTOP|MB_OK); return; } vHandleExcelApp.OlePropertySet(\"Visible\", true); vHandleExcelApp.OlePropertyGet(\"WorkBooks\").OleFunction(\"Add\",1); vHandleWorkbook = vHandleExcelApp.OlePropertyGet(\"ActiveWorkBook\"); vHandleSheet = vHandleWorkbook.OlePropertyGet(\"ActiveSheet\"); ansi = \"research for\"; vHandleSheet.OlePropertyGet(\"Cells\", 2, 1).OlePropertySet(\"Value\", ansi); vHandleCell = vHandleSheet.OlePropertyGet(\"Cells\", 2, 1); vHandleSheet.OlePropertyGet(\"Hyperlinks\").OleFunction(\"Add\",vHandleCell,tmpStr,\"the caption here\"); } 相应的VBA代码是： ActiveSheet.Hyperlinks.Add Anchor:=ActiveSheet.Cells(2,1), Address:= \"E:\\MyDoc\\using_javadoc.doc\", TextToDisplay:=\"some text here\" 可见使用OlePropertyGet、OlePropertySet、OleFunction三个函数基本上可以实现从VBA到C++代码的转换。","tags":"Tech","url":"http://leetschau.github.io/ru-he-li-yong-vbaqian-ru-c-builderqu-dong-office.html","loc":"http://leetschau.github.io/ru-he-li-yong-vbaqian-ru-c-builderqu-dong-office.html"},{"title":"如何用UltraEdit编译和运行java程序","text":"对于java初学者来说，编译和运行java程序是一件很头疼的东西。显然，在命令方式下编译和运行java程序用久了，确实是很麻烦，而我们又不想使用大型的开发工具时，UltraEdit是一个不错的选择，很多初学者都是用它来编写java源文件的，可以高亮度显示关键字。确定你的jdk环境变量配置是正确的。 1。关键字高亮度显示。 打开UltraEdit－>视图－>高亮显示类型->java; 此时在UltraEdit输入java程序时，关键字和java包下的类可以高亮度显示， 还有注释也是啊，如果你不喜欢它的默认色彩，可以自己更改。 在顶层的菜单栏中选择 高级->配置->语法高亮（对话框的一个选项卡）->语言->java 你就可以配子你自己喜欢的色彩了。 2.javac和java集成到UltraEdit工具栏上。 把javac和java集成到UltraEdit上，你不用每次都到dos下去执行你的java程序 ，可以像VC那样写完C++程序直接Build和run一下就可以了。我们开始了！ 高级－>工具配置 //弹出一个对话框，为 工具配置 在 命令行输入 javac %n%e//%n表示当前路径，%e表示执行的当前文件名。 工作目录下输入 %p 菜单项目名称，自己起一个好听的。 复选框和单选框选三个：保存活动文件，输出到列表方块，捕捉输出 注意：javac %n%e编译那些不是默认包的java程序时是不会生成相应的文件夹的，要这样才可以 javac -d . %n%e 好了，你可以按 \"插入\"按钮了，这时你已经可以Build你的java程序了，但是还不能Run你的java程序，在配置Run java程序的工具了 命令行：java %n 工作目录：%p 其他的一样了。 现在你可以看看高级菜单的下面多了什么东东没有。 可是现在只有在菜单啊，我要把它放在工具栏怎么办啊 可以的。在工具栏->鼠标右键->自定义 选择 工具栏 新建工具栏（可以不用） 选择 命令 ->高级 找到你自定义的 用户工具1和用户工具2，把它们拖到你的自定义工具栏上，但是图标不是很好看啊，不要紧啊，将就把，可以自己换图标的。我们来换图标：还记得刚才你的Build和Run是怎么来的吗？ 高级－》工具配置 选中java或javac 再点击 高级 看到弹出的对话框，你就知道要干什么得了，给你的工具找一个好看的图标了，不要太大了，如果没有现成的话可以用VC来制作几个啊。 到现在还是有很多java初学者要问，我再VC里面可以按什么F5啊F11啊进行编译和运行，这里可不可以啊，可以的，我们就来配置把： 高级－》配置－》热键映射 找到 高级－用户工具1和用户工具2，自己可以分配自己喜欢的热键了。 3.这个功能对大家来说不是什么陌生的东西了，再delphi，vc，jbuilder等工具里面，你输入一个变量的时候，就会弹出一个框框来然你选择你需要的函数。但本人认为这个很不适合初学者。 还是在热键映射那里，找到 编辑－自动完成就可以分配热键了。分配完成后。重启你的UltraEdit，但你输入Sys的时候，按一些你的热键，看看是什么样子，不过没有vc，delphi那么高级啊。","tags":"Tech","url":"http://leetschau.github.io/ru-he-yong-ultraeditbian-yi-he-yun-xing-javacheng-xu.html","loc":"http://leetschau.github.io/ru-he-yong-ultraeditbian-yi-he-yun-xing-javacheng-xu.html"},{"title":"如何用eclipse调试HLA代码","text":"体系问题：在 HLA 中，哪些是源码，哪些是库？ 以《计算机仿真中的 HLA 技术》的代码为例，包括批处理和 bin 、 config 、 doc 、 lib 、 src 五个子目录，其中 doc 是说明文档， src 是 bin 中 class 文件的源代码，都不在体系之内。 Config 用来存放 fed 和 props 文件，作为 HLA 系统的重要参数文件；然后分析核心部分：我们看 manager.bat 中的内容： javaw -cp bin;lib\\prti.jar;lib\\jgl3.1.0.jar;lib\\swingall.jar org.mitre.hla.book.manager.Manager org.mitre.hla.book.manager.Manager 是要执行的文件，也就是需要 HLA 开发者自己编写代码的部分，其源代码在 src 下都可以找到，也可以用上面提到的 jad 反编译一下看看，这样的文件都在 bin 下，其他 -cp 中的 jar 文件就是提供 Manager 运行必需的库了，它们都放在 lib 下。 小结： 开发 HLA 系统时， (1) ：将别人提供的 RTI 软件放在 lib 文件夹下，（如《计…… HLA 技术》中用的是瑞典 Pitch AB 公司开发的 pRTI 的预览版，这个 RTI 软件一般是一些 jar 文件，如本书中是 Lib 文件夹下的 prti.jar 。） (2) ：将自己编写的 HLA 体系运行代码（主要由 Manager.java （联邦管理器）及其附属类说明文件、代表各个联邦成员的文件组成）编译后放在 bin 文件夹下； (3) ：将配置 HLA 系统的 fed 文件和 props 文件放在 config 文件夹下即可。 如何在 Eclipse 中建立 HLA 调试环境？ 第一步：建立工程并添加引用库。新建一个 Java Project （假设名为 HLADemo ），可以在新建工程的 Libraries 页中点 Add External JARs 加入前面提到的 RTI 库文件，也可以建好工程后在 Project->Properties->Java Build Path->Libraries 中加； 第二步：导入源代码。假设代码都在 src 文件夹下，在 Eclipse 中右击 HLADemo ，选择 Import->File System ，将 src 文件夹下的内容加入到工程中。 第三步：加入 config 部分。将 config 文件夹拷贝到 workspace 中的工程文件夹下，然后在 Eclipse 中右击 HLADemo ，选择 Import->File System ，将 config 文件夹加入到工程中。 如何在 Eclipse 中运行 HLA ？ 第一步：启动 RTI 环境。在《计…… HLA 技术》中是双击 rti.bat ，由于这个属于 HLA 的 RTI 提供者的职责，所以开发者不需要关心运行机理； 第二步：启动联邦管理器。打开 Manager.java ，运行之即可。 第三步：启动其它联邦成员。打开相应的文件，运行之即可。 如何在 Eclipse 中加库？ 选中代表 HLA 的工程，在 Project->Properties->Java Build Path->Libraries 中加。 如果库文件带有源码 将源码所在目录的路径加入到 Project->Properties->Java Build Path->Libraries->Source attachment 中即可。例如： Libraries 中有一个库为 prti.jar ，用 winRAR 打开，其中有 a 和 c 两个子目录，下面的目录结构分别为： a\\b*.class 和 c\\d*.class ，可以在任意位置新建一个 src 目录，也在下面建立 a 和 c 两个子目录，下面的目录结构分别为： a\\b*.java 和 c\\d*.java ，将 Source attachment 中的目录指定到… \\src 即可。在代码区中，如果某个类的类型显示为 a.b.AnyClass ，则在该类上右键 ->Open Delaration 就能看到该类在库文件中的定义。另：如果库没有源码，可以将 *.class 解压出来之后用 jad 反编译。 如何在 Eclipse 中调试 HLA ？ 同运行方法类似，只是打开相应文件后，将\"运行\"命令改为\"调试\"，就可以用单步执行或者设置断点的方式调试自己的代码了。","tags":"Tech","url":"http://leetschau.github.io/ru-he-yong-eclipsediao-shi-hladai-ma.html","loc":"http://leetschau.github.io/ru-he-yong-eclipsediao-shi-hladai-ma.html"}]}