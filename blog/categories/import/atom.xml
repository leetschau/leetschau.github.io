<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Import | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/import/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-20T11:01:10+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Import Data From Files Into Mongodb]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/08/114328/"/>
    <updated>2014-12-08T11:43:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/08/114328</id>
    <content type="html"><![CDATA[<h1>From CSV File</h1>

<p>Here I use mongoDB&rsquo;s mongoimport tool to import csv file into Meteor app&rsquo;s Mongodb.</p>

<p>First download mongodb package (mongodb-linux-x86_64-2.6.5.tgz) from <a href="http://www.mongodb.org/">mongoDB</a>, extract it into ~/apps folder.</p>

<p>Next start the Meteor app. Open a new terminal window, in project root folder, run <code>meteor mongo</code>.
You can see something like &ldquo;connecting to: 127.0.0.1:3001/meteor&rdquo;.
This tells us database server is listening on port 3001, and database name is &ldquo;meteor&rdquo;.</p>

<p>Save the following codes into app&rsquo;s $HOME/private folder as importdb.sh:</p>

<pre><code>mongoimport -h localhost:3001 --db meteor --collection fairs --type csv --file fairs.csv --headerline
</code></pre>

<p>Here &ldquo;-d&rdquo; equals to &ldquo;&ndash;db&rdquo;, &ldquo;-c&rdquo; equals to &ldquo;&ndash;collection&rdquo;.
And the source csv file is saved in file private/fairs.csv.</p>

<p>It&rsquo;s headerline (first line of csv file) is also comma-seperated:</p>

<pre><code>Name, Age, Job
Bob, 35, Cooker
Tom, 28, Coder
...
</code></pre>

<p>Now in the Meteor app, add <code>Fairs = new Meteor.Collection("fairs");</code> into js file to use the data.</p>

<h1>From JSON File</h1>

<h2>Json Lint</h2>

<p>Validate the json file with <a href="https://github.com/zaach/jsonlint">jsonlint</a>.</p>

<p>You need install node.js, then install jsonlint with <code>npm install jsonlint -g</code>.
Next check the json file with <code>jsonlint myfile.json</code>.</p>

<h2>Import from Json File</h2>

<p>Use the following commands to import json objects from a file:</p>

<pre><code>mongoimport -h localhost:3001 -d meteor -c fairs --type json --jsonArray --file demo.json
</code></pre>

<p>Or if your mongod is running on localhost, use the following line to import
(no need to create the target database and collection before import):</p>

<pre><code>mongoimport -d meteor -c fairs --type json --file first31.json --jsonArray
</code></pre>

<p>This is a sample of the imported json file:</p>

<pre><code>[
  { name: "Widget 1",
    desc: "This is Widget 1"
  },
  { name: "Widget 2",
    desc: "This is Widget 2"
  }
]
</code></pre>

<p>If the &ldquo;&ndash;jsonArray&rdquo; option is omitted, the json file have to keep each object in one line, like this:</p>

<pre><code>{ name: "Widget 1", desc: "This is Widget 1" }
{ name: "Widget 2", desc: "This is Widget 2" }
</code></pre>

<p>See <code>mongoimport --help</code> for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Apache Subversion Repositories Into VisualSVN]]></title>
    <link href="http://leetschau.github.io/blog/2014/07/12/173359/"/>
    <updated>2014-07-12T17:33:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/07/12/173359</id>
    <content type="html"><![CDATA[<p>wait</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Subversion Repository From Subversion Dump File]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/18/111355/"/>
    <updated>2014-06-18T11:13:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/18/111355</id>
    <content type="html"><![CDATA[<h1>Overall steps</h1>

<ol>
<li><p>Get dump file from <a href="FTP:">FTP:</a></p></li>
<li><p>Build repository based on the dump file;</p></li>
<li><p>Authorize user of this repository.</p></li>
</ol>


<h1>Operation details</h1>

<h2>On Windows</h2>

<pre><code># get dump file with TotalCmd;
cd K:\svn
svnadmin create ALARM
svnadmin load ALARM &lt; f:\tmp\ALARM-dumpfile
# add the following text into file "c:\Program Files\Apache Group\Apache2\svnaccessfile"
    ALARM-dev=user1,user2,user3
    ####
    [ALARM:/Development-Area]
    @ALARM-dev = rw
    @QA = rw
    @Manager = r
    bvt_common = r
    * = 
    [ALARM:/Management-Area]
    @ALARM-dev = rw
    @QA = rw
    @Manager = r
    * = 
    [ALARM:/Release-Area]
    @ALARM-dev = rw
    @Manager = r
    @QA = rw
    test = r
    * = 
    [ALARM:/Test-Area]
    @ALARM-dev = r
    @QA = rw
    @Manager = r
    * = 
# add following text into file "c:\Program Files\Apache Group\Apache2\passwd"
    user1:pwd1
    user2:pwd2
    user3:pwd3
</code></pre>

<h2>On Linux</h2>

<pre><code>ftp 123.xxx.xxx.xxx
&gt; get ALARM-dumpfile
&gt; bye
cd $SVN_REPO_HOME
svnadmin create ALARM
svnadmin load ALARM &lt; ~\ALARM-dumpfile
# edit file svnaccessfile &amp; passwd the same way with in Windows
</code></pre>

<p>Note:</p>

<p>The default auth rule is &ldquo;everyone can access everything&rdquo; like the following text in svnaccessfile:</p>

<pre><code>[/] 
* = r
@Manager = rw
@QA = rw
@Dev = rw
@TEST-all = rw
</code></pre>

<p>then define more detailed rules to override the default one, notice the last line:</p>

<pre><code>[ALARM:/Development-Area]
@ALARM-dev = rw
...
* = 
</code></pre>

<p>But we can define auth rules in another way:</p>

<pre><code>[/]
* =
[ALARM:/Development-Area]
@ALARM-dev = rw
...
</code></pre>
]]></content>
  </entry>
  
</feed>
