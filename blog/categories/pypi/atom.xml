<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pypi | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/pypi/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-11T14:12:54+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Publish and Install Python Applications]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/10/102952/"/>
    <updated>2014-01-10T10:29:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/10/102952</id>
    <content type="html"><![CDATA[<h1>Publish to PyPI</h1>

<p>Follow <a href="http://www.scotttorborg.com/python-packaging/index.html">How To Package Your Python Code</a>.</p>

<h2>Register</h2>

<p>I ran &ldquo;python setup.py register&rdquo; twice. Firstly I use option 2 to register a new account, then ran it again and use option 1 to upload the &ldquo;funniest&rdquo; package. Then I saw this package in my account on PyPI. In the management page, there is a &ldquo;remove&rdquo; button for delete this package.</p>

<pre><code>$ python setup.py register
</code></pre>

<h2>Create a source distribution</h2>

<pre><code>$ python setup.py sdist
</code></pre>

<p>This is create a tar.gz file under dist folder. If you like, copy that file to another host, unpacking it and install it with &ldquo;python setup.py install&rdquo;.</p>

<h2>Upload source distribution</h2>

<pre><code>$ python setup.py sdist upload
</code></pre>

<p>After modification of source codes and version number in setup.py (say, modify it to 0.2) run last command again to refresh distribution on PyPI. You can see it at &ldquo;<a href="https://pypi.python.org/simple/">https://pypi.python.org/simple/</a><app-name>/&rdquo;.</p>

<p>On another host, use &ldquo;pip install <app-name>==0.2&rdquo; to install this app, for example: &ldquo;pip install funniestlc==0.2&rdquo;.</p>

<h1>Publish in LAN</h1>

<h2>On the develop host</h2>

<ol>
<li><p>Edit source code;</p></li>
<li><p>Create new source code distribution package: <code>python setup.py install sdist</code>;</p></li>
</ol>


<h2>On the deploy host</h2>

<ol>
<li><p>Startup a virtual environment: <code>workon test</code>;</p></li>
<li><p>Write a install script:</p>

<p> #!/bin/bash
 scp lichao@10.21.2.7:/home/lichao/docs/python_projects/donno/dist/donno-0.1.10.tar.gz .
 tar zxvf donno-0.1.10.tar.gz
 cd donno-0.1.10
 python setup.py install
 cd ..</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Development Workflow]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/09/105408/"/>
    <updated>2014-01-09T10:54:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/09/105408</id>
    <content type="html"><![CDATA[<p>Based on <a href="http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/">http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/</a></p>

<h1>Workflow</h1>

<p>The first release(v0.1): see Publish and Install Applications via PyPI for how to commit to PyPI;</p>

<p>After uploading your first release to PyPI, the basic workflow is:</p>

<ol>
<li><p>Do some work on your package (i.e. fix bugs, add features, etc);</p></li>
<li><p>Make sure the tests pass;</p></li>
<li><p>&ldquo;Freeze&rdquo; your code by creating a release branch in git-flow;</p></li>
<li><p>Update the <strong>version</strong> number in your package&rsquo;s <strong>init</strong>.py file;</p></li>
<li><p>Run &ldquo;python setup.py sdist upload&rdquo; to upload the new version of your package to PyPI;</p></li>
</ol>


<p>For usage of git-flow, see note &ldquo;git-flow Notes&rdquo;.</p>

<h1>virtualenv and virtualenvwrapper</h1>

<p>See Note about virturalenvwrapper.</p>

<h1>Publish a Python Application</h1>

<p>Add a &ldquo;command_line.py&rdquo; in <project-name> module, and &ldquo;entry_points&rdquo; in setup.py. See the 4th step &ldquo;Command Line Scripts&rdquo; in <a href="http://www.scotttorborg.com/python-packaging/index.html">How To Package Your Python Code</a> for details.</p>

<h2>Necessary Files</h2>

<h3>setup.py</h3>

<p>Some necessary parameters:</p>

<ul>
<li><p>entry_points: for defind executables;</p></li>
<li><p>install_requires: for defining dependencies, get this from &ldquo;pip freeze&rdquo; command (exculde the application itself);</p></li>
</ul>


<h3>MANIFEST.in</h3>

<p>  Add &ldquo;inculde README.md&rdquo; (and other necessary files for installation) in this file, or README.md will note be packaged into installer, and in installation a &ldquo;README.md not found&rdquo; error raises because you read this file in setup.py.
  (see <a href="https://wiki.python.org/moin/Distutils/Tutorial">https://wiki.python.org/moin/Distutils/Tutorial</a> for explanation)</p>

<h2>All available classifiers</h2>

<pre><code>https://pypi.python.org/pypi?%3Aaction=list_classifiers
</code></pre>

<h2>Create requirements automatically</h2>

<pre><code>$ pip freeze &gt; requirements.txt
</code></pre>
]]></content>
  </entry>
  
</feed>
