<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oop | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-05-26T17:50:21+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FP vs OOP]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/02/111254/"/>
    <updated>2013-12-02T11:12:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/02/111254</id>
    <content type="html"><![CDATA[<h1>Four Paradigms of Decomposing Problems</h1>

<ul>
<li><p>Procedural: C, Pascal, Unix shells;</p></li>
<li><p>Declarative: SQL;</p></li>
<li><p>Object-oriented: Smalltalk, Java;</p></li>
<li><p>Functional: Haskell;</p></li>
</ul>


<h1>Relations of FP and OOP</h1>

<p>&ldquo;Functional programming can be considered the opposite of object-oriented programming. Objects are little capsules containing some internal state along with a collection of method calls that let you modify this state, and programs consist of making the right set of state changes. Functional programming wants to avoid state changes as much as possible and works with data flowing between functions.&rdquo; &ndash;From <a href="http://docs.python.org/2/howto/functional.html">Functional Programming HOWTO</a></p>

<p>&ldquo;I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is theyâ€™ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.&rdquo; &ndash;Joe Armstrong (the creator of Erlang) discussed in &ldquo;Coders At work&rdquo; about the reusability of Object-Oriented Programming.
To be fair, in my opinion it&rsquo;s not an intrinsic problems of OOP. You can write OOP code which is also functional, but certainly:
* Typical OOP tends to emphasize change of state in objects.
* Typical OOP tends to impose tight coupling between layers (which hinders modularization).
* Typical OOP mixes the concepts of identity and state.
* Mixture of data and code raises both conceptual and practical problems.
&ndash; <a href="http://code.google.com/p/tokland/wiki/RubyFunctionalProgramming">Ruby Functional Programming</a>
Rich Hickey, the creator of Clojure (a functional Lisp-dialect for the JVM), discusses state, values and identity in this <a href="http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey">excellent talk</a>.</p>

<h1>If we can do functional programming with Python, do we need a specific functional programming language?</h1>

<p><a href="http://programmers.stackexchange.com/questions/42986/if-we-can-do-functional-programming-with-python-do-we-need-a-specific-functiona">http://programmers.stackexchange.com/questions/42986/if-we-can-do-functional-programming-with-python-do-we-need-a-specific-functiona</a></p>
]]></content>
  </entry>
  
</feed>
