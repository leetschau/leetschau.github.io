<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Time | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/time/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-15T10:58:04+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Time Synchronization on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/20/103138/"/>
    <updated>2014-09-20T10:31:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/20/103138</id>
    <content type="html"><![CDATA[<p>Find out if current system time and time zone services status: <code>timedatectl status</code>.
If your &ldquo;Time zone&rdquo; is correct (Hongkong, in my case), and the &ldquo;NTP enabled&rdquo; is &ldquo;no&rdquo;, then you should open time synchronization service.</p>

<p>Run the following commands as root to set correct timezne and sync time with Internet.</p>

<pre><code># ln -s /usr/share/zoneinfo/Hongkong /etc/localtime
# hwclock --systohc --utc
# systemctl enable systemd-timesyncd.service
# systemctl start systemd-timesyncd.service 
</code></pre>

<p>Ref: <a href="https://wiki.archlinux.org/index.php/Time">Time - ArchWiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate Command Running Time on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/05/171901/"/>
    <updated>2014-03-05T17:19:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/05/171901</id>
    <content type="html"><![CDATA[<p>You can use &ldquo;time&rdquo; or &ldquo;/usr/bin/time -p&rdquo; to calculate the running timespan of a command:</p>

<p>% time vmstat 2 2
procs &mdash;&mdash;&mdash;&ndash;memory&mdash;&mdash;&mdash;- &mdash;swap&ndash; &mdash;&ndash;io&mdash;- -system&ndash; &mdash;-cpu&mdash;-
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
 1  0      0 2676404 141160 571960    0    0     5     7   64  270  2  1 97  0
 0  0      0 2667964 141168 579900    0    0     0    36  234  626  1  1 98  1
vmstat 2 2  0.00s user 0.00s system 0% cpu 2.003 total</p>

<p>% /usr/bin/time -p vmstat 2 2
procs &mdash;&mdash;&mdash;&ndash;memory&mdash;&mdash;&mdash;- &mdash;swap&ndash; &mdash;&ndash;io&mdash;- -system&ndash; &mdash;-cpu&mdash;-
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
 1  0      0 2675576 141184 571960    0    0     5     7   64  270  2  1 97  0
 0  0      0 2675560 141192 571956    0    0     0   100  248  692  1  1 97  1
real 2.00
user 0.00
sys 0.00</p>

<p>You can see the &ldquo;total&rdquo; portion of &ldquo;time&rdquo; and &ldquo;real&rdquo; portion of &ldquo;/usr/bin/time&rdquo; both give correct answer, while the former looks more accurate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate PI in 3 Languages Dynamically]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/18/165217/"/>
    <updated>2013-10-18T16:52:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/18/165217</id>
    <content type="html"><![CDATA[<p>The algorithm to calculate PI is based on &ldquo;<a href="http://stackoverflow.com/questions/12449430/how-did-the-following-piece-of-java-code-calculate-the-digits-of-pi">http://stackoverflow.com/questions/12449430/how-did-the-following-piece-of-java-code-calculate-the-digits-of-pi</a>&rdquo;.</p>

<h1>Source code</h1>

<h2>Java</h2>

<p> import java.math.BigDecimal;
 import java.math.BigInteger;
 public class PiCalculator {
  public static void main(String[] args) {
   int precision = Integer.parseInt(args[0]);
   BigDecimal total = BigDecimal.ZERO;
   for (int i = 0; i &lt; precision; i++) {
    total = total.add(getStep(i, precision));
   }
   System.out.println(&ldquo;Pi = &rdquo; + total);
  }
  public static BigDecimal getStep(int k, int scale) {
   BigInteger base = BigInteger.valueOf(16).pow(k);
   int k1 = 8 * k + 1;
   int k4 = 8 * k + 4;
   int k5 = 8 * k + 5;
   int k6 = 8 * k + 6;
   base = base.multiply(BigInteger.valueOf(k1));
   base = base.multiply(BigInteger.valueOf(k4));
   base = base.multiply(BigInteger.valueOf(k5));
   base = base.multiply(BigInteger.valueOf(k6));
   int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1
    * k4 * k5;
   return BigDecimal.valueOf(numerator).divide(new BigDecimal(base),
     scale - 1, BigDecimal.ROUND_HALF_UP);
  }
 }</p>

<h1>Groovy</h1>

<p> def scale = Integer.parseInt(args[0])
 BigDecimal total = BigDecimal.ZERO
 for (i in 0..scale-1) {
  total = total.add(getStep(i, scale))
 }
 println &ldquo;Pi = &rdquo; + total
 def getStep(int k, int scale) {
  BigInteger base = BigInteger.valueOf(16).pow(k);
  int k1 = 8 * k + 1;
  int k4 = 8 * k + 4;
  int k5 = 8 * k + 5;
  int k6 = 8 * k + 6;
  base = base.multiply(BigInteger.valueOf(k1));
  base = base.multiply(BigInteger.valueOf(k4));
  base = base.multiply(BigInteger.valueOf(k5));
  base = base.multiply(BigInteger.valueOf(k6));
  int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1 * k4 * k5;
  return BigDecimal.valueOf(numerator).divide(new BigDecimal(base),
    scale - 1, BigDecimal.ROUND_HALF_UP);
 }</p>

<h2>Clojure</h2>

<h3>Create Project</h3>

<p>$ lein new calc-pi;cd calc-pi;cat project.clj</p>

<p> &hellip;</p>

<p> :dependencies [[org.clojure/clojure &ldquo;1.5.1&rdquo;]
     [org.clojure/math.numeric-tower &ldquo;0.0.2&rdquo;]])</p>

<h3>core.clj</h3>

<p> (defn calc-pi
  [k]
  (convert-decimal (calc-pi-expt k) k))
 (defn convert-decimal
  &ldquo;Convert a ratio to decimal with precision prec&rdquo;
  [source prec]
  (with-precision prec (/ (bigdec (numerator source)) (denominator source))))
 (defn calc-pi-expt
  [k]
  (reduce + (map step-expt (range k))))
 (require &lsquo;[clojure.math.numeric-tower :as math])
 (defn step-expt [k]
  (/ (- (/ 4 (+ (<em> 8 k) 1)) (/ 2 (+ (</em> 8 k) 4)) (/ 1 (+ (<em> 8 k) 5)) (/ 1 (+ (</em> 8 k) 6))) (math/expt 16 k)))</p>

<h1>Calculate</h1>

<h2>Java</h2>

<p>$ javac PiCalculator.java</p>

<p>$ time java PiCalculator 500</p>

<p>=> 0.25s</p>

<p>This value doesn&rsquo;t include compilation time!</p>

<p>$ /usr/bin/time -p sh -c &lsquo;javac PiCalculator.java;java PiCalculator 500&rsquo;</p>

<p>=> 0.87</p>

<h2>Clojure</h2>

<p>(time (calc-pi 500)) => 0.8s</p>

<h2>Groovy</h2>

<p>$ time groovy calcPi.groovy 500</p>

<p>=> 1.09s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access, Modify, Change Time of Linux File]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/17/110919/"/>
    <updated>2013-10-17T11:09:19+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/17/110919</id>
    <content type="html"><![CDATA[<p>All these 3 time can be viewed by &ldquo;stat <file>&rdquo; command.</p>

<p> Access time is influenced by read operation, such as command cat, more, less, head, tail, grep, sed, etc. This time is queried by &ldquo;find . -atime -1&rdquo;, and can be set by &ldquo;touch -a&rdquo; command;</p>

<p> Change time is the time when inode is changed, which influenced by command mv, chmod, chown, etc;</p>

<p> Modification time is the time the <strong>content</strong> of the file changed, and be listed by &ldquo;ls -l&rdquo; command. It&rsquo;s influenced by command vi, etc, and can be set by &ldquo;touch -m&rdquo; command;</p>

<p> &ldquo;touch -t&rdquo; set access and modification time to the specified time;</p>

<p> Creation time is not saved. So it&rsquo;s impossible to query files according to creation time;</p>

<p> Ref:</p>

<p> <a href="http://linuxgp.blog.51cto.com/1708668/477041">Linux文件的access time,change time,modify time</a></p>

<p> <a href="http://stackoverflow.com/questions/14842195/how-to-get-file-creation-date-time-in-bash-debian">http://stackoverflow.com/questions/14842195/how-to-get-file-creation-date-time-in-bash-debian</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Unit]]></title>
    <link href="http://leetschau.github.io/blog/2012/08/22/085815/"/>
    <updated>2012-08-22T08:58:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/08/22/085815</id>
    <content type="html"><![CDATA[<p>1 ms(millisecond) = 10e-3 second</p>

<p>1 μs(microsecond) = 10e-6 second</p>

<p>1 ns(nanosecond) = 10e-9 second</p>

<p>reference: <a href="http://en.wikipedia.org/wiki/Orders_of_magnitude_(time">Orders of magnitude (time)</a> ) on wiki.</p>
]]></content>
  </entry>
  
</feed>
