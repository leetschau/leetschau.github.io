<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sublime Text | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/sublime-text/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang IDE Setup]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/19/153646/"/>
    <updated>2013-05-19T15:36:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/19/153646</id>
    <content type="html"><![CDATA[<h1>Windows Console</h1>

<ol>
<li><p>add erl.exe and vim.exe to %PATH%;</p></li>
<li><p>start ConEmu, split window vertically (see note &ldquo; Multiple terminals operation on Windows and Ubuntu &rdquo; for spliting window detail);</p></li>
<li><p>start erlang shell with <code>erl.exe</code> at left and <code>vim erlSrc.erl</code> at the right window;</p></li>
</ol>


<h1>Ubuntu Console</h1>

<ol>
<li><p>start Terminator and split window;</p></li>
<li><p><code>erl</code> at left and <code>vi erlSrc.erl</code> at right;</p></li>
</ol>


<h1>IDE based on Sublime Text 2</h1>

<p>Use package control install two package: SublimErl and SublimeREPL.</p>

<p>Run erlang REPL: Sublime Text Menu / Tools / SublimeREPL / Erlang. If you got a error message, it&rsquo;s most probably caused by not adding werl.exe in $PATH. So Sublime Text Menu / Preferences / Package Settings / SublimeREPL / Settings-User, add <code>{ "default_extend_env": {"PATH": "{PATH};C:/Program Files/erl5.10/bin"} }</code>.</p>

<p>alt+shift+2(shortcut in View / Layout): split window with 2 column;</p>

<p>key shortcuts defs in sublime text 2:</p>

<p><a href="http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html#">http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html#</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text笔记]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/07/230132/"/>
    <updated>2013-04-07T23:01:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/07/230132</id>
    <content type="html"><![CDATA[<p>Sublime Text作为一款文本编辑器，最强大的是快速响应能力和"Goto Anything"功能，用Ctrl+Shift+P执行编辑器功能，用Ctrl+P+@进行文件间与文件内部的跳转，目前的编辑器还没有类似的，Vintage将vi的强大编辑能力吸收了进来，更是如虎添翼。</p>

<p>它不适合作为静态语言（如Java）的正式开发IDE，与“标准的”IDE（如Eclipse）比较，它不具备针对静态语言的代码重构功能；在代码自动补全方面，无法提供类库的类名/方法补全（能够提供语言关键字和变量的补全）；它无法提供调试环境，需要单独的代码调试器（如JSwat）。所以Sublime Text适合作为展现语言（如HTML，Latex等）或者动态语言（Python, PHP等）的开发工具。</p>

<p>但很多时候我们只是想浏览代码，或是写一些简单的试验程序，或是修改代码的一处细节，启动Eclipse太慢了，用Sublime text这样text editor处理正合适。</p>

<h1>借助Ant打造Java IDE</h1>

<p>项目目录结构：项目根目录（$PORJ_HOME）下存放源代码、编译后的class文件和需要引用的jar包（而不是分开放在src, bin, lib文件夹下，适合于技术验证式的小项目），以及sublime项目定义文件（ProjectName.sublime-project）和build.xml，通过Ant的javac和java指令编译和运行Java代码，源代码不论什么包名都放在$PORJ_HOME下（Ant的javac指令会根据源代码的包名创建class文件的目录结构）；</p>

<h2>准备工作</h2>

<ol>
<li><p>指定用Ant做构建工具：修改[Preferences -> Browse Packages]打开packages文件夹，修改Java/JavaC.sublime-build文件，将原来"cmd"后面的"javac"改为"ant.bat"，如果ant所在目录没有加到系统的$Path里，这里需要写文件完整路径，例如"D:/Apps/apache-ant-1.8.1/bin/ant.bat"，然后将工作目录设置为项目根目录（默认的就是项目文件所在目录，因此这句不写也行）："working_dir": &ldquo;$project_path"；</p></li>
<li><p>安装AdvancedNewFile插件：利用package control的install new package功能，装完后就可以用快捷键"Ctrl + Alt + N"在项目根目录下创建文件了；</p></li>
</ol>


<h2>创建Java项目</h2>

<ol>
<li><p>创建项目文件夹（TotalCMD），拷贝此文件夹的完整路径；</p></li>
<li><p>Sublime Text -> Project -> Add Folder: 将上一步创建的文件夹加入到Project中；</p></li>
<li><p>生成新的Sublime项目文件：Sublime Text -> Project -> Save Project As，这样项目文件就定义好了，如果希望隐藏不必要的文件和文件夹：[Project -> Save Project As]，用file_exclude_patterns和folder_exclude_patterns属性实现，例如：</p></li>
</ol>


<p> {
  &ldquo;folders&rdquo;:
  [
   {
    &ldquo;path&rdquo;: &ldquo;/e/workspace/PNProject&rdquo;,</p>

<pre><code>"file_exclude_patterns": 
[ 
  "*.sublime*" 
] 
</code></pre>

<p>   }</p>

<p>  ]
 }</p>

<p>注：还可以用"folder_exclude_patterns":[&ldquo;build&rdquo;]这样的方式去掉文件夹。</p>

<ol>
<li>在项目根目录下新建一个build.xml文件，主要内容是编译和运行java代码（注意每个项目的启动类是不同的（java命令的classname参数），拷贝这个模板时需要修改）：</li>
</ol>


<p> &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
 <project name="ExProj" basedir="./" default="run">
  <path id="lib.path">
   <fileset dir="${basedir}">
    <include name="**/*.jar"/>
   </fileset>
  </path>
  <target name="compile">
   <javac srcdir="${basedir}" destdir="${basedir}"
    classpathref="lib.path" encoding="UTF-8" debug="true"/>
  </target>
  <target name="run" depends="compile">
   <java classname="org.leechau.HelloWorld">
    <classpath>
     <pathelement path="${basedir}"/>
    </classpath>
   </java>
  </target>
 </project></p>

<ol>
<li>运行构建：[Tools -> Build]（快捷键Ctrl+B）；</li>
</ol>


<h1>打开Vintage模式</h1>

<p>Vintage是vi风格的操作方式，当然要打开啦，方法是：</p>

<ol>
<li><p>在user preference里加上："ignored_packages": []</p></li>
<li><p>如果希望打开文档时初始状态是命令模式而不是插入模式，再加上："vintage_start_in_command_mode": true</p></li>
</ol>


<h1>自定义代码模板</h1>

<ol>
<li><p>[Tools -> New Snippet&hellip;];</p></li>
<li><p>填写模板内容（content），触发器（写完触发器按tab键展开为content中定义的代码）和有效范围（定义那些文件中此模板有效）；</p></li>
<li><p>保存模板文件：文件名统一约定为“范围名-触发器 .sublime-snippet”；</p></li>
</ol>


<p>参考<a href="http://www.granneman.com/webdev/editors/sublime-text/top-features-of-sublime-text/quickly-insert-text-and-code-with-sublime-text-snippets/#test">http://www.granneman.com/webdev/editors/sublime-text/top-features-of-sublime-text/quickly-insert-text-and-code-with-sublime-text-snippets/#test</a></p>

<p>实例：Java代码中终端打印语句的代码模板（spl + <Tab> -> System.out.println(${1});）：</p>

<p> <snippet>
  <content>&lt;![CDATA[
 System.out.println(${1});
 ]]&gt;</content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>spl</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.java</scope>
 </snippet></p>

<p>如果设置后不生效，检查各个标签的大小写是否正确（snippet文件是大小写敏感的），例如CDATA要大写，tabTrigger中T大写。</p>

<h1>Best Practice</h1>

<ul>
<li>所有的个性化配置都写在"Settings - User"，不要修改"Settings -> Default"；</li>
</ul>


<h1>Trouble Shooting</h1>

<ul>
<li><p>&ldquo;Decode error - output not utf-8&rdquo; when build java files: this is caused by adding &ldquo;"shell&rdquo;: true" in JavaC.sublime-build. cmd.exe use GBK(cp936) for console output encoding, which is different with sublime&rsquo;s default output encoding utf-8. So adding &ldquo;"encoding&rdquo;: &ldquo;cp936&rdquo;&ldquo; in JavaC.sublime-build will resolve this problem. Reference: <a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=1535&amp;start=0">http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;t=1535&amp;start=0</a></p></li>
<li><p>Run Java without Ant: reference <a href="http://stackoverflow.com/questions/12030865/sublime-text-2-wont-run-java.">http://stackoverflow.com/questions/12030865/sublime-text-2-wont-run-java.</a> But when your java codes have package names, it&rsquo;s really difficult to compile and run them because package names are hardly get by sublime. So always use Ant to build java codes in sublime.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
