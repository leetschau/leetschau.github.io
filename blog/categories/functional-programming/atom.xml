<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional Programming | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Function of Getting Factors in Different Languages]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/17/160802/"/>
    <updated>2013-12-17T16:08:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/17/160802</id>
    <content type="html"><![CDATA[<h1>Haskell</h1>

<blockquote><p>factors n = [x | x &lt;- [1..n], n <code>mod</code> x == 0]</p>

<p>factors 4800
 &hellip;</p>

<p>length $ factors 4800</p></blockquote>

<p> 42</p>

<p>Add &ldquo;let&rdquo; before function definition when running in GHCi.</p>

<h1>Python</h1>

<blockquote><blockquote><blockquote><p>factors = lambda n: [x for x in range(1,n+1) if n % x == 0]</p>

<p>factors(4800)</p></blockquote></blockquote></blockquote>

<p> &hellip;</p>

<blockquote><blockquote><blockquote><p>len(factors(4800))</p></blockquote></blockquote></blockquote>

<p> 42</p>

<h1>Clojure</h1>

<p> user=> (defn factors [n] (filter #(= (mod n %) 0) (vec (range 1 (+ 1 n)))))</p>

<p> user=> (factors 4800)
 &hellip;
 user=> (count (factors 4800))</p>

<p> 42</p>

<h1>Ruby</h1>

<blockquote><p>factors = lambda {|n| (1..n).to_a.collect {|x| x if n % x == 0}.compact}
factors.call(4800)
 => &hellip;</p>

<p>factors.call(4800).size</p></blockquote>

<p> => 42</p>

<p>Compare Ruby version with that of Python, Python&rsquo;s style is more &ldquo;functional&rdquo;, while Ruby&rsquo;s style is pure object-oriented &ldquo;object.message&rdquo; format.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCO in Python]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/11/174636/"/>
    <updated>2013-12-11T17:46:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/11/174636</id>
    <content type="html"><![CDATA[<p>TCO (Tail Recursion Optimization) will probably never be supported by CPython because Guido believe TCO will make debugging difficult by messing up tracebacks.</p>

<p>Try the following scripts:</p>

<p> cnt = 1000</p>

<p> def trisum(n, csum):
  if n == 0:
   return csum
  else:
   return trisum(n-1, csum+n)
 print trisum(cnt,0)</p>

<p>It runs OK when cnt is 10 or 100, but when it&rsquo;s 1000 a runtime error raised: &ldquo;RuntimeError: maximum recursion depth exceeded&rdquo;.</p>

<p>You can always use iteration to replace recursion like that in the following reference, but that is not FP.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion">http://stackoverflow.com/questions/13591970/does-python-optimize-tail-recursion</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Ruby 1.9]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/09/175225/"/>
    <updated>2013-12-09T17:52:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/09/175225</id>
    <content type="html"><![CDATA[<ul>
<li><p>Blocks are just a special syntactic sugar in Ruby to create Procs.</p></li>
<li><p>Lambdas are really just Procs, but with two important differences:</p></li>
<li><p>Lambdas check the arguments they receive, just like methods. Procs do not. This means if you pass only one argument to a Lambda that takes two arguments, you’ll get an ArgumentError. If you do the same to a Proc, it will just blindly accept the ones you did give, and set the rest of the arguments to nil;</p></li>
<li><p>Any return statements used in a Proc will also return from the method that called that Proc. Lambdas, on the other hand, will not. This means you can call a Lambda, get its return value, and process it, all within the one method;</p></li>
<li><p>Currying is the ability to take a function that accepts n parameters and generate from it one of more functions with some parameter values already filled in. In RUby 1.9, you create a curry-able proc by calling the curry method on it. If you subsequently call this curried proc with fewer parameters than it expects, it will not execute. Instead, it returns a new proc with those parameters already bound;</p></li>
</ul>


<p>Ref:</p>

<p><a href="http://www.sitepoint.com/functional-programming-techniques-with-ruby-part-i/">Functional Programming Techniques With Ruby: Part I, II and III</a></p>

<p><a href="http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html">Fun with Procs in Ruby 1.9</a></p>

<p><a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">Proc in Ruby 1.9.3 Documentation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FP vs OOP]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/02/111254/"/>
    <updated>2013-12-02T11:12:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/02/111254</id>
    <content type="html"><![CDATA[<h1>Four Paradigms of Decomposing Problems</h1>

<ul>
<li><p>Procedural: C, Pascal, Unix shells;</p></li>
<li><p>Declarative: SQL;</p></li>
<li><p>Object-oriented: Smalltalk, Java;</p></li>
<li><p>Functional: Haskell;</p></li>
</ul>


<h1>Relations of FP and OOP</h1>

<p>&ldquo;Functional programming can be considered the opposite of object-oriented programming. Objects are little capsules containing some internal state along with a collection of method calls that let you modify this state, and programs consist of making the right set of state changes. Functional programming wants to avoid state changes as much as possible and works with data flowing between functions.&rdquo; &ndash;From <a href="http://docs.python.org/2/howto/functional.html">Functional Programming HOWTO</a></p>

<p>&ldquo;I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.&rdquo; &ndash;Joe Armstrong (the creator of Erlang) discussed in &ldquo;Coders At work&rdquo; about the reusability of Object-Oriented Programming.
To be fair, in my opinion it&rsquo;s not an intrinsic problems of OOP. You can write OOP code which is also functional, but certainly:
* Typical OOP tends to emphasize change of state in objects.
* Typical OOP tends to impose tight coupling between layers (which hinders modularization).
* Typical OOP mixes the concepts of identity and state.
* Mixture of data and code raises both conceptual and practical problems.
&ndash; <a href="http://code.google.com/p/tokland/wiki/RubyFunctionalProgramming">Ruby Functional Programming</a>
Rich Hickey, the creator of Clojure (a functional Lisp-dialect for the JVM), discusses state, values and identity in this <a href="http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey">excellent talk</a>.</p>

<h1>If we can do functional programming with Python, do we need a specific functional programming language?</h1>

<p><a href="http://programmers.stackexchange.com/questions/42986/if-we-can-do-functional-programming-with-python-do-we-need-a-specific-functiona">http://programmers.stackexchange.com/questions/42986/if-we-can-do-functional-programming-with-python-do-we-need-a-specific-functiona</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note About `What Does Functional Programming Mean`]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/26/175603/"/>
    <updated>2013-11-26T17:56:03+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/26/175603</id>
    <content type="html"><![CDATA[<p>Tony Morris: What Does Functional Programming Mean?</p>

<p>From: <a href="http://stackoverflow.com/questions/159797/is-ruby-a-functional-language">http://stackoverflow.com/questions/159797/is-ruby-a-functional-language</a></p>
]]></content>
  </entry>
  
</feed>
