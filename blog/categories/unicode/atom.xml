<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unicode | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/unicode/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-20T11:01:10+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chinese Characters Can't Be Displayed Correctly in Git Log]]></title>
    <link href="http://leetschau.github.io/blog/2015/07/31/160627/"/>
    <updated>2015-07-31T16:06:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/07/31/160627</id>
    <content type="html"><![CDATA[<p>On Ubuntu 14.04, <code>cat</code> can display Chinese characters correctly.
But in <code>vi</code> and <code>less</code> Chinese characters can&rsquo;t display correctly.</p>

<p>Solution:</p>

<p>Run <code>export LC_ALL=en_US.UTF-8</code> before <code>git log</code>.</p>

<p>If it works, add this line into /etc/environment.</p>

<p>If it doesn&rsquo;t work, run <code>export LANG=en_US.UTF-8</code>.</p>

<p>If it doesn&rsquo;t work, run <code>apt-get install language-pack-en-base</code>.</p>

<p>In vim, run <code>set enc=utf-8</code>.</p>

<p>Ref:</p>

<p><a href="http://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue">http://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue</a></p>

<p><a href="http://stackoverflow.com/questions/5166652/how-to-view-utf-8-characters-in-vim-or-gvim">http://stackoverflow.com/questions/5166652/how-to-view-utf-8-characters-in-vim-or-gvim</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate String Length Containing Chinese Characters]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/07/111310/"/>
    <updated>2015-05-07T11:13:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/07/111310</id>
    <content type="html"><![CDATA[<p>I want to remove all lines with only 1 Chinese character.
The origin file is very large,
so I have to filter out all lines with 1 character.
And remove them together.</p>

<p>Sort all lines in the file by their length is a easy way to achieve this.
The content of file origin.txt is:</p>

<blockquote><p>一十一
一十二
一十三
一十四
一十五
一十六
一十七
一十八
一十九
二十</p></blockquote>

<h1>Shell</h1>

<pre><code>awk '{print length, $0}' origin.txt | sort -n | cut -d " " -f2- | uniq &gt; target.txt
</code></pre>

<h1>Python</h1>

<h1>Node</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrapy Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/30/175224/"/>
    <updated>2015-03-30T17:52:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/30/175224</id>
    <content type="html"><![CDATA[<p>Install on Ubuntu/Mint:</p>

<pre><code>sudo apt-get install python-twisted python-libxml2 python-simplejson
sudo pip install scrapy
</code></pre>

<p>Create an alias in ~/.bash_aliases for convenience: <code>alias sa='scrapy'</code>.</p>

<p>Crawl website in shell:</p>

<pre><code>$ scrapy shell http://myexpo.com/exhibition/32191.html
...
[1] name = response.xpath('//h1/text()').extract()[0]
[2] time = response.xpath('//div[@class="location"]/span[1]/text()').extract()[0].split('\r\n')[1].strip()
[3] addr = response.xpath('//div[@class="location"]/span[2]/text()').extract()[0].split('\r\n')[1].strip()
</code></pre>

<h1>Crawl my blog</h1>

<p>$ sa startproject myblog</p>

<p>Ref:</p>

<p><a href="http://blog.csdn.net/u012150179/article/details/32911511">scrapy研究探索（二）——爬w3school.com.cn</a></p>

<h1>Unicode character in Python 2.x</h1>

<p>You have to add u'&lsquo; prefix to a unicode string in Python 2.x.
Their raw value is in &rsquo;\u' format.
To see them in human friendly format, use <code>print()</code> function.</p>

<pre><code>In [85]: ex = u'中国2015年3月'

In [86]: ex
Out[86]: u'\u4e2d\u56fd2015\u5e743\u6708'

In [87]: print(ex)
中国2015年3月

In [88]: ex.find(u'年')
Out[88]: 6
</code></pre>

<p>See more detailed contents about this topic in note &ldquo;Unicode and File I/O in Python 2.X and 3.X&rdquo;.</p>

<h1>XPath Grammar</h1>

<p>Ref: <a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp">XPath 语法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transfer Archive Files Containing Chinese Filenames Between Linux and Windows]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/13/114850/"/>
    <updated>2015-01-13T11:48:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/13/114850</id>
    <content type="html"><![CDATA[<h1>From Windows to Linux</h1>

<p>Download <a href="http://www.7-zip.org/">7-Zip</a> Windows installer (7z920-x64.msi for now) and install it.</p>

<p>Create archive file in &ldquo;7z&rdquo; format.</p>

<p>On Linux, extract it with <code>7z x mypkg.7z</code>.
Or test it with <code>7z l mypkg.7z</code>.</p>

<p>Note: You can create zip file with 7-Zip as well,
but it can&rsquo;t handle Chinese filename correctly on Linux.</p>

<h1>From Linux to Windows</h1>

<p>Install 7-Zip on Mint: <code>sudo aptitude install p7zip-full</code>;</p>

<blockquote><p>p7zip is command line port of 7-Zip for POSIX systems, including Linux.</p></blockquote>

<p>Create archive file &ldquo;myPkg.zip&rdquo; from path &ldquo;targetPath&rdquo;:
<code>7z a filename.zip targetPath</code>;</p>

<p>7z and zip format both handle Chinese filename correctly.</p>

<p>On Windows, install 7-Zip (see above section), and extract it with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode and File I/O in Python 2.X and 3.X]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/17/082031/"/>
    <updated>2014-02-17T08:20:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/17/082031</id>
    <content type="html"><![CDATA[<p>In Python 2.x, the default string is byte string, which means every byte is convert to a character.
If you write a Unicode string, you have to write it as u'&hellip;&lsquo;.
On the contrary, in Python 3.x, the default string is Unicode string.
If you want a byte string, you have to write it as b&rsquo;&hellip;&lsquo;.</p>

<p>In Python 3.3:</p>

<pre><code>chn = '将帖子翻译为中\n'
with open('py3uni', 'w') as f:
    f.write(chn)
print(chn.encode('utf-8'))
mygbk = chn.encode('gbk')
with open('py3gbk', 'wb') as f:
  f.write(mygbk)
readgbk = open('py3gbk', encoding='gbk').read()
print(readgbk)
print(type(readgbk))  # &lt;class 'str'&gt;
</code></pre>

<p>In Python 2.7:</p>

<pre><code># -*- encoding: utf-8 -*-
import codecs
inputStr = u'将帖子翻译为中文2015年3月\n'

gbkFn = 'gbkFile'
utf8Fn = 'utf8File'
print('Print original Unicdoe string: ' + inputStr)
print('Print in UTF-8 encoding: ' + inputStr.encode('utf-8'))
with codecs.open(utf8Fn, 'w', 'utf-8') as f:
    f.write(inputStr)
fromUTF8 = codecs.open(utf8Fn, encoding='utf-8').read()
with codecs.open(gbkFn, 'w', 'gbk') as f:
    f.write(inputStr)
fromGBK = codecs.open(gbkFn, encoding='gbk').read()
print('Strings from different encodings are the same?')
print(fromUTF8 == fromGBK)
print("\nString type:")
print(type(fromGBK))
</code></pre>

<p>You can convert gbkFile to utf8File in shell with:
<code>iconv -f gbk -t utf8 gbkFile &gt; utf8File</code>.</p>

<p>You can also write strings to file in this way:</p>

<pre><code>gbkStr = inputStr.encode('gbk')
with open('gbkFile', 'wb') as f:
    f.write(gbkStr)
</code></pre>

<p>While it&rsquo;s not as concise as the previous method.</p>
]]></content>
  </entry>
  
</feed>
