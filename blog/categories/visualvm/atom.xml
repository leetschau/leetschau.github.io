<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visualvm | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/visualvm/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-07-15T11:08:23+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用visualvm监控远程主机上的java进程]]></title>
    <link href="http://leetschau.github.io/blog/2012/09/18/193739/"/>
    <updated>2012-09-18T19:37:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/09/18/193739</id>
    <content type="html"><![CDATA[<h1>启动参数配置</h1>

<p>要监控PoolServer的运行情况，需要在启动时加上以下参数：</p>

<p> &ldquo;${JAVA_HOME}/bin/java&rdquo; -Dcom.sun.management.jmxremote \
 -Dcom.sun.management.jmxremote.port=9090 \
 -Dcom.sun.management.jmxremote.authenticate=false \
 -Dcom.sun.management.jmxremote.ssl=false \
 -Djava.rmi.server.hostname=10.0.2.47 \
 -Dservice_name=godu-3.0 -cp $JARS transfer.PoolServer</p>

<h1>系统配置</h1>

<p>首先在jstatd所在目录下（$JAVA_HOME/bin）新建一个policy文件jstatd.all.policy：</p>

<p>grant codebase &ldquo;file:${java.home}/../lib/tools.jar&rdquo; {</p>

<p> permission java.security.AllPermission;</p>

<p>};</p>

<p>然后运行jstatd：</p>

<p> jstatd -J-Djava.security.policy=jstatd.all.policy</p>

<p>程序启动后没有任何输出，但用jps和netstat -an|grep 1099可以验证jstatd是否启动成功。</p>

<p>参考：<a href="http://liwenqiu.github.com/blog/2012/02/22/use-visualvm-monitor-remote-java/">用VisualVM远程监控Java进程</a>（此文应该是基于<a href="http://docs.oracle.com/javase/6/docs/technotes/tools/share/jstatd.html">jstatd - Virtual Machine jstat Daemon</a>），注意其中的policy文件的写法，不要把${java.home}误写成${java_home}，因为这不是环境变量。</p>

<hr />

<p>2013-02-22更新</p>

<p>不运行上述"jstatd -J-D&hellip;&ldquo;情况下连接113服务器失败，运行jstatd命令需要首先安装openjdk6，装完后运行该命令，又用Ctrl+C停止，在jVisualVM中配置远程主机10.31.1.113，在上面右键：添加JMX连接，“连接”项设为10.31.1.113:9090，连接成功后在“抽样器”中首先进行“CPU设置”，仅分析"transfer.*"，然后点击"CPU"按钮进行CPU抽样，可以看到各个public方法的执行时间。</p>
]]></content>
  </entry>
  
</feed>
