<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Build | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/build/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-08-27T13:25:34+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Java Project With Eclipse, Gradle and Git]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/11/144152/"/>
    <updated>2014-08-11T14:41:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/11/144152</id>
    <content type="html"><![CDATA[<h1>Install and Usage</h1>

<p>The order should be:</p>

<ol>
<li><p>Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Eclipse: download, extract;</p></li>
<li><p>Install Gradle plugin for eclipse via &ldquo;Market Place&rdquo; in Eclipse, because it&rsquo;s inconvenient to run gradle tasks in console while edit files in Eclipse;</p></li>
<li><p>Configure Gradle plugin: set its working JDK;</p></li>
<li><p>Build a new Gradle project in Eclipse, add git version control;</p></li>
<li><p>Run Gradle tasks: right click &ldquo;build.gradle&rdquo; file, then select &ldquo;Gradle -> Tasks Quick Launcher&rdquo; (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h2>Frequently Used Tasks</h2>

<p>Some need adding &ldquo;apply plugin: &lsquo;application&rsquo;&rdquo; and &ldquo;mainClassName = &lsquo;com.boco.gdep.Probe&rsquo;&rdquo; into build.gradle. Read <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">Gradle Application Plugin</a> for details.</p>

<ul>
<li><p>clean</p></li>
<li><p>check</p></li>
<li><p>test</p></li>
<li><p>compileJava</p></li>
<li><p>run</p></li>
<li><p>startScripts: create start scripts for your application;</p></li>
<li><p>distZip: build final deploy package, find zip file under build/distributions folder;</p></li>
<li><p>installApp: install package created in &ldquo;distZip&rdquo; into build/install folder;</p></li>
</ul>


<p>Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle&rsquo;s test task (using Shift + Ctrl + Alt + R, then input &ldquo;test&rdquo; and <Enter>).</p>

<p>All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my <a href="https://github.com/leetschau/GDEP">GDEP</a> project.</p>

<h1>Debug Gradle with println</h1>

<p>Add the following scripts into build.gradle, then run &ldquo;check&rdquo; task.</p>

<pre><code>println "--------"
println project.name
println "--------"
</code></pre>

<h2>Customize project name</h2>

<p>Add a new file &ldquo;settings.gradle&rdquo; at the root of the project, add a string &ldquo;rootProject.name = &lsquo;myProj&rsquo;&rdquo; into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc.</p>

<hr />

<p>First install gradle, then run the following commands:</p>

<pre><code>$ mkdir myproj
$ cd myproj
$ gradle init --type java-library
$ mkdir src/main/resources
$ mkdir src/test/resources
</code></pre>

<p>Now the project layout is ready. If you want to develop this project in Eclipse, add &ldquo;apply plugin: &lsquo;eclipse&rsquo;&rdquo; into build.gradle, then run:</p>

<pre><code>$ gradle eclipse
</code></pre>

<p>Then open this project with Eclipse.</p>

<p>The default project layout (file structure) of &ldquo;java&rdquo; plugin is described in &ldquo;Project layout&rdquo; section of <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>:</p>

<p>src/main/java:           Production Java source
src/main/resources:      Production resources
src/test/java:           Test Java source
src/test/resources:      Test resources
src/sourceSet/java:      Java source for the given source set
src/sourceSet/resources: Resources for the given source set</p>

<p>Add git version control with:</p>

<pre><code>$ cd myproj
$ git init
</code></pre>

<p>In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse.</p>

<p>Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore:</p>

<pre><code>$ cat .gitignore
build
.gradle
gradle
...
</code></pre>

<p>Three Eclipse component &ldquo;.settings&rdquo;, &ldquo;.project&rdquo; and &ldquo;.classpath&rdquo; should be added to git repository.</p>

<h1>Merge Github Project and Eclipse Gradle Project</h1>

<ol>
<li><p>git clone <a href="https://github.com/leetschau/GDEP.git">https://github.com/leetschau/GDEP.git</a> gdep2</p></li>
<li><p>In Eclipse, build a new Gradle project &ldquo;GDEP-0811&rdquo; with &ldquo;Quick start&rdquo; template;</p></li>
<li><p>Move all files and folders in gdep2 to GDEP-0811;</p></li>
<li><p>Refresh project in Eclipse;</p></li>
<li><p>Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter &ldquo;build&rdquo;, and press <Enter>. If you encounter a &ldquo;Cannot find System Java Compiler&rdquo; error, set Gradle&rsquo;s Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select &ldquo;Workspace JRE&rdquo;: jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
