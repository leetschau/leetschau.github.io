<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: {"eaten"=>["wordpress.post"]} | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/{-eaten-equals->-wordpress-dot-post-}/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-07-15T11:08:23+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start Cygwin in ConEmu With Executor]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/10/150602/"/>
    <updated>2013-05-10T15:06:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/10/150602</id>
    <content type="html"><![CDATA[<p>Cygwin is powerful, but its single window interface is inconvenient. So I put it in ConEmu, and invoke it via Executor.</p>

<p>When define keyword in Executor, the command is &ldquo;d:\Apps\ConEmu\ConEmu.exe&rdquo;, parameters are &ldquo;/Single /cmd e:\myDoc\cygwinRoot\Cygwin.bat&rdquo;. Here &ldquo;/cmd&rdquo; can&rsquo;t be ommited, while it can be ommited when there is no &ldquo;/Single&rdquo; option. So the following two forms are valid:</p>

<p> d:\Apps\ConEmu\ConEmu.exe /Single /cmd e:\myDoc\cygwinRoot\Cygwin.bat</p>

<p> d:\Apps\ConEmu\ConEmu.exe e:\myDoc\cygwinRoot\Cygwin.bat</p>

<p>But &ldquo;d:\Apps\ConEmu\ConEmu.exe /Single e:\myDoc\cygwinRoot\Cygwin.bat&rdquo; is malformed, cygwin can&rsquo;t be invoked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于ScheduledExecutorService的并发定时任务处理能力测试]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/17/111523/"/>
    <updated>2013-04-17T11:15:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/17/111523</id>
    <content type="html"><![CDATA[<h1>测试代码</h1>

<h2>定时器类</h2>

<p> package business.util;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import transfer.IUserParser;
 public class MyTimer {
  private static ScheduledExecutorService ses = Executors
    .newSingleThreadScheduledExecutor();</p>

<p>   // .newScheduledThreadPool(10);
  private MyTimer() {
  }
  /<strong>
   * 设置某一parser正在执行脚本的超时时间
   *
   * @param parser
   *   进行超时控制的解析器
   * @param timeout
   *   超时时间，单位：秒
   * @return
   */
  public static ScheduledFuture&lt;?> set(IUserParser parser, int timeout) {
   CloseRutine routine = new CloseRutine(parser);
   ScheduledFuture&lt;?> job = ses.schedule(routine, timeout,
     TimeUnit.SECONDS);
   return job;
  }
  /</strong>
   * 清除计时器
   *
   * @param unit
   * @return
   <em>/
  public static boolean cancel(ScheduledFuture&lt;?> job) {
   return job.cancel(true);
  }
  /**
   * 关闭此计时器（进程）
   </em>/
  public static void shutdown() {
   ses.shutdown();
  }
 }
 class CloseRutine implements Runnable {
  private final IUserParser parser;
  CloseRutine(IUserParser parser) {
   this.parser = parser;
  }
  @Override
  public void run() {
   parser.closePeer();
  }
 }</p>

<h1>#</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动将Evernote笔记发布到博客上]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/06/000709/"/>
    <updated>2013-04-06T00:07:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/06/000709</id>
    <content type="html"><![CDATA[<p>Evernote笔记要自动分享到博客还真不那么容易，借鉴<a href="https://arjw.wordpress.com/2011/08/25/of-the-note/#">Using Evernote to Post to WordPress</a>，申请了一个Wordpress帐号，点击dashboard左边的“控制板” -> My Blogs -> Post by Email下面的"Enable"按钮，会出现一个email地址，向这个地址发送邮件就可以发布博客了，可以先将写好的笔记保存在一个文件里，然后通过python的email模块向这个地址发邮件的方法实现自动发布博客，然后用evernote的local api将这个文件变成一个新笔记保存在数据库中。</p>

<p>对于现有的笔记，只能在菜单“笔记->分享->通过电子邮件发送”，填上Email地址的方法，刚才试验成功，但如果修改这个笔记重新发送一次，wordpress上不会覆盖原来的笔记，而是发一条新博文，还有一个问题是wordpress官网的<a href="http://wordpress.com">免费博客</a>虽然很好，但被GFW屏蔽了。</p>

<p><a href="http://aaditya.info/blog/2012/08/clipboard-to-email-python-code/">Clipboard to Email – Python Code</a>演示了如果将剪贴板里的内容通过email发送出去，也是一种解决问题的方法。</p>

<p>python 2.7.3 doc: <a href="http://docs.python.org/2/library/email-examples.html">18.1.11. email: Examples</a>有发送html文档的完整例子；</p>

<p>126和163也支持邮件发博客，用自己的邮箱发送到blogmail@188.com，可以用python的smtplib，通过smtp.163.com发送；</p>

<p>下面这个发送text邮件的实例在163博客上成功发布（sendmail方法如果返回一个空字典，说明发送成功）：</p>

<p> import smtplib
 # Import the email modules we&rsquo;ll need
 from email.mime.text import MIMEText
 # Create a text/plain message
 msg = MIMEText(&lsquo;this is a test blog from email&rsquo;)
 me = &lsquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x6c;&#101;&#x65;&#x5f;&#x63;&#x68;&#97;&#117;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#x6c;&#x65;&#x65;&#95;&#99;&#x68;&#x61;&#x75;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>&rsquo;
 you = &lsquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x62;&#108;&#111;&#103;&#x6d;&#x61;&#x69;&#x6c;&#64;&#49;&#56;&#56;&#x2e;&#x63;&#111;&#109;">&#98;&#108;&#x6f;&#103;&#x6d;&#97;&#105;&#108;&#x40;&#x31;&#x38;&#56;&#x2e;&#x63;&#111;&#109;</a>&rsquo;
 msg[&lsquo;Subject&rsquo;] = &lsquo;A Test Blog from Email&rsquo;
 msg[&lsquo;From&rsquo;] = me
 msg[&lsquo;To&rsquo;] = you
 # Send the message via our own SMTP server, but don&rsquo;t include the
 # envelope header.
 s = smtplib.SMTP(&lsquo;smtp.163.com&rsquo;)
 s.login(&lsquo;lee_chau&rsquo;, &lsquo;abaqus67&rsquo;)
 s.sendmail(me, [you], msg.as_string())
 s.quit()</p>

<hr />

<p>2013-04-13更新：</p>

<p>参考<a href="http://fun.blog.ustc.edu.cn/?p=148">从Evernote自动发博客到WordPress</a>，可以用<a href="https://eatags.com/">eatags.com</a>将笔记发布到wordpress.com上，设置好共享之后，要发布的笔记只要加上标签“ eat.wordpress.post ”（参考<a href="https://eatags.com/features%EF%BC%89%E5%B0%B1%E4%BC%9A%E8%A2%AB%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E5%88%B0wordpress.com%E4%B8%8A%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%B5%8B%E8%AF%95%E7%9A%84%E7%BB%93%E6%9E%9C%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%EF%BC%8C%E6%98%AF%E7%9B%AE%E5%89%8D%E6%89%80%E7%9F%A5%E6%9C%80%E5%A5%BD%E7%9A%84%E5%90%8C%E6%AD%A5%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%88%96%E8%80%85%E7%94%A8">https://eatags.com/features%EF%BC%89%E5%B0%B1%E4%BC%9A%E8%A2%AB%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E5%88%B0wordpress.com%E4%B8%8A%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%B5%8B%E8%AF%95%E7%9A%84%E7%BB%93%E6%9E%9C%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%EF%BC%8C%E6%98%AF%E7%9B%AE%E5%89%8D%E6%89%80%E7%9F%A5%E6%9C%80%E5%A5%BD%E7%9A%84%E5%90%8C%E6%AD%A5%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%88%96%E8%80%85%E7%94%A8</a><a href="http://www.evreblog.us">everblog.us</a>也能将evernote笔记发布到everblog.us网站上，但不能显示图片，everblog选中一个笔记本后会将该笔记本下所有的笔记都发布到everblog网站上，适合批量发布；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CheckStyle做代码检查]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/20/172355/"/>
    <updated>2013-03-20T17:23:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/20/172355</id>
    <content type="html"><![CDATA[<h1>命令行应用</h1>

<p>官网文档对命令行用法讲解的很详细，基本分为以下几步。</p>

<h2>安装</h2>

<p>下载独立运行包（checkstyle-5.6-bin.zip），解压到d:\apps下；</p>

<h2>写配置文件</h2>

<p>可以在eclipse中用插件eclipse-cs写出来，然后查到这个配置的文件名，然后拷贝出来作为配置文件；</p>

<p>cc.xml内容如下：</p>

<p> &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
 &lt;!DOCTYPE module PUBLIC &ldquo;-//Puppy Crawl//DTD Check Configuration 1.3//EN&rdquo; &ldquo;<a href="http://www.puppycrawl.com/dtds/configuration_1_3.dtd">http://www.puppycrawl.com/dtds/configuration_1_3.dtd</a>&rdquo;>
 <module name="Checker">
  <property name="severity" value="warning"/>
  <module name="TreeWalker">
  <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
  <property name="fileExtensions" value="java"/>
  <module name="MethodLength">
   <property name="max" value="200"/>
  </module>
  <module name="NestedIfDepth">
   <property name="max" value="5"/>
  </module>
  <module name="CyclomaticComplexity"/>
  <module name="ParameterNumber">
   <property name="max" value="6"/>
  </module>
  </module>
  <module name="StrictDuplicateCode">
  <property name="fileExtensions" value="java"/>
  <property name="min" value="75"/>
  </module>
  <module name="FileLength">
  <property name="fileExtensions" value="java"/>
  <property name="max" value="1000"/>
  </module>
 </module></p>

<p>注意<module>内如果有名为severity的子标签，值为ignore表示该项检查被忽略（无效），如果要执行此项检查可以去掉该子标签或者把值改为warning：</p>

<p> <module name="Checker"></p>

<p>  <property name="severity" value="warning"/></p>

<p>  &hellip;</p>

<p>在Jenkins上执行Checkstyle检查时需要将severity设置为wanning，因为默认违反规则将被作为error，导致ant脚本执行结果被标记为失败，从而整个BVT执行失败。</p>

<h2>执行代码检查</h2>

<p>下面的命令检查了E:\workspace\JDK6UTF8\Godu3NewBuffer\src目录中所有代码的圈复杂度：</p>

<p>E:\workspace\JDK6UTF8\Godu3NewBuffer>java -jar d:\Apps\checkstyle-5.6\checkstyle-5.6-all.jar -c cc.xml -r src -o result.txt</p>

<p>其中-c后面写规则（配置）文件名，-r后面写待检查的文件/目录名，-o后面是结果输出文件名，-f xml表示输出为xml文件（默认是plain文本文件），如果不需要保存到文件中，只是查看一下结果，去掉-o，结果输出到屏幕上；</p>

<h1>以Ant任务形式运行</h1>

<ol>
<li><p>将上述zip包中的checkstyle-5.6-all.jar文件拷贝到$ANT_HOME/lib下；</p></li>
<li><p>下面是一个简单的checkstyle任务，更多的检查方法参考<a href="http://checkstyle.sourceforge.net/anttask.html">Ant Task of Checkstyle</a></p></li>
</ol>


<p> <target name="review">
  &lt;cs:checkstyle config=&ldquo;tyRules.xml&rdquo; xmlns:cs=&ldquo;antlib:com.puppycrawl.tools.checkstyle&rdquo;>
   <fileset dir="src" includes="**/*.java"/>
   <formatter type="plain"/>
   <formatter type="xml" toFile="checkstyle_reports.xml"/>
  &lt;/cs:checkstyle>
 </target></p>

<h1>作为Eclipse插件</h1>

<h2>安装</h2>

<p>这个插件叫<a href="http://eclipse-cs.sourceforge.net/">eclipse-cs</a>，先是在线装，连不上，改为下载zip包，解压到dropins目录的方法安装成功。</p>

<h2>使用</h2>

<p>CheckStyle的功能是通过一个具体的配置（configuration）来发挥作用的，对于被检查的项目，在属性里activate checkstyle，它就会在每次构建（build）项目的时候自动运行，如果是自动构建，则每次保存文件都会触发checkstyle执行代码检查。</p>

<p>使用CheckStyle分为两步，首先是Window->Preference里新建一个configuration，用来定义要检查的项目（如代码的圈复杂度、javadoc格式等），然后在被检查的项目属性里指定使用这个configuration，并定义检查的范围（例如只检查打开的文件、指定具体的包等）。</p>

<h3>进行代码复杂度检查</h3>

<p>第一步配置执行复杂度检查的configuration: Window -> Preference -> CheckStyle -> Global check configurations -> new，打开新建conf的窗口，写一个名字然后点OK：</p>

<p>在configuration窗体里选中 Metrics -> Cyclomatic Complexity：</p>

<p>点Add后出现配置窗体，在这里输入严重级别和判断标准，默认值为10，即当圈复杂度超过10时标记出来，确认退出。</p>

<p>第二步是在被检查的项目属性的checkstyle窗体中配置参数，首先是激活checkstyle，然后是选择一个configuration，最后是配置那些文件不进行检查，配好后确认就OK了。</p>

<p>检查结果的汇总在Window -> Show View -> Checkstyle violations中，还提供了一个饼图窗口；</p>

<p>GODU的新版本有些方法复杂度已经超过20了，汗，后面得好好重构才行。下面是checkstyle推荐的复杂度判断标准：</p>

<p> Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!</p>

<h1>总结</h1>

<p>Eclipse插件没有生成报告功能，优点是提供了离线安装包，安装过程对我等天朝草民来说比较简单；</p>

<p>与PMD相比，CheckStyle适合在写代码的同时打开代码检查功能进行“实时监控”，如果是代码已写完，需要对整体质量进行评估，或者找问题点，则PMD比较适合，因为它具备PMD视图，可以对结果汇总。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较不同文件夹下源代码的内容差异]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/07/111330/"/>
    <updated>2012-12-07T11:13:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/07/111330</id>
    <content type="html"><![CDATA[<h1>场景</h1>

<p>现有两个源代码文件夹："d:\workspace\GoduServer3.0\src"和"d:\workspace\Godu_Server_2.3\src"，分别包含多级子目录，需要比较所有子目录中文件内容的差异（不能只比较文件的大小和修改时间）。</p>

<h1>Linux</h1>

<p>diff -rq, see &ldquo; Diff Notes &rdquo;;</p>

<h1>解决方案</h1>

<h2>Windows</h2>

<h3>TotalCmd</h3>

<ol>
<li><p>分别打开要比较的两个文件夹，[Commands -> Synchronize dirs] (Shift+F12);</p></li>
<li><p>取消"Asymmetric"，选中"subdirs", &ldquo;by content&rdquo; and &ldquo;ignore date"，点击"compare&rdquo;;</p></li>
<li><p>TotalCmd会列出所有不同的文件，要比较不同的文件，选中然后右键 -> Compare Left &amp; Right (Ctrl+F3);</p></li>
<li><p>根据文件内容确定同步的方向，点击"Synchronize"；</p></li>
</ol>


<h3>UltraCompare</h3>

<p>用<a href="http://www.ultraedit.com/products/ultracompare.html">UltraCompare Pro</a>的绿色版，解压后在uc.exe所在目录下运行：
uc -d -r -ne -dmf -B d:\workspace\GoduServer3.0\src d:\workspace\Godu_Server_2.3\src</p>

<p>指令格式：uc [options] dir1 dir2</p>

<p>选项含义：</p>

<p>-d：文件夹比较模式（而不是文本比较）；</p>

<p>-r：包含所有子文件夹；</p>

<p>-ne：只显示不同的文件；</p>

<p>-dmf：文本比较模式（逐字节比较，另外还有：-dmb：基本比较模式，只比较文件大小和日期；-dms：智能比较模式）</p>

<p>-B：文本比较时忽略空行；</p>

<p>详见UltraCompare帮助文档“命令行选项”一节。</p>

<p>UC支持界面操作，上面各个选项在工具栏上都有图标，选中后点击两个路径输入框中间的绿色三角按钮就开始比较了（Ctrl+F5），比较完之后可以用工具栏上的各种合并按钮进行合并操作。</p>

<h3>备选方案</h3>

<ul>
<li>免费软件FreeFileSync也具备比较文件内容和子文件夹循环比较的能力，但只能找到不用的文件，不能对选定的文件进行文本比较。</li>
</ul>

]]></content>
  </entry>
  
</feed>
