<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nose | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/nose/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Nose as Unit Test Framework]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/13/101242/"/>
    <updated>2014-01-13T10:12:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/13/101242</id>
    <content type="html"><![CDATA[<p>[chad@chadpc527:~/docs/tmp/mytest]</p>

<p>% workon test</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% pip install nose
&hellip;</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% tree
.
|&ndash; mytest
| |&ndash; <strong>init</strong>.py
| |&ndash; mytest.py
| <code>-- test
|  |-- __init__.py
| </code>&ndash; test_mytest.py
`&ndash; setup.py
2 directories, 5 files</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% python setup.py nosetests
running nosetests
running egg_info
creating mytest.egg-info
writing mytest.egg-info/PKG-INFO
writing top-level names to mytest.egg-info/top_level.txt
writing dependency_links to mytest.egg-info/dependency_links.txt
writing manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
reading manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
writing manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
running build_ext</p>

<h2>. </h2>

<p>Ran 1 test in 0.007s
OK</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat setup.py</p>

<h1>import multiprocessing</h1>

<p>from setuptools import setup
setup(name=&lsquo;mytest&rsquo;,
  version=&lsquo;0.1.0&rsquo;,
  tests_require=[&lsquo;nose&rsquo;])</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat mytest/mytest.py
def myadd(x,y):
 return 10<em>x+y
(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat mytest/test/test_mytest.py
from unittest import TestCase
from mytest.mytest import myadd
class TestMyadd(TestCase):
 def test_myadd(self):
  actual = myadd(3,5)
  self.assertTrue(actual==10</em>3+5)</p>

<p>Or, you can use &ldquo;python setup.py test&rdquo; in this way:</p>

<ol>
<li><p>Add &ldquo;import multiprocessing&rdquo; in setup.py;</p></li>
<li><p>Add &ldquo;test_suite=&lsquo;nose.collector&rsquo;&rdquo; as a parameter in setup() function in setup.py;</p></li>
</ol>


<p>If you run &ldquo;python setup.py test&rdquo; without &ldquo;import multiprocessing&rdquo;, you will get a &ldquo;Error in atexit._run_exitfuncs&rdquo; error with nose 1.3.0 and Python 2.7.3.</p>

<p>Ref: <a href="https://groups.google.com/forum/#!topic/nose-users/fnJ-kAUbYHQ">https://groups.google.com/forum/#!topic/nose-users/fnJ-kAUbYHQ</a></p>
]]></content>
  </entry>
  
</feed>
