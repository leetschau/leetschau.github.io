<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xml | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/xml/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-05-26T17:50:21+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xml Editing in Vi]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/24/113604/"/>
    <updated>2013-06-24T11:36:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/24/113604</id>
    <content type="html"><![CDATA[<h1>Auto complete tags</h1>

<p><a href="http://github.com/sukima/xmledit.git">xmledit</a></p>

<p>installation: git clone <a href="https://github.com/sukima/xmledit.git,">https://github.com/sukima/xmledit.git,</a> then make (unnecessary?)</p>

<p>when you write &ldquo;<mytag>&rdquo;, it will be converted to &ldquo;<mytag></mytag>&rdquo;; if you write &ldquo;<mytag>>&rdquo;, it will be converted to:</p>

<pre><code>&lt;mytag&gt;
&lt;/mytag&gt;
</code></pre>

<p>use &ldquo;:h xml-plugin.txt&rdquo; for more functions;</p>

<p>Note: xmledit is a <em>file-type</em> plugin, which means it will be loaded and only worked when editing a xml file. If you open a temporary buffer or a file without extension &ldquo;xml&rdquo;, this plugin will not work;</p>

<h1>Comment</h1>

<p>NERD Commenter: installation: <code>git clone http://github.com/scrooloose/nerdcommenter.git</code>;</p>

<pre><code>,c&lt;space&gt;: toggle comments on current line;
3,c&lt;space&gt;: toggle comments 3 lines from current line;
,cy: copy selected texts before comment out;
</code></pre>

<p>Ref: <a href="https://github.com/scrooloose/nerdcommenter">https://github.com/scrooloose/nerdcommenter</a></p>

<h1>Surrounding Texts</h1>

<p><a href="https://github.com/tpope/vim-surround">vim-surround</a>:</p>

<p>installation: <code>git clone git://github.com/tpope/vim-surround.git</code>;</p>

<h2>Add Surroundings</h2>

<p>S<tag_name> in linewise visual mode:</p>

<p><code>S&lt;target&gt;</code> on</p>

<pre><code>&lt;copy todir="somepath"/&gt;
&lt;mkdir name="somedir"/&gt;
</code></pre>

<p>results in:</p>

<pre><code>&lt;target&gt;
    &lt;copy todir="somepath"/&gt; 
    &lt;mkdir name="somedir"/&gt; 
&lt;/target&gt; 
</code></pre>

<p>yss<tag_name>: add surroundings to a line:</p>

<p><code>yss&lt;task&gt;</code> on &ldquo;hello world&rdquo; results in <task>hello world</task>, <code>yss"</code> results in &ldquo;hello world&rdquo;;</p>

<p>ysiw<tag_name>: add surroundings to a word:</p>

<p><code>ysiw"</code> results in &ldquo;hello&rdquo; world;</p>

<h2>Change Surroundings</h2>

<p><code>cs...</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reuse Sonar Checkstyle Violation Report for Custom Data Analysis]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/06/201203/"/>
    <updated>2013-06-06T20:12:03+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/06/201203</id>
    <content type="html"><![CDATA[<ol>
<li><p>Write a violation rules file;</p></li>
<li><p>Import it into Sonar as a Quality Profile named as &ldquo;MyRules&rdquo;;</p></li>
<li><p>Add the following properties to ant script:</p>

<p> <property name="sonar.profile" value="MyRules" />
 <property name="sonar.checkstyle.generateXml" value="true" /></p></li>
<li><p>Run Ant script, and you can get the report at $PROJECT_HOME/.sonar/checkstyle-result.xml;</p></li>
<li><p>Use the following python script to extract data from the report:</p>

<p> from xml.etree import ElementTree as ET
 tree = ET.parse(&lsquo;/path/to/checkstyle-result.xml&rsquo;)
 root = tree.getroot()
 cycleCnt = 0
 nestCnt = 0
 for error in root.iter(&lsquo;error&rsquo;):
     msg = error.get(&lsquo;message&rsquo;)
     if msg.startswith(&lsquo;Cyclomatic&rsquo;):
         cycleCnt += 1
     if msg.startswith(&lsquo;Nested&rsquo;):
         nestCnt += 1
 print &ldquo;Cyclomatic:&rdquo;,cycleCnt,&ldquo;Nested:&rdquo;,nestCnt</p></li>
</ol>


<p>See &ldquo;Section 19.7: xml.etree.ElementTree&rdquo; of documentation of Python 2.7.5 for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse的XML编辑器解决方案]]></title>
    <link href="http://leetschau.github.io/blog/2012/05/04/142739/"/>
    <updated>2012-05-04T14:27:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/05/04/142739</id>
    <content type="html"><![CDATA[<p>现在使用的Eclipse SDK 3.7.2里没有XML编辑器，无法进行语法高亮，也没有格式化（按层次控制缩进量）和设计视图，很不方便。对于ant文件，可以用Ant Editor来打开，ivy文件在装了IvyDE后也有自己的编辑器，但对于其他格式的XML文件（例如logback使用的配置文件），如果使用Ant editor打开，有语法高亮和格式化（Ctrl+shift+f），但会报语法错误（因为ant文件的顶层标签必须是project），让人很不爽。所以有了下面这个解决办法：在操作系统中设置用 firstobject XML Editor 打开XML文件，然后在Eclipse中选中要打开的xml文件，右键 -> Open With -> System Editor，如果希望根据具体情况选择编辑器，可以将XML打开程序设为 F4Menu ，再在F4Menu里关联。</p>

<p> firstobject XML Editor中，格式化的快捷键是F8。</p>

<p> 外部编辑器有一个问题是当文件更改后需要手工在Eclipse里刷新才能生效（xml文件才会进入bin目录），所以外部编辑器不是一个理想的解决方案。</p>

<p> 使用Eclipse for java developers版本自带xml编辑器；</p>

<p> NetBeans也可以格式化xml文档。</p>
]]></content>
  </entry>
  
</feed>
