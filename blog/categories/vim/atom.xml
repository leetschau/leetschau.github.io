<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为vim增加undo功能]]></title>
    <link href="http://leetschau.github.io/blog/2016/10/20/113258/"/>
    <updated>2016-10-20T11:32:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/10/20/113258</id>
    <content type="html"><![CDATA[<p>vim 7.3+后对undo功能有了很大改进，配合<a href="https://github.com/mbbill/undotree">undotree</a>
可以实现完全记录本地改动。</p>

<h1>安装和配置</h1>

<p>手工创建vim的undo持久化目录：<code>mkdir -p $HOME/.vim/undo</code>.</p>

<p>在.vimrc中增加：</p>

<pre><code>" undo &amp; undotree configs
set undodir=$HOME/.vim/undo/ "make sure this folder exists
set undofile
cabbrev ut UndotreeToggle&lt;CR&gt;

Plugin 'mbbill/undotree'
</code></pre>

<p>并安装：<code>vim +PluginClean +PluginInstall</code>.</p>

<h1>使用</h1>

<p>使用<code>:ut</code>打开/关闭undotree窗体；
在undotree窗体中，用<code>?</code>打开/关闭帮助信息。
查看完整的使用说明：<code>:h undotree.txt</code></p>

<h1>Note</h1>

<p>由于使用纯vimscript而不是Python，undotree比<a href="http://sjl.bitbucket.org/gundo.vim/">Gundo</a>更轻便。</p>

<p>在.vimrc中可以通过<code>undolevels</code>和<code>undoreload</code>设置，默认值似乎是100.</p>

<p>参考：</p>

<ul>
<li><p><a href="http://vimdoc.sourceforge.net/htmldoc/options.html#">http://vimdoc.sourceforge.net/htmldoc/options.html#</a>&lsquo;undolevels&rsquo;</p></li>
<li><p><a href="http://stackoverflow.com/questions/5700389/using-vims-persistent-undo">http://stackoverflow.com/questions/5700389/using-vims-persistent-undo</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Cursors in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2016/10/02/223400/"/>
    <updated>2016-10-02T22:34:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/10/02/223400</id>
    <content type="html"><![CDATA[<p>Use plugin <a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a>.</p>

<p>Install this plugin with adding <code>Plugin 'terryma/vim-multiple-cursors'</code>
into .vimrc.</p>

<p>The default key mappings is C-n for start multiple cursors and move to next,
C-p for previous, C-x to skip, and <ECS> for quit.
For C-n conflicts with nerdtree, modify the nerdtree trigger to <code>C-i</code>:
<code>
nnoremap &lt;C-i&gt; :NERDTreeTabsToggle&lt;CR&gt;
</code></p>

<p>Note:</p>

<p>Do <strong>not</strong> map &lsquo;next/previous&rsquo; to C-j/k as follows:</p>

<pre><code>" multiple cursors configs
let g:multi_cursor_next_key='&lt;C-j&gt;'
let g:multi_cursor_prev_key='&lt;C-k&gt;'
</code></pre>

<p>for C-j/k is mapped to keys jumping between windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install YouCompleteMe for Vim]]></title>
    <link href="http://leetschau.github.io/blog/2016/10/01/164934/"/>
    <updated>2016-10-01T16:49:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/10/01/164934</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<p>Install YCM on Ubuntu 14.04:</p>

<pre><code>sudo apt install build-essential cmake 
sudo apt install python-dev python3-dev

# Add `Plugin 'Valloric/YouCompleteMe'` into .vimrc.
vim +PluginClean +PluginInstall
cd ~/.vim/bundle/YouCompleteMe
./install.py
</code></pre>

<p>Take about one hour (16:44 ~ 17:44 ) when running <code>vim +PluginClean +PluginInstall</code>
(about 200MB for the repo).</p>

<p>If your vim version is lower than 7.4.143, you must install a newer version vim:
<code>
sudo add-apt-repository ppa:pkg-vim/vim-daily
sudo apt-get update
sudo apt-get install vim
dpkg -s vim | grep 'Version'    # should be greater than 7.41
</code></p>

<p>Or the following error occurs:</p>

<pre><code>Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;74_OnBufferRead:
line   17:
E117: Unknown function: UltiSnips#SnippetsInCurrentScope
Press ENTER or type command to continue
Error detected while processing function youcompleteme#Enable..&lt;SNR&gt;74_OnBufferRead:
line   17:
E15: Invalid expression: UltiSnips#SnippetsInCurrentScope( 1 )
</code></pre>

<p>Ref: <a href="https://github.com/Valloric/YouCompleteMe/issues/2335">https://github.com/Valloric/YouCompleteMe/issues/2335</a></p>

<h1>Config</h1>

<p>To change the default color of the autocomplete window of YCM,
add the following codes into .vimrc <strong>after</strong> <code>syntax on</code>:</p>

<pre><code>" autocomplete window color for plugin YouCompleteMe
highlight Pmenu ctermfg=white ctermbg=black
highlight PmenuSel ctermfg=green ctermbg=black
nnoremap &lt;leader&gt;y :let g:ycm_auto_trigger=0&lt;CR&gt;
nnoremap &lt;leader&gt;Y :let g:ycm_auto_trigger=1&lt;CR&gt;
</code></pre>

<p>Use <leader>Y/y to turn on/off autocomplete.</p>

<h1>Notes</h1>

<h2>Remove vim daily PPA</h2>

<p>Remove vim daily PPA with:
```
$ sudo add-apt-repository -r ppa:pkg-vim/vim-daily
$ apt-key list</p>

<h2>/etc/apt/trusted.gpg.d/pkg-vim-vim-daily.gpg</h2>

<p>pub   4096R/D31525A0 2014-10-15
uid                  Launchpad PPA for pkg-vim
$ sudo apt-key del D31525A0
```</p>

<h2>Use <code>apt-get</code> with proxy:</h2>

<p>When it&rsquo;s very slow when running <code>apt update</code>,
add <code>Defaults env_keep = "http_proxy https_proxy ftp_proxy"</code> after
<code>Defaults env_reset</code> with <code>sudo visudo</code>.
Then run:
<code>
export http_proxy=http://duotai:7jSF81tGRYK@conrad.h.xduotai.com:15617
export https_proxy=$http_proxy
sudo apt update
</code></p>

<p>The proxy url in above <code>export</code> command is provide by <a href="https://duotai.org/">多态</a>.</p>

<h2>Fix error in <code>apt update</code></h2>

<p>Fix the following error with <code>sudo apt update uk-keyring</code>:
<code>
Reading package lists... Done
W: GPG error: http://archive.ubuntukylin.com:10006 xenial InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 8D5A09DC9B929006
</code></p>

<p>This error is introduced by Sogou Pinyin, in file:
<code>/etc/apt/sources.list.d/sogoupinyin.list</code>.</p>

<p>Ref: <a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=25955">http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=25955</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用minibufferexpl管理vim Buffer]]></title>
    <link href="http://leetschau.github.io/blog/2016/09/15/120809/"/>
    <updated>2016-09-15T12:08:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/09/15/120809</id>
    <content type="html"><![CDATA[<p>使用Vundle安装：<code>Plugin 'fholgado/minibufexpl.vim'</code>.</p>

<h1>配置mbe</h1>

<p>隐藏mbe状态栏： TODO</p>

<p>在.vimrc中添加：</p>

<pre><code>cabbrev mt MBEToggle&lt;CR&gt;
cabbrev mru MBEToggleMRU&lt;CR&gt;
cabbrev vb vert sb
</code></pre>

<h1>常用快捷键</h1>

<ul>
<li><p>打开buffer: 用ctrlp或者nerdtree插件；</p></li>
<li><p>删除编号为n的buffer：<code>:bdn</code>;</p></li>
<li><p>切换到编号为n的buffer: <code>:bn</code>;</p></li>
<li><p>在水平分割窗口中打开编号为n的buffer：<code>:sbn</code>;</p></li>
<li><p>在垂直分割窗口中打开编号为n的buffer：<code>:vb n</code>;</p></li>
<li><p>打开/关闭mbe窗口; <code>:mt</code>;</p></li>
<li><p>打开/关闭 <em>MRU</em> (most recently used) 模式：<code>:mru</code></p></li>
</ul>


<h1>Note</h1>

<p>MRU模式开启时最近用过的buffer排在最前面，关闭时buffer list顺序保存不变。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在vim中执行shell命令的插件]]></title>
    <link href="http://leetschau.github.io/blog/2016/07/02/024310/"/>
    <updated>2016-07-02T02:43:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/07/02/024310</id>
    <content type="html"><![CDATA[<p>需要做一个vim工具，基本功能是通过一个快捷键，把选中的内容（或者当前行）发送到指定的tmux pane中，并执行。</p>

<h1>实现过程</h1>

<p>目录结构：当前工作目录下有 sendcmd.vim 和 test.md 两个文件，
前者包含实现功能的 vim 函数，后者是包含要执行命令行的数据文件。</p>

<p>开发环境：tmux window 1 做sendcmd.vim开发，window 2 上下拆分为两个pane
，上面 (ptop) 是命令行，下面的 pane (pbottom) 中用 vim 打开数据文件test.md.</p>

<p>每次修改并保存sendcmd.vim后，在test.md中执行<code>:so sendcmd.vim</code>，
然后把光标移动到要执行的命令所在的行上按<code>F3</code>键就可以看到命令被发送到ptop里的
执行效果了。</p>

<h2>格式探测</h2>

<p>这一步要解决的问题是：怎样的字符串，才能被<code>tmux send-keys</code>正确地传送出去，
并能正确的执行。</p>

<p>首先要保证运行<code>tmux send-keys</code>不报错，如果报错，
将第5行的输出拷贝到一个单独的命令行中运行，解决错误。</p>

<p>这一步通过后，如果命令被传送到<code>ptop</code>后报错，根据错误日志解决之。</p>

<p>sendcmd.vim：</p>

<pre><code>
function! SendCmd()
  let curline = getline(".")
  echom curline
  let cmd = "tmux send-keys -t top '" . curline . "' Enter"
  echom cmd
  echom system(cmd)
endfunction

nnoremap &lt;F3&gt; :call SendCmd()&lt;CR&gt;
</code></pre>

<p>说明：</p>

<ul>
<li>为什么第4行中<code>curline</code>要用单引号（而不是双引号）包裹？</li>
</ul>


<p>因为要执行的命令中可能包含变量（如es, idx等），双引号包裹的变量会被求值，
而我们的要求是这些变量不能被求值，要等到被发送到ptop后再被求值。由于这个原因，
第4行包裹外层<code>tmux send-keys</code>的命令就只能用双引号包裹。</p>

<ul>
<li>vimscript如何连接字符串？</li>
</ul>


<p>同样参考第4行，用点（ . ）连接。</p>

<ul>
<li><code>tmux send-keys -t top</code> 可以将keys从下面的pane发给上面，
也可以从左侧发到右侧，但如果是在右侧pane里执行这个语句，则会被发给自己。</li>
</ul>


<p>test.md：</p>

<pre><code>es=http://192.168.100.231:9200
api=http://192.168.100.231:8000
idx=production
type=Fair

# get elasticsearch version
http $es | jq '.version.number'

# list all indices
http -b GET $es'/_cat/indices?v'
http -b GET $es'"'"'/_cat/indices?v'"'"'

# list all types of a index
http -b GET $es/$idx/_mapping|jq ".$idx.mappings|keys"

# list all properties of a type
http -b GET $es/$idx/_mapping|jq ".$idx.mappings.$type.properties|keys"

# get objects count in a type
http -b GET $es/$idx/$type/_count|jq '.count'
http -b GET $es/$idx/$type/_count|jq '"'"'.count'"'"'

# query result count
http -b POST $es/$idx/$type/_search query:='{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}' | jq '.hits.total'
http -b POST $es/$idx/$type/_search query:=''{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}''
http -b POST $es/$idx/$type/_search query:='"'"'{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}'"'"'
http -b POST $es/$idx/$type/_search query:='"'"'{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}'"'"' | jq '"'"'.hits.total'"'"'
</code></pre>

<p>通过不断尝试后，发现用<code>'"'"'</code>代替<code>'</code>就能正确的发送并执行，
见第10,11行，20,21行，24~27行。</p>

<p>下面以第10行为例分析其结构：</p>

<ol>
<li><p>第一个单引号与外层的单引号结合，包裹它们中间的内容<code>http -b GET $es</code>，
保证里面的特殊字符（<code>$</code>）不会被求值；</p></li>
<li><p>中间的<code>"'"</code>是一组，实现被<code>tmux</code>发送后，最终执行的命令行里仍有一个单引号
（<code>$es</code>后面的单引号）；</p></li>
<li><p>最后的单引号，与后面的<code>'"'"'</code>中最左边的单引号组合，
包裹中间的内容<code>/_cat/indices?v</code>，如果没有这一组单引号，
里面的问好就会被求值，导致命令无法执行。</p></li>
</ol>


<p>这一步实现了在第11、21、27行上按<code>F3</code>键可以正确执行。</p>

<h2>整合进vim function</h2>

<p>这一步将前面的测试结果放进vim函数中，实现在第10、20、24行上能够正确执行。</p>

<p>sendcmd.vim：
<code>
function! SendCmd()
  let curline = getline(".")
  echom curline
  let escstr = substitute(curline, "'", "'\"'\"'", 'g')
  let cmd = "tmux send-keys -t top '" . escstr . "' Enter"
  echom cmd
  echom system(cmd)
endfunction
nnoremap &lt;F3&gt; :call SendCmd()&lt;CR&gt;
</code></p>

<h2>制作成插件</h2>

<p>当功能基本定型后，可以把脚本变成插件，避免每次使用时加载。</p>

<p>最简单的vim插件，只要在一个目录（tmuxcmd）里创建一个<code>plugin</code>目录，
把.vim脚本放进去，然后把目录做成git库就行了：</p>

<pre><code>mkdir -p tmuxcmd/plugin
mv test.vim tmuxcmd/plugin/tmuxcmd.vim
cd tmuxcmd
git init
git add ...; git commit -m "..."
</code></pre>

<p>在.vimrc里加入这个插件：增加一行代码：<code>Plugin 'file:///home/leo/temp/tmuxcmd'</code></p>

<p>安装：<code>vim +PluginInstall</code></p>

<p>安装过程实际是把代码库clone到~/.vim/bundle下，
修改~/.vim/bundle/tmuxcmd/plugin/tmuxcmd.vim文件在新的vim编辑器中不会生效。</p>

<p>本地插件需要保存一个本地目录，更简单的方法是发布到github上，再用vundle安装：</p>

<ol>
<li><p>把代码库push到github上：
<a href="https://github.com/leetschau/tmuxcmd">leetschau/tmuxcmd</a></p></li>
<li><p>在.vimrc中，把原来的<code>Plugin 'file:///home/leo/temp/tmuxcmd'</code>换成
<code>Plugin 'leetschau/tmuxcmd'</code></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
