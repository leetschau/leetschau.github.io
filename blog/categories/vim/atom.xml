<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-11-03T17:15:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customize Vim Statusline]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/26/180252/"/>
    <updated>2014-06-26T18:02:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/26/180252</id>
    <content type="html"><![CDATA[<p>The purpose of the customization is mainly to add full path to vim&rsquo;s statusline. I use <a href="https://github.com/bling/vim-airline">bling/vim-airline</a> to fulfill this.</p>

<h1>Install with Pathogen</h1>

<pre><code>git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
</code></pre>

<h1>Customize Statusline</h1>

<p>Add the following 2 lines to ~/.vimrc:</p>

<pre><code>set laststatus=2
let g:airline_section_c='%F'
</code></pre>

<p>See <code>:h laststatus</code> for the meaning of &ldquo;laststatus&rdquo;.
See &ldquo;CUSTOMIZATION&rdquo; section of <code>:h airline</code> for the meaning of every section and its default contents.
See <code>:h statusline</code> for the meaning of &ldquo;%F&rdquo; and the name of all statusline items.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Group Substitution in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/13/155048/"/>
    <updated>2014-06-13T15:50:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/13/155048</id>
    <content type="html"><![CDATA[<p>The origin text is:</p>

<p>sqoop export &ndash;columns int_id,date_time,mr_count,ecno_pollution,rscp_0,rscp_1,rscp_2,rscp_3,rscp_4,rscp_5,load_time &ndash;input-field</p>

<p>The target text is:</p>

<p>sqoop export &ndash;columns int_id,date_time,mr_count,ecno_pollution,rscp0,rscp1,rscp2,rscp3,rscp4,rscp5,load_time &ndash;input-field</p>

<p>We want remove all underscore in &ldquo;rscp_3&rdquo;, which means converting it to &ldquo;rscp3&rdquo;. The real text has ninety more items, so we can&rsquo;t do substitutions manually. And other items also use underscore, so you can&rsquo;t only remove all underscores.</p>

<p>Solution: <code>:s/rscp_\(\d\+\)/rscp\1/gc</code>.</p>

<p>We use &ldquo;(&rdquo; and &ldquo;)&rdquo; to mark a group, use &ldquo;\1&rdquo; to represent it in the new strings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Ragged Columns Im Vim]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/12/114812/"/>
    <updated>2014-06-12T11:48:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/12/114812</id>
    <content type="html"><![CDATA[<p>I need to format some texts copied from a PDF file:</p>

<p>a
ab
abc
cd
e</p>

<p>=>
=>
=>
=>
=></p>

<p>x
xy
xyz
pq
p</p>

<p>The target form is:</p>

<p>a   => x
ab  => xy
abc => xyz
cd  => pq
e   => p</p>

<p>I want to select the whole last section (x&hellip;p) in visual block mode, and paste them after the 2nd section (=>). But in visual block mode (triggered by Ctrl-v), I can&rsquo;t select all of last section. Because there&rsquo;s only one character &ldquo;p&rdquo; in the last line, so only &ldquo;x&rdquo; in the 3rd line (xyz) will be selected. The solution is set &ldquo;virtualedit&rdquo; mode to &ldquo;all&rdquo; with &ldquo;:set ve=all&rdquo;. Now the cursor is free to anywhere no matter if there&rsquo;s a character. After the joining, we have to remove all trailing spaces. So the overall process is:</p>

<p>:set ve=all
&lt;C-v, select and paste, ESC to normal mode>
<select all line joined together in visual line mode>
:&lsquo;&lt;,&rsquo;>s/\s*//g
:set ve=</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Syntax and Style Check in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2014/05/22/163449/"/>
    <updated>2014-05-22T16:34:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/05/22/163449</id>
    <content type="html"><![CDATA[<h1>Pylint</h1>

<p><a href="http://www.pylint.org/">Pylint</a> is a static Python syntax and style checker. It works well with vim&rsquo;s generic syntax checker front-end syntastic.</p>

<p>Install it with <code>pip install pylint</code>. Remove it with <code>pip uninstall pylint</code>.</p>

<p>Or download pylint-1.0.0.tar.gz from it&rsquo;s <a href="http://www.logilab.org/857">old website</a>. Unzip it, and run <code>sudo python setup.py install</code>.</p>

<p>Not use apt-get, the version is old.</p>

<pre><code># apt-get install pylint      // install pylint 0.25.1, so uninstall it
# apt-get purge pylint
# apt-get purge python-logilab-astng
# apt-get purge python-logilab-common
</code></pre>

<p>Now you can use <code>pylint --version</code> and <code>pylint &lt;module&gt;.py</code> to check your source code.</p>

<h1>syntastic</h1>

<p><a href="http://www.vim.org/scripts/script.php?script_id=2736">Syntastic</a> is a generic syntax checker front-end of vim.</p>

<p>Install it:</p>

<pre><code>cd ~/.vim/bundle
git clone https://github.com/scrooloose/syntastic.git 
</code></pre>

<p>See docs: :h syntastic</p>

<pre><code>:SyntasticInfo
Syntastic: active mode enabled
Syntastic version: 3.4.0-69
Info for filetype: python
Available checker(s): pylint python
Currently enabled checker(s): python pylint
</code></pre>

<p>You can see pylint is recognized as a checker. Now you can check with pylint:</p>

<pre><code>:SyntasticCheck
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Develop Environment With Vim on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/29/180645/"/>
    <updated>2014-04-29T18:06:45+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/29/180645</id>
    <content type="html"><![CDATA[<h1>ctags</h1>

<h2>Install</h2>

<pre><code>$ sudo apt-get install exuberant-ctags
</code></pre>

<h2>Usage</h2>

<pre><code>$ cd $PROJECT_HOME
$ ctags -R *
$ vi MyApp.cpp
</code></pre>

<p>Some frequently used shortcuts:</p>

<ul>
<li><p>Go to definition: Ctrl-]</p></li>
<li><p>Jump back from definition: Ctrl-t</p></li>
<li><p>C-w C-]: Open the definition in a horizontal split</p></li>
<li><p>C-o/i: jump between items in jump list;</p></li>
<li><p>gf: &ldquo;go to file&rdquo;, open the file under the cursor;</p></li>
<li><p>gd: &ldquo;go to definition&rdquo;, go to the definition of a variable;</p></li>
</ul>


<p>Ref: <a href="http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks">http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks</a></p>

<h1>Buffer explorer</h1>

<h2>Install</h2>

<ol>
<li><p>Download bufexplorer-7.4.2.zip from <a href="http://www.vim.org/scripts/script.php?script_id=42">it&rsquo;s website</a>;</p></li>
<li><p>unzip it to ~/.vim/bundle/ (you have to install pathogen before hand);</p></li>
<li><p>restart vim;</p></li>
</ol>


<h2>Usage</h2>

<p>:h buffer-explorer</p>

<p><leader>be, <leader>bs, <leader>bv</p>

<p>I defined my <leader> key to comma(let mapleader=&ldquo;,&rdquo;) in .vimrc, so open buffer explorer window with &ldquo;,be&rdquo;.</p>

<h1>Tagbar</h1>

<p>This plugin is for C/C++ code outline.</p>

<p>Installation: Downlaod majutsushi-tagbar-v2.6.1-0-ge872e67.zip from <a href="http://majutsushi.github.io/tagbar/">it&rsquo;s website</a>, unzip to ~/.vim/bundle/ and restart vim.</p>

<p>:h tagbar</p>

<p>:TagbarToogle to open outline window; try <Enter>, p, <Space> in outline window.</p>

<h1>c.vim</h1>

<p>Download cvim.zip v6.1.1 from its <a href="http://www.vim.org/scripts/script.php?script_id=213">website</a>. Unzip it to ~/.vim/bundle.</p>

<p>Add the following line  to ~/.vimrc to override the default <leader> key:</p>

<pre><code>let g:C_MapLeader  = ','
</code></pre>

<p>Use &ldquo;,rc&rdquo; to save and compile. Use <code>:cn</code>, <code>:cp</code>, <code>:cfirst</code>, <code>:clast</code>, <code>:cc</code>, <code>:cclose</code>, <code>:copen</code> to traverse in quickfix list (see <code>:h quickfix</code> for full list of hotkeys).</p>

<p>Use F9 or &ldquo;,rr&rdquo; to run source file.</p>

<p>Use &ldquo;2. Usage without GUI&rdquo; and &ldquo; 3. Hotkeys&rdquo; in <code>:h csupport</code> for full list of hotkeys.</p>

<h1>Configuration for REPL</h1>

<ol>
<li><p>Add &ldquo;:nnoremap <F5> :<C-U>make %:r &amp;&amp; ./%:r<CR>&rdquo; to ~/.vimrc;</p></li>
<li><p>Open vim, copy the following c++ codes into it:</p>

<p> using namespace std;</p>

<p> int main() {
     cout &lt;&lt; &ldquo;hello C++.\n&rdquo;;
 }</p></li>
<li><p>Save the file, syntastic(search tag syntastic for installation and usage details) will report an error: ‘cout’ was not declared in this scope</p></li>
<li><p>Add &ldquo;#include <iostream>&rdquo; at the beginning of the file, save it, and press <F5>, you can see the result;</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
