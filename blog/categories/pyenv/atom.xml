<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pyenv | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/pyenv/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T15:40:38+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Python Versions With Pyenv]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/06/144020/"/>
    <updated>2014-08-06T14:40:20+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/06/144020</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yyuu/pyenv">pyenv</a> is python equivalent of rvm of ruby.
It can replace the virtualenvwrapper, and there&rsquo;s no need to install virtualenv before pyenv.
It will install virtualenv automatically.</p>

<p>On ArchLinux, you just install it according its documents on the website:</p>

<pre><code>$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
</code></pre>

<p>But on Mint 17, you have to install libraries beforehand:</p>

<pre><code>$ sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl
</code></pre>

<p>Then run &ldquo;curl &hellip;&rdquo; to install it.</p>

<p>Then add &ldquo;export &hellip; eval &hellip;&rdquo; into ~/.zshrc according to its prompt at the end of the installation.</p>

<h1>Usage</h1>

<pre><code>$ pyenv commands         // list all available commands
$ pyenv install -l       // list all available versions to install
$ pyenv install 2.6.6
$ pyenv rehash           // run this command after install a new version
$ pyenv versions         // list all installed versions
$ pyenv shell 2.6.6      // set python version to 2.6.6 in this session (shell)
$ pyenv local 2.6.6      // create a .python-version file under CWD, it will use 2.6.6 afterwards according to this file
$ pyenv shell system     // go back to use the system python version
$ pyevn which python     // check the python path in current environment
$ pyenv uninstall 2.6.6
</code></pre>

<h2>No Special Package Nedded</h2>

<p>If your python project need no special dependency packages, use <code>pyenv local 2.6.6</code> is a good idea.
It only create a .python-version under the folder. Very clean.</p>

<h2>Need Install Package</h2>

<p>If your project need some package, which you don&rsquo;t want to put into system environment, use</p>

<pre><code>$ pyenv virtualenv 2.6.6 myproj
</code></pre>

<p>Now you have a INDEPENDENT python environment based on 2.6.6. You can verify this by run:</p>

<pre><code>$ cd myproj
$ pyenv activate myproj
$ pyenv which python
/home/chad/.pyenv/versions/myproj/bin/python
$ pyenv deactivate
</code></pre>

<h1>Fabric on ArchLinux</h1>

<p>Fabric uses library paramiko, which is incompatible with Python 3.x.
After fabric installed on ArchLinux with pip, when you run <code>fab test</code>, a &ldquo;cannot import name isMappingType&rdquo; error occurs.
So we need install a Python 2.7, then install fabric based on it:
<code>
pyenv install 2.7.8
pyenv shell 2.7.8
pip install fabric
</code>
Now create a test fabfile.py:
<code>
def test():
    print("hello world")
</code>
And run it: <code>fab test</code>.</p>

<p>In a new shell, run fabric with <code>pyenv shell 2.7.8; fab test</code>.</p>
]]></content>
  </entry>
  
</feed>
