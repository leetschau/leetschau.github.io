<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Classpath | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/classpath/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-08-27T13:25:34+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add Multiple Classpath Items in One Tag]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/14/160706/"/>
    <updated>2013-11-14T16:07:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/14/160706</id>
    <content type="html"><![CDATA[<p>I have to add many jar files to a &ldquo;javac&rdquo; and a &ldquo;junit&rdquo; task from command line arguments. The <pathemelent path/> inside <classpath/> tag is suited for this situation.</p>

<p>Ant script:</p>

<p> &lt;javac srcdir=&ldquo;${test.dir}&rdquo;</p>

<p>  destdir=&ldquo;${test.class.dir}&rdquo;
  encoding=&ldquo;UTF-8&rdquo;
  debug=&ldquo;true&rdquo;
  failonerror=&ldquo;true&rdquo;>
  <classpath>
   <pathelement location="${instrumented.class.dir}"/>
   <pathelement location="${src.class.dir}"/>
   <pathelement path="${pdegen.classpath}"/>
  </classpath>
 </javac></p>

<p> <junit printsummary="yes" fork="yes">
  <sysproperty key="net.sourceforge.cobertura.datafile"
   file="${cobertura.data.file}" />
  <classpath>
   <pathelement location="${instrumented.class.dir}"/>
   <pathelement location="${src.class.dir}"/>
   <pathelement location="${test.class.dir}"/>
   <pathelement location="${src.dir}"/>
   <pathelement location="${cobertura.path}"/>
   <pathelement path="${pdegen.classpath}"/>
  </classpath>
  <formatter type="xml"/>
  <batchtest todir="${unittest.report.dir}" haltonerror="yes">
   <fileset dir="${test.dir}">
    <include name="**/*.java" />
   </fileset>
  </batchtest>
 </junit></p>

<p>The corresponding command line is:</p>

<p> ant -Dpdegen.classpath=/path/to/jar1:/path/to/jar2 target_name</p>

<p>Here is the working Python script:</p>

<p>  from subprocess import call</p>

<p>  test_cmd = &lsquo;ant -buildfile unittest.xml -Drootdir=&rsquo;+ base_dir + \</p>

<pre><code>pkg_name +' -Dcobertura.path=/usr/share/ant/lib/cobertura.jar -Dpdegen.classpath='+classpath[pkg_name] 
</code></pre>

<p>  ret = call(test_cmd.split())</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Classpath for Groovy on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/07/09/110533/"/>
    <updated>2013-07-09T11:05:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/07/09/110533</id>
    <content type="html"><![CDATA[<p>The &ldquo;-cp&rdquo; option of groovy is the same with Java.</p>

<p>Wildcards can be used on JDK6 or later. For example:</p>

<p> groovy -cp &ldquo;/home/chad/apps/http-builder-0.6/<em>:/home/chad/apps/http-builder-0.6/dependencies/</em>&rdquo; httpex.groovy</p>

<p>Note1: &ldquo;**&rdquo; is not supported, which means above command can not written as:</p>

<p> groovy -cp &ldquo;/home/chad/apps/http-builder-0.6/**&rdquo; httpex.groovy</p>

<p>Note2: &ldquo;<em>.jar&rdquo; is not supported, which means &ldquo;/home/chad/apps/http-builder-0.6/</em>.jar&rdquo; is invalid;</p>

<p>Note3: the double quotes of classpath is necessary;</p>

<p>Note4: &ldquo;/home/chad&rdquo; in classpath can not be replaced by &ldquo;~&rdquo;;</p>

<p>See: <a href="http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath">http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Test With JUnit and Ant]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/28/185513/"/>
    <updated>2013-05-28T18:55:13+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/28/185513</id>
    <content type="html"><![CDATA[<p>I put junit-4.11.jar to $ANT_HOME/lib folder(I didn&rsquo;t set ANT_HOME environment virable), then I can use <junit> task in ant script as follows:</p>

<p> <target name="unit_test" depends="compile">
  <mkdir dir="${test.report.dir}"/>
  <junit printsummary="yes" fork="yes">
   <classpath>
    <pathelement location="${src.class.dir}"/>
    <pathelement location="${test.class.dir}"/>
    <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
   </classpath>
   <formatter type="plain"/>
   <batchtest todir="${test.report.dir}" haltonerror="no">
    <fileset dir="${test.dir}">
      <include name="**/*.java" />
    </fileset>
   </batchtest>
  </junit>
 </target></p>

<p>A pitfall here is that Junit depends on hamcrest(see junit website), but if you put hamcrest-core-1.3.jar to $ANT_HOME/lib, there will be a &ldquo;Class not found&rdquo; error. It&rsquo;s probably a bug or version matching problem of junit. You have to put hamcrest jar file in &ldquo;classpath&rdquo; element of junit task as above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux和windows环境变量中路径分隔符的区别]]></title>
    <link href="http://leetschau.github.io/blog/2011/11/24/090652/"/>
    <updated>2011-11-24T09:06:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/11/24/090652</id>
    <content type="html"><![CDATA[<p>这里所说的路径指PATH和CLASSPATH这两个环境变量。</p>

<p>Unix/Linux系统的路径分隔符是冒号（:），Windows的路径分隔符是分号（;）。如果弄错了分隔符，比如在windows下用冒号分隔classpath中的路径，会导致冒号后面的路径无法被java识别，导致class &hellip; not def或者def not found之类的错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Package and Classpath]]></title>
    <link href="http://leetschau.github.io/blog/2011/11/14/151545/"/>
    <updated>2011-11-14T15:15:45+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/11/14/151545</id>
    <content type="html"><![CDATA[<p>[godu@goduserver test]$ pwd
/home/godu/test</p>

<p>[godu@goduserver test]$ cat com/AA.java</p>

<p>package com;
public class AA {
 public static void main(String[] args) {
  System.out.println(&ldquo;this is AA&rdquo;);
 }
}</p>

<p>[godu@goduserver test]$ javac com/AA.java
[godu@goduserver test]$ java com.AA
this is AA</p>

<p>以上说明当java类定义在一个包中时，要将java文件放在包指明的路径下，用javac full_path的形式编译，用java package_name.class_name的方法运行。</p>

<p>假设AA类引用了/ap/a/b/C.class文件（AA中有&#8221;import a.b.C;&ldquo;），且C类的包名为&#8221;a.b&#8221;时（package a.b;），运行AA时用classpath参数引用C类：</p>

<p>java -cp /ap com.AA</p>

<p>假设在/ap下将a文件夹打成了JAR包m.jar，则运行AA时将jar文件加入classpath即可：</p>

<p>java -cp /ap/m.jar com.AA</p>

<p>更详细的说明见“ Java的classpath与package ”。</p>
]]></content>
  </entry>
  
</feed>
