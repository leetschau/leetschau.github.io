<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grizzly | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/grizzly/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[网络通信框架选型]]></title>
    <link href="http://leetschau.github.io/blog/2010/10/09/170608/"/>
    <updated>2010-10-09T17:06:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/10/09/170608</id>
    <content type="html"><![CDATA[<p>事件驱动的异步IO通信框架
 Apache Mina , JBoss Netty , Grizzly (Java), Twisted , gevent (python), eventmachine (Ruby), POE (Perl), Node.js (JavaScript), libevent &copy;</p>

<p>各框架实现的Echo Server</p>

<p> Twisted , libevent (不是echo server，但讲了很多基础知识), gevent , eventmachine , Node.js , Netty , Grizzly , POE ，按先后顺序进行学习。</p>

<p>选型的依据：</p>

<p> 功能： 截取模式：
 Mina: Filter-Handler;
Netty/Grizzly: Handler only</p>

<p> 支持的Filter/Handler：</p>

<p>Mina: blacklist filters, compression filters, connection throttling filters, SSL filters, logging filters, protocol codecs such as delimiter based, and HTTP. Grizzly provides support for SSL, custom protocol codecs, logging, and HTTP;</p>

<p>Netty: Base64 encoding/decoding, delimiter based codecs, fixed length codecs, HTTP handlers, logging handlers, Java object serialization/deserialization codecs, Google Protocol Buffer codecs, SSL handlers, simple string codecs, and handlers used to control bandwidth, traffic shaping, etc. There are also several utility handlers that may be used to build custom handlers such as a replay handler, timeout handler , frame decoder, etc;（Netty在支持基于已有的Handler构建用户Handler方面更灵活）</p>

<p> 高级缓存</p>

<p>Netty: ChannelBuffer中封装了多个ByteBuffer实例的引用（而非拷贝），支持zero copy，支持标记与重设“读指针”(Reader)索引，支持搜索、切片、读写不同类型数据；</p>

<p>Mina: 与Netty基本类似，但不支持zero copy（在Mina 3中实现）；</p>

<p> Socket and Protocol Independence</p>

<p>三者均支持，使通信框架底层技术变化（例如从NIO向AIO过渡）时，无需更新业务逻辑代码；</p>

<p> 可定制的协议与POJO</p>

<p>三者均支持，POJO在网络传输中的作用是什么？</p>

<p> 线程模型</p>

<p>三者均使用线程池模型，应付高并发能力良好；</p>

<p> 性能：</p>

<p>速度：MINA能够满足要求（并发800+），Netty=Grizzly>MINA；</p>

<p>内存占用量：Netty=Mina&lt;Grizzly
 扩展性：采用此框架的项目代码是否易于修改，易于在已有功能基础上拓展新功能； 易用性：框架的简洁程度，API Docs是否完善，Tutorials是否丰富，论坛是否活跃； 与GODU的整合能力/迁移成本；</p>
]]></content>
  </entry>
  
</feed>
