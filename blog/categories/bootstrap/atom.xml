<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bootstrap | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/bootstrap/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-05-10T10:22:47+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用星星图标获取用户评分]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/13/153724/"/>
    <updated>2015-02-13T15:37:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/13/153724</id>
    <content type="html"><![CDATA[<p>使用一个数组，评分为3对应着：</p>

<p>html:</p>

<pre><code>
  &lt;span class="glyphicon  text-danger"&gt;&lt;/span&gt;

</code></pre>

<p>js:</p>

<pre><code>Template.UserEvaluations.helpers({
  rankicons: function() {
    return ['glyphicon-star', 'glyphicon-star', 'glyphicon-star', 'glyphicon-star-empty', 'glyphicon-star-empty'];
  }
});
</code></pre>

<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/14189672/meteor-iterate-list-in-template">http://stackoverflow.com/questions/14189672/meteor-iterate-list-in-template</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap 3的栅格系统]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/18/121145/"/>
    <updated>2015-01-18T12:11:45+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/18/121145</id>
    <content type="html"><![CDATA[<p>Bootstrap 3的栅格(grid)系统以浏览器的屏幕宽度为指标，从小到大分为4级：xs, sm, md, lg (extra small, small, medium, large).
4个级别之间的宽度分隔点（即breakpoint size）分别是768px, 992px和1200px。
例如，当屏幕宽度为1000px（像素）时，使用md标准，800px使用sm标准，</p>

<p>假设我们需要在一行上从左到右顺序放置A,B,C共3个元素，宽度比为1:2:1，由于栅格系统将每行分为12列，
不难算出这3个元素依次应占据3，6和3列，下面是测试代码：</p>

<pre><code>$ meteor create grids
$ cd grids
$ cat &lt;&lt; EOF &gt; grids.html
&lt;head&gt;
  &lt;title&gt;Bootstrap Grids&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;Bootstrap Grid System Demo&lt;/h1&gt;
  
  &lt;hr&gt;

  &lt;div class="container"&gt;
    &lt;div class="row"&gt;
      &lt;div class="col-sm-3"&gt;.col-md-3&lt;/div&gt;
      &lt;div class="col-sm-6"&gt;.col-md-6&lt;/div&gt;
      &lt;div class="col-sm-3"&gt;.col-md-3&lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/body&gt;
EOF

&lt;template name="getDim"&gt;
  &lt;div&gt; Browser window width:  &lt;/div&gt;
  &lt;div&gt; Browser window height:  &lt;/div&gt;
  &lt;div&gt; Screen width:  &lt;/div&gt;
  &lt;div&gt; Screen height:  &lt;/div&gt;
&lt;/template&gt;

$ cat &lt;&lt; EOF &gt; grids.css
.col-sm-3 {
  background-color: #ccc;
}

.col-sm-6 {
  background-color: #cf0;
}

$ cat &lt;&lt; EOF &gt; grids.js
if (Meteor.isClient) {
  Session.setDefault("bro_wid", $(window).width());
  Session.setDefault("bro_hei", $(window).height());
  Session.setDefault("scr_wid", screen.width);
  Session.setDefault("scr_hei", screen.height);

  Meteor.startup(function () {
    $(window).resize(function(e) {
      Session.set("bro_wid", $(window).width());
      Session.set("bro_hei", $(window).height());
      Session.set("scr_wid", screen.width);
      Session.set("scr_hei", screen.height);
    });
  });

  Template.getDim.helpers({
    bro_wid: function () {
      return Session.get("bro_wid");
    },
    bro_hei: function () {
      return Session.get("bro_hei");
    },
    scr_wid: function () {
      return Session.get("scr_wid");
    },
    scr_hei: function () {
      return Session.get("scr_hei");
    }
  });
}
</code></pre>

<p>浏览器初始宽度为1284px，属于lg，用慢慢拖动鼠标减小窗口宽度，
这时行元素 (.row) 两端的页边距(padding)不断缩小，
当窗口宽度低于1200px时，此行中每列 (.col) 元素的宽度整体减小了一级，同时行的边距恢复初始值，
继续减小窗口宽度，边距持续减小，直到992像素时行中各列元素宽度减小，边距恢复；
当宽度低于768像素时，行中的3个列元素改为纵向排列，即stack方式。</p>

<p>结合Bootstrap 3官网文档中<a href="http://getbootstrap.com/css/#grid">Grid system</a>的说明：</p>

<blockquote><p>Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes,
and override grid classes targeted at smaller devices.
Therefore, e.g. applying any .col-md-<em> class to an element will <strong>not only</strong> affect its styling on medium devices
but also on large devices if a .col-lg-</em> class is not present.</p></blockquote>

<p>上面我们定义的是sm，所以比它宽的md和lg都使用它的定义：3-6-3，比它小的xs没有定义，所以使用了默认的纵向排列方式。</p>

<p>可以用两种方法验证这一点，首先我们把html和css中的&#8221;sm&#8221;都改为&#8221;lg&#8221;，例如下面：</p>

<pre><code>&lt;div class="container"&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-lg-3"&gt;.col-md-3&lt;/div&gt;
    &lt;div class="col-lg-6"&gt;.col-md-6&lt;/div&gt;
    &lt;div class="col-lg-3"&gt;.col-md-3&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>当宽度低于1200px时，列元素直接变成了纵向排列。</p>

<p>假设我们的需求变为：在大屏lg和中屏md上保持原有布局，即A,B,C共3个元素在同一行按1:2:1放置，
在xs和sm屏上变为两行，其中A和B按照1:2放在同一行上，C放在第二行上，占屏幕宽度一半，相应地修改代码：</p>

<pre><code>$ cat grids.html
...
  &lt;div class="container"&gt;
    &lt;div class="row"&gt;
      &lt;div class="col-md-3 col-xs-4"&gt;.col-md-3&lt;/div&gt;
      &lt;div class="col-md-6 col-xs-8"&gt;.col-md-6&lt;/div&gt;
      &lt;div class="col-md-3 col-xs-6"&gt;.col-md-3&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
...

$ cat grids.css
...
.col-xs-4 {
  background-color: #f00;
}

.col-xs-8 {
  background-color: #0f0;
}
</code></pre>

<p>可以看到，在最小的屏幕上，A和B也是在同一行里的。所以对于同一个row里的col来说，超过12的col会自动放在下一行，
例如上面的xs配置中，4和8已经占据了一行，所以下来C的col-xs-6就显示在下一行，且宽度为屏幕的一半，与文档所述吻合：</p>

<blockquote><p>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Bootstrap 3的页眉页脚控制]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/18/020909/"/>
    <updated>2015-01-18T02:09:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/18/020909</id>
    <content type="html"><![CDATA[<p>对网页上页眉(header)、页脚(footer)的位置要求是：</p>

<ol>
<li><p>当网页正文内容短于一页时，不论浏览器窗口尺寸如何，页眉要在顶端，页脚在底端，不能出现页脚下面还有空白的情况；</p></li>
<li><p>当网页正文内容长于一页时，不论浏览器窗口尺寸如何，页眉页脚不能遮挡住正文内容，当使用滚轮上下滚动时，页眉页脚要随之滚动；</p></li>
</ol>


<p>也就是sticky header/footer效果。下面是符合此要求的一个精简Meteor实现：</p>

<pre><code>$ meteor create stickyHeaderFooter
$ cd stickyHeaderFooter
$ ln -s ../client
$ tree client
client
├── css
│   └── bootstrap.min.css
└── lib
    └── bootstrap.min.js
$ cat &lt;&lt; EOF &gt; stickyHeaderFooter.html
&lt;head&gt;
  &lt;title&gt;Sticky Header &amp; Footer&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;nav class="navbar navbar-default navbar-static-top"&gt;
    &lt;div class="container"&gt;Here is Header&lt;/div&gt;
  &lt;/nav&gt;
  &lt;h1&gt;Sticky Header &amp; Footer&lt;/h1&gt;

  &lt;div id="content" class="container"&gt;
    
  &lt;/div&gt;

  &lt;div id="footer"&gt;
    &lt;div class="navbar navbar-fixed-bottom"&gt;
      &lt;div class="container"&gt;Here is the Footer&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;template name="hello"&gt;
  &lt;button id="addline"&gt;Add a line&lt;/button&gt;
  &lt;button id="rmline"&gt;Remove a line&lt;/button&gt;
  &lt;div&gt;
    
      &lt;li&gt;Item No: &lt;/li&gt;
    
  &lt;/div&gt;
&lt;/template&gt;
EOF

$ cat &lt;&lt; EOF &gt; stickyHeaderFooter.css
html {
  position: relative;
  min-height: 100%;
}

#content { padding-bottom: 70px; }

#footer .navbar {
  position: absolute;
}
EOF

$ cat &lt;&lt; EOF &gt; stickyHeaderFooter.js
if (Meteor.isClient) {
  Session.setDefault("sample", [1,2,3]);

  Template.hello.helpers({
    samples: function () {
      return Session.get("sample");
    }
  });

  Template.hello.events({
    'click #addline': function () {
      var sl = Session.get("sample");
      sl.push(sl[sl.length - 1] + 1);
      Session.set("sample", sl);
    },
    'click #rmline': function () {
      var sl = Session.get("sample");
      if (sl.length &gt; 1) {
        sl.pop();
      }
      Session.set("sample", sl);
    }
  });
}
$ meteor
</code></pre>

<p>Meteor服务启动完毕后，运行<code>firefox localhost:3000</code>，通过点击&#8221;Add a line&#8221;增加正文长度，点击&#8221;Remove a line&#8221;减小正文长度，同时改变浏览器窗口大小，验证代码是否符合上面的要求。</p>

<p>这里面页眉的设置相对简单，用Bootstrap 3的navbar-static-top就能够达到要求。</p>

<p>页脚基于Bootstrap 3的&#8221;navbar navbar-fixed-bottom&#8221;实现，但这个类本身的功能是把页脚固定在浏览器底部，而不论正文内容长短，
所以要通过在css文件中设置格式的方法实现sticky footer效果，
在css文件的3段设置中，前两段负责避免正文与页脚重叠，第3段的作用是保证页脚始终在正文之后，而不是固定在浏览器窗口底端。</p>

<p>Html文件中的container属性是bootstrap 3网格系统的容器，用来对齐各个行元素中的各列，并自动控制行、列元素的页边距，
这里使用container是为了避免在css中手工设定padding值。</p>

<p>本文的实现方法借鉴了<a href="http://stackoverflow.com/questions/10099422/flushing-footer-to-bottom-of-the-page-twitter-bootstrap">Flushing footer to bottom of the page, twitter bootstrap</a>中Régis B.的回答，
但对其答案进行了精简。</p>

<p>container部分基于<a href="http://stackoverflow.com/questions/19983857/when-should-i-use-class-container-and-row">When should I use class container and row?</a>。</p>

<p>说明：实例代码用软链接引入Bootstrap文件，是为了节约空间，也可以直接把client文件夹拷贝到当前目录中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Bootstrap Themes in Meteor]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/01/103921/"/>
    <updated>2014-12-01T10:39:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/01/103921</id>
    <content type="html"><![CDATA[<p><a href="https://www.meteor.com/">Meteor</a> is awesome for build dynamic web apps.
However it&rsquo;s a &ldquo;baremetal&rdquo; without templates.
On the other hand, <a href="http://getbootstrap.com/">Bootstrap</a> is a powerful front-end framework with many beautiful themes.
So we have to combine these two.</p>

<p>First of all we need to get the bootstrap.min.js
from the latest precompiled version of bootstrap release package (bootstrap-x.x.x-dist.zip).
<a href="http://bootswatch.com/">Bootswatch</a> provides free bootstrap themes.
Download &ldquo;bootstrap.min.css&rdquo; file with clicking &ldquo;Download&rdquo; button of prefered theme,
and put it under client folder of meteor app.
Then all DOM element will be styled.</p>

<pre><code>cd ~/docs/tmp
meteor create mywebapp
cd mywebapp
rm *.js *.css *.html
mkdir -p {server,client/{css,lib}}
wget https://github.com/twbs/bootstrap/releases/download/v3.3.1/bootstrap-3.3.1-dist.zip
unzip bootstrap-3.3.1-dist.zip -d bootstrap
cp bootstrap/dist/js/bootstrap.min.js client/lib
rm -rf bootstrap*
wget http://bootswatch.com/readable/bootstrap.min.css client/css/bootstrap.min.css
cat &lt;&lt; EOF &gt; client/mywebapp.html
&lt;head&gt;
  &lt;title&gt;sousouzhan&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;Welcome to Meteor!&lt;/h1&gt;

  
&lt;/body&gt;

&lt;template name="hello"&gt;
  &lt;button type="button" class="btn btn-default"&gt;Click Me&lt;/button&gt;
  &lt;div class="searchform"&gt;
    &lt;form role="form"&gt;
      &lt;div class="form-group"&gt;
        &lt;label for="exampleInputEmail1"&gt;Email address&lt;/label&gt;
        &lt;input type="email" class="form-control" id="exampleInputEmail1" placeholder="Enter email"&gt;
      &lt;/div&gt;
      &lt;div class="form-group"&gt;
        &lt;label for="exampleInputPassword1"&gt;Password&lt;/label&gt;
        &lt;input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password"&gt;
      &lt;/div&gt;
      &lt;div class="form-group"&gt;
        &lt;label for="exampleInputFile"&gt;File input&lt;/label&gt;
        &lt;input type="file" id="exampleInputFile"&gt;
        &lt;p class="help-block"&gt;Example block-level help text here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="checkbox"&gt;
        &lt;label&gt;
          &lt;input type="checkbox"&gt; Check me out
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;
    &lt;/form&gt;
  &lt;/div&gt;
  &lt;p&gt;You've pressed the button  times.&lt;/p&gt;
&lt;/template&gt;
EOF
meteor
</code></pre>

<p>Then open <a href="http://localhost:3000">http://localhost:3000</a> to view the result.</p>
]]></content>
  </entry>
  
</feed>
