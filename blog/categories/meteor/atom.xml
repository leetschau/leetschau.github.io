<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-05T15:23:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Meteor Package Test Demo]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/03/095227/"/>
    <updated>2015-10-03T09:52:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/03/095227</id>
    <content type="html"><![CDATA[<h1>Generating Test Data with Meteor Factory and Fake</h1>

<p>The following tests set up with <a href="https://github.com/percolatestudio/meteor-factory/">meteor-factory</a>.</p>

<p>First create Meteor app, install packages, define collections and start server:</p>

<pre><code>meteor create testApp
cd testApp
meteor add dburles:factory
meteor add babrahams:constellation
cat &lt;&lt; EOF &gt; collections.js
Authors = new Meteor.Collection('authors');
Books = new Meteor.Collection('books');
EOF
# Authors and Books must be defined in both servers and client
# or `Factory.create("books");` will fail.
# So they can't be defined in browser console
MONGO_URL="mongodb://localhost:27017/test" meteor
</code></pre>

<p>Then open <a href="http://localhost:3000/">http://localhost:3000/</a> in browser,
Open <a href="https://github.com/JackAdams/constellation">constellation console</a> with Ctrl-C.
Open browser console (with F12), run codes below:</p>

<pre><code>Factory.define('author', Authors, {
  name: 'John Smith'
});
// all authors created through Factory have the same "name"

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: 'A book',
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>Now each time you run <code>Factory.create('author');</code>,
a new document is inserted into the collection &ldquo;authors&rdquo;.
You can see it on the constellation console under &ldquo;authors&rdquo; section.</p>

<p>If you want create user with different names,
add a new package <a href="https://github.com/anticoders/meteor-fake/">meteor-fake</a>
with <code>meteor add anti:fake</code>, and modify above definitions as follows:</p>

<pre><code>Factory.define('author', Authors, {
  name: function() { return Fake.user({fields: ['name']}).name; }
});

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: function() { return Fake.sentence(4); },
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>When enable the &ldquo;Autopublish&rdquo; tab, you can see all the collections
even after the autopublish package removed from Meteor app.</p>

<h1>Used in Package</h1>

<p>The container app is named &ldquo;mininf&rdquo;, which has a package named &ldquo;nfcore&rdquo;.</p>

<p>There will be 3 roles of user in this scenario, Add, Sub and Multi.
Users with Add role can only ask addition questions,
with Sub can only ask substraction questions,
with Multi can only ask multiplication questions.</p>

<p>A user without a role can&rsquo;t ask any questions.</p>

<p>The users and their roles will be created with <a href="https://github.com/alanning/meteor-roles">alanning/meteor-roles</a>.</p>

<p>There are 2 collections, accounts and questions,
whose schemas are defined with <a href="https://github.com/aldeed/meteor-simple-schema">simple-schema</a>.</p>

<p>Target:</p>

<p>Run the container app, use constellation to watch it&rsquo;s data;
Define data schema with simple-schema;
Use factory to insert user and question to collections;
Run test on container app, see the result.</p>

<p>The implementation steps:</p>

<ol>
<li><p>Create mininf and nfcore;</p></li>
<li><p>Add simple-schema and roles in the package definition of mininf;</p></li>
<li><p>Add jasmine and velocity in the package test definition of mininf;</p></li>
<li><p>Create schemas of users and questions in package;</p></li>
<li><p>Create collections in package and attach schemas on them;</p></li>
<li><p>Create pub/sub for users and questions;</p>

<p> meteor create mininf
 cd mininf
 meteor create &ndash;package leo:nfcore
 cat &lt;&lt; EOF > packages/nfcore/package.js
 Package.describe({
   name: &lsquo;leo:nfcore&rsquo;,
   version: &lsquo;0.0.1&rsquo;,
   summary: &lsquo;&rsquo;,
   git: &lsquo;&rsquo;,
   documentation: &lsquo;README.md&rsquo;
 });
 Package.onUse(function(api) {
   api.versionsFrom(&lsquo;1.2.0.2&rsquo;);
   api.use(&lsquo;ecmascript&rsquo;);
   // this makes nfcore itself can use variable &ldquo;SimpleSchema&rdquo; in the source code
   api.use(&ldquo;aldeed:<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#115;&#105;&#x6d;&#x70;&#108;&#101;&#x2d;&#115;&#99;&#x68;&#x65;&#109;&#97;&#64;&#49;&#46;&#x33;&#46;&#x33;">&#115;&#x69;&#109;&#x70;&#x6c;&#101;&#x2d;&#x73;&#x63;&#x68;&#x65;&#109;&#x61;&#64;&#x31;&#46;&#51;&#x2e;&#51;</a>&rdquo;);
   api.use(&ldquo;alanning:roles&rdquo;);
   // this makes any packages using nfcore can use &ldquo;SimpleSchema&rdquo;
   api.imply(&ldquo;aldeed:simple-schema&rdquo;);
   api.imply(&ldquo;alanning:roles&rdquo;);
   api.addFiles(&lsquo;nfcore.js&rsquo;);
   api.export(&ldquo;NFCore&rdquo;);
 });
 Package.onTest(function(api) {
   api.use(&lsquo;ecmascript&rsquo;);
   api.use(&lsquo;sanjo:<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#x61;&#x73;&#109;&#105;&#x6e;&#101;&#x40;&#48;&#x2e;&#x31;&#x39;&#46;&#48;">&#x6a;&#97;&#115;&#109;&#105;&#110;&#x65;&#64;&#x30;&#x2e;&#49;&#x39;&#46;&#48;</a>&rsquo;);
   api.use(&lsquo;anti:fake&rsquo;);
   api.use(&lsquo;underscore&rsquo;);
   api.use(&ldquo;dburles:<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x66;&#x61;&#x63;&#116;&#111;&#114;&#x79;&#x40;&#48;&#x2e;&#51;&#46;&#49;&#x30;">&#102;&#97;&#99;&#116;&#x6f;&#x72;&#x79;&#64;&#x30;&#x2e;&#x33;&#46;&#49;&#x30;</a>&rdquo;);
   api.use(&lsquo;velocity:<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#104;&#x74;&#109;&#108;&#45;&#114;&#101;&#112;&#111;&#x72;&#x74;&#101;&#x72;&#x40;&#x30;&#46;&#57;&#46;&#x30;">&#x68;&#x74;&#x6d;&#108;&#45;&#114;&#x65;&#x70;&#x6f;&#x72;&#116;&#x65;&#114;&#64;&#x30;&#46;&#57;&#x2e;&#48;</a>&rsquo;);
   api.use(&lsquo;velocity:<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x63;&#111;&#x6e;&#x73;&#x6f;&#x6c;&#101;&#x2d;&#x72;&#101;&#x70;&#111;&#x72;&#116;&#x65;&#114;&#x40;&#x30;&#46;&#x31;&#x2e;&#51;">&#99;&#111;&#110;&#115;&#111;&#108;&#x65;&#x2d;&#x72;&#101;&#x70;&#111;&#x72;&#x74;&#x65;&#x72;&#64;&#48;&#46;&#x31;&#46;&#x33;</a>&rsquo;);
   api.use(&lsquo;leo:nfcore&rsquo;);
   api.addFiles(&lsquo;nfcore-tests.js&rsquo;);
 });
 EOF</p>

<p> mkdir -p {common/{schemas,collections},tests,client,server}
 cat &lt;&lt; EOF > common/globals.js
 NFCore = {};
 NFCore.Schemas = {};
 NFCore.Collections = {};
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Accounts = new SimpleSchema({
   name: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Questions = new SimpleSchema({
   owner: {
     type: Meteor.Collection.ObjectID
   },
   content: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/collections/collections.js
 NFCore.Collections.Accounts = new Mongo.Collection(&ldquo;accounts&rdquo;);
 NFCore.Collections.Accounts.attachSchema(NFCore.Schemas.Accounts);</p>

<p> NFCore.Collections.Questions = new Mongo.Collection(&ldquo;questions&rdquo;);
 NFCore.Collections.Questions.attachSchema(NFCore.Schemas.Questions);
 EOF</p></li>
</ol>


<h1>Errors, Questions and Solutions</h1>

<p>E: meteor object [object object] has no method &lsquo;attach schema&rsquo;.</p>

<p>S: Add <code>api.use("aldeed:collection2@2.5.0");</code> and <code>api.imply("aldeed:collection2@2.5.0");</code> into Package.onUse() of package.js.</p>

<p>E: insert failed: Access denied. No allow validators set on restricted collection for method &lsquo;insert&rsquo;.</p>

<p>S: Add &ldquo;server&rdquo; as the 2nd parameter in package.js -> Package.onTest -> api.addFiles(<the-test-file-name>):
<code>api.addFiles('tests/accounts.js', 'server');</code>.</p>

<p>Q: In package I use Factory.create() to insert a doc into a collection, but I can&rsquo;t find the collection.</p>

<p>S: Add environment &ldquo;MONGO_URL&rdquo; into the test command:
<code>VELOCITY_TEST_PACKAGES=1 MONGO_URL="mongodb://localhost:27017/test" meteor test-packages --driver-package velocity:html-reporter leo:nfcore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor Test With Velocity and Jasmine]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/29/121847/"/>
    <updated>2015-09-29T12:18:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/29/121847</id>
    <content type="html"><![CDATA[<p>Create jasmine tests and run them as the following codes:</p>

<pre><code>$ meteor create jasmineEx
$ cd jasmineEx
$ meteor create --package newfairscommerce:add-number
$ rm packages/add-number/add-number-tests.js
$ mkdir -p packages/add-number/tests/{server,client}
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/example-spec.js
describe('sanjo:jasmine on client and server', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/client/example-spec.js
describe('sanjo:jasmine on client', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/server/example-spec.js
describe('sanjo:jasmine on server', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
</code></pre>

<p>And replace <code>Package.onTest</code> in packages/add-number/package.js with the following codes:</p>

<pre><code>Package.onTest(function(api) {
  api.use('sanjo:jasmine@0.18.0');
  api.use('velocity:html-reporter@0.9.0');
  api.use('velocity:console-reporter@0.1.3');

  api.addFiles('tests/server/example-spec.js', 'server');
  api.addFiles('tests/client/example-spec.js', 'client');
  api.addFiles('tests/example-spec.js', ['server', 'client']);
});
</code></pre>

<p>Now run <code>VELOCITY_TEST_PACKAGES=1 meteor test-packages --driver-package velocity:html-reporter newfairscommerce:add-number</code>
under the root directory of jasmineEx project,
you can get the following output:</p>

<pre><code>...
=&gt; App running at: http://localhost:3000/
I20151003-18:23:56.465(8)? jasmine-server-integration: 2 tests passed (11ms)
I20151003-18:24:07.849(8)? jasmine-client-integration: 2 tests passed (3ms)
</code></pre>

<p>And you can get the test results in browser with url &ldquo;<a href="http://localhost:3000">http://localhost:3000</a>&rdquo;.</p>

<p>Questions:</p>

<p>When running the following codes, it runs into a interactive shell:</p>

<pre><code>npm install -g velocity-cli
velocity test-package newfairscommerce:add-number
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Local Meteor Package From a Existing Repo]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/24/185036/"/>
    <updated>2015-09-24T18:50:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/24/185036</id>
    <content type="html"><![CDATA[<p>newfairs-v3 is the container project. newfairs-core is a package.</p>

<pre><code>meteor create newfairs-v3
cd newfairs-v3
meteor create --package newfairscommerce:core
cp -r ../newfairs-core packages
mv packages/core/{package.js,README.md} packages/newfairs-core/
rm -rf package/core
meteor add newfairscommerce:core
</code></pre>

<p>Then you have to define dependencies for this package with adding some
<code>api.use()</code> and loading order by adding some <code>api.addFiles(...)</code>
in packages/newfairs-core/package.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Webstorm as Meteor IDE]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/22/104351/"/>
    <updated>2015-09-22T10:43:51+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/22/104351</id>
    <content type="html"><![CDATA[<h1>Terminal</h1>

<p>In editor, use &ldquo;Alt-F12&rdquo; to activate terminal.
In terminal, use &ldquo;Shift-ESC&rdquo; or &ldquo;Alt-F12&rdquo; to go back to editor.
Double click terminal title bar to maximize the terminal panel.</p>

<p>Only run Meteor server in Webstorm&rsquo;s terminal.
Run all other terminal work (such as mongod, git, etc) in a external terminal.
Use &ldquo;Alt-Tab&rdquo; to switch between external terminal and Webstorm.</p>

<h1>Navigattion</h1>

<p>Toggle file browse pane with &ldquo;Alt-1&rdquo;.</p>

<p>Focus editor with &ldquo;ESC&rdquo;.</p>

<h1>Editor</h1>

<p>Split vertically/horizontally;</p>

<h2>Vim Plugin</h2>

<p>Install IdeaVim in [Settings -> Plugins] (open it with Ctrl-Shift-A).</p>

<p>Open/close it in [Tools -> Vim Emulator], or &ldquo;Alt-T Ctrl-Alt-V&rdquo;.</p>

<p>Close editor tab: :q</p>

<h1>Frequently Used Shortcuts</h1>

<p>Double shift: search everything;</p>

<p>Shift-Ctrl-N: search and open files;</p>

<p>Shift-Ctrl-A: search and run commands;</p>

<p>Alt-Left/Right: switch between editor tabs;</p>

<p>Ctrl-Shift-Enter: complate statement;</p>

<p>See [Help -> Default Keymap Reference] for all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autosave in Webstorm]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/22/092543/"/>
    <updated>2015-09-22T09:25:43+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/22/092543</id>
    <content type="html"><![CDATA[<p>Autosave related settings of Webstorm 10.0.4 are mostly in
[Settings -> Appearance &amp; Behavior -> System Settings -> Synchronization].</p>

<p>By default the &ldquo;Save files automatically &hellip;&rdquo; is unchecked.
So Webstorm will not save file changes before you press Ctrl-S.
<strong>But</strong> &ldquo;Save files on frame deactivation&rdquo; is checked.
So if you switch to another application other than Webstorm,
all changes unsaved will be saved to disk.
<strong>However</strong>, when you modify file A without save,
and switch to another tab to edit file B,
file A will not be saved, because this is not &ldquo;frame deactivation&rdquo; (why?).</p>

<p>This is convenient for Meteor development.
You can modify many files without save.
As you switch to browser, Webstorm will save all changes to disk,
then Meteor detects file changes and refreshes pages in browser.</p>

<p>In Webstorm 10.0.4 the Linux version,
the blue color of changed tabs is subtle (compared with that on Windows or Mac),
check &ldquo;Mark modified tabs with asterisk&rdquo;
in [Settings -> Editor -> General -> Editor Tabs] to make unsaved tabs easier to identify.</p>

<p>Finally note that &ldquo;Ctrl-S&rdquo; in Webstorm is &ldquo;save all&rdquo; instead of &ldquo;save&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
