<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy Meteor Application Manually]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/26/203002/"/>
    <updated>2015-03-26T20:30:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/26/203002</id>
    <content type="html"><![CDATA[<p>首先在<a href="http://www.aliyun.com/">阿里云</a>上购买一台&#8221;云服务器ECS&#8221;，
然后进入通过SSH连接VPS。</p>

<p>作为Meteor应用的生产环境，只需要安装mongoDB和Node.js就可以了，不需要安装Meteor.
通过aptitude安装的mongoDB虽然版本比较老(2.4)，但不接受本机以外的连接，
安全性有保障。</p>

<pre><code># aptitude update
# aptitude install mongodb-server
# aptitude install software-properties-common
# add-apt-repository ppa:chris-lea/node.js
# aptitude update
# aptitude install nodejs
</code></pre>

<p>Then create a start script &ldquo;startMeteor&rdquo;:</p>

<pre><code>#!/bin/bash

export PORT=80
export MONGO_URL=mongodb://localhost:27017/newfairs
export ROOT_URL=http://www.newfairs.biz
node /root/bundle/main.js &gt; /root/meteorApp.log
</code></pre>

<p>Now build Meteor application package on developing computer,
and transfer it to production machine:</p>

<pre><code>cd /path/to/meteorProjectRoot
meteor build .
scp newfairsweb.tar.gz alivps:~/
</code></pre>

<p>On production machine, extract Meteor package and install it as a node app:</p>

<pre><code>cd /root
tar zxf newfairsweb.tar.gz
cd bundle/programs/server
npm install
</code></pre>

<p>将VPS恢复到初始状态的方法是：在云服务器ECS主页的&#8221;实例&#8221;页下，
对应主机最右边，&#8221;管理 升级 续费 更多&#8221;中点击&#8221;更多&#8221;，
首先点击&#8221;停止&#8221;来停止实例运行，然后点击&#8221;重新初始化磁盘&#8221;，
将系统盘和数据盘都初始化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Meteor App With MUP]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/25/195307/"/>
    <updated>2015-03-25T19:53:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/25/195307</id>
    <content type="html"><![CDATA[<h1>Create VPS</h1>

<p>First build a vps on <a href="https://digitalocean.com/">DigitalOcean</a>, and name it &ldquo;MeteorUpEx&rdquo;.
Get its IP address &ldquo;128.199.72.xxx&rdquo; at the home page of the droplet.
Get its root password in you email.
Add the following section into ~/.ssh/config:</p>

<pre><code>Host do
Hostname 128.199.72.206
User root
</code></pre>

<p>Add ssh auto login with <code>ssh-copy-id do</code>.</p>

<h1>Publish Meteor App</h1>

<p>Install <a href="https://github.com/arunoda/meteor-up">Meteor Up</a> with <code>npm install -g mup</code>.</p>

<p>Create a mup project:</p>

<pre><code>cd ~/docs/tmp
mkdir nfDeploy
cd nfDeploy
mup init
</code></pre>

<p>Now you can see a mup.json file, edit it as follows:</p>

<pre><code>{
  "servers": [
    {
      "host": "128.199.72.xxx",
      "username": "root",
      "pem": "~/.ssh/id_rsa"
    }
  ],

  "setupMongo": true,
  "setupNode": true,
  "nodeVersion": "0.10.36",
  "setupPhantom": true,
  "appName": "newfairs",

  "app": "/home/chad/docs/tmp/newfairs/newfairsweb",

  "env": {
    "PORT": 80,
    "ROOT_URL": "http://niufairs.biz"
  },

  "deployCheckWaitTime": 15
}
</code></pre>

<p>Note that the &ldquo;appName&rdquo; is also the database name used by Meteor app in mongoDB.
&ldquo;app&rdquo; is the path of your Meteor app source code folder on your local computer.
mup will bundle codes in it, and publish them to host on vps.</p>

<p>You can only use key authentication.
If you use password, an &ldquo;sshpass required for password based authentication&rdquo; error occurs.</p>

<p>Setup production environment: <code>mup setup</code>;
Delpoy app: <code>mup deploy</code>;</p>

<p>If you use external mongodb, add &ldquo;MONGO_URL&rdquo; into &ldquo;env&rdquo; section of mup.json. For example:</p>

<pre><code>"MONGO_URL": "mongodb://104.237.135.xxx:27017/meteor"
</code></pre>

<p>After changing the mongo url, run <code>mup reconfig</code> to validate the new config and restart the Meteor app.</p>

<h1>Import Data</h1>

<p>First dump data from database &ldquo;meteor&rdquo; in source mongoDB server to local machine:</p>

<pre><code>mongodump -h 104.237.135.xxx -d meteor -o mynf
scp -r mynf do:~/
ssh do
cd mynf
mongorestore -d newfairs meteor
</code></pre>

<p>Now verify data in mongoDB of the vps with <code>mongo newfairs</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Database Authentication for Meteor App]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/090609/"/>
    <updated>2015-03-06T09:06:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/090609</id>
    <content type="html"><![CDATA[<p>MongoDB version: 3.0.</p>

<ol>
<li><p>Start mongod without auth: <code>mongod</code>;</p></li>
<li><p>Connect to server with <code>mongo</code>;</p></li>
<li><p>Create admin and database owners:</p></li>
<li><p>Start mongod with <code>mongod --auth</code>;</p></li>
<li><p>Start Meteor app with <code>MONGO_URL="mongodb://chad:123@localhost:27017/test" meteor</code>.</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb">http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb</a></p>

<h1>MMS</h1>

<p>Connect mongodb server without authentication: <code>mongo &lt;ip&gt;:&lt;port&gt;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Website Monitor for Meteor Application]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/28/152115/"/>
    <updated>2015-02-28T15:21:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/28/152115</id>
    <content type="html"><![CDATA[<h1>Google Analytics</h1>

<p>Add tracking code (<script>&hellip;</script>) into the &ldquo;<head>&hellip;</head>&rdquo; (commonly in head.html) of your meteor app.</p>

<p>You can find your tracking codes at Admin -> User Management -> Tracking Info -> Tracking Code.</p>

<p>Get real-time data (such as on-site user number) at Reporting -> Real-Time -> Overview.</p>

<h1>Kadira</h1>

<pre><code>meteor add meteorhacks:kadira
</code></pre>

<p>Add the following codes into server/kadira.js:</p>

<pre><code>Kadira.connect('&lt;App ID&gt;', '&lt;App Secret&gt;');
</code></pre>

<p>get your AppID and App secret at <a href="https://kadira.io/">Kadira</a> -> [Your App] -> Settings.</p>

<p>Then see read-time statistics on its dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Algorithm of Related Fairs]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/25/141712/"/>
    <updated>2015-02-25T14:17:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/25/141712</id>
    <content type="html"><![CDATA[<p>For a given fair A, it&rsquo;s <em>major category</em> are a set of its cat.major subdocuments.</p>

<p>For example, for the fair:</p>

<pre><code>{ cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] }
</code></pre>

<p>its major categories are set [&ldquo;abc, &#8220;xyz&rdquo;].
Here we say the major categories of fair X is <code>majorCat(X)</code>.</p>

<p>If the intersection of set <code>majorCat(X)</code> and <code>majorCat(Y)</code> are not empty,
we say fair X and Y are <em>related</em>.</p>

<p>So for a given fair X, how to find all its related fairs in a collection?</p>

<p>Here is the demonstration:</p>

<p>In mongodb, create a test collection with the following codes:</p>

<pre><code>db.cats.insert( { cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] } );
db.cats.insert( { cat: [ { major: "abcd", minor: [ 1,23,3] }, { major: "xyzu", minor: [ 87, 987, 343]} ] } );
db.cats.insert( { cat: [ { major: "bcd", minor: [ 1,23,3] }, { major: "abc", minor: [ 3, 23, 876]} ] } );
db.cats.insert( { cat: [ { major: "xyz", minor: [ 8,83,5] }, { major: "axc", minor: [ 34, 3, 76]} ] } );
</code></pre>

<p>Create a new Meteor app with <code>meteor create relatedFairs</code>, and its files:</p>

<p>relatedFairs.html</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;relatedFairs&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;Find related fairs&lt;/h1&gt;
  
&lt;/body&gt;

&lt;template name="hello"&gt;
  &lt;ul&gt;
    
      &lt;li&gt; 
        &lt;b&gt;:&lt;/b&gt;
        
          ,
        
      &lt;/li&gt;
    
  &lt;/ul&gt;
  
    &lt;p&gt;Related fairs of the first fair &lt;/p&gt;
    &lt;ul&gt;
      
        &lt;li&gt;
          &lt;b&gt;:&lt;/b&gt;
          
            ,
          
        &lt;/li&gt;
      
    &lt;/ul&gt;
  
&lt;/template&gt;
</code></pre>

<p>relatedFairs.js:</p>

<pre><code>Fairs = new Mongo.Collection("cats");

if (Meteor.isClient) {
  Template.hello.helpers({
    allFairs: function () {
      return Fairs.find();
    },
    related: function () {
      var theXrd = 0,
          theFair = Fairs.findOne( {}, {skip: theXrd } );
      if (! theFair) {
        return null;
      }
      var majors = _.map(theFair.cat, function(i) { return i.major; } );
      var rels = Fairs.find( { cat: { $elemMatch: { major: { $in: majors } } },
                               _id: { $ne: theFair._id } } );
      return {firstID: theFair._id._str, relatedFairs: rels };
    }
  });
}
</code></pre>

<p>Here we use <a href="http://underscorejs.org/">Underscore.js</a>,
so install this package with <code>meteor add underscore</code> to run our demo app
(with <code>MONGO_URL="mongodb://localhost:27017/test" meteor</code> in project root folder).</p>

<p>Modify the value of &ldquo;theXrd&rdquo; above, you can see the related fairs of each fair.</p>

<p>To make a demo in a production collection,
in fair &ldquo;A&rdquo; we find a major category called &ldquo;垃圾车与运输车&#8221;，
then choose a fair B, whose id is &#8220;54e71a5642fb549b1389ae6f&rdquo;.</p>

<p>Let&rsquo;s add the major cateory to fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a5642fb549b1389ae6f") }, { $push: {category: {major: "垃圾车与运输车"}} } );
</code></pre>

<p>Now fair A and B is related. Test them on your web site.
If the test is past, remove the test data from fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a6642fb549b1389ae6f") }, { $pop: { category: 1 } } );
</code></pre>
]]></content>
  </entry>
  
</feed>
