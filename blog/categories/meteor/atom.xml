<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3月6日演讲提纲]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/21/110422/"/>
    <updated>2016-02-21T11:04:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/21/110422</id>
    <content type="html"><![CDATA[<h1>行业背景</h1>

<ul>
<li><p>会展行业现状：基本角色介绍；</p></li>
<li><p>行业特点：信息不透明，中间环节多，交易成本高，主要靠销售，参展体验差；</p></li>
<li><p>与传统B2C领域的区别：交易量小，单笔金额大，多了展会维度；</p></li>
<li><p>产品愿景：改变行业现状，提升会展效果，airbnb vs taobao</p></li>
</ul>


<h1>技术框架选型</h1>

<h2>外包 vs 自主开发</h2>

<p>成本和质量控制，团队建设，备选方案：Magento, ezshop</p>

<h2>Web框架选型</h2>

<p>SSH, LAMP, .NET, Dart, Flask, Play, MEAN, Meteor</p>

<p>开发者背景：Pascal -> Delphi -> Python -> Java -> Scala (Linux)</p>

<p>Meteor优势：学习成本低（js: web + db），开发效率高，reactivity</p>

<h1>架构演进</h1>

<p>原则：自主开发核心商业逻辑，外围功能尽量外包。</p>

<ul>
<li><p>第一阶段：站内搜索，基于正则匹配的站内搜索，
Deploy: MUP, beta -> production;
单一package，bitbucket，DB + Web Server, 公网IP；</p></li>
<li><p>第二阶段：线上搜索 + 线下撮合，以搜索为中心，增加静态广告，
DB + Web Server + Console，初步的权限管理；</p></li>
<li><p>第三阶段：多品种线上交易，多package，git submodule，
DB Cluster + Web Server + Elasticsearch + MongoConnector +
Wordpress + Phabricator + Console;
AliPay, 私有网络；</p></li>
<li><p>第四阶段：单一商品线上交易，精简数据模型，
Deploy: staging (Phab + Ansible, auto) -> beta -> production;
SSL，AliPay + 银行接入；</p></li>
</ul>


<h1>Meteor待改进的地方</h1>

<ul>
<li><p>静态分析工具不足，难以排查拼写错误；</p></li>
<li><p>Package数量增加后，编译速度变慢，受网速影响大；</p></li>
<li><p>版本兼容性不好；</p></li>
<li><p>多数据源处理复杂；</p></li>
<li><p>第三方package兼容性，持续性良莠不齐；</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebSocket Error 400 in Meteor App]]></title>
    <link href="http://leetschau.github.io/blog/2015/12/25/102101/"/>
    <updated>2015-12-25T10:21:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/12/25/102101</id>
    <content type="html"><![CDATA[<p>I deploy a Meteor app, and proxy it with nginx.
When connect to the app server, there&rsquo;s a websocket error:</p>

<p>WebSocket connection to &lsquo;ws://prod-app-192-168-100-21.newfairs-inc.com/sockjs/311/ud_4e5xf/websocket&rsquo; failed:
Error during WebSocket handshake: Unexpected response code: 400</p>

<p>Solution:</p>

<pre><code>cat /etc/nginx/sites-enabled/newfairs
server {
  server_name prod-app-192-168-100-21.newfairs-inc.com;
  location / {
    proxy_pass http://localhost:3000/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
}
</code></pre>

<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/17014969/meteor-websocket-handshake-error-400-with-nginx">Meteor WebSocket handshake error 400 with nginx</a></p>

<p><a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a></p>

<p><a href="http://stackoverflow.com/questions/30171179/meteor-websocket-connection-to-ws-websocket-failed-error-during-websock">http://stackoverflow.com/questions/30171179/meteor-websocket-connection-to-ws-websocket-failed-error-during-websock</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Meteor应用完整从1.2版本降级到1.1版本]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/29/200553/"/>
    <updated>2015-10-29T20:05:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/29/200553</id>
    <content type="html"><![CDATA[<p>当前版本的mup不支持Meteor 1.2，对1.1支持很好。
一位开发者用<code>meteor update</code>升级了Meteor,然后push到代码库中，
其他开发者同步代码后发现无法使用mup部署，
这个问题不能简单地使用<code>meteor --releae 1.1</code>处理，
因为从1.1到1.2，Metoer很多核心包的版本发生了变化，并增删了很多包，
<code>meteor --release 1.1</code>只能还原Meteor自身版本，
无法还原核心包，必须将.meteor目录下所有文件复原。</p>

<p>使用git的patch功能可以方便地实现针对一个目录的复原。
首先找到包含正确文件（旧Meteor版本和包定义）的commit，例如 15c9f125630，
然后找到要复原的目标commit，一般是develop branch的HEAD，例如 f13b84f6c55，
做一个反向patch：<code>git diff f13b84f6c55 15c9f125630 .meteor &gt; reverseDotMeteor.patch</code>;</p>

<p>正常的<code>git diff</code>是旧版本在前，新版本在后，这样生成的patch反映的是文件内容随着时间发生的改变，
这里将新的commit放在前面，生成的patch就能起到回到过去的作用。</p>

<p>checkout目标commit并加载patch: <code>git apply reverseDotMeteor.patch</code>.</p>

<p>测试mup是否能正常工作，如果能，提交修改。</p>

<p>参考：<a href="http://stackoverflow.com/questions/1191282/how-to-see-the-changes-between-two-commits-without-commits-in-between">http://stackoverflow.com/questions/1191282/how-to-see-the-changes-between-two-commits-without-commits-in-between</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validate Data Defined by Simple-Schema]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/29/080601/"/>
    <updated>2015-10-29T08:06:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/29/080601</id>
    <content type="html"><![CDATA[<p>// the object need to be validate according to the schema:
var fair = { &hellip; };
var mycon = NewfairsCore.Schemas.Fair.namedContext();</p>

<p>// this method returns true if the object is valid according to the schema
// or false if it is not:
mycon.validate(fair);</p>

<p>// this method lists all invalid keys:
mycon.invalidKeys();</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Meteor With Elasticsearch]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/28/102957/"/>
    <updated>2015-10-28T10:29:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/28/102957</id>
    <content type="html"><![CDATA[<p>Install elasticsearch;</p>

<p>Follow the instructions in <a href="https://github.com/andrewreedy/meteor-elasticsearch">meteor-elasticsearch</a></p>

<p>Choose plugin version according to
<a href="https://github.com/richardwilly98/elasticsearch-river-mongodb.">https://github.com/richardwilly98/elasticsearch-river-mongodb.</a></p>

<p>Get elasticsearch version: <code>curl -XGET 'localhost:9200'</code></p>

<p>So mongo river plugin version 2.0.9 is installed:</p>

<pre><code>cd /usr/share/elasticsearch
sudo bin/plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0
sudo bin/plugin --remove com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0
sudo bin/plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.9
</code></pre>

<p>Start elasticsearch server: <code>sudo /usr/share/elasticsearch/bin/elasticsearch --default.path.conf=/etc/elasticsearch/</code></p>

<p>Create a Meteor app with external mongodb connection, and verify it;</p>

<p>Add ES package: <code>meteor add bigdata:elasticsearch</code>;</p>

<p>Add the setting file &ldquo;settings.json&rdquo;;</p>

<p>Start the meteor server: <code>MONGO_URL="mongodb://user:pwd@ip:port/db" meteor --settings settings.json</code></p>

<p>Problem: the ES variable is undefined.</p>
]]></content>
  </entry>
  
</feed>
