<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-04T11:42:13+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor MongoDB Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/20/230618/"/>
    <updated>2014-12-20T23:06:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/20/230618</id>
    <content type="html"><![CDATA[<ul>
<li><p>Connect to a mongodb of a Meteor app: run <code>meteor</code> at the project root. Start another shell, go to this folder, and run <code>meteor mongo</code>;</p></li>
<li><p>List all available commands: <code>help</code>;</p></li>
<li><p>List DB operation methods: <code>db.help()</code>;</p></li>
<li><p>List all existing collection names: <code>show collections</code>;</p></li>
<li><p>List all available commands of a collection: <code>db.&lt;collection-name&gt;.help()</code>;</p></li>
<li><p>Show collection information: <code>db.&lt;collection-name&gt;.stats()</code>;</p></li>
<li><p>Print all &ldquo;name&rdquo; field of collection &ldquo;fairs&rdquo;: <code>db.fairs.find({}, {name_chn: 1})</code>;</p></li>
<li><p>Print all fields except &ldquo;name_chn&rdquo; of collection &ldquo;fairs&rdquo;: <code>db.fairs.find({}, {products: 0})</code>;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor Resources]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/17/114238/"/>
    <updated>2014-12-17T11:42:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/17/114238</id>
    <content type="html"><![CDATA[<h1>Learning Resources</h1>

<h2>Published Books</h2>

<ul>
<li><p>Instant Meteor JavaScript Framework Starter by Gabriel Manricks of PACKT, 2013;</p></li>
<li><p>Getting Started with Meteor.js JavaScript Framework by Isaac Strack of PACKT, 2012;</p></li>
</ul>


<h2>Upcoming Books</h2>

<ul>
<li><p>Beginning Meteor by Aaron Gray of APress, march 25, 2015;</p></li>
<li><p>Building Single-page Web Apps with Meteor by Fabian Vogelsteller of PACKT, december 26, 2014;</p></li>
</ul>


<h2>Free Resources</h2>

<p><a href="https://bulletproofmeteor.com/">Bulletproof Meteor</a></p>

<p><a href="http://themeteorchef.com/">The Meteor Chef</a></p>

<p><a href="http://eventedmind.com/">Evented Mind</a></p>

<p><a href="http://meteortips.com/">Meteor Tips</a></p>

<p><a href="https://www.udemy.com/build-your-first-real-time-web-application-with-meteorjs">Build Your First Real-Time Web Application with MeteorJS</a></p>

<p><a href="http://meteorjs.club/">Josh Owen&rsquo;s Meteor Club</a></p>

<h2>Paid Resources</h2>

<p><a href="https://www.discovermeteor.com/">Discover Meteor</a></p>

<p>Ref: <a href="http://www.sitepoint.com/9-ways-meteor-1-0-will-take-world/">9 Ways Meteor 1.0 Will Take You Out of This World</a></p>

<h1>For Meteor Jobs</h1>

<p><a href="http://www.weworkmeteor.com/">We Work Meteor</a></p>

<h1>Test Tools</h1>

<p><a href="https://kadira.io/">Kadira</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Data From Csv File Into Meteor Mongodb]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/08/114328/"/>
    <updated>2014-12-08T11:43:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/08/114328</id>
    <content type="html"><![CDATA[<p>Here I use mongoDB&rsquo;s mongoimport tool to import csv file into Meteor app&rsquo;s Mongodb.</p>

<p>First download mongodb package (mongodb-linux-x86_64-2.6.5.tgz) from <a href="http://www.mongodb.org/">mongoDB</a>, extract it into ~/apps folder.</p>

<p>Next start the Meteor app. When the server listening on port 3000, it&rsquo;s mongoDB server listening on port 3001.</p>

<p>Save the following codes into app&rsquo;s $HOME/private folder as importdb.sh:</p>

<pre><code>~/apps/mongodb-linux-x86_64-2.6.5/bin/mongoimport -h localhost:3001 --db meteor --collection fairs --type csv --file fairs.csv --headerline
</code></pre>

<p>Here the source csv file is saved in file private/fairs.csv.</p>

<p>It&rsquo;s headerline (first line of csv file) is also comma-seperated:</p>

<pre><code>Name, Age, Job
Bob, 35, Cooker
Tom, 28, Coder
...
</code></pre>

<p>Now in the Meteor app, add <code>Fairs = new Meteor.Collection("fairs");</code> into js file to use the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text Box Autocomplete in Meteor]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/04/230146/"/>
    <updated>2014-12-04T23:01:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/04/230146</id>
    <content type="html"><![CDATA[<p>Autocomplete function in text box provides instant response to user input text, which is very powerful and user-friendly.</p>

<p>For meteor, this function is called typeahead.
Run <code>meteor search typeahead</code>, you can find <a href="https://github.com/sergeyt/meteor-typeahead">sergeyt:typeahead</a>.
Clone it to your computer with git, in the &ldquo;demo&rdquo; subfolder, run <code>meteor</code> and open <a href="http://localhost:3000/.">http://localhost:3000/.</a>
When typing in the first text box (&ldquo;NBA teams&rdquo; in it), it will provide instant response.</p>

<p>sergeyt:typeahead&rsquo;s Bootstrap counterpart is called typeahead, too. That of jQuery is called &ldquo;Autocomplete&rdquo;.</p>

<p>The following is a minimal working demo of sergeyt:typeahead:</p>

<pre><code>$ meteor create meteorapp
$ cd meteorapp
$ meteor add sergeyt:typeahead
$ cat meteorapp.html
&lt;head&gt;
  &lt;title&gt;meteorapp&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;input "p" in the following text box&lt;/h1&gt;
  
&lt;/body&gt;

&lt;template name="sti"&gt;
  &lt;input class="form-control typeahead" name="team"
      type="text" placeholder="NBA teams"
      autocomplete="off" spellcheck="off"
      data-source="nba"/&gt;
&lt;/template&gt;

$ cat meteorapp.js
Nba = new Meteor.Collection("nba");

if (Meteor.isClient) {
  Template.sti.helpers({
    nba: function(){
        return Nba.find().fetch().map(
                function(it){
                  return it.name;
                });
    }
  });

  Meteor.startup(function(){
      Meteor.typeahead.inject();
  });
}

if (Meteor.isServer) {
  Meteor.startup(function () {
    Nba.insert({name:'Philadelphia 76ers'});
    Nba.insert({name:'Detroit Pistons'});
    Nba.insert({name:'Portland Trail Blazers'});
  });
}
</code></pre>

<p>Note:</p>

<ol>
<li><p>Every time start the server, the 3 items will be added into collection Nba. So if you don&rsquo;t clear data (with <code>meteor reset</code>), you will see many identical items in candidate list;</p></li>
<li><p>No matter &ldquo;on&rdquo; or &ldquo;off&rdquo; of the value of the &ldquo;autocomplete&rdquo; attribute of the text box, the autocomplete function always works. So what is the function of this attribute?</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Username Disappeared in Meteor Official Tutorial]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/04/110411/"/>
    <updated>2014-12-04T11:04:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/04/110411</id>
    <content type="html"><![CDATA[<p>In the 9th step (Adding user accounts) of official tutorial &ldquo;simple-todos&rdquo; of Meteor 1.0,
if you start server while leaving some old data (todo items) created in previous steps,
you will find that there&rsquo;s no username before the todo text.</p>

<p>But if you clear all old data (click remove button on web page, or use <code>meteor reset</code>),
and create new todo items with a signed in username, you will find the username appear.</p>

<h1>Data binding between Template and Collection</h1>

<p>The following modified version simple-todos works:</p>

<p>simple-todos.html:</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;Todo List&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div class="container"&gt;
    &lt;header&gt;
      &lt;h1&gt;Todo List&lt;/h1&gt;
      &lt;label class="hide-completed"&gt;
        &lt;input type="checkbox" checked="" /&gt;
        Hide Completed Tasks
      &lt;/label&gt;

      

      
        &lt;form class="new-task"&gt;
          &lt;input type="text" name="text" placeholder="Type to add tasks" /&gt;
        &lt;/form&gt;
      
    &lt;/header&gt;
    &lt;ul&gt;
      
        
      
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;template name="todo"&gt;
  &lt;li class="checked"&gt;
    &lt;button class="delete"&gt;&amp;times;&lt;/button&gt;
    &lt;input type="checkbox" checked="" class="toggle-checked" /&gt;
    &lt;span class="text"&gt;&lt;strong&gt;&lt;/strong&gt; -  at &lt;/span&gt;
  &lt;/li&gt;
&lt;/template&gt;
</code></pre>

<p>simple-todos.js:</p>

<pre><code>Tasks = new Mongo.Collection("tododb");

if (Meteor.isClient) {
  Template.body.helpers({
    todoitems: function () {
      if (Session.get("hideCompleted")) {
        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});
      } else {
        return Tasks.find({}, {sort: {createdAt: -1}});
      }
    },
    hideCompleted: function () {
      return Session.get("hideCompleted");
    }
  });

  Template.body.events({
    "submit .new-task": function (event) {
      var text = event.target.text.value;

      Tasks.insert({
        text: text,
        createdAt : new Date(),
        owner: Meteor.userId(),
        username: Meteor.user().username
      });

      event.target.text.value = "";

      return false;
    },

    "change .hide-completed input": function (event) {
        Session.set("hideCompleted", event.target.checked);
    }
  });

  Template.todo.helpers({
    creDate: function () {
      return this.createdAt;
    }
  });

  Template.todo.events({
    "click .toggle-checked": function () {
      Tasks.update(this._id, {$set: {checked: ! this.checked}});
    },
    "click .delete": function () {
      Tasks.remove(this._id);
    }
  });

  Accounts.ui.config({
    passwordSignupFields: "USERNAME_ONLY"
  });
}

if (Meteor.isServer) {
  Meteor.startup(function () {
    // code to run on server at startup
  });
}
</code></pre>

<p>So we can conclude (the left hand side of &ldquo;&lt;=>&rdquo; is template in html file, while js codes on the right hand side):</p>

<ol>
<li><p>The name after #each is a <strong>helper function</strong> which defined in js file, and returns a subset of a collection:</p>

<pre><code>  &lt;=&gt; Template.body.helpers -&gt; todoitems: function () {...}; 
</code></pre></li>
<li><p>Variables in  in a template is the attributes of the object in collection, represented by the template:</p>

<pre><code> &lt;strong&gt;&lt;/strong&gt; -  &lt;=&gt; Tasks.insert({ text: text, ..., username: Meteor.user().username }); 
</code></pre>

<p>or a helper function ( here).</p></li>
<li><p>&ldquo;this&rdquo; in helper function refers to the template the function based on.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
