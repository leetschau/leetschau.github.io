<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/meteor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-11T14:12:54+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Share One Users Collection Between Multiple Meteor Apps]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/11/123934/"/>
    <updated>2015-08-11T12:39:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/11/123934</id>
    <content type="html"><![CDATA[<p>We are running a website and a backend data management system,
both are meteor web servers.</p>

<p>The backend needs fetch data from the website.
So they have to share one database, and the same &ldquo;users&rdquo; collection for both.
That means one can register on the website and login to the backend,
which is obviously unacceptable.</p>

<p>To distinguish users of the website and the backend,
I choose package <a href="https://github.com/alanning/meteor-roles">alanning/meteor-roles</a>.</p>

<p>All the backend users will have roles <code>['backend', 'admin']</code>,
while website users haven&rsquo;t.</p>

<p>In &ldquo;safe&rdquo; environment, backend has its own user registration entry.
Users registered there will be given above roles automatically.</p>

<p>Put the following codes into server side JavaScript files to achieve above goal
(based on examples/rolesWithAccountsUI on meteor-roles):</p>

<pre><code>var ROLE_NAME = 'editor';
var GROUP_NAME = 'backend';

Meteor.publish('mallData', function(){
  if (Roles.userIsInRole(this.userId, ROLE_NAME, GROUP_NAME)) {
    console.log('pass check');
    return Mall.find();
  } else {
    console.log('not pass check');
    this.stop();
    return;
  }
});

Meteor.startup(function () {
  Accounts.onCreateUser(function (options, user) {
    Roles.setRolesOnUserObj(user, ROLE_NAME, GROUP_NAME);
    if (options.profile) {
      user.profile = options.profile
    }
    return user;
  });
});

Roles.setRolesOnUserObj = function (users, roles, group) {
  if (!users) throw new Error ("Missing 'users' param")
  if (!roles) throw new Error ("Missing 'roles' param")
  if (group) {
    if ('string' !== typeof group)
      throw new Error ("Roles error: Invalid parameter 'group'. Expected 'string' type")
    if ('$' === group[0])
      throw new Error ("Roles error: groups can not start with '$'")

    // convert any periods to underscores
    group = group.replace(/\./g, '_')
  }

  // ensure arrays to simplify code
  if (!_.isArray(users)) users = [users]
  if (!_.isArray(roles)) roles = [roles]


  // remove invalid roles
  roles = _.reduce(roles, function (memo, role) {
    if (role
        &amp;&amp; 'string' === typeof role
        &amp;&amp; role.trim().length &gt; 0) {
      memo.push(role.trim())
    }
    return memo
  }, [])

  // if roles is empty, quit
  if (roles.length === 0) return

  // ensure all roles exist in 'roles' collection
  existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {
    memo[role.name] = true
    return memo
  }, {})
  _.each(roles, function (role) {
    if (!existingRoles[role]) {
      Roles.createRole(role)
    }
  })

  // ensure users is an array of objects
  _.each(users, function (user) {
    if ('object' !== typeof user) {
      throw new Error("Expected 'users' argument to be an object or array of objects")
    }
  })


  // Set the roles on the actual user object

  if (group) {

    // roles is a key/value dict object

    _.each(users, function (user) {
      user.roles = {}
      user.roles[group] = roles
    })

  } else {

    // roles is an array of strings

    _.each(users, function (user) {
      user.roles = roles
    })

  }

}
</code></pre>

<p>Now any user outside &lsquo;backend&rsquo; group, or without &lsquo;editor&rsquo; role, can&rsquo;t get any data from server.</p>

<p>Unfortunately Internet is unsafe at all.
So the registration entry has to be removed from the accounts-ui:</p>

<pre><code>Meteor.startup(function () {
  Accounts.config({
    forbidClientAccountCreation : true
  });
});
</code></pre>

<p>Now if you want give a website personnel rights to edit data through backend,
first he should register on the website,
then you define his role manually in mongo console:</p>

<pre><code>&gt; db.users.find({ "emails.0.address":"user@123.com" }, { "emails":1 })
&gt; db.users.update({_id: "PM36t6eRmuC9oELdu"}, { $set: { roles: {"backend": [ "editor" ]} } })
</code></pre>

<p>First find the id of the user (here is &ldquo;<a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#117;&#x73;&#x65;&#x72;&#x40;&#x31;&#50;&#x33;&#46;&#x63;&#x6f;&#x6d;">&#117;&#115;&#x65;&#114;&#x40;&#x31;&#50;&#51;&#46;&#99;&#x6f;&#109;</a>&rdquo;) by his email address.
Then add group and roles to the user (say the id of the user is &ldquo;PM36t6eRmuC9oELdu&rdquo;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autopubsh and Insecure Package in Meteor]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/07/155721/"/>
    <updated>2015-08-07T15:57:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/07/155721</id>
    <content type="html"><![CDATA[<h1>Collection definitions in root directory</h1>

<ol>
<li><p>autopublish package exists: data can be seen and updated;</p></li>
<li><p>Remove autopublish package: data can&rsquo;t be seen;</p></li>
<li><p>Add publish method in server js file, and subscribe methods in client js file:
data can be seen and updated;</p>

<pre><code> # in server:
 Meteor.publish('mallData', function(){
   return Mall.find();
 });

 # in client:
 Meteor.subscribe('mallData');
</code></pre></li>
<li><p>Remove insecure package: data can be seen, but can&rsquo;t be updated;</p></li>
<li><p>Add an allow rule in js file in root directory: only &ldquo;status&rdquo; field can be updated.</p>

<pre><code> Mall.allow({
   update: function(userId, doc, fieldNames, modifier){
     if ((fieldNames.length === 1) &amp;&amp;
         (fieldNames[0] === 'status')){
       return true;
     }
   }
 });
</code></pre>

<p> Meanwhile inserting and remvoing operations will be denied by the server.</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://joshowens.me/meteor-security-101/">METEOR SECURITY 101</a> by Josh Owens.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor实施案例]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/05/125922/"/>
    <updated>2015-08-05T12:59:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/05/125922</id>
    <content type="html"><![CDATA[<h1>国外</h1>

<p><a href="http://blonk.co/">blonk</a>: 找工作，移动APP，iOS, Android, 双方在感兴趣的对方上点Yes，如果匹配成功开始聊天；</p>

<p><a href="https://respond.ly/">respond.ly</a>: 基于Twitter的客户服务和协作平台；</p>

<p><a href="http://www.flowkey.com/en">Flowkey</a>: 教育类，钢琴在线教学，web, iOS, Android，音频对比，反馈建议，用户量：50,000+</p>

<p><a href="http://versoapp.com/">verso</a>: 教育类，移动APP，iOS, Android，教师添加视频，学生写反馈，100多个国家的几千所学校；</p>

<p><a href="https://beta.workpop.com/">Workpop</a>: 找/应聘小时工，Web App;</p>

<p><a href="http://www.classcraft.com/">Classcraft</a>: 教学类应用，平台：Web, iOS，学习变为角色扮演，老师定义学生角色，获取经验值；</p>

<p><a href="https://lookback.io/">Lookback</a>: 移动应用用户体验反馈软件，原理：屏幕录制（记录手指位置和拖动），然后发送；平台：Web, iOS, Mac, Android；</p>

<p><a href="http://www.tuniliv.com/">Tuniliv</a>: 突尼斯货运与物流系统；</p>

<p><a href="http://www.telescopeapp.org/">Telescope</a>: 软件平台，论坛模板；</p>

<h1>国内</h1>

<p><a href="http://newfairs.com">牛展网</a>: 会展服务；</p>

<p><a href="http://maodou.io/">毛豆网</a>: 在线教育/外包；</p>

<h1>生态系统</h1>

<p>[node.js]</p>

<p>[mongodb]</p>

<p>[bootstrap]</p>

<p>[meteoric]</p>

<h1>参考资料</h1>

<p><a href="http://www.quora.com/What-are-the-larger-examples-of-Meteor">What are the larger examples of Meteor?</a></p>

<p><a href="http://www.jianshu.com/p/ps8C8N">关于Meteor的5个误解</a></p>

<p><a href="https://www.meteor.com/case-studies/build-apps-with-meteor">https://www.meteor.com/case-studies/build-apps-with-meteor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Meteor and Node App on Ubuntu 14.04 VPS]]></title>
    <link href="http://leetschau.github.io/blog/2015/07/22/082040/"/>
    <updated>2015-07-22T08:20:40+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/07/22/082040</id>
    <content type="html"><![CDATA[<h1>Setup Environment with MUP</h1>

<p>On your laptop, install mup with <code>npm install -g mup</code>.
In a new directory, create a mup project with <code>mup init</code>.
Set &ldquo;setupMongo&rdquo;, &ldquo;setupNode&rdquo; and &ldquo;setupPhantom&rdquo; to &ldquo;true&rdquo; in mup.json,
and run <code>mup setup</code>.</p>

<h1>Run Apps</h1>

<p>To install the <strong>first</strong> Meteor app, <code>mup deploy</code>.</p>

<p>To install the second (there has been a Meteor app is running) or more,
set &ldquo;setupMongo&rdquo;, &ldquo;setupNode&rdquo; and &ldquo;setupPhantom&rdquo; to &ldquo;false&rdquo; in mup.json,
change &ldquo;appname&rdquo;, &ldquo;app&rdquo; and values in &ldquo;env&rdquo; accordingly.
Finally run <code>mup deploy</code>.</p>

<p>For Node app, first get the source code with git,
then run it with forever, which is installed by mup:</p>

<pre><code>aptitude install git
git clone ... projHome
cd projHome
npm install
# confirm port number in config.js
forever start app.js  # when the main script is "app.js"
</code></pre>

<p>Get the app status with <code>forever list</code>.
If the app can&rsquo;t start, print logs with <code>forever logs 1</code>
(if the target app&rsquo;s index in <code>forever list</code> is 1).</p>

<h1>Setup Routes</h1>

<p>Note: MUP requires Node v0.10.36 or later.
So do NOT install node with <code>aptitude install nodejs</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于ionic的移动网页开发]]></title>
    <link href="http://leetschau.github.io/blog/2015/07/18/005622/"/>
    <updated>2015-07-18T00:56:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/07/18/005622</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/meteoric/meteor-ionic/blob/master/GUIDE.md">meteor-ionic Guide</a>是整体框架的说明。</p>

<p>文档中心：
<a href="http://ionicframework.com/docs/">Ionic Documentation</a>，
常用的包括界面组件<a href="http://ionicframework.com/docs/components/">CSS Components</a>和
图标库<a href="http://ionicons.com/">ionicons</a>（可以输入名称搜索对应图标，如"telephone", &ldquo;home"等）。</p>

<h1>Header, Footer字体太小问题</h1>

<p>在<head>&hellip;</head>里增加下面两行代码：</p>

<pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"&gt;
&lt;link href='http://fonts.googleapis.com/css?family=Roboto:400,300,500' rel='stylesheet' type='text/css'&gt;
</code></pre>

<h1>Header上登录注册按钮覆盖退回按钮问题</h1>

<p>下面的代码不会出现覆盖问题：</p>

<pre><code>
  



  &lt;div class="col text-right"&gt;
    &lt;button class="button button-clear button-stable"&gt;登录&lt;/button&gt;
    &lt;button class="button button-clear button-stable"&gt;注册&lt;/button&gt;
  &lt;/div&gt;

</code></pre>

<p>如果在<code>&lt;div class="col text-right"&gt;</code>外面加上一层<code>&lt;div class="bar bar-header bar-positive"&gt;</code>，
则会覆盖"headerButtonLeft"中定义的返回按钮。</p>

<p>另：<code></code> 中可以添加path（返回指定route）和text（按钮说明文字）属性。</p>
]]></content>
  </entry>
  
</feed>
