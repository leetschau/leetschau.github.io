<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 存储 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/cun-chu/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java中数值类型的存储方法]]></title>
    <link href="http://leetschau.github.io/blog/2011/08/18/154015/"/>
    <updated>2011-08-18T15:40:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/08/18/154015</id>
    <content type="html"><![CDATA[<p>下面的程序（改自IBM DevelopWorks的&#8221;Getting Started with NIO&#8221;中的TypesInByteBuffer.java）用一个ByteBuffer对象存储了一个int和一个long，比较清晰的演示了int和long在内存中是如何存储的。
 package com.ibm.nio;</p>

<p> import java.nio.ByteBuffer;</p>

<p> public class TypesInByteBuffer {</p>

<p>  static public void main(String args[]) throws Exception {</p>

<pre><code>ByteBuffer buffer = ByteBuffer.allocate(64); 

buffer.putInt(30); 

buffer.putLong(7000000000000L); 

buffer.flip(); // set a breakpoint here 

System.out.println(buffer.getInt()); 

System.out.println(buffer.getLong()); 
</code></pre>

<p>   }</p>

<p> }</p>

<p> 在flip处设置一个断点，查看buffer的值如下：
 [0, 0, 0, 30, 0, 0, 6, 93, -48, -125, 112, 0,&hellip;]
 前4个字节存储int，这里是30，后8个字节存储long，这里是 7000000000000L，由于一个字节是8个bit，因此要把一个8字节的内存中的long型数ABCDEFGH转换为10进制数，计算公式是：
 A<em>256<sup>7</sup> + B</em>256<sup>6</sup> + C<em>256<sup>5</sup> + D</em>256<sup>4</sup> + E<em>256<sup>3</sup> + F</em>256<sup>2</sup> + G<em>256 + H
 如果某一位是负数，则用256减去它再进行计算。
 所以用Pyhton语法验证就是：6</em>256<strong>5+93*256</strong>4+(256-48)<em>256**3+(256-125)</em>256<em>*2+112</em>256，结果就是 7000000000000L。</p>

<p> 对于浮点数（float和double型），转换为二进制相对复杂些，参见&#8221;IEEE Standard 754 Floating Point Numbers&#8221;，除了Java语言，C、C++、C#等也都使用相同的方法存储整数和浮点数。</p>
]]></content>
  </entry>
  
</feed>
