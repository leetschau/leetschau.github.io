<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sicp | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/sicp/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-04T11:47:14+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP Solutions]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/22/111633/"/>
    <updated>2013-09-22T11:16:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/22/111633</id>
    <content type="html"><![CDATA[<p><a href="http://sicp.readthedocs.org/en/latest/">Official version in MIT Scheme, Chinese</a>;</p>

<p><a href="http://community.schemewiki.org/?SICP-Solutions">Scheme wiki version</a>;</p>

<p><a href="https://github.com/gregsexton/SICP-Clojure">Greg version in Clojure</a>;</p>

<p><a href="https://github.com/qiao/sicp-solutions">qiao version in MIT Scheme</a>;</p>

<p>You can find more solutions on <a href="http://www.gregsexton.org/">Greg&rsquo;s website</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Counterpart of Counting Change in SICP]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/20/145030/"/>
    <updated>2013-09-20T14:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/20/145030</id>
    <content type="html"><![CDATA[<p>The following program is the Java counterpart of the counting change example at page 46 in section 1.2.2 &ldquo;Tree Recursion&rdquo; of &ldquo;Structure and Interpretation of Computer Programs&rdquo;, 2nd edition.</p>

<p> public class CountChange {
  public static int first_demonstration (int kinds_of_coins) {
   int res = 0;
   switch (kinds_of_coins) {
    case 1: res = 1; break;
    case 2: res = 5; break;
    case 3: res = 10; break;
    case 4: res = 25; break;
    case 5: res = 50;
   }
   // System.out.println(&ldquo;kinds_of_coins=&rdquo; + kinds_of_coins + &ldquo;, return &rdquo; + res);
   return res;
  }</p>

<p>  public static void main(String[] args) {
   // System.out.println(&ldquo;args are: &rdquo; + args[0] + &ldquo;, &rdquo; + args[1]);
   int res = count_change(Integer.parseInt(args[0]), Integer.parseInt(args[1]));
   System.out.println(&ldquo;Change Count is: &rdquo; + res);
  }</p>

<p>  public static int count_change(int amount, int kinds_of_coins) {
   // System.out.println(&ldquo;amount=&rdquo; + amount + &ldquo;, &rdquo; + &ldquo;kinds_of_coins=&rdquo; + kinds_of_coins);
   if (amount==0) {
    return 1;
   } else if (amount&lt;0||kinds_of_coins==0) {
    return 0;
   } else {
    /<em> System.out.println(&ldquo;return count_change(&rdquo; + amount + &ldquo;, &rdquo; + (kinds_of_coins - 1) +
      &ldquo;) + count_change(&rdquo; + (amount - first_demonstration(kinds_of_coins)) +
      &ldquo;, &rdquo; + kinds_of_coins + &ldquo;)&rdquo;); </em>/
    return count_change(amount, kinds_of_coins-1) +
      count_change(amount - first_demonstration(kinds_of_coins), kinds_of_coins);
   }
  }
 }</p>
]]></content>
  </entry>
  
</feed>
