<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scope | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/scope/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-02-02T16:10:00+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于Python的嵌套域（nested Scope）]]></title>
    <link href="http://leetschau.github.io/blog/2011/01/17/083035/"/>
    <updated>2011-01-17T08:30:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/01/17/083035</id>
    <content type="html"><![CDATA[<p>周五下午因为嵌套函数的问题反复折腾了几个小时，今天终于搞明白了，python2.6手册里对“nested scope”有一段定义，并结合“OReilly - Python in a Nutshell”第4.10.6.2节，总结如下： 1 python支持嵌套函数；
 2 内层函数可以访问外层函数中定义的变量，但不能重新赋值（rebind）；
 3 内层函数的local namespace不包含外层函数定义的变量（见下面的演示程序）；
 4 避免出现低版本（&lt;=2.1）不支持nested scope问题的方法：在内层函数参数列表中使用默认参数：
 (copied from &ldquo;OReilly - Python in a Nutshell&rdquo; section 4.10.6.2)
 def make_adder_1(augend):    # works with any version
 def add(addend, <em>augend=augend ): return addend+</em>augend
 return add
 演示程序：
 def outterfunc():
  def innerfunc():
   cc = bb+&lsquo;2&rsquo;
   print &lsquo;inner:&rsquo;,locals()
   # bb = 3 #这句会造成运行失败
  bb = &lsquo;3&rsquo;
  outer = &lsquo;out&rsquo;
  innerfunc()
  print &lsquo;outter:&rsquo;,locals()
 bb=31
 outterfunc()
 输出：
 inner: {&lsquo;cc&rsquo;: &lsquo;32&rsquo;, &lsquo;bb&rsquo;: &lsquo;3&rsquo;}
 outter: {&lsquo;innerfunc&rsquo;: <function innerfunc at 0x01F0C1F0>, &lsquo;outer&rsquo;: &lsquo;out&rsquo;, &lsquo;bb&rsquo;: &lsquo;3&rsquo;}</p>

<p> 从输出可以看到，外层函数里定义的outer变量没有出现在内层函数的local namespace里，但被引用的变量bb却出现了，这一特点值得注意。</p>
]]></content>
  </entry>
  
</feed>
