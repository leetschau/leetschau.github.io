<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ipdb | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ipdb/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Python Script]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/16/212514/"/>
    <updated>2016-02-16T21:25:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/16/212514</id>
    <content type="html"><![CDATA[<p>Now I want to dubug a script named <code>filteringdata.py</code>.</p>

<h1>PyCharm Community Edition</h1>

<p>It&rsquo;s editor (with IdeaVim plugin), linter and debugger is
the most powerful and verbose in the 3 candidates.</p>

<p>Add the following lines into ~/.ideavimrc to swap colon and semicolon:</p>

<pre><code>nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
</code></pre>

<h1>pudb</h1>

<p>Comparing with ipdb, pudb needn&rsquo;t add stub in source sccript.</p>

<p>sudo pip install pudb
sudo chown -R leo:leo ~/.config/pudb</p>

<p>pudb filteringdata.py</p>

<p>Use <code>?</code> to list all available commands.</p>

<h1>ipdb</h1>

<p>There are totally 3 steps when debugging a Python script with
ipdb module: install, insert stubs in source codes and debug.</p>

<p>First install with <code>sudo pip install ipdb</code>.</p>

<p>Then add <code>from ipdb import set_trace</code> at the head into the script,
and add <code>set_trace()</code> at the first place you want the dubugger to stop.</p>

<p>Finally start a shell and run:</p>

<pre><code>$ ipython
...
IPython 4.0.1 ...
...
In [1]: %run filteringdata.py
&gt; /home/leo/docs/playground/pg2dm-python/ch2/filteringdata.py(53)recommend()
     52     # first find nearest neighbor
---&gt; 53     nearest = computeNearestNeighbor(username, users)[0][1]
     54 

ipdb&gt; h
</code></pre>

<p>Frequently used commands include:</p>

<pre><code>a: print args of current function;
b: set or list break points;
c: continue to next break points;
n: next;
s: step;
p &amp; pp: evaluate and print value of an expression;
pp locals(): pretty-print all local variables;
q: quit;
</code></pre>

<p>Use <code>h a</code> to see the help information about command <code>a</code>.</p>
]]></content>
  </entry>
  
</feed>
