<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ipdb | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ipdb/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Python Script]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/16/212514/"/>
    <updated>2016-02-16T21:25:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/16/212514</id>
    <content type="html"><![CDATA[<p>Now I want to dubug a script named <code>filteringdata.py</code>.</p>

<h1>PyCharm Community Edition</h1>

<p>It&rsquo;s editor (with IdeaVim plugin), linter and debugger is
the most powerful and verbose in the 3 candidates.</p>

<p>Add the following lines into ~/.ideavimrc to swap colon and semicolon:</p>

<pre><code>nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
</code></pre>

<p>The code navigation shortcut &ldquo;Ctrl-Alt-Left/Right&rdquo; of the default keymap
&ldquo;Default for XWin&rdquo; (in File -> Settings) is conflict with
&ldquo;Switch workspace&rdquo;&rsquo;s shortcut key of Ubuntu Unity.
So change the &ldquo;Keymaps&rdquo; to &ldquo;Default for GNOME&rdquo;, whose code navigation key
is &ldquo;Alt-Shift-Left/Right&rdquo;.</p>

<h2>Editor Setup</h2>

<p>Setup editor font size:  [Font -> Primary font -> Size: 16]</p>

<p>Setup editor background to pure dark: [General -> Text -> Default text],
click the &ldquo;Background&rdquo; color icon, set R,G,B to 0,
click the &ldquo;Foreground&rdquo; color icon, set R,G,B to 255.</p>

<p>Set right margin :
[File -> Settings -> Editor -> Code Style -> General: Right margin (columns)],
set it&rsquo;s value to 80 instead of the default value 120.</p>

<p>Jump between editor and terminal: modify it to Alt-K (default: Alt-F12)
choose &ldquo;Add Keyboard Shortcut&rdquo;.</p>

<h2>Some Shortcuts</h2>

<p>Toggle Project View: Alt-1</p>

<p>Split window: Ctrl-Shift-A, input &ldquo;split&rdquo;, select &ldquo;Split vertical/horizontal&rdquo;</p>

<p>Jump between files: Ctrl-Shift-N</p>

<p>Jump between editor tabs and split window: Ctrl-Tab</p>

<p>Full screen: [View -> Enter Full Screen]</p>

<p>Clipboard history: Ctrl-Shift-v</p>

<p>Jump to previous/next function: Alt-Up/Down</p>

<h2>Discussion</h2>

<p>You can switch easily between &ldquo;Console&rdquo; and &ldquo;Debugger&rdquo; panels.
The Console panel distinguishes stdout and stderr with different colors,
which is particularly useful when debugging some programs
with both stdout and stderr outputs.</p>

<p>Meanwhile you can evaluate an expression at the runtime in &ldquo;Watches&rdquo; window.</p>

<h1>pudb</h1>

<p>Comparing with ipdb, pudb needn&rsquo;t add stub in source script.</p>

<p>Install:</p>

<pre><code>sudo pip install pudb
sudo chown -R leo:leo ~/.config/pudb
</code></pre>

<p>Or the Python3 version: <code>pip3 search pudb3</code>.</p>

<p>Debug Python script: <code>pudb filteringdata.py</code> (<code>pudb3 myPy3App.py</code> for Python3)
or with command line arguments: <code>pudb uploadES.py fairs.json production Fair</code>.</p>

<p>Use <code>?</code> to list all available commands.</p>

<p>Focus code window with <code>C</code>
(which is the default window focused once you are in pudb), <code>n</code> to step over,
<code>s</code> step into , <code>f</code> finish current function (like step out), <code>c</code> continue,
<code>o</code> to see the console output (very useful!).</p>

<p>Focus variable window with <code>V</code>.
In this window:
use <code>w</code> to toggle line wrap,
<code>[</code>/<code>]</code> to grow/shrink relative size of the window,
<code>=</code>/<code>-</code> to grow/shrink sidebar.
<code>\</code> to expand/collapse variable result.</p>

<p>Toggle focus on command line with &lsquo;Ctrl-x&rsquo;.</p>

<h1>ipdb</h1>

<p>There are totally 3 steps when debugging a Python script with
ipdb module: install, insert stubs in source codes and debug.</p>

<p>First install with <code>sudo pip install ipdb</code>.</p>

<p>Then add <code>from ipdb import set_trace</code> at the head into the script,
and add <code>set_trace()</code> at the first place you want the dubugger to stop.</p>

<p>Finally start a shell and run:</p>

<pre><code>$ ipython
...
IPython 4.0.1 ...
...
In [1]: %run filteringdata.py
&gt; /home/leo/docs/playground/pg2dm-python/ch2/filteringdata.py(53)recommend()
     52     # first find nearest neighbor
---&gt; 53     nearest = computeNearestNeighbor(username, users)[0][1]
     54 

ipdb&gt; h
</code></pre>

<p>Frequently used commands include:</p>

<pre><code>a: print args of current function;
b: set or list break points;
c: continue to next break points;
n: next;
s: step;
p &amp; pp: evaluate and print value of an expression;
pp locals(): pretty-print all local variables;
q: quit;
</code></pre>

<p>Use <code>h a</code> to see the help information about command <code>a</code>.</p>
]]></content>
  </entry>
  
</feed>
