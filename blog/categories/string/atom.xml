<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: String | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/string/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java字符串的格式化输出]]></title>
    <link href="http://leetschau.github.io/blog/2012/09/07/162210/"/>
    <updated>2012-09-07T16:22:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/09/07/162210</id>
    <content type="html"><![CDATA[<p>左对齐
String LS_HEADER = String.format(&ldquo;%-10s%-10s%-10s%-10s%-10s%-10s%n&rdquo;,</p>

<p>   &ldquo;ID&rdquo;, &ldquo;Protocol&rdquo;, &ldquo;IP&rdquo;, &ldquo;Port&rdquo;, &ldquo;Username&rdquo;, &ldquo;Password&rdquo;);</p>

<p>效果：</p>

<p>ID  Protocol IP  Port  Username Password
10025022 ssh  10.0.2.50 22  godu  godu<br/>
10024723 telnet 10.0.2.47 23  godu  goduty
 右对齐
 String LS_HEADER = String.format(&ldquo;%10s%10s%10s%10s%10s%10s%n&rdquo;,</p>

<p>   &ldquo;ID&rdquo;, &ldquo;Protocol&rdquo;, &ldquo;IP&rdquo;, &ldquo;Port&rdquo;, &ldquo;Username&rdquo;, &ldquo;Password&rdquo;);</p>

<p>效果：</p>

<p>  ID Protocol  IP  Port Username Password
 10025022  ssh 10.0.2.50  22  godu  godu
 10024723 telnet 10.0.2.47  23  godu goduty</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String.trim的作用]]></title>
    <link href="http://leetschau.github.io/blog/2012/07/26/152354/"/>
    <updated>2012-07-26T15:23:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/07/26/152354</id>
    <content type="html"><![CDATA[<p>Java的字符串处理方法trim是如何改变字符串的？下面是一个例子：</p>

<p> @Test</p>

<p> public void testTrim() {
  String test = &ldquo;origin&rdquo;;
  String ori = &ldquo;origin\r\n&rdquo;;
  assertFalse(ori.equals(test));
  String trimmed = ori.trim();
  assertTrue(trimmed.equals(test));
 }</p>

<p>打断点分别查看test, ori和trimmed的值如下：</p>

<p>可见trim()方法没有改变字符串的“实际”内容（value中的字符数组没有变），但改变了字符串的count值，因此就与“正常”字符串test一致了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Commons-io的字符串编解码问题]]></title>
    <link href="http://leetschau.github.io/blog/2012/05/28/100022/"/>
    <updated>2012-05-28T10:00:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/05/28/100022</id>
    <content type="html"><![CDATA[<p>用Apache org.apache.commons.io.input.Tailer监控日志文件变化很方便，但如果文件中有中文，回调函数TailerListener.handle中参数line是乱码，原因是目前的Tailer是按“西欧语言”（ISO8859-1）对日志文件进行解码的，而日志文件一般是用GBK或者UTF-8编码。解决方法是对line用ISO8859-1再进行一次编码得到原始的字节数组，然后用日志文件的格式进行解码，这样最终得到的字符串就OK了。实现方法如下：</p>

<p>服务类：</p>

<p> &hellip;</p>

<p> LogMonitorListener lml = new LogMonitorListener();</p>

<p> Tailer lmt = new Tailer(logfile, lml, 3000);</p>

<p> &hellip;</p>

<p> lmt.run();</p>

<p>监听器类：</p>

<p>public class LogMonitorListener extends TailerListenerAdapter {</p>

<p> &hellip;</p>

<p> @Override</p>

<p> public void handle(String line) {</p>

<p>  msg = new String(line.getBytes(&ldquo;ISO8859-1&rdquo;), &ldquo;GBK&rdquo;) ; //用来处理GBK格式的日志</p>

<p>   msg = new String(line.getBytes(&ldquo;ISO8859-1&rdquo;), &ldquo;UTF-8&rdquo;) ; //用来处理UTF-8格式的日志</p>

<p>  &hellip;</p>
]]></content>
  </entry>
  
</feed>
