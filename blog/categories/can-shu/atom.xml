<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 参数 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/can-shu/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-15T10:58:04+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java程序的两种参数设置方法]]></title>
    <link href="http://leetschau.github.io/blog/2012/05/10/100140/"/>
    <updated>2012-05-10T10:01:40+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/05/10/100140</id>
    <content type="html"><![CDATA[<p>Java程序有两种参数传递方式，分别是虚拟机参数和程序参数，前者用java命令行参数-D设置，用System.getProperty()方法获取；后者在主类声明后面添加，用main()方法里的args[]获取。下面是演示程序。</p>

<p> ServiceNameDemo.java</p>

<p> public class ServiceNameDemo {</p>

<p>  public static void main(String[] args) {</p>

<p>   System.out.println(&ldquo;vm param is: &rdquo; + System.getProperty(&ldquo;service_name&rdquo;)</p>

<pre><code> + "\r\nprogram param is: " + args[0] + " and " + args[1]); 
</code></pre>

<p>  }</p>

<p> }</p>

<p>下面是编译运行结果。</p>

<p>F:> javac ServiceNameDemo.java
F:> java -cp . -Dservice_name=banana ServiceNameDemo apple melon
vm param is: banana
program param is: apple and melon</p>

<p>对应于Eclipse中的设置方法如下：</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse带参数调试的方法]]></title>
    <link href="http://leetschau.github.io/blog/2010/06/04/110230/"/>
    <updated>2010-06-04T11:02:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/06/04/110230</id>
    <content type="html"><![CDATA[<p>下面是体现带参数调试的一个代码demo，首先输出参数的数量，然后依次输出每个参数。
public class ArgsEx {
 public static void main(String[] args) {
 int argNum = args.length;
 System.out.println(&ldquo;args number is = &rdquo;+argNum);
 for (int i = 0; i &lt; args.length; i++) {
 System.out.println(args[i]);
 }
 }
}
在Eclipse主菜单【Run->Debug Configurations】下，首先根据自己的工程类型（一般是Java Application）新建一个"New Launch Configuration"，右边面板上首先设置这个configuration的名字（Name），【Main】标签页下设置要调试的工程和main函数的位置（一般就是默认给出的），【Arguments】标签页下的【Program Arguments】下写上参数，如果有多个参数，每行写一个。【Run】菜单下的【Debug Configurations】和【Run Configurations】是互相联系的，二者保持一致，即在Debug Configurations中修改会导致Run Configurations做同样的变化。</p>
]]></content>
  </entry>
  
</feed>
