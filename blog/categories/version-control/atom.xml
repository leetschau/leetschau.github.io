<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Version Control | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/version-control/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins的版本控制]]></title>
    <link href="http://leetschau.github.io/blog/2016/05/11/184550/"/>
    <updated>2016-05-11T18:45:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/05/11/184550</id>
    <content type="html"><![CDATA[<p>这里使用<a href="http://bit.ly/1NqkLkz">SCM Sync configuration plugin</a>
实现Jenkins各项配置的版本控制。</p>

<p>在gitlab上创建了代码库：git@gitlab.com:leechau/newfairs-jenkins.git</p>

<p>安装这个插件后，在 [Manage Jenkins -> System Information -> System Properties ->
user.name] 里查到Jenins系统的用户名，一般是jenkins，只有创建了这个用户的ssh key，
下面指定Git repo时才能连接成功，登录Jenkins服务器运行：</p>

<pre><code>su - jenkins
ssh-keygen
git config --global user.name 'Li Chao'
git config --global user.email 'leechau@126.com'
</code></pre>

<p>将<code>cat .ssh/id_rsa.pub</code>的输出加入到Gitlab的
[Profile settings -> SSH Keys] 里（在右上角搜索框里直接搜索ssh keys）；</p>

<p>删除$JENKINS_HOME/plugins下面所有git开头的插件，重启Jenkins服务；
安装Jenkins的Git插件。配置Jenkins的远端版本库：
[Manage Jenkins -> Config System -> SCM Sync configuration -> Git ->
Repo URL: git@gitlab.com:leechau/newfairs-jenkins.git]</p>

<p>要从版本库恢复Jenkins配置文件，使用 [Manage Jenkins -> Config System ->
SCM Sync configuration -> Reload config from SCM: Reload]
这个插件在 $JENKINS_HOME/scm-sync-configuration/checkoutConfiguration 中
创建了git repo。</p>

<p>怎样将Jenkins的状态返回到之前的某个commit？</p>

<p>这个插件会在Jenkins Web页面的底部加上 SCM Sync status 提示，
但似乎不太准，比如现在它显示同步失败，但代码库提交历史显示配置能够正常保存并
被push到远端库。</p>

<p>其他：</p>

<p>Ubuntu 16.04居然没有预装Python：</p>

<pre><code>apt install python
apt install python-pip
export LC_ALL=en_US.UTF-8
pip install requests
</code></pre>

<p>下午安装的Git插件时，由于本地还没有配置好git用户名和email，
安装过程中出现空指针异常，整个Jenkins服务整个无法启动，
到服务器上plugins文件夹下删除了<code>git*</code>后，重启服务才正常；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-flow Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/29/141348/"/>
    <updated>2015-01-29T14:13:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/29/141348</id>
    <content type="html"><![CDATA[<p>git is a powerful version control tool, while its large amount of commands and options make it hard to use.</p>

<p>So <a href="https://github.com/nvie/gitflow">git-flow</a> was created to make git mush convenient. It&rsquo;s a high level branching tools for git.</p>

<p>Fist install it with <code>apt-get install git-flow</code> on Debian-family distros.</p>

<h1>Usage</h1>

<h2>Workflow on a single feature</h2>

<p>The following paragraphs is from [Why aren&rsquo;t you using git-flow?}(<a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>).</p>

<p>Branch &ldquo;master&rdquo; is always &ldquo;production ready&rdquo; code. Commits are never made directly to master. Rather, code on master only gets there after a production release branch is created and &ldquo;finished&rdquo; (more on that in a sec). Thus the code on master is always able to be released to production. Also, master is always in a predictable state, so you never need to worry if master (and thus production) has changes one of your other branches doesn&rsquo;t.</p>

<p>&ldquo;develop&rdquo; is the branch you&rsquo;ll be doing most of your work off of; it&rsquo;s also the branch that represents the code to be deployed in the next release. feature branches represent non-trivial features and fixes that have not yet been deployed (a completed feature branch is merged back into develop). Updating master is done through the creation of a release.</p>

<p>Most of your work is done on the develop branch. This branch contains all of the completed features and bug fixes yet to be released; nightly builds or continuous integration servers should target develop, as it represents the code that will be included in the next release. For one-off commits, feel free to commit to develop directly.</p>

<p>Use <code>git flow help</code> or <code>git flow feature help</code> to list all available commands.</p>

<pre><code>$ git flow init  // Convert an existing git repo to git-flow style:

$ git flow feature start &lt;feature-name&gt;

$ git commit -m "now finish this feature"

// if you want cancel this feature:
$ git flow feature  // list the current feature name, here is "searchSource"
$ git flow feature delete searchSource
// or do it manually
$ git checkout develop  // switch to "develop" branch
$ git branch  // list current branches
$ git branch -d feature/&lt;feature-name&gt;   // "feature/" is the default prefix of all feature branches
$ git branch  // verify the feature is deleted

// push feature to remote repository
$ git flow feature publish

// get feature commit from remote repository
$ git flow feature pull

// after the feature is finished and tested
$ git flow feature finish &lt;feature-name&gt;
</code></pre>

<p>Note that do not add &ldquo;feature/&rdquo; prefix before feature name.
This command merge feature branch back into develop branch, so the feature branch disappear from now on.
If you don&rsquo;t want save your feature branch into remote repo, push to remote AFTER you finish your feature with this &ldquo;finish&rdquo; command.
There is a corresponding &ldquo;release&rdquo; command:</p>

<pre><code>$ git flow release start v0.1.0
$ git flow release finish v0.1.0
</code></pre>

<p>See <a href="http://danielkummer.github.io/git-flow-cheatsheet/">git-flow cheatsheet</a> for details of git-flow.</p>

<h2>Switching between multiple features</h2>

<p>Say you now have finished version 1.0 and tag it with &ldquo;1.0&rdquo;.
Next you will add function A to the product.
You have two methods to achieve function A, &ldquo;search source&rdquo; and &ldquo;full text&rdquo;.
You want to experiment them one by one, so create the first test branch with <code>git flow feature start searchSource</code>,
After some commits, now you want to evaluate the second.</p>

<p>You can&rsquo;t <code>git flow feature finish searchSource</code> for two reasons:</p>

<p>First you may switching back to this feature in the future.
If you finish this feature, this branch disappeared.</p>

<p>Second you need experiment &ldquo;full text&rdquo; based on version 1.0.
But if you &ldquo;finish&rdquo; feature &ldquo;search source&rdquo;, the modifications will be added to branch develop.
If you <code>git flow feature start fullText</code>, the codes won&rsquo;t be that in version 1.0.</p>

<p>So what you want is working on multiple branches simultaneously:</p>

<pre><code>$ git flow feature start searchSource
... // some developments on branch searchSource
$ git commit -m "finish a milestone by method search source"
$ git flow feature start fullText
... // some developments on branch fullText
$ git commit -m "finish a milestone by method full text"
$ git flow feature list
$ git flow feature checkout searchSource
... // some developments on branch searchSource
$ git commit -m "finish the 2nd milestone by method search source"
$ git flow feature checkout fullText
... // some developments on branch fullText
$ git commit -m "finish the 2nd milestone by method full text"
</code></pre>

<p>If you have some casual modifications which you don&rsquo;t want to commit, use <code>git stash</code> instead of <code>git commit</code>.
Use <code>git stash list</code> to list all stashed changes, and <code>git stash pop</code> to take the stashed codes out.
Or <code>git stash apply</code> to take codes out without removing saved stash record.</p>

<p>Finally you choose &ldquo;full text&rdquo; to achieve function A.
So add it to your develop code base: <code>git flow feature finish fullText</code>.
And leave the branch &ldquo;search source&rdquo; alone.</p>

<p>If you are sure &ldquo;search source&rdquo; are useless any more,
print all existing features with <code>git flow feature list</code>,
then remove it with <code>git flow feature delete searchSource</code>.</p>

<p>There is a GUI tool called <code>gitk</code>, which can be installed with <code>apt-get install gitk</code>.
See commits on current branch with <code>gitk</code>, or see all branches with <code>gitk --all</code>.</p>

<p>There is also a <a href="https://github.com/bobthecow/git-flow-completion">git-flow-completion</a> tool for zsh.
Install it if you like.</p>

<ol>
<li><p>Download <a href="http://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_git?format=raw">_git</a> and replace /usr/share/zsh/functions/Completion/Unix/_git;</p></li>
<li><p>Download <a href="https://raw2.github.com/bobthecow/git-flow-completion/master/git-flow-completion.zsh">git-flow-completion.zsh</a>, save it as ~/.git-flow-completion.zsh;</p></li>
<li><p>Add &ldquo;source ~/.git-flow-completion.zsh&rdquo; into ~/.zshrc;</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
