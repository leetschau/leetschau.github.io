<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pycharm | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/pycharm/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Virtual Environment in Python]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/09/183148/"/>
    <updated>2014-01-09T18:31:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/09/183148</id>
    <content type="html"><![CDATA[<h1>virtualenv</h1>

<p>virtualenvwrapper is not file based (it depends heavily on <code>workon</code>).
And it&rsquo;s setup is not very easy.
While virtualenv can be used like npm (one virtual env in one project).
So I prefer virtualenv to virturalenvwrapper
for managing Python project environment.</p>

<p>Install it with <code>sudo pip install virtualenv</code>.</p>

<p>Workflow with virtualenv:</p>

<ol>
<li><p>In a Python project root folder, run <code>virtualenv venv</code> to build the home
folder for virtual environment, and add <code>venv</code> into .gitignore.</p></li>
<li><p>Run <code>. venv/bin/activate</code> to activate the environment;</p></li>
<li><p><code>pip install -r requirements.txt</code> to install dependent packages;</p></li>
<li><p>Edit files and test project with <code>python ...</code>;</p></li>
<li><p>Quit environment with <code>deactivate</code>;</p></li>
</ol>


<p>Note:</p>

<p>Add <code>-p &lt;python-bin-path&gt;</code> to use alternative Python executable.
For example, <code>virtualenv -p /usr/bin/python3 venv</code>
to build an environment using Python 3.</p>

<h1>virturalenvwrapper</h1>

<h2>Installation</h2>

<pre><code>$ sudo pip install virtualenvwrapper
</code></pre>

<p>Add the following lines into ~/.zshenv:</p>

<pre><code>WORKON_HOME=~/docs/workspace/python-workspace/env-home
PROJECT_HOME=~/docs/workspace/python-workspace/project-home
</code></pre>

<p>and create the two folders specified above.</p>

<p>Add following lines into ~/.zshrc:</p>

<pre><code>source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<h2>Usage</h2>

<h3>For new project</h3>

<p>Create a new project funcPy using Python 3.x (run in any foler):</p>

<pre><code>mkproject -p /usr/bin/python3 funcPy
</code></pre>

<p>The CWD will be changed into the project root automatically.</p>

<p>Verify:</p>

<pre><code>$ python -V
Python 3.4.3
$ deactivate
$ python -V
Python 2.7.6
</code></pre>

<p>Coming into the project root and virtualenv later: <code>workon funcPy</code>.
Use <tab> key to autocomplete after <code>workon</code>.</p>

<p>If using the default Python version (in Ubuntu 14.04 it is 2.7)
for your virtual environment, create the project with <code>mkproject funcPy</code>.</p>

<p>To debug this project in PyCharm, open the project in PyCharm
(get the project root folder with <code>workon funcPy &amp;&amp; echo $PWD</code>).
In [File -> Settings -> Project: funcPy -> Project Interpreter],
press the gear button on the right side of &ldquo;Project Interpreter&rdquo;,
choose &ldquo;Add Local&rdquo;, select the python executable in the corresponding
virtualenv folder (get it with <code>cdvirtualenv &amp;&amp; echo $PWD/bin/python</code>).</p>

<p>The python intepreter config is persisted in PyCharm project configuration,
so no need to use <code>workon</code> every time open the project in PyCharm.</p>

<p>See
<a href="http://bit.ly/23b30fY">Adding Existing Virtual Environment in PyCharm 2016.1 Help</a>
for reference.</p>

<p>Note:</p>

<p>If the script has command line arguments,
add them in [Run -> Edit Configurations -> Script parameters].</p>

<h3>For existing project</h3>

<pre><code>git clone git@github.com:mbr/flask-bootstrap.git
cd flask-bootstrap
mkvirtualenv flask-bootstrap
setvirtualenvproject
cd sample_app
pip install -r requirements.txt
mkvirtualenv testenv2
setvirtualenvproject
</code></pre>

<p>Now there are 2 virtualenvs: flask-bootstrap and testenv2 are associated with
project flask-bootstrap.
If you input <code>workon</code> and press TAB, you can see both these 2 virtualenvs.
No matter which one you choose, you will be transmitted to the root folder of
project flask-bootstrap.</p>

<p>Note: use <code>rmvirtualenv testenv2</code> to remove a virtualenv.</p>

<h2>Discussion</h2>

<p>There are two concepts in virturalenvwrapper.
One is &ldquo;virtual environment&rdquo;, which has its own python executables.
The other is &ldquo;project&rdquo;, where your source codes resides.
They are n-to-1 relationship.
If you specify a project-virtualenv relation with
<code>setvirtualenvproject path-to-project-A path-to-env-X</code>,
while the virtualenv X already has associated to project B,
the new project A will replace the old project B.</p>

<p>Why not use the same folder for both project and environment, like npm?</p>

<p>Reason 1:
A project can associate with many virtualenvs (through <code>setvirtualenvproject</code>),
so for example you can test your application under Python 2 and 3
in difference virtual environments.</p>

<p>Reason 2:
Unlike the &ldquo;node_modules&rdquo; folder in a node.js project,
Python project can&rsquo;t put packages directly into the source folder.
Use <code>pip install the-package &amp;&amp; pip freeze &gt; requirements.txt</code> to install
a package and save it into dependency document,
like <code>npm install the-package --save</code>.
Activate you virtual env and use <code>pip install -r requirements.txt</code>
to install all dependencies into the virtual environment.</p>

<p>&ldquo;mkvirtualenv env1&rdquo; will create a new &ldquo;virtual environment&rdquo; in $WORKON_HOME,
regardless your CWD.</p>

<p>&ldquo;mkproject proj1&rdquo; will create both a &ldquo;virtual environment&rdquo; named &ldquo;proj1&rdquo;
in $WORKON_HOME and a &ldquo;proj1&rdquo; folder in $PROJECT_HOME.
Then go to $PROJECT_HOME/proj1,
and activate the virtual environment proj1. So &ldquo;mkproject proj1&rdquo; equals to:</p>

<pre><code>$ mkvirtualenv proj1
$ mkdir $PROJECT_HOME/proj1
$ cd $PROJECT_HOME/proj1
$ workon proj1
</code></pre>

<p>Associate an existing virtualenv and an existing project with command</p>

<pre><code>$ setvirtualenvproject virtualenv_path project_path
</code></pre>

<p>Under the hood, virturalenvwrapper create a &ldquo;.project&rdquo; file under the root of
the virtualenv, in which is the project path.</p>

<p>List site packages:</p>

<pre><code>$ lssitepackages
</code></pre>

<p>Run a command in all virtualenvs under WORKON_HOME:</p>

<pre><code>$ allvirtualenv command with arguments
</code></pre>

<p>Change the current working directory to the site-packages of current virtualenv($VIRTUAL_ENV):</p>

<pre><code>$ cdsitepackages
</code></pre>

<p>Remove virtualenv:</p>

<pre><code>$ rmvirtualenv &lt;env_name&gt;
</code></pre>

<h2>Verification</h2>

<p>In a virtualenv, all python executables are in $WORKON_HOME.</p>

<pre><code>[lichao@lichao480:~] 
$ workon 
env1 env2 proj1 
[lichao@lichao480:~] 
$ which python 
/usr/bin/python 
[lichao@lichao480:~] 
$ workon env1 
(env1)[lichao@lichao480:~] 
$ which python 
/home/lichao/apps/virenv_home/env1/bin/python 
(env1)[lichao@lichao480:~] 
$ workon env2 
(env2)[lichao@lichao480:~PROJECT_HOME/proj2] 
$ which python 
/home/lichao/apps/virenv_home/env2/bin/python
</code></pre>
]]></content>
  </entry>
  
</feed>
