<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Diffcount | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/diffcount/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-05T15:23:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diffcount和cobertura的代码行计算结果说明]]></title>
    <link href="http://leetschau.github.io/blog/2011/03/16/170320/"/>
    <updated>2011-03-16T17:03:20+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/03/16/170320</id>
    <content type="html"><![CDATA[<p>做java程序的代码行计算时，用diffcount计算出来的代码行数的NBNC（非空非注释）行数是真实的代码行数，而cobertura的“line valid”项的值是一个折算值，二者的关系是：${line valid}=(0.46~0.47)*NBNC。diffcount中java与C的代码行折算值为0.41（一行java代码相当于0.41行C代码），与0.46~0.47这个范围相差不大，所以猜测cobertura中的行数大概是折算后的C代码行数。实际计算TestCases/KLOC（每千行代码测试用例数）时，采用何种方式计算代码行数均可，只要QA要求和项目周期中保持一致的计算方法即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计代码行工具]]></title>
    <link href="http://leetschau.github.io/blog/2010/09/19/173635/"/>
    <updated>2010-09-19T17:36:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/09/19/173635</id>
    <content type="html"><![CDATA[<p>diffcount计算代码行主要有两种方式：一是计算某一个文件夹中源代码的数量： diffcount -c D:\workspace\GODU_API1.1\src</p>

<p> 二是比较两个文件夹的差异：diffcount e:\build\tested\src1 e:\build\tested\src2。</p>

<p> 这两种情况下均可以在后面加&ndash;for-program-reading参数，使得返回结果只有计算数据（没有表头以及说明文字），更方便与应用程序处理。</p>

<p> 比较两个文件夹差异时，如果两个文件夹都不存在，或者两个文件夹完全相同时（都不存在也是一种特殊的“相同”），diffcount返回结果都为空，因此用程序处理diffcount结果时，对于返回为空的情况，建议保持其为空的状态，不要将空转换为0，因为0意味着两个文件夹完全相同，但也可能是两个文件夹都不存在。</p>
]]></content>
  </entry>
  
</feed>
