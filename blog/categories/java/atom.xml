<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Java Project With Eclipse, Gradle and Git]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/11/144152/"/>
    <updated>2014-08-11T14:41:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/11/144152</id>
    <content type="html"><![CDATA[<h1>Install and Usage</h1>

<p>The order should be:</p>

<ol>
<li><p>Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Eclipse: download, extract;</p></li>
<li><p>Install Gradle plugin for eclipse via &ldquo;Market Place&rdquo; in Eclipse, because it&rsquo;s inconvenient to run gradle tasks in console while edit files in Eclipse;</p></li>
<li><p>Configure Gradle plugin: set its working JDK;</p></li>
<li><p>Build a new Gradle project in Eclipse, add git version control;</p></li>
<li><p>Run Gradle tasks: right click &ldquo;build.gradle&rdquo; file, then select &ldquo;Gradle -> Tasks Quick Launcher&rdquo; (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h2>Frequently Used Tasks</h2>

<p>Some need adding &ldquo;apply plugin: &lsquo;application&rsquo;&rdquo; and &ldquo;mainClassName = &lsquo;com.boco.gdep.Probe&rsquo;&rdquo; into build.gradle.
Read <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">Gradle Application Plugin</a> for details.</p>

<ul>
<li><p>clean</p></li>
<li><p>check</p></li>
<li><p>test</p></li>
<li><p>compileJava</p></li>
<li><p>run</p></li>
<li><p>startScripts: create start scripts for your application;</p></li>
<li><p>distZip: build final deploy package, find zip file under build/distributions folder;</p></li>
<li><p>installApp: install package created in &ldquo;distZip&rdquo; into build/install folder;</p></li>
</ul>


<p>Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle&rsquo;s test task (using Shift + Ctrl + Alt + R, then input &ldquo;test&rdquo; and <Enter>).</p>

<p>All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my <a href="https://github.com/leetschau/GDEP">GDEP</a> project.</p>

<h1>Debug Gradle with println</h1>

<p>Add the following scripts into build.gradle, then run &ldquo;check&rdquo; task.</p>

<pre><code>println "--------"
println project.name
println "--------"
</code></pre>

<h2>Customize project name</h2>

<p>Add a new file &ldquo;settings.gradle&rdquo; at the root of the project, add a string &ldquo;rootProject.name = &lsquo;myProj&rsquo;&rdquo; into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc.</p>

<hr />

<p>First install gradle, then run the following commands:</p>

<pre><code>$ mkdir myproj
$ cd myproj
$ gradle init --type java-library
$ mkdir src/main/resources
$ mkdir src/test/resources
</code></pre>

<p>Now the project layout is ready. If you want to develop this project in Eclipse, add &ldquo;apply plugin: &lsquo;eclipse&rsquo;&rdquo; into build.gradle, then run:</p>

<pre><code>$ gradle eclipse
</code></pre>

<p>Then open this project with Eclipse.</p>

<p>The default project layout (file structure) of &ldquo;java&rdquo; plugin is described in &ldquo;Project layout&rdquo; section of <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>:</p>

<p>src/main/java:           Production Java source
src/main/resources:      Production resources
src/test/java:           Test Java source
src/test/resources:      Test resources
src/sourceSet/java:      Java source for the given source set
src/sourceSet/resources: Resources for the given source set</p>

<p>Add git version control with:</p>

<pre><code>$ cd myproj
$ git init
</code></pre>

<p>In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse.</p>

<p>Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore:</p>

<pre><code>$ cat .gitignore
build
.gradle
gradle
...
</code></pre>

<p>Three Eclipse component &ldquo;.settings&rdquo;, &ldquo;.project&rdquo; and &ldquo;.classpath&rdquo; should be added to git repository.</p>

<h1>Merge Github Project and Eclipse Gradle Project</h1>

<ol>
<li><p>git clone <a href="https://github.com/leetschau/GDEP.git">https://github.com/leetschau/GDEP.git</a> gdep2</p></li>
<li><p>In Eclipse, build a new Gradle project &ldquo;GDEP-0811&rdquo; with &ldquo;Quick start&rdquo; template;</p></li>
<li><p>Move all files and folders in gdep2 to GDEP-0811;</p></li>
<li><p>Refresh project in Eclipse;</p></li>
<li><p>Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter &ldquo;build&rdquo;, and press <Enter>. If you encounter a &ldquo;Cannot find System Java Compiler&rdquo; error, set Gradle&rsquo;s Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select &ldquo;Workspace JRE&rdquo;: jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Environment on Eclipse]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/08/155030/"/>
    <updated>2014-08-08T15:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/08/155030</id>
    <content type="html"><![CDATA[<h1>Eclipse</h1>

<p>Luna for Java Developer, file name: eclipse-java-luna-R-linux-gtk-x86_64.tar.gz</p>

<h1>Gradle plugin</h1>

<ol>
<li><p>Download gradle-2.0-all.zip, extract it to ~/apps;</p></li>
<li><p>Add following lines into ~/.zshrc and run <code>source ~/.zshrc</code>:</p>

<p> export GRADLE_HOME=/home/chad/apps/gradle-2.0
 export PATH=$PATH:$GRADLE_HOME/bin</p></li>
<li><p>Install &ldquo;Gradle IDE 3.6.0&rdquo;: searching &ldquo;gradle&rdquo; in Eclipse Marketplace and install it;</p></li>
</ol>


<h1>Vim mode plugin</h1>

<ol>
<li><p>Download vrapper_0.44.0_20140601.zip from <a href="http://sourceforge.net/projects/vrapper/">its website</a>;</p></li>
<li><p>Extract it under $ECLIPSE_HOME/dropins;</p></li>
<li><p>Start Eclipse;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual BVT System]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/23/135000/"/>
    <updated>2014-06-23T13:50:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/23/135000</id>
    <content type="html"><![CDATA[<h1>Prerequisites</h1>

<ol>
<li><p>The host server of the environment is 10.0.2.47;</p></li>
<li><p>Install <a href="http://www.vagrantup.com/">vagrant</a> on server 47;</p></li>
<li><p>Add vagrant box of precise x86_64: <code>vagrant box add ...</code>;</p></li>
<li><p>Create a directory named &ldquo;bvt-package&rdquo; under ~/warez, which contains:
 apache-ant-1.9.3-bin.tar.bz2
 cobertura.jar
 hamcrest-core-1.3.jar
 jdk-6u45-linux-x64.bin
 jenkins-1.544.war
 junit-4.8.1.jar
 sonar-3.6.1.zip
 svn_amd64_ubuntu12.04
     libapr1_1.4.6-1_amd64.deb
     libaprutil1_1.3.12+dfsg-3_amd64.deb
     libdb4.8_4.8.30-11ubuntu1_amd64.deb
     libneon27-gnutls_0.29.6-1_amd64.deb
     libsvn1_1.6.17dfsg-3ubuntu3_amd64.deb
     subversion_1.6.17dfsg-3ubuntu3_amd64.deb
 unzip_6.0-4ubuntu1_amd64.deb
 zip_3.0-4_amd64.deb</p></li>
<li><p>The demo product codes in subversion repository is <a href="http://10.0.2.59:8118/svn/gcp/Development-Area/GNDP">GNDP</a>;</p></li>
</ol>


<h1>Build BVT Environment</h1>

<pre><code>$ cd /home/bvt/docs
$ take mybvt
$ vagrant box list
$ vagrant init precise64
// Add the following texts into Vagrantfile after the line 'config.vm.box = "precise64":'
  config.vm.define "bs" do |bvtserver|
    bvtserver.vm.hostname = "bvt-server"
    bvtserver.vm.network "private_network", ip: "192.168.50.3",
        virtualbox__intnet: "testnet"
    bvtserver.vm.provider :virtualbox do |vbox|
      vbox.customize ["modifyvm", :id, "--natnet1", "10.3/16"]
      vbox.customize ["modifyvm", :id, "--memory", 1000]
    end
    bvtserver.vm.provision :shell, path: "provision.sh", privileged: false
    bvtserver.vm.network "forwarded_port", guest: 9000, host: 9000
    bvtserver.vm.network "forwarded_port", guest: 8088, host: 8088
  end
$ scp -r bvt@10.0.2.47:/home/bvt/warez/bvt-package packages
$ vagrant up bs
</code></pre>

<h1>Use This Environment</h1>

<ol>
<li><p>Open <a href="http://10.0.2.47:9000">Sonarqube website</a>, login with &ldquo;admin/admin&rdquo;, in Settings -> Qualify Profiles, add rules &ldquo;TongYong&rdquo; with import &ldquo;tyrules.xml&rdquo; on local disk (the next section its content);;</p></li>
<li><p>Open <a href="http://10.0.2.47:8088/">Jenkins website</a>;</p></li>
<li><p>Create Jenkins project: create a project named &ldquo;GNDP&rdquo; and add a &ldquo;shell&rdquo; build step: &ldquo;/vagrant/bvt-gndp.sh&rdquo;;</p></li>
<li><p>Build this project;</p></li>
<li><p>You get the build log on jenkins website and code analysis results on sonarqube website;</p></li>
</ol>


<h1>Needed Scripts</h1>

<h2>Vagrant provision script</h2>

<p>This is the environment building script executed during the vagrant provision period, so it&rsquo;s cited in Vagrantfile.</p>

<pre><code>$ cat /home/bvt/docs/mybvt/provision.sh
#!/bin/sh

sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

sudo dpkg -i /vagrant/packages/svn_amd64_ubuntu12.04/*.deb
sudo dpkg -i /vagrant/packages/zip_3.0-4_amd64.deb
sudo dpkg -i /vagrant/packages/unzip_6.0-4ubuntu1_amd64.deb
APP_HOME=/home/vagrant/apps
mkdir $APP_HOME
cd $APP_HOME
chmod 755 /vagrant/packages/jdk-6u45-linux-x64.bin
sh /vagrant/packages/jdk-6u45-linux-x64.bin
tar jxf /vagrant/packages/apache-ant-1.9.3-bin.tar.bz2
unzip /vagrant/packages/sonar-3.6.1.zip

export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8
export JENKINS_HOME=/home/vagrant/jenkinshome
mkdir $JENKINS_HOME

sonar-3.6.1/bin/linux-x86-64/sonar.sh start
nohup java -jar /vagrant/packages/jenkins-1.544.war --httpPort=8088 1&gt;jenkins.log 2&gt;jenkins-err.log &amp;
</code></pre>

<h2>BVT shell script</h2>

<p>This script checkout the source code to be built, then invoke the Ant script. It&rsquo;s cited in Jenkins project definition.</p>

<pre><code>$ cat /home/bvt/docs/mybvt/bvt-gndp.sh
#!/bin/sh

export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8

svnprefix='svn co --non-interactive --no-auth-cache --username bvt_common --password password'
svnroot='http://10.0.2.59:8118/svn/gcp/Development-Area'
prod=GNDP
$svnprefix ${svnroot}/3-SCL/Trunk/$prod /vagrant/codes/$prod

rm -rf /vagrant/codes/*.zip
cd /vagrant/codes/$prod;  ant
</code></pre>

<h2>Ant build script</h2>

<p>This script resides in the root folder of the source project GNDP in subversion repository.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="MyJavaProj" basedir="./" default="coverage_report"&gt;
&lt;property name="build.dir" value="${basedir}/build" /&gt;
&lt;target name="init"&gt;
    &lt;delete dir="${build.dir}"/&gt;
    &lt;mkdir dir="${build.dir}"/&gt;
&lt;/target&gt;

&lt;property name="src.dir" value="${basedir}/src" /&gt;
&lt;property name="src.class.dir" value="${build.dir}/class" /&gt;
&lt;target name="compile-src" depends="init"&gt;
    &lt;mkdir dir="${src.class.dir}"/&gt;
    &lt;javac srcdir="${src.dir}" destdir="${src.class.dir}" encoding="UTF-8" debug="true"/&gt;
&lt;/target&gt;
&lt;taskdef classpath="cobertura.jar" resource="tasks.properties" /&gt;
&lt;property name="instrumented.class.dir" value="${build.dir}/instrumented-class" /&gt;
&lt;property name="cobertura.data.file" value="${instrumented.class.dir}/cobertura.ser" /&gt;

&lt;target name="instrument" depends="compile-src"&gt;
    &lt;cobertura-instrument datafile="${cobertura.data.file}" todir="${instrumented.class.dir}"&gt;
    &lt;fileset dir="${src.class.dir}"&gt;
        &lt;include name="**/*.class" /&gt;
    &lt;/fileset&gt;
    &lt;/cobertura-instrument&gt;
&lt;/target&gt;

&lt;property name="test.dir" value="${basedir}/test" /&gt;
&lt;property name="test.class.dir" value="${build.dir}/test" /&gt;
&lt;target name="compile-test" depends="instrument"&gt;
    &lt;mkdir dir="${test.class.dir}"/&gt;
    &lt;javac srcdir="${test.dir}" destdir="${test.class.dir}"&gt;
        &lt;classpath&gt;
            &lt;pathelement location="${instrumented.class.dir}"/&gt;
            &lt;pathelement location="${src.class.dir}"/&gt;
        &lt;/classpath&gt;
    &lt;/javac&gt;
&lt;/target&gt;

&lt;property name="unittest.report.dir" value="${build.dir}/unittest_report" /&gt;
&lt;property name="lib.dir" value="${basedir}/lib" /&gt;
&lt;target name="unittest" depends="compile-test"&gt;
    &lt;mkdir dir="${unittest.report.dir}"/&gt;
    &lt;junit printsummary="yes" fork="yes"&gt;
        &lt;sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.file}" /&gt;
        &lt;classpath&gt;
            &lt;pathelement location="${instrumented.class.dir}"/&gt;
            &lt;pathelement location="${src.class.dir}"/&gt;
            &lt;pathelement location="${test.class.dir}"/&gt;
            &lt;pathelement location="${src.dir}"/&gt;
            &lt;path refid="lib.path"/&gt;
        &lt;/classpath&gt;
        &lt;formatter type="xml"/&gt;
        &lt;batchtest todir="${unittest.report.dir}" haltonerror="no"&gt;
            &lt;fileset dir="${test.dir}"&gt;
                &lt;include name="**/*.java" /&gt;
            &lt;/fileset&gt;
        &lt;/batchtest&gt;
    &lt;/junit&gt;
&lt;/target&gt;

&lt;property name="coverage.report.dir" value="${build.dir}/coverage_report" /&gt;
&lt;target name="coverage-report" depends="unittest"&gt;
    &lt;cobertura-report datafile="${cobertura.data.file}" srcdir="${src.dir}" destdir="${coverage.report.dir}" format="xml" /&gt;
&lt;/target&gt;

&lt;property name="sonar.jdbc.url" value="jdbc:h2:tcp://localhost:9092/sonar" /&gt;
&lt;property name="sonar.jdbc.username" value="sonar" /&gt;
&lt;property name="sonar.jdbc.password" value="sonar" /&gt;
&lt;property name="sonar.projectKey" value="com.doco.gif.MyModule" /&gt;
&lt;property name="sonar.projectName" value="My Unit Test Project Demo" /&gt;
&lt;property name="sonar.projectVersion" value="2.1" /&gt;
&lt;property name="sonar.language" value="java" /&gt;
&lt;property name="sonar.sources" value="src" /&gt;
&lt;property name="sonar.tests" value="test" /&gt;
&lt;property name="sonar.binaries" value="${src.class.dir},${test.class.dir},${build.instrument.dir}" /&gt;
&lt;property name="sonar.dynamicAnalysis" value="reuseReports" /&gt;
&lt;property name="sonar.surefire.reportsPath" value="${unittest.report.dir}" /&gt;
&lt;property name="sonar.core.codeCoveragePlugin" value="cobertura" /&gt;
&lt;property name="sonar.cobertura.reportPath" value="${coverage.report.dir}/coverage.xml" /&gt;
&lt;target name="sonar" depends="coverage-report"&gt;
    &lt;taskdef classpath="sonar-ant-task-2.1.jar" uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml"/&gt;
    &lt;sonar:sonar xmlns:sonar="antlib:org.sonar.ant" /&gt;
&lt;/target&gt;
&lt;/project&gt;
</code></pre>

<h2>Code Static check rules</h2>

<p>This file defines the static check rules used by Sonarqube. It&rsquo;s imported manually from file &ldquo;tyrules.xml&rdquo; on local hard disk.</p>

<pre><code>$ cat ~/docs/tyrules.xml

&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd"&gt; 
&lt;module name="Checker"&gt; 
    &lt;property name="severity" value="warning"/&gt; 
    &lt;module name="TreeWalker"&gt; 
        &lt;metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;module name="MethodLength"&gt; 
            &lt;property name="max" value="200"/&gt; 
        &lt;/module&gt; 
        &lt;module name="NestedIfDepth"&gt; 
            &lt;property name="max" value="5"/&gt; 
        &lt;/module&gt; 
        &lt;module name="CyclomaticComplexity"/&gt; 
            &lt;module name="ParameterNumber"&gt; 
            &lt;property name="max" value="6"/&gt; 
        &lt;/module&gt; 
    &lt;/module&gt; 
    &lt;module name="StrictDuplicateCode"&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;property name="min" value="75"/&gt; 
    &lt;/module&gt; 
    &lt;module name="FileLength"&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;property name="max" value="1000"/&gt; 
    &lt;/module&gt; 
&lt;/module&gt; 
</code></pre>

<h1>For Unit Test</h1>

<ol>
<li>copy junit-4.*.jar, cobertura.jar and hamcrest-core-1.3.jar to $ANT_HOME/lib;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ragged Array in Java]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/11/150101/"/>
    <updated>2014-06-11T15:01:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/11/150101</id>
    <content type="html"><![CDATA[<p>Ragged array is a multi-dimensional array, whose elements has different length:</p>

<pre><code>$ cat Test.java
public class Test {
    public static void main(String[] args) {
        int[][] aa;
        aa = new int[3][];  // notice the unique way of it's initialization
        aa[0] = new int[2];
        aa[1] = new int[4];
        aa[2] = new int[5];
        aa[1][3] = 34;
        for (int i = 0; i &lt; aa.length; i++) {
            for (int j = 0; j &lt; aa[i].length; j++) {
                System.out.println("element aa[" + i + "][" + j + "] is: "
                        + aa[i][j]);
            }
        }
    }
}
$ javac Test.java
$ java Test
element aa[0][0] is: 0
element aa[0][1] is: 0
element aa[1][0] is: 0
element aa[1][1] is: 0
element aa[1][2] is: 0
element aa[1][3] is: 34
element aa[2][0] is: 0
element aa[2][1] is: 0
element aa[2][2] is: 0
element aa[2][3] is: 0
element aa[2][4] is: 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert an Integer to a Long Value in Java]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/11/143709/"/>
    <updated>2014-06-11T14:37:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/11/143709</id>
    <content type="html"><![CDATA[<p>When you convert an integer to a long, you must convert the integer to a long before any calculations, or it will give the wrong result.</p>

<pre><code>$ cat Test.java
public class Test {
    public static void main(String[] args) {
        int io = Integer.MAX_VALUE;
        int ir = io + 1;
        long la = io + 1;
        long lb = ((long)io) + 1;
        System.out.println("Value of int variable io is: " + io);
        System.out.println("Value of int variable ir is: " + ir);
        System.out.println("Value of long variable la is: " + la);
        System.out.println("Value of long variable lb is: " + lb);
    }
}
$ javac Test.java
$ java Test
Value of int variable io is: 2147483647
Value of int variable ir is: -2147483648
Value of long variable la is: -2147483648
Value of long variable lb is: 2147483648
</code></pre>

<p>So only the 3rd form (lb) gives the right result.</p>
]]></content>
  </entry>
  
</feed>
