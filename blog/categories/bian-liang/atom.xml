<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 变量 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/bian-liang/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ivy可以在ant中直接使用的变量]]></title>
    <link href="http://leetschau.github.io/blog/2011/05/25/123121/"/>
    <updated>2011-05-25T12:31:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/05/25/123121</id>
    <content type="html"><![CDATA[<p>在 ant 文件中使用&lt;ivy:resolve/>进行解析后，可以使用如下变量：</p>

<p>ivy.organisation</p>

<p>ivy.module</p>

<p>ivy.revision</p>

<p>ivy.resolved.configurations</p>

<p>例如如下代码：
   <target  name= "UT_junit"  depends=  "cleanForZip" >
   <mkdir dir="${junit.test.result}"/>
     <javac  srcdir= "${test.src.dir}"  destdir= "${test.class.dir}"  encoding= "GBK" >
      <classpath>
       <pathelement  location= "${build.dist.dir}/${ ivy.module }-${ ivy.revision }.jar" />
       <path  refid= "lib.path" />
       <path  refid= "test.lib.path" />
      </classpath>
     </javac>
 需要注意的是由于这些变量仅在 &lt;ivy:resolve/>后才生成，因此不要用<property name="..." value="${ivy.module}" />将它们的赋给一个变量，因为所有的变量赋值都是在任务（target）之前进行的（不论赋值的位置是否在包含&lt;ivy:resolve/>的target之后），因此变量肯定是得不到上述变量的值的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的变量共享问题]]></title>
    <link href="http://leetschau.github.io/blog/2011/05/06/170316/"/>
    <updated>2011-05-06T17:03:16+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/05/06/170316</id>
    <content type="html"><![CDATA[<p>模块中的多个类之间经常要共享某一变量，比如生成BVT报告的JUnit适配器类实例需要根据Cobertura适配器类实例的计算出来的有效行数计算千行代码测试用例数，又比如适配器类在备份BVT报告时需要知道报告备份的地址，而这个地址是保存在BVT类中的。</p>

<p>以上场景都需要解决变量在类实例间的传递问题，办法有4个：使用模块级的全局变量、使用类的静态成员变量、使用环境变量、定义为global。</p>

<p>模块级全局变量适用于此变量在模块内共享的情况，优点是简单易懂，在模块开始部分定义一个空字典，条目的key是该条目的功能说明；</p>

<p>类静态成员适用于该变量是类的普遍特性的情况，用 self.<strong>class</strong>.var_name 的方法定义，用 ClassName.var_name 的方法获取。</p>

<p>环境变量和global变量适用于在模块间共享变量的情况，但对数据的封装性比较差，尽量不要使用。</p>
]]></content>
  </entry>
  
</feed>
