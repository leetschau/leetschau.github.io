<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ide | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ide/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-04T11:42:13+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Development Environment Setup]]></title>
    <link href="http://leetschau.github.io/blog/2014/11/04/145629/"/>
    <updated>2014-11-04T14:56:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/11/04/145629</id>
    <content type="html"><![CDATA[<h1>vim</h1>

<ol>
<li><p>Install nvm;</p></li>
<li><p>Install node with nvm;</p></li>
<li><p>Install jshint with npm, which is a tool in node: <code>npm install -g jshint</code>;</p></li>
<li><p>Check syntax with <code>jshint myfile.js</code>;</p></li>
<li><p>Check html syntax with Tidy, which is installed on Ubuntu with <code>apt-get install tidy</code>;</p></li>
</ol>


<p>Ref: <a href="http://stackoverflow.com/questions/473478/vim-jslint">VIM + JSLint?</a></p>

<h1>Eclipse</h1>

<p>Eclipse&rsquo;s javascript development tools JSDT is part of WTP (web tools platform),
which is a built-in plugin of &ldquo;Eclipse JEE&rdquo; (Eclipse for Java EE Developers).</p>

<p>Its editor has auto syntax checker. Config it in [Window -> Preferences -> JavaScript -> Editor].
Config its code style (tab size, for example) at [Window -> Preferences -> JavaScript -> Code Style -> Formatter].</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Interactive Development Workflow]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/20/092952/"/>
    <updated>2013-11-20T09:29:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/20/092952</id>
    <content type="html"><![CDATA[<p>The key of interactive programming is &ldquo;declarative programming&rdquo;, which can be expressed as following principles:</p>

<ol>
<li><p>Try to write all business logic in functions or classes, instead of procedures;</p></li>
<li><p>Express the result as return values of functions, instead of printing them to console;</p></li>
</ol>


<p>Then you store these functions or classes in your files. Then you start the REPL shell, load your function file, declare your inputs, run your functions with the inputs, evaluate the output; modify the function in file, reload your file in shell, run your functions again, reevaluate the output, continue this loop, until you get the expected output.</p>

<p>Between these loops, you have 2 window: an editor and a shell, the former for write &ldquo;real&rdquo; production code, the latter for loading file and doing some experiments, while switching between them with Alt-Tab. You only declare inputs once. Using shortcuts (Ctrl-p) to reload function file and re-test your function. So the loop will be very fast, and you can concentrate on the business logic itself.</p>

<p>emacs-for-python and IPython are the preferred editor and shell, both have powerful code completion functionality.</p>

<h1>Linux Shell</h1>

<p>Save some fundamental functions in a python file, say &ldquo;myfunc.py&rdquo;, Then use &ldquo;python -i myfunc.py&rdquo; to load all functions in myfunc.py and enter interactive shell.</p>

<h1>Python Console</h1>

<p>&ldquo;execfile(&lsquo;filename.py&rsquo;)&rdquo; to load (or reload) file;</p>

<p>&ldquo;dir()&rdquo; to list all variables;</p>

<p>&ldquo;del(variable)&rdquo; to clear a variable;</p>

<p>C-p, C-n to traverse in command history;</p>

<h1>IPython</h1>

<h2>Installation</h2>

<pre><code>sudo apt-get install ipython-notebook
</code></pre>

<h2>Command history traverse and back reference</h2>

<p>History inputs: all in dictionary &ldquo;In&rdquo;, use &ldquo;%hist -n&rdquo; list all previous command;</p>

<p>Output: all in dictionary &ldquo;Out&rdquo;, <em>1, </em>2, &hellip;</p>

<p>C-p, C-n, %rep <command_num></p>

<p>While all shortcuts supported by bash are available in IPython (See Command Line Shortcuts in Linux Shell for details).</p>

<h2>Command</h2>

<p>To line magic command, &ldquo;%&rdquo; can be omitted.</p>

<p>%pwd: pwd</p>

<p>!<cmd>: run shell command;</p>

<p>%run <file_name>: equals to &ldquo;execfile()&rdquo; in standard python shell;</p>

<p>%reset: clear all user defined variables;</p>

<p>%pycat <file_name>: show file content with syntax coloring;</p>

<p>%edit <file_name>: edit file;</p>

<p>%pdb or %run -d <file_name>: debug file;</p>

<h2>log utility</h2>

<p>%logstate: get the current state of log: on/off</p>

<p>%logstart -o <file_name></p>

<p>%logstop</p>

<h1>Emacs</h1>

<p><a href="https://github.com/gabrielelanaro/emacs-for-python">emacs-for-python</a></p>

<h1>Difference between &ldquo;import&rdquo; and &ldquo;run&rdquo;</h1>

<p>You can put some code after</p>

<pre><code>if __name__ == '__main__':
</code></pre>

<p>in a python file &ldquo;test.py&rdquo;. Then if you want run these codes, use &ldquo;run test.py&rdquo; in ipython or &ldquo;execfile(&lsquo;test.py&rsquo;)&rdquo; in python shell. If you don&rsquo;t want to run these code, use &ldquo;import test&rdquo;. But this is not a best practice. Try to put all things in functions and classes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Conque and Clojure REPL as Clojure IDE]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/23/192656/"/>
    <updated>2013-09-23T19:26:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/23/192656</id>
    <content type="html"><![CDATA[<p><a href="http://code.google.com/p/conque/">conque</a> is a vim plugin which allows you to run shell in a vim buffer.</p>

<p>To install, download conque_2.3.tar.gz and extract it into ~/.vim/bundle (yes you have to use pathogen to manage your vim plugins). Start vim, input &ldquo;:Con<tab>&rdquo;, it will be extract to &ldquo;:ConqueTerm &rdquo;, then input the command you want to run, like bash, clojure, python, etc.</p>

<p>Other commands include ConqueTermSplit, ConqueTermTab, ConqueVSplit.</p>

<p>The workflow is:</p>

<ol>
<li><p>Start vi and &ldquo;:ConqueTerm clojure&rdquo;;</p></li>
<li><p>Input something;</p></li>
<li><p>Back to normal mode and use &ldquo;:w mylog&rdquo; to save your script.</p></li>
</ol>


<p>Note: you have to add file name after :w every time saving the script for the &ldquo;buftype&rdquo; attribute is &ldquo;nofile&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Emacs as Clojure IDE]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/23/163218/"/>
    <updated>2013-09-23T16:32:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/23/163218</id>
    <content type="html"><![CDATA[<ol>
<li><p>Open emacs24;</p></li>
<li><p>Change CWD to parent folder of project home: M-x cd<CR> ~/docs/tmp<CR>;</p></li>
<li><p>Build a leiningen project: M-! lein new calc-cov (see Run Shell Command in Emacs for other method to run shell command in emacs);</p></li>
<li><p>Change CWD to project home: M-x cd<CR> calc-cov<CR>;</p></li>
<li><p>Start nrepl server: M-x nrepl-jack-in;</p></li>
<li><p>Open source file in another window: C-x 2 C-x C-f src/&hellip;/core.clj;</p></li>
<li><p>Change the namespace of the REPL to the namespace of the file you are in: C-c M-n;</p></li>
<li><p>Evaluate the whole source file: C-c C-k, evaluate a s-exp before the cursor: C-x C-e;</p></li>
<li><p>Open clojure doc of the function under the cursor: C-c C-d</p></li>
<li><p>Run test: C-c C-,</p></li>
</ol>


<h1>Frequently used keyboard shortcuts and commands</h1>

<ul>
<li><p>Toggle focus between nrepl window and clojure source file window: C-c C-z (you should add &ldquo;(add-to-list &lsquo;same-window-buffer-names &rdquo;<em>nrepl</em>&ldquo;)&rdquo; to ~/.emacs;</p></li>
<li><p>Always pretty printing in the REPL: M-x nrepl-toggle-pretty-printing</p></li>
<li><p>Move over sexp: C-M-b/C-M-f;</p></li>
<li><p>Interrupt any pending evaluations: C-c C-b;</p></li>
</ul>


<h1>Evaluate a sexp without evaluate all file</h1>

<ol>
<li><p>Add this sexp into source file (unnecessary to save source file);</p></li>
<li><p>Use following methods to evaluate the sexp:</p></li>
<li><p>Move cursor to the sexp for test, C-M-x (or C-c C-c) to evaluate the top-level form (such as a defn expression) under the cursor; If you want insert the evaluation result to current buffer, use C-u C-M-x;</p></li>
<li><p>If the the target form is not a &ldquo;top-level&rdquo; form, move the cursor to the <strong>end</strong> of this sexp, C-x C-e to evaluate it, See more shortcuts at <a href="https://github.com/clojure-emacs/nrepl.el">nrepl official site</a>;</p></li>
</ol>


<p>Then this sexp has been added to the repl, you can use it in repl;</p>

<p>This is very helpful in some circumstances. For example, I want debug function &ldquo;cell-block&rdquo; (see p141 in &ldquo;Clojure Programming&rdquo;), add</p>

<pre><code>(println "[left mid right] is:") 
(println [left mid right]) 
</code></pre>

<p>before &ldquo;(window (map &hellip;)&rdquo;. But You can&rsquo;t evaluate the whole file because there are some lazy sequences and evaluate whole file will cause JVM heap out of memory; So I only evaluate this modified version with C-x C-e, test it in repl. After I figure out how this function works, undo my modification and move on.</p>

<p>Note:</p>

<ul>
<li><p>In clojure mode with Evil, you have to switch to insert state and put the cursor <strong>after</strong> the last parenthsis, then evaluate the expression with C-x C-e. If you put the cursor <strong>on</strong> the last parenthesis in normal state, The result will be wrong.</p></li>
<li><p>It unnecessary to put your clojure file in a leiningen-created project, which is more flexible than vim-fireplace;</p></li>
<li><p>The value of expression will be output to the <em>message</em> area (bottom of the emacs window), while the output by &ldquo;println&rdquo; will be output to nrepl buffer;</p></li>
<li><p>Switch cursor between windows: C-x o;</p></li>
<li><p>Clear repl output: C-c M-o;</p></li>
<li><p>Indent code blocks intelligently: C-M-q</p></li>
<li><p>All the keyboard shortcuts will be more convenient if you swap CapsLock key and Escape key, together with Ctrl key and Alt key, see Define Keymap on Ubuntu for detail;</p></li>
</ul>


<p>Ref: <a href="http://stackoverflow.com/questions/3636364/can-i-clean-the-repl">http://stackoverflow.com/questions/3636364/can-i-clean-the-repl</a></p>

<p>Ref: <a href="http://cojure-doc.org/articles/tutorials/emacs.html">Clojure with Emacs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jave IDE on Xfce]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/01/182936/"/>
    <updated>2013-08-01T18:29:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/01/182936</id>
    <content type="html"><![CDATA[<p>Eclipse sucks. Tooltips in text editor disappears.</p>

<p>Netbeans is ok.</p>

<p>IntelliJ is ok. I will use this one as my Hadoop IDE. Tooltips looks ok by adding &ldquo;auto.show.quick.doc=true&rdquo; at file $INTELLIJ_HOME/bin/idea.properties. See &ldquo;<a href="http://stackoverflow.com/questions/6615516/intellij-tooltip-shows-javadocs">http://stackoverflow.com/questions/6615516/intellij-tooltip-shows-javadocs</a>&rdquo;.</p>
]]></content>
  </entry>
  
</feed>
