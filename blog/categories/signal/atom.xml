<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Signal | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/signal/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Python Environment Detector]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/27/120107/"/>
    <updated>2014-03-27T12:01:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/27/120107</id>
    <content type="html"><![CDATA[<p>The users of this app provides the method to get result (command on remote host),
the check standard (a callback function),
information about target host (ip and username),
and an optional timeout of execution time.
With the envdet module,
you can get the result: if the command output obey the check standard.</p>

<p>The application module, detapp.py:</p>

<pre><code>import logging
from envdet import rcmd

logger = logging.getLogger('DetectApp')
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('detect.log')
fh.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
fh.setFormatter(formatter)
logger.addHandler(ch)
logger.addHandler(fh)


def isOracleJDK(str):
    return 'Java(TM)' in str

res = rcmd('bvt', '10.0.2.47', 'java -version', isOracleJDK)
logger.info('Check result:%s' % res)
</code></pre>

<p>The environment detection module, envdet.py:</p>

<pre><code>from subprocess import Popen, PIPE, STDOUT
import signal
import logging

logger = logging.getLogger('DetectApp.envdet')

def handler(signum, frame):
    logger.error('Signal handler called with signal: %d' % signum)
    raise IOError("Command execution timeout!")

def rcmd(user, host, cmd, check_handler, timeout=10):
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(timeout)

    cmdstr = "ssh %s@%s 'source /etc/profile;%s'" % (user, host, cmd)

    p = Popen(cmdstr, close_fds=True, shell=True, stdout=PIPE, stderr=STDOUT)

    fullres = line = ''
    while p.poll() is None:
        out = p.stdout.read(1)
        fullres = fullres + out
        if out=='\n':
            logger.debug(line)
            line = ''
        else:
            line = line + out
    logger.debug('----ret of cmd %s is: %d----' % (cmd, p.returncode))
    return check_handler(fullres)
</code></pre>

<p>The technical points here are:</p>

<ul>
<li><p>Run shell command in Python and retrieve output and return code;</p></li>
<li><p>Use signal to limit the overall running time of commands on remote host over SSH;</p></li>
<li><p>The logging utility across multiple modules, notice the naming rules:
<app-logger-name>.<imported-module-name>. So if you rename the module name,
rename it&rsquo;s logger accordingly.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
