<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualbox | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/virtualbox/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor Development Environment on Windows]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/05/131004/"/>
    <updated>2015-10-05T13:10:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/05/131004</id>
    <content type="html"><![CDATA[<p>If you want develop Meteor on Windows machine,
it&rsquo;s inconvenient to install meteor, mongodb, vim, etc. on Windows.
My choice is use VM as develop environment.</p>

<p>First install <a href="https://www.virtualbox.org/">VirtualBox</a>, <a href="https://www.vagrantup.com/">Vagrant</a>,
<a href="http://executor.dk/">Executor</a>.</p>

<p>Add the Meteor Dev vagrant box to system <code>vagrant box add meteorBox mybox.box</code>.
The box is based on Ubuntu 14.04 LTS (Trusty), with provisioned Meteor, MongoDB, git, tmux,
vim and its plugins.</p>

<p>Create the VM: <code>vagrant init meteorBox</code>;</p>

<p>There are different SSH clients:</p>

<h1>MobaXterm</h1>

<p>Download <a href="http://mobaxterm.mobatek.net/">MobaXterm</a> and extract it to app folder,
say d:\Apps\MobaXterm_v7.7.</p>

<p>Create a new session in MobaXterm named &ldquo;localvm&rdquo;, with username &ldquo;vagrant&rdquo; and port 2222;</p>

<p>In Executor, add the following keywords:</p>

<pre><code>keyword: vmStart
Command: vagrant
Parameters: up
Start in: e:\Docs\MeteorBox\sysClone\vm

keyword: vmSuspend
Command: vagrant
Parameters: suspend
Start in: e:\Docs\MeteorBox\sysClone\vm

Keyword: vmLogin
Command: MobaXterm_Personal_7.7.exe
Parameters: -bookmark localvm -exitwhendone
Start in: d:\Apps\MobaXterm_v7.7

Keyword: vmStart&amp;Login
Command: vmStart||vmLogin
</code></pre>

<p>Now you can use [win-z, vmStart&amp;Login] to start VM and login.
Before you shutdown Windows machine, remember use [win-z, vmSuspend] to suspend VM
(which is always impossible).</p>

<p>Below is the procedure of getting a project into the VM:</p>

<pre><code>win-z: vmstart
win-z: vmlogin
# in the VM
ssh-keygen
# copy $(cat .ssh/id_rsa.pub) to http://phab.yourdomain.com/settings/panel/ssh
mkdir docs;cd docs
git clone ssh://git@phab.yourdomain.com/diffusion/YOURREPO/yourRepo.git 
cd yourRepo
git submodule init
git submodule update
</code></pre>

<p>Note: to add or edit keywords in Executor, use shortcut [win-z, Ctrl-k],
see Executor documents for details.</p>

<h1>Kitty</h1>

<p>If you prefer Kitty (portable version of Putty) to MobaXterm,</p>

<p>Add a new Session &ldquo;localvm&rdquo; in Kitty:</p>

<pre><code>Host name: localhost
Port: 2222
Connection -&gt; Data -&gt; Auto-login username &amp; password: vagrant
Window -&gt; Behavior: check "Full screen on Alt-Enter"
</code></pre>

<p>The corresponding &ldquo;vmLogin&rdquo; will be:</p>

<pre><code>Keyword: vmLogin
Command: kitty.exe
Parameters: -load localvm
Start in: d:\Apps\Kitty
</code></pre>

<h1>ConEmu + Kitty</h1>

<p>You can even wrap Kitty into <a href="https://github.com/Maximus5/ConEmu">ConEmu</a>,
which is a good Windows console alternative.</p>

<p>In ConEmu, add a task in Settings -> Startup -> Tasks:</p>

<pre><code>Name: Kitty
Hotkey: Win + Alt + X
Task parameters: blank
Commands: d:\Apps\Kitty\kitty.exe -new_console -load "VagrantLinux"
</code></pre>

<p>And set Kitty as the auto startup task:
Set <code>Settings -&gt; Startup -&gt; Startup options -&gt; Specified named task</code> to &ldquo;Kitty&rdquo;.</p>

<p>Add a new Executor keyword for ConEmu:</p>

<pre><code>Keyword: vmLogin
Command: d:\Apps\ConEmu\ConEmu.exe
</code></pre>

<p>(or use [Win + Alt + X] to login to VM manually in ConEmu).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Vagrant-Created VMs on Linux Mint]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/22/103439/"/>
    <updated>2015-04-22T10:34:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/22/103439</id>
    <content type="html"><![CDATA[<ol>
<li><p>After installation of Virtualbox,
specify the VM files location in VirutalBox:
[File -> Preferences -> General -> Default Machine Folder]
to &ldquo;$HOME/docs/vms&rdquo;;</p></li>
<li><p>Add <code>alias vb='VBoxManage'</code> into ~/.bash_aliases;</p></li>
<li><p>List all existing VMs: <code>vb list vms</code>;</p></li>
<li><p>List all running VMs: <code>vb list runningvms</code>;</p></li>
<li><p>Print the details of a VM: <code>vb showvminfo xxx</code>,
where xxx is one item name in output of <code>vb list vms</code>;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Windows VM in Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/13/142025/"/>
    <updated>2015-01-13T14:20:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/13/142025</id>
    <content type="html"><![CDATA[<p>In Linux Mint i3wm, first build a Windows vm in VirtualBox.</p>

<p>Then get the UUID of the guest OS with:</p>

<pre><code>$ VBoxManage list vms
"Win7Office" {35cd049b-7242-4db4-8329-2eb05149f5cf}
...
</code></pre>

<p>The UUID will be used to start the vm with script.
Save the following line in /usr/local/bin/win7:</p>

<pre><code>VBoxManage startvm 35cd049b-7242-4db4-8329-2eb05149f5cf --type gui
</code></pre>

<p>Add executing permission: <code>sudo chmod 755 /usr/local/bin/win7</code>;</p>

<p>Now start Windows vm with dmenu: alt-d -> win7.</p>

<p>Make the vm full screen: press &ldquo;Home&rdquo; key, (here is right ctrl key), followed by alt-f.</p>

<p>To leave the guest system to the #2 workspace: right ctrl, alt-2.</p>

<p>In Ubuntu Unity desktop environment it&rsquo;s almost the same with that in i3wm,
but use alt-f2 instead of alt-d to run the script.
Use alt-tab instead of alt-2 to leave the Windows vm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtualization With Vagrant on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/20/094427/"/>
    <updated>2014-10-20T09:44:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/20/094427</id>
    <content type="html"><![CDATA[<p>Firstly install Virtualbox and Vagrant:</p>

<pre><code>sudo pacman -S virtualbox vagrant
</code></pre>

<p>If you met the following warning, and vagrant can&rsquo;t start:</p>

<blockquote><p>The vboxdrv kernel module is not loaded.
Either there is no module available for the current kernel (3.16.4-1-ARCH) or it failed to load.</p></blockquote>

<p>run following commands to compile kernel module vboxdrv and load it:</p>

<pre><code>sudo pacman -S linux-headers virtualbox-host-dkms
sudo dkms install vboxhost/4.3.18
sudo modprobe vboxdrv
</code></pre>

<p>Verify the module is loaded successfully with <code>lsmod |grep vboxdrv</code>.</p>

<p>Ref: <a href="https://wiki.archlinux.org/index.php/VirtualBox">VirtualBox on ArchWiki</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build C Development Environment With VirtualBox]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/04/082233/"/>
    <updated>2014-08-04T08:22:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/04/082233</id>
    <content type="html"><![CDATA[<p>Host: Win7, VM: CentOS 6.5 minimal</p>

<h1>VM setup</h1>

<p>setup network and share folders in Settings of VM.</p>

<h2>Network setup</h2>

<ol>
<li><p>In settings of VM: the first NIC is host-only, second is bridged.</p></li>
<li><p>Start VM, create /etc/sysconfig/network-scripts/ifcfg-eth1 based on ifcfg-eth0, the hardware address is from /etc/udev/rules/70-persistent.network;</p></li>
<li><p>reboot;</p></li>
</ol>


<h1>Install Guest Addons</h1>

<p>In VM:</p>

<pre><code> # yum update
 # yum install gcc
 # yum install kernel-devel
 # mount /dev/scd0 /media/cdrom
 # sh /media/VBOXADDITIONS_4.0.12_72916/VBoxLinuxAdditions.run
</code></pre>

<p>Now you can visit share folders in /media/sf_<share_folder_name>.</p>
]]></content>
  </entry>
  
</feed>
