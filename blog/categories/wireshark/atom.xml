<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wireshark | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/wireshark/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows 7 启动Wireshark找不到网卡的解决办法]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/29/111823/"/>
    <updated>2013-03-29T11:18:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/29/111823</id>
    <content type="html"><![CDATA[<p>今天启动Wireshark时报“npf isn&rsquo;t running”，找不到网卡，google一番后发现是一个叫npf的系统服务没有启动所致，首先以管理员身份开启命令行，然后进入如下操作：</p>

<p>C:\Windows\system32>sc qc npf
[SC] QueryServiceConfig 成功
SERVICE_NAME: npf
  TYPE    : 1 KERNEL_DRIVER
  START_TYPE   : 3 DEMAND_START
  ERROR_CONTROL  : 1 NORMAL
  BINARY_PATH_NAME : system32\drivers\npf.sys
  LOAD_ORDER_GROUP :
  TAG    : 0
  DISPLAY_NAME  : NetGroup Packet Filter Driver
  DEPENDENCIES  :
  SERVICE_START_NAME :
C:\Windows\system32>sc start npf
SERVICE_NAME: npf
  TYPE    : 1 KERNEL_DRIVER
  STATE    : 4 RUNNING
        (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
  WIN32_EXIT_CODE : 0 (0x0)
  SERVICE_EXIT_CODE : 0 (0x0)
  CHECKPOINT   : 0x0
  WAIT_HINT   : 0x0
  PID    : 0
  FLAGS    :</p>

<p>C:\Windows\system32>sc config npf start= auto
[SC] ChangeServiceConfig 成功</p>

<p>注意第一个条指令是查询npf服务的状态，可以看到是DEMAND_START，不是自动启动，所以第二条指令手工启动了服务，第3条指令将npf启动方式改为自动启动，注意它的格式比较特别，等号后面要加一个空格（等号前面不能写空格）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Wireshark为无线网卡抓包]]></title>
    <link href="http://leetschau.github.io/blog/2013/02/28/200614/"/>
    <updated>2013-02-28T20:06:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/02/28/200614</id>
    <content type="html"><![CDATA[<p>在Wireshark的网卡列表里，无线网卡的名字不是Windows无线网络连接当中的设备名，需要用下面的方法确定列表中哪个是无线网卡：</p>

<p>方法1： Wireshark -> Capture -> Interface：</p>

<p>可以看到上图中第3个（一般都被命名为Microsoft）有明显的数据传输，是无线网卡的可能性最大；</p>

<p>方法2： Wireshark -> Capture -> Options，列表中有各个网卡的IP地址，很明显第3个网卡就是无线网卡，双击它在&#8221;Capture Filter&#8221;里写上过滤规则就可以抓包了。</p>

<p>以上基于Wireshark 1.8.5版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireshark使用笔记]]></title>
    <link href="http://leetschau.github.io/blog/2012/07/18/153402/"/>
    <updated>2012-07-18T15:34:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/07/18/153402</id>
    <content type="html"><![CDATA[<p>Wireshark的配置主要有两个，分别是capture filter和display filter，前者决定抓哪些包，后者决定在所有抓取的包里显示哪些包，以监控本机和服务器的Telnet交互过程为例，capture filter中配置：host 10.0.2.47，display filter中配置：telnet。这样就只显示telnet包，TCP包会被隐藏起来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netty Echo Server传输机制分析]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/23/124324/"/>
    <updated>2012-03-23T12:43:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/23/124324</id>
    <content type="html"><![CDATA[<p>工作目录：/home/godu/backup；上传netty-3.2.6.Final.jar；
源文件：
EchoServer.java import java.net.InetSocketAddress;
import java.util.concurrent.Executors;
import org.jboss.netty.bootstrap.ServerBootstrap;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelPipelineFactory;
import org.jboss.netty.channel.Channels;
import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
public class EchoServer {
  public static void main(String[] args) throws Exception {
   // Configure the server.
   ServerBootstrap bootstrap = new ServerBootstrap(
     new NioServerSocketChannelFactory(
        Executors.newCachedThreadPool(),
        Executors.newCachedThreadPool()));
   // Set up the pipeline factory.
   bootstrap.setPipelineFactory(new ChannelPipelineFactory() {
    public ChannelPipeline getPipeline() throws Exception {
     return Channels.pipeline(new EchoServerHandler());
    }
   });
   // Bind and start to accept incoming connections.
   bootstrap.bind(new InetSocketAddress(8349));
  }
}
EchoServerHandler.java import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ExceptionEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
public class EchoServerHandler extends SimpleChannelUpstreamHandler {
  private static final Logger logger = Logger
    .getLogger(EchoServerHandler.class.getName());
  private final AtomicLong transferredBytes = new AtomicLong();
  public long getTransferredBytes() {
   return transferredBytes.get();
  }
  @Override
  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
   // Send back the received message to the remote peer.
   transferredBytes.addAndGet(((ChannelBuffer) e.getMessage())
     .readableBytes());
   e.getChannel().write(e.getMessage());
  }
  @Override
  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {
   // Close the connection when an exception is raised.
   logger.log(Level.WARNING, &ldquo;Unexpected exception from downstream.&rdquo;,
     e.getCause());
   e.getChannel().close();
  }
}
启动Echo Server：
javac -cp .:./netty-3.2.6.Final.jar EchoServerHandler.java
javac -cp .:./netty-3.2.6.Final.jar EchoServer.java
java -cp .:./netty-3.2.6.Final.jar EchoServer</p>

<p>连接Server：XShell里运行： telnet 10.0.2.47 8349 ，建立连接后输入 bcde 并回车后可以看到收到了bcde，整个过程用wireshark监控内容如下（监控完后导出结果方法：File->Export->File，保存类型为txt）： No.  Time  Source    Destination   Protocol Length Info
  1 0.000000 10.32.1.103   10.0.2.47    TCP  66  10811 > 8394 [SYN] Seq=0 Win=8192 Len=0 MSS=1460 WS=256 SACK_PERM=1
Frame 1: 66 bytes on wire (528 bits), 66 bytes captured (528 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 0, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 0 (relative sequence number)
 Header length: 32 bytes
 Flags: 0x02 (SYN)
 Window size value: 8192
 [Calculated window size: 8192]
 Checksum: 0x976d [validation disabled]
 Options: (12 bytes)
No.  Time  Source    Destination   Protocol Length Info
  2 0.000267 10.0.2.47    10.32.1.103   TCP  66  8394 > 10811 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460 SACK_PERM=1 WS=128
Frame 2: 66 bytes on wire (528 bits), 66 bytes captured (528 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 0, Ack: 1, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 0 (relative sequence number)
 Acknowledgement number: 1 (relative ack number)
 Header length: 32 bytes
 Flags: 0x12 (SYN, ACK)
 Window size value: 5840
 [Calculated window size: 5840]
 Checksum: 0x0552 [validation disabled]
 Options: (12 bytes)
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  3 0.000295 10.32.1.103   10.0.2.47    TCP  54  10811 > 8394 [ACK] Seq=1 Ack=1 Win=65536 Len=0
Frame 3: 54 bytes on wire (432 bits), 54 bytes captured (432 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x5bf4 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  4 5.669101 10.32.1.103   10.0.2.47    TCP  58  10811 > 8394 [PSH, ACK] Seq=1 Ack=1 Win=65536 Len=4
Frame 4: 58 bytes on wire (464 bits), 58 bytes captured (464 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 4
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 [Next sequence number: 5 (relative sequence number)]
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x951f [validation disabled]
 [SEQ/ACK analysis]
Data (4 bytes)
0000 62 63 64 65           bcde
 Data: 62636465
 [Length: 4]
No.  Time  Source    Destination   Protocol Length Info
  5 5.669359 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [ACK] Seq=1 Ack=5 Win=5888 Len=0
Frame 5: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 5, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 5 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x5cc2 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  6 5.669397 10.32.1.103   10.0.2.47    TCP  56  10811 > 8394 [PSH, ACK] Seq=5 Ack=1 Win=65536 Len=2
Frame 6: 56 bytes on wire (448 bits), 56 bytes captured (448 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 5, Ack: 1, Len: 2
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 5 (relative sequence number)
 [Next sequence number: 7 (relative sequence number)]
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x4edc [validation disabled]
 [SEQ/ACK analysis]
Data (2 bytes)
0000 0d 0a            ..
 Data: 0d0a
 [Length: 2]
No.  Time  Source    Destination   Protocol Length Info
  7 5.669574 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [ACK] Seq=1 Ack=7 Win=5888 Len=0
Frame 7: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x5cc0 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  8 5.682922 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [PSH, ACK] Seq=1 Ack=7 Win=5888 Len=6
Frame 8: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 6
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 [Next sequence number: 7 (relative sequence number)]
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x88df [validation disabled]
 [SEQ/ACK analysis]
Data (6 bytes)
0000 62 63 64 65 0d 0a         bcde..
 Data: 626364650d0a
 [Length: 6]
No.  Time  Source    Destination   Protocol Length Info
  9 5.887726 10.32.1.103   10.0.2.47    TCP  54  10811 > 8394 [ACK] Seq=7 Ack=7 Win=65536 Len=0
Frame 9: 54 bytes on wire (432 bits), 54 bytes captured (432 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 7, Ack: 7, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 7 (relative sequence number)
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x5be8 [validation disabled]
 [SEQ/ACK analysis]
可以看到第4个包是C向S发送bcde，第6个是向S发送回车，第8个包是S向C返回bcde回车；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Wireshark分析Telnet交互过程]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/15/093417/"/>
    <updated>2012-03-15T09:34:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/15/093417</id>
    <content type="html"><![CDATA[<p>Windows系统下
用XShell作为Telnet客户端连接47服务器，整个过程可以用Wireshark（验证版本：1.6.5）完整地记录下来。</p>

<p>Wireshark->Capture->Interface中设置要监视的网卡；</p>

<p>Wireshark->Capture->Options->Capture Filter后写要监控的目标主机IP地址，这里写： host 10.0.2.47 ；</p>

<p>Wireshark->Capture->Start；</p>

<p>启动XShell连接47：Xshell:> telnet 10.0.2.47 ；</p>

<p>Wireshark将显示整个交互过程（见下图），可以看到主界面分为3部分，上面按时间顺序列出了每次交互的数据包（packet）；中间是这个数据包的详细内容，第一层Frame 14（xx层？）是xxx，第二层Ethernet II（链路层）主要由源和目标主机的网卡（Mac）地址组成，用ifconfig -a(Linux)或者ipconfig /all(windows)可以验证，第3层（网络层）是IP协议报头，主要包括源和目标的IP地址等，第4层（传输层）是TCP协议报头，主要包括源和目标的端口号、包序列号等，第5层（应用层）是Telnet数据；主界面的下部是此数据包的具体内容，以16进制显示。</p>

<p>连接后首先进行选项协商，然后传输数据，下面以“是否回显”为例详细说明协商过程，图中10.0.2.47是Telnet Server，10.32.1.56是Client。</p>

<p>第14步S要求C回显：ff fd 01，即IAC DO ECHO（见上图）；</p>

<p>第17步C回答S客户端不回显：ff fc 01，即IAC WONT ECHO；</p>

<p>第19步S通知C服务端将回显：ff fb 01，即IAC WILL ECHO；</p>

<p>第20步C同意服务端回显：ff fd 01，即IAC DO ECHO；</p>

<p>选项协商中各种搭配的具体含义参见“ The Telnet Protocol ”；</p>

<p>更改XSehll窗口尺寸引起的window size negotiation：</p>

<p>ff fa 1f 00 62 00 1b ff f0，即IAC SB 31(Options: Window Size) 98 27 IAC SE</p>

<p>转换为Telnet语句：</p>

<p>Suboption Begin: Negotiate About window size</p>

<p>Width: 98 Height: 27</p>

<p>Command: Suboption End</p>

<p>命令行用法</p>

<p>C:\Program Files\Wireshark>tshark -D
1. \Device\NPF<em>{4DF0B9FD-57A8-43FC-9EC9-354B454E475D} (VMware Virtual Ethernet Adapter)
2. \Device\NPF</em>{CA8CAD23-7ADD-4F2B-8A77-1E9E6810FE38} (Broadcom NetLink &trade; Gigabit Ethernet Driver)
3. \Device\NPF_{53720D33-0B96-48DB-A977-07A0EC43F65B} (VMware Virtual Ethernet Adapter)</p>

<p>tshark -f &ldquo;host 10.0.2.47&rdquo; -i 2 -c 20 -w myfile</p>

<p>用wireshark打开myfile</p>

<p>用tshark -F可以看到snoop好像是可以在solaris上打开的输入监控文件格式
 Linux下
47上目前的操作系统是Red Hat Enterprise Linux Server release 5.4，安装tshark需要 libsmi-0.4.5-2.el5.x86_64.rpm 和 wireshark-1.0.15-1.el5_6.4.x86_64.rpm 两个包，安装过程很简单，首先将这个包上传到47上，然后执行：</p>

<p> rpm -ivh libsmi-0.4.5-2.el5.x86_64.rpm</p>

<p> rpm -ivh wireshark-1.0.15-1.el5_6.4.x86_64.rpm</p>

<p> verify:</p>

<p> [root@goduserver tool]# whereis tshark
tshark: /usr/sbin/tshark /usr/share/man/man1/tshark.1.gz</p>

<p> rpm包下载站点： pkgs.org ，备用站点： <a href="http://rpm.pbone.net/">http://rpm.pbone.net/</a></p>

<p>获取网卡列表：</p>

<p>[root@goduserver tool]# tshark -D
1. eth3
2. &hellip;</p>

<p> 获取监测数据：</p>

<p>[root@goduserver help]# tshark -i eth3 -w myoutput host 10.32.1.59</p>

<p>普通用户权限不够无法进行监测：</p>

<p>[godu@goduserver ~]$ tshark -i eth3 host 10.32.1.59</p>

<p>Capturing on eth3</p>

<p>tshark: The capture session could not be initiated (socket: Operation not permitted)&hellip;</p>

<p>读取监测数据：</p>

<p>[root@goduserver tool]# tshark -r myoutput -x -V</p>

<p>将监测数据保存为文本：</p>

<p>[root@goduserver tool]# tshark -r myoutput -x -V > mytxt</p>

<p>或者将myoutput下载到PC上用Wireshark分析；</p>
]]></content>
  </entry>
  
</feed>
