<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-09-20T21:23:24+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate Random Date After a Specified Date]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/20/212102/"/>
    <updated>2015-09-20T21:21:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/20/212102</id>
    <content type="html"><![CDATA[<p>The following codes can display a random date within a month after the specified fair date.</p>

<pre><code>$ meteor create randomDate
$ cd randomDate
$ meteor add momentjs:moment
$ cat randomDate.html
&lt;head&gt;
  &lt;title&gt;Random Date&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  在 展会日期 输入框中输入日期，例如：2015-05-25，然后点击 评论 按钮。
  &lt;hr&gt;
  {{&gt; DatePanel}}
&lt;/body&gt;

&lt;template name="DatePanel"&gt;
  &lt;label&gt;展会日期：&lt;/label&gt;
  &lt;input type="text" id="fairDate"&gt;
  &lt;button&gt;评论&lt;/button&gt;
  &lt;p&gt;评论添加日期：{{commentDate}}&lt;/p&gt;
&lt;/template&gt;

$ cat randomDate.js
if (Meteor.isClient) {
  Template.DatePanel.helpers({
    commentDate: function () {
      return Session.get('commentDate');
    }
  });

  Template.DatePanel.events({
    'click button': function (e, t) {
      var dateStr = t.find("#fairDate").value;
      var fairDate = moment(dateStr);
      var randomDays = Math.floor((Math.random() * 30) + 1);
      var commentDate = fairDate.add(randomDays, 'days');
      var commStr = commentDate.format("YYYY-MM-DD");
      Session.set('commentDate', commStr);
    }
  });
}

$ meteor
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A JavaScript Closure Demo]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/16/101529/"/>
    <updated>2015-09-16T10:15:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/16/101529</id>
    <content type="html"><![CDATA[<p>下面的代码演示了JavaScript中的闭包：</p>

<pre><code>$ cat test.js
x = 100;
inc = function(){
  var x = 0;
  return function(){
    console.log(x++);
  };
};
inc1 = inc();
inc2 = inc();

$ node
&gt; require('./test.js')
{}
&gt; x
100
&gt; inc
[Function]
&gt; inc1
[Function]
&gt; inc2
[Function]
&gt; inc1()
0
undefined
&gt; inc1()
1
undefined
&gt; inc1()
2
undefined
&gt; inc2()
0
&gt; inc2()
1
undefined
&gt; inc2()
2
undefined
&gt; inc2()
3
undefined
&gt; inc2()
4
undefined
&gt; inc1()
3
undefined
&gt; inc()
[Function]
&gt; inc()()
0
undefined
&gt; inc()()
0
undefined
</code></pre>

<p>可以看到inc2()最后一次执行时内部x值为4，
inc1不受影响，执行时依然从上次的2开始增加变成3，
所以，不同的闭包（这里是inc1和inc2）保存了自己单独的内部变量x，
其中一个变化不会影响另一个的值。</p>

<p>由于每次执行inc()返回一个新的function，所以每次执行<code>inc()()</code>都打印0。</p>

<p>参考：</p>

<p><a href="http://www.zhihu.com/question/35060711/answer/62641357?group_id=627257263421976576#comment-94699289">javascript的闭包的概念和ruby的闭包的概念有何异同？</a>.</p>

<p>&ldquo;Load and execute external js file in node.js with access to local variables?&rdquo; on StackOverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDoc Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/15/122519/"/>
    <updated>2015-09-15T12:25:19+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/15/122519</id>
    <content type="html"><![CDATA[<p>JSDoc is a documentation generator similar to JavaDoc or PHPDoc.</p>

<h1>JSDoc</h1>

<p>Install <a href="https://github.com/jsdoc3/jsdoc">JSDoc</a> with <code>npm install -g jsdoc</code>.
Generate docs with <code>jsdoc **/*.js</code>.</p>

<h1>YUIDoc</h1>

<p><a href="http://yui.github.io/yuidoc/">YUIDoc</a> is suitable for generate documentation for <a href="http://yuilibrary.com/">YUI</a>,
a JavaScript library, and no longer actively maintained.</p>

<p>It can only list modules and classes on the homepage,
which is not very suitable for general purpose jsdoc.</p>

<p>Install it with <code>npm install -g yuidocjs</code>.
Run it with <code>yuidoc .</code>.
It creates a folder named &ldquo;out&rdquo; by default in the current directory.
Open the index.html in &ldquo;out&rdquo; folder to see the doc.</p>

<h1>Editor</h1>

<p>vim with <a href="https://github.com/scrooloose/nerdcommenter">scrooloose/nerdcommenter</a>.
Use <code>&lt;leader&gt;cs</code> to add block comment.
But note that the block generated by this plugin is started by <code>/*</code>, which is invalid for jsdoc and yuidoc.
You have to add an asterisk behind it as <code>/**</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Algorithm of Related Fairs]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/25/141712/"/>
    <updated>2015-02-25T14:17:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/25/141712</id>
    <content type="html"><![CDATA[<p>For a given fair A, it&rsquo;s <em>major category</em> are a set of its cat.major subdocuments.</p>

<p>For example, for the fair:</p>

<pre><code>{ cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] }
</code></pre>

<p>its major categories are set [&ldquo;abc, "xyz&rdquo;].
Here we say the major categories of fair X is <code>majorCat(X)</code>.</p>

<p>If the intersection of set <code>majorCat(X)</code> and <code>majorCat(Y)</code> are not empty,
we say fair X and Y are <em>related</em>.</p>

<p>So for a given fair X, how to find all its related fairs in a collection?</p>

<p>Here is the demonstration:</p>

<p>In mongodb, create a test collection with the following codes:</p>

<pre><code>db.cats.insert( { cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] } );
db.cats.insert( { cat: [ { major: "abcd", minor: [ 1,23,3] }, { major: "xyzu", minor: [ 87, 987, 343]} ] } );
db.cats.insert( { cat: [ { major: "bcd", minor: [ 1,23,3] }, { major: "abc", minor: [ 3, 23, 876]} ] } );
db.cats.insert( { cat: [ { major: "xyz", minor: [ 8,83,5] }, { major: "axc", minor: [ 34, 3, 76]} ] } );
</code></pre>

<p>Create a new Meteor app with <code>meteor create relatedFairs</code>, and its files:</p>

<p>relatedFairs.html</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;relatedFairs&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;Find related fairs&lt;/h1&gt;
  {{&gt; hello}}
&lt;/body&gt;

&lt;template name="hello"&gt;
  &lt;ul&gt;
    {{#each allFairs}}
      &lt;li&gt; 
        &lt;b&gt;{{_id._str}}:&lt;/b&gt;
        {{#each cat}}
          {{major}},
        {{/each}}
      &lt;/li&gt;
    {{/each}}
  &lt;/ul&gt;
  {{#with related}}
    &lt;p&gt;Related fairs of the first fair {{firstID}}&lt;/p&gt;
    &lt;ul&gt;
      {{#each relatedFairs}}
        &lt;li&gt;
          &lt;b&gt;{{_id._str}}:&lt;/b&gt;
          {{#each cat}}
            {{major}},
          {{/each}}
        &lt;/li&gt;
      {{/each}}
    &lt;/ul&gt;
  {{/with}}
&lt;/template&gt;
</code></pre>

<p>relatedFairs.js:</p>

<pre><code>Fairs = new Mongo.Collection("cats");

if (Meteor.isClient) {
  Template.hello.helpers({
    allFairs: function () {
      return Fairs.find();
    },
    related: function () {
      var theXrd = 0,
          theFair = Fairs.findOne( {}, {skip: theXrd } );
      if (! theFair) {
        return null;
      }
      var majors = _.map(theFair.cat, function(i) { return i.major; } );
      var rels = Fairs.find( { cat: { $elemMatch: { major: { $in: majors } } },
                               _id: { $ne: theFair._id } } );
      return {firstID: theFair._id._str, relatedFairs: rels };
    }
  });
}
</code></pre>

<p>Here we use <a href="http://underscorejs.org/">Underscore.js</a>,
so install this package with <code>meteor add underscore</code> to run our demo app
(with <code>MONGO_URL="mongodb://localhost:27017/test" meteor</code> in project root folder).</p>

<p>Modify the value of &ldquo;theXrd&rdquo; above, you can see the related fairs of each fair.</p>

<p>To make a demo in a production collection,
in fair &ldquo;A&rdquo; we find a major category called &ldquo;垃圾车与运输车"，
then choose a fair B, whose id is "54e71a5642fb549b1389ae6f&rdquo;.</p>

<p>Let&rsquo;s add the major cateory to fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a5642fb549b1389ae6f") }, { $push: {category: {major: "垃圾车与运输车"}} } );
</code></pre>

<p>Now fair A and B is related. Test them on your web site.
If the test is past, remove the test data from fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a6642fb549b1389ae6f") }, { $pop: { category: 1 } } );
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frequent Used Commands in Mongodb Shell]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/29/193156/"/>
    <updated>2014-12-29T19:31:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/29/193156</id>
    <content type="html"><![CDATA[<p>The foloowing codes demonstrate the creation &copy;, query &reg;, update (U) and delete (D) operations on mongodb collections.</p>

<p>It also shows how to rename collections and keys of documents.</p>

<pre><code>$ mongo
db.fairs.insert({'name': 'bikeShow', 'time': '2014.12.24', 'location': 'Beijing', 'products': ['bike', 'car', 'truck']})
db.fairs.insert({'name': 'clothShow', 'time': '2014.2.14', 'location': 'Shanghai', 'products': ['silk', 'wood', 'paper']})
db.fairs.insert({'name': 'MyFruits', 'time': '2011.4.18', 'location': 'Guangzhou', 'products': ['berry', 'apple', 'banana']})

db.newfairs.find({}, {name: 1})
db.newfairs.find({}, {'name.chn': 1})

db.fairs.renameCollection('newfairs')

db.newfairs.update({}, {$rename: {'time': 'date'} }, {multi: true} )
db.newfairs.update({}, {$rename: {'name': 'names'} }, {multi: true} )
db.newfairs.update({}, {$rename: {'names': 'name.chn'} }, {multi: true} )
db.newfairs.update({}, {$unset: {'date': ""}}, {multi: true})
db.newfairs.remove({})
db.newfairs.drop()
exit
</code></pre>

<p>You can&rsquo;t use <code>{$rename: {'name': 'name.chn'}}</code> directly for &ldquo;$rename must not be on the same path&rdquo;.</p>

<ul>
<li><p>Find docs whose &ldquo;website&rdquo; field is not null: <code>db.fairs.findOne({$where: "this.website.length &gt; 0" } )</code>;</p></li>
<li><p>Remove all docs whose &ldquo;position&rdquo; field is an empty string: <code>db.fairs.remove( { $where: "this.position.length == 0" } )</code>;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
