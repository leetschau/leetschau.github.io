<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualenvwrapper | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/virtualenvwrapper/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note About Virturalenvwrapper]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/09/183148/"/>
    <updated>2014-01-09T18:31:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/09/183148</id>
    <content type="html"><![CDATA[<h1>Installation</h1>

<pre><code>$ sudo pip install virtualenvwrapper
</code></pre>

<p>Add the following lines into ~/.zshenv:</p>

<pre><code>WORKON_HOME=~/docs/workspace/python-workspace/env-home
PROJECT_HOME=~/docs/workspace/python-workspace/project-home
</code></pre>

<p>and create the two folders specified above.</p>

<p>Add following lines into ~/.zshrc:</p>

<pre><code>source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<h1>Usage</h1>

<p>Create a new project funcPy using Python 3.x (run in any foler):</p>

<pre><code>mkproject -p /usr/bin/python3 funcPy
</code></pre>

<p>The CWD will be changed into the project root automatically.</p>

<p>Verify:</p>

<pre><code>$ python -V
Python 3.4.3
$ deactivate
$ python -V
Python 2.7.6
</code></pre>

<p>Coming into the project root and virtualenv later: <code>workon funcPy</code>.
Use <tab> key to autocomplete after <code>workon</code>.</p>

<p>If using the default Python version (in Ubuntu 14.04 it is 2.7)
for your virtual environment, create the project with <code>mkproject funcPy</code>.</p>

<p>To use this virtual environment in PyCharm, follow
<a href="http://bit.ly/23b30fY">Adding Existing Virtual Environment in PyCharm 2016.1 Help</a>
The python intepreter config is persisted in PyCharm project configuration,
so no need to use <code>workon</code> every time open the project in PyCharm.</p>

<h1>Discussion</h1>

<p>There are two concepts in virturalenvwrapper.
One is &ldquo;virtual environment&rdquo;, which has its own python executables.
The other is &ldquo;project&rdquo;, where your source codes resides.
They are n-to-n relationship.</p>

<p>Why not use one folder for both project and environment?</p>

<p>Unlike the &ldquo;node_modules&rdquo; folder in a node.js project,
Python project can&rsquo;t put packages directly into the source folder.
Use <code>pip install the-package &amp;&amp; pip freeze &gt; requirements.txt</code> to install
a package and save it into dependency document,
like <code>npm install the-package --save</code>.
Activate you virtual env and use <code>pip install -r requirements.txt</code>
to install all dependencies into the virtual environment.</p>

<p>&ldquo;mkvirtualenv env1&rdquo; will create a new &ldquo;virtual environment&rdquo; in $WORKON_HOME,
regardless your CWD.</p>

<p>&ldquo;mkproject proj1&rdquo; will create both a &ldquo;virtual environment&rdquo; named &ldquo;proj1&rdquo;
in $WORKON_HOME and a &ldquo;proj1&rdquo; folder in $PROJECT_HOME.
Then go to $PROJECT_HOME/proj1,
then activate the virtual environment proj1. So &ldquo;mkproject proj1&rdquo; equals to:</p>

<pre><code>$ mkvirtualenv proj1
$ mkdir $PROJECT_HOME/proj1
$ cd $PROJECT_HOME/proj1
$ workon proj1
</code></pre>

<p>Associate an existing virtualenv and an existing project with command</p>

<pre><code>$ setvirtualenvproject virtualenv_path project_path
</code></pre>

<p>Under the hood, virturalenvwrapper create a &ldquo;.project&rdquo; file under the root of
the virtualenv, in which is the project path.</p>

<p>List site packages:</p>

<pre><code>$ lssitepackages
</code></pre>

<p>Run a command in all virtualenvs under WORKON_HOME:</p>

<pre><code>$ allvirtualenv command with arguments
</code></pre>

<p>Change the current working directory to the site-packages of current virtualenv($VIRTUAL_ENV):</p>

<pre><code>$ cdsitepackages
</code></pre>

<p>Remove virtualenv:</p>

<pre><code>$ rmvirtualenv &lt;env_name&gt;
</code></pre>

<h1>Verification</h1>

<p>In a virtualenv, all python executables are in $WORKON_HOME.</p>

<pre><code>[lichao@lichao480:~] 
% workon 
env1 
env2 
proj1 
[lichao@lichao480:~] 
% which python 
/usr/bin/python 
[lichao@lichao480:~] 
% workon env1 
(env1)[lichao@lichao480:~] 
% which python 
/home/lichao/apps/virenv_home/env1/bin/python 
(env1)[lichao@lichao480:~] 
% workon env2 
(env2)[lichao@lichao480:~PROJECT_HOME/proj2] 
% which python 
/home/lichao/apps/virenv_home/env2/bin/python
</code></pre>
]]></content>
  </entry>
  
</feed>
