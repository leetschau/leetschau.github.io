<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unittest | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/unittest/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-15T10:58:04+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Nose as Unit Test Framework]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/13/101242/"/>
    <updated>2014-01-13T10:12:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/13/101242</id>
    <content type="html"><![CDATA[<p>[chad@chadpc527:~/docs/tmp/mytest]</p>

<p>% workon test</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% pip install nose
&hellip;</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% tree
.
|&ndash; mytest
| |&ndash; <strong>init</strong>.py
| |&ndash; mytest.py
| <code>-- test
|  |-- __init__.py
| </code>&ndash; test_mytest.py
`&ndash; setup.py
2 directories, 5 files</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% python setup.py nosetests
running nosetests
running egg_info
creating mytest.egg-info
writing mytest.egg-info/PKG-INFO
writing top-level names to mytest.egg-info/top_level.txt
writing dependency_links to mytest.egg-info/dependency_links.txt
writing manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
reading manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
writing manifest file &lsquo;mytest.egg-info/SOURCES.txt&rsquo;
running build_ext</p>

<h2>. </h2>

<p>Ran 1 test in 0.007s
OK</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat setup.py</p>

<h1>import multiprocessing</h1>

<p>from setuptools import setup
setup(name=&lsquo;mytest&rsquo;,
  version=&lsquo;0.1.0&rsquo;,
  tests_require=[&lsquo;nose&rsquo;])</p>

<p>(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat mytest/mytest.py
def myadd(x,y):
 return 10<em>x+y
(test)[chad@chadpc527:~/docs/tmp/mytest]
% cat mytest/test/test_mytest.py
from unittest import TestCase
from mytest.mytest import myadd
class TestMyadd(TestCase):
 def test_myadd(self):
  actual = myadd(3,5)
  self.assertTrue(actual==10</em>3+5)</p>

<p>Or, you can use &ldquo;python setup.py test&rdquo; in this way:</p>

<ol>
<li><p>Add &ldquo;import multiprocessing&rdquo; in setup.py;</p></li>
<li><p>Add &ldquo;test_suite=&lsquo;nose.collector&rsquo;&rdquo; as a parameter in setup() function in setup.py;</p></li>
</ol>


<p>If you run &ldquo;python setup.py test&rdquo; without &ldquo;import multiprocessing&rdquo;, you will get a &ldquo;Error in atexit._run_exitfuncs&rdquo; error with nose 1.3.0 and Python 2.7.3.</p>

<p>Ref: <a href="https://groups.google.com/forum/#!topic/nose-users/fnJ-kAUbYHQ">https://groups.google.com/forum/#!topic/nose-users/fnJ-kAUbYHQ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solution of Cobertura Exception `touchJump` When Unit Test]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/08/114315/"/>
    <updated>2013-08-08T11:43:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/08/114315</id>
    <content type="html"><![CDATA[<p>During unit test I encounter a &ldquo;java.lang.NoSuchMethodError: net.sourceforge.cobertura.coveragedata.ClassData.touchJump(IIZ)V&rdquo; exception.
I find there are 2 cobertura.jar in classpath. That jar in /usr/share/ant/lib is v1.9.2, while in ./lib/ is 1.8.1.</p>

<p>When I delete the jar in ./lib, there is a &ldquo;java.lang.NoClassDefFoundError: net/sourceforge/cobertura/coveragedata/HasBeenInstrumented&rdquo; exception.</p>

<p>Then I copy cobertura.jar from /usr/share/ant/lib to ./lib, everything goes fine.</p>

<h1>Solution of &ldquo;local class incompatible&rdquo;</h1>

<p>Problem: local class incompatible: stream classdesc serialVersionUID = 2, local class serialVersionUID = 2152686494816595840</p>

<p>Solution: use <code>unzip -q -c cobertura.jar META-INF/MANIFEST.MF</code>, I found the version of this jar is 1.8, while that in other projects is 1.9.1. So I copy the jar of version 1.9.1 to replace that of version 1.8, everything goes fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何进行Groovy的单元测试]]></title>
    <link href="http://leetschau.github.io/blog/2011/05/31/172555/"/>
    <updated>2011-05-31T17:25:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/05/31/172555</id>
    <content type="html"><![CDATA[<p>Groovy的单元测试可以通过两种方法进行，一是用JUnit框架，二是用Groovy自己的TestSuite测试。JUnit测试代码是Java代码，GroovyTestSuite的测试代码是groovy代码，且只能一次运行测试类中所有的TestCase，灵活性较JUnit方法稍差。下面是一个实例：</p>

<p>被测试类（Song.groovy文件内容）：
 package  org.leechau.ut;</p>

<p> class  Song {
    def  name
    def  artist
    def  genre
  String toString(){
     &ldquo;${ name }, ${  artist }, ${ genre  }&rdquo;
  }
    def  getGenre(){
     genre ?. toUpperCase ()
  }
 }</p>

<p> class  Song2 {
    def  name2
    def  ex(){
     println  name2
  }</p>

<h2> } </h2>

<p> JUnit测试文件（SongTest.java）：
  package  org.leechau.ut;</p>

<p> import  org.junit.Assert;
 import  org.junit.Test;</p>

<p> public  class  SongTest {</p>

<p>   @Test
    public  void  testToString() {
    Song sng =  new  Song();
    sng.setArtist(  &ldquo;Lee&rdquo; );
    Assert. assertEquals ( &ldquo;Lee&rdquo; , sng.getArtist());
  }
 }</p>

<hr />

<p> Groovy测试文件（TestSong2.groovy）：
  package  org.leechau.ut2;</p>

<p> import  groovy.util.GroovyTestCase</p>

<p> import  org.leechau.ut.Song
 import  org.leechau.ut.Song2</p>

<p> class  SongTest2  extends  GroovyTestCase{</p>

<pre><code>void  testGetGenre() { 
 def  sng =  new  Song() 
sng.setGenre  "Pop" 
 assertEquals (sng.getGenre(),  "POP" ) 
</code></pre>

<p>  }</p>

<pre><code>void  testSong2(){ 
 def  sng2 =  new  Song2() 
sng2.setName2  "Song2" 
 assertEquals (sng2.getName2(),  "Song2" ) 
</code></pre>

<p>  }
 }</p>

<hr />

<p> 且需要进行运行设置：
 1. 在Java Application中新建一个run configuration；</p>

<ol>
<li><p>Main标签下的Main Class写：groovy.util.GroovyTestSuite，且勾选“Include System Libraries when searching for a main class”；</p></li>
<li><p>Arguments标签下program arguments下写上测试脚本的相对路径，如：src\org\leechau\ut2\SongTest2.groovy；</p></li>
<li><p>运行该配置；</p></li>
</ol>


<p> 结果如下：</p>
]]></content>
  </entry>
  
</feed>
