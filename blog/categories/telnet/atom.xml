<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Telnet | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/telnet/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-03T10:36:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Telnet Client Using Expect]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/26/104022/"/>
    <updated>2013-08-26T10:40:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/26/104022</id>
    <content type="html"><![CDATA[<p>The following expect script achieves a simple telnet client: login -> send command -> exit. The point is the form of prompt in regular expression. You have to add 3 backslash before &ldquo;[&rdquo;, &ldquo;]&rdquo; and &ldquo;$&rdquo;, and add &ldquo;-re&rdquo; option after expect command in &ldquo;expect $prompt&rdquo;.</p>

<p> #!/usr/bin/expect
 set prompt &ldquo;\[hadoop@49server\s.*\]\\$\s&rdquo;
 spawn telnet 10.0.2.49
 expect &ldquo;login:&rdquo;
 send &ldquo;hadoop\r&rdquo;
 expect &ldquo;Password:&rdquo;
 send &ldquo;h\r&rdquo;
 expect -re $prompt
 send &ldquo;df -h\r&rdquo;
 expect -re $prompt
 send &ldquo;ls -l\r&rdquo;
 expect -re $prompt
 send &ldquo;exit\r&rdquo;
 expect eof</p>

<p>The following script achieves auto-login and auto-logout. Save it as autoTelnet.exp:</p>

<p> #!/usr/bin/expect
 set ip [lindex $argv 0]
 set username [lindex $argv 1]
 set password [lindex $argv 2]
 spawn telnet $ip
 expect &ldquo;login:&rdquo;
 send &ldquo;$username\r&rdquo;
 expect &ldquo;Password:&rdquo;
 send &ldquo;$password\r&rdquo;
 interact +++ return
 send &ldquo;exit\r&rdquo;
 expect eof</p>

<p>then run it:</p>

<p> $ ./autoTelnet.exp 10.0.2.49 hadoop h</p>

<p>After auto-login, you can send any commands as if you communicates with host directly. When you want to quit, type &ldquo;+++&rdquo; and then the script exits from interact mode and runs logout routine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用于在公网环境下测试的Telnet/SSH服务器]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/13/074059/"/>
    <updated>2013-03-13T07:40:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/13/074059</id>
    <content type="html"><![CDATA[<p>google: public telnet server list</p>

<p>for example:</p>

<p>telnet nethack.alt.org</p>

<p>ssh <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x6e;&#101;&#116;&#x68;&#x61;&#99;&#x6b;&#64;&#97;&#x6c;&#x74;&#x2e;&#x6f;&#x72;&#x67;">&#x6e;&#101;&#x74;&#x68;&#x61;&#x63;&#x6b;&#x40;&#97;&#x6c;&#116;&#x2e;&#111;&#x72;&#103;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Telnet & Ssh Client]]></title>
    <link href="http://leetschau.github.io/blog/2013/02/25/135621/"/>
    <updated>2013-02-25T13:56:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/02/25/135621</id>
    <content type="html"><![CDATA[<h1>Telnet</h1>

<ul>
<li><p><a href="http://erlang.2086793.n4.nabble.com/ct-telnet-example-td2309531.html">http://erlang.2086793.n4.nabble.com/ct-telnet-example-td2309531.html</a></p></li>
<li><p>ct_telnet</p></li>
</ul>


<p> <a href="http://www.erlang.org/doc/apps/common_test/basics_chapter.html">http://www.erlang.org/doc/apps/common_test/basics_chapter.html</a></p>

<p> <a href="http://www.erlang.org/doc/apps/common_test/write_test_chapter.html#intro">http://www.erlang.org/doc/apps/common_test/write_test_chapter.html#intro</a></p>

<p> <a href="http://www.erlang.org/doc/apps/common_test/config_file_chapter.html#id2270029">http://www.erlang.org/doc/apps/common_test/config_file_chapter.html#id2270029</a></p>

<p>getty.erl at <a href="http://ftp.sunet.se/pub/lang/erlang/examples/small_examples/index.html">Small example programs</a> in &ldquo;Open Source Erlang&rdquo;.</p>

<h1>SSH</h1>

<ul>
<li><p><a href="http://www.erlang.org/doc/apps/ssh/using_ssh.html">SSH User&rsquo;s Guide</a></p></li>
<li><p>ct_ssh</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About Putty & Kitty]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/24/164044/"/>
    <updated>2012-12-24T16:40:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/24/164044</id>
    <content type="html"><![CDATA[<p>Kitty是putty的portable版本，所有配置保存在文本文件中（putty保存在注册表中），新建kitty session比较好的方法是复制一份DefualtSettings文件，修改其中的字段，而不通过kitty自己的配置界面，这个界面用起来很不方便，下面是配置过程：</p>

<ol>
<li>定制默认配置：字体为11号Consolas，终端24行80列，</li>
</ol>


<p> Font\Consolas\</p>

<p> FontHeight\11\</p>

<p> TermHeight\24\
 TermWidth\80\</p>

<ol>
<li>复制文件DefaultSettings为747：ssh lichao@10.0.7.47，端口号22，连接后自动运行脚本d:\apps\Kitty\Scripts\cat47.txt（转义字符的写法是%+16进制的ASCII码，例如"\&ldquo;是%5C，&rdquo;:&ldquo;是%3A）</li>
</ol>


<p> HostName\10.0.7.47\</p>

<p> Protocol\ssh\</p>

<p> PortNumber\22\</p>

<p> UserName\lichao\
 Scriptfile\D%3A%5CApps%5CKitty%5CScripts%5Ccat47.txt\</p>

<ol>
<li><p>编写自动运行脚本（如果需要的话）：格式是一行预期一行发送（见笔记“ Notes about Kitty ”）；</p></li>
<li><p>保持密码（可选）：启动配置界面（kitty.exe），加载747，输入登录密码（密码是加密后存入配置文件的，无法直接在配置文件里写），保存747；</p></li>
</ol>


<h1>切换全屏模式</h1>

<p>Ctrl + right click，点击菜单切换全屏，当连接的"FullScreenOnAltEnter"设置为true时，也可以用Alt+Enter切换（在配置界面上的位置是Window->Behavior最后一项，或者session文件中" FullScreenOnAltEnter\1\ &ldquo;）；</p>

<h1>连接断开后自动关闭窗口</h1>

<p>session文件中"CloseOnExit\1\&ldquo;表示自动关闭，"CloseOnExit\0\"表示不自动关闭；</p>

<p>&ldquo;AltF4\1\"表示可以用Alt+F4关闭窗口，0表示此组合键无效；</p>

<h1>TCP连接</h1>

<p>putty.exe -raw <ip> -P <port></p>

<p>例如：putty -raw 10.31.1.23 -P 3128</p>

<h1>SSH自动登录</h1>

<p> putty.exe -ssh -pw mypassword <a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x75;&#115;&#x65;&#114;&#x6e;&#97;&#x6d;&#101;&#64;&#x31;&#48;&#x2e;&#48;&#x2e;&#50;&#46;&#54;&#56;">&#x75;&#x73;&#x65;&#114;&#110;&#97;&#x6d;&#101;&#64;&#49;&#x30;&#46;&#x30;&#46;&#50;&#46;&#54;&#x38;</a></p>

<p>参考<a href="http://superuser.com/questions/44106/is-there-a-way-to-auto-login-in-putty-with-a-password">http://superuser.com/questions/44106/is-there-a-way-to-auto-login-in-putty-with-a-password</a></p>

<h1>文件传输</h1>

<h2>一次性传输：pscp</h2>

<h3>上传文件</h3>

<ul>
<li>将f:\hw.txt上传到219的/home/chad目录下：</li>
</ul>


<p> pscp -pw mypwd f:*.txt chad@10.31.1.219:/home/chad/</p>

<h3>下载文件</h3>

<ul>
<li>将96上的/home/chad/hw.txt文件下载到f:\下：</li>
</ul>


<p> pscp -pw mypwd chad@10.31.1.96:home/chad/*.txt f:\</p>

<ul>
<li>将113上autoClient文件夹下所有文件拷贝到当前目录下：</li>
</ul>


<p> pscp -pw mypwd lichao@10.31.1.113:/home/lichao/autoClient/* ./autoClient/</p>

<p>注意本地的文件夹autoClient必须存在（pscp不能自己创建文件夹），且pscp不支持/<em>*/</em>这样的多级目录拷贝；autoClient后面的/必须加，否则会把autoClient当成拷贝文件的新名字；</p>

<p>这两种指令都可以在目标路径后面写上文件名，达到修改文件名的目的；</p>

<p>参考：putty文档 chapter 5.</p>

<h1>交互式传输：psftp</h1>

<ul>
<li><p>登录服务器：psftp -pw mypwd <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x75;&#115;&#101;&#x72;&#x6e;&#x61;&#x6d;&#101;&#64;&#x31;&#48;&#46;&#50;&#46;&#x33;&#46;&#x35;&#x36;">&#x75;&#115;&#x65;&#x72;&#110;&#97;&#x6d;&#101;&#x40;&#49;&#x30;&#46;&#50;&#x2e;&#51;&#46;&#53;&#x36;</a></p></li>
<li><p>查询服务器当前目录：pwd</p></li>
<li><p>改变服务器当前目录：cd &hellip;</p></li>
<li><p>查询和改变本地目录：lpwd, lcd</p></li>
<li><p>上传：put f:\hw.txt</p></li>
<li><p>下载：get hw.txt</p></li>
<li><p>运行本地命令：!+cmd_name，例如!dir显示本地文件，!type Readme.txt显示Readme.txt文件内容；</p></li>
<li><p>上传/下载多个文件：mput/mget;</p></li>
<li><p>psftp.exe的自动执行脚本：psftp <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#117;&#x73;&#x65;&#114;&#x40;&#49;&#x30;&#x2e;&#x30;&#46;&#x32;&#x2e;&#52;&#55;">&#117;&#115;&#x65;&#114;&#64;&#49;&#x30;&#46;&#x30;&#46;&#50;&#46;&#52;&#55;</a> -bc -b myscript，（相对于putty的-m参数）</p></li>
</ul>


<p>myscript文件内容是自动执行的指令，例如：</p>

<p> cd /home/ftp/users/jeff
 del jam-old.tar.gz
 ren jam.tar.gz jam-old.tar.gz
 put jam.tar.gz</p>

<p>详见putty文档6.2节；</p>

<h1>设置Putty默认属性</h1>

<p>在$PUTTY_HOME\sessions\下有一个%C4%AC%C8%CF%C9%E8%D6%C3文件，其中C4AC C8CF C9E8 D6C3是“默认设置”的Unicode编码，这个文件里保存的是默认设置，设置默认设置的好处是以后凡不指明都是用默认值（对于开关选项，0表示关闭，1表示开启）：</p>

<p> Font\Lucida%20Console\
 LineCodePage\UTF-8\
 ScrollbackLines\20000\ ; 缓冲区行数
 Protocol\ssh\ ; 默认连接协议，可以不用-ssh参数特别说明
 TerminalType\xterm\</p>

<p> FullScreenOnAltEnter\1\ ; 按Alt+Enter进入全屏模式
 CloseOnExit\0\ ; 退出网元后不关闭窗口（改为1是关闭窗口）
 MouseIsXterm\0\ ; unix-style Copy/Paste: 左键选择，右键粘贴</p>

<h1>使用方法</h1>

<p>对于常用连接，可以写成一个bat脚本，用Executor做快捷键启动；对于临时连接，可以手工敲开始处的ssh自动登录脚本连接。</p>

<h2>putty无法自动登录问题</h2>

<p>现象：telnet无法自动登录：putty -telnet user@10.0.2.34，然后手工输入密码。</p>

<p>解决方法：使用kitty_portable代替putty，它可以输入登录密码，然后把自动登录服务器保存为一个session，例如名为mysession，然后用"kitty -load mysession"启动之。</p>

<p>putty也有-load参数，但它的session信息是保存在注册表里，portable能力稍差。</p>

<p>参考：</p>

<ul>
<li><p><a href="http://dag.wieers.com/blog/content/improving-putty-settings-on-windows">Improving Putty settings on Windows</a></p></li>
<li><p><a href="http://heroxuan.iteye.com/blog/560682">精彩PuTTY 中文教程</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Windows上部署Telnet Server]]></title>
    <link href="http://leetschau.github.io/blog/2012/10/30/181506/"/>
    <updated>2012-10-30T18:15:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/10/30/181506</id>
    <content type="html"><![CDATA[<p>系统：Windows Server 2008</p>

<p>过程：参考<a href="http://www.windowsnetworking.com/articles_tutorials/configure-telnet-Server-Windows-Server-2008.html">How to configure a Telnet Server with Windows Server 2008</a></p>

<p>注意：Server Manager -> Configuration -> Local Users and Groups中添加Telnet Client用户；</p>
]]></content>
  </entry>
  
</feed>
