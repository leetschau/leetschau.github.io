<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fold | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/fold/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T15:40:38+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note About `Learn You Some Erlang for Great Good`]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/31/133829/"/>
    <updated>2013-05-31T13:38:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/31/133829</id>
    <content type="html"><![CDATA[<h1>Chapter 8</h1>

<p>In road.erl, to demonstrate the process of folding on path tuple, you can add the following sentence after the line <code>OptB2=...</code> in method &ldquo;shortest_step&rdquo;:</p>

<pre><code>io:format("OptA1=~p, OptA2=~p, OptB1=~p, OptB2=~p~n", [OptA1, OptA2, OptB1, OptB2]),
</code></pre>

<p>The last sentence of road.erl in main method could also be <code>erlang:halt().</code>, while in book it&rsquo;s <code>erlang:halt(0).</code>. Both work ok.</p>

<h1>chapter 13</h1>

<ul>
<li><p>In event.erl and evserv.erl, you can add the following line before every <code>Pid ! Message</code> to trace message flows between processes:</p>

<p>  io:format(&ldquo;~p send msg ~p to ~p~n&rdquo;, [self(), Message, Pid]),</p></li>
<li><p>In sup.erl, if you modify <code>{'EXIT', _From, shutdown} -&gt;</code> to <code>{'EXIT', _From, shutup} -&gt;</code> in loop/1, you will have to use &ldquo;exit(SupPid, shutup).&rdquo; instead of &ldquo;exit(SupPid, shutdown).&rdquo; to shutdown the sup process. See process_flag/2 and exit/2 for explanations;</p></li>
</ul>


<h1>Chapter 14</h1>

<ul>
<li><p>In kitty_server.erl, return_cat/2 put a cat in the shop (actually the list Cats, the parameter of loop/1). While order_cat/4 do 2 things: if shop is empty, create and return a new cat (then you can use return_cat to add this cat to shop), otherwise return the head of Cats. You can use folloing codes to verify(tom and bob are both set free):</p>

<p>  Pid = kitty_server:start_link().
  C1 = kitty_server:order_cat(Pid, tom, yellow, &ldquo;shinny&rdquo;).
  rr(kitty_server).
  C2 = #cat{name=bob}.
  kitty_server:return_cat(Pid, C1).
  kitty_server:return_cat(Pid, C2).
  kitty_server:close_shop(Pid).</p></li>
<li><p>monitor technique in above kitty_server.erl: When <code>Ref = erlang:monitor(process, Pid).</code>, the calling process is &ldquo;monitoring&rdquo; Pid, which means 2 things:</p>

<ol>
<li><p> when Pid is down, the calling process will receive a &lsquo;DOWN&rsquo; message;</p></li>
<li><p> if the monitored target is a naming process, adding the Ref in message can guarantee correctness after target restarted (see &ldquo;Naming Process&rdquo; of chapter 12 for details);</p></li>
</ol>
</li>
<li><p>You can use <code>i().</code> or <code>etop:start().</code> in erlang shell to list all processes; use <code>process_info(Pid)</code> to print detailed information about the Pid; use <code>regs().</code> to list all registered processes;</p></li>
</ul>


<h1>Chapter 15</h1>

<p>Use <code>trade_calls:main_ab().</code> to demonstrate the use of trade_fsm;</p>

<h1>Chapter 16</h1>

<p>&ldquo;curling_scoreboard&rdquo; is a callback module (a handler in gen_event context). The return value of its init/1 function is {ok, State} (see erlang doc: gen_event: Module:init/1). So curling_scoreboard store the PID of client in its internal State variable (from ToPid in curling:join_feed/2, which called by <code>curling:join_feed(Pid, self()).</code>). At <code>curling:add_points(Pid, "T1", 2).</code>, <strong>both</strong> registered handlers receive message {add_points, Team, N}). Handler curling_scoreboard prints two message to show points are added. While handler curling_feed send a message it received to client process (the Pid in its handle_event/2 function, see erlang doc gen_event:Module:handle_event/2 for API specification);</p>

<h1>Chapter 21</h1>

<p>On p341, when set target directory as &ldquo;~/docs/erlang/ppool-1.0&rdquo; there is a exception. But when set it as &ldquo;~/docs/erlang&rdquo; everything goes fine:</p>

<pre><code>$ ./erts-5.9.1/bin/erl -boot releases/1.0.0/start -erlcount directory '"/home/lichao/docs/erlang/"' -noshell
</code></pre>

<p>systools is simple than Reltool, which is much powerful than systools. Rebar can do release job, too. See <a href="http://www.metabrew.com/article/erlang-rebar-tutorial-generating-releases-upgrades">Erlang rebar tutorial: generating releases and upgrades</a> by Richard Jones;</p>

<h1>Chapter 22</h1>

<p>On p361, you have to modify the value of &ldquo;lib_dirs&rdquo; in file processquest-1.0.0.config at the root directory of processquest to the path where your &ldquo;apps&rdquo; directory resides, in my computer it&rsquo;s &ldquo;/home/lichao/docs/erlang/processquest/apps&rdquo; because I copy processquest to /home/lichao/docs/erlang. Then you can execute &ldquo;{ok, Conf} = &hellip; reltool:eval_target_spec&hellip;&rdquo;, and a bunch of files will be created under the &ldquo;rel&rdquo; directory under processquest.</p>
]]></content>
  </entry>
  
</feed>
