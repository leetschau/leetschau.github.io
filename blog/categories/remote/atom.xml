<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Remote | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/remote/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Website Remotely]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/05/095056/"/>
    <updated>2015-03-05T09:50:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/05/095056</id>
    <content type="html"><![CDATA[<h1>Prerequisite</h1>

<h2>Managing Node</h2>

<p>// Install Fabric with <code>sudo pip install fabric</code>.</p>

<p>Install ansible with <code>sudo pip install ansible</code>.</p>

<h2>Provision of remote host</h2>

<p>Create user with <code>sudo useradd -m chad</code>,
then add ssh-auto-login with <code>ssh-copy-id ...</code>.</p>

<p>// Install Node.js, MongoDB,</p>

<h1>Backup MongoDB</h1>

<h1>Import new data</h1>

<h1>Update website codes</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Remote Execution Tool Without Installation]]></title>
    <link href="http://leetschau.github.io/blog/2014/07/29/111148/"/>
    <updated>2014-07-29T11:11:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/07/29/111148</id>
    <content type="html"><![CDATA[<p>The following is a question I want to post to StackOverflow.com:</p>

<p>I am developing a environment detection tools, which gather information of many hosts and compare them with some standards.</p>

<p>However it&rsquo;s not allowed to install anything on these hosts. So my plan is running some shell scripts remotely on these hosts via ssh, such as &ldquo;free&rdquo;, &ldquo;df&rdquo;, &ldquo;java -version&rdquo;, etc.</p>

<p>There are many tools for deployment automation, such as Salt, Puppet, CFEngine, etc. But they all need to install something all the client. I found Fabric meet my needs, but the function is a little limited. So my question is:</p>

<p>Are there any remote execution tools without installation on client, like Fabric?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run GUI Application on Remote Host]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/25/114456/"/>
    <updated>2014-06-25T11:44:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/25/114456</id>
    <content type="html"><![CDATA[<p>Install: <code>apt-get install xpra</code>;</p>

<p>I want to run Thunderbird on host 10.32.1.81:</p>

<pre><code>ssh chad@10.32.1.81 xpra start :100 --start-child=thunderbird
xpra attach ssh:10.32.1.81:100
</code></pre>

<p>Now Thunderbird window appears. You can use &ldquo;Attach&rdquo; to add attachment from the disk of remote server, which means all GUIs from the &ldquo;root&rdquo; GUI can be accessed remotely.</p>

<p>When it&rsquo;s done, press &ldquo;Ctrl-c&rdquo; in the terminal window to close Thunderbird window. Do not click &ldquo;close&rdquo; button, it will kill the Thunderbird window in DISPLAY 100, and you can&rsquo;t visit it any more.</p>

<p>If you want visit this window later:</p>

<pre><code>ssh chad@10.32.1.81 xpra list    // so you get the $DISPLAY number 100
xpra attach ssh:10.32.1.81:100   // run this command in AppFinder (Alt-F2) instead of terminal
xpra detach ssh:81:100           // run this command in AppFinder (Alt-F2) instead of terminal
</code></pre>

<p>If you want clear all:</p>

<pre><code>ssh chad@10.32.1.81 xpra stop :100        // run this command on remote server
</code></pre>

<p>If you want to attach to a xpra server on localhost, run <code>xpra attach :100</code>;</p>

<h1>Use ssh alias</h1>

<p>Add 81 as alias of &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x63;&#x68;&#x61;&#100;&#64;&#49;&#x30;&#x2e;&#x33;&#x32;&#x2e;&#x31;&#x2e;&#x38;&#x31;">&#x63;&#x68;&#97;&#x64;&#x40;&#49;&#48;&#x2e;&#x33;&#x32;&#x2e;&#49;&#46;&#x38;&#49;</a>&rdquo; in ~/.ssh/config. Then you can use xpra in the following way:</p>

<pre><code>ssh 81 xpra start :111 --start-child=gedit
xpra attach ssh:81:111
ssh 81 xpra list
ssh 81 xpra stop :111
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Python Environment Detector]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/27/120107/"/>
    <updated>2014-03-27T12:01:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/27/120107</id>
    <content type="html"><![CDATA[<p>The user provide the method to get result(command on remote host), the check standard(a callback function), and information about target host(ip and username), and a timeout of execution time optional, with the envdet module, you can get the result: if the command output obey the check standard.</p>

<p>The application module, detapp.py:</p>

<pre><code>import logging
from envdet import rcmd

logger = logging.getLogger('DetectApp')
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('detect.log')
fh.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
fh.setFormatter(formatter)
logger.addHandler(ch)
logger.addHandler(fh)


def isOracleJDK(str):
    return 'Java(TM)' in str

res = rcmd('bvt', '10.0.2.47', 'java -version', isOracleJDK)
logger.info('Check result:%s' % res)
</code></pre>

<p>The environment detection module, envdet.py:</p>

<pre><code>from subprocess import Popen, PIPE, STDOUT
import signal
import logging

logger = logging.getLogger('DetectApp.envdet')

def handler(signum, frame):
    logger.error('Signal handler called with signal: %d' % signum)
    raise IOError("Command execution timeout!")

def rcmd(user, host, cmd, check_handler, timeout=10):
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(timeout)

    cmdstr = "ssh %s@%s 'source /etc/profile;%s'" % (user, host, cmd)

    p = Popen(cmdstr, close_fds=True, shell=True, stdout=PIPE, stderr=STDOUT)

    fullres = line = ''
    while p.poll() is None:
        out = p.stdout.read(1)
        fullres = fullres + out
        if out=='\n':
            logger.debug(line)
            line = ''
        else:
            line = line + out
    logger.debug('----ret of cmd %s is: %d----' % (cmd, p.returncode))
    return check_handler(fullres)
</code></pre>

<p>The technical points here are:</p>

<ul>
<li><p>Run shell command in Python and retrieve output and return code;</p></li>
<li><p>Use signal to limit the overall running time of commands on remote host over SSH;</p></li>
<li><p>The logging utility across multiple modules, notice the naming rules: <app-logger-name>.<imported-module-name>. So if you rename the module name, rename it&rsquo;s logger accordingly.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work on Remote Git Repository]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/19/101234/"/>
    <updated>2013-11-19T10:12:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/19/101234</id>
    <content type="html"><![CDATA[<h1>Create New Branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch    // list all existing branches
$ git checkout -b leetschau     // create new branch "leetschau" and checkout it
</code></pre>

<h1>Push to remote repository</h1>

<p><code>$ git push origin leetschau</code>, where &ldquo;origin&rdquo; is repository name, &ldquo;leetschau&rdquo; is branch name.</p>

<p>When you push your branch the first time, add &ldquo;-u&rdquo; to specify that the current branch is associated with the remote branch.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.">http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.</a></p>

<h1>Push all branches to remote repository</h1>

<p><code>$ git push origin --all</code>.</p>

<h1>Sync with remote repository</h1>

<p>If there&rsquo;s no local changes, the first command is unnecessary.</p>

<pre><code>git checkout -- .
git pull --all
</code></pre>

<h1>Discard local changes</h1>

<p>Discard all local changes and keep the same with last commit in repo.</p>

<pre><code>git reset --hard HEAD
</code></pre>

<p>We need discard all local changes and keep the same with remote repository. Provided that you want sync with &ldquo;master&rdquo; branch in remote repository &ldquo;origin&rdquo;:</p>

<pre><code>$ git fetch orgin
$ git reset --hard origin/master
</code></pre>

<p>Note that files not in stage area (not been &ldquo;add&rdquo;) will remains, while files in stage area or committed will be removed.
If your remote repo is developed with git flow, your synchronized repo also need install git flow.
On CentOS, install it with <code>yum install gitflow</code>. See installation doc on <a href="https://github.com/nvie/gitflow">gitflow</a> for details.</p>

<h1>Remove Existing Branch</h1>

<pre><code>$ git push origin :leetchao
</code></pre>

<h1>Create, query and remove remote repository alias</h1>

<pre><code>$ git remote add pyevernote-repo https://github.com/hackrole/pyevernote.git
$ git remote -v
$ git remote rm pyevernote-repo
</code></pre>

<h1>Checkout from a existing repository and branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch -r               // list all local and remote branches
  origin/leetschau
  ...
$ git checkout leetschau      // or "git checkout -b leetschau origin/leetschau" for old version git
</code></pre>

<p>For verification, you can find &lsquo;remote=origin &hellip; under [branch &ldquo;leetschau&rdquo;]&rsquo; in file .git/config.</p>

<h1>Update from remote repository</h1>

<pre><code>$ git fetch origin
$ git status
  Your branch is **behind** 'origin/develop' by 3 commits... (which means your local branch need to be updated with remote one)
$ git merge origin/develop
</code></pre>

<p>Or simply <code>git pull origin develop</code>, where develop is the branch name we want to sync.</p>

<p>Note: Be careful to use &ldquo;git pull&rdquo; for &ldquo;pull&rdquo; is too &ldquo;smart&rdquo;.
<a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/">git: fetch and merge, donât pull</a> gives the reason and provides an excellent explanation of what is &ldquo;branch&rdquo;.</p>

<h1>Move a git repository from Bitbucket to Github</h1>

<p>Based on <a href="http://www.blackdogfoundry.com/blog/moving-repository-from-bitbucket-to-github/">Moving Repository from Bitbucket to GitHub</a>.</p>

<pre><code>cd $DSNOTE_HOME
git remote rename origin bitbucket
// create a new repository "dsnote" on Github
git remote add origin https://github.com/leetschau/dsnote.git
git push -u origin master
git remote -v
git branch -r
</code></pre>

<h1>Other</h1>

<p>Always use <code>git status</code> to get current status, such as the difference between CWD and stage area, difference between stage area and local repository, and difference between local repository and remote repository.
Use <code>git log</code> to show commit history.</p>
]]></content>
  </entry>
  
</feed>
