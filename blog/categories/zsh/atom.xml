<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Zsh | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/zsh/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-08-27T13:25:34+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batch Rename in Zsh]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/24/111911/"/>
    <updated>2013-09-24T11:19:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/24/111911</id>
    <content type="html"><![CDATA[<p>There are many mp3 files with initial &ldquo;Various - &hellip;&rdquo;, like:</p>

<pre><code>Various - Beethoven:Symphony No.5-Allegro Con Brio.mp3
</code></pre>

<p>Now I want to remove the &ldquo;Various - &rdquo; in the file name, to &ldquo;Beethoven:Symphony No.5-Allegro Con Brio.mp3&rdquo;.</p>

<p>In zsh we have a tool called zmv can do this job. Firstly we have to use <code>autoload zmv</code> to activate it. Then use &ldquo;-n&rdquo; option to print the result without actually performing the rename operation. When it is ok, remove the -n option to rename all the files:</p>

<pre><code>zmv -n '(*).mp3' '${1//Various\ -\ /}.mp3'
zmv '(*).mp3' '${1//Various\ -\ /}.mp3'
</code></pre>

<p>Ref: <a href="http://www.drbunsen.org/batch-file-renaming/">http://www.drbunsen.org/batch-file-renaming/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Beautiful Oh-my-zsh Themes]]></title>
    <link href="http://leetschau.github.io/blog/2013/07/12/092133/"/>
    <updated>2013-07-12T09:21:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/07/12/092133</id>
    <content type="html"><![CDATA[<h1>What is a beautiful prompt</h1>

<ul>
<li><p>double line;</p></li>
<li><p>provide username, hostname, current directory;</p></li>
<li><p>provide information of git branch and commit status;</p></li>
<li><p>provide command exit code;</p></li>
<li><p>prompt is easy to distinguished from command results;</p></li>
<li><p>optional: provide command order number, current time;</p></li>
</ul>


<h1>Customize zsh prompt</h1>

<p>Some important escape sequences in zsh prompt:</p>

<ul>
<li><p>%n: username;</p></li>
<li><p>%m: hostname;</p></li>
<li><p>%~: current directory;</p></li>
<li><p>%t: current time;</p></li>
<li><p>%?: return code of last command;</p></li>
</ul>


<p>Customization of font and color see the following demonstration.</p>

<p>Ref:</p>

<ul>
<li><p>&ldquo;3.9 Customizing the prompt&rdquo; on <a href="https://wiki.archlinux.org/index.php/Zsh">zsh on archlinux</a></p></li>
<li><p><a href="http://www.acm.uiuc.edu/workshops/zsh/prompt/escapes.html">Using escape sequences in prompts</a></p></li>
</ul>


<h2>Put it together</h2>

<ol>
<li><p>Create a new file: ~/.oh-my-zsh/themes/lichao.zsh-theme:</p>

<p> rc=$reset_color
 cy=$fg_bold[cyan]
 bl=$fg_bold[blue]
 re=$fg_bold[red]
 wh=$fg_bold[white]
 ye=$fg_bold[yellow]
 gr=$fg_bold[green]
 ma=$fg_bold[magenta]</p>

<p> ZSH_THEME_GIT_PROMPT_PREFIX=&ldquo;git(&rdquo;
 ZSH_THEME_GIT_PROMPT_SUFFIX=&ldquo;):&rdquo;
 ZSH_THEME_GIT_PROMPT_CLEAN=&ldquo;✔&rdquo;
 ZSH_THEME_GIT_PROMPT_DIRTY=&ldquo;✗&rdquo;
 ZSH_THEME_GIT_PROMPT_ADDED=&ldquo;added&rdquo;
 ZSH_THEME_GIT_PROMPT_MODIFIED=&ldquo;modified&rdquo;
 ZSH_THEME_GIT_PROMPT_DELETED=&ldquo;deleted&rdquo;
 ZSH_THEME_GIT_PROMPT_RENAMED=&ldquo;renamed&rdquo;
 ZSH_THEME_GIT_PROMPT_UNMERGED=&ldquo;unmerged&rdquo;
 ZSH_THEME_GIT_PROMPT_UNTRACKED=&ldquo;untracked&rdquo;</p>

<p> PROMPT=&lsquo;$ye%n$rc @ $cy%m $gr%~ $re$(git_prompt_info)$(git_prompt_status)$rc $wh%t$rc
 [%?] &rsquo;</p></li>
<li><p>Modify &ldquo;ZSH_THEME&rdquo; in ~/.zshrc as:</p>

<p> ZSH_THEME=&ldquo;lichao&rdquo;</p></li>
</ol>


<p>Note: If you want add any color or highlight in the 2nd line of the prompt, remember escape the color directives with &ldquo;%{&rdquo; and &ldquo;%}&rdquo;. For example, if your prompt is like this:</p>

<pre><code>PROMPT='$ye%n$rc @ $cy%m $gr%~ $re$(git_prompt_info)$(git_prompt_status)$rc $wh%t$rc
${wh}[%?]${rc} '
</code></pre>

<p>you have to define variables like this:</p>

<pre><code>wh=%{$fg_bold[white]%}
rc=%{$reset_color%}
</code></pre>

<p>If you keep using variables without escape, when you use tab-completion, your command line will be messed up.</p>

<p>Ref:
<a href="http://stackoverflow.com/questions/13546672/custom-oh-my-zsh-theme-long-prompts-disappear-cut-off/14179542#14179542">http://stackoverflow.com/questions/13546672/custom-oh-my-zsh-theme-long-prompts-disappear-cut-off/14179542#14179542</a>
<a href="http://stackoverflow.com/questions/7957435/zsh-auto-complete-screws-up-command-name/10644062#10644062">http://stackoverflow.com/questions/7957435/zsh-auto-complete-screws-up-command-name/10644062#10644062</a></p>

<h1>Recommended Themes</h1>

<p>kphoen: double line, display user, host, CWD, command exit code when it&rsquo;s nonzero, git branch and status, no time, its title line is darker than &ldquo;ys&rdquo;, but the command and command output is the same;</p>

<p>ys: double line, display user, host, CWD, time, partial git information, no exit code;</p>

<p>bureau: double line, display user, host, CWD, time, complete git information, no exit code;</p>

<p>steeef: double line, display user, host, CWD, complete git information, no exit code;</p>

<p>rkj: double line, display user, host, CWD, time, command exit code, no git information;</p>

<p>duellj: double line, display user, host, CWD, command order number, time, no git information;</p>

<p>some other good themes includes: frisk, candy, blinks</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About Zsh]]></title>
    <link href="http://leetschau.github.io/blog/2013/07/06/103233/"/>
    <updated>2013-07-06T10:32:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/07/06/103233</id>
    <content type="html"><![CDATA[<h1>Setup</h1>

<ol>
<li><p>Install zsh: <code>apt-get install zsh</code>;</p></li>
<li><p>Install <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> with &ldquo;git clone &hellip;&rdquo;;</p></li>
</ol>


<p>now you can change color and prompt style by changing the value of &ldquo;ZSH_THEME&rdquo; in .zshrc;</p>

<ol>
<li><p>install autojump plugin with <code>apt-get install autojump</code> and add it to &ldquo;plugins&rdquo; variable in .zshrc to enable it (add it after &ldquo;git&rdquo;):</p>

<p> plugin=(git, autojump)</p></li>
<li><p>set zsh as default shell: <code>chsh -s /bin/zsh</code>;</p></li>
<li><p>In ~/.zshrc, add:</p>

<p> ZSH=$HOME/.oh-my-zsh</p>

<p> ZSH_THEME=rkj</p></li>
</ol>


<h1>Usage</h1>

<h2>path navigation</h2>

<p>The tab-completion function of bash can only auto-complete one path name at a time. While that of zsh auto complete multi-levels path at a time. So if you want go to ~/dir1/SubDir2/SubSubdir3/Target, instead of type &ldquo;cd blah blah blah&rdquo;, just type &ldquo;~/d/s/s/t<tab><cr>&rdquo; and you got there. Note that path recognition in zsh is <strong>not</strong> case sensitive, so no need to care about capital letters. This make path navigation really fast and meaningful.</p>

<p>You can ommit &ldquo;cd&rdquo; command before change current directory (make sure option AUTO_CD is turned on). So if you want go to parent folder, &ldquo;..&rdquo; is ok. If you want come back, &ldquo;-&rdquo;. If you want go to ./apps/eclipse-java-juno-SR2-linux-gtk/p2/org.eclipse.equinox.p2.core/cache/binary, just type: &ldquo;apps<tab>&rdquo; then a list will be displayed and you can use <tab> to select among them.</p>

<p>Use &ldquo;Alt+Backspace&rdquo; to delete a path name (not a character).</p>

<p>Use d to list all visited folders. Use 1~9 to navigate to folders in the recent visited list. Because 0 is always the current folder, you can just use &ldquo;1&rdquo; to switch between two folders.</p>

<p>With autojump, you can use &ldquo;j partial_folder_name&rdquo; to jump to a directory you have previously visited. For example: &ldquo;j gaia&rdquo; will jump to &ldquo;/home/bvt/.jenkins/jobs/GAIA&rdquo;, or &ldquo;j gaia/works&rdquo; to &ldquo;/home/bvt/.jenkins/jobs/GAIA/workspace&rdquo;. Use <code>jumpstat</code> to show all entries in autojump database with their weight. Use &ldquo;j&rdquo; to jump to the item with highest weight. So you can have a &ldquo;favorite list&rdquo; based on the weight.</p>

<h2>find files</h2>

<p>use &ldquo;ls <em><em>/</em>.zip&rdquo; instead of &ldquo;find . -name </em>.zip&rdquo;;</p>

<h2>edit files</h2>

<p>use &ldquo;vi <strong>/gaia/</strong>/build.xml&rdquo; instead of giving the actual path of the file;</p>

<h2>command history search</h2>

<p>use &ldquo;Ctrl + R&rdquo; to activate command search mode;</p>

<h2>other type-saving tricks</h2>

<p>&ldquo;less REMDME&rdquo; -> &ldquo;&lt;README&rdquo;</p>

<h2>open file in zsh</h2>

<p><code>alias -s pdf=exo-open</code> will use exo-open to open pdf files. Now you can use ./book.pdf to open it in Document Viewer as if it&rsquo;s a executable command.</p>

<p><code>alias -s pdf=evince</code> has the same effect with previous &ldquo;exo-open&rdquo; method on Ubuntu, except that pdf application (Document Viewer, or evince) runs in foreground, which means zsh hangs when evince runs. So &ldquo;exo-open&rdquo; is a better choice for it acts like double click file in GUI file manager (like Thunar).</p>

<p>If you only want this in a session, define it in command line. If you want system remember this, add it into .zshrc.</p>

<p>To open all file associations already defined in system, put the following lines in .zshrc:</p>

<pre><code>autoload -U zsh-mime-setup

zsh-mime-setup
</code></pre>

<p>Ref: <a href="http://www.bash2zsh.com/essays/essay1_file_manager.html">Replacing the File Manager in Zsh</a></p>

<p>Use <code>alias -s</code> to list all file extension associations defined.</p>

<p>Use <code>unalias -s pdf</code> to remove the association (or remove alias command from .zshrc).</p>

<h2>Cheatsheet</h2>

<ul>
<li><p>take: &ldquo;take myfolder&rdquo; equals to &ldquo;mkdir myfolder;cd myfolder&rdquo;;</p></li>
<li><p>x: extract some file, including zip, tar, gz, bz2, tgz, 7z, etc file;</p></li>
<li><p>zsh_stats: print top 20 frequently used commands under zsh;</p></li>
<li><p>upgrade_oh_my_zsh: upgrade Oh-my-zsh;</p></li>
<li><p>uninstall_oh_my_zsh: uninstall Oh-my-zsh;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
