<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conway's Game of Life | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/conways-game-of-life/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T15:40:38+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes About Conway's Game of Life in `Clojure Programming`]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/11/093307/"/>
    <updated>2013-10-11T09:33:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/11/093307</id>
    <content type="html"><![CDATA[<h1>indexed-step</h1>

<ul>
<li><p>(-> (iterate indexed-step glider) (nth 8) pprint) is equals to (pprint (nth (iterate indexed-step glider) 8));</p></li>
<li><p>(iterate f x) means &ldquo;Return a lazy sequence of x, (f x), (f (f x)) etc, f must be free of side-effects&rdquo;;</p></li>
</ul>


<p>So (indexed-step glider) returns the next state of the board &ldquo;glider&rdquo; based on its current state.</p>

<p>(nth (iterate indexed-step glider) 8) is the 8th step of the transformation. If you want to see the 4th step just modify 8 to 4 in above code snippet.</p>

<p>(->> (iterate indexed-step glider) (take 5) ppr/pprint), equals to (ppr/pprint (take 5 (iterate indexed-step glider))), displays every step of the transformation from origin state to the first translational position.</p>

<p>The result of above code can be verified visually at [<a href="http://www.bitstorm.org/gameoflife/">http://www.bitstorm.org/gameoflife/</a>] (use mouse button to add/remove seed in the panel).</p>

<h1>index-free-step</h1>

<ul>
<li>&ldquo;map&rdquo;, &ldquo;partition&rdquo; and &ldquo;concat&rdquo; create a lazy seq;</li>
</ul>


<p>Why add a (repeat nil) to board in &ldquo;index-free-step&rdquo;?</p>

<h1>step</h1>

<ul>
<li>&ldquo;frequencies&rdquo; receives a collection, returns a map, the key is the item of the collection, the value is the number of times this item appear. So:</li>
</ul>


<p> (frequencies [1 2 3 2 3 4]) => {1 1, 2 2, 3 2, 4 1}</p>

<ul>
<li><p>(mapcat f coll) &lt;=> (apply concat (map f coll));</p></li>
<li><p>&ldquo;for&rdquo; is the Cartesian product. So:</p></li>
</ul>


<p> (for [x [:a :b] y [1 2]] [x y]) => ([:a 1] [:a 2] [:b 1] [:b 2])</p>

<p> (for [[x y] {1 1, 2 2, 3 2, 4 1}] [x y]) => ([1 1] [2 2] [3 2] [4 1])</p>

<p>and &ldquo;(for [[x y] (frequencies [1 2 3 2 3 4]) :when (= y 2)] x)&rdquo; select items which appear 2 times in collection.</p>

<p>Translate example 3-7 to plain text is:</p>

<ol>
<li><p>The live cells are a subset of all neighbours of original live cells;</p></li>
<li><p>Every cell in the neighbour area are expressed as variable &ldquo;loc&rdquo;, while the number of its neighbour is expressed as &ldquo;n&rdquo;;</p></li>
<li><p>To a cell &ldquo;loc&rdquo;, if one of the following conditions are met, it is alive:</p></li>
<li><p>It has 3 neighbours, expressd as (= n 3);</p></li>
<li><p>It has 2 neighbours and it is alive, expressed as (and (= n 2) (cells loc))</p></li>
</ol>


<p>Example 3-7:</p>

<p> (defn step
  [cells]
  (set (for [[loc n] (frequencies (mapcat neighbours cells))
     :when (or (= n 3) (and (= n 2) (cells loc)))]
    loc)))</p>

<h1>stepper</h1>

<ul>
<li><p>To hex-step, the board and cells are all hexagonal, which means every cell has 6 neighbours;</p></li>
<li><p>To every cell (loc) in the neighbour area, if it is alive(tested with (cells loc) in the &ldquo;for&rdquo; function), it&rsquo;s liveness is determined with &ldquo;survive?&rdquo; function: (survive? n); otherwise it&rsquo;s determined with &ldquo;(birth? n)&rdquo;;</p></li>
<li><p>Test 4 step oscillator:</p></li>
</ul>


<p> (def init #{[0 0] [1 1] [1 3] [0 4]})
 (= (-> (iterate hex-step init) (nth 4)) init)</p>
]]></content>
  </entry>
  
</feed>
