<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Config | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/config/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-29T20:16:11+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Change SSH Port on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/12/093754/"/>
    <updated>2015-09-12T09:37:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/12/093754</id>
    <content type="html"><![CDATA[<p>Modify /etc/ssh/sshd_config:</p>

<ul>
<li><p>Port 22 -> 222</p></li>
<li><p>PermitRootLogin yes -> no</p></li>
<li><p>PasswordAuthentication yes -> no</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix NIC Name of Cloned CentOS VMs]]></title>
    <link href="http://leetschau.github.io/blog/2014/07/23/151635/"/>
    <updated>2014-07-23T15:16:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/07/23/151635</id>
    <content type="html"><![CDATA[<p>Sometimes the NIC name in output of <code>ip addr</code> or <code>ifconfig</code> is not the same with that defined in /etc/sysconfig/network-scripts/ifcfg-eth0, for example, in ifcfg-eth0, the first line is:</p>

<pre><code>DEVICE="eth0"
</code></pre>

<p>but the output of <code>ip addr</code> is:</p>

<pre><code>2: eth1: &lt;BROADCAST...
</code></pre>

<p>This is because the source of <code>ip addr</code> is /etc/udev/rules.d/70-persistent-net.rules. Edit this file to correct the NIC name.</p>

<p>The total step to fix network of a centos VM is:</p>

<ol>
<li><p>vi /etc/sysconfig/network   // fix hostname and gateway IP</p></li>
<li><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0 // fix NIC name, host IP and netmask</p></li>
<li><p>vi /etc/udev/rules.d/70-persistent-net.rules  // NIC name and hardware address should be the same with that in file ifcfg-eth0</p></li>
<li><p>reboot</p></li>
</ol>


<h1>Update 2014-9-19</h1>

<p>The MAC address is determined by <code>ifconfig -a</code>, so copy IP address after &ldquo;HWaddr&rdquo; in command output, and modify &ldquo;HWADDR&rdquo; in /etc/&hellip;/ifcfg-eth0, then <code>sudo service network restart</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands and Configurations]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/25/144450/"/>
    <updated>2013-11-25T14:44:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/25/144450</id>
    <content type="html"><![CDATA[<p>Some helpful resources:</p>

<p><a href="http://ndpsoftware.com/git-cheatsheet.html">Git Cheatsheet</a></p>

<p><a href="http://marklodato.github.io/visual-git-guide/index-en.html">A Visual Git Reference</a>;</p>

<p><a href="http://rogerdudler.github.io/git-guide/">git - the simple guide</a>;</p>

<p>Git has 3 places to store files: working dir, stage and history.
The last commit in history is called &ldquo;HEAD&rdquo;, all the older commits have their IDs.
In the following texts, &ldquo;a47c3&rdquo; and &ldquo;b325c&rdquo; are both sample revision IDs, which can be get with <code>git log --oneline</code>.</p>

<h1>Move Files</h1>

<ul>
<li><p>Working dir -> Stage: <code>git add -A</code> for all files, <code>git add -u</code> for update, <code>git add filename</code>;</p></li>
<li><p>Stage -> HEAD: <code>git commit filename</code>, <code>git commit</code> for all;</p></li>
<li><p>HEAD -> Stage: <code>git reset -- files</code>, <code>git reset</code> or <code>git reset -- .</code> for all;</p></li>
<li><p>Stage -> Working dir: <code>git checkout -- files</code>, <code>git checkout -- .</code> for all;</p></li>
<li><p>HEAD -> ( Stage &amp; Working dir ): <code>git checkout HEAD -- files</code>, <code>git checkout HEAD</code> do nothing;</p></li>
<li><p>Working dir -> ( Stage &amp; HEAD ): <code>git commit filename</code>, <code>git commit -a</code> for all;</p></li>
</ul>


<h1>Compare Files</h1>

<ul>
<li><p>Working dir <-> Stage: <code>git diff filename</code>, <code>git diff</code> for all;</p></li>
<li><p>Stage <-> HEAD: <code>git diff --cached filename</code>, <code>git diff --cached</code> for all;;</p></li>
<li><p>HEAD <-> Working dir: <code>git diff HEAD filename</code>, <code>git diff HEAD</code> for all;</p></li>
<li><p>Revision a47c3 <-> Working dir: <code>git diff a47c3 filename</code>, <code>git diff a47c3</code> for all;</p></li>
<li><p>Revision a47c3 <-> b325c: <code>git diff a47c3 b325c filename</code>, <code>git diff a47c3 b325c</code> for all;</p></li>
<li><p>Revision X and its previous revision: <code>git show a47c3</code>, if X is HEAD: <code>git show</code>;</p></li>
</ul>


<p>If comparing a specific file, always add &lsquo;&ndash; <filename>&rsquo; after the git command.
For example, <code>git show -- filename</code>, <code>git diff --cached -- filename</code>.</p>

<h1>Show file content</h1>

<ul>
<li>Show file content of a specific commit: <code>git show a47c3:filename</code>;</li>
</ul>


<h1>Logs and Tags</h1>

<ul>
<li><p>Print logs with tags and color highlights: <code>git log --decorate</code>;</p></li>
<li><p>Print logs with files changed: <code>git log --name-status</code>;</p></li>
<li><p>Print logs in one line for each: <code>git log --oneline</code>;</p></li>
<li><p>Print logs with all information: <code>git log --graph --decorate --name-status --all</code>;</p></li>
<li><p>Create a tag based on a commit: <code>git tag 1.0 a47c3</code>;</p></li>
<li><p>Create a tag on HEAD: <code>git tag 'Dell-E7450'</code>;</p></li>
<li><p>List all tags: <code>git tag</code>;</p></li>
<li><p>Show tag contents: <code>git show Dell-E7450</code>;</p></li>
</ul>


<h1>Useful Commands</h1>

<p><code>git log -p --all -S 'search string'</code>: search a string in git history, see note &ldquo;Search String Pattern in Git History&rdquo; for details;</p>

<p><code>git add &lt;files&gt;</code>: add files to stage area, use git rm &ndash;cached <file> to remove it from stage area (physical file remains);</p>

<p><code>git add -A</code>: If you use &ldquo;mv&rdquo; instead of &ldquo;git mv&rdquo; to rename a file, you can use this command to apply this rename operation to stage area;</p>

<p><code>git checkout &lt;commit&gt;</code>: make your working directory back to state <commit>;</p>

<pre><code>$ git checkout &lt;branch-name&gt;  // switch between branches
</code></pre>

<p><code>git checkout -- &lt;file-name&gt;</code>: use <file-name> in stage area replace its counterpart in working directory;</p>

<p><code>git checkout -- .</code>: abandon all modifications in working directory. Don&rsquo;t forget the last dot. It means &ldquo;all&rdquo;.</p>

<p><code>git clean -n</code>: &ldquo;dry run&rdquo; mode, preview the removed files;
<code>git clean -f</code>: remove all untracked files;
<code>git clean -f -d</code>: remove all untracked files and directories;</p>

<p><code>git commit</code>: commit all files in stage area;</p>

<p><code>git config</code>: see section &ldquo;git config&rdquo; below. list all configs: <code>git config --list</code>;</p>

<p><code>git diff</code>: compare file contents;</p>

<p><code>git init</code>: initialize local repository;</p>

<p><code>git log --stat</code>: list log with file changes;</p>

<p><code>git mv &lt;old-file-name&gt; &lt;new-file-name&gt;</code></p>

<p><code>git remote show origin</code>: git equivalent of &ldquo;svn info&rdquo;;</p>

<p><code>git reset --hard &lt;commit&gt;</code>: go back to <commit> completely, both working directory and repository, the history is lost;</p>

<p><code>git reset</code>: undo all &ldquo;git add&rdquo; commands, same with &ldquo;git reset HEAD&rdquo;;</p>

<p><code>git reset -- &lt;file-name&gt;</code>: only remove <file-name> from stage area;</p>

<p><code>git rm</code>:</p>

<p><code>git show &lt;object&gt;</code>: show information of <object>, like a commit, the following command show the information of commit 389be, like &ldquo;git log &hellip;&rdquo;:</p>

<pre><code>git show 389be --stat
</code></pre>

<p>or <strong>print file contents of a specified version</strong>, the following command show the file contents of the parent of HEAD:</p>

<pre><code>git show HEAD~1:donno/cloudsync.py
</code></pre>

<p>Note that the colon after version is necessary, or it will print the difference between HEAD~1 &amp; HEAD~2 when it&rsquo;s <code>git show HEAD~1 filename</code>;</p>

<p><code>git stash</code>: save current working directory and index and change them to the state of last commit;</p>

<p><code>git stash apply</code>: restore last &ldquo;stash save&rdquo;;</p>

<p><code>git stash drop</code>: delete last &ldquo;stash save</p>

<p><code>git stash pop</code>: git stash apply + git stash drop</p>

<p><code>git stash clear</code>: clear all stash saves;</p>

<p><code>git status</code></p>

<h2>Undo the last commit</h2>

<p>After a commit with <code>git commit -m "..."</code>, I found I forget to update version number which is defined in file build.gradle.
Now I need undo the last commit, modify version number in build.gradle, then commit again with the same commit comments.</p>

<pre><code>$ git reset --soft HEAD~1
// edit build.gradle
$ git add -u
$ git commit -c ORIG_HEAD
</code></pre>

<p>Ref: <a href="http://stackoverflow.com/questions/927358/undo-the-last-git-commit">Undo the last Git commit?</a></p>

<p>GUI tool: <code>gitk</code>, see all branches with <code>gitk --all</code>.</p>

<h1>Git config</h1>

<p>Add the following lines into user level config file ~/.gitconfig, or system level config file /etc/gitconfig:</p>

<pre><code>[user]
    name = leetschau
    email = leetschau@gmail.com
[alias]
    ci = commit -s
    co = checkout
    br = branch
    lg = log --stat --graph --decorate --all
</code></pre>

<p>Here in <code>git log</code>, &ndash;stat prints file changed info, &ndash;all print all branches instead of current branch,
&ndash;decorate print branch/tag info, &ndash;graph print hierarchical relation lines between commits.</p>

<p>Or change configs in command line:</p>

<pre><code>git config --global alias.ci "commit -s"
git config --global user.name "leetschau"
git config --global user.email "leetschau@gmail.com"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration of Org Mode Files in Emacs]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/22/204307/"/>
    <updated>2013-10-22T20:43:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/22/204307</id>
    <content type="html"><![CDATA[<ul>
<li>The configuration section is at the head of a org file(files with extension &ldquo;org&rdquo;):</li>
</ul>


<p> #+STARTUP: overview
 #+TAGS: { desktop(d) server } editor browser multimedia zip
 #+TAGS: { Windows Linux }
 #+TAGS: { bad ordinary good excellent }
 #+SEQ_TODO: TODO(t!) WAIT(w) | DONE(d@) CANCELED
 #+COLUMNS: %10ITEM %10PRIORITY %15TODO %65TAGS
 * Work
 <strong> Emacs
  editor for god
 </strong>* DONE org-mode
  organize your ideas
 <strong> vim
  editor of god
 </strong> EmEditor
 * Entertainment
 <strong> Mplayer
  All-done player
 * Network
 </strong> Firefox
 <strong> IE
 * Other
 </strong> todo WinRAR</p>

<p>or you can define global tags in ~/.emacs;</p>

<ul>
<li><p>Press &ldquo;C-c C-c&rdquo; to load local configuration when cursor is add configuration section;</p></li>
<li><p>Press &ldquo;C-c C-c&rdquo; to add tags for the task item under the cursor;</p></li>
<li><p>&ldquo;overview&rdquo; means only shows the first level title;</p></li>
<li><p>The blank between &ldquo;{&rdquo;, &ldquo;}&rdquo; and the tags is <strong>mandatory</strong>;</p></li>
<li><p>The shortcut definition in the parenthesis &ldquo;(d)&rdquo; is mandatory, or there will be no shortcuts list when you add tags for a item(press &ldquo;C-c C-c&rdquo;);</p></li>
<li><p>Tags in the curved brackets are mutually exclusive;</p></li>
<li><p>&ldquo;!&rdquo; means add starting time stamp;</p></li>
<li><p>&ldquo;@&rdquo; means add comments;</p></li>
<li><p>Items after &ldquo;|&rdquo; means completed, so a time stamp will be added to mark things done;</p></li>
</ul>


<p>Note:</p>

<ul>
<li>You have to modify default shortcuts of translating word in clipboard of GoldenDict to C-c C-0 to avoid conflict with Emacs org-mode;</li>
</ul>


<p>Ref: <a href="http://i.linuxtoy.org/docs/guide/ch32.html">第32章 组织你的意念</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mass Configuration Modification With Jenkins Slicing Plugin]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/05/180828/"/>
    <updated>2013-09-05T18:08:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/05/180828</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Configuration+Slicing+Plugin">Configuration Slicing Plugin</a></p>

<p>Today I used it adding &ldquo;Discard Old Builds&rdquo; for all jobs in my Jenkins server. Very convenient.</p>
]]></content>
  </entry>
  
</feed>
