<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Monitor | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/monitor/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-05-26T17:50:21+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Website Monitor for Meteor Application]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/28/152115/"/>
    <updated>2015-02-28T15:21:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/28/152115</id>
    <content type="html"><![CDATA[<h1>Google Analytics</h1>

<p>Add tracking code (<script>&hellip;</script>) into the &ldquo;<head>&hellip;</head>&rdquo; (commonly in head.html) of your meteor app.</p>

<p>You can find your tracking codes at Admin -> User Management -> Tracking Info -> Tracking Code.</p>

<p>Get real-time data (such as on-site user number) at Reporting -> Real-Time -> Overview.</p>

<h1>Kadira</h1>

<pre><code>meteor add meteorhacks:kadira
</code></pre>

<p>Add the following codes into server/kadira.js:</p>

<pre><code>Kadira.connect('&lt;App ID&gt;', '&lt;App Secret&gt;');
</code></pre>

<p>get your AppID and App secret at <a href="https://kadira.io/">Kadira</a> -> [Your App] -> Settings.</p>

<p>Then see read-time statistics on its dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络流量监控工具]]></title>
    <link href="http://leetschau.github.io/blog/2013/02/21/175453/"/>
    <updated>2013-02-21T17:54:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/02/21/175453</id>
    <content type="html"><![CDATA[<p>2014-7-14更新：</p>

<ul>
<li><p>nethogs: 按进程查看流量占用</p></li>
<li><p>iptraf: 按连接/端口查看流量</p></li>
<li><p>ifstat: 按设备查看流量</p></li>
<li><p>ethtool: 诊断工具</p></li>
<li><p>tcpdump: 抓包工具</p></li>
</ul>


<hr />

<p>2014-8-25更新：</p>

<p>iptraf-ng用于监测网络流量很好用，在ArchLinux和Mint中可以直接安装。
其中的"Ip traffic monitor"可以监测网卡的实时接收/发送 (RX/TX) 数据，可以显示对端IP地址和端口，本方接收IP地址和端口，但不能显示实时传输速率，
&ldquo;General interface statistics&rdquo; 可以显示所有网卡实时发送/接收数据的速率，但不能显示对端IP和端口，二者互为补充。
今天测试在同一网段中的两台机器之间用scp传送大文件，速率稳定在99MB/s，比较靠谱的一个结果，间接说明scp传大文件可以用来检测网络的最大传输速率。</p>

<p>Ref: <a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/">20 Command Line Tools to Monitor Linux Performance</a></p>

<hr />

<p>参考：<a href="http://www.dynacont.net/documentation/linux/network_monitoring/">Bandwidth Monitoring Tools For Linux</a></p>

<h1>实时流量监控：pv</h1>

<p>OS: Ubuntu Server 12.04.</p>

<h2>netcat &amp; pv</h2>

<p>apt-get install pv</p>

<p>监控端口5555上的实时网络流量：</p>

<pre><code>nc -l 5555 | pv &gt; /dev/null
</code></pre>

<p>向服务器113上发送数据：</p>

<pre><code>nc 10.31.1.113 5555
</code></pre>

<h1>ifstat</h1>

<p>Homepage: <a href="http://gael.roualland.free.fr/ifstat/">http://gael.roualland.free.fr/ifstat/</a></p>

<h2>使用</h2>

<pre><code>ifstat -i eth0 1 5 // 监测网口eth0的流量，每一秒测试一次，共测试5次
</code></pre>

<p>该工具不需要root权限</p>

<h2>安装</h2>

<p>Ubuntu可以用apt-get直接装，官网上的ifstat-1.1.tar.gz包是源码包，在RedHat上安装需要编译，过程很简单，根据INSTALL文档的说明：</p>

<pre><code>./configure
make
make install
</code></pre>

<h2>atsar</h2>

<p>atsar（Unix的sar指令的Linux移植版，可以用apt-get安装）也有几个选项是用来监控网络情况的，例如每隔2秒显示一次系统当前TCP流量：</p>

<pre><code>atsar -t 2 5
</code></pre>

<h2>iftop</h2>

<p>Ubuntu: apt-get install iftop.</p>

<p>监控与47的交互：</p>

<pre><code>iftop -n -i eth0 -f "host 10.0.2.47" // 监测47与113的双向传输数据
iftop -n -i eth0 -f "src 10.0.2.47" // 只监测47流向113的数据
</code></pre>

<p>目前看来iftop显示的信息最全，但需要好好看手册，每个值都是什么意思；使用它需要root权限；</p>

<p>参考：<a href="https://sickbits.net/iftop-finding-traffic-hogs/">https://sickbits.net/iftop-finding-traffic-hogs/</a></p>

<h2>trafshow</h2>

<p>Ubuntu: apt-get install trafshow</p>

<p>监控与47的交互：<code>trafshow -n -i eth0 host 10.0.2.47</code>;</p>

<h1>网络带宽测试：iperf</h1>

<p>又叫bandwidth或者throughput测试，用来测试Server和Client间的最大传输速率。</p>

<p>iperf是命令行工具，还有一个基于Java的图形界面<a href="https://code.google.com/p/xjperf/">jperf</a>可运行在Windows和linux上；</p>

<p>安装：Ubuntu用apt-get install iperf安装，Redhat需要在"<a href="http://pkgs.repoforge.org/iperf/">http://pkgs.repoforge.org/iperf/</a>&ldquo;上根据操作系统的版本和架构选择一个rpm下载（47服务器系统为Redhat 5.4, x86_64，下载的是iperf-2.0.4-1.el5.rf.x86_64.rpm），然后用rpm -ivh <file_name>安装；</p>

<h2>用法</h2>

<ol>
<li><p>启动服务端：iperf -s；</p></li>
<li><p>启动客户端：iperf -c 10.0.2.47 -i 1 -f M（-c后面跟服务器IP地址，-i表示发送的时间间隔，-f M表示返回结果以MByte为单位）；</p></li>
</ol>


<p>或者启动图像客户端jperf，点击"Run IPerf"按钮就可以测网络带宽了。给出的结果是笔记本电脑与113服务器之间单向单流（1 stream）带宽为1.8MB/s左右；</p>

<p>iperf作为客户端还有两个比较有用的选项分别是-d和-d -r，前者表示测试同时双向传输的速率，后者表示先进行client to server的单向传输测试，完毕后互换角色，反过来进行server to client的单向传输测试，过程如下：</p>

<p>server: iperf -s</p>

<p>client: iperf -c 10.0.2.47 -i 1 -f M -d（或者iperf -c 10.0.2.47 -i 1 -f M -d -r）</p>

<p>参考：</p>

<p><a href="http://www.smallnetbuilder.com/lanwan/lanwan-howto/30408-measuring-network-performance-jperf">http://www.smallnetbuilder.com/lanwan/lanwan-howto/30408-measuring-network-performance-jperf</a></p>

<p><a href="http://openmaniak.com/iperf.php">http://openmaniak.com/iperf.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Wireshark分析Telnet交互过程]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/15/093417/"/>
    <updated>2012-03-15T09:34:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/15/093417</id>
    <content type="html"><![CDATA[<p>Windows系统下
用XShell作为Telnet客户端连接47服务器，整个过程可以用Wireshark（验证版本：1.6.5）完整地记录下来。</p>

<p>Wireshark->Capture->Interface中设置要监视的网卡；</p>

<p>Wireshark->Capture->Options->Capture Filter后写要监控的目标主机IP地址，这里写： host 10.0.2.47 ；</p>

<p>Wireshark->Capture->Start；</p>

<p>启动XShell连接47：Xshell:> telnet 10.0.2.47 ；</p>

<p>Wireshark将显示整个交互过程（见下图），可以看到主界面分为3部分，上面按时间顺序列出了每次交互的数据包（packet）；中间是这个数据包的详细内容，第一层Frame 14（xx层？）是xxx，第二层Ethernet II（链路层）主要由源和目标主机的网卡（Mac）地址组成，用ifconfig -a(Linux)或者ipconfig /all(windows)可以验证，第3层（网络层）是IP协议报头，主要包括源和目标的IP地址等，第4层（传输层）是TCP协议报头，主要包括源和目标的端口号、包序列号等，第5层（应用层）是Telnet数据；主界面的下部是此数据包的具体内容，以16进制显示。</p>

<p>连接后首先进行选项协商，然后传输数据，下面以“是否回显”为例详细说明协商过程，图中10.0.2.47是Telnet Server，10.32.1.56是Client。</p>

<p>第14步S要求C回显：ff fd 01，即IAC DO ECHO（见上图）；</p>

<p>第17步C回答S客户端不回显：ff fc 01，即IAC WONT ECHO；</p>

<p>第19步S通知C服务端将回显：ff fb 01，即IAC WILL ECHO；</p>

<p>第20步C同意服务端回显：ff fd 01，即IAC DO ECHO；</p>

<p>选项协商中各种搭配的具体含义参见“ The Telnet Protocol ”；</p>

<p>更改XSehll窗口尺寸引起的window size negotiation：</p>

<p>ff fa 1f 00 62 00 1b ff f0，即IAC SB 31(Options: Window Size) 98 27 IAC SE</p>

<p>转换为Telnet语句：</p>

<p>Suboption Begin: Negotiate About window size</p>

<p>Width: 98 Height: 27</p>

<p>Command: Suboption End</p>

<p>命令行用法</p>

<p>C:\Program Files\Wireshark>tshark -D
1. \Device\NPF<em>{4DF0B9FD-57A8-43FC-9EC9-354B454E475D} (VMware Virtual Ethernet Adapter)
2. \Device\NPF</em>{CA8CAD23-7ADD-4F2B-8A77-1E9E6810FE38} (Broadcom NetLink &trade; Gigabit Ethernet Driver)
3. \Device\NPF_{53720D33-0B96-48DB-A977-07A0EC43F65B} (VMware Virtual Ethernet Adapter)</p>

<p>tshark -f &ldquo;host 10.0.2.47&rdquo; -i 2 -c 20 -w myfile</p>

<p>用wireshark打开myfile</p>

<p>用tshark -F可以看到snoop好像是可以在solaris上打开的输入监控文件格式
 Linux下
47上目前的操作系统是Red Hat Enterprise Linux Server release 5.4，安装tshark需要 libsmi-0.4.5-2.el5.x86_64.rpm 和 wireshark-1.0.15-1.el5_6.4.x86_64.rpm 两个包，安装过程很简单，首先将这个包上传到47上，然后执行：</p>

<p> rpm -ivh libsmi-0.4.5-2.el5.x86_64.rpm</p>

<p> rpm -ivh wireshark-1.0.15-1.el5_6.4.x86_64.rpm</p>

<p> verify:</p>

<p> [root@goduserver tool]# whereis tshark
tshark: /usr/sbin/tshark /usr/share/man/man1/tshark.1.gz</p>

<p> rpm包下载站点： pkgs.org ，备用站点： <a href="http://rpm.pbone.net/">http://rpm.pbone.net/</a></p>

<p>获取网卡列表：</p>

<p>[root@goduserver tool]# tshark -D
1. eth3
2. &hellip;</p>

<p> 获取监测数据：</p>

<p>[root@goduserver help]# tshark -i eth3 -w myoutput host 10.32.1.59</p>

<p>普通用户权限不够无法进行监测：</p>

<p>[godu@goduserver ~]$ tshark -i eth3 host 10.32.1.59</p>

<p>Capturing on eth3</p>

<p>tshark: The capture session could not be initiated (socket: Operation not permitted)&hellip;</p>

<p>读取监测数据：</p>

<p>[root@goduserver tool]# tshark -r myoutput -x -V</p>

<p>将监测数据保存为文本：</p>

<p>[root@goduserver tool]# tshark -r myoutput -x -V > mytxt</p>

<p>或者将myoutput下载到PC上用Wireshark分析；</p>
]]></content>
  </entry>
  
</feed>
