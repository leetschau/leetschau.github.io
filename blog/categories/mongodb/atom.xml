<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
<<<<<<< HEAD
  <updated>2015-06-01T12:52:39+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
=======
  <updated>2015-05-26T17:47:26+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Store Small Images in MongoDB via Base64]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/27/180718/"/>
    <updated>2015-05-27T18:07:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/27/180718</id>
    <content type="html"><![CDATA[<p>The following codes save a image file first.
Then encoding it into Base64 string, and decoding it back into binary data (image).
Both images are the same. So the encoding/decoding works.</p>

<pre><code class="JavaScript">var fs = require("fs");
var image_origial = "logo.png";
fs.readFile(image_origial, 'binary', function(err, original_data){
    fs.writeFile('image_orig.png', original_data, 'binary', function(err) {});
    var base64Image = new Buffer(original_data, 'binary').toString('base64');
    console.log("base64 str:");
    console.log(base64Image);
    console.log(base64Image.length);

    var decodedImage = new Buffer(base64Image, 'base64').toString('binary');
    console.log("decodedImage:");
    console.log(decodedImage);
    fs.writeFile('image_decoded.png', decodedImage, 'binary', function(err) {});
});
</code></pre>

<p>Display Base64 string in html:</p>

<pre><code>&lt;template name="myform"&gt;
  &lt;img id="fromBase64" src="data:image/png;base64,{{getPic}}"&gt;
&lt;/template&gt;
</code></pre>

<p>Corresponding JavaScript code:</p>

<pre><code>Template.myform.helpers({
  getPic: function() {
    return "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";
  }
});
</code></pre>

<p>Ref:</p>

<p><a href="http://en.wikipedia.org/wiki/Base64">Base64 on Wikipedia</a>;</p>

<p><a href="http://base64online.org/">http://base64online.org/</a></p>

<p><a href="https://gist.github.com/gabomdq/5415569">https://gist.github.com/gabomdq/5415569</a></p>
]]></content>
  </entry>
  
  <entry>
=======
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
    <title type="html"><![CDATA[Run MongoDB Server on Docker in VPS]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/15/142023/"/>
    <updated>2015-05-15T14:20:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/15/142023</id>
    <content type="html"><![CDATA[<pre><code>sudo usermod -aG docker your-user
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Mongo Scripts in Shell]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/08/155132/"/>
    <updated>2015-05-08T15:51:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/08/155132</id>
    <content type="html"><![CDATA[<p>You can query a remote mongoDB with a mongo script, print output to stdout.
Then manipulate the output data with other shell utilities.</p>

<p>For example, the following scripts get all fair names from a remote server,
compare them with a local fair name set,
to find out which are conflicted with the existing fair names in the local name.</p>

<p>Some key points:</p>

<ol>
<li><p>&ldquo;db&rdquo; is a built-in global variable refers to the connected database,
specified by the -h, -d options in mongo command line.
It can be override by &ldquo;connect&rdquo; function.
For example, with or without the first line, the script produce the same result
when running <code>mongo test.js</code>:</p>

<pre><code> $ cat test.js
 // db = connect("localhost/test")
 print(db.getCollectionNames())
 db.myCollection.find().forEach(function(item) {
   print(item.name)
 })
</code></pre></li>
<li><p>Use &ldquo;print&rdquo; function to print result to stdout.</p></li>
<li><p>To get command line arguments in mongo script, you must compose the evaluation string before(outside) <code>mongo</code> command,
and you must add double quotes surrounding $exp.</p>

<pre><code> #!/bin/bash

 TargetDB=$1
 TargetCol=$2
 TargetField=$3

 exp="db.${TargetCol}.find().forEach( function(item) \
   { print(item.$TargetField); });"

 mongo localhost/$TargetDB --eval "$exp"
</code></pre></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>

<p><a href="http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script">http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script</a></p>

<p><a href="http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file">http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find Verified User in MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/07/151147/"/>
    <updated>2015-05-07T15:11:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/07/151147</id>
    <content type="html"><![CDATA[<p>Find a user whose email is verified.
The &ldquo;emails&rdquo; field is an array.
The function of &ldquo;$elemMatch&rdquo; operator is:</p>

<p>Find a element in an array (here is emails),
whose feature obey the value after &ldquo;$elemMatch&rdquo; (here its &ldquo;verified&rdquo; key is &ldquo;true&rdquo;).</p>

<p>The code:</p>

<pre><code>&gt; db.users.findOne({'emails': {$elemMatch: {verified: true}}})
{
  "_id" : "rKawn5jCiuGcsPHdP",
  "createdAt" : ISODate("2015-05-07T01:04:23.375Z"),
  "services" : {
    "password" : {
      "bcrypt" : "$2a$10$T07N74DUrVrRtVGPT9dzleZlpRTlULfb9OrlWveW4NbcNpi.HkiAK"
    },
    "resume" : {
      "loginTokens" : [
        {
          "when" : ISODate("2015-05-07T01:04:23.902Z"),
          "hashedToken" : "Xbt2ASQF61artSmrYX1Gn6DLUNvbIrz9DW0sE4tbJh4="
        }
      ]
    },
    "email" : {
      "verificationTokens" : [ ]
    }
  },
  "emails" : [
    {
      "address" : "leechau@126.com",
      "verified" : true
    }
  ]
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Data in MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/180118/"/>
    <updated>2015-03-06T18:01:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/180118</id>
    <content type="html"><![CDATA[<p>Say you want to update data in updated.csv into &ldquo;fairs&rdquo; collection of &ldquo;meteor&rdquo; database in MongoDB.</p>

<ol>
<li><p>Convert data to be updated in csv file to json file: <code>csvjson updated.csv rawdata.json</code>;</p></li>
<li><p>Load this file in a js script &ldquo;my-script&rdquo; with <code>var data = require('./rawdata.json');</code>;</p></li>
<li><p>Check and convert data content in my-script, and write the reulst into another json file &ldquo;result.json&rdquo;:</p>

<pre><code> var fs = require('fs');
 fs.writeFile('result.json', JSON.stringify(result));
</code></pre></li>
<li><p>Run my-script with <code>node my-script</code>;</p></li>
<li><p>Import result.json into a new collection &ldquo;tmp&rdquo; of MongoDB database with
<code>mongoimport -d $TargetDB -c $TargetCol --type json --file result.json --jsonArray</code>;</p></li>
<li><p>Update collection fairs while traversing collection tmp;</p>

<pre><code> db = connect("localhost:27017/meteor");
 cursor = db.tmp.find();
 while ( cursor.hasNext() ) {
   db.fairs.save(cursor.next());
 }
</code></pre></li>
<li><p>Save above script into update.js;</p></li>
<li><p>Update data with <code>mongo update.js</code>;</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>
]]></content>
  </entry>
  
<<<<<<< HEAD
=======
  <entry>
    <title type="html"><![CDATA[Setup MongoDB Server on Aliyun]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/090609/"/>
    <updated>2015-03-06T09:06:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/090609</id>
    <content type="html"><![CDATA[<p>For version 3.0.</p>

<h1>Install</h1>

<p>On VPS (ip: 123.56.18.18), download MongoDB binary package for Ubuntu 14.04 and extract:</p>

<pre><code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.0.3.tgz
cd /opt
tar zxf ~/mongodb-linux-x86_64-ubuntu1404-3.0.3.tgz
mkdir -p /data/db
</code></pre>

<h1>Authentication Management</h1>

<p>Start mongod without auth on VPS (ip: 123.56.18.18): <code>mongod</code>;</p>

<p>Connect to server with <code>mongo 123.56.18.18</code>;
Create system user administrator:</p>

<pre><code>use admin
db.createUser(
    {
      user: "superuser",
      pwd: "12345678",
      roles: [ "root" ]
    }
)
</code></pre>

<p>Create user in current database:</p>

<pre><code>use products
db.createUser({user: "niufair", pwd: "nfsecret", roles: ["readWrite"]})
show users
</code></pre>

<p>Create a production config file mongo.conf:</p>

<pre><code>net:
  #bindIp: 10.251.212.248
  port: 15515
systemLog:
  destination: file
  path: "mongo.log"
  logAppend: true
security:
  authorization: enabled
</code></pre>

<p>Stop and restart mongod with <code>nohup mongod --config mongo.conf &amp;</code>;</p>

<p>Connect to server as a database user: <code>mongo 123.56.18.18:15515/products -u niufair -p nfsecret</code>.
You can <code>show collections</code>, <code>db.doc.insert()</code>, etc.</p>

<p>Start Meteor app with <code>MONGO_URL="mongodb://niufair:nfsecret@123.56.18.18:15515/products" meteor</code>.</p>

<p>Connect to server as administrator: <code>mongo 123.56.18.18:15515/admin -u leo -p leoisadmin</code>.</p>

<p>Use <code>db.removeUser("username")</code> to remove user.</p>

<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/enable-authentication-without-bypass/">Enable Authentication after Creating the User Administrator</a></p>

<p><a href="http://docs.mongodb.org/manual/tutorial/add-user-to-database/">Add a User to a Database</a></p>

<p><a href="http://docs.mongodb.org/manual/tutorial/add-admin-user/">Create an Administrative User with Unrestricted Access</a></p>

<p><a href="http://docs.mongodb.org/manual/tutorial/enable-authentication/">Enable Client Access Control</a></p>

<p><a href="http://docs.mongodb.org/manual/reference/built-in-roles/">Built-In Roles</a></p>

<p><a href="http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb">http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb</a></p>

<h1>MMS</h1>

<p>Connect mongodb server without authentication: <code>mongo &lt;ip&gt;:&lt;port&gt;</code>;</p>
]]></content>
  </entry>
  
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
</feed>
