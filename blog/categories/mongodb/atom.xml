<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-11T14:12:54+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Share One Users Collection Between Multiple Meteor Apps]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/11/123934/"/>
    <updated>2015-08-11T12:39:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/11/123934</id>
    <content type="html"><![CDATA[<p>We are running a website and a backend data management system,
both are meteor web servers.</p>

<p>The backend needs fetch data from the website.
So they have to share one database, and the same &ldquo;users&rdquo; collection for both.
That means one can register on the website and login to the backend,
which is obviously unacceptable.</p>

<p>To distinguish users of the website and the backend,
I choose package <a href="https://github.com/alanning/meteor-roles">alanning/meteor-roles</a>.</p>

<p>All the backend users will have roles <code>['backend', 'admin']</code>,
while website users haven&rsquo;t.</p>

<p>In &ldquo;safe&rdquo; environment, backend has its own user registration entry.
Users registered there will be given above roles automatically.</p>

<p>Put the following codes into server side JavaScript files to achieve above goal
(based on examples/rolesWithAccountsUI on meteor-roles):</p>

<pre><code>var ROLE_NAME = 'editor';
var GROUP_NAME = 'backend';

Meteor.publish('mallData', function(){
  if (Roles.userIsInRole(this.userId, ROLE_NAME, GROUP_NAME)) {
    console.log('pass check');
    return Mall.find();
  } else {
    console.log('not pass check');
    this.stop();
    return;
  }
});

Meteor.startup(function () {
  Accounts.onCreateUser(function (options, user) {
    Roles.setRolesOnUserObj(user, ROLE_NAME, GROUP_NAME);
    if (options.profile) {
      user.profile = options.profile
    }
    return user;
  });
});

Roles.setRolesOnUserObj = function (users, roles, group) {
  if (!users) throw new Error ("Missing 'users' param")
  if (!roles) throw new Error ("Missing 'roles' param")
  if (group) {
    if ('string' !== typeof group)
      throw new Error ("Roles error: Invalid parameter 'group'. Expected 'string' type")
    if ('$' === group[0])
      throw new Error ("Roles error: groups can not start with '$'")

    // convert any periods to underscores
    group = group.replace(/\./g, '_')
  }

  // ensure arrays to simplify code
  if (!_.isArray(users)) users = [users]
  if (!_.isArray(roles)) roles = [roles]


  // remove invalid roles
  roles = _.reduce(roles, function (memo, role) {
    if (role
        &amp;&amp; 'string' === typeof role
        &amp;&amp; role.trim().length &gt; 0) {
      memo.push(role.trim())
    }
    return memo
  }, [])

  // if roles is empty, quit
  if (roles.length === 0) return

  // ensure all roles exist in 'roles' collection
  existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {
    memo[role.name] = true
    return memo
  }, {})
  _.each(roles, function (role) {
    if (!existingRoles[role]) {
      Roles.createRole(role)
    }
  })

  // ensure users is an array of objects
  _.each(users, function (user) {
    if ('object' !== typeof user) {
      throw new Error("Expected 'users' argument to be an object or array of objects")
    }
  })


  // Set the roles on the actual user object

  if (group) {

    // roles is a key/value dict object

    _.each(users, function (user) {
      user.roles = {}
      user.roles[group] = roles
    })

  } else {

    // roles is an array of strings

    _.each(users, function (user) {
      user.roles = roles
    })

  }

}
</code></pre>

<p>Now any user outside &lsquo;backend&rsquo; group, or without &lsquo;editor&rsquo; role, can&rsquo;t get any data from server.</p>

<p>Unfortunately Internet is unsafe at all.
So the registration entry has to be removed from the accounts-ui:</p>

<pre><code>Meteor.startup(function () {
  Accounts.config({
    forbidClientAccountCreation : true
  });
});
</code></pre>

<p>Now if you want give a website personnel rights to edit data through backend,
first he should register on the website,
then you define his role manually in mongo console:</p>

<pre><code>&gt; db.users.find({ "emails.0.address":"user@123.com" }, { "emails":1 })
&gt; db.users.update({_id: "PM36t6eRmuC9oELdu"}, { $set: { roles: {"backend": [ "editor" ]} } })
</code></pre>

<p>First find the id of the user (here is &ldquo;<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x75;&#115;&#x65;&#x72;&#64;&#49;&#x32;&#51;&#x2e;&#99;&#111;&#x6d;">&#117;&#115;&#x65;&#x72;&#x40;&#x31;&#50;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a>&rdquo;) by his email address.
Then add group and roles to the user (say the id of the user is &ldquo;PM36t6eRmuC9oELdu&rdquo;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB数据管理平台产品定义和选型]]></title>
    <link href="http://leetschau.github.io/blog/2015/06/08/170530/"/>
    <updated>2015-06-08T17:05:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/06/08/170530</id>
    <content type="html"><![CDATA[<h1>目标定位和用户定义</h1>

<p>数据管理平台是商业网站的产品数据支持系统，它的用户是企业的业务人员，没有技术背景，
无法使用MongoDB的命令行工具以及GUI客户端（如Robomongo等）操作数据。
需要通过浏览器维护产品数据，对数据进行增删改查操作，</p>

<h1>功能需求</h1>

<ul>
<li><p>数据管理平台的用户是网站数据的维护者，与商业网站的用户完全不同；</p></li>
<li><p>数据管理平台是一个Web服务;</p></li>
<li><p>每个用户有自己的权限，包括能够访问哪些collection，以及这个collection中的哪些documents；</p></li>
<li><p>目前这个系统只针对MongoDB;</p></li>
<li><p>能够通过Web界面对目标MongoDB进行数据的增删改查操作；</p></li>
</ul>


<h1>实现方法</h1>

<p>使用Meteor作为Web框架；</p>

<p>系统是一个独立的Meteor项目，而不是一个package；</p>

<h1>系统选型</h1>

<p>目前试用了两个Meteor package，两个node.js包，均不符合要求。</p>

<ul>
<li><p><a href="https://github.com/yogiben/meteor-admin">yogiben/meteor-admin</a>: 登录界面上的注册(sign-up)功能有问题，
点击"Register"按钮界面僵死;登录后版式混乱重叠；</p></li>
<li><p><a href="https://github.com/gterrono/houston">Houston</a>: 安装简单，添加包后就可以使用了，
主要问题是使用产品库的Users表，与网站用户混在了一起；
添加数据页面不能根据数据的Schema定义，只能模仿库里现有的document的结构；</p></li>
<li><p><a href="http://keystonejs.com/">KeyStoneJS</a>: Nodejs包，部署和使用相对比较方便，主要问题见<a href="http://stackoverflow.com/questions/30661456/mongodb-content-management-web-app-for-non-technical-guys">我的问题</a>;</p></li>
<li><p><a href="https://github.com/andzdroid/mongo-express">mongo-express</a>: nodejs包，启动后浏览器访问时报404错误，原因未知；</p></li>
</ul>


<h1>其他说明</h1>

<p>系统不是使用MongoDB的GUI客户端，是因为使用这些客户端需要了解MongoDB语句，不符合用户定义。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Store Small Images in MongoDB via Base64]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/27/180718/"/>
    <updated>2015-05-27T18:07:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/27/180718</id>
    <content type="html"><![CDATA[<p>The following codes save a image file first.
Then encoding it into Base64 string, and decoding it back into binary data (image).
Both images are the same. So the encoding/decoding works.</p>

<pre><code class="JavaScript">var fs = require("fs");
var image_origial = "logo.png";
fs.readFile(image_origial, 'binary', function(err, original_data){
    fs.writeFile('image_orig.png', original_data, 'binary', function(err) {});
    var base64Image = new Buffer(original_data, 'binary').toString('base64');
    console.log("base64 str:");
    console.log(base64Image);
    console.log(base64Image.length);

    var decodedImage = new Buffer(base64Image, 'base64').toString('binary');
    console.log("decodedImage:");
    console.log(decodedImage);
    fs.writeFile('image_decoded.png', decodedImage, 'binary', function(err) {});
});
</code></pre>

<p>Display Base64 string in html:</p>

<pre><code>&lt;template name="myform"&gt;
  &lt;img id="fromBase64" src="data:image/png;base64,"&gt;
&lt;/template&gt;
</code></pre>

<p>Corresponding JavaScript code:</p>

<pre><code>Template.myform.helpers({
  getPic: function() {
    return "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";
  }
});
</code></pre>

<p>Ref:</p>

<p><a href="http://en.wikipedia.org/wiki/Base64">Base64 on Wikipedia</a>;</p>

<p><a href="http://base64online.org/">http://base64online.org/</a></p>

<p><a href="https://gist.github.com/gabomdq/5415569">https://gist.github.com/gabomdq/5415569</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run MongoDB Server on Docker in VPS]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/15/142023/"/>
    <updated>2015-05-15T14:20:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/15/142023</id>
    <content type="html"><![CDATA[<pre><code>sudo usermod -aG docker your-user
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Mongo Scripts in Shell]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/08/155132/"/>
    <updated>2015-05-08T15:51:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/08/155132</id>
    <content type="html"><![CDATA[<p>You can query a remote mongoDB with a mongo script, print output to stdout.
Then manipulate the output data with other shell utilities.</p>

<p>For example, the following scripts get all fair names from a remote server,
compare them with a local fair name set,
to find out which are conflicted with the existing fair names in the local name.</p>

<p>Some key points:</p>

<ol>
<li><p>&ldquo;db&rdquo; is a built-in global variable refers to the connected database,
specified by the -h, -d options in mongo command line.
It can be override by &ldquo;connect&rdquo; function.
For example, with or without the first line, the script produce the same result
when running <code>mongo test.js</code>:</p>

<pre><code> $ cat test.js
 // db = connect("localhost/test")
 print(db.getCollectionNames())
 db.myCollection.find().forEach(function(item) {
   print(item.name)
 })
</code></pre></li>
<li><p>Use &ldquo;print&rdquo; function to print result to stdout.</p></li>
<li><p>To get command line arguments in mongo script, you must compose the evaluation string before(outside) <code>mongo</code> command,
and you must add double quotes surrounding $exp.</p>

<pre><code> #!/bin/bash

 TargetDB=$1
 TargetCol=$2
 TargetField=$3

 exp="db.${TargetCol}.find().forEach( function(item) \
   { print(item.$TargetField); });"

 mongo localhost/$TargetDB --eval "$exp"
</code></pre></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>

<p><a href="http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script">http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script</a></p>

<p><a href="http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file">http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file</a></p>
]]></content>
  </entry>
  
</feed>
