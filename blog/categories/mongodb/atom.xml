<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-04T11:42:13+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frequent Used Commands in Mongodb Shell]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/29/193156/"/>
    <updated>2014-12-29T19:31:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/29/193156</id>
    <content type="html"><![CDATA[<p>The foloowing codes demonstrate the creation &copy;, query &reg;, update (U) and delete (D) operations on mongodb collections.</p>

<p>It also shows how to rename collections and keys of documents.</p>

<pre><code>$ mongo
db.fairs.insert({'name': 'bikeShow', 'time': '2014.12.24', 'location': 'Beijing', 'products': ['bike', 'car', 'truck']})
db.fairs.insert({'name': 'clothShow', 'time': '2014.2.14', 'location': 'Shanghai', 'products': ['silk', 'wood', 'paper']})
db.fairs.insert({'name': 'MyFruits', 'time': '2011.4.18', 'location': 'Guangzhou', 'products': ['berry', 'apple', 'banana']})

db.newfairs.find({}, {name: 1})
db.newfairs.find({}, {'name.chn': 1})

db.fairs.renameCollection('newfairs')

db.newfairs.update({}, {$rename: {'time': 'date'} }, {multi: true} )
db.newfairs.update({}, {$rename: {'name': 'names'} }, {multi: true} )
db.newfairs.update({}, {$rename: {'names': 'name.chn'} }, {multi: true} )
db.newfairs.update({}, {$unset: {'date': ""}}, {multi: true})
db.newfairs.remove({})
db.newfairs.drop()
exit
</code></pre>

<p>You can&rsquo;t use <code>{$rename: {'name': 'name.chn'}}</code> directly for &ldquo;$rename must not be on the same path&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/25/091714/"/>
    <updated>2014-12-25T09:17:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/25/091714</id>
    <content type="html"><![CDATA[<h1>Start mongodb server as a common user</h1>

<p>The default data path of Mongodb is /data/db, which you have to create as root.</p>

<p>If you just want play around mongodb with some test data, you can create a temporary folder as data directory:</p>

<pre><code>$ mkdir ~/docs/tmp/mongodb-repo
$ cd ~/apps/mongodb-linux-x86_64-2.6.5
$ bin/mongod --dbpath ~/docs/tmp/mongodb-repo
// in a new shell
$ ~/apps/mongodb-linux-x86_64-2.6.5/bin/mongo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor MongoDB Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/20/230618/"/>
    <updated>2014-12-20T23:06:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/20/230618</id>
    <content type="html"><![CDATA[<ul>
<li><p>Connect to a mongodb of a Meteor app: run <code>meteor</code> at the project root. Start another shell, go to this folder, and run <code>meteor mongo</code>;</p></li>
<li><p>List all available commands: <code>help</code>;</p></li>
<li><p>List DB operation methods: <code>db.help()</code>;</p></li>
<li><p>List all existing collection names: <code>show collections</code>;</p></li>
<li><p>List all available commands of a collection: <code>db.&lt;collection-name&gt;.help()</code>;</p></li>
<li><p>Show collection information: <code>db.&lt;collection-name&gt;.stats()</code>;</p></li>
<li><p>Print all &ldquo;name&rdquo; field of collection &ldquo;fairs&rdquo;: <code>db.fairs.find({}, {name_chn: 1})</code>;</p></li>
<li><p>Print all fields except &ldquo;name_chn&rdquo; of collection &ldquo;fairs&rdquo;: <code>db.fairs.find({}, {products: 0})</code>;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Data From Csv File Into Meteor Mongodb]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/08/114328/"/>
    <updated>2014-12-08T11:43:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/08/114328</id>
    <content type="html"><![CDATA[<p>Here I use mongoDB&rsquo;s mongoimport tool to import csv file into Meteor app&rsquo;s Mongodb.</p>

<p>First download mongodb package (mongodb-linux-x86_64-2.6.5.tgz) from <a href="http://www.mongodb.org/">mongoDB</a>, extract it into ~/apps folder.</p>

<p>Next start the Meteor app. When the server listening on port 3000, it&rsquo;s mongoDB server listening on port 3001.</p>

<p>Save the following codes into app&rsquo;s $HOME/private folder as importdb.sh:</p>

<pre><code>~/apps/mongodb-linux-x86_64-2.6.5/bin/mongoimport -h localhost:3001 --db meteor --collection fairs --type csv --file fairs.csv --headerline
</code></pre>

<p>Here the source csv file is saved in file private/fairs.csv.</p>

<p>It&rsquo;s headerline (first line of csv file) is also comma-seperated:</p>

<pre><code>Name, Age, Job
Bob, 35, Cooker
Tom, 28, Coder
...
</code></pre>

<p>Now in the Meteor app, add <code>Fairs = new Meteor.Collection("fairs");</code> into js file to use the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEAN Devlopment on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/20/171325/"/>
    <updated>2014-10-20T17:13:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/20/171325</id>
    <content type="html"><![CDATA[<h1>ArchLinux</h1>

<pre><code>sudo pacman -S nodejs mongodb
sudo systemctl enable mongodb.service
sudo systemctl start mongodb.service
// verify with command "mongo"
sudo npm install -g meanio
sudo npm install -g bower
sudo npm install -g grunt-cli
mean init myApp
cd myApp &amp;&amp; npm install
grunt
</code></pre>

<p>Now browse <a href="http://localhost:3000.">http://localhost:3000.</a></p>
]]></content>
  </entry>
  
</feed>
