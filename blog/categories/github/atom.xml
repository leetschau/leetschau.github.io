<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Github | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert a Private Project on bitbucket.com to a Github Public Project]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/12/175101/"/>
    <updated>2014-03-12T17:51:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/12/175101</id>
    <content type="html"><![CDATA[<ol>
<li><p>Create a public repo on github, you can add README or License files on the master branch, suppose the url is:</p>

<p> <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p></li>
<li><p>Get the private repo:</p>

<p> $ git clone <a href="https://leechau@bitbucket.org/leechau/donno.git">https://leechau@bitbucket.org/leechau/donno.git</a>
 $ cd donno
 $ git branch -v -a   (list all remote branches for checkout)
 $ git checkout -b develop origin/develop   (copy remote branch to local repo and update working directory)</p></li>
<li><p>Publish to github, you have 2 choices:</p>

<ol type="a">
<li><p>Publish selected branches:</p>

<p> $ git remote add don4 <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a>
 $ git push -u don4 master
 $ git push -u don4 develop</p></li>
</ol>


<p>   or you can push your &ldquo;master&rdquo; branch to remote as &ldquo;init&rdquo; branch for avoid confliction with master branch created on github:</p>

<pre><code> $ git push don4 master:init
</code></pre>

<ol type="a">
<li><p>Publish all branches:</p>

<p> $ git push &ndash;mirror <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p>

<p>In this case you can&rsquo;t create README or License files when creating github project, to avoid conflict on master branch.</p></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work on Remote Git Repository]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/19/101234/"/>
    <updated>2013-11-19T10:12:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/19/101234</id>
    <content type="html"><![CDATA[<h1>Create New Branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch    // list all existing branches
$ git checkout -b leetschau     // create new branch "leetschau" and checkout it
</code></pre>

<h1>Push to remote repository</h1>

<p><code>$ git push origin leetschau</code>, where &ldquo;origin&rdquo; is repository name, &ldquo;leetschau&rdquo; is branch name.</p>

<p>When you push your branch the first time, add &ldquo;-u&rdquo; to specify that the current branch is associated with the remote branch.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.">http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.</a></p>

<h1>Push all branches to remote repository</h1>

<p><code>$ git push origin --all</code>.</p>

<h1>Sync with remote repository</h1>

<p>If there&rsquo;s no local changes, the first command is unnecessary.</p>

<pre><code>git checkout -- .
git pull --all
</code></pre>

<h1>Discard local changes</h1>

<p>We need discard all local changes and keep the same with remote repository. Provided that you want sync with &ldquo;master&rdquo; branch in remote repository &ldquo;origin&rdquo;:</p>

<pre><code>$ git fetch orgin
$ git reset --hard origin/master
</code></pre>

<p>Note that files not in stage area (not been &ldquo;add&rdquo;) will remains, while files in stage area or committed will be removed.
If your remote repo is developed with git flow, your synchronized repo also need install git flow.
On CentOS, install it with <code>yum install gitflow</code>. See installation doc on <a href="https://github.com/nvie/gitflow">gitflow</a> for details.</p>

<h1>Remove Existing Branch</h1>

<pre><code>$ git push origin :leetchao
</code></pre>

<h1>Create, query and remove remote repository alias</h1>

<pre><code>$ git remote add pyevernote-repo https://github.com/hackrole/pyevernote.git
$ git remote -v
$ git remote rm pyevernote-repo
</code></pre>

<h1>Checkout from a existing repository and branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch -r               // list all local and remote branches
  origin/leetschau
  ...
$ git checkout leetschau      // or "git checkout -b leetschau origin/leetschau" for old version git
</code></pre>

<p>For verification, you can find &lsquo;remote=origin &hellip; under [branch &ldquo;leetschau&rdquo;]&rsquo; in file .git/config.</p>

<h1>Update from remote repository</h1>

<pre><code>$ git fetch origin
$ git status
  Your branch is **behind** 'origin/develop' by 3 commits... (which means your local branch need to be updated with remote one)
$ git merge origin/develop
</code></pre>

<p>Or simply <code>git pull origin develop</code>, where develop is the branch name we want to sync.</p>

<p>Note: Be careful to use &ldquo;git pull&rdquo; for &ldquo;pull&rdquo; is too &ldquo;smart&rdquo;.
<a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/">git: fetch and merge, donât pull</a> gives the reason and provides an excellent explanation of what is &ldquo;branch&rdquo;.</p>

<h1>Move a git repository from Bitbucket to Github</h1>

<p>Based on <a href="http://www.blackdogfoundry.com/blog/moving-repository-from-bitbucket-to-github/">Moving Repository from Bitbucket to GitHub</a>.</p>

<pre><code>cd $DSNOTE_HOME
git remote rename origin bitbucket
// create a new repository "dsnote" on Github
git remote add origin https://github.com/leetschau/dsnote.git
git push -u origin master
git remote -v
git branch -r
</code></pre>

<h1>Other</h1>

<p>Always use <code>git status</code> to get current status, such as the difference between CWD and stage area, difference between stage area and local repository, and difference between local repository and remote repository.
Use <code>git log</code> to show commit history.</p>
]]></content>
  </entry>
  
</feed>
