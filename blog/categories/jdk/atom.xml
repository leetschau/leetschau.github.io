<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jdk | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/jdk/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-11-28T08:48:37+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Virtual BVT System]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/23/135000/"/>
    <updated>2014-06-23T13:50:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/23/135000</id>
    <content type="html"><![CDATA[<h1>Prerequisites</h1>

<ol>
<li><p>The host server of the environment is 10.0.2.47;</p></li>
<li><p>Install <a href="http://www.vagrantup.com/">vagrant</a> on server 47;</p></li>
<li><p>Add vagrant box of precise x86_64: <code>vagrant box add ...</code>;</p></li>
<li><p>Create a directory named &ldquo;bvt-package&rdquo; under ~/warez, which contains:
 apache-ant-1.9.3-bin.tar.bz2
 cobertura.jar
 hamcrest-core-1.3.jar
 jdk-6u45-linux-x64.bin
 jenkins-1.544.war
 junit-4.8.1.jar
 sonar-3.6.1.zip
 svn_amd64_ubuntu12.04
     libapr1_1.4.6-1_amd64.deb
     libaprutil1_1.3.12+dfsg-3_amd64.deb
     libdb4.8_4.8.30-11ubuntu1_amd64.deb
     libneon27-gnutls_0.29.6-1_amd64.deb
     libsvn1_1.6.17dfsg-3ubuntu3_amd64.deb
     subversion_1.6.17dfsg-3ubuntu3_amd64.deb
 unzip_6.0-4ubuntu1_amd64.deb
 zip_3.0-4_amd64.deb</p></li>
<li><p>The demo product codes in subversion repository is <a href="http://10.0.2.59:8118/svn/gcp/Development-Area/GNDP">GNDP</a>;</p></li>
</ol>


<h1>Build BVT Environment</h1>

<pre><code>$ cd /home/bvt/docs
$ take mybvt
$ vagrant box list
$ vagrant init precise64
// Add the following texts into Vagrantfile after the line 'config.vm.box = "precise64":'
  config.vm.define "bs" do |bvtserver|
    bvtserver.vm.hostname = "bvt-server"
    bvtserver.vm.network "private_network", ip: "192.168.50.3",
        virtualbox__intnet: "testnet"
    bvtserver.vm.provider :virtualbox do |vbox|
      vbox.customize ["modifyvm", :id, "--natnet1", "10.3/16"]
      vbox.customize ["modifyvm", :id, "--memory", 1000]
    end
    bvtserver.vm.provision :shell, path: "provision.sh", privileged: false
    bvtserver.vm.network "forwarded_port", guest: 9000, host: 9000
    bvtserver.vm.network "forwarded_port", guest: 8088, host: 8088
  end
$ scp -r bvt@10.0.2.47:/home/bvt/warez/bvt-package packages
$ vagrant up bs
</code></pre>

<h1>Use This Environment</h1>

<ol>
<li><p>Open <a href="http://10.0.2.47:9000">Sonarqube website</a>, login with &ldquo;admin/admin&rdquo;, in Settings -> Qualify Profiles, add rules &ldquo;TongYong&rdquo; with import &ldquo;tyrules.xml&rdquo; on local disk (the next section its content);;</p></li>
<li><p>Open <a href="http://10.0.2.47:8088/">Jenkins website</a>;</p></li>
<li><p>Create Jenkins project: create a project named &ldquo;GNDP&rdquo; and add a &ldquo;shell&rdquo; build step: &ldquo;/vagrant/bvt-gndp.sh&rdquo;;</p></li>
<li><p>Build this project;</p></li>
<li><p>You get the build log on jenkins website and code analysis results on sonarqube website;</p></li>
</ol>


<h1>Needed Scripts</h1>

<h2>Vagrant provision script</h2>

<p>This is the environment building script executed during the vagrant provision period, so it&rsquo;s cited in Vagrantfile.</p>

<pre><code>$ cat /home/bvt/docs/mybvt/provision.sh
#!/bin/sh

sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

sudo dpkg -i /vagrant/packages/svn_amd64_ubuntu12.04/*.deb
sudo dpkg -i /vagrant/packages/zip_3.0-4_amd64.deb
sudo dpkg -i /vagrant/packages/unzip_6.0-4ubuntu1_amd64.deb
APP_HOME=/home/vagrant/apps
mkdir $APP_HOME
cd $APP_HOME
chmod 755 /vagrant/packages/jdk-6u45-linux-x64.bin
sh /vagrant/packages/jdk-6u45-linux-x64.bin
tar jxf /vagrant/packages/apache-ant-1.9.3-bin.tar.bz2
unzip /vagrant/packages/sonar-3.6.1.zip

export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8
export JENKINS_HOME=/home/vagrant/jenkinshome
mkdir $JENKINS_HOME

sonar-3.6.1/bin/linux-x86-64/sonar.sh start
nohup java -jar /vagrant/packages/jenkins-1.544.war --httpPort=8088 1&gt;jenkins.log 2&gt;jenkins-err.log &amp;
</code></pre>

<h2>BVT shell script</h2>

<p>This script checkout the source code to be built, then invoke the Ant script. It&rsquo;s cited in Jenkins project definition.</p>

<pre><code>$ cat /home/bvt/docs/mybvt/bvt-gndp.sh
#!/bin/sh

export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8

svnprefix='svn co --non-interactive --no-auth-cache --username bvt_common --password password'
svnroot='http://10.0.2.59:8118/svn/gcp/Development-Area'
prod=GNDP
$svnprefix ${svnroot}/3-SCL/Trunk/$prod /vagrant/codes/$prod

rm -rf /vagrant/codes/*.zip
cd /vagrant/codes/$prod;  ant
</code></pre>

<h2>Ant build script</h2>

<p>This script resides in the root folder of the source project GNDP in subversion repository.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="MyJavaProj" basedir="./" default="coverage_report"&gt;
&lt;property name="build.dir" value="${basedir}/build" /&gt;
&lt;target name="init"&gt;
    &lt;delete dir="${build.dir}"/&gt;
    &lt;mkdir dir="${build.dir}"/&gt;
&lt;/target&gt;

&lt;property name="src.dir" value="${basedir}/src" /&gt;
&lt;property name="src.class.dir" value="${build.dir}/class" /&gt;
&lt;target name="compile-src" depends="init"&gt;
    &lt;mkdir dir="${src.class.dir}"/&gt;
    &lt;javac srcdir="${src.dir}" destdir="${src.class.dir}" encoding="UTF-8" debug="true"/&gt;
&lt;/target&gt;
&lt;taskdef classpath="cobertura.jar" resource="tasks.properties" /&gt;
&lt;property name="instrumented.class.dir" value="${build.dir}/instrumented-class" /&gt;
&lt;property name="cobertura.data.file" value="${instrumented.class.dir}/cobertura.ser" /&gt;

&lt;target name="instrument" depends="compile-src"&gt;
    &lt;cobertura-instrument datafile="${cobertura.data.file}" todir="${instrumented.class.dir}"&gt;
    &lt;fileset dir="${src.class.dir}"&gt;
        &lt;include name="**/*.class" /&gt;
    &lt;/fileset&gt;
    &lt;/cobertura-instrument&gt;
&lt;/target&gt;

&lt;property name="test.dir" value="${basedir}/test" /&gt;
&lt;property name="test.class.dir" value="${build.dir}/test" /&gt;
&lt;target name="compile-test" depends="instrument"&gt;
    &lt;mkdir dir="${test.class.dir}"/&gt;
    &lt;javac srcdir="${test.dir}" destdir="${test.class.dir}"&gt;
        &lt;classpath&gt;
            &lt;pathelement location="${instrumented.class.dir}"/&gt;
            &lt;pathelement location="${src.class.dir}"/&gt;
        &lt;/classpath&gt;
    &lt;/javac&gt;
&lt;/target&gt;

&lt;property name="unittest.report.dir" value="${build.dir}/unittest_report" /&gt;
&lt;property name="lib.dir" value="${basedir}/lib" /&gt;
&lt;target name="unittest" depends="compile-test"&gt;
    &lt;mkdir dir="${unittest.report.dir}"/&gt;
    &lt;junit printsummary="yes" fork="yes"&gt;
        &lt;sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.file}" /&gt;
        &lt;classpath&gt;
            &lt;pathelement location="${instrumented.class.dir}"/&gt;
            &lt;pathelement location="${src.class.dir}"/&gt;
            &lt;pathelement location="${test.class.dir}"/&gt;
            &lt;pathelement location="${src.dir}"/&gt;
            &lt;path refid="lib.path"/&gt;
        &lt;/classpath&gt;
        &lt;formatter type="xml"/&gt;
        &lt;batchtest todir="${unittest.report.dir}" haltonerror="no"&gt;
            &lt;fileset dir="${test.dir}"&gt;
                &lt;include name="**/*.java" /&gt;
            &lt;/fileset&gt;
        &lt;/batchtest&gt;
    &lt;/junit&gt;
&lt;/target&gt;

&lt;property name="coverage.report.dir" value="${build.dir}/coverage_report" /&gt;
&lt;target name="coverage-report" depends="unittest"&gt;
    &lt;cobertura-report datafile="${cobertura.data.file}" srcdir="${src.dir}" destdir="${coverage.report.dir}" format="xml" /&gt;
&lt;/target&gt;

&lt;property name="sonar.jdbc.url" value="jdbc:h2:tcp://localhost:9092/sonar" /&gt;
&lt;property name="sonar.jdbc.username" value="sonar" /&gt;
&lt;property name="sonar.jdbc.password" value="sonar" /&gt;
&lt;property name="sonar.projectKey" value="com.doco.gif.MyModule" /&gt;
&lt;property name="sonar.projectName" value="My Unit Test Project Demo" /&gt;
&lt;property name="sonar.projectVersion" value="2.1" /&gt;
&lt;property name="sonar.language" value="java" /&gt;
&lt;property name="sonar.sources" value="src" /&gt;
&lt;property name="sonar.tests" value="test" /&gt;
&lt;property name="sonar.binaries" value="${src.class.dir},${test.class.dir},${build.instrument.dir}" /&gt;
&lt;property name="sonar.dynamicAnalysis" value="reuseReports" /&gt;
&lt;property name="sonar.surefire.reportsPath" value="${unittest.report.dir}" /&gt;
&lt;property name="sonar.core.codeCoveragePlugin" value="cobertura" /&gt;
&lt;property name="sonar.cobertura.reportPath" value="${coverage.report.dir}/coverage.xml" /&gt;
&lt;target name="sonar" depends="coverage-report"&gt;
    &lt;taskdef classpath="sonar-ant-task-2.1.jar" uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml"/&gt;
    &lt;sonar:sonar xmlns:sonar="antlib:org.sonar.ant" /&gt;
&lt;/target&gt;
&lt;/project&gt;
</code></pre>

<h2>Code Static check rules</h2>

<p>This file defines the static check rules used by Sonarqube. It&rsquo;s imported manually from file &ldquo;tyrules.xml&rdquo; on local hard disk.</p>

<pre><code>$ cat ~/docs/tyrules.xml

&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd"&gt; 
&lt;module name="Checker"&gt; 
    &lt;property name="severity" value="warning"/&gt; 
    &lt;module name="TreeWalker"&gt; 
        &lt;metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;module name="MethodLength"&gt; 
            &lt;property name="max" value="200"/&gt; 
        &lt;/module&gt; 
        &lt;module name="NestedIfDepth"&gt; 
            &lt;property name="max" value="5"/&gt; 
        &lt;/module&gt; 
        &lt;module name="CyclomaticComplexity"/&gt; 
            &lt;module name="ParameterNumber"&gt; 
            &lt;property name="max" value="6"/&gt; 
        &lt;/module&gt; 
    &lt;/module&gt; 
    &lt;module name="StrictDuplicateCode"&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;property name="min" value="75"/&gt; 
    &lt;/module&gt; 
    &lt;module name="FileLength"&gt; 
        &lt;property name="fileExtensions" value="java"/&gt; 
        &lt;property name="max" value="1000"/&gt; 
    &lt;/module&gt; 
&lt;/module&gt; 
</code></pre>

<h1>For Unit Test</h1>

<ol>
<li>copy junit-4.*.jar, cobertura.jar and hamcrest-core-1.3.jar to $ANT_HOME/lib;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Develop Environment Based on GVM]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/03/175002/"/>
    <updated>2014-04-03T17:50:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/03/175002</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<pre><code>yum install -y java-1.7.0-openjdk-devel
curl -s get.gvmtool.net|bash
source "/root/.gvm/bin/gvm-init.sh"
gvm i groovy 2.2.1
</code></pre>

<h1>Usage</h1>

<pre><code>groovysh
groovy hw.groovy
</code></pre>

<p>All files and installed components are in folder ~/.gvm. So simply remove this folder for uninstallation of gvm.</p>

<p>gvm is portable, so if you install gvm as root, just copy .gvm folder to $HOME, chown, then <code>gvm c</code> to show the current groovy version. If it&rsquo;s not what you want, <code>gvm use groovy 2.2.1</code> to update it.</p>

<p>Install gvm to another host, first copy .gvm folder, then add &ldquo;source ~/.gvm/bin/gvm-init.sh&rdquo; into .bashrc(or .zshrc), then check and setup in new host as above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Hadoop Develop Environment]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/09/120651/"/>
    <updated>2013-08-09T12:06:51+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/09/120651</id>
    <content type="html"><![CDATA[<h1>Prerequisites</h1>

<ol>
<li><p>Download Oracle jdk-6u45-linux-i586.bin from Oracle website. Openjdk is unsuitable here because some package like sun.net.dns.ResolverConfiguration only exists in rt.jar of Oracle jdk;</p></li>
<li><p>Install (./jdk<strong>.bin) this jdk at ~/apps/jdk</strong> with current user (do not install it into /opt with root user, because this will cause access restriction of rt.jar of jdk);</p></li>
<li><p>Add $JAVA_HOME and $CLASSPATH into /etc/profile and re-log into OS to validate;</p></li>
<li><p>Add this jdk to eclipse (Preferences -> Install JREs);</p></li>
</ol>


<h1>Method 8-10</h1>

<p>Follow <a href="https://wiki.apache.org/hadoop/EclipseEnvironment">Working with Hadoop under Eclipse</a></p>

<ol>
<li>make sure your maven version is 3.x (mvn &ndash;version), if not:</li>
</ol>


<p> sudo apt-get remove maven2
 sudo apt-get update
 sudo apt-get install maven</p>

<ol>
<li><p>git clone git://git.apache.org/hadoop-common.git ()</p></li>
<li><p>mvn install -DskipTests</p></li>
<li><p>mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true</p></li>
<li></li>
</ol>


<h1>Method 8-9</h1>

<ol>
<li><p>Create a Java Project in Eclipse, modify default output folder to $PROJECT_HOME/out (because &ldquo;bin&rdquo; is a script folder in hadoop source pack);</p></li>
<li><p>Exclude src from source folder and create &ldquo;lib&rdquo;, &ldquo;conf&rdquo; folder under $PROJECT_HOME;</p></li>
<li><p>Import $HADOOP_HOME/src, lib, conf into $PROJECT_HOME;</p></li>
<li><p>Add all jar files under lib to build path;</p></li>
<li><p>Add ant.jar to build path;</p></li>
<li><p>Add mapred, tools, ant, core, hdfs under src folder as source folder;</p></li>
</ol>


<h1>Verify</h1>

<ol>
<li><p>modify config files;</p></li>
<li><p>run hadoop</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Java安装包安装绿色JDK]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/27/161253/"/>
    <updated>2012-12-27T16:12:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/27/161253</id>
    <content type="html"><![CDATA[<p>Oracle官网上下载的JDK安装包是一个exe文件，默认方式安装后会将系统的Java运行时（JRE）指向自身，当机器上有多个jdk时容易弄乱，安装时不要选“公共JRE”就可以变成绿色JDK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试JDK32位还是64位]]></title>
    <link href="http://leetschau.github.io/blog/2012/07/20/173358/"/>
    <updated>2012-07-20T17:33:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/07/20/173358</id>
    <content type="html"><![CDATA[<p>Main.java:</p>

<p>public class Main{
 public static void main(String[] args){
  String arch = System.getProperty(&ldquo;sun.arch.data.model&rdquo;);
  System.out.println(arch);
 }
}</p>
]]></content>
  </entry>
  
</feed>
