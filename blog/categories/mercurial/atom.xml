<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mercurial | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/mercurial/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hg常用命令]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/26/184302/"/>
    <updated>2013-04-26T18:43:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/26/184302</id>
    <content type="html"><![CDATA[<ul>
<li><p>hg add</p></li>
<li><p>hg cat filename</p></li>
<li><p>hg ci，简短的注释可以用hg ci -m &ldquo;short comment&#8221;直接提交，如果没有配置用户，会导致提交失败，配置用户方法见笔记“ hg的常用配置 ”；
hg ci &ndash;amend: 修改上一次提交的备注信息</p></li>
<li><p>hg diff file：显示某个版本所做的更改</p>

<p>hg diff -c 19 filename；比较两个版本间的差异</p>

<p>hg diff -r 19 -r 20 filename</p></li>
<li><p>hg heads 列出所有头版本，用于合并分支(hg merge)前的查询</p></li>
<li><p>hg help <command_name>: show help information of <command_name>;</p></li>
<li><p>hg init：如果在非空目录中运行此命令，表示将已有的文件纳入到hg库中；</p></li>
<li><p>hg log</p>

<p>hg log -l n：只显示最近的n个changeset</p>

<p>hg log -v: 包含文件变化列表和完整的提交注释</p>

<p>hg log -k &ldquo;Your Name&#8221;：用户Your Name提交的changeset列表</p>

<p>hg log -G: 用分支图的形式列出changeset，可与-l参数配合使用</p>

<p>hg log filename: 列出与filename有关的各次提交的信息</p></li>
<li><p>hg merge 合并分支</p></li>
<li><p>hg pull <source_repo_url>：将<source_repo_url>中的change_set拉到本地repository中来，不影响working directory中的文件；</p>

<p>hg pull -u &lt;=> hg pull &ndash;update &lt;=> &ldquo;hg pull; hg update&rdquo; &lt;=> svn update</p>

<p>DVCS与SVN的区别在于DVCS存在两种类型的同步：repository之间以及本地repository与working directory之间，push/pull用于同步前者，update/commit用于同步后者；</p></li>
<li><p>hg push</p></li>
<li><p>hg rollback: 删除最近一次提交(commit)</p></li>
<li><p>hg st: 无参数表示tip与working dir的区别</p>

<p>hg st &ndash;rev 19：版本19的变化</p>

<p>hg st &ndash;rev x:y：比较x和y版本的变化，x与y的顺序无所谓；</p></li>
<li><p>hg update：用本地repository中的内容更新working_copy中的文件；</p>

<p>hg update -C: 抛弃本地未提交的更改，用版本库中的文件更新working directory；</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hg命令行工具使用笔记]]></title>
    <link href="http://leetschau.github.io/blog/2012/07/31/094650/"/>
    <updated>2012-07-31T09:46:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/07/31/094650</id>
    <content type="html"><![CDATA[<p>tortoiseHg不能建立分支（可以建，2012-10-8），所以只好用命令行来做了，好在命令行也不复杂。</p>

<p>F:\VMFiles\tmpFiles\testHg>hg init   // 当前目录下建立repo</p>

<p>// 新建文件test.txt</p>

<p>F:\VMFiles\tmpFiles\testHg>hg add test.txt // 增加对test的版本控制</p>

<p>F:\VMFiles\tmpFiles\testHg>hg ci -m &ldquo;first time commit&rdquo;  // 提交test，ci是check-in的简写，也可写为commit</p>

<p>// 修改test.txt文件内容</p>

<p>F:\VMFiles\tmpFiles\testHg>hg st   // 查看变化情况，st是status的简写
M test.txt</p>

<p>F:\VMFiles\tmpFiles\testHg>hg diff   // 显示working directory中的内容与tip的区别
diff -r e83bcfd395df test.txt
&hellip;（详细内容对比）</p>

<p>F:\VMFiles\tmpFiles\testHg>hg commit -m &ldquo;第二次修改&rdquo;  // 提交修改，双引号中（版本注释）可以写中文
F:\VMFiles\tmpFiles\testHg>hg log -v    // 查看版本历史
修改集:  1:ee6f6492bd8b
标签:  tip
用户:  Chad
日期:  Tue Jul 31 09:36:18 2012 +0800
摘要:  第二次修改
修改集:  0:3bf09e86781b
用户:  Chad
日期:  Tue Jul 31 09:28:56 2012 +0800
摘要:  first time commit</p>

<p>F:\VMFiles\tmpFiles\testHg>hg revert test.txt // 放弃本次修改，新修改的文件重命名为test.txt.orig</p>

<p>F:\VMFiles\tmpFiles\testHg>hg branch red      // 新建分支red，并切换到它上面</p>

<p>marked working directory as branch red
F:\VMFiles\tmpFiles\testHg>hg commit -m &ldquo;red上的修改&rdquo;   // 后面的修改都是基于当前分支red的</p>

<p>F:\VMFiles\tmpFiles\testHg>hg branch     // 查看当前所处的branch
red</p>

<p>F:\VMFiles\tmpFiles\testHg>hg branches       // 显示当前所有分支
red       3:973327a4aa5d
default      2:ee6f6492bd8b (inactive)</p>

<h3>修改test.txt文件内容</h3>

<p>F:\VMFiles\tmpFiles\testHg>hg commit -m &ldquo;red上的第二次修改&rdquo;</p>

<p>F:\VMFiles\tmpFiles\testHg>hg up default       // 将当前分支切换为default，up是update的简写
1 files updated, 0 files merged, 0 files removed, 0 files unresolved</p>

<p>F:\VMFiles\tmpFiles\testHg>hg log -b red      // 只显示分支red上的版本
&hellip;</p>

<p>F:\VMFiles\tmpFiles\testHg>hg tip -v     // 显示tip版本信息
&hellip;</p>

<p>F:\VMFiles\tmpFiles\testHg>hg heads     // 显示当前各个branch上的最新版本</p>

<p>F:\VMFiles\tmpFiles\testHg>hg merge -t docdiff -r 3 // 与版本3合并，这里使用了diff工具docdiff，注意将它的路径加入到$PATH中，默认是&#8221;C:\Program Files\TortoiseHg&#8221;</p>

<p>F:\VMFiles\tmpFiles>hg clone <a href="http://www.selenic.com/repo/hello">http://www.selenic.com/repo/hello</a> my-hello // 从网络上下载repo到当前目录的my-hello目录下</p>

<p>F:\VMFiles\tmpFiles\my-hello>hg clone . e:/aaa  // clone当前（目录所在的）repo到e:\aaa目录下</p>

<p>F:\VMFiles\tmpFiles>hg clone my-hello my-hello-new // 复制当前目录下的repo（同时也是子目录）my-hello到my-hello-new下</p>

<h3>修改my-hello-new/hello.c文件</h3>

<p>F:\VMFiles\tmpFiles>cd my-hello</p>

<p>F:\VMFiles\tmpFiles\my-hello>hg pull ../my-hello-new // 将其他repo中的改进“拉”到当前（目录所在的）repo中，类似于SVN的update</p>

<p>当多个分支存在冲突时，merge会失败，比较好的策略是：主干（default）里是稳定的可用版，新加的功能放在分支里（每个新功能都建一个新分支），当功能通过验证后，再合并到主干里，这样的好处是分支的代码只会比主干多，合并时不会出现冲突。</p>

<p>另：</p>

<p>Hg原理的介绍： Understanding Mercurial</p>

<p>一个不错的Hg教程： Hg Init</p>
]]></content>
  </entry>
  
</feed>
