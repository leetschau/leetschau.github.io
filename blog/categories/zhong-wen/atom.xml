<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 中文 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/zhong-wen/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将中文字符串转换为拼音首字母串]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/31/101055/"/>
    <updated>2014-12-31T10:10:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/31/101055</id>
    <content type="html"><![CDATA[<p>下面的Python脚本将任意汉字和英文、数字混合字符串转换为拼音首字母组成的字符串，
注意：有些汉字不能查找到首字母，例如"深圳东莞"的"圳"和"莞"两个字，原因不明。
需要在vi中用"/\&lt;[A-Z]>搜索这种情况。</p>

<p>实现过程是：首先尝试用unicode, utf8和gbk解码字符串，然后用GBK编码字符串，利用GBK汉字是按拼音顺序编码的原理查出其首字母。</p>

<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

def get_word_initial(inp):
    if isinstance(inp, unicode):
        unicode_str = inp
    else:
        try:
            unicode_str = inp.decode('utf8')
        except:
            try:
                unicode_str = inp.decode('gbk')
            except:
                print 'unknown coding'
                return

    init_list = [get_char_initial(i) for i in unicode_str]
    return "".join(init_list)

def get_char_initial(unicode1):
    gbkStr = unicode1.encode('gbk')
    try:
        ord(gbkStr)
        return gbkStr
    except:
        asc = ord(gbkStr[0]) * 256 + ord(gbkStr[1]) - 65536
        if asc &gt;= -20319 and asc &lt;= -20284:
            return 'A'
        if asc &gt;= -20283 and asc &lt;= -19776:
            return 'B'
        if asc &gt;= -19775 and asc &lt;= -19219:
            return 'C'
        if asc &gt;= -19218 and asc &lt;= -18711:
            return 'D'
        if asc &gt;= -18710 and asc &lt;= -18527:
            return 'E'
        if asc &gt;= -18526 and asc &lt;= -18240:
            return 'F'
        if asc &gt;= -18239 and asc &lt;= -17923:
            return 'G'
        if asc &gt;= -17922 and asc &lt;= -17418:
            return 'H'
        if asc &gt;= -17417 and asc &lt;= -16475:
            return 'J'
        if asc &gt;= -16474 and asc &lt;= -16213:
            return 'K'
        if asc &gt;= -16212 and asc &lt;= -15641:
            return 'L'
        if asc &gt;= -15640 and asc &lt;= -15166:
            return 'M'
        if asc &gt;= -15165 and asc &lt;= -14923:
            return 'N'
        if asc &gt;= -14922 and asc &lt;= -14915:
            return 'O'
        if asc &gt;= -14914 and asc &lt;= -14631:
            return 'P'
        if asc &gt;= -14630 and asc &lt;= -14150:
            return 'Q'
        if asc &gt;= -14149 and asc &lt;= -14091:
            return 'R'
        if asc &gt;= -14090 and asc &lt;= -13119:
            return 'S'
        if asc &gt;= -13118 and asc &lt;= -12839:
            return 'T'
        if asc &gt;= -12838 and asc &lt;= -12557:
            return 'W'
        if asc &gt;= -12556 and asc &lt;= -11848:
            return 'X'
        if asc &gt;= -11847 and asc &lt;= -11056:
            return 'Y'
        if asc &gt;= -11055 and asc &lt;= -10247:
            return 'Z'
        return ''

if __name__ == "__main__":
    str_input='广州火车站A2c'
    print(get_word_initial(str_input))
</code></pre>

<p>下面是一个完整的使用场景，利用上面的代码为小区的地理位置表添加ID字段。
首先将上面的代码保存在chnInit.py中，然后相同目录下创建一个addID.py文件：</p>

<pre><code>import chnInit
import sys

target = sys.argv[1]
inclID = sys.argv[2]
with open(target, 'r') as src:
    with open(inclID, 'w') as dst:
        for content in src:
            line = content.strip()
            cgi = line.split(' ,')[0]
            node = line.split(' ,')[1].split(' ')[0]
            city = line.split(' ,')[1].split(' ')[1]
            nodeID = chnInit.get_word_initial(node)
            cityID = chnInit.get_word_initial(city)
            dst.write(cgi + ' ,' + city + ' ' + cityID + ' ' + node + ' ' + nodeID + '\n')
</code></pre>

<p>相同目录下保存输入文件input.csv，然后运行脚本：</p>

<pre><code>$ head input.csv
460010973309433 ,白云国际机场 广州
...

$ python addID.py input.csv loc_map.csv
$ head loc_map.csv
460010973309433 ,广州 GZ 白云国际机场 BYGJJC
...
</code></pre>

<p>根据Python文档7.2.1节："Methods of File Objects"中的描述：</p>

<blockquote><p>For reading lines from a file, you can loop over the file object.
This is memory efficient, fast, and leads to simple code:</p></blockquote>

<pre><code>with open(target, 'r') as f:
    for line in f:
        ...
</code></pre>

<p>这种方式比较节省内存，适于处理大文件。
当处理小文件时，可以用下面的方法将完整内容保存在一个变量中：</p>

<pre><code>with open('workfile', 'r') as f:
    read_data = f.read()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Svn检出文件名中含中文文件失败问题解决方法]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/27/163511/"/>
    <updated>2014-02-27T16:35:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/27/163511</id>
    <content type="html"><![CDATA[<p>有时使用svn检出时遇到这样的错误：</p>

<p>svn: Can&rsquo;t convert string from &lsquo;UTF-8&rsquo; to native encoding: &hellip;</p>

<p>这是可能是由于svn所在主机的当前字符集不支持Unicode造成的，确认方法是：运行"locale"指令，输出为：</p>

<pre><code>LANG=en_US.UTF-8
LANGUAGE=
LC_CTYPE="en_US"
LC_NUMERIC="en_US"
LC_TIME="en_US"
LC_COLLATE="en_US"
LC_MONETARY="en_US"
LC_MESSAGES="en_US"
LC_PAPER="en_US"
LC_NAME="en_US"
LC_ADDRESS="en_US"
LC_TELEPHONE="en_US"
LC_MEASUREMENT="en_US"
LC_IDENTIFICATION="en_US"
LC_ALL=en_US
</code></pre>

<p>&ldquo;en_US"后面没有&rdquo;.UTF-8"，/etc/default/locale文件的内容是：</p>

<pre><code>LC_ALL="en_US"
</code></pre>

<p>也没有".UTF-8"，解决方法很简单，在后面加上".UTF-8"，变为</p>

<pre><code>LC_ALL="en_US.UTF-8"
</code></pre>

<p>这时再运行locale命令，结果如下：</p>

<pre><code>LANG=en_US.UTF-8
LANGUAGE=
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
</code></pre>

<p>这时再检出中文文件名文件就不报错了。</p>

<p>在CentOS上，对应的locale文件是/etc/sysconfig/i18n。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英文版Windows 7支持中文显示和输入]]></title>
    <link href="http://leetschau.github.io/blog/2012/08/22/163810/"/>
    <updated>2012-08-22T16:38:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/08/22/163810</id>
    <content type="html"><![CDATA[<p>显示中文
Start -> Control Panel -> Region and Language:</p>

<p> Location -> &ldquo;Current Location&rdquo; 改为 &ldquo;China&rdquo;;</p>

<p> Administrative -> Change system locale&hellip; -> &ldquo;Current system locale&rdquo; 改为 &ldquo;Chinese (Simplified, PRC)&rdquo;;
 输入中文
这个比较简单，装一个搜狗输入法就行了，修改默认输入法：</p>

<p>Start -> Control Panel -> Region and Language -> Keyboards and Languages -> Change keyboards;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python脚本文件中使用中文]]></title>
    <link href="http://leetschau.github.io/blog/2010/01/10/095243/"/>
    <updated>2010-01-10T09:52:43+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/01/10/095243</id>
    <content type="html"><![CDATA[<p>Python做图形用户界面（GUI）开发时经常要在界面上显示中文，需要做如下处理（详见[1]和[2]2.3节）：</p>

<ol>
<li><p>在py文件的首行写上：# -<em>- coding:utf-8 -</em>-</p></li>
<li><p>保存py文件时要存为utf-8格式文件。</p></li>
</ol>


<p>[1] Python2.6 Documentation: The Python Language Reference: 2.1.4 Encoding declarations</p>

<p>[2] 孙广磊，征服Python—语言基础与典型应用，北京：人民邮电出版社，2007</p>
]]></content>
  </entry>
  
</feed>
