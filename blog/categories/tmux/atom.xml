<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tmux | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-08-27T14:11:47+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Develop With Tmux in Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/05/23/094625/"/>
    <updated>2014-05-23T09:46:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/05/23/094625</id>
    <content type="html"><![CDATA[<p>tmux is a terminal multiplexer. Its 3-level architecture &ldquo;session-window-pane&rdquo; is very flexible and powerful. Sessions are independent. Windows are different &ldquo;tabs&rdquo; in a session. And panes are different parts in a window. The multiplexer means if different hosts <strong>attach</strong> to the same session, they share the same screen, the same input and output, which like they sit together, use the same computer, so making pair-programming a breeze.</p>

<p>You can detach from a session while it&rsquo;s still kept by tmux server in background. This is very useful on servers. You use laptop attaching to a tmux server running a server machine, work for a while, then detach from this server, shutdown your laptop. Next time when you attach to it, all the works are kept from last detach, as if you didn&rsquo;t leave them.</p>

<p>You can move window between sessions, which is convinient for collaboration. For example, Bob works on session &ldquo;bob&rdquo; and Tom works on &ldquo;tom&rdquo;, Bob write some codes and want Tom to complete it. Then he can move his window to Tom&rsquo;s session. If he want pair-programming with Tom, he can tell Tom to detach from his own session &ldquo;tom&rdquo; and attach to &ldquo;bob&rdquo;. When finished, Tom detach from &ldquo;bob&rdquo; and attach to &ldquo;tom&rdquo; to continue his work.</p>

<p>Ref: &ldquo;tmux - Productive Mouse-Free Development&rdquo; by Brian P. Hogan.</p>

<h1>Getting help</h1>

<h2>List all binding keys</h2>

<pre><code>tmux list-keys
</code></pre>

<p>so if you know a shortcut, say [prefix]!, and want know the corresponding command, you can run</p>

<pre><code>tmux list-keys|grep !
</code></pre>

<p>then you get</p>

<pre><code>bind-key          ! break-pane 
</code></pre>

<p>So the corresponding command is &ldquo;break-pane&rdquo;.</p>

<h2>List all commands</h2>

<pre><code>tmux list-commands
</code></pre>

<h1>Define tmux startup shortcuts in Xfce, Mint</h1>

<p>Application Finder(Alt-F3) -> Keyboard -> Application shortcuts: Add
    Command: exo-open &ndash;launch TerminalEmulator xfce4-terminal &ndash;fullscreen -x tmux new -s basic
    Shortcut: Alt-[</p>

<h1>My configuration file</h1>

<pre><code>$ cat ~/.tmux.conf
# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# fix the window name
set-option -g allow-rename off

# Setting the prefix from C-b to Alt-f
set -g prefix M-f

# Free the original Ctrl-b prefix keybinding
unbind C-b

# quick window switching, -n means no need to use prefix
bind -n M-a select-window -t :+

# enable vi keys.
setw -g mode-keys vi

# Set the base index for windows to 1 instead of 0
set -g base-index 1

# Set the base index for panes to 1 instead of 0
setw -g pane-base-index 1

# setting the delay between prefix and command
set -sg escape-time 1
#set -sg repeat-time 1000

# Reload the file with Prefix r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Split window
bind | split-window -h
bind - split-window -v

# moving between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Pane resizing, -r means you can repeat this key bindings
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Copy mode
unbind [
bind j copy-mode
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection

# Update the status bar every sixty seconds
set -g status-interval 60

# set the status line's colors
set -g status-fg white
set -g status-bg black

# Status line left side
set -g status-left-length 40
set -g status-left "#[fg=green]session: #S #[fg=yellow]#I #[fg=cyan]#P"
set -g status-utf8 on

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

# Center the window list
set -g status-justify centre

# set the color of the window list
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim

# set colors for the active window tag in window list
setw -g window-status-current-fg white
setw -g window-status-current-bg blue
setw -g window-status-current-attr bright

# Status line right side
set -g status-right "%R #[fg=black bg=white]%F#[fg=white bg=black] #(/home/chad/apps/getBatteryStuatus)"
# setw -g status-right-attr bright

# Command / message line
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# Execute a command in a new window
bind C command-prompt "new-window -n %1 '%1'"
bind S command-prompt "new-window -n %1 'ssh %1'"
</code></pre>

<p>The last line shows that you can use parameters in key bindings. When you press A-f S, tmux propmt you to input a parameter, I input &ldquo;47&rdquo; and press <Enter>, it will open a new window named &ldquo;47&rdquo;, and run command &ldquo;ssh 47&rdquo;.</p>

<p>If your .tmux.conf doesn&rsquo;t take effect, run the following command to load config file explicitly (or find errors in file):</p>

<pre><code>tmux new
tmux source-file ~/.tmux.conf
</code></pre>

<p>The format strings in status line are interpreted as the followings:</p>

<ul>
<li><p>%X: date-time sign, such as %R is time, %F is date, etc. See full list in &ldquo;FORMAT controls the output&rdquo; section in <code>man date</code>;</p></li>
<li><h1>&hellip;: maybe the output of a shell command, or color of foreground/background, or an attribute. See full list in &ldquo;status-left&rdquo; of <code>man tmux</code>. These meta-data can be used both in status-left and status-right;</h1></li>
</ul>


<h1>Frequently used shortcuts</h1>

<p>According to the defualt shortcuts and above modifications:
    List existing sessions: tmux ls
    Attach to a session: tmux attach -t <session-name>, if there&rsquo;s only one window, you can use <code>tmux a</code> for short;
    Switch to next window: A-a (the default shortcut is <prefix n>)
    Detach from a session: A-f, d
    Jump to previous/next session: A-f, (/)
    Create new window: A-f, c
    Rename current window: A-f, <comma>
    Jump to a window according to it&rsquo;s number: A-f, <num> (see tmux&rsquo;s status line to get its number)
    Split current window horizontally/vertically: A-f, -/|
    Jump to another pane(sub-window): A-f, h/j/k/l
    Jump to next pane: A-f, o
    Move window to another session: A-f .(period)</p>

<h1>Window-Pane Management</h1>

<p>You can run <code>tmux ...</code> directly within tmux-managed sessions and windows, no need to detach from tmux environment beforehand. The only exception is <code>tmux attach</code>, which will produce a recursive attached tmux session, and messed up things.
All command of tmux has auto-completion, so it&rsquo;s very convenient to run tmux command within tmux window.
The equivalent way of running tmux command without command-line(such as in vi) is using shortcut &ldquo;A-f :&rdquo;.</p>

<h2>Turning a window into a pane</h2>

<ul>
<li><p>In the destination window: <code>tmux join-pane -s [source-window-number]</code>;</p></li>
<li><p>In the source window: <code>tmux join-pane -t [destination-window-number]</code>;</p></li>
<li><p>Specify source and destination windows both: <code>tmux join-pane -s [src-window-number] -t [dst-window-number]</code>;</p></li>
</ul>


<h2>Turning a pane into a window</h2>

<p>Use shortcuts &ldquo;A-f, !&rdquo; in the pane.</p>

<h2>Keep the window name fixed</h2>

<p>Add &ldquo;set-option -g allow-rename off&rdquo; into ~/.tmux.conf.</p>

<h2>Kill zombie window</h2>

<p><code>tmux kill-window -t [n]</code>, where [n] is the window number.</p>

<h1>Clipboard Management</h1>

<h2>Select/copy/paste text with shortcuts</h2>

<ol>
<li><p>Open copy mode: A-f, [</p></li>
<li><p>Move cursor: h/j/k/l;</p></li>
<li><p>Begin select: v</p></li>
<li><p>End select and copy to clipboard: y
or quit copy mode with <Enter>;</p></li>
<li><p>Paste text: A-f, p</p></li>
</ol>


<h2>Path share between windows</h2>

<p>I want to copy all files in window #1 to directory in window #2. The workflow is:</p>

<pre><code>A-f 2
tmux setb $PWD
A-f 1
cp * [A-f p]/
</code></pre>

<p>The trick is using <code>tmux setb</code> to copy working directory to buffer of tmux, then use [A-f p] to paste the path into the copy command. Don&rsquo;t forget the trailing slash at the end of cp command, it&rsquo;s necessary.</p>

<p>If parcellite is installed, there is a little simpler way to achieve this:</p>

<pre><code>A-f 2
pwd|parcellite
A-f 1
cp * [Ctrl-Alt-v]/
</code></pre>

<p>You can use <code>ls -l|parcellite</code> to add command output to parcellite buffer.</p>

<h2>Multiple Buffers Copy &amp; Paste</h2>

<p>tmux maintains a stack of copied buffers. So you can copy multiple times, and paste selected buffers in arbitrary order, with the help of following commands: list-buffer, show-buffer, choose-buffer, save-buffer.</p>

<p>Copy all the texts in the current pane with &ldquo;capture-pane&rdquo;(not including scrolled out texts).</p>

<h1>Customize status bar</h1>

<h2>Add battery status in tmux status bar</h2>

<p>Add the following line into ~/.tmux.conf:</p>

<pre><code>set -g status-right "%R #[fg=black bg=white]%Y %b %d#[fg=white bg=black] #(/home/chad/apps/getBatteryStuatus)"
</code></pre>

<p>And create a shell script named &ldquo;getBatteryStuatus&rdquo; under /home/chad/apps:</p>

<pre><code>upower -i /org/freedesktop/UPower/devices/battery_BAT0|awk '/^\s*percentage:/ {print $2}'
</code></pre>
]]></content>
  </entry>
  
</feed>
