<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 测试 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ce-shi/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-05T17:36:08+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在测试中使用对象持久化]]></title>
    <link href="http://leetschau.github.io/blog/2011/04/20/154806/"/>
    <updated>2011-04-20T15:48:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/04/20/154806</id>
    <content type="html"><![CDATA[<p>对象的保存：</p>

<p>import shelve</p>

<p>testdb = shelve.open(&lsquo;e:\bvtdb&rsquo;)</p>

<p>testdb[&lsquo;bvt&rsquo;] = bvt</p>

<p>testdb.close()</p>

<p>提取对象：</p>

<p>import shelve</p>

<p>db = shelve.open(&lsquo;e:\bvtdb&rsquo;)</p>

<p>bvt = db[&lsquo;bvt&rsquo;]</p>

<p>builder = ReportBuilder(bvt)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用TestNG进行并发测试]]></title>
    <link href="http://leetschau.github.io/blog/2010/09/17/173257/"/>
    <updated>2010-09-17T17:32:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/09/17/173257</id>
    <content type="html"><![CDATA[<p>写并发测试用例的时候不要用JUnit，它不支持并发，将测试函数写在public static void main(String[] args)中。但如果一个测试类里有多个并发测试case的时候这招就不灵了，需要用testng解决这个问题。在Eclipse中使用TestNG需要首先安装testng for eclispe的plugin（见[1]），然后引用testng的jar包。然后就可以写测试用例了。</p>

<p>testng声明并发测试很简单，示例如下（改自[3]）：</p>

<p> import org.testng.annotations.Test; @Test(invocationCount = 5, threadPoolSize = 3)
public void testThreadPool() {
 System.out.println(&ldquo;Thread: &rdquo; + Thread.currentThread().getId());
}
参数含义：（引自[2]）</p>

<p>invocationCount: The number of times this method should be invoked.（线程体总共被执行多少次）；
threadPoolSize: The size of the thread pool for this method. The method will be invoked from multiple threads as specified by invocationCount.（线程池的大小，也就是并发的线程数目是多少）
Note: this attribute is ignored if invocationCount is not specified
上面这个例子输出可能如下： Thread: 14
Thread: 13
Thread: 15
Thread: 14
Thread: 13
即程序共运行5次，共有3个线程。</p>

<p>[1] <a href="http://testng.org/doc/download.html">http://testng.org/doc/download.html</a></p>

<p>[2] <a href="http://testng.org/doc/documentation-main.html">http://testng.org/doc/documentation-main.html</a></p>

<p>[3] <a href="http://hi.baidu.com/sunshine/blog/item/9d355982cb1200a40cf4d2c9.html">http://hi.baidu.com/sunshine/blog/item/9d355982cb1200a40cf4d2c9.html</a></p>

<p> <a href="http://www.raptorconsultants.com/uncategorized/testng-junit/">http://www.raptorconsultants.com/uncategorized/testng-junit/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于JUnit的测试包和测试用例的模板]]></title>
    <link href="http://leetschau.github.io/blog/2010/07/22/155359/"/>
    <updated>2010-07-22T15:53:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/07/22/155359</id>
    <content type="html"><![CDATA[<p>测试用例
 模板代码见附录 1 ，实际的测试代码写在方法 dataPortTest 中，注意这个方法不能有参数和返回值，前面用 @Test 标示，就可以用 JUnit 测了，如果这个测试用例仅仅做单个测试，不加到测试包中，可以去掉 suite 和 SyncActorTest 两个方法。
 测试包
 模板代码见附录 2 ， addTest 的参数格式是 new TestClassName(“testMethodName”) ，一个测试类中可以有多个测试方法，一个包中可以测很多类，测试包可以很方便地选择需要测试的类和方法。
 附录 1
 package com.boco.godu.GAPI;
 import junit.framework.Assert;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import org.junit.Test;
 public class SyncActorTest extends TestCase {
 public static TestSuite suite() {
 TestSuite suite = new TestSuite();
 suite.addTest(new SyncActorTest(&ldquo;dataPortTest&rdquo;));
 return suite;
 }
 public SyncActorTest(final String name) {
 super(name);
 }
 @Test
 public void dataPortTest() {
 ConnFactory connFactory = new ConnFactory(&ldquo;10.0.2.47&rdquo;, 1235);
 connFactory.setUserName(&ldquo;<aa><7001><administrator><autocmd>&rdquo;);
 connFactory.setPassword(&ldquo;goduapp&rdquo;);
 Assert.assertEquals(&ldquo;goduapp&rdquo;, connFactory.getPassword());
 try {
 IConnection conn = connFactory.getConnection();
 Assert.assertEquals(IConnection.CONNECTION_INITIAL, conn.getStatus());
 ISyncActor syncActor = conn.getSyncActor();
 Document recXml = syncActor.sendCmd(&ldquo;ls id=1938695146&rdquo;).getXml();
 // some other Assert&hellip;
 syncActor.close();
 conn.close();
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
}
 附录 2
 package com.boco.godu.GAPI;
 import junit.framework.TestCase;
import junit.framework.TestSuite;
 public class GapiTestSuite extends TestCase {
 public static TestSuite suite() {
 TestSuite suite = new TestSuite();
 suite.addTest(new SyncActorTest(&ldquo;dataPortTest&rdquo;));
 suite.addTest(new SyncActorTest(&ldquo;dataPortTest2&rdquo;));
 suite.addTest(new SyncActorTest2(&ldquo;&hellip;&rdquo;));
 suite.addTest(&hellip;);
 return suite;
 }
}</p>
]]></content>
  </entry>
  
</feed>
