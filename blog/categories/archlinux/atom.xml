<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Archlinux | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-03T10:34:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Time Synchronization on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/20/103138/"/>
    <updated>2014-09-20T10:31:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/20/103138</id>
    <content type="html"><![CDATA[<p>Find out if current system time setup and services status is corrent: <code>timedatectl status</code>.
If not, run these commands as root to set correct timezne and sync time with Internet.
&#8220;`</p>

<h1>ln -s /usr/share/zoneinfo/Hongkong /etc/localtime</h1>

<h1>hwclock &ndash;systohc &ndash;utc</h1>

<h1>systemctl enable systemd-timesyncd.service</h1>

<h1>systemctl start systemd-timesyncd.service</h1>

<p>&#8220;`</p>

<p>Ref: <a href="https://wiki.archlinux.org/index.php/Time">Time - ArchWiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xen on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/17/215227/"/>
    <updated>2014-09-17T21:52:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/17/215227</id>
    <content type="html"><![CDATA[<p>Today I bought a new hard disk, and tried to install xen on it.</p>

<h1>Install Base ArchLinux</h1>

<ol>
<li><p>Start computer with USB key, choose x86_64, NBD;</p></li>
<li><p>This is not UEFI boot: an error raised when <code>efivar -l</code>;</p></li>
<li><p>Install system:</p>

<p> # rmmod tg3
 # modprobe broadcom
 # modprobe tg3
 # systemctl stop dhcpcd.service
 # dhcpcd enp2s0
 # sgdisk &ndash;zap-all /dev/sda
 # cgdisk /dev/sda
 // choose GPT partitions type, /dev/sda1: 50G, /dev/sda2: 300G, 581G free
 # mkfs.ext4 /dev/sda1
 # mkfs.ext4 /dev/sda2
 # mount /dev/sda1 /mnt
 # mkdir /mnt/home
 # mount /dev/sda2 /mnt/home
 # vi /etc/pacman.d/mirrorlist
 # export http_proxy=<a href="http://10.32.1.154:8888">http://10.32.1.154:8888</a>
 # export https_proxy=<a href="http://10.32.1.154:8888">http://10.32.1.154:8888</a>   // add the ip into &ldquo;allow&rdquo; list tinyproxy.conf
 # pacstrap -i /mnt base base-devel
 # genfstab -U -p /mnt >> /mnt/etc/fstab
 # vi /etc/locale.gen
 # locale-gen
 # echo LANG=en_US.UTF-8 > /etc/locale.conf
 # export LANG=en_US.UTF-8
 # ln -s /usr/share/zoneinfo/Hongkong /etc/localtime
 # hwclock &ndash;systohc &ndash;utc
 # echo xenserver > /etc/hostname
 # vi /etc/hosts
 # systemctl enable <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x64;&#x68;&#x63;&#112;&#99;&#100;&#64;&#x65;&#x6e;&#112;&#x32;&#115;&#x30;&#46;&#x73;&#101;&#x72;&#x76;&#105;&#x63;&#101;">&#100;&#104;&#99;&#x70;&#99;&#x64;&#64;&#x65;&#x6e;&#112;&#50;&#x73;&#x30;&#46;&#x73;&#x65;&#x72;&#x76;&#105;&#x63;&#101;</a>
 # passwd
 # export http_proxy=<a href="http://10.32.1.154:8888">http://10.32.1.154:8888</a>
 # export https_proxy=<a href="http://10.32.1.154:8888">http://10.32.1.154:8888</a>
 # pacman -S openssh
 # systemctl enable sshd.service
 # pacman -S gptfdisk            // use syslinux boot loader for GPT installed previously
 # pacman -S syslinux
 # syslinux-install_update -iam
 # vi /boot/syslinux/syslinux.cfg    // modify sda3 to sda1 in &ldquo;APPEND root=/dev/sda3&rdquo;
 # exit
 # reboot</p></li>
</ol>


<h1>Customize System</h1>

<p>After reboot, login as root and run:</p>

<pre><code># useradd -m chad
# passwd chad
# passwd -l root     // disable root login, use can remove this by `sudo passwd -u root`
# export http_proxy=http://10.32.1.154:8888
# export https_proxy=http://10.32.1.154:8888
# pacman -Syu
# pacman -S xorg-server xorg-server-utils xorg-xinit i3 dmenu xf86-video-intel terminator ttf-dejavu firefox
# su - chad
$ echo exec i3 &gt; ~/.xinitrc
$ startx
</code></pre>

<h1>Install Xen</h1>

<p>First make sure the host can access internet, then enable multilib repository, uncomment following lines in /etc/pacman.conf:</p>

<pre><code>[multilib]
Include = /etc/pacman.d/mirrorlist
</code></pre>

<p>Install yaourt, see note &ldquo;Yaourt Notes&rdquo; for details. Then run <code>yaourt -S xen</code>. If failed, install it manually:</p>

<p>Download xen.tar.gz, and run:</p>

<pre><code>tar xf xen.tar.gz
cd xen
makepkg
sudo pacman -U xen-4.4.1-1-x86_64.pkg.tar.xz
</code></pre>

<p>Config network:</p>

<pre><code># cd /etc/netctl
# cp examples/bridge xenbridge-dhcp
# vi xenbridge-dhcp
# netctl start xenbridge-dhcp
# brctl show
# netctl enable xenbridge-dhcp
</code></pre>

<p>Config services:</p>

<pre><code>sudo systemctl enable xenstored.service
sudo systemctl enable xenconsoled.service
sudo systemctl enable xendomains.service
</code></pre>

<p>Config boot loader. Add following stanza to /boot/syslinux/syslinux.cfg:</p>

<pre><code>LABEL xen
    MENU LABEL Xen
    KERNEL mboot.c32
    APPEND ../xen-4.4.1.gz --- ../vmlinuz-linux console=tty0 root=/dev/sda1 ro --- ../initramfs-linux.img
</code></pre>

<p>And make sure there is a &ldquo;mboot.c32&rdquo; file in folder /boot/syslinux, or you have to copy it:
<code>cp /usr/lib/syslinux/bios/mboot.c32 /boot/syslinux/</code>.</p>

<p>Note: If there is file conflicting errors, use <code>sudo pacman -U --force xen-4.4.1-1-x86_64.pkg.tar.xz</code> to install it.</p>

<p>Reboot, choose &ldquo;Xen&rdquo; at boot screen, then run <code>sudo xl list</code> (list all xen domains), you can see a &ldquo;Domain-0&rdquo; item.
If you boot with ArchLinux, run <code>sudo xl list</code> will report an error.</p>

<h1>Install Guest OS on Xen</h1>

<p>See <a href="http://wiki.xen.org/wiki/Xen_Configuration_File_Options#Disk_Devices">Xen Configuration File Options</a> for full syntax of xen domU config files.</p>

<h2>CentOS 6.5 minimal</h2>

<h3>PV</h3>

<p>Not succeed yet. Maybe we should use CentOS as dom0 system.</p>

<pre><code>$ mkdir ~/docs/cloud60
$ cd ~/docs/cloud60
$ dd if=/dev/zero of=cloud60.img bs=1M count=10240
$ mkfs.ext4 cloud60.img
$ sudo mount -o loop CentOS-6.5-x86_64-minimal.iso /mnt
$ cat cloud60.conf      // ???
$ sudo xl create -c cloud60.conf
</code></pre>

<h3>HVM</h3>

<pre><code>$ sudo pacman -S mesa-libgl bluez-libs tigervnc
$ mkdir ~/docs/cloud60
$ cd ~/docs/cloud60
$ dd if=/dev/zero of=cloud60.img bs=1M count=10240
$ mkfs.ext4 cloud60.img
$ sudo mount -o loop CentOS-6.5-x86_64-minimal.iso /mnt
$ cat cloud60.conf
name = "hvmcentos"
builder = "hvm"
memory = 1024
disk = [ "file:/home/chad/docs/cloud60/cloud60.img,xvda,w", "file:/home/chad/warez/CentOS-6.5-x86_64-minimal.iso,xvdb:cdrom,r" ]
vif = ["bridge=xenbr0"]
vnc = 1
vnclisten = "0.0.0.0"
vncdisplay = 1

$ sudo xl create cloud60.conf
$ sudo xl vncviewer hvmcentos
</code></pre>

<p>Or you can use <code>vncviewer localhost:5901</code> to connect to the guest OS, here the &ldquo;1&rdquo; in &ldquo;5901&rdquo; is determined by the value of &ldquo;vncdisplay&rdquo; in guest OS config file.
After connecting to the guest OS, install system, then reboot and connect it with vncviewer again.
You can use xl&rsquo;s subcommands &ldquo;list&rdquo;, &ldquo;top&rdquo; and &ldquo;info&rdquo; to probe domU systems.</p>

<h1>Using Xen</h1>

<p>Based on <a href="https://wiki.archlinux.org/index.php/Xen">Xen on Arch Wiki</a>.</p>

<p>Use Debian as dom0: <a href="http://wiki.xenproject.org/wiki/Xen_Project_Beginners_Guide#Installing_the_Xen_Project_Software">Xen Project Beginners Guide</a>;</p>

<p>Use CentOS as dom0: <a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart">Xen4 CentOS6 QuickStart</a>;</p>

<p>Use Ubuntu as dom0: <a href="https://help.ubuntu.com/community/Xen">Xen in Ubuntu Community</a>;</p>

<p>Other patterns see <a href="http://wiki.xenproject.org/wiki/Category:Guest_Install">Guest Install</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Spark Tasks on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/15/110702/"/>
    <updated>2014-09-15T11:07:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/15/110702</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<ol>
<li><p>Install JDK: <code>sudo pacman -S jdk7-openjdk</code>;</p></li>
<li><p>Download pre-build package (spark-1.1.0-bin-hadoop2.4.tgz) from <a href="http://spark.apache.org/">Apache Spark website</a>;</p></li>
<li><p>Extract and add path: <code>tar xf spark-1.1.0-bin-hadoop2.4.tgz</code>;</p></li>
</ol>


<h1>Run Spark script</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/30/104928/"/>
    <updated>2014-08-30T10:49:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/30/104928</id>
    <content type="html"><![CDATA[<h1>Mint</h1>

<pre><code># sudo aptitude update
# sudo aptitude install docker.io aufs-tools cgroup-lite apparmor-utils
# sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
# sudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io
# docker run ubuntu:14.04 echo 'hello ubuntu'
# docker version
Client version: 0.9.1
Go version (client): go1.2.1
Git commit (client): 3600720
Server version: 0.9.1
Git commit (server): 3600720
Go version (server): go1.2.1
Last stable version: 1.2.0, please update docker
</code></pre>

<h1>ArchLinux</h1>

<p>Docker is only available on X86_64 repository so far.</p>

<pre><code># pacman -S docker
# systemctl enable docker
# systemctl start docker
# docker run ubuntu:14.04 echo 'hello world'
# docker run -i -t ubuntu:14.04 /bin/bash
# lsb_release -a
Distributor ID: Ubuntu
Description: Ubuntu 14.04.1 LTS
Release: 14.04
Codename: trusty
# exit
# docker version
Client version: 1.2.0
Go version (client): go1.3.1
OS/Arch (client): linux/amd64
Server version: 1.2.0
Server API version: 1.14
Go version (server): go1.3.1
</code></pre>

<p>So you can see at least for now Docker is much newer and easy to use on Arch than on Mint (Ubuntu).
If you install &ldquo;tree&rdquo; with apt-get in the container, logout and relogin, you will find the &ldquo;tree&rdquo; command disappeared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qtile on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/21/113949/"/>
    <updated>2014-08-21T11:39:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/21/113949</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<pre><code>// Before install qtile, you need download python2-setuptools manually, and install it:
$ sudo pacman -U python2-setuptools-1_5.7-1-any.pkg.tar.xz
$ yaourt -S qtile-git
$ mkdir ~/.config/qtile
$ cp /usr/share/doc/qtile-git/default_config.py ~/.config/qtile/config.py
$ echo "exec qtile" &gt; ~/.xinitrc
$ python2 -m py_compile ~/.config/qtile/config.py    // check syntax for config.py
$ qsh
&gt; restart
&gt; quit
$ 
</code></pre>

<h1>Configuration</h1>

<p>Something import in config.py:</p>

<pre><code>mod = "mod4"    # the Win key as mod key
Key([mod], "Return", lazy.spawn("xterm")),   # start a shell, you can modify it as another virtual terminal, such as "xfce4-terminal"
Key([mod], "w", lazy.window.kill()),         # close a application
Key([mod, "control"], "r", lazy.restart()),  # reload Qtile after modify config.py
Key([mod, "control"], "q", lazy.shutdown()), # quit Qtile
</code></pre>
]]></content>
  </entry>
  
</feed>
