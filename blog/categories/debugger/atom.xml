<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Debugger | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/debugger/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-01T16:20:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Console Debugger]]></title>
    <link href="http://leetschau.github.io/blog/2014/05/28/105855/"/>
    <updated>2014-05-28T10:58:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/05/28/105855</id>
    <content type="html"><![CDATA[<p>Create a python file and debug it in gdb style with pdb:</p>

<pre><code>$ pdb testpdb.py
&gt; /home/chad/docs/tmp/testpdb.py(1)&lt;module&gt;()
-&gt; aa = 3
(Pdb) help
...
(Pdb) help l
...
(Pdb) l
  1  -&gt; aa = 3
  2     bb = 4
  3     cc = aa + bb
  4     print(cc)
[EOF]
(Pdb) w
  /usr/lib/python2.7/bdb.py(400)run()
-&gt; exec cmd in globals, locals
  &lt;string&gt;(1)&lt;module&gt;()
&gt; /home/chad/docs/tmp/testpdb.py(1)&lt;module&gt;()
-&gt; aa = 3
(Pdb) n
&gt; /home/chad/docs/tmp/testpdb.py(2)&lt;module&gt;()
-&gt; bb = 4
(Pdb) b 4
Breakpoint 1 at /home/chad/docs/tmp/testpdb.py:4
(Pdb) c
&gt; /home/chad/docs/tmp/testpdb.py(4)&lt;module&gt;()
-&gt; print(cc)
(Pdb) w
  /usr/lib/python2.7/bdb.py(400)run()
-&gt; exec cmd in globals, locals
  &lt;string&gt;(1)&lt;module&gt;()
&gt; /home/chad/docs/tmp/testpdb.py(4)&lt;module&gt;()
-&gt; print(cc)
(Pdb) p bb
4
(Pdb) c
7
The program finished and will be restarted
&gt; /home/chad/docs/tmp/testpdb.py(1)&lt;module&gt;()
-&gt; aa = 3
(Pdb) q
</code></pre>

<p>The command is exactly the same with gdb.</p>

<p>On some OS like ArchLinux, there isn&rsquo;t &ldquo;pdb&rdquo; command, so you have to find the location of &ldquo;pdb.py&rdquo;, then define an alias in ~/.zshrc:</p>

<pre><code>$ locate pdb.py
...
/usr/lib/python3.4/pdb.py
...
$ echo 'alias pdb="/usr/lib/python3.4/pdb.py"' &gt;&gt; ~/.zshrc
</code></pre>

<p>Now you can use &ldquo;pdb <script_file_name>&rdquo; as in Mint.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Erlang Program]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/24/104534/"/>
    <updated>2013-05-24T10:45:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/24/104534</id>
    <content type="html"><![CDATA[<p>Verified on Ubuntu 12.04 Desktop.</p>

<p>Assume debugged method is add2/2 in fordebug module as follows:</p>

<pre><code>-module(fordebug). 
-export([add/3]). 
add(A1, A2, A3) when is_integer(A1), is_integer(A2), is_integer(A3) -&gt; 
    add(A1, A2) * 100 + A3; 
add(_, _, _) -&gt; error. 
add(A1, A2) when A1 &gt;= 0, A2 &gt;= 0 -&gt; A1 + A2; 
add(_, _) -&gt; -1. 
</code></pre>

<h1>GUI Debugger</h1>

<ol>
<li><p>Compile source files with &ldquo;debug_info&rdquo; flag: in erlang REPL window, <code>c(fordebug, debug_info).</code>;</p></li>
<li><p>Start GUI debugger: <code>debugger:start().</code>, then &ldquo;Monitor&rdquo; window appears;</p></li>
<li><p>Config source file breakpoint:</p>

<ol type="a">
<li><p>[Module -> Interpret], choose the source file to be debuged(in Monitor window);</p></li>
<li><p>in Monitor window, double click fordebug, then the &ldquo;View Module&rdquo; window appears, set breakpoint here;</p></li>
</ol>
</li>
<li><p>begin debug: in erlang REPL window, <code>fordebug:add(3,4,5).</code>, in Monitor window you can see a row under &ldquo;PID&rdquo;, double click it, the &ldquo;Attach Process&rdquo; window appears, you can see source code at the top pannel, step, continue program execution by bottons at the center, see values of variables in the bottom-right pannel, and evaluate variables at the bottom-left pannel;</p></li>
</ol>


<h1>GUI debugger with the help of i module</h1>

<p>use ih(). to show help messages of i module.Repeat above procedure:</p>

<p>c(fordebug, debug_info).</p>

<p>im(). % start Monitor window</p>

<p>ii(fordebug). % add mySrcFile to Monitor,</p>

<p>%% use iq(mySrcFile) to remove mySrcFile from Monitor</p>

<p>%% use il(). showing all interpreted modules</p>

<p>ib(fordebug, add, 2).  % add breakpoint to at the first line of every clause of add/2</p>

<p>%% ir(). % clear all breakpoints</p>

<p>%% ipb().  % print all breakpoints</p>

<p>iaa([init]). % attach to a debugger process automatically</p>

<p>fordebug:add(4,6,8). % now Attach Process window appears, you can debug code in it</p>

<p>NOTE: when doing this in sublime text, erlang shell hangs after debug process ends. So it&rsquo;s recommended to debug in console.</p>

<h1>Command-line Debugger(not complete)</h1>

<p>dbg:start().</p>

<p>dbg:tracer().</p>

<p>dbg:tp(mySrcFile,</p>

<p>bingo.</p>
]]></content>
  </entry>
  
</feed>
