<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Directory | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/directory/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-18T14:12:11+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Change CWD in Python]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/24/115822/"/>
    <updated>2014-02-24T11:58:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/24/115822</id>
    <content type="html"><![CDATA[<p>The following script demonstrate that in Python, &ldquo;os.chdir()&rdquo; will change CWD globally, while run shell &ldquo;cd&rdquo; command with subprocess module is a &ldquo;local&rdquo; action. If you run &ldquo;cd dst;touch aaa&rdquo;, the file &ldquo;aaa&rdquo; will be created under folder dst, but after this sentence, the CWD won&rsquo;t remian in aaa.</p>

<pre><code>$ cat chdirtest.py
import subprocess, os

def runsh(cmd):
    return subprocess.check_output(cmd, shell=True)

def svn_checkout(src, dst, keepfolder=True):
    print('in svn_checkout before: ' + os.getcwd())
    print('in svn_checkout shell before: ' + runsh('pwd'))
    os.makedirs(dst)
    #os.chdir(dst)
    print('run cd and pwd: ' + runsh('cd ' + dst + ';pwd'))
    print('in svn_checkout after: ' + os.getcwd())
    print('in svn_checkout shell after: ' + runsh('pwd'))

def download():
    print('in download before: ' + os.getcwd())
    print('in download shell before: ' + runsh('pwd'))
    src = '7-Tools/deployment'
    svn_checkout(src, CODE_FOLDER)
    print('in download after: ' + os.getcwd())
    print('in download shell after: ' + runsh('pwd'))

if __name__ == '__main__':
    FOLDER_NAME = 'test'
    if not os.path.exists(FOLDER_NAME):
        os.makedirs(FOLDER_NAME)
    print('in main before: ' + os.getcwd())
    print('in main shell before: ' + runsh('pwd'))
    os.chdir(FOLDER_NAME)
    print('in main after: ' + os.getcwd())
    print('in main shell after: ' + runsh('pwd'))
    PKG_FOLDER = 'packages'
    CODE_FOLDER = 'codes'
    download()

$ python chdirtest.py
in main before: /home/chad/docs/gcp-deploy
in main shell before: /home/chad/docs/gcp-deploy

in main after: /home/chad/docs/gcp-deploy/test
in main shell after: /home/chad/docs/gcp-deploy/test

in download before: /home/chad/docs/gcp-deploy/test
in download shell before: /home/chad/docs/gcp-deploy/test

in svn_checkout before: /home/chad/docs/gcp-deploy/test
in svn_checkout shell before: /home/chad/docs/gcp-deploy/test

run cd and pwd: /home/chad/docs/gcp-deploy/test/codes

in svn_checkout after: /home/chad/docs/gcp-deploy/test
in svn_checkout shell after: /home/chad/docs/gcp-deploy/test

in download after: /home/chad/docs/gcp-deploy/test
in download shell after: /home/chad/docs/gcp-deploy/test
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make CLI Comfortable When Working in Multiple Directoies]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/21/135632/"/>
    <updated>2013-06-21T13:56:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/21/135632</id>
    <content type="html"><![CDATA[<h1>alias</h1>

<p>alias is command-line counterpart of hotstring of AutoHotkey, for example:</p>

<pre><code>alias vboat='vi ~/docs/erlang/boat.erl'

alias toerl='cd ~/docs/erlang' 
</code></pre>

<p>If hope for later use, save them in ~/.bash_aliases(if it&rsquo;s spacified in .bashrc), otherwise, ~/.bashrc.</p>

<h1>CDPATH</h1>

<p>$CDPATH to command &ldquo;cd&rdquo; is the same with $PATH with executables, or $CLASSPATH to command &ldquo;java&rdquo;. For example:</p>

<pre><code>bvt@pwm:~/docs/test/workspace$ CDPATH=/usr/share/ant 
bvt@pwm:~/docs/test/workspace$ cd lib 
/usr/share/ant/lib 
bvt@pwm:/usr/share/ant/lib$
</code></pre>

<p>Save the value of CDPATH in .bashrc for later use.</p>

<h1>Bookmarks of vim NerdTree</h1>

<p>See note &ldquo;Notes about NERDTree &rdquo;;</p>

<h1>Temporary directories switching</h1>

<p><code>pushd &lt;dir_name&gt;</code>: add <dir_name> to path stack and switch to it. For example <code>pushd .</code> add current path to path stack;</p>

<h2>Switch between two directories</h2>

<p><code>pushd</code>: swap top and second item in stack and switch to second path;</p>

<p>cd -: &ldquo;-&rdquo; is $OLDPWD;</p>

<h2>Switch between multiple directories</h2>

<p><code>pushd +n</code> or <code>pushd -n</code> (n is a 1,2,&hellip;): rotates the stack and change to the n-th path in stack, n is decided by <code>dirs -v</code> command;</p>

<h2>dirs &amp; popd</h2>

<p><code>dirs -v</code>: print the path stack;</p>

<p>See <a href="http://linux.about.com/library/cmd/blcmdl1_pushd.htm">Linux / Unix Command: pushd</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Directories Sync Utility on Mint]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/04/111553/"/>
    <updated>2013-06-04T11:15:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/04/111553</id>
    <content type="html"><![CDATA[<h1>Meld (GUI App)</h1>

<p>TotalCommander&rsquo;s Mint(Ubuntu) counterpart is &ldquo;Meld&rdquo;. It supports command-line invocation, much slower than TotalCmd, and its visual filters and backup policies are all weaker than that of TotalCmd(See note &ldquo; Auto Dir Sync Script Based on Total Commander &rdquo; for details). Use it from command line:</p>

<pre><code>meld dir1 dir2
</code></pre>

<p>Note: Gnome-commander is much like TotalCmd, and it can use Meld as sync tools.</p>

<h1>rsync</h1>

<pre><code>rsync -rtvu --delete &lt;src_folder&gt; &lt;dst_folder&gt;
</code></pre>

<p>for example:</p>

<pre><code>rsync -rtvu --delete ~/Documents/CalibreLib/ 'chad@10.21.3.31:/home/chad/Calibre Library'
</code></pre>

<p>very slow. Maybe you can fast it with adding a &ldquo;-c&rdquo; parameter(checksum): <code>rsync -rtuvc ...</code></p>

<p>In parameter list, r means recursive (including subdirs); t meas preserve modification time of the files; v means verbose; u means update, if the file in dst is newer than that in src, it will not be copied; &ndash;delete means delete files in destination folder which not exist in source folder.</p>

<p>Note: never forget the trailing slash of src_folder (that after dst_folder is unnecessary), or src_folder will be copied <strong>into</strong> the dst_folder.</p>

<p>Ref: <a href="http://www.jveweb.net/en/archives/2010/11/synchronizing-folders-with-rsync.html">Synchronizing folders with rsync</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Dir Sync Script Based on Total Commander]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/28/143757/"/>
    <updated>2012-12-28T14:37:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/28/143757</id>
    <content type="html"><![CDATA[<p>The Sync source folder is in e:\mydoc\CalibreLib, destination folder is M:\backup\CalibreLib, where M is the drive letter of an USB disk with label &ldquo;Emacs&rdquo;;</p>

<h1>Giving USB Disk a fixed Drive Letter</h1>

<p>Right click &ldquo;My Compter&rdquo; -> Manage -> Storage -> Disk Management. Right click the USB drive -> Change Drive Letter and Paths, and modify it to M. You can choose any letter between M~Z. A letter before M is not recommended because it could be occupied by virtual drives or CD-ROMs.</p>

<p>Test shows that other USB disk won&rsquo;t use the drive letter &ldquo;M&rdquo;. And this USB disk(&ldquo;Emacs&rdquo;) always use &ldquo;M&rdquo; no matter which USB port it&rsquo;s plugged in;</p>

<h1>Define Sync Configuration in Total Commander</h1>

<ol>
<li><p>Open e:\mydoc\CalibreLib in upper(left) panel in TC, M:\backup\CalibreLib in bottom panel;</p></li>
<li><p>Shift + F12(Commands -> Synchronize Dirs) to show the Sync window of TC;</p></li>
<li><p>Check &ldquo;Asymmetric&rdquo;(because I want a strict mirror of e:\mydoc\CalibreLib, not a copy. see TC doc for detailed explanation) and &ldquo;Subdirs&rdquo;;</p></li>
<li><p>Click the button at the left side of the directory input box and choose &ldquo;add current directories and settings to list&rdquo;. You can verify this by openning file wincmd.ini in TC&rsquo;s installation dir and you can find:</p></li>
</ol>


<p> [SyncOptions]
 BooksLib_L=E:\MyDoc\CalibreLib\
 BooksLib_R=M:\backup\CalibreLib\
 BooksLib_Wcs=<em>.</em>
 BooksLib_Flags=9|61|-9</p>

<p>In &ldquo;Configuration and Switches&rdquo; -> &ldquo;ini file Settings&rdquo; of TC&rsquo;s document file(TOTALCMD.CHM), you can find the explanations about settings above.</p>

<h1>Define a hotkey in AutoHotkey Script</h1>

<p>  #!s:: Run, d:\apps\TotalCmd\TOTALCMD.EXE /S=S:=BooksLib ; Sync Calibre dir to usb disk</p>

<h1>Use this auto sync script</h1>

<ol>
<li><p>Insert USB disk;</p></li>
<li><p>Press Win+Alt+s;</p></li>
<li><p>Sync tool of TC will start comparation automatically;</p></li>
<li><p>When comparation ends, check the result. If it&rsquo;s OK, press Enter to start Synchronize;</p></li>
</ol>


<p>That&rsquo;s it.</p>
]]></content>
  </entry>
  
</feed>
