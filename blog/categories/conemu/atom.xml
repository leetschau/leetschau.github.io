<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conemu | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/conemu/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Terminals Operation on Windows and Ubuntu]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/14/081549/"/>
    <updated>2013-05-14T08:15:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/14/081549</id>
    <content type="html"><![CDATA[<h1>基于多Tab页的Terminal工作环境</h1>

<p>Tmux可以很好的解决一台主机上的多任务并行问题，但如果需要同时在本机和远程主机上工作，
而且这两台主机上都需要运行Tmux，就会出现Tmux的嵌套问题。
这时可以同时运行多个Terminal App，但切换时容易混淆，
更好的方法是在一个Terminal App里创建多个标签页，每个标签页对应一台主机。
Ubuntu预装的Gnome Terminal不支持自定义快捷键，下面基于Terminator实现多标签页，
假设远程主机名为<code>alpha</code>.</p>

<p>在System settings -> Keyboard中创建自定义快捷键：<code>terminator</code>: Alt-F11</p>

<p>配置Terminator: 在 <em>Preferences</em> 中：</p>

<ul>
<li><p>Global: Maximised;</p></li>
<li><p>Profiles: 在 <em>Global</em> 子标签下：uncheck <em>Show titilebar</em>, check &ldquo;copy on selection&rdquo;;
若需要与tmux绑定，参考笔记"启动Console后自动进入tmux &ldquo;.</p></li>
<li><p>Keybindings: new_tab: Ctrl-Shift-T, next_tab: Ctrl-Shift-N;</p></li>
</ul>


<h2>工作流程</h2>

<ol>
<li>用<code>Alt-F11</code>打开Terminator，窗口自动最大化；</li>
<li>用<code>Ctrl-Shift-T</code>创建新标签，双击Tab页上的标题重命名
 （没有找到rename tab的快捷键），例如第一个tab设置为<code>local</code>，
 第二个tab标题设置为<code>alpha</code>等；</li>
<li>用<code>Ctrl-Shift-N</code>在多个标签间切换；</li>
<li>用<code>Ctrl-Shift-=</code>和<code>Ctrl--</code>放大/缩小字体；</li>
</ol>


<p>如果在alpha上的操作不复杂，只需要一个窗口，就不必采用多标签模式，
在本机启动Tmux，其中一个window SSH到远程主机就可以了。
这种情况下，第一个window命名为<code>local</code>，第二个命名为<code>alpha</code>.</p>

<h1>基于多Workspace的Terminal工作环境</h1>

<p>Termianl, a.k.a. console or command line, is a great tool to tell computers what
to do. It&rsquo;s efficient and cool to type some words in a terminal(of course
in full screen mode) and get all things done.
But if you have only one terminal on the screen, switching between directories
are always disturbing and time-consuming jobs. So to keyboard fans,
a terminal enhancement tool is necessary. With the help of
workspace (a.k.a. virtual desktop) switching tool and window arrangements
shortcuts, a geek&rsquo;s screen is like this:</p>

<ol>
<li><p>Put all GUI windows in workspace 1;</p></li>
<li><p>Put terminal windows in workspace 2;</p></li>
<li><p>In workspace 2, switch multiple terminal tool in full screen mode;</p></li>
<li><p>Use workspace switching shortcuts to switching between GUI workspace and terminal workspace;</p></li>
</ol>


<h1>Windows: Conemu + VirtuaWin</h1>

<p>Terminal full screen: alt + enter;</p>

<p>Split window: alt + h/v (split horizontal/vertical, defined in [Settings-> Keys &amp; Macros -> duplicate active &lt;<shell>> split to bottom/right]);</p>

<p>Switch between terminal: [ctrl + tab] or [Win + q];</p>

<p>Hide tab bar: Settings -> Features -> Tabs -> Don&rsquo;t show;</p>

<p>Switch workspace: alt + win + Left/Right/Up/Down (defined in Setup -> Hotkeys of VirtuaWin);</p>

<h1>Ubuntu: Teminator</h1>

<p>Auto run command when startup (ssh to a remote server in this case): terminator -x ssh bvt@10.0.2.74;</p>

<p>(use terminator -h for details. xterm and konsole also surppot -e <command> syntax).</p>

<p>Terminal full screen: F11 (defined in [System Settings -> Keyboard -> Shortcuts
-> Windows -> Toggle fullscreen mode]);</p>

<p>Split window: alt + h/v (split horizontal/vertical, defined in [Preference -> Keybindings -> split_horiz/split_vert]);</p>

<p>Switch between terminal: alt + Left/Right/Up/Down;</p>

<p>Toggle Window max/normal of one of all terminals:
ctrl + shift + z (defined in [Preferences -> Keybindings -> scaled_zoom]);</p>

<p>Make background transparent: [Preferences -> Profiles -> defaults -> Background -> Transparent background: 0.8];</p>

<p>copy on selection: [Preferences -> Profiles -> Copy on selection];</p>

<p>Switch workspace: alt + ctrl + Left/Right/Up/Down (defined in [System Settings -> Keyboard -> Shortcuts -> Navigation -> Move to workspace left/right/above/below]);</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Cygwin in ConEmu With Executor]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/10/150602/"/>
    <updated>2013-05-10T15:06:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/10/150602</id>
    <content type="html"><![CDATA[<p>Cygwin is powerful, but its single window interface is inconvenient. So I put it in ConEmu, and invoke it via Executor.</p>

<p>When define keyword in Executor, the command is &ldquo;d:\Apps\ConEmu\ConEmu.exe&rdquo;, parameters are &ldquo;/Single /cmd e:\myDoc\cygwinRoot\Cygwin.bat&rdquo;. Here &ldquo;/cmd&rdquo; can&rsquo;t be ommited, while it can be ommited when there is no &ldquo;/Single&rdquo; option. So the following two forms are valid:</p>

<p> d:\Apps\ConEmu\ConEmu.exe /Single /cmd e:\myDoc\cygwinRoot\Cygwin.bat</p>

<p> d:\Apps\ConEmu\ConEmu.exe e:\myDoc\cygwinRoot\Cygwin.bat</p>

<p>But &ldquo;d:\Apps\ConEmu\ConEmu.exe /Single e:\myDoc\cygwinRoot\Cygwin.bat&rdquo; is malformed, cygwin can&rsquo;t be invoked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ConEmu和Cmder笔记]]></title>
    <link href="http://leetschau.github.io/blog/2013/01/28/182753/"/>
    <updated>2013-01-28T18:27:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/01/28/182753</id>
    <content type="html"><![CDATA[<ul>
<li><p>在[Startup -> Environment]中添加<code>set PATH=%PATH%;d:\apps\nodejs;...</code>
可以在命令行里直接执行<code>node</code>.</p></li>
<li><p>Cmder中可以执行<code>ssh</code>, <code>ssh-keygen</code>和<code>scp</code>命令，
可以使用<code>.ssh/config</code>定义配置文件，所以在Cmder里连接Linux服务器的基本过程是：
用ssh-keygen生成本机的公/私钥对，然后在.ssh/config里定义Linux服务器的别名，
将本机的公钥拷贝到Linux服务器的.ssh/authorized_hosts中，
就可以使用别名免密码登录Linux服务器了；</p></li>
<li><p>所有console都关闭后是否在托盘区保留ConEmu图标：
Settings -> Main -> Task bar -> When last console is closed:
check &ldquo;Close ConEmu window&rdquo;;</p></li>
<li><p>单个窗口时隐藏tab页：Settings -> Features -> Tabs -> Tabs: check &ldquo;Auto show&rdquo;;</p></li>
<li><p>自定义命令别名：Settings -> Startup -> Environment: 在文本框中添加别名，
例如<code>alias e=exit</code>.</p></li>
<li><p>用ConEmu取代cmd.exe作为默认的Console程序环境：Settings -> Integration:
勾选"Force ConEmu as default terminal for console applications"
和"Register on OS startup"，重启操作系统之后生效。
结合proto，可以用Ctrl-U键在当前文件夹下启动ConEmu.</p></li>
</ul>


<h1>常用快捷键</h1>

<p>Win+Q: 下一个tab页；</p>

<p>Win+X: 新建一个tab页；</p>

<p>Win+Delete: 关闭当前tab页；</p>

<p>Ctrl + PgUp/PgDown: 向前/后翻页</p>

<p>Win+Alt+P: 打开设置窗体</p>

<h1>在TotalCmd中启动ConEmu等外部程序</h1>

<p>TotalCmd的Ctrl+G（Start DOS）可以在当前路径下启动命令行，但命令行窗口的字体太丑了，
需要以ConEmu（命令行增强工具）代替它，
不用Autohotkey或者Executor启动ConEmu的原因在于，
我们需要ConEmu启动后的当前目录是TotalCmd的当前目录，
这个值每次都不同，不可能配到这些全局性的程序里，
只能从TotalCmd里拿到当前目录然后启动ConEmu，实现方法如下：</p>

<ol>
<li><p>定义用户指令：主菜单 -> Commands -> Browse Internal Commands:
&ldquo;Category"选usercmd.ini，新建一个名为em_ConEmu的指令，
"Command"和"Icon file"都填"d:\Apps\ConEmu\ConEmu.exe"，
"Parameters"写&rdquo;/Single"（大小写敏感，新创建的窗口作为已有ConEmu窗口的tab，
而不是新开一个窗口），"Start path"留空，因为留空意味着以当前目录为起始目录；</p></li>
<li><p>为该指令指定快捷键：主菜单 -> Configuration -> Misc -> Redefine hotkeys，
快捷键设为Alt + G，Command设为em_ConEmu。</p></li>
</ol>


<p>这样就可以用Alt + G启动增强的命令行了，
同样的方法可以启动其他任何需要获得TotalCmd当前路径的可执行程序；</p>

<p>要查看已经定义的快捷键，点击"Hotkey"单选框后面的小三角按钮，
就会列出所有已定义的快捷键。</p>

<h1>其他</h1>

<ul>
<li>ConEmu还有其他很多有用的命令行参数，使用ConEmu.exe /help查看。</li>
</ul>

]]></content>
  </entry>
  
</feed>
