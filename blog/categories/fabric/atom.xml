<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fabric | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/fabric/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-04T11:47:14+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Manage Website Remotely]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/05/095056/"/>
    <updated>2015-03-05T09:50:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/05/095056</id>
    <content type="html"><![CDATA[<h1>Prerequisite</h1>

<h2>Managing Node</h2>

<p>// Install Fabric with <code>sudo pip install fabric</code>.</p>

<p>Install ansible with <code>sudo pip install ansible</code>.</p>

<h2>Provision of remote host</h2>

<p>Create user with <code>sudo useradd -m chad</code>,
then add ssh-auto-login with <code>ssh-copy-id ...</code>.</p>

<p>// Install Node.js, MongoDB,</p>

<h1>Backup MongoDB</h1>

<h1>Import new data</h1>

<h1>Update website codes</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Remote Execution Tool Without Installation]]></title>
    <link href="http://leetschau.github.io/blog/2014/07/29/111148/"/>
    <updated>2014-07-29T11:11:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/07/29/111148</id>
    <content type="html"><![CDATA[<p>The following is a question I want to post to StackOverflow.com:</p>

<p>I am developing a environment detection tools, which gather information of many hosts and compare them with some standards.</p>

<p>However it&rsquo;s not allowed to install anything on these hosts. So my plan is running some shell scripts remotely on these hosts via ssh, such as &ldquo;free&rdquo;, &ldquo;df&rdquo;, &ldquo;java -version&rdquo;, etc.</p>

<p>There are many tools for deployment automation, such as Salt, Puppet, CFEngine, etc. But they all need to install something all the client. I found Fabric meet my needs, but the function is a little limited. So my question is:</p>

<p>Are there any remote execution tools without installation on client, like Fabric?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Fabric 1.8.3 on a Internet-blocked CentOS 6.4]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/10/201906/"/>
    <updated>2014-04-10T20:19:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/10/201906</id>
    <content type="html"><![CDATA[<p>This host can&rsquo;t access internet directly, but I built a tinyproxy server on 10.21.3.31:8888. So on this host I setup a HTTPS proxy:</p>

<pre><code># export https_proxy=http://10.21.3.31:8888
# export http_proxy=http://10.21.3.31:8888
</code></pre>

<p>Then pip can use this proxy to install fabric.</p>

<p>The following installation process is based on <a href="http://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/">How to install Python 2.7 and Python 3.3 on CentOS 6</a></p>

<ol>
<li><h1>yum groupinstall development</h1></li>
<li><h1>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</h1></li>
<li><p>Download Python 2.7.6 source code tarball from <a href="http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz">http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz</a></p></li>
<li><h1>tar xf Python-2.7.6.tar.xz</h1></li>
<li><h1>cd Python-2.7.6</h1></li>
<li><h1>./configure &ndash;prefix=/usr/local &ndash;enable-unicode=ucs4 &ndash;enable-shared LDFLAGS=&ldquo;-Wl,-rpath /usr/local/lib&rdquo;</h1></li>
<li><h1>make &amp;&amp; make altinstall</h1></li>
<li><p>Verify: <code>which python2.7</code></p></li>
<li><p>Download setuptools-3.4.3.zip from <a href="https://pypi.python.org/pypi/setuptools">https://pypi.python.org/pypi/setuptools</a></p></li>
<li><h1>unzip setuptools-3.4.3.zip</h1></li>
<li><h1>cd setuptools-3.4.3</h1></li>
<li><h1>python2.7 setup.py install</h1></li>
<li><p>Download pip-1.5.4.tar.gz from <a href="https://pypi.python.org/pypi/pip">https://pypi.python.org/pypi/pip</a></p></li>
<li><h1>tar zxvf pip-1.5.4.tar.gz</h1></li>
<li><h1>cd pip-1.5.4</h1></li>
<li><h1>python2.7 setup.py install</h1></li>
<li><p>Verify: <code>which pip2.7</code>;</p></li>
<li><h1>pip2.7 install fabric</h1></li>
</ol>


<p>If it doesn&rsquo;t work, download <a href="https://pypi.python.org/pypi/Fabric/1.8.3">Fabric-1.8.3.tar.gz</a>, paramiko-1.12.3.tar.gz and pycrypto-2.6.1.tar.gz on PYPI, the install them locally:</p>

<pre><code># pip2.7 install pycrypto-2.6.1.tar.gz
# pip2.7 install paramiko-1.12.3.tar.gz
# pip2.7 install Fabric-1.8.3.tar.gz
</code></pre>

<ol>
<li>Verify: <code>fab --version</code>;</li>
</ol>


<p>Bingo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distribute SSH Pubkey to Multiple Hosts With Fabric]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/31/115253/"/>
    <updated>2014-03-31T11:52:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/31/115253</id>
    <content type="html"><![CDATA[<ol>
<li><p>Generate ssh keys on source host with <code>ssh-keygen</code>;</p></li>
<li><p>Disable known_hosts prompt(optional): add &ldquo;StrictHostKeyChecking no&rdquo; into ~/.ssh/config;</p></li>
<li><p>Run fabric script to distribute pubkey, you have to input password manually: <code>fab distkey</code>;</p></li>
</ol>


<p>$ cat fabfile.py
from fabric.api import local, task
env.hosts = [&lsquo;10.0.2.48&rsquo;, &lsquo;10.0.2.49&rsquo;, &lsquo;10.0.7.141&rsquo;, &lsquo;10.0.7.142&rsquo;, &lsquo;10.0.7.143&rsquo;]
@task
def distkey():
    env.user = &lsquo;gcp&rsquo;
    local(&lsquo;ssh-copy-id %(user)s@%(host)s&rsquo; % env)</p>

<p>You have to input password for every host. So try to use uniform password for all hosts. It will save you lots of times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task Management in Fabric]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/28/182817/"/>
    <updated>2014-03-28T18:28:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/28/182817</id>
    <content type="html"><![CDATA[<p>I am developing a environment detect application with Fabric. Basically it run many tests on many hosts, then produce a summary report, optionally sending a email. So there are 2 strategies:</p>

<ul>
<li><p>Define global hosts, when detections over, modify the hosts to none, so report and send email will only run once;</p></li>
<li><p>Use &ldquo;report&rdquo; as entrance, invoke detection within &ldquo;report&rdquo; task.</p></li>
</ul>


<h1>Global hosts style</h1>

<p>fabfile.py:</p>

<pre><code>from fabric.api import run, env, hosts
import re

env.hosts = ['Chad@10.0.2.47', 'chad@10.0.2.49']
env.password = 'abaqus67'
env['report'] = {}

def checkJDK():
    res = run('java -version')
    cre = 'java version .*1.6.0.*Java\(TM\)'
    return len(re.findall(cre, res, re.S)) &gt; 0

def checkMem(str):
    re.findall('.*buffers/cache.*\d+\s+(\d+)', str)

def checkOS():
    res = run('uname -a')
    return res.split()[0]

def detect():
    host_report = {}
    host_report['os'] = checkOS()
    host_report['jdk'] = checkJDK()
    env['report'][env.host] = host_report
    env.hosts = []    # make following tasks run once

def report():
    print('Test Report:')
    print(env.report)

def sendmail():
    print('send mail...')
</code></pre>

<p>Run it:</p>

<pre><code>$ fab --hide=everything detect report sendmail
Test Report:
{'10.0.2.49': {'os': 'Linux', 'jdk': True}, '10.0.2.47': {'os': 'Linux', 'jdk': False}}
send mail...
</code></pre>

<h1>&ldquo;execute&rdquo; style</h1>

<p>fab2.py:</p>

<pre><code>from fabric.api import run, env, task, execute
import re

def checkJDK():
    res = run('java -version')
    cre = 'java version .*1.6.0.*Java\(TM\)'
    return len(re.findall(cre, res, re.S)) &gt; 0

def checkMem(str):
    re.findall('.*buffers/cache.*\d+\s+(\d+)', str)

def checkOS():
    res = run('uname -a')
    return res.split()[0]

def detect():
    env.password = env.loginfo[env.host_string]
    host_report = {}
    host_report['os'] = checkOS()
    host_report['jdk'] = checkJDK()
    return host_report

@task
def report():
    env.hosts= ['gcp@10.0.2.48', 'gcp@10.0.2.49', 'gcp@10.0.7.141', 'gcp@10.0.7.142', 'gcp@10.0.7.143:22']
    pwds = ['gcp', 'gcp', 'gcp@123', 'gcp@123', 'gcp@123']
    env.loginfo = dict(zip(env.hosts, pwds))
    res = execute(detect, hosts=host_list)
    print('Test Report:')
    print(res)

@task
def sendmail():
    print('send mail...')
</code></pre>

<p>Run it:</p>

<pre><code>$ fab -f fab2.py --hide=everything report sendmail
Test Report:
{'gcp@10.0.2.47': {'os': 'Linux', 'jdk': False}, 'gcp@10.0.2.49': {'os': 'Linux', 'jdk': True}, ... }
send mail...
</code></pre>

<p>You can see there is no definition and modification of global hosts, no need to maintain global variable env[&lsquo;report&rsquo;] manually in &ldquo;report&rdquo; style, and the &ldquo;detect&rdquo; function is hide from &ldquo;fab&rdquo; command line with the help of &ldquo;@task&rdquo; decorator. If you run &ldquo;fab detect&rdquo;, it will complain &ldquo;Command(s) not found&rdquo;, which provides more accurate visibility control. So I think it&rsquo;s better than the &ldquo;global hosts&rdquo; style.</p>

<p>Notes:</p>

<ol>
<li><p>Yuo can add attributes to &ldquo;env&rdquo; directly like &ldquo;env.loginfo = &hellip;&rdquo; above. And use this attribute with &ldquo;env.loginfo[&hellip;]&rdquo;;</p></li>
<li><p>The format of host string is &ldquo;user@ip:port&rdquo;, or &ldquo;user@ip&rdquo; if port is 22;</p></li>
<li><p>The function &ldquo;execute&rdquo; returns a dict, the key is the host_string, the value is the return value of the function executed (&ldquo;detect&rdquo; in this case). The return value of &ldquo;detect&rdquo; is a dict, so the &ldquo;execute&rdquo; function returns a nested dict.</p></li>
<li><p>the return value of &ldquo;run&rdquo; is the stdout and stderr of the remote command.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
