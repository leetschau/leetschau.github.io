<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Json | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于Flask的Python微服务]]></title>
    <link href="http://leetschau.github.io/blog/2016/04/29/104211/"/>
    <updated>2016-04-29T10:42:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/04/29/104211</id>
    <content type="html"><![CDATA[<h1>收发JSON报文</h1>

<p>下面基于Flask实现了最简单的JSON报文收发功能，收到请求后打印出内容，
重新组织后返回给客户端。
使用Flask的request.get_json()接收HTTP POST中的JSON报文，
使用json.dumps()发送JSON报文：</p>

<p>创建并启动服务：
```
cat &lt;&lt; EOF > server.py
from flask import Flask, request
import json</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route(&lsquo;/api/<user>/<uuid>&rsquo;, methods=[&lsquo;GET&rsquo;, &lsquo;POST&rsquo;])
def add_message(user, uuid):
  content = request.get_json()
  print(content)
  return json.dumps({&ldquo;user&rdquo;: user, &ldquo;uuid&rdquo;: uuid})</p>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:
  app.run(host= &lsquo;0.0.0.0&rsquo;, port=3000, debug=True)
EOF</p>

<p>python server.py
```</p>

<p>用httpie和jq测试：
<code>http POST localhost:3000/api/chad/097aa543 head:='{"a1":"bb","c3":"dd"}' body=theBody | jq '.user'</code></p>

<h1>一个简单的Python微服务实现</h1>

<p>下面这个服务接收HTTP请求发送来的shell脚本，执行之，并根据用户需求返回控制台输出。
为了保证服务器的安全，生产环境中的这类服务需要校验客户端身份，
并为传入的命令设置白名单。</p>

<p>服务器接收的url包括mode和uuid两个字段，mode分exec和poll两种情况，
前者要求服务器开始执行Post body中的指令，后者查看当前运行指令的控制台输出。
uuid可以用于验证客户端合法性，例如客户端以"调用者+时间戳"并加密后生成uuid，
服务器验证调用者和时间戳的有效性。</p>

<p>服务端的配置项包括服务监听的端口以及返回控制台输出的行数。</p>

<p>创建并启动服务：
```
cat &lt;&lt; EOF > server.py
from flask import Flask, request
import json
from subprocess import Popen, PIPE
from threading import Thread
from queue import Queue</p>

<p>PORT = 3000
CMD_LINE_NUM = 3</p>

<p>app = Flask(<strong>name</strong>)
output_q = Queue(CMD_LINE_NUM)
cmd_q = []</p>

<p>def save_newest_output(p, queue, cmds):
    while p.poll() is None:
        line = p.stdout.readline().decode().strip()  # blocking read
        if queue.full():
            queue.get()   # abandon old output silently
        queue.put(line)
    cmds.clear()</p>

<p>@app.route(&lsquo;/api/<mode>/<uuid>&rsquo;, methods=[&lsquo;GET&rsquo;, &lsquo;POST&rsquo;])
def run_cmd(mode, uuid):
    if mode == &lsquo;exec&rsquo;:
        if len(cmd_q) > 0:
            return json.dumps({&ldquo;mode&rdquo;: mode, &ldquo;status&rdquo;: &ldquo;busy&rdquo;})
        cmd = request.get_json()[&lsquo;cmd&rsquo;]
        proc = Popen(cmd, shell=True, stdout=PIPE)
        cmd_q.append(proc)
        t = Thread(target=save_newest_output, args=(proc, output_q, cmd_q))
        t.daemon = True
        t.start()
        return json.dumps({&ldquo;mode&rdquo;: mode, &ldquo;status&rdquo;: &ldquo;accepted&rdquo;})
    if mode == &lsquo;poll&rsquo; and len(cmd_q) > 0:
        lines = []
        while not output_q.empty():
            line = output_q.get_nowait()
            lines.append(line)
        return json.dumps({&ldquo;mode&rdquo;: mode,
                           &ldquo;status&rdquo;: &ldquo;running&rdquo;,
                           &ldquo;output&rdquo;: &lsquo;\n&rsquo;.join(lines)
                           })
    return json.dumps({&ldquo;mode&rdquo;: mode, &ldquo;status&rdquo;: &ldquo;finished&rdquo;})</p>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:
    app.run(host=&lsquo;0.0.0.0&rsquo;, port=PORT, debug=True)
EOF
python server.py
```
Shell脚本在一个单独的进程中运行，并由一个独立的Thread读取它的输出，
保证HTTP服务不会被阻塞。</p>

<p>测试客户端：
<code>
cat &lt;&lt; EOF &gt; test.py
from time import sleep
for i in range(28, 49):
    print(i, flush=True)
    sleep(2)
EOF
http POST localhost:3000/api/exec/097aa543 cmd='python3 test.py'    # accepted
http POST localhost:3000/api/exec/097aa543 cmd='python3 test.py'    # busy
http POST localhost:3000/api/poll/097aa543         # realtime output: 30, 31, 32
sleep 10
http POST localhost:3000/api/poll/097aa543         # realtime output: 37, 38, 39
sleep 40
http POST localhost:3000/api/poll/097aa543         # status: finished
http POST localhost:3000/api/exec/097aa543 cmd='python3 test.py'    # accepted
</code></p>

<p>为了保证输出不会被缓存，需要在print函数中增加<code>flush=True</code>，只有Python 3支持，
所以运行测试脚本时需要用<code>python3 test.py</code>.</p>

<p>在Python 3.4.3, Flask 0.10.1上测试通过。</p>

<h1>服务管理</h1>

<p>这里使用<a href="http://supervisord.org/">Supervisor</a>管理Python进程，
相比于Monit, start-stop-daemon等工具，它的优点是不依赖pidfile，配置方便，
提供日志输出，文档写得好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty-print JSON in Command Line]]></title>
    <link href="http://leetschau.github.io/blog/2016/01/13/174140/"/>
    <updated>2016-01-13T17:41:40+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/01/13/174140</id>
    <content type="html"><![CDATA[<p>Option 1:</p>

<pre><code>npm install -g json
echo '{"foo": "lorem", "bar": "ipsum"}' | json
</code></pre>

<p>Option 2:</p>

<pre><code>echo '{"foo": "lorem", "bar": "ipsum"}' | python -m json.tool
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transport JavaScript Objects Between Meteor Pages via URI]]></title>
    <link href="http://leetschau.github.io/blog/2015/07/07/103347/"/>
    <updated>2015-07-07T10:33:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/07/07/103347</id>
    <content type="html"><![CDATA[<h1>Tips</h1>

<ul>
<li><p>object -> String -> object:
JSON.stringify -> encodeURI -> | another page | -> decodeURI -> JSON.parse</p></li>
<li><p>Use &ldquo;&amp;&rdquo; to connect multiple query items in uri;</p></li>
</ul>


<h1>Code Demo</h1>

<p>On page 1:</p>

<pre><code>var filterObj = { year: '2016', pos: '中国' };
var filterStr = JSON.stringify(filterObj);
var enc = encodeURI(filterStr);
console.log(enc);
var myRoute = "/results/2015/pages/1?type=basic&amp;filter=" + enc
Router.go(myRoute);
</code></pre>

<p>On page 2:</p>

<pre><code>var queryType = this.params.query.type;
var filterStr = this.params.query.filter;
var dec = decodeURI(filterStr);
var filterObj = JSON.parse(dec);
console.log(filterObj);
</code></pre>

<h1>Ref</h1>

<ul>
<li><p>matejkramny&rsquo;s answer in <a href="http://stackoverflow.com/questions/1086404/string-to-object-in-js">String to object in JS</a>;</p></li>
<li><p><a href="http://www.w3schools.com/jsref/jsref_decodeuri.asp">JavaScript decodeURI() Function</a>;</p></li>
<li><p>vartec&rsquo;s answer in <a href="http://stackoverflow.com/questions/724526/how-to-pass-multiple-parameters-in-a-querystring">How to pass multiple parameters in a querystring</a>;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Data for Newfairs.com]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/20/194901/"/>
    <updated>2015-02-20T19:49:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/20/194901</id>
    <content type="html"><![CDATA[<h1>Prerequisites</h1>

<p>First install MongoDB, node.js and csvkit.</p>

<p>For node.js, download node binary package (node-v0.10.33-linux-x64.tar.gz in my case) from its website,
extract and add binary folder into $PATH. For example, add the following line into ~/.zshenv:</p>

<pre><code>PATH=$HOME/apps/node-v0.10.33-linux-x64/bin:$PATH
</code></pre>

<p>For MongoDB, download its binary package (mongodb-linux-x86_64-2.6.5.tgz in my case) from its website,
extract and add binary folder into $PATH:</p>

<pre><code>PATH=$HOME/apps/mongodb-linux-x86_64-2.6.5/bin:$PATH
</code></pre>

<p>Install csvkit with <code>sudo pip install csvkit</code>.</p>

<h1>Preparation</h1>

<ol>
<li><p>Convert Excel (xls/xlsx) file to csv file: <code>in2csv data.xls &gt; data.csv</code>;</p></li>
<li><p>(Optional) Convert file encoding: <code>iconv -f gbk -t utf8 data20150218.csv &gt; input.csv</code>;</p></li>
<li><p>Examine data: <code>head input.csv | csvjson -i 4</code>;</p></li>
<li><p>Start MongoDB server for importing data: <code>mongod</code>;</p></li>
</ol>


<h1>Import Data</h1>

<p>In case you want to overwrite old data, you need backup old collection:
start a mongodb client, make a copy of the old collection (the original collection is &ldquo;fairs&rdquo;):</p>

<pre><code>$ mongo
&gt; db.fairs.renameCollection('fairsBak')
</code></pre>

<p>P.S. You can make a copy of a collection with <code>db.fairs.copyTo('fairsBak')</code>.</p>

<p>Now import new data to collection &ldquo;fairs&rdquo;:</p>

<pre><code>./importdata
</code></pre>

<h1>Under the hood</h1>

<p>importdata:</p>

<pre><code>#!/bin/bash

# convert the csv file encoding with:
# iconv -f gbk -t utf8 xxx.csv &gt; input.csv
INP='input.csv'
TargetDB='test'
TargetCol='fairs'

RAW='rawdata.json'
RES='result.json'
if [[ ! -f $INP ]]; then
  echo File input.csv not exists!
  exit 1
fi
rm -rf $RAW $RES
csvjson $INP &gt; $RAW
node checkTransform
mongoimport -d $TargetDB -c $TargetCol --type json --file $RES --jsonArray
rm -rf $RAW $RES
</code></pre>

<p>checkTransform.js:</p>

<pre><code>var data = require('./rawdata.json');
var fs = require('fs');
var result = []

data.forEach(function(elem) {
  var aFair = JSON.parse( JSON.stringify(elem) );
  aFair.indexStr = {};
  aFair.indexStr['name'] = (elem.chnName + ' ' + elem.engName).trim();
  aFair.indexStr['sponsor'] = elem.sponsor;
  aFair.indexStr['undertaker'] = elem.undertaker;
  aFair.indexStr['category'] = elem.category;
  aFair.indexStr['simpleSearch'] = elem.chnName + ' ' + elem.engName + ' ' + elem.position + ' ' + elem.time + ' ' + elem.category;

  if (elem.sponsor) {
    aFair['sponsor'] = [];
    elem.sponsor.split('|').forEach(function(spr) {
      var aSponsor = {};
      var sps = spr.split('$');
      aSponsor['name'] = sps[0];
      aSponsor['tel'] = sps[1];
      aSponsor['fax'] = sps[2];
      aSponsor['email'] = sps[3];
      aSponsor['website'] = sps[4];
      aFair.sponsor.push(aSponsor);
    });
  }

  if (elem.undertaker) {
    aFair['undertaker'] = [];
    elem.undertaker.split('|').forEach(function(udt) {
      var aUndertaker = {};
      var uds = udt.split('$');
      aUndertaker['name'] = uds[0];
      aUndertaker['tel'] = uds[1];
      aUndertaker['fax'] = uds[2];
      aUndertaker['email'] = uds[3];
      aUndertaker['website'] = uds[4];
      aFair.undertaker.push(aUndertaker);
    });
  }

  if (elem.category) {
    aFair['category'] = [];
    elem.category.split('|').forEach(function(catStr) {
      var aCat = {};
      var cats = catStr.split('$');
      aCat['major'] = cats[0] === '?' ? '' : cats[0];
      aCat['minor'] = cats.slice(1);
      aFair.category.push(aCat);
    });
  }

  result.push(aFair);
});

fs.writeFile('result.json', JSON.stringify(result));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Data From Files Into Mongodb]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/08/114328/"/>
    <updated>2014-12-08T11:43:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/08/114328</id>
    <content type="html"><![CDATA[<h1>From CSV File</h1>

<p>Here I use mongoDB&rsquo;s mongoimport tool to import csv file into Meteor app&rsquo;s Mongodb.</p>

<p>First download mongodb package (mongodb-linux-x86_64-2.6.5.tgz) from <a href="http://www.mongodb.org/">mongoDB</a>, extract it into ~/apps folder.</p>

<p>Next start the Meteor app. Open a new terminal window, in project root folder, run <code>meteor mongo</code>.
You can see something like &ldquo;connecting to: 127.0.0.1:3001/meteor&rdquo;.
This tells us database server is listening on port 3001, and database name is &ldquo;meteor&rdquo;.</p>

<p>Save the following codes into app&rsquo;s $HOME/private folder as importdb.sh:</p>

<pre><code>mongoimport -h localhost:3001 --db meteor --collection fairs --type csv --file fairs.csv --headerline
</code></pre>

<p>Here &ldquo;-d&rdquo; equals to &ldquo;&ndash;db&rdquo;, &ldquo;-c&rdquo; equals to &ldquo;&ndash;collection&rdquo;.
And the source csv file is saved in file private/fairs.csv.</p>

<p>It&rsquo;s headerline (first line of csv file) is also comma-seperated:</p>

<pre><code>Name, Age, Job
Bob, 35, Cooker
Tom, 28, Coder
...
</code></pre>

<p>Now in the Meteor app, add <code>Fairs = new Meteor.Collection("fairs");</code> into js file to use the data.</p>

<h1>From JSON File</h1>

<h2>Json Lint</h2>

<p>Validate the json file with <a href="https://github.com/zaach/jsonlint">jsonlint</a>.</p>

<p>You need install node.js, then install jsonlint with <code>npm install jsonlint -g</code>.
Next check the json file with <code>jsonlint myfile.json</code>.</p>

<h2>Import from Json File</h2>

<p>Use the following commands to import json objects from a file:</p>

<pre><code>mongoimport -h localhost:3001 -d meteor -c fairs --type json --jsonArray --file demo.json
</code></pre>

<p>Or if your mongod is running on localhost, use the following line to import
(no need to create the target database and collection before import):</p>

<pre><code>mongoimport -d meteor -c fairs --type json --file first31.json --jsonArray
</code></pre>

<p>This is a sample of the imported json file:</p>

<pre><code>[
  { name: "Widget 1",
    desc: "This is Widget 1"
  },
  { name: "Widget 2",
    desc: "This is Widget 2"
  }
]
</code></pre>

<p>If the &ldquo;&ndash;jsonArray&rdquo; option is omitted, the json file have to keep each object in one line, like this:</p>

<pre><code>{ name: "Widget 1", desc: "This is Widget 1" }
{ name: "Widget 2", desc: "This is Widget 2" }
</code></pre>

<p>See <code>mongoimport --help</code> for details.</p>
]]></content>
  </entry>
  
</feed>
