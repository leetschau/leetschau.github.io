<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Submodule | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/submodule/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Submodule的同步问题]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/17/140426/"/>
    <updated>2016-03-17T14:04:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/17/140426</id>
    <content type="html"><![CDATA[<h1>获取更新</h1>

<pre><code>git submodule foreach --recursive 'git fetch --all'
</code></pre>

<h1>列出remote比local新的submodule和所在分支</h1>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'|grep behind -B1
</code></pre>

<p>查看最新的提交在哪个分支上</p>

<pre><code>git submodule foreach --recursive 'git for-each-ref --sort=-committerdate --count=1'
</code></pre>

<h1>查询local branch与remote branch之间的关系</h1>

<p>这一步的目的是为了避免后面做<code>git pull --all</code>时无法确定merge目标branch.</p>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'
</code></pre>

<p>如果一个repository早已设置好remote和local之间的对应关系（见Note2），
则可以跳过这一步。</p>

<p>显示origin中每个branch的情况：</p>

<pre><code>git submodule foreach --recursive 'git remote show origin'
</code></pre>

<h1>同步到本地分支上</h1>

<pre><code>git submodule foreach --recursive 'git pull --all'
</code></pre>

<p>如果上面的命令由于Git无法确定merge目标失败，先执行：</p>

<pre><code>git submodule foreach --recursive 'git checkout master'
</code></pre>

<p>再执行<code>git pull</code>命令。</p>

<h1>回退</h1>

<p>任何时候如果想放弃本地所做的修改，用<code>git submodule update</code>返回到初始状态。</p>

<h1>切换到工作分支</h1>

<pre><code>git submodule foreach --recursive 'git checkout $(git for-each-ref --count=1 --sort=-committerdate| grep -oE "[^/]+$")'
</code></pre>

<p>其中<code>git for-each-ref</code>拿到最新的一次commit及其所在分支，
用<code>grep</code>命令得到分支名称，在checkout出此分支。</p>

<p>参考：</p>

<p><a href="http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit">http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit</a></p>

<p><a href="http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field">http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field</a></p>

<h1>Note</h1>

<h2>Note1</h2>

<p>如果希望查询某个时间点后的提交：</p>

<pre><code>git --no-pager submodule foreach --recursive 'git log --since="2016-03-05" --pretty=oneline --all --decorate'
</code></pre>

<p>这里的<code>--no-pager</code>避免<code>git log</code>进入"pager"（即类似于vim或者less的全屏风格）模式。</p>

<h2>Note2</h2>

<p>Local branch与remote branch的关系实际上是定义在<code>.git/config</code>文件中的，
对于Meteor package, 这个文件是
&ldquo;<APP_PROJ_HOME>/.git/modules/packages/<PACKAGE_NAME>/config"，例如：</p>

<pre><code>[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/25/212008/"/>
    <updated>2015-10-25T21:20:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/25/212008</id>
    <content type="html"><![CDATA[<h1>Git submodule as Meteor package</h1>

<p>We have a parent (container) Meteor application &ldquo;niufour&rdquo;,
now we want to add a new package &ldquo;nf-search&rdquo; to niufour.</p>

<p>Make sure if <code>packages/</code> has been added into .gitignore.</p>

<p>Push the nf-search (outside of niufour folder) to remote repo,
here we use a Phabricator server, with address <remote-repo-url>.</p>

<p>Under the root of niufour, run:</p>

<pre><code>git submodule add &lt;remote-repo-url&gt; packages/nf-search
</code></pre>

<p>While &ldquo;packages/&rdquo; is always in niufour/.gitignore, you should add module with:</p>

<pre><code>git submodule add -f &lt;remote-repo-url&gt; packages/nf-search
</code></pre>

<p>The common form is: <code>git submodule add &lt;remote-repo-url&gt; &lt;local-path&gt;</code>,
where the <local-path> is where you want to put your submodule.</p>

<p>To add it into the niufour package list,
add <code>nfcommerce:nf-search</code> into file <niufour-project-root>/.meteor/packages.</p>

<p>After your partner push new codes into the repo,
run commands below to synchronize:</p>

<pre><code>git pull origin develop
git submodule update --init --recursive
</code></pre>

<p>Use <code>git submodule status</code> to list current commit of each subpackage.</p>

<h1>Keep demo state in parent project</h1>

<p>A demo need both codes and data at the exact state of the verified time.
So if your project has not submodules, use commit and tag to record the demo state.</p>

<p>Otherwise, you can use commits in parent project to record demo state.
In the example above, suppose niufour has another submodule &ldquo;nf-core&rdquo;.
In the development process, commit on &ldquo;develop&rdquo; branch in each submodule,
without commit on niufour.
Only when PM (project manager) verified the demo,
and all developers have committed and pushed in each submodule,
PM commits, tags and pushes <strong>in parent project</strong> by himself:</p>

<pre><code>cd /path/to/niufour
git add -A
git commit -m "this is for demo of 2015.11.04"
git tag "demo-2015.11.04"
git push origin develop
</code></pre>

<p>Then pm dump the database (<code>mongodump</code> for MongoDB) to a folder
with the same name of the tag name (here it&rsquo;s &ldquo;demo-2015.11.04&rdquo;).</p>

<p>At the demo day, the PM restore the data into a new database (<code>mongorestore</code> for example),
then run commands below to restore the codes for demo:</p>

<pre><code>git clone &lt;url-of-niufour&gt;
git checkout demo-2015.11.04
git submodule init
git submodule update
</code></pre>

<p>Note: To demonstrate the usage of git submodule,
use example in &ldquo;Git权威指南&rdquo;, 23.1 ~ 23.3, by 蒋鑫.</p>
]]></content>
  </entry>
  
</feed>
