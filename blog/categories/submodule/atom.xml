<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Submodule | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/submodule/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-04T11:47:14+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Submodule]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/25/212008/"/>
    <updated>2015-10-25T21:20:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/25/212008</id>
    <content type="html"><![CDATA[<h1>Git submodule as Meteor package</h1>

<p>We have a parent (container) Meteor application &ldquo;niufour&rdquo;,
now we want to add a new package &ldquo;nf-search&rdquo; to niufour.</p>

<p>Make sure if <code>packages/</code> has been added into .gitignore.</p>

<p>Push the nf-search (outside of niufour folder) to remote repo,
here we use a Phabricator server, with address <remote-repo-url>.</p>

<p>Under the root of niufour, run:</p>

<pre><code>git submodule add &lt;remote-repo-url&gt; packages/nf-search
</code></pre>

<p>The common form is: <code>git submodule add &lt;remote-repo-url&gt; &lt;local-path&gt;</code>,
where the <local-path> is where you want to put your submodule.</p>

<p>To add it into the niufour package list,
add <code>nfcommerce:nf-search</code> into file <niufour-project-root>/.meteor/packages.</p>

<p>After your partner push new codes into the repo,
run commands below to synchronize:</p>

<pre><code>git pull origin develop
git submodule init
git submodule update
</code></pre>

<h1>Keep demo state in parent project</h1>

<p>A demo need both codes and data at the exact state of the verified time.
So if your project has not submodules, use commit and tag to record the demo state.</p>

<p>Otherwise, you can use commits in parent project to record demo state.
In the example above, suppose niufour has another submodule &ldquo;nf-core&rdquo;.
In the development process, commit on &ldquo;develop&rdquo; branch in each submodule,
without commit on niufour.
Only when PM (project manager) verified the demo,
and all developers have committed and pushed in each submodule,
PM commits, tags and pushes <strong>in parent project</strong> by himself:</p>

<pre><code>cd /path/to/niufour
git add -A
git commit -m "this is for demo of 2015.11.04"
git tag "demo-2015.11.04"
git push origin develop
</code></pre>

<p>Then pm dump the database (<code>mongodump</code> for MongoDB) to a folder
with the same name of the tag name (here it&rsquo;s &ldquo;demo-2015.11.04&rdquo;).</p>

<p>At the demo day, the PM restore the data into a new database (<code>mongorestore</code> for example),
then run commands below to restore the codes for demo:</p>

<pre><code>git clone &lt;url-of-niufour&gt;
git checkout demo-2015.11.04
git submodule init
git submodule update
</code></pre>

<p>Note: To demonstrate the usage of git submodule,
use example in &ldquo;Git权威指南&rdquo;, 23.1 ~ 23.3, by 蒋鑫.</p>
]]></content>
  </entry>
  
</feed>
