<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Average | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/average/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Meteor应用中计算用户评分平均值]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/08/163932/"/>
    <updated>2015-02-08T16:39:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/08/163932</id>
    <content type="html"><![CDATA[<p>以下方法使用的客户端展现代码(html)是一样的：
<code>&lt;h2&gt;展会评分：&lt;span class="label label-success"&gt;&lt;/span&gt;&lt;/h2&gt;</code>.</p>

<h1>使用MapReduce</h1>

<p>MapReduce一次性将所有展会的用户评分平均值计算出来，优点是每次用户请求页面时不需要计算，直接从计算结果中取值。
缺点是实时性差，由于MapReduce计算比较耗时，且计算结果存储在一个单独的collection中，
新的计算结果会覆盖旧的，所以不能一次只计算一个展会的平均值（因为计算结果collection会覆盖掉有来包含所有结果的collection），
只能在服务清闲的时间（比如凌晨）进行一次批量计算。</p>

<p>在MongoDB中运行mapReduce：</p>

<pre><code>db.userComments.mapReduce(
    function(){ emit(this.fairId, this.rank); },
    function(key, values) { return Array.avg(values); },
    { out: "rank_avg" }
);
</code></pre>

<p>客户端控制器(js):</p>

<pre><code>UserAvgRank = new Mongo.Collection("rank_avg");

Template.UserComments.helpers({
  rankAverage: function() {
    var rec = UserAvgRank.findOne({ _id: Router.current().params._id });
    return Math.round(rec.value * 10) / 10;
  }
});
</code></pre>

<h1>aggregate计算平均值</h1>

<p>使用MongoDB collection的aggregate方法在用户请求时实时计算平均值，优缺点与MapReduce方法正好相反。</p>

<p>在Meteor 1.0.3版本中，不支持collection的aggregate方法，
可以通过安装meteorhacks:aggregate包的方法解决这个问题，但这个方法也只能运行在服务端。</p>

<pre><code>Template.UserComments.helpers({
  rankAverage: function() {
    var rec = Comments.aggregate( [ {$match: {fairId: Router.current().params._id} }, { $group: {_id: "$fairId", avgRank: {$avg: "$rank"}} } ]);
    return Math.round(rec.avgRank * 10) / 10;
  }
});
</code></pre>

<h1>JavaScript手工计算</h1>

<p>也是一种实时计算方法，代码量最大，但版本依赖性小。</p>

<pre><code>Template.UserComments.helpers({
  rankAverage: function() {
    var rateNum = Comments.find().count();
    if (rateNum === 0) return false;
    var total = 0;
    Comments.find( {} ).forEach(function(elem) {
      total = total + elem.rank;
    });
    var avg = total / rateNum;
    return Math.round(avg * 10) / 10;
  }
});
</code></pre>
]]></content>
  </entry>
  
</feed>
