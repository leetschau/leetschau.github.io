<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dependency | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/dependency/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-18T20:45:37+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Clojure Script With External Dependencies Without Leiningen]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/04/163536/"/>
    <updated>2013-12-04T16:35:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/04/163536</id>
    <content type="html"><![CDATA[<p>The normal way of deploy clojure files is using leiningen. But if we have no leiningen, or the script is small and unnecessary to pack as a leiningen project, we can build a &ldquo;bare&rdquo; clojure script in the following way.</p>

<ol>
<li><p>Get the dependency jar files, 2 options:</p>

<ol type="a">
<li><p>download the jar file directly;</p></li>
<li><p>if the dependency project provide the dependency as leiningen dependency items in porject.clj (for example, &ldquo;[org.clojure/data.json "0.2.3&rdquo;]&ldquo; in <a href="https://github.com/clojure/data.json">data.json</a>), you can build the leiningen project following Parse Sonarqube Data via Web API in Clojure , then copy the denpendency jar files from the ~/.m2/repository folder;</p></li>
</ol>
</li>
<li><p>Build srcipt: get-sonar-data.clj</p>

<p> (require &lsquo;[clojure.data.json :as json])
 (def url &ldquo;<a href="http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes">http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes</a>&rdquo;)
 (def data (json/read-str (slurp url)))
 (println ((first data) &ldquo;name&rdquo;))
 (println ((first ((first data) &ldquo;msr&rdquo;)) &ldquo;val&rdquo;))</p></li>
<li><p>Run script: java -cp &lsquo;./*:.&rsquo; clojure.main get-sonar-data.clj</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use `Resolve Dependency in Workspace` Feature of IvyDE to Resolve Project Dependency in Develop Stage]]></title>
    <link href="http://leetschau.github.io/blog/2011/07/07/113549/"/>
    <updated>2011-07-07T11:35:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/07/07/113549</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
