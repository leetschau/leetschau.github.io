<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pmd | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/pmd/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-09-20T21:23:24+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用PMD检查代码质量]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/20/202912/"/>
    <updated>2013-03-20T20:29:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/20/202912</id>
    <content type="html"><![CDATA[<h1>Eclipse插件方式</h1>

<h2>安装</h2>

<p><a href="http://pmd.sourceforge.net/">PMD</a>的eclipse插件有两个，一个是官网上Plugins->Eclipse Plugins链接指向的页面，安装说明里只给出了在线安装的方法（update link是<a href="http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/%EF%BC%89%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%AF%B4%E6%98%8E%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%8C%E8%BF%99%E4%B8%A4%E5%A4%A9sourceforge.net%E8%A2%AB%E5%A2%99%E4%BA%86%EF%BC%8C%E5%8F%AA%E8%83%BD%E5%9C%A8eclipse%E9%87%8C%E7%94%A8%E4%BB%A3%E7%90%86%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AA%E6%8F%92%E4%BB%B6%E3%80%82">http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/%EF%BC%89%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%AF%B4%E6%98%8E%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%8C%E8%BF%99%E4%B8%A4%E5%A4%A9sourceforge.net%E8%A2%AB%E5%A2%99%E4%BA%86%EF%BC%8C%E5%8F%AA%E8%83%BD%E5%9C%A8eclipse%E9%87%8C%E7%94%A8%E4%BB%A3%E7%90%86%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AA%E6%8F%92%E4%BB%B6%E3%80%82</a></p>

<p>另外还有一个开源项目叫<a href="http://sourceforge.net/projects/pmd-eclipse/">pmd-eclipse</a>，提供离线安装包，解压到dropins目录后能使用，但没有规则配置和文件过滤选项，也没有结果汇总视图，不要用这个插件。</p>

<h2>使用</h2>

<h3>配置</h3>

<p>插件装好后在Preference->PMD下会有几个子项目，包括"Rule Configuration"中选择代码检查规则，"File Filters"里指定被检查文件的范围等。这里配置的是全局规则。</p>

<p>配置规则时首先在group by中选择Rule set，这样查找起来比较方便，然后再选择具体哪项检查规则，如下图：</p>

<p>项目属性->PMD下也可以选择规则，但没提供“全部选中/取消”按钮，300多项规则要一个一个选，太麻烦，别用了。</p>

<h3>检查</h3>

<p>右键->PMD->Check Code就开始检查了，检查完自动打开PMD Perspective，在"Violations Overview"里显示汇总结果，如果要修改检查规则重新检查，并且不想保留就结果，"右键被检查项目 -> PMD -> Clear Violations"清除之前的结果，否则新旧结果会被叠加在一起。</p>

<h3>生成检查报告</h3>

<p>首先在Preference->PMD->Reports下选择生成报告的格式（只有text格式可用，其他格式运行时都报空指针异常），然后"右键被检查项目 -> PMD -> Generate Reports"，在项目根目录下会生成一个reports文件夹，里面是检查报告。</p>

<h1>命令行方式</h1>

<p>E:\workspace\JDK6UTF8\Godu3NewBuffer>d:\Apps\pmd-bin-5.0.1\bin\pmd.bat -d src -f html -R rulesets/java/codesize.xml > out.html</p>

<p>-d后面写被检查的目录（或者文件），-f后面写输出文件的格式，-R后面是规则名称，实际这些规则保存在$PMD_HOME/lib/pmd-5.0.1.jar/rulesets/java中；</p>

<h1>总结</h1>

<p>PMD和Checkstyle的eclipse插件都提供了比较好的实时代码质量监控能力，PMD提供的结果汇总面板使开发人员可以对项目代码整体质量有一个把握，生成报告功能也很实用，而CheckStyle为每一个项目定制configuration的方法在不同项目应用不同规则时特别方便，适合在开发过程中“实时监控”（见笔记“ 使用CheckStyle检查代码复杂度 ”）。</p>

<p>本文使用markdown语法。</p>
]]></content>
  </entry>
  
</feed>
