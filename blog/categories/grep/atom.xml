<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grep | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/grep/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T16:21:37+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Search String in Files in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/18/145606/"/>
    <updated>2013-12-18T14:56:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/18/145606</id>
    <content type="html"><![CDATA[<p>Question: Working in vim, I want to search a string, say &ldquo;ord&rdquo;, in some files (say *.hs), in current folder (and all its subfolders), while I don&rsquo;t want to leave vim.</p>

<p>Answer:</p>

<h1>Search List Version</h1>

<p>:vim /ord/ *.hs</p>

<p>You will auto jump to the first matched file. If you don&rsquo;t want this auto-jump, use &ldquo;:vim /ord/j *.hs&rdquo;. Now you can use &ldquo;:cn&rdquo; or &ldquo;:cp&rdquo; to traverse between all matched files, or use &ldquo;:cw&rdquo; to open search result window (use &ldquo;:clo&rdquo; to hide this window).</p>

<h1>No Search List Version</h1>

<p>:lv ord *.hs</p>

<p>There is no search result window (quickfix window) for this &ldquo;lv&rdquo; command. And you can&rsquo;t use &ldquo;:cn&rdquo; and &ldquo;:cp&rdquo; also.</p>

<h1>Fast Search Version</h1>

<p>:grep ord *.hs</p>

<p>You will see a grep result in console. After pressing <Enter>, you come back to vim, &ldquo;:cn&rdquo;, &ldquo;:cp&rdquo; and &ldquo;:cw&rdquo;, etc. are the same with above. This version use system &ldquo;grep&rdquo; command, so it&rsquo;s faster than &ldquo;:vim&rdquo;.</p>

<p>Ref:</p>

<p><a href="http://vim.wikia.com/wiki/Find_in_files_within_Vim">http://vim.wikia.com/wiki/Find_in_files_within_Vim</a></p>

<p>google &ldquo;vim quickfix&rdquo;</p>

<p>:h :vim, :h :grep, :h lv</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Total Testcase Number in JUnit Report File With Grep and Awk]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/06/111936/"/>
    <updated>2013-12-06T11:19:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/06/111936</id>
    <content type="html"><![CDATA[<p>Under $JENKINS_HOME/jobs/GSP/workspace/build/work/plugins(we call this folder as &ldquo;basedir&rdquo;), there are many bundle folders. Some of them were compiled, so there are many test report file &ldquo;TEST-<full-name>.xml&rdquo; in <bundle-name>/build/unittest_report, for example, com.boco.gsp.element.decision.config/build/unittest_report/TEST-com.boco.gsp.decision.config.parser.DecisionParserTest.xml. The content of this file is:</p>

<p> &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?></p>

<p> <testsuite errors="0" failures="0" hostname="
pwm" name="com.boco.gsp.decision.config.parser.DecisionParserTest" tests="3" time="0.127" timestamp="2013-12-05T19:25:11"></p>

<p>  <properties></p>

<p>   &hellip;</p>

<p> </testsuite></p>

<p>In this case the testcase number is 3 according to &lsquo;test=&ldquo;3&rdquo;&rsquo;. Now we need get the total number of testcases with following steps:</p>

<ol>
<li><p>find all these test report file under ${basedir};</p></li>
<li><p>get the testcase number;</p></li>
<li><p>add all these number up;</p></li>
<li><p>print the result;</p></li>
</ol>


<p>We achieve this by the following command under ${basedir}:</p>

<p> grep -Po &lsquo;(?&lt;=tests=&ldquo;)\d+&rsquo; <em>*/TEST-</em>.xml | awk -F&#8217;:&lsquo; &rsquo;{SUM += $2; print $1 &rdquo;: &ldquo; $2} END {print &#8220;Total: &rdquo; SUM}&#8217;</p>

<p>&ldquo;-P&rdquo; let grep interpret pattern as perl regular expression. &ldquo;-o&rdquo; means only output the matched part. &ldquo;(?>=&hellip;)&rdquo; eliminates the text in parenthesis. &ldquo;-F&rdquo; of awk specify the delimiter. This command works on zsh because the &ldquo;<em>*/</em>&rdquo; syntax only valid on zsh. If you use bash, you have to modify this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search or Replace String Recursively in a Directory on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/26/095735/"/>
    <updated>2013-06-26T09:57:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/26/095735</id>
    <content type="html"><![CDATA[<h1>Find String Using grep</h1>

<h2>in zsh</h2>

<p>grep target_pattern <em>*/</em>.erl</p>

<h2>in bash</h2>

<p>grep -r &ndash;include=&ldquo;*.java&rdquo; Forward .</p>

<p>Format: grep [-r] [&ndash;include=&ldquo;&hellip;&rdquo;] searched_target_pattern search_base_dir, in which -r means search recursively (including subfolders), &ndash;include specify file types;</p>

<h1>Replace String Using Perl</h1>

<p><code>perl -i -pe 's/oldstring/newstring/g' &lt;file_pattern&gt;</code>. For example, if you want replace all &ldquo;windows&rdquo; with &ldquo;linux&rdquo; in directory &ldquo;~/docs&rdquo; in all xml files, and save old files as &ldquo;*.bak&rdquo;, yuo shoud run the following command in docs:</p>

<pre><code>perl -i.bak -pe 's/windows/linux/g' *.xml
</code></pre>

<p>Note: there is no blank between &ldquo;-i&rdquo; and &ldquo;.bak&rdquo;;</p>

<p>Replace all files including subdirs:</p>

<pre><code>perl -i.bak -pe 's/windows/linux/g' **/*.xml
</code></pre>

<p>No backup file needed:</p>

<pre><code>perl -i -pe 's/windows/linux/g' **/*.xml
</code></pre>

<p>Do not modify file, output to console:</p>

<pre><code>perl -pe 's/windows/linux/g' aa.xml
</code></pre>

<p>Ref: <a href="http://vasir.net/blog/ubuntu/replace_string_in_multiple_files/">http://vasir.net/blog/ubuntu/replace_string_in_multiple_files/</a></p>
]]></content>
  </entry>
  
</feed>
