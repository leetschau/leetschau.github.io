<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webserver | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/webserver/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-09-25T20:12:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jetty做webserver示例]]></title>
    <link href="http://leetschau.github.io/blog/2011/01/26/163426/"/>
    <updated>2011-01-26T16:34:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/01/26/163426</id>
    <content type="html"><![CDATA[<p>使用jetty做webserver大体可分为3步：首先配置webserver，如指定起始页是哪个文件等，然后利用jetty写一个server，放在某一个类的main()方法里，最后用shell脚本启动这个main()方法。但实际启动webserver的过程则正好相反，用户首先运行shell脚本，这个脚本运行一个java的main()方法，这个方法里定义了配置文件在什么地方，首先启动哪个页面。下面按照运行顺序分别说明这三个步骤。
 运行启动脚本
脚本应该是一个bat(on windows)或者sh(on unix)文件，下面是一个bat示例：</p>

<p>&ldquo;%JAVA_HOME%\bin\java&rdquo; -javaagent:%GODU_HOME%\WebRoot\WEB-INF\lib\spring\org.springframework.instrument-3.0.4.RELEASE.jar -Xms256m -Xmx512m -Dfile.encoding=GBK -Dservice_name=goduweb -Djava.awt.Window.locationByPlatform=true -cp %JARS% com.boco.godu.web.server. SimpleJettyServer 8080</p>

<p>实际上就是在%JARS%指定的所有jar包里搜索名为SimpleJettyServer的类，运行其main方法，且带一个参数8080；
 写启动类
下面是一个类main()方法内容：</p>

<p>public static void main(final String[] args) throws Exception {</p>

<p>if(args.length>0){</p>

<p> try{</p>

<p>port= Integer.parseInt(args[0]);</p>

<p> }catch(NumberFormatException e){</p>

<p>throw new Exception(&ldquo;web端口设置出错！&rdquo;);</p>

<p> }</p>

<p>}</p>

<p> Server server = new Server();</p>

<p>SelectChannelConnector connector = new SelectChannelConnector();</p>

<p>connector.setPort(port);</p>

<p>connector.setThreadPool(new QueuedThreadPool(150));// 设置服务线程数量</p>

<p>server.addConnector(connector);</p>

<p>WebAppContext context = new WebAppContext();</p>

<p> context.setContextPath(&ldquo;/godu&rdquo;);</p>

<p> context.setDescriptor(&ldquo;WebRoot/WEB-INF/web.xml&rdquo;);</p>

<p> context.setResourceBase(&ldquo;WebRoot&rdquo;);</p>

<p>context.setConfigurationDiscovered(true);</p>

<p>server.setHandler(context);</p>

<p> server.start();</p>

<p>}</p>

<p>其中"Server server = new Server();&ldquo;中的Server类的全名是org.eclipse.jetty.server.Server，因此最后"server.start()"启动的就是一个jetty服务器，这种jetty服务器的特点是运行在启动它的shell(windows上是bat)命令进程中，当这个进程被关闭时，相应的webserver也就不存在了；
 配置webserver
从第二步中可以看出，server的配置信息放在了"WebRoot/WEB-INF/web.xml"中，这个文件中有如下一段：</p>

<p> <welcome-file-list></p>

<p> <welcome-file>index.jsp</welcome-file></p>

<p> </welcome-file-list></p>

<p>这就定义了当用户在浏览器里输入服务器IP地址并回车后，初始页面是WebRoot文件夹下的index.jsp文件；</p>
]]></content>
  </entry>
  
</feed>
