<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fireplace | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/fireplace/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Vim as Clojure Development Environment]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/22/175355/"/>
    <updated>2013-09-22T17:53:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/22/175355</id>
    <content type="html"><![CDATA[<h1>REPL in vim</h1>

<ol>
<li><p>Install leiningen 2.x;</p>

<p> verify: <code>lein repl</code> produces something like &ldquo;nREPL server started on port&hellip;&rdquo;;</p></li>
<li><p>Add <code>[cider/cider-nrepl "0.12.0"]</code> into ~/.lein/profiles.clj,
Now ~/.lein/profiles.clj is:
<code>{:user {:plugins [ [lein-try "0.4.3"] [cider/cider-nrepl "0.12.0"] ] } }</code></p></li>
<li><p>Install clojure plugins with vundle: add the following into ~/.vimrc:</p>

<pre><code> Plugin 'tpope/vim-fireplace'
 Plugin 'tpope/vim-classpath'
 Plugin 'guns/vim-clojure-static'
</code></pre></li>
<li><p>Create a new clojure project: <code>lein new myproj</code>;</p></li>
<li><p>Run &ldquo;lein repl&rdquo; under myproj (to download necessary jar files);</p></li>
<li><p>edit a clojure file (xxx.clj) with vi, using &ldquo;:Eval&rdquo; to evaluate
the expression under cursor, using &ldquo;:%Eval&rdquo; to evaluate current namespace;</p></li>
<li><p><code>K</code> to show doc of the function under cursor, <code>[d</code> show source codes;</p></li>
<li><p><code>[&lt;C-D&gt;</code> (press <code>[</code>, followed by Ctrl-d) jump to source code of the function
under cursor, <code>Ctrl-o</code> to jump back.</p></li>
</ol>


<p>Note: the clj file must be one of the source files
(under &ldquo;src&rdquo; folder) of the clojure project created by leiningen.
And the first line of this file (a clojure module actually) must be
<code>(ns project-name.module-name)</code>;</p>

<p>Ref:</p>

<p><a href="https://github.com/clojure-emacs/cider-nrepl">CIDER nREPL</a></p>

<p><a href="http://clojure-doc.org/articles/tutorials/vim_fireplace.html">http://clojure-doc.org/articles/tutorials/vim_fireplace.html</a></p>

<p><a href="http://www.boxuk.com/blog/unboxing-vim-fireplace/">http://www.boxuk.com/blog/unboxing-vim-fireplace/</a></p>

<h2>Define Shortcuts for Efficiency</h2>

<p>Add the following codes into .vimrc (before &ldquo;filetype on&rdquo;);</p>

<pre><code>autocmd FileType clojure nnoremap &lt;buffer&gt; &lt;F5&gt; :Eval&lt;CR&gt;
autocmd FileType clojure nnoremap &lt;buffer&gt; &lt;F6&gt; :%Eval&lt;CR&gt;
</code></pre>

<p>Explanation: &ldquo;autocmd <event> <command>&rdquo; means when <event> happens,
run <command>. Here <event> is &ldquo;FileType clojure&rdquo;,
<command> is &ldquo;nnoremap <buffer> <F5> :Eval<CR>&rdquo;.
The <buffer> options here is &ldquo;buffer local map&rdquo;,
which means this keymapping only take effect on the current buffer.
See <a href="http://learnvimscriptthehardway.stevelosh.com/chapters/11.html">Buffer-Local Options and Mappings in Learn Vimscript the Hard Way</a>
for explanations.</p>

<p>To determine FileType name (here is clojure), you should open a target file
(here is any file with &ldquo;.clj&rdquo; extension) in vi, then run &ldquo;:set filetype&rdquo;.</p>

<h2>Discussion</h2>

<p>Install clojure plugins with pathogen:</p>

<pre><code>cd ~/.vim/bundle
git clone git://github.com/tpope/vim-fireplace.git 
git clone git://github.com/tpope/vim-classpath.git 
git clone git://github.com/guns/vim-clojure-static.git
</code></pre>

<h1>S-expression Text Manipulation</h1>

<p>Add the following into ~/.vimrc:</p>

<pre><code>let maplocalleader = ","
Plugin 'tpope/vim-repeat'
Plugin 'guns/vim-sexp'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-sexp-mappings-for-regular-people'
</code></pre>

<p>See <a href="https://github.com/guns/vim-sexp#definitions">Definitions in vim-sexp</a>
for the definitions of FORM and ELEMENT.</p>

<h2>Moving</h2>

<p><code>(</code> and <code>)</code> move the cursor to the nearest paired structural bracket.
<code>[[</code> and <code>]]</code> move the cursor to previous/next top-level ELEMENT.</p>

<h2>Editing</h2>

<p>Now you can use <action>[ai][fFse] to manipulate s-exp style text blocks,
<action> can be [d]elete, [c]hange, [v]isual, [y]ank,
&ldquo;f&rdquo; means current form, &ldquo;F&rdquo; means top-level FORM.
&ldquo;s&rdquo; means string, &ldquo;e&rdquo; means ELEMENT.
For example: daf, dif, daF, diF, das, dae, vaf, vif, caf, cif.</p>

<p>Meta key used in key definitions of &ldquo;guns/vim-sexp&rdquo; doesn&rsquo;t work
on Ubuntu laptop, use &ldquo;tpope/vim-sexp-mappings-for-regular-people&rdquo; instead:</p>

<p><code>&gt;f</code>/<code>&lt;f</code>/<code>&gt;e</code>/<code>&lt;e</code> swap current FORM/ELEMENT with the next/previous FORM.
For example, when cursor in <code>(str "baz" "bar")</code>,
<code>&lt;f</code> convert <code>(foo (str "baz" "bar"))</code> to <code>((str "baz" "bar") foo)</code>.
When cursor on &ldquo;foo&rdquo;, use <code>&lt;e</code> to move back.</p>

<p>To demonstrate &ldquo;Slurpage&rdquo;, say there is a code snippet <code>(foo "bar")</code>,
we need convert it to <code>(foo (str "baz" "bar"))</code>,
here underscore is used as the cursor:</p>

<pre><code>(foo_ "bar")
</code></pre>

<p>Insert &ldquo;(baz)&rdquo; and press <ESC>, move cursor to &ldquo;)&rdquo;:</p>

<pre><code>(foo (str "baz") "bar")
</code></pre>

<p>Press <code>&gt;)</code> to include &ldquo;bar&rdquo; in the current FORM:</p>

<pre><code>(foo (str "baz" "bar"))
</code></pre>

<p>Use <code>&lt;)</code> to move back.</p>
]]></content>
  </entry>
  
</feed>
