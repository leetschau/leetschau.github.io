<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Compile | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/compile/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-03T10:34:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Fabric 1.8.3 on a Internet-blocked CentOS 6.4]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/10/201906/"/>
    <updated>2014-04-10T20:19:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/10/201906</id>
    <content type="html"><![CDATA[<p>This host can&rsquo;t access internet directly, but I built a tinyproxy server on 10.21.3.31:8888. So on this host I setup a HTTPS proxy:</p>

<pre><code># export https_proxy=http://10.21.3.31:8888
# export http_proxy=http://10.21.3.31:8888
</code></pre>

<p>Then pip can use this proxy to install fabric.</p>

<p>The following installation process is based on <a href="http://toomuchdata.com/2014/02/16/how-to-install-python-on-centos/">How to install Python 2.7 and Python 3.3 on CentOS 6</a></p>

<ol>
<li><h1>yum groupinstall development</h1></li>
<li><h1>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</h1></li>
<li><p>Download Python 2.7.6 source code tarball from <a href="http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz">http://python.org/ftp/python/2.7.6/Python-2.7.6.tar.xz</a></p></li>
<li><h1>tar xf Python-2.7.6.tar.xz</h1></li>
<li><h1>cd Python-2.7.6</h1></li>
<li><h1>./configure &ndash;prefix=/usr/local &ndash;enable-unicode=ucs4 &ndash;enable-shared LDFLAGS=&ldquo;-Wl,-rpath /usr/local/lib&rdquo;</h1></li>
<li><h1>make &amp;&amp; make altinstall</h1></li>
<li><p>Verify: <code>which python2.7</code></p></li>
<li><p>Download setuptools-3.4.3.zip from <a href="https://pypi.python.org/pypi/setuptools">https://pypi.python.org/pypi/setuptools</a></p></li>
<li><h1>unzip setuptools-3.4.3.zip</h1></li>
<li><h1>cd setuptools-3.4.3</h1></li>
<li><h1>python2.7 setup.py install</h1></li>
<li><p>Download pip-1.5.4.tar.gz from <a href="https://pypi.python.org/pypi/pip">https://pypi.python.org/pypi/pip</a></p></li>
<li><h1>tar zxvf pip-1.5.4.tar.gz</h1></li>
<li><h1>cd pip-1.5.4</h1></li>
<li><h1>python2.7 setup.py install</h1></li>
<li><p>Verify: <code>which pip2.7</code>;</p></li>
<li><h1>pip2.7 install fabric</h1></li>
</ol>


<p>If it doesn&rsquo;t work, download <a href="https://pypi.python.org/pypi/Fabric/1.8.3">Fabric-1.8.3.tar.gz</a>, paramiko-1.12.3.tar.gz and pycrypto-2.6.1.tar.gz on PYPI, the install them locally:</p>

<pre><code># pip2.7 install pycrypto-2.6.1.tar.gz
# pip2.7 install paramiko-1.12.3.tar.gz
# pip2.7 install Fabric-1.8.3.tar.gz
</code></pre>

<ol>
<li>Verify: <code>fab --version</code>;</li>
</ol>


<p>Bingo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Java Codes in Linux Shell Instead of Ant Script]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/07/172525/"/>
    <updated>2014-03-07T17:25:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/07/172525</id>
    <content type="html"><![CDATA[<p>The following is frequently used ant script, compile some java source codes with a libary path, then copy all non-java files to compiled folder:</p>

<pre><code>&lt;property name="src.dir" value="${basedir}/src" /&gt;
&lt;property name="src.class.dir" value="${webroot.dir}/web-inf/classes" /&gt;
&lt;path id="lib.path"&gt;
    &lt;fileset dir="${webroot.dir}/web-inf/lib"&gt;
        &lt;include name="**/*.jar" /&gt;
    &lt;/fileset&gt;
&lt;/path&gt;
&lt;target name="compile-src" depends="init" description="compile java sources"&gt;
    &lt;javac srcdir="${src.dir}" destdir="${src.class.dir}" encoding="utf-8"
            debug="true" classpathref="lib.path" failonerror="false"/&gt;
    &lt;copy todir="${src.class.dir}"&gt;
        &lt;fileset dir="${src.dir}"&gt;
            &lt;exclude name="**/*.java" /&gt;
        &lt;/fileset&gt;
    &lt;/copy&gt;
&lt;/target&gt;
</code></pre>

<p>The corresponding shell script is:</p>

<pre><code>src_dir=/vagrant/codes/GCP6.1/src
web_build=/vagrant/codes/web_build
class_dir=$web_build/web_server/webapps/GCP6.1/WEB-INF/classes
lib_dir=/vagrant/codes/GCP6.1/WebRoot/WEB-INF/lib
find $src_dir -type f -name "*.java" -exec javac -cp "$lib_dir/*:$src_dir" -d $class_dir {} \;
rsync -auC --exclude='*.java' $src_dir/ $class_dir/
</code></pre>

<p>Take care there&rsquo;s no folder named &ldquo;core&rdquo; in $src_dir, or it will be excluded by the &ldquo;-C&rdquo; option of rsync command.</p>

<h1>A Test Case</h1>

<pre><code>$ tree
.
├── classes
├── lib
│   ├── libadd.jar
│   └── libmul.jar
├── libadd
│   └── com
│       └── boco
│           └── gcp
│               └── add
│                   ├── MyAdd.class
│                   └── MyAdd.java
├── libmul
│   └── com
│       └── boco
│           └── gcp
│               └── mul
│                   ├── MyMul.class
│                   └── MyMul.java
└── main
    └── com
        └── boco
            └── gcp
                ├── Test.java
                └── util
                    └── MyUtil.java

17 directories, 8 files

$ find . -name '*.java' -exec cat {} \; -exec echo "--------" \;
package com.boco.gcp.util;

import com.boco.gcp.add.MyAdd;
import com.boco.gcp.mul.MyMul;

public class MyUtil {
    public int newadd(int x, int y) {
        MyAdd add = new MyAdd();
        MyMul mul = new MyMul();
        return add.myadd(3,5) + mul.mymul(3,5);
    }
}
--------
package com.boco.gcp;

import com.boco.gcp.mul.MyMul;
import com.boco.gcp.add.MyAdd;
import com.boco.gcp.util.MyUtil;

public class Test {
    public static void main(String[] args) {
        MyMul mul = new MyMul();
        MyAdd add = new MyAdd();
        System.out.println(mul.mymul(3,5));
        System.out.println(add.myadd(3,5));
        MyUtil util = new MyUtil();
        System.out.println(util.newadd(3,5));
    }
}
--------
package com.boco.gcp.mul;

public class MyMul {
    public int mymul(int x, int y) {
        return 10*x*y;
    }

    public static void main(String[] args) {
        MyMul mul = new MyMul();
        System.out.println(mul.mymul(3,5));
    }
}
--------
package com.boco.gcp.add;

public class MyAdd {
    public int myadd(int x, int y){
        return 10*x+y;
    }

    public static void main(String[] args) {
        MyAdd add = new MyAdd();
        System.out.println(add.myadd(3,5));
    }
}
--------
$ find main -name '*.java' -exec javac -cp 'lib/*:main' {} -d classes \;
$ tree classes/
classes/
└── com
    └── boco
        └── gcp
            ├── Test.class
            └── util
                └── MyUtil.class
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Flex Source Files in Linux Console]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/12/170729/"/>
    <updated>2014-02-12T17:07:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/12/170729</id>
    <content type="html"><![CDATA[<ol>
<li>Download flex sdk from adobe(<a href="http://www.adobe.com/devnet/flex/flex-sdk-download.html">http://www.adobe.com/devnet/flex/flex-sdk-download.html</a>);</li>
</ol>


<p>Ref:
<a href="http://thomas.deuling.org/2011/05/install-flex-sdk-under-ubuntu-linux/">http://thomas.deuling.org/2011/05/install-flex-sdk-under-ubuntu-linux/</a>
<a href="http://stackoverflow.com/questions/6480901/is-it-possible-to-compile-swf-files-flash-from-a-linux-command-line">http://stackoverflow.com/questions/6480901/is-it-possible-to-compile-swf-files-flash-from-a-linux-command-line</a></p>
]]></content>
  </entry>
  
</feed>
