<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Decode | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/decode/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-02-02T16:10:00+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Encode and Decode ASN.1 in Erlang]]></title>
    <link href="http://leetschau.github.io/blog/2014/05/12/142038/"/>
    <updated>2014-05-12T14:20:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/05/12/142038</id>
    <content type="html"><![CDATA[<p>Firstly a template asn file (PP.asn here) was created. Then it&rsquo;s be used to encode some text, creating a segment binary data(stored in variable Bin), then Bin was decoded based on PP.asn. We can also store binaries into a file, then read from it.</p>

<pre><code>$ cat PP.asn
PP DEFINITIONS AUTOMATIC TAGS ::=
BEGIN
  TGSN ::=    INTEGER (0..14)
  Persons ::= SEQUENCE {
    name PrintableString,
    location INTEGER {home(0),field(1),roving(2)},
    age INTEGER OPTIONAL
  }
END
$ erl
Erlang/OTP 17 [erts-6.0] [source-07b8f44] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V6.0  (abort with ^G)
1&gt; asn1ct:compile("PP", [ber, verbose]).
Erlang ASN.1 compiler 3.0
Compiling: "PP.asn"
Options: [ber,verbose,{i,"."}]
--{generated,"PP.asn1db"}--
--{generated,"PP.hrl"}--
--{generated,"PP.erl"}--
ok
2&gt; Rockstar = {'Persons',"Some Name",roving,50}.
{'Persons',"Some Name",roving,50}
3&gt; {ok,Bin} = 'PP':encode('Persons',Rockstar).    
{ok,&lt;&lt;48,17,128,9,83,111,109,101,32,78,97,109,101,129,1,
      2,130,1,50&gt;&gt;}
4&gt; {ok,Persons} = 'PP':decode('Persons',Bin).  
{ok,{'Persons',"Some Name",roving,50}}
5&gt; file:write_file("test", Bin).
ok
6&gt; {ok, Bin2} = file:read_file("test").
{ok,&lt;&lt;48,17,128,9,83,111,109,101,32,78,97,109,101,129,1,
      2,130,1,50&gt;&gt;}
7&gt; {ok,Persons} = 'PP':decode('Persons',Bin2).
{ok,{'Persons',"Some Name",roving,50}}
</code></pre>
]]></content>
  </entry>
  
</feed>
