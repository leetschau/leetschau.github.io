<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Netty | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/netty/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-05T17:36:08+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将Netty源代码导入到eclipse中]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/03/233746/"/>
    <updated>2013-05-03T23:37:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/03/233746</id>
    <content type="html"><![CDATA[<p>Netty官网上下载的发布包netty-3.6.5.Final-dist.tar.bz2中的源代码是maven格式的，使用eclipse的maven导入失败，只好用笨办法手工导入到eclipse中，过程如下：</p>

<ol>
<li><p>解压Netty发布包在netty-3.6.5.Final目录下；</p></li>
<li><p>在Eclipse中新建一个Java Project: NettyStudy；</p></li>
<li><p>将netty-3.6.5.Final\src\main\java下的目录拷贝到NettyStudy/src下；</p></li>
<li><p>将netty-3.6.5.Final\src\test\java下的目录拷贝到NettyStudy/test下；</p></li>
<li><p>根据netty-3.6.5.Final\pom.xml中<dependency>&hellip; </dependency>中的内容，将下面的jar文件从<a href="http://search.maven.org/">Maven Central Repository</a>中下载下来，添加到NettyStudy/lib中：</p></li>
</ol>


<p> slf4j-simple-1.7.5.jar
 log4j-1.2.17.jar
 jboss-logging-spi-2.2.0.CR1.jar
 commons-logging-1.1.2.jar
 slf4j-api-1.7.5.jar
 org.osgi.foundation-1.2.0.jar
 javax.servlet-1.0.0.jar
 org.osgi.compendium-1.4.0.jar
 org.osgi.core-1.4.0.jar
 servlet-api-3.0-alpha-1.jar
 protobuf-java-2.5.0.jar
 jboss-marshalling-1.3.17.GA.jar
 easymock-3.1.jar</p>

<p>验证：</p>

<ol>
<li><p>启动org.jboss.netty.example.telnet.TelnetServer，默认绑定本机的8080端口；</p></li>
<li><p>用kitty连接8080端口："kitty -telnet -P 8080 localhost"，看到下面的报文说明连接成功：</p></li>
</ol>


<p> Welcome to chadlaptop!</p>

<p> It is Fri May 03 23:49:01 CST 2013 now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mina与netty的区别]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/27/090454/"/>
    <updated>2012-03-27T09:04:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/27/090454</id>
    <content type="html"><![CDATA[<ul>
<li>从messageReceived的参数上可以看出： netty是在channel上传递event，mina是在iosession中传递message（默认是iobuffer类型）；</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netty笔记]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/26/113633/"/>
    <updated>2012-03-26T11:36:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/26/113633</id>
    <content type="html"><![CDATA[<h1>Upstream &amp; Downstream</h1>

<p>Upstream指网络层向应用层传播，Downstream相反，应用层向网络层传播，所以Upstream Events的代表是messageReceived，DownStream Events的代表是write方法；</p>

<p>Netty javadoc中对ChannelEvent和ChannelPipeline的说明；</p>

<p>2013-05-08更新：</p>

<p>upstream消息（从网络对端读取消息）从pipeline的handler链的头执行到尾，downstream消息（向网络对端写消息）从handler链的尾执行到头，参考Netty doc &ldquo;Interface ChannelPipeline"中的图示；</p>

<h1>通道隔离和状态设置</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netty Echo Server传输机制分析]]></title>
    <link href="http://leetschau.github.io/blog/2012/03/23/124324/"/>
    <updated>2012-03-23T12:43:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/03/23/124324</id>
    <content type="html"><![CDATA[<p>工作目录：/home/godu/backup；上传netty-3.2.6.Final.jar；
源文件：
EchoServer.java import java.net.InetSocketAddress;
import java.util.concurrent.Executors;
import org.jboss.netty.bootstrap.ServerBootstrap;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelPipelineFactory;
import org.jboss.netty.channel.Channels;
import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
public class EchoServer {
  public static void main(String[] args) throws Exception {
   // Configure the server.
   ServerBootstrap bootstrap = new ServerBootstrap(
     new NioServerSocketChannelFactory(
        Executors.newCachedThreadPool(),
        Executors.newCachedThreadPool()));
   // Set up the pipeline factory.
   bootstrap.setPipelineFactory(new ChannelPipelineFactory() {
    public ChannelPipeline getPipeline() throws Exception {
     return Channels.pipeline(new EchoServerHandler());
    }
   });
   // Bind and start to accept incoming connections.
   bootstrap.bind(new InetSocketAddress(8349));
  }
}
EchoServerHandler.java import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ExceptionEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
public class EchoServerHandler extends SimpleChannelUpstreamHandler {
  private static final Logger logger = Logger
    .getLogger(EchoServerHandler.class.getName());
  private final AtomicLong transferredBytes = new AtomicLong();
  public long getTransferredBytes() {
   return transferredBytes.get();
  }
  @Override
  public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
   // Send back the received message to the remote peer.
   transferredBytes.addAndGet(((ChannelBuffer) e.getMessage())
     .readableBytes());
   e.getChannel().write(e.getMessage());
  }
  @Override
  public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {
   // Close the connection when an exception is raised.
   logger.log(Level.WARNING, &ldquo;Unexpected exception from downstream.&rdquo;,
     e.getCause());
   e.getChannel().close();
  }
}
启动Echo Server：
javac -cp .:./netty-3.2.6.Final.jar EchoServerHandler.java
javac -cp .:./netty-3.2.6.Final.jar EchoServer.java
java -cp .:./netty-3.2.6.Final.jar EchoServer</p>

<p>连接Server：XShell里运行： telnet 10.0.2.47 8349 ，建立连接后输入 bcde 并回车后可以看到收到了bcde，整个过程用wireshark监控内容如下（监控完后导出结果方法：File->Export->File，保存类型为txt）： No.  Time  Source    Destination   Protocol Length Info
  1 0.000000 10.32.1.103   10.0.2.47    TCP  66  10811 > 8394 [SYN] Seq=0 Win=8192 Len=0 MSS=1460 WS=256 SACK_PERM=1
Frame 1: 66 bytes on wire (528 bits), 66 bytes captured (528 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 0, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 0 (relative sequence number)
 Header length: 32 bytes
 Flags: 0x02 (SYN)
 Window size value: 8192
 [Calculated window size: 8192]
 Checksum: 0x976d [validation disabled]
 Options: (12 bytes)
No.  Time  Source    Destination   Protocol Length Info
  2 0.000267 10.0.2.47    10.32.1.103   TCP  66  8394 > 10811 [SYN, ACK] Seq=0 Ack=1 Win=5840 Len=0 MSS=1460 SACK_PERM=1 WS=128
Frame 2: 66 bytes on wire (528 bits), 66 bytes captured (528 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 0, Ack: 1, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 0 (relative sequence number)
 Acknowledgement number: 1 (relative ack number)
 Header length: 32 bytes
 Flags: 0x12 (SYN, ACK)
 Window size value: 5840
 [Calculated window size: 5840]
 Checksum: 0x0552 [validation disabled]
 Options: (12 bytes)
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  3 0.000295 10.32.1.103   10.0.2.47    TCP  54  10811 > 8394 [ACK] Seq=1 Ack=1 Win=65536 Len=0
Frame 3: 54 bytes on wire (432 bits), 54 bytes captured (432 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x5bf4 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  4 5.669101 10.32.1.103   10.0.2.47    TCP  58  10811 > 8394 [PSH, ACK] Seq=1 Ack=1 Win=65536 Len=4
Frame 4: 58 bytes on wire (464 bits), 58 bytes captured (464 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 1, Ack: 1, Len: 4
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 [Next sequence number: 5 (relative sequence number)]
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x951f [validation disabled]
 [SEQ/ACK analysis]
Data (4 bytes)
0000 62 63 64 65           bcde
 Data: 62636465
 [Length: 4]
No.  Time  Source    Destination   Protocol Length Info
  5 5.669359 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [ACK] Seq=1 Ack=5 Win=5888 Len=0
Frame 5: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 5, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 5 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x5cc2 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  6 5.669397 10.32.1.103   10.0.2.47    TCP  56  10811 > 8394 [PSH, ACK] Seq=5 Ack=1 Win=65536 Len=2
Frame 6: 56 bytes on wire (448 bits), 56 bytes captured (448 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 5, Ack: 1, Len: 2
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 5 (relative sequence number)
 [Next sequence number: 7 (relative sequence number)]
 Acknowledgement number: 1 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x4edc [validation disabled]
 [SEQ/ACK analysis]
Data (2 bytes)
0000 0d 0a            ..
 Data: 0d0a
 [Length: 2]
No.  Time  Source    Destination   Protocol Length Info
  7 5.669574 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [ACK] Seq=1 Ack=7 Win=5888 Len=0
Frame 7: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 0
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x5cc0 [validation disabled]
 [SEQ/ACK analysis]
No.  Time  Source    Destination   Protocol Length Info
  8 5.682922 10.0.2.47    10.32.1.103   TCP  60  8394 > 10811 [PSH, ACK] Seq=1 Ack=7 Win=5888 Len=6
Frame 8: 60 bytes on wire (480 bits), 60 bytes captured (480 bits)
Ethernet II, Src: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1), Dst: Dell_22:74:95 (b8:ac:6f:22:74:95)
Internet Protocol Version 4, Src: 10.0.2.47 (10.0.2.47), Dst: 10.32.1.103 (10.32.1.103)
Transmission Control Protocol, Src Port: 8394 (8394), Dst Port: 10811 (10811), Seq: 1, Ack: 7, Len: 6
 Source port: 8394 (8394)
 Destination port: 10811 (10811)
 [Stream index: 0]
 Sequence number: 1 (relative sequence number)
 [Next sequence number: 7 (relative sequence number)]
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x18 (PSH, ACK)
 Window size value: 46
 [Calculated window size: 5888]
 [Window size scaling factor: 128]
 Checksum: 0x88df [validation disabled]
 [SEQ/ACK analysis]
Data (6 bytes)
0000 62 63 64 65 0d 0a         bcde..
 Data: 626364650d0a
 [Length: 6]
No.  Time  Source    Destination   Protocol Length Info
  9 5.887726 10.32.1.103   10.0.2.47    TCP  54  10811 > 8394 [ACK] Seq=7 Ack=7 Win=65536 Len=0
Frame 9: 54 bytes on wire (432 bits), 54 bytes captured (432 bits)
Ethernet II, Src: Dell_22:74:95 (b8:ac:6f:22:74:95), Dst: Hangzhou_8d:96:e1 (00:0f:e2:8d:96:e1)
Internet Protocol Version 4, Src: 10.32.1.103 (10.32.1.103), Dst: 10.0.2.47 (10.0.2.47)
Transmission Control Protocol, Src Port: 10811 (10811), Dst Port: 8394 (8394), Seq: 7, Ack: 7, Len: 0
 Source port: 10811 (10811)
 Destination port: 8394 (8394)
 [Stream index: 0]
 Sequence number: 7 (relative sequence number)
 Acknowledgement number: 7 (relative ack number)
 Header length: 20 bytes
 Flags: 0x10 (ACK)
 Window size value: 256
 [Calculated window size: 65536]
 [Window size scaling factor: 256]
 Checksum: 0x5be8 [validation disabled]
 [SEQ/ACK analysis]
可以看到第4个包是C向S发送bcde，第6个是向S发送回车，第8个包是S向C返回bcde回车；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络通信框架选型]]></title>
    <link href="http://leetschau.github.io/blog/2010/10/09/170608/"/>
    <updated>2010-10-09T17:06:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/10/09/170608</id>
    <content type="html"><![CDATA[<p>事件驱动的异步IO通信框架
 Apache Mina , JBoss Netty , Grizzly (Java), Twisted , gevent (python), eventmachine (Ruby), POE (Perl), Node.js (JavaScript), libevent &copy;</p>

<p>各框架实现的Echo Server</p>

<p> Twisted , libevent (不是echo server，但讲了很多基础知识), gevent , eventmachine , Node.js , Netty , Grizzly , POE ，按先后顺序进行学习。</p>

<p>选型的依据：</p>

<p> 功能： 截取模式：
 Mina: Filter-Handler;
Netty/Grizzly: Handler only</p>

<p> 支持的Filter/Handler：</p>

<p>Mina: blacklist filters, compression filters, connection throttling filters, SSL filters, logging filters, protocol codecs such as delimiter based, and HTTP. Grizzly provides support for SSL, custom protocol codecs, logging, and HTTP;</p>

<p>Netty: Base64 encoding/decoding, delimiter based codecs, fixed length codecs, HTTP handlers, logging handlers, Java object serialization/deserialization codecs, Google Protocol Buffer codecs, SSL handlers, simple string codecs, and handlers used to control bandwidth, traffic shaping, etc. There are also several utility handlers that may be used to build custom handlers such as a replay handler, timeout handler , frame decoder, etc;（Netty在支持基于已有的Handler构建用户Handler方面更灵活）</p>

<p> 高级缓存</p>

<p>Netty: ChannelBuffer中封装了多个ByteBuffer实例的引用（而非拷贝），支持zero copy，支持标记与重设“读指针”(Reader)索引，支持搜索、切片、读写不同类型数据；</p>

<p>Mina: 与Netty基本类似，但不支持zero copy（在Mina 3中实现）；</p>

<p> Socket and Protocol Independence</p>

<p>三者均支持，使通信框架底层技术变化（例如从NIO向AIO过渡）时，无需更新业务逻辑代码；</p>

<p> 可定制的协议与POJO</p>

<p>三者均支持，POJO在网络传输中的作用是什么？</p>

<p> 线程模型</p>

<p>三者均使用线程池模型，应付高并发能力良好；</p>

<p> 性能：</p>

<p>速度：MINA能够满足要求（并发800+），Netty=Grizzly>MINA；</p>

<p>内存占用量：Netty=Mina&lt;Grizzly
 扩展性：采用此框架的项目代码是否易于修改，易于在已有功能基础上拓展新功能； 易用性：框架的简洁程度，API Docs是否完善，Tutorials是否丰富，论坛是否活跃； 与GODU的整合能力/迁移成本；</p>
]]></content>
  </entry>
  
</feed>
