<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Template | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/template/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Username Disappeared in Meteor Official Tutorial]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/04/110411/"/>
    <updated>2014-12-04T11:04:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/04/110411</id>
    <content type="html"><![CDATA[<p>In the 9th step (Adding user accounts) of official tutorial &ldquo;simple-todos&rdquo; of Meteor 1.0,
if you start server while leaving some old data (todo items) created in previous steps,
you will find that there&rsquo;s no username before the todo text.</p>

<p>But if you clear all old data (click remove button on web page, or use <code>meteor reset</code>),
and create new todo items with a signed in username, you will find the username appear.</p>

<h1>Data binding between Template and Collection</h1>

<p>The following modified version simple-todos works:</p>

<p>simple-todos.html:</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;Todo List&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div class="container"&gt;
    &lt;header&gt;
      &lt;h1&gt;Todo List&lt;/h1&gt;
      &lt;label class="hide-completed"&gt;
        &lt;input type="checkbox" checked="" /&gt;
        Hide Completed Tasks
      &lt;/label&gt;

      

      
        &lt;form class="new-task"&gt;
          &lt;input type="text" name="text" placeholder="Type to add tasks" /&gt;
        &lt;/form&gt;
      
    &lt;/header&gt;
    &lt;ul&gt;
      
        
      
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;template name="todo"&gt;
  &lt;li class="checked"&gt;
    &lt;button class="delete"&gt;&amp;times;&lt;/button&gt;
    &lt;input type="checkbox" checked="" class="toggle-checked" /&gt;
    &lt;span class="text"&gt;&lt;strong&gt;&lt;/strong&gt; -  at &lt;/span&gt;
  &lt;/li&gt;
&lt;/template&gt;
</code></pre>

<p>simple-todos.js:</p>

<pre><code>Tasks = new Mongo.Collection("tododb");

if (Meteor.isClient) {
  Template.body.helpers({
    todoitems: function () {
      if (Session.get("hideCompleted")) {
        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});
      } else {
        return Tasks.find({}, {sort: {createdAt: -1}});
      }
    },
    hideCompleted: function () {
      return Session.get("hideCompleted");
    }
  });

  Template.body.events({
    "submit .new-task": function (event) {
      var text = event.target.text.value;

      Tasks.insert({
        text: text,
        createdAt : new Date(),
        owner: Meteor.userId(),
        username: Meteor.user().username
      });

      event.target.text.value = "";

      return false;
    },

    "change .hide-completed input": function (event) {
        Session.set("hideCompleted", event.target.checked);
    }
  });

  Template.todo.helpers({
    creDate: function () {
      return this.createdAt;
    }
  });

  Template.todo.events({
    "click .toggle-checked": function () {
      Tasks.update(this._id, {$set: {checked: ! this.checked}});
    },
    "click .delete": function () {
      Tasks.remove(this._id);
    }
  });

  Accounts.ui.config({
    passwordSignupFields: "USERNAME_ONLY"
  });
}

if (Meteor.isServer) {
  Meteor.startup(function () {
    // code to run on server at startup
  });
}
</code></pre>

<p>So we can conclude (the left hand side of &ldquo;&lt;=>&rdquo; is template in html file, while js codes on the right hand side):</p>

<ol>
<li><p>The name after #each is a <strong>helper function</strong> which defined in js file, and returns a subset of a collection:</p>

<pre><code>  &lt;=&gt; Template.body.helpers -&gt; todoitems: function () {...}; 
</code></pre></li>
<li><p>Variables in  in a template is the attributes of the object in collection, represented by the template:</p>

<pre><code> &lt;strong&gt;&lt;/strong&gt; -  &lt;=&gt; Tasks.insert({ text: text, ..., username: Meteor.user().username }); 
</code></pre>

<p>or a helper function ( here).</p></li>
<li><p>&ldquo;this&rdquo; in helper function refers to the template the function based on.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Template.dynamic to Create Dynamic Pages for Meteor Application]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/03/113214/"/>
    <updated>2014-12-03T11:32:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/03/113214</id>
    <content type="html"><![CDATA[<p>For a SPA (single page app), it&rsquo;s a common practice to switch between templates instead of pages.
The following codes demonstrate how to switching between 2 templates according to 2 buttons' clicking events.</p>

<pre><code>$ meteor create multipage
$ cd multipage
$ cat &lt;&lt; EOF &gt; multipage.html
&lt;head&gt;
  &lt;title&gt;multiple-view-example&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;button class="pageHome"&gt;Home&lt;/button&gt;
  &lt;button class="pageAbout"&gt;About&lt;/button&gt;
  
&lt;/body&gt;

&lt;template name="home"&gt;
  &lt;p&gt;Home!&lt;/p&gt;
&lt;/template&gt;

&lt;template name="about"&gt;
  &lt;p&gt;About!&lt;/p&gt;
&lt;/template&gt;
EOF

$ cat &lt;&lt; EOF &gt; multipage.js
if ( Meteor.isClient ) {
  Meteor.startup(function () {
    Session.set("page", "home");
    console.log("session key: " + Session.get("page"));
  });

  Template.body.helpers({
    whichOne: function(){
      console.log("session key: " + Session.get("page"));
      return Session.get("page");
    }
  });

  Template.body.events({
    "click .pageHome": function () {
      Session.set("page", "home");
    },
    "click .pageAbout": function () {
      Session.set("page", "about");
    }
  });
}

if ( Meteor.isServer ) {
  Meteor.startup( function() {
  } );
}
EOF

$ meteor
</code></pre>

<p>Open <a href="http://localhost:3000,">http://localhost:3000,</a> clicking &ldquo;Home&rdquo; button, the &ldquo;home&rdquo; template is shown.
While clicking &ldquo;about&rdquo; button, the &ldquo;about&rdquo; template is shown.</p>

<p>Template.dynamic is better than Meteor&rsquo;s route package, for it&rsquo;s a built-in function of Meteor.
No need to install a package with <code>meteor add ...</code>.</p>

<p>And you can put big templates into a new html file, which make the struture more flexible.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/12968808/dynamically-loading-templates-in-meteor-js">http://stackoverflow.com/questions/12968808/dynamically-loading-templates-in-meteor-js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Templates in Thunderbird]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/28/104414/"/>
    <updated>2013-10-28T10:44:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/28/104414</id>
    <content type="html"><![CDATA[<h1>Create a template based on a email</h1>

<p>Select a mail, then [F10 -> File -> Save as -> Template]; you can see this template in &ldquo;Template&rdquo; folder in left side panel;</p>

<h1>Use a template</h1>

<p>Double click the template in &ldquo;Template&rdquo; folder in left side panel;</p>

<h1>Edit template</h1>

<p>Double click the template in &ldquo;Template&rdquo; folder in left side panel, edit it, then save it as a template;</p>
]]></content>
  </entry>
  
</feed>
