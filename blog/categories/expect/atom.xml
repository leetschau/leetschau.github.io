<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Expect | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/expect/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-08-11T14:12:54+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auto Deploy Notes]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/29/210003/"/>
    <updated>2013-08-29T21:00:03+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/29/210003</id>
    <content type="html"><![CDATA[<ol>
<li>Write a property file: /home/bvt/docs/jenkinsEnv.properties:</li>
</ol>


<p> gcp.job.type=deliver
 gcp.deliver.ip=10.0.7.142
 gcp.deliver.user=gcp
 gcp.deliver.home=/home/gcp
 gcp.deliver.deployFolder=deploy
 gcp.deliver.prompt=gcp@cloud142</p>

<p>Note: Do <strong>not</strong> leave blanks between &ldquo;=&rdquo; and values in property file.</p>

<p> gcp.deliver.home = /home/gcp</p>

<p>will produce wrong value when gotten by expect script.</p>

<ol>
<li><p>Add this file to &ldquo;Build Environment -> Inject environment variables to the build process&rdquo; in Jenkins Job Configure panel with Environment Injector plugin.</p></li>
<li><p>Create a deploy script (deploy.exp) in project base folder:</p></li>
</ol>


<p> #!/usr/bin/expect
 set artifact [lindex $argv 0]
 spawn scp $artifact $env(gcp.deliver.user)@$env(gcp.deliver.ip):$env(gcp.del
 expect eof</p>

<ol>
<li>Create a &ldquo;Conditional step(single)&rdquo; with conditional-buildstep plugin.</li>
</ol>


<p> Run? Strings match</p>

<p>  String 1: ${ENV,var=&ldquo;gcp.job.type&rdquo;}</p>

<p>  String 2: deliver</p>

<p> Builder: Execute Shell</p>

<p>  Command: ./deploy.exp build/*.zip</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show Output and Internal Diagnostics of Expect Script in Different Terminals]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/28/111229/"/>
    <updated>2013-08-28T11:12:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/28/111229</id>
    <content type="html"><![CDATA[<ol>
<li><p>Start a terminal, run <code>tty</code> to get its device file name, &ldquo;/dev/pts/0&rdquo; in this case.</p></li>
<li><p>Start another terminal. Create a expect script &ldquo;testDebug.exp&rdquo;:</p>

<pre><code> #!/usr/bin/expect 
 set prompt "\\\[hadoop@49server\\s.*\\\]\\\$\\s" 
 spawn telnet 10.0.2.49 
 exp_internal 1 
 expect "login:" 
 send "hadoop\r" 
 expect "Password:" 
 send "h\r" 
 expect -re $prompt 
 send "df -h\r" 
 expect -re $prompt 
 send "exit\r" 
 expect eof
</code></pre></li>
<li><p>Give execution priority to testDebug.exp (using chmod) and run it: <code>./testDebug.exp 2&gt; /dev/pts/0</code>. You can see all diagnostics information are printed in the terminal &ldquo;/dev/pts/0&rdquo; while all &ldquo;normal&rdquo; informal are printed in the second terminal window.</p></li>
</ol>


<p>Explanation: the command &ldquo;exp_internal 1&rdquo; send all pattern diagnostics to standard error, which is specified as &ldquo;2> &hellip;&rdquo; in the command line. Meanwhile, a terminal&rsquo;s id can be get from &ldquo;tty&rdquo; command.</p>

<p>You can use &ldquo;exp_internal -f <log_file_name> 0&rdquo; instead of &ldquo;exp_internal 1&rdquo; to save all standard output and diagnostics information into file <log_file_name>. while only standard output can be seen on the terminal.</p>

<p>Reference: Section &ldquo;Enabling Internal Diagnostics&rdquo; and &ldquo;Logging Internal Diagnostics&rdquo; in chapter 7:&ldquo;Debugging Patterns And Controlling Output&rdquo; of &ldquo;Exploring Expect&rdquo; by Don Libes.</p>

<p>Notes: If you run command &ldquo;ls -l /dev/pts/*&rdquo;, you can get the following outputs:</p>

<pre><code>crw--w---- 1 lichao tty 136, 0 Aug 28 11:56 0
...
</code></pre>

<p>Notice that the file type are &ldquo;c&rdquo; (the first character of the line), which stands for &ldquo;character device&rdquo; (standard input/output, like keyboard and screen, relative to &ldquo;block device&rdquo;, like hard drives). See &ldquo;<a href="http://en.wikipedia.org/wiki/Unix_file_types#Device_file">http://en.wikipedia.org/wiki/Unix_file_types#Device_file</a>&rdquo; for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Tcl and Expect Version on Ubuntu]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/26/112747/"/>
    <updated>2013-08-26T11:27:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/26/112747</id>
    <content type="html"><![CDATA[<h1>tcl version</h1>

<p> $ tclsh</p>

<p> % puts $tcl_version
 8.5</p>

<h1>expect version</h1>

<p> $ expect -v</p>

<p> expect version 5.45</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Telnet Client Using Expect]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/26/104022/"/>
    <updated>2013-08-26T10:40:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/26/104022</id>
    <content type="html"><![CDATA[<p>The following expect script achieves a simple telnet client: login -> send command -> exit. The point is the form of prompt in regular expression. You have to add 3 backslash before &ldquo;[&rdquo;, &ldquo;]&rdquo; and &ldquo;$&rdquo;, and add &ldquo;-re&rdquo; option after expect command in &ldquo;expect $prompt&rdquo;.</p>

<p> #!/usr/bin/expect
 set prompt &ldquo;\[hadoop@49server\s.*\]\\$\s&rdquo;
 spawn telnet 10.0.2.49
 expect &ldquo;login:&rdquo;
 send &ldquo;hadoop\r&rdquo;
 expect &ldquo;Password:&rdquo;
 send &ldquo;h\r&rdquo;
 expect -re $prompt
 send &ldquo;df -h\r&rdquo;
 expect -re $prompt
 send &ldquo;ls -l\r&rdquo;
 expect -re $prompt
 send &ldquo;exit\r&rdquo;
 expect eof</p>

<p>The following script achieves auto-login and auto-logout. Save it as autoTelnet.exp:</p>

<p> #!/usr/bin/expect
 set ip [lindex $argv 0]
 set username [lindex $argv 1]
 set password [lindex $argv 2]
 spawn telnet $ip
 expect &ldquo;login:&rdquo;
 send &ldquo;$username\r&rdquo;
 expect &ldquo;Password:&rdquo;
 send &ldquo;$password\r&rdquo;
 interact +++ return
 send &ldquo;exit\r&rdquo;
 expect eof</p>

<p>then run it:</p>

<p> $ ./autoTelnet.exp 10.0.2.49 hadoop h</p>

<p>After auto-login, you can send any commands as if you communicates with host directly. When you want to quit, type &ldquo;+++&rdquo; and then the script exits from interact mode and runs logout routine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wildcards in Spawn Command]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/23/104927/"/>
    <updated>2013-08-23T10:49:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/23/104927</id>
    <content type="html"><![CDATA[<p>The following script works fine.</p>

<p> #!/usr/bin/expect
 spawn bash -c &ldquo;ls -l *.exp&rdquo;
 expect eof</p>

<p>Questions</p>

<ol>
<li><p>Why I can&rsquo;t remove &ldquo;expect eof&rdquo;?</p></li>
<li><p>Why I can&rsquo;t remove &ldquo;bash -c&rdquo;?</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
