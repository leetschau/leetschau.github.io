<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-03T10:36:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Web Development]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/02/005047/"/>
    <updated>2014-10-02T00:50:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/02/005047</id>
    <content type="html"><![CDATA[<h1>Paredit</h1>

<p><a href="http://www.emacswiki.org/ParEdit">ParEdit</a>, a.k.a. &ldquo;structured editing&rdquo;, is some special editing operations for S-expression coding, like Lisp or Clojure. Mainstream IDEs all have support for paredit.</p>

<h2>Eclipse</h2>

<p>Install clojure IDE plugin <a href="https://code.google.com/p/counterclockwise/">counterclockwise</a>. It&rsquo;s default shortcuts is listed in <a href="http://doc.ccw-ide.org/keyboard-shortcuts.html">Editor Keyboard Shortcuts</a>;</p>

<h2>Cursive</h2>

<ul>
<li>Cursive: install IntelliJ and Cursive plugin, see default shortcuts definition at <a href="https://cursiveclojure.com/userguide/paredit.html">Structural editing</a>;</li>
</ul>


<h1>REPL for Ring Application</h1>

<p>Say the application name is &ldquo;guestbook&rdquo; (based on &ldquo;Web Development with Clojure&rdquo; by Dmitri Sotnikov).</p>

<h2>Eclipse</h2>

<p>The counterclockwise plugin need to be installed beforehand.</p>

<ol>
<li><p>Build a new &ldquo;Clojure Project&rdquo; with name &ldquo;guestbook&rdquo;, set &ldquo;Leiningen template&rdquo; as &ldquo;compojure-app&rdquo;;</p></li>
<li><p>Open guestbook.routes.home.clj, and run menu item [Clojure -> Load file in REPL];</p></li>
<li><p>In REPL window (the window title is &ldquo;REPL @ nrepl://127.0.0.1:xxxx(guestbook.routes.home)&rdquo;, run (use &lsquo;guestbook.repl) and (start-server), you can use Ctrl+Up/Down to navigate in command history;</p></li>
<li><p>See homepage with url &ldquo;<a href="http://localhost:8080">http://localhost:8080</a>&rdquo;;</p></li>
<li><p>Modify codes, refresh web page to see the result. If this doesn&rsquo;t work, close the REPL window and restart server;</p></li>
</ol>


<h2>Cursive</h2>

<ol>
<li><p>In terminal: <code>lein new compojure-app mybook</code>;</p></li>
<li><p>In Cursive, import &ldquo;mybook&rdquo; via &ldquo;Import Project&rdquo;, choose &ldquo;Leiningen&rdquo; for &ldquo;Import project from external model&rdquo;;</p></li>
<li><p>Open &ldquo;Terminal&rdquo; window in Cursive, run <code>lein repl</code>, (use &lsquo;guestbook.repl) and (start-server);</p></li>
<li><p>See homepage with url &ldquo;<a href="http://localhost:8080">http://localhost:8080</a>&rdquo;;</p></li>
<li><p>Modify codes, refresh web page to see the result. If this doesn&rsquo;t work, restart server in &ldquo;Terminal&rdquo; window;</p></li>
</ol>


<p>Note: I&rsquo;ve tried <a href="http://www.lighttable.com/">Light Table</a>. It can open the guestbook project created by leiningen, but can&rsquo;t connect to it. So I give it up, and use Eclipse instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Ring Server]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/27/113819/"/>
    <updated>2014-09-27T11:38:19+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/27/113819</id>
    <content type="html"><![CDATA[<p>The simple web server is based on example 16-1 in &ldquo;Clojure Programming&rdquo; by Chas Emerick. I add it into a clojure project created by leiningen.</p>

<pre><code>$ lein new app ring-server
$ cd ring-server
// Add "[ring "1.0.0"]" into ":dependencies" of project.clj
$ vi src/ring-server/core.clj
$ cat src/ring-server/core.clj
(ns ring-server.core
  (:gen-class))

(use '[ring.adapter.jetty :only (run-jetty)])
(defn app
  [{:keys [uri query-string]}]
  {:body (format "You requested %s with query %s" uri query-string)})
(defn -main
  "this is a ring server"
  [port]
  (run-jetty #'app {:port (bigdec port) :join? false}))

$ lein run -m ring-server.core 8082
</code></pre>

<p>Now open <a href="http://localhost:8082/hello?at=china">http://localhost:8082/hello?at=china</a> in your browser, you can see &ldquo;You requested /hello with query at=china&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Clojure Script With External Dependencies Without Leiningen]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/04/163536/"/>
    <updated>2013-12-04T16:35:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/04/163536</id>
    <content type="html"><![CDATA[<p>The normal way of deploy clojure files is using leiningen. But if we have no leiningen, or the script is small and unnecessary to pack as a leiningen project, we can build a &ldquo;bare&rdquo; clojure script in the following way.</p>

<ol>
<li><p>Get the dependency jar files, 2 options:</p>

<ol type="a">
<li><p>download the jar file directly;</p></li>
<li><p>if the dependency project provide the dependency as leiningen dependency items in porject.clj (for example, &ldquo;[org.clojure/data.json "0.2.3&rdquo;]&ldquo; in <a href="https://github.com/clojure/data.json">data.json</a>), you can build the leiningen project following Parse Sonarqube Data via Web API in Clojure , then copy the denpendency jar files from the ~/.m2/repository folder;</p></li>
</ol>
</li>
<li><p>Build srcipt: get-sonar-data.clj</p>

<p> (require &lsquo;[clojure.data.json :as json])
 (def url &ldquo;<a href="http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes">http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes</a>&rdquo;)
 (def data (json/read-str (slurp url)))
 (println ((first data) &ldquo;name&rdquo;))
 (println ((first ((first data) &ldquo;msr&rdquo;)) &ldquo;val&rdquo;))</p></li>
<li><p>Run script: java -cp &lsquo;./*:.&rsquo; clojure.main get-sonar-data.clj</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Sonarqube Data via Web API in Clojure]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/04/114616/"/>
    <updated>2013-12-04T11:46:16+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/04/114616</id>
    <content type="html"><![CDATA[<ol>
<li><p>build project: lein new sonar-parser</p></li>
<li><p>add dependencies: add &ldquo;[org.clojure/data.json "0.2.3&rdquo;]&ldquo; in :dependencies in project.clj;</p></li>
<li><p>update (download) dependency jars (into ~/.m2/repository folder): lein deps</p></li>
<li><p>start repl: lein repl</p></li>
<li><p>test in repl:</p></li>
</ol>


<p> (require &lsquo;[clojure.data.json :as json])</p>

<p> (def data (json/read-str (slurp &ldquo;<a href="http://...">http://...</a>&rdquo;)))</p>

<p> ((first ((first data) &ldquo;msr&rdquo;)) &ldquo;val&rdquo;) ; => 5.0</p>

<ol>
<li><p>add script into src/sonar-parser/core.clj;</p></li>
<li><p>pack project: lein uberjar</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Clojure Script Portable]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/22/172634/"/>
    <updated>2013-11-22T17:26:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/22/172634</id>
    <content type="html"><![CDATA[<p>leiningen is great, but it&rsquo;s for project-level application. How to run clojure script on a bare host, like python script?</p>

<p>Yes, python is build-in for almost all Linux host. But you can build your clojure environment on a host only depends JVM:</p>

<ol>
<li><p>Download clojure distribution from <a href="http://clojure.org/">clojure official website</a>, and extract it somewhere, say, ~/apps/clojure-1.5.1;</p></li>
<li><p>Add a alias in your ~/.bashrc:</p></li>
</ol>


<p> alias clj=&lsquo;java -cp ~/apps/clojure-1.5.1/clojure-1.5.1.jar clojure.main&rsquo;</p>

<ol>
<li>Validate your .bashrc: &ldquo;. ~/.bashrc&rdquo;;</li>
</ol>


<p>That&rsquo;s it!</p>

<p>Now run clojure repl with command &ldquo;clj&rdquo;. Then write a clojure hello world file &ldquo;hw.clj&rdquo;: (println &ldquo;hello world&rdquo;), then run &ldquo;clj hw.clj&rdquo;, you can see the output is the same as you run it in clojure repl console.</p>
]]></content>
  </entry>
  
</feed>
