<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elasticsearch | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch的相关度计算方法和排序规则]]></title>
    <link href="http://leetschau.github.io/blog/2016/08/17/082418/"/>
    <updated>2016-08-17T08:24:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/08/17/082418</id>
    <content type="html"><![CDATA[<h1>期望搜索效果</h1>

<p>Q: 我想首先按相关度排序，然后再根据时间进行倒序排列</p>

<p>A: 同一个查询问题，每个结果的匹配度是不用的，例如，搜索“俄罗斯五金机械”，得到如下三个结果：</p>

<ul>
<li><p>2017俄罗斯莫斯科机械，设备技术与产品展览会</p></li>
<li><p>2017俄罗斯机械设备展</p></li>
<li><p>2016俄罗斯五金机械展</p></li>
</ul>


<p>以上三个例子中，相关度最好的是”俄罗斯五金机械展“，
原因是同时包含所有关键词，并且长度最短。
由于这3个结果的匹配度各不相同，不可能”再根据时间进行倒序排列“。
只有匹配度相同的多个展会，才能按照时间顺序二次排列。</p>

<p>Q: 可是竞争对手（例如展酷）就能做出这样的效果</p>

<p>A: 搜一两个关键词效果好不难，难的是各种类型的搜索效果都不太差。
   用下面列出来的关键词进行搜索，看看他们的搜索结果有多不靠谱。</p>

<p>Q: 可是百度，Google的搜索结果就很靠谱，这种技术已经相当普及了，为什么我们不能实现？</p>

<p>A: 国内用户被盗版惯坏了，以为世界上并不存在”软件研发成本“这种事，真的该醒醒了。
   软件产品的研发成本是巨大的，免费的软件要么是人家太有钱不跟你计较，顺便整死竞争对手，
   要么是靠植入广告流氓插件挣钱，要么是开源，然而Google、百度、展酷、牛展网……没有一个愿意开源。</p>

<p>现在展会搜索用户体验不够好，希望大家多提意见和建议，帮助我们向高水平看齐，持续改进。</p>

<h2>搜索效果检查关键词</h2>

<p>下面列出的查询语句用于测试搜索效果的好坏：</p>

<ul>
<li><p>2016五金</p></li>
<li><p>2016科隆五金</p></li>
<li><p>五金2016</p></li>
<li><p>五金机械2016</p></li>
</ul>


<h1>相关度计算方法</h1>

<h2>指标定义和公式</h2>

<p>相关度指搜索问题(query, q)与搜索目标域(field, f)之间的匹配程度。
例如搜索<em>中文名称</em>中有“五金机械”的展会，这里“中文名称”对应的数据库字段<em>nameZHCN</em>
就是目标域，“五金机械”就是问题。问题可以被拆分成多个关键词(term, t)，例如五金机械
包含<em>五金</em>和<em>机械</em>两个关键词。</p>

<p>根据以下指标计算问题和目标域之间的相关度:</p>

<ul>
<li><p>tf (term frequency): 表示关键词出现的频率的高低，关键词出现的频率越高，
匹配程度越高，例如查询“五金机械”，“2016俄罗斯五金机械展”比"2017俄罗斯机械设备展"匹配度高。
计算公式：<code>tf(q in f) = sqrt(frequency)</code>，
其中<code>frequency</code>指field中包含的term数量，例如“2016俄罗斯五金机械展”的frequency是2（五金，机械），
所以<code>tf("五金机械" in "2016俄罗斯五金机械展") = sqrt(2) = 1.414</code>，
<code>tf("五金机械" in "2017俄罗斯机械设备展") = sqrt(1) = 1</code>.</p></li>
<li><p>idf (inverse document frequency): 一个关键词在所有文档中出现的频率越高，
则其匹配权重越低，例如搜索“五金机械展”，“2017俄罗斯五金机械博览会”(A) 和
“2016俄罗斯五金机械展”(B)哪个匹配度高？
我们认为A高于B，因为“展”这个词太常见了，匹配到“展”的价值显然小于匹配“五金”的价值。
怎么把这个特点用算法表达出来？就要用到idf。计算公式：
<code>idf(t) = 1 + ln(maxDoc / (matchedDoc + 1))</code>.
其中<code>maxDoc</code>是所有文档数量，<code>matchedDoc</code>是包含关键词<code>t</code>的文档的数量。
例如整个type包含3422个文档，其中40个包含关键词“五金”，则
<code>idf("五金") = 1 + ln(3422 / (40 + 1)) = 5.4244</code>，
<code>idf("展") = 1 + ln(3422 / (2410 + 1)) = 1.35018</code>。
另外，A和B的tf是一样的：分别包含3个term（五金，机械，展）中的两个。</p></li>
<li><p>fn (field-length norm): 域越长，匹配度越低，实际上反映了”关键词密度“的高低，
域越长，关键词密度越低。例如搜索“2017俄罗斯五金机械”，”2017俄罗斯五金机械展“
的匹配度高于“2017俄罗斯莫斯科机械，设备技术与五金产品展览会”。
计算公式：<code>fn(f) = 1 / sqrt(numTerm)</code>.
其中<code>numTerm</code>是域<code>f</code>包含的关键词数量。
例如<code>fn("2017年土耳其国际门及门锁五金机械博览会") = 1 / sqrt(10) = 0.3162</code>，
<code>numTerm = 10</code>是域被中文分词后词的数量。</p></li>
<li><p>qn (query norm): 这个指标没什么用，可以忽略，计算公式：
<code>qn(f) = 1 / sqrt(idf1^2 + idf2^2 + ...)</code>，
其中<code>idf1</code>，<code>idf2</code>&hellip; 是<code>f</code>中包含的每个关键词的idf值。
例如<code>qn("2017年土耳其国际门及门锁五金机械博览会") = 1 / sqrt(5.4244^2 + 4.2476^2) = 0.1451</code></p></li>
</ul>


<h2>实例分析</h2>

<p>搜索"五金机械"，我们来看看它的相关度2.1818347是怎么算出来的：</p>

<pre><code class="bash">api='api.newfairs.com'
idx=production
type=Fair
http -b POST "https://$api/$type/_search?explain=1&amp;pretty=1&amp;search_type=dfs_query_then_fetch" query:='{"bool":{"must":[{ "match": { "recurrence.nameZHCN": "五金机械" }}]}}' sort:='[{ "_score": { "order": "desc" }}, {"recurrence.timeStart": {"order" : "desc", "mode": "max"}}]' size=1 | jq -r '.hits.hits[] | "\(._score): \(._source.recurrence[0].nameZHCN), \(._source.recurrence[0].timeStart), \(._explanation)"' 

2.1818347: 2017年土耳其国际门及门锁五金机械博览会, 2017-01-04T16:00:00.000Z,
{
  "value": 2.1529999,
  "description": "sum of:",
  "details": [
    {
      "value": 2.1529999,
      "description": "sum of:",
      "details": [
        {
          "value": 1.3346298,
          "description": "weight(recurrence.nameZHCN:五金 in 3005) [PerFieldSimilarity], result of:",
          "details": [
            {
              "value": 1.3346298,
              "description": "score(doc=3005,freq=1.0), product of:",
              "details": [
                {
                  "value": 0.7873329,
                  "description": "queryWeight, product of:",
                  "details": [
                    {
                      "value": 5.4244084,
                      "description": "idf(docFreq=40, maxDocs=3422)",
                      "details": []
                    },
                    {
                      "value": 0.14514631,
                      "description": "queryNorm",
                      "details": []
                    }
                  ]
                },
                {
                  "value": 1.6951276,
                  "description": "fieldWeight in 3005, product of:",
                  "details": [
                    {
                      "value": 1,
                      "description": "tf(freq=1.0), with freq of:",
                      "details": [
                        {
                          "value": 1,
                          "description": "termFreq=1.0",
                          "details": []
                        }
                      ]
                    },
                    {
                      "value": 5.4244084,
                      "description": "idf(docFreq=40, maxDocs=3422)",
                      "details": []
                    },
                    {
                      "value": 0.3125,
                      "description": "fieldNorm(doc=3005)",
                      "details": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": 0.81837,
          "description": "weight(recurrence.nameZHCN:机械 in 3005) [PerFieldSimilarity], result of:",
          "details": [
            {
              "value": 0.81837,
              "description": "score(doc=3005,freq=1.0), product of:",
              "details": [
                {
                  "value": 0.61652803,
                  "description": "queryWeight, product of:",
                  "details": [
                    {
                      "value": 4.2476315,
                      "description": "idf(docFreq=132, maxDocs=3422)",
                      "details": []
                    },
                    {
                      "value": 0.14514631,
                      "description": "queryNorm",
                      "details": []
                    }
                  ]
                },
                {
                  "value": 1.3273848,
                  "description": "fieldWeight in 3005, product of:",
                  "details": [
                    {
                      "value": 1,
                      "description": "tf(freq=1.0), with freq of:",
                      "details": [
                        {
                          "value": 1,
                          "description": "termFreq=1.0",
                          "details": []
                        }
                      ]
                    },
                    {
                      "value": 4.2476315,
                      "description": "idf(docFreq=132, maxDocs=3422)",
                      "details": []
                    },
                    {
                      "value": 0.3125,
                      "description": "fieldNorm(doc=3005)",
                      "details": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": 0,
      "description": "match on required clause, product of:",
      "details": [
        {
          "value": 0,
          "description": "# clause",
          "details": []
        },
        {
          "value": 0.14514631,
          "description": "_type:Fair, product of:",
          "details": [
            {
              "value": 1,
              "description": "boost",
              "details": []
            },
            {
              "value": 0.14514631,
              "description": "queryNorm",
              "details": []
            }
          ]
        }
      ]
    }
  ]
}
</code></pre>

<p>分析上面的<code>_explanation</code>的输出：
<a href="https://atlas.mindmup.com/2016/08/7e9b664046a601346c5b03ba9eef99d0/es_relevance_score/index.html">计算结果图示</a></p>

<p>上面的搜索命令中，搜索URL后面的<code>?explain=1&amp;pretty=1&amp;search_type=dfs_query_then_fetch</code>是什么意思？
主要为了解决ES的sharding效果带来的计算结果不一致问题，
详见参考文献"How scoring works in Elasticsearch"的"The Sharding Effect"一节。</p>

<h2>参考文献</h2>

<ul>
<li><p><a href="https://www.compose.com/articles/how-scoring-works-in-elasticsearch/">How scoring works in Elasticsearch</a></p></li>
<li><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/scoring-theory.html">Theory Behind Relevance Scoring</a></p></li>
<li><p><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/relevance-intro.html">What Is Relevance?</a></p></li>
</ul>


<h1>搜索结果的排序方法</h1>

<p>观察上面的搜索命令，其中排序部分是：</p>

<pre><code>sort:='[{ "_score": { "order": "desc" }}, {"recurrence.timeStart": {"order" : "desc", "mode": "max"}}]'
</code></pre>

<p>其中包含两个排序指令：</p>

<ol>
<li><p>按照相关度逆序排列；</p></li>
<li><p>对于匹配度相同的展会，按照展会开始时间逆序排列</p></li>
</ol>


<p>参考文献：<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_sorting.html">Sorting</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Elasticsearch服务添加中文分词功能]]></title>
    <link href="http://leetschau.github.io/blog/2016/08/03/203624/"/>
    <updated>2016-08-03T20:36:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/08/03/203624</id>
    <content type="html"><![CDATA[<p>业务目标：</p>

<p>ES服务中的index &ldquo;production"需要增加中文分词，
具体效果见下面查询命令输出的对比。</p>

<h1>实现过程</h1>

<ol>
<li>将数据从mongoDB导入到临时index中；</li>
<li>从这个index生成mappings文件；</li>
<li>基于上面生成的mappings文件，添加中文分词功能，具体方法见后面"修改mappings文件";</li>
<li>根据这个mappings创建index &ldquo;production&rdquo;;</li>
<li>将数据从mongoDB导入到"production"中。</li>
</ol>


<p>下面是代码实现：
```
es_ip=192.168.100.90
es=&ldquo;$es_ip:9200&rdquo;
mongo_ip=&lsquo;192.168.xxx.xxx&rsquo;
tmp_idx=old_production
idx=production
type=Fair
mapping_file=&lsquo;newfairs-mappings.json&rsquo;</p>

<p>git clone <a href="https://github.com/leetschau/mongo2es.git">https://github.com/leetschau/mongo2es.git</a> &amp;&amp; cd mongo2es
mongoexport -h $mongo_ip -d $idx -c $type -u xxx -p xxx -o fairs.json
python3 uploadES.py fairs.json $es_ip $tmp_idx $type</p>

<p>http -b &ndash;pretty=format $es/$idx/_mapping/$type > $mapping_file</p>

<h1>add &ldquo;analyzer&rdquo; into this mapping, see notes below for details</h1>

<p>http -b PUT $es/$idx mappings:=@$mapping_file</p>

<p>python3 uploadES.py fairs.json $es_ip $idx $type</p>

<p>http -b POST $es/$tmp_idx/$type/<em>search query:=&lsquo;{&ldquo;bool&rdquo;:{&ldquo;must&rdquo;:[{ &ldquo;match&rdquo;: { &ldquo;recurrence.nameZHCN&rdquo;: &ldquo;五金机械&rdquo; }}]}}&rsquo; sort:=&lsquo;[{&ldquo;recurrence.timeStart&rdquo;: {&ldquo;order&rdquo; : &ldquo;desc&rdquo;, &ldquo;mode&rdquo;: &ldquo;max&rdquo;}}]&rsquo; size=10 | jq -r &lsquo;.hits.hits[] | &ldquo;(.</em>id): (.<em>source.recurrence[0].nameZHCN), (.</em>source.recurrence[0].timeStart)&rdquo;&rsquo;
G79B2vwBrHunwkXC6: 国际林业机械和新产品博览会, 2020-06-01T00:00:00.000Z
yXsohQLuRkBXuu8sz: 奥地利林业机械及设备展, 2019-10-08T00:00:00.000Z
uYcC2zMvw9FDutcwk: 金融服务国际展会, 2019-09-26T00:00:00.000Z
BNzwq3WrkH8N7T7tF: 2019年欧洲纺织机械展览会, 2019-06-20T00:00:00.000Z
pkjZjqbd6CSB62Z37: 国际冶金技术展暨研讨会, 2019-06-01T00:00:00.000Z
Rws7ZnBzCSL4AZCMa: 2019年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（2019年第32届德国国际工程机械博览会）, 2019-04-01T00:00:00.000Z
GxjMbDrGoiSDoECEN: 2019年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（2019年第32届德国国际工程机械博览会）, 2019-04-01T00:00:00.000Z
Kp83k5ciWCNyCapYb: 2019美国际冶金铸造展暨北美铸造年会, 2019-04-01T00:00:00.000Z
LeWCAmhymxxg7Pn64: 机械电子、控制、自动化、植入式电子器材, 2018-10-01T00:00:00.000Z
yD7RtepqLB9QnCSwj: 德国汉诺威国际金属板材加工展, 2018-10-01T00:00:00.000Z</p>

<p>http -b POST $es/$idx/$type/<em>search query:=&lsquo;{&ldquo;bool&rdquo;:{&ldquo;must&rdquo;:[{ &ldquo;match&rdquo;: { &ldquo;recurrence.nameZHCN&rdquo;: &ldquo;五金机械&rdquo; }}]}}&rsquo; sort:=&lsquo;[{&ldquo;recurrence.timeStart&rdquo;: {&ldquo;order&rdquo; : &ldquo;desc&rdquo;, &ldquo;mode&rdquo;: &ldquo;max&rdquo;}}]&rsquo; size=10 | jq -r &lsquo;.hits.hits[] | &ldquo;(.</em>id): (.<em>source.recurrence[0].nameZHCN), (.</em>source.recurrence[0].timeStart)&rdquo;&rsquo;
G79B2vwBrHunwkXC6: 国际林业机械和新产品博览会, 2020-06-01T00:00:00.000Z
yXsohQLuRkBXuu8sz: 奥地利林业机械及设备展, 2019-10-08T00:00:00.000Z
BNzwq3WrkH8N7T7tF: 2019年欧洲纺织机械展览会, 2019-06-20T00:00:00.000Z
Rws7ZnBzCSL4AZCMa: 2019年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（2019年第32届德国国际工程机械博览会）, 2019-04-01T00:00:00.000Z
GxjMbDrGoiSDoECEN: 2019年德国国际工程机械、建材机械、矿山机械、工程车辆及设备博览会（2019年第32届德国国际工程机械博览会）, 2019-04-01T00:00:00.000Z
LeWCAmhymxxg7Pn64: 机械电子、控制、自动化、植入式电子器材, 2018-10-01T00:00:00.000Z
2RQ65WebsKjsPXzby: 南非国际建筑机械、建材机械、矿山机械及工程车辆展, 2018-09-01T00:00:00.000Z
HDj7oxqP92FRHCmfx: 农业机械展（德国）, 2018-06-01T00:00:00.000Z
wbPbknwmCeXiYus7w: 德国科隆国际食品加工机械展, 2018-03-20T00:00:00.000Z
rF7utm6WC67R6wGgR: 2018年德国科隆国际五金工具展览会, 2018-03-03T16:00:00.000Z
```</p>

<p>可以看到临时index的查询结果中，第3、5、8、10项都是没有中文分词导致的错误查询结果，
添加中文分词的正式index中，这些结果都被过滤掉了。</p>

<h1>修改mappings文件</h1>

<h2>使用httpie创建index</h2>

<p>为了增加中文分词analyzer:</p>

<p>原有的mappings文件：</p>

<pre><code>{
    "production": {
        "mappings": {
            "Fair": {
                "properties": {
                    "createdAt": {
                        "format": "strict_date_optional_time||epoch_millis",
                        "type": "date"
                    },
                    "createdBy": {
                    ...
                    "nameZHCN": {
                        "type": "string"
                    }, 
                    ...
</code></pre>

<p>修改后的mappings文件：
<code>
{
    "Fair": {
        "properties": {
            "createdAt": {
                "format": "strict_date_optional_time||epoch_millis",
                "type": "date"
            },
            "createdBy": {
            ...
            "nameZHCN": {
                "type": "string",
                "analyzer": "smartcn"
            },
            ...
</code></p>

<p>两方面改动：</p>

<ol>
<li><p>在<code>nameZHCN</code>字段后增加"analyzer": &ldquo;smartcn"，
要改掉mappings中的所有的<code>nameZHCN</code>，否则可能会报格式冲突；</p></li>
<li><p>mappings文件的格式有变化：要去掉原文件中外层的index名称和<code>mappings:</code>，
但"mappings"后面的大括号不要去掉。</p></li>
</ol>


<p>在青云上的ES服务上验证通过，他们的ES服务应该安装了<a href="https://github.com/elastic/elasticsearch-analysis-smartcn">smartcn</a>插件，
如果是自己搭建的ES服务，需要手工安装这个插件。</p>

<p>参考：</p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html</a></p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html</a></p>

<h2>使用curl创建index</h2>

<p>使用<code>curl</code>时需要把<code>mappings</code>放在mapping文件里，也就是只去掉最外层的``：</p>

<pre><code>{
    "mappings": {
        "Fair": {
            "properties": {
             ...
</code></pre>

<p>然后用<code>curl -i -XPUT ${es_url}/$idx @fair-product-mappings.json</code>基于这个
mapping文件创建名为"$idx"的index.</p>

<h2>创建多个mappings</h2>

<p>如果在创建index时需要指定多个type mappings，需要都放在mappings文件里，
不能分开多次执行，否则报 <em>index已存在</em> 错误。
<code>
{
    "mappings": {
        "Fair": {
            "properties": {
             ...
        "Product": {
             ...
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synchronize Data From MongoDB to Elasticsearch]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/31/011200/"/>
    <updated>2015-10-31T01:12:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/31/011200</id>
    <content type="html"><![CDATA[<p>Your mongo replica set and elasticsearch are hosted on 2 servers.
The mongo server is on &ldquo;mip:mport&rdquo;.
The ES server is on &ldquo;esip:esport&rdquo;.</p>

<p>On another server, install <a href="https://github.com/mongodb-labs/mongo-connector">mongo-connector</a>
with <code>pip install mongo-connector</code>.
If there are some errors, it may be caused by absence of gcc.
On Ubuntu, install them with <code>sudo apt-get install build-essential python-dev</code>.</p>

<pre><code>mongo-connector -m mip:mport -t esip:esport -d elastic_doc_manager --admin-username root --password rootPwd
</code></pre>

<p>That&rsquo;s it!
Now when you insert documents into MongoDB,
you can see it on elasticsearch.</p>

<p>We&rsquo;ve studied Mongo River and Mongoosatic, neither is better than this.</p>

<p>Note 1 (2015.11.15):</p>

<p>阿里云服务器上，用普通用户es启动es服务(<code>bin/elasticsearch</code>)，同一用户启动mongo-connector后，报
&ldquo;AttributeError: &lsquo;IndicesClient&rsquo; object has no attribute &lsquo;delete_mapping&rsquo;"错误，
es版本为2.0，mongo-connector版本为2.1，将es版本改为1.7，mongo-connector改为1.3后，
仍然出现这一错误，原因是MongoDB中删除了test库中的一个Collection，但ES中仍然有，就会出现这个错误，
解决方法是清空ES的test重新同步一遍：
<code>curl -XDELETE http://123.57.188.18:9322/test</code>.
Ref: <a href="https://github.com/mongodb-labs/mongo-connector/issues/349">https://github.com/mongodb-labs/mongo-connector/issues/349</a></p>

<p>Note 2:</p>

<p>Use root to sync is unsafe.
We create an user with &ldquo;clusterManager&rdquo; role to do this work.
Login with root, and run:</p>

<pre><code>use admin
db.createUser(
    {
      user: "clustermgr",
      pwd: "cmpwd",
      roles: [ "clusterManager" ]
    }
)
</code></pre>

<p>But run the command
<code>mongo-connector -m 119.254.211.28:15515 -t localhost:9200 -d elastic_doc_manager --admin-username clustermgr --password cmpwd</code>
will be the error <code>OperationFailure: database error: not authorized for query on local.oplog.rs</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch River for MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/30/131706/"/>
    <updated>2015-10-30T13:17:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/30/131706</id>
    <content type="html"><![CDATA[<p>According to <a href="https://www.elastic.co/blog/deprecating-rivers">Deprecating Rivers</a>,
river is not supported any more.</p>

<h1>Mongo River</h1>

<p><a href="http://backslash451.github.io/articles/Running-ElasticSearch-with-MongoDB-and-Kibana/">http://backslash451.github.io/articles/Running-ElasticSearch-with-MongoDB-and-Kibana/</a></p>

<p>Buy a mongodb on <a href="https://www.qingcloud.com/">QingCloud</a>.
Connect to database with
<code>mongo 119.254.211.28:15515 --authenticationDatabase admin -u root -p nodeJS@2015</code>.
and run <code>rs.status()</code> to verify the replica set is working.</p>

<h2>Setup Elasticsearch</h2>

<p>See note &ldquo;Elasticsearch Notes&rdquo;.</p>

<h2>Setup Kibana</h2>

<p>See note &ldquo;Kibana Notes&rdquo;.</p>

<h2>Install River Plugin</h2>

<p>Follow <a href="https://github.com/richardwilly98/elasticsearch-river-mongodb">ichardwilly98/elasticsearch-river-mongodb</a>.</p>

<p>Run <code>bin/plugin install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.9</code>
at $ES_HOME.</p>

<p>List plugins: <code>bin/plugin list</code>.
Get help: <code>bin/plugin -h</code>.</p>

<p>When install in 2.0.0, there is an error:
<code>ERROR: Could not find plugin descriptor 'plugin-descriptor.properties' in plugin zip</code>.
For now, use elasticsearch 1.7.3 with river.</p>

<p>List plugins in v1.7.3: <code>sudo /usr/share/elasticsearch/bin/plugin --list</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Meteor With Elasticsearch]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/28/102957/"/>
    <updated>2015-10-28T10:29:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/28/102957</id>
    <content type="html"><![CDATA[<p>Install elasticsearch;</p>

<p>Follow the instructions in <a href="https://github.com/andrewreedy/meteor-elasticsearch">meteor-elasticsearch</a></p>

<p>Choose plugin version according to
<a href="https://github.com/richardwilly98/elasticsearch-river-mongodb.">https://github.com/richardwilly98/elasticsearch-river-mongodb.</a></p>

<p>Get elasticsearch version: <code>curl -XGET 'localhost:9200'</code></p>

<p>So mongo river plugin version 2.0.9 is installed:</p>

<pre><code>cd /usr/share/elasticsearch
sudo bin/plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0
sudo bin/plugin --remove com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.0
sudo bin/plugin --install com.github.richardwilly98.elasticsearch/elasticsearch-river-mongodb/2.0.9
</code></pre>

<p>Start elasticsearch server: <code>sudo /usr/share/elasticsearch/bin/elasticsearch --default.path.conf=/etc/elasticsearch/</code></p>

<p>Create a Meteor app with external mongodb connection, and verify it;</p>

<p>Add ES package: <code>meteor add bigdata:elasticsearch</code>;</p>

<p>Add the setting file &ldquo;settings.json&rdquo;;</p>

<p>Start the meteor server: <code>MONGO_URL="mongodb://user:pwd@ip:port/db" meteor --settings settings.json</code></p>

<p>Problem: the ES variable is undefined.</p>
]]></content>
  </entry>
  
</feed>
