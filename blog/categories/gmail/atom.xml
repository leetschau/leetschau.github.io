<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gmail | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/gmail/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-01T21:14:19+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用脚本下载Gmail邮件附件]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/04/171058/"/>
    <updated>2013-03-04T17:10:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/04/171058</id>
    <content type="html"><![CDATA[<p>以下脚本连接上我的Gmail帐号，将收件箱中2013年1月份的新语丝邮件的附件保存在当前目录的xys文件夹中。</p>

<pre><code>import imaplib
import email
import os
dir_name = 'archive'
if not os.path.exists(dir_name):
    os.mkdir(dir_name)
save_path = os.path.join(os.getcwd(),dir_name)
M = imaplib.IMAP4_SSL('imap.gmail.com')
M.login('leetschau@gmail.com', 'vim72python251')
M.select() # default value is inbox
search_criteria = '(From "Shi-min Fang" UNSEEN)'
# '(From "Shi-min Fang" SINCE "01-Jan-2013" BEFORE "01-FEB-2013")'
res, search_result = M.search(None, search_criteria)
for num in search_result[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    # print 'Message %s\n%s\n' % (num, data[0][1])
    email_body = data[0][1]
    mail = email.message_from_string(email_body)
    sender = mail['From']
    subject = mail['Subject']
    print "["+mail["From"]+"]: " + mail["Subject"]
    for part in mail.walk():
        if part.get_content_maintype() == 'multipart':
            continue
        if part.get('Content-Disposition') is None:
            continue
        filename = subject+'.txt'
        att_path = os.path.join(save_path, filename)
        if not os.path.isfile(att_path) :
            fp = open(att_path, 'wb')
            fp.write(part.get_payload(decode=True))
            fp.close()
M.close()
M.logout()
</code></pre>

<p>说明：</p>

<ol>
<li><p>附件保存的名字和扩展名是写死的，有兴趣的话可以研究一下怎样获得附件本身的文件名；</p></li>
<li><p>这个脚本的强大之处在于它不需要任何第三方库，只用python内置的imaplib，只用是支持imap的邮箱都可以用这个方法处理邮件；</p></li>
<li><p>这里面最有用的是邮件搜索规则（search_criteria），格式是(key1 value1 key2 value2 &hellip;)，每个value上加引号，整个表达式是一个字符串，因此也要加引号。</p></li>
</ol>


<p>key除了这里的收件人、起始/终止日期，还有ALL（全部邮件），UNSEEN（未读邮件），DELETED（已删除邮件）等，key-value对之间可以随意组合；</p>

<ol>
<li>M的select方法默认值是收件箱，可以指定其他信箱，完整格式是：IMAP4.select([mailbox[, readonly]])；</li>
</ol>


<p>参考1：<a href="http://stackoverflow.com/questions/6225763/downloading-multiple-attachments-using-imaplib">http://stackoverflow.com/questions/6225763/downloading-multiple-attachments-using-imaplib</a></p>

<p>参考2：Python 2.7.3 chapter 20.10 imaplib -> 20.10.2: IMAP4 Example</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量删除gmail邮件]]></title>
    <link href="http://leetschau.github.io/blog/2012/01/17/093556/"/>
    <updated>2012-01-17T09:35:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/01/17/093556</id>
    <content type="html"><![CDATA[<p>以删除tor.com发送的邮件为例说明。</p>

<p>首先点击邮件搜索框右边的三角，在“发件人”下面写上“tor.com”：</p>

<p>点“搜索”按钮，看一下范围是否合适；如果合适的话点“更多操作->创建过滤器->根据此搜索条件创建过滤器”：</p>

<p>勾选“删除邮件”和“同时……应用于……个会话”，点“创建过滤器”即可。</p>

<p>注1：如果之后还想看到tor.com发来的邮件，则需删除这个过滤器；</p>

<p>注2：多个关键词筛选邮件时，空格表示“与”关系，“||”表示“或”关系；</p>

<p>注3：我常用的过滤器：from:(squirrel || lawlib || newlaw || time ||tor.com)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird采用IMAP协议连接GMail时的ssl_error_rx_record_too_long问题]]></title>
    <link href="http://leetschau.github.io/blog/2011/04/07/090814/"/>
    <updated>2011-04-07T09:08:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/04/07/090814</id>
    <content type="html"><![CDATA[<p>用Thunderbird（版本：3.1.9）连接GMail时，总是报ssl_error_rx_record_too_long错误，解决办法是：在【工具->账户设置->[Gmail账号名]->服务器->连接安全】的值由【SSL/TLS】改为【STARTTLS】。</p>
]]></content>
  </entry>
  
</feed>
