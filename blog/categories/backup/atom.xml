<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backup | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/backup/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backup Hosts on QingCloud Regularly]]></title>
    <link href="http://leetschau.github.io/blog/2016/06/09/002707/"/>
    <updated>2016-06-09T00:27:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/06/09/002707</id>
    <content type="html"><![CDATA[<p>In QingCloud [Console -> Management -> Schedulers] create a new &ldquo;Scheduler&rdquo;
&ldquo;rollingBackup&rdquo;.
Create a new &ldquo;Task&rdquo; in this scheduler:</p>

<p>Name: backupJenkins
Type: Create Snapshots
Resources: click &ldquo;Select Instances&rdquo; and choose the Jenkins host &ldquo;devops&rdquo;</p>

<p>Question:</p>

<ul>
<li><p>How to specify the interval of the backup?</p></li>
<li><p>How to specify the running time of the backup?</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint System Backup and Restore]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/17/151844/"/>
    <updated>2015-04-17T15:18:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/17/151844</id>
    <content type="html"><![CDATA[<p>Use this note to build a development environment quickly on a fresh Ubuntu/Mint os.</p>

<h1>Packages</h1>

<p>First make sure <code>&lt;deb-url&gt;/dists/&lt;dist-name&gt;</code> of your distro exists.
To Ubuntu Trusty, it&rsquo;s <a href="http://mirrors.ustc.edu.cn/ubuntu/dists/trusty/main">http://mirrors.ustc.edu.cn/ubuntu/dists/trusty/main</a>
or universe, restricted, etc.
Then add the following lines to /etc/apt/sources.list:</p>

<pre><code>deb http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse
</code></pre>

<p>Next run <code>aptitude update</code> and install the following packages with <code>aptitude</code>:</p>

<pre><code>zsh git vim autojump curl tree tmux
</code></pre>

<p>The following packages are only needed on physical metal, not on virtual host:</p>

<pre><code>i3 i3status dmenu openssh-server parcellite udevil
</code></pre>

<p>where udevil is for USB management.</p>

<h1>Apps installed manually</h1>

<ul>
<li><p><a href="https://github.com/leetschau/dsnote">dsnote</a></p></li>
<li><p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p></li>
<li><p><a href="https://github.com/tpope/vim-pathogen">pathogen</a></p></li>
<li><p><a href="https://github.com/leetschau/sysClone">sysClone</a></p></li>
<li><p>Power management script: pm, see note <a href="http://leetschau.github.io/blog/2014/08/24/110909/">Build Working Environment With I3 and Mint</a></p></li>
</ul>


<h1>vim plugins</h1>

<ul>
<li><p><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a></p></li>
<li><p><a href="https://github.com/kien/ctrlp.vim">ctrlp</a></p></li>
</ul>


<h1>System configurations to be synchronized</h1>

<p>Prototype of <a href="https://github.com/leetschau/sysClone">sysClone</a>:</p>

<pre><code>backupConf() {
    rsync -av --update --ignore-missing-args $HOME/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.oh-my-zsh/themes/lichao.zsh-theme,.xsessionrc} confs/
    rsync -av --update --ignore-missing-args $HOME/.i3/config confs/.i3.config
}

restoreConf() {
    rsync -av --update confs/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.xsessionrc} $HOME
    rsync -av --update confs/lichao.zsh-theme $HOME/.oh-my-zsh/themes
    rsync -av --update confs/.i3.config $HOME/.i3/config
}
</code></pre>

<p>I use an array of tuples to combine above 2 scripts. For details of its methods in shell, see
<a href="http://www.cyberciti.biz/faq/bash-for-loop-array/">Bash For Loop Array: Iterate Through Array Values</a> and
<a href="http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash">http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash</a></p>

<h1>Firefox plugins</h1>

<ul>
<li><p>Downthemall</p></li>
<li><p>vimfx</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Website Remotely]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/05/095056/"/>
    <updated>2015-03-05T09:50:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/05/095056</id>
    <content type="html"><![CDATA[<h1>Prerequisite</h1>

<h2>Managing Node</h2>

<p>// Install Fabric with <code>sudo pip install fabric</code>.</p>

<p>Install ansible with <code>sudo pip install ansible</code>.</p>

<h2>Provision of remote host</h2>

<p>Create user with <code>sudo useradd -m chad</code>,
then add ssh-auto-login with <code>ssh-copy-id ...</code>.</p>

<p>// Install Node.js, MongoDB,</p>

<h1>Backup MongoDB</h1>

<h1>Import new data</h1>

<h1>Update website codes</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS Backup and Restore for Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/31/135135/"/>
    <updated>2013-12-31T13:51:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/31/135135</id>
    <content type="html"><![CDATA[<h1>Redo</h1>

<p><a href="http://redobackup.org/">Redo</a></p>

<p>Most user-friendly of all. The only one supporting mouse.
I backuped system and swap partition on a ftp server (hadoop:<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x68;&#x61;&#x64;&#x6f;&#111;&#x70;&#64;&#x31;&#48;&#46;&#x32;&#49;&#46;&#51;&#46;&#51;&#49;">&#x68;&#x61;&#100;&#111;&#111;&#112;&#x40;&#x31;&#x30;&#x2e;&#50;&#49;&#46;&#51;&#x2e;&#x33;&#x31;</a>).
It provided a tiny OS including terminal, browser, editor, etc.
But it can&rsquo;t backup to your booting USB stick.
So if you want backup to a local disk, you have to backup to another partition or another USB stick.</p>

<p>Restore operation is concise as well.
Select the ftp server when prompting for input &ldquo;Source Drive&rdquo;, then specify the location of the backup file on the ftp server.
Verified at 2014/&frac12;.</p>

<h1>PING</h1>

<p><a href="http://ping.windowsdream.com/">PING</a></p>

<p>Worked ok. Not very user-friendly.
You can backup to your booting USB stick. Didn&rsquo;t test server backup.</p>

<p>Restore not tested.</p>

<h1>Clonezilla</h1>

<p><a href="http://clonezilla.org/">Clonezilla</a></p>

<p>Backup failed for not enough destination disk space. It request bigger free space on destination than source disk.</p>

<h1>G4L</h1>

<p><a href="http://sourceforge.net/projects/g4l/">G4L</a></p>

<p>Very slow and can&rsquo;t save space when there are large unused space on source OS disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup and Restore Postgresql Database]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/29/100558/"/>
    <updated>2013-11-29T10:05:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/29/100558</id>
    <content type="html"><![CDATA[<h1>Backup</h1>

<p>(On CentOS 6.4)</p>

<p>Enable backup as user &ldquo;sonar&rdquo;: modify authentication file pg_hba.conf following SonarQube and Postgresql on Linux ;</p>

<p>Then you can backup a database: $ pg_dump -U sonar -F c -v -f sonar.bak sonar</p>

<p>Synopsis: pg_dump [options] <db_name>. &ldquo;-F c&rdquo; means using &ldquo;custom&rdquo; file format. -f specifies the output file name.</p>

<p>Or backup all: $ pg_dumpall -U postgres -f totalbackup.sql -v -c</p>

<p>The &ldquo;-c&rdquo; will print drop commands to remove existing databases or roles. So you can restore them without cleaning existing databases in your backup server first.</p>

<h1>Restore</h1>

<p>Install and start postgresql server. Then you can restore a full backup:</p>

<p> $ psql -U postgres -f totalbackup.sql</p>

<p>Or restore a specific database:</p>

<ol>
<li><p>$ psql -U postgres (modify pg_hba.conf for authenticaiton);</p></li>
<li><p>create role &ldquo;sonar&rdquo; and database &ldquo;sonar&rdquo;:</p></li>
</ol>


<p> create role sonar login password &lsquo;sonar&rsquo;;</p>

<p> create database sonar owner sonar;</p>

<ol>
<li>$ pg_restore -U sonar -d sonar -j 4 -v sonar.bak</li>
</ol>


<h1>Verify</h1>

<ul>
<li>Print database size of &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\l+&rdquo; sonar|grep sonar</p>

<ul>
<li>Print all tables and sizes in database &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\d+&rdquo; sonar</p>

<p>Or run a psql console ($ psql -U sonar), and use the following commands to verify:</p>

<ul>
<li><p>\d // list all tables</p></li>
<li><p>select * from projects; // print contents of table &ldquo;projects&rdquo;</p></li>
<li><p>select pg_size_pretty(pg_database_size(&lsquo;sonar&rsquo;)); // print the human_readable size of database &ldquo;sonar&rdquo;</p></li>
<li><p>select pg_database_size(&lsquo;sonar&rsquo;); // give the exact size of database &ldquo;sonar&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
