<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backup | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/backup/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-23T11:15:02+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS Backup and Restore for Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/31/135135/"/>
    <updated>2013-12-31T13:51:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/31/135135</id>
    <content type="html"><![CDATA[<h1>Redo</h1>

<p><a href="http://redobackup.org/">Redo</a></p>

<p>Most user-friendly of all. The only one supporting mouse.
I backuped system and swap partition on a ftp server (hadoop:<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x68;&#x61;&#x64;&#111;&#111;&#112;&#64;&#49;&#x30;&#x2e;&#50;&#49;&#46;&#x33;&#46;&#x33;&#49;">&#x68;&#x61;&#100;&#111;&#x6f;&#112;&#x40;&#x31;&#x30;&#x2e;&#x32;&#x31;&#x2e;&#51;&#46;&#51;&#x31;</a>).
It provided a tiny OS including terminal, browser, editor, etc.
But it can&rsquo;t backup to your booting USB stick.
So if you want backup to a local disk, you have to backup to another partition or another USB stick.</p>

<p>Restore operation is concise as well.
Select the ftp server when prompting for input &ldquo;Source Drive&rdquo;, then specify the location of the backup file on the ftp server.
Verified at 2014/&frac12;.</p>

<h1>PING</h1>

<p><a href="http://ping.windowsdream.com/">PING</a></p>

<p>Worked ok. Not very user-friendly.
You can backup to your booting USB stick. Didn&rsquo;t test server backup.</p>

<p>Restore not tested.</p>

<h1>Clonezilla</h1>

<p><a href="http://clonezilla.org/">Clonezilla</a></p>

<p>Backup failed for not enough destination disk space. It request bigger free space on destination than source disk.</p>

<h1>G4L</h1>

<p><a href="http://sourceforge.net/projects/g4l/">G4L</a></p>

<p>Very slow and can&rsquo;t save space when there are large unused space on source OS disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup and Restore Postgresql Database]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/29/100558/"/>
    <updated>2013-11-29T10:05:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/29/100558</id>
    <content type="html"><![CDATA[<h1>Backup</h1>

<p>(On CentOS 6.4)</p>

<p>Enable backup as user &ldquo;sonar&rdquo;: modify authentication file pg_hba.conf following SonarQube and Postgresql on Linux ;</p>

<p>Then you can backup a database: $ pg_dump -U sonar -F c -v -f sonar.bak sonar</p>

<p>Synopsis: pg_dump [options] <db_name>. &ldquo;-F c&rdquo; means using &ldquo;custom&rdquo; file format. -f specifies the output file name.</p>

<p>Or backup all: $ pg_dumpall -U postgres -f totalbackup.sql -v -c</p>

<p>The &ldquo;-c&rdquo; will print drop commands to remove existing databases or roles. So you can restore them without cleaning existing databases in your backup server first.</p>

<h1>Restore</h1>

<p>Install and start postgresql server. Then you can restore a full backup:</p>

<p> $ psql -U postgres -f totalbackup.sql</p>

<p>Or restore a specific database:</p>

<ol>
<li><p>$ psql -U postgres (modify pg_hba.conf for authenticaiton);</p></li>
<li><p>create role &ldquo;sonar&rdquo; and database &ldquo;sonar&rdquo;:</p></li>
</ol>


<p> create role sonar login password &lsquo;sonar&rsquo;;</p>

<p> create database sonar owner sonar;</p>

<ol>
<li>$ pg_restore -U sonar -d sonar -j 4 -v sonar.bak</li>
</ol>


<h1>Verify</h1>

<ul>
<li>Print database size of &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\l+&rdquo; sonar|grep sonar</p>

<ul>
<li>Print all tables and sizes in database &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\d+&rdquo; sonar</p>

<p>Or run a psql console ($ psql -U sonar), and use the following commands to verify:</p>

<ul>
<li><p>\d // list all tables</p></li>
<li><p>select * from projects; // print contents of table &ldquo;projects&rdquo;</p></li>
<li><p>select pg_size_pretty(pg_database_size(&lsquo;sonar&rsquo;)); // print the human_readable size of database &ldquo;sonar&rdquo;</p></li>
<li><p>select pg_database_size(&lsquo;sonar&rsquo;); // give the exact size of database &ldquo;sonar&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subversion Backup and Restore]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/31/174404/"/>
    <updated>2013-10-31T17:44:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/31/174404</id>
    <content type="html"><![CDATA[<h1>Backup Specified Revision</h1>

<ol>
<li><p>Backup specified revision (here is 20):</p>

<p> $ cd /opt/svnRepo
 $ svnadmin dump deployTest/ -r 20 > deploy-r20.dump</p></li>
<li><p>Restore backup:</p>

<p> $ mv deploy-r20.dump /opt/Gcp/tmp
 $ cd /opt/Gcp/tmp
 $ svnadmin create deploy20
 $ svnadmin load deploy20 &lt; deploy-r20.dump</p></li>
</ol>


<h1>Verify</h1>

<ol>
<li><p>Get revision 20 of &ldquo;deploy.exp&rdquo; in original repository</p>

<p> $ svn cat -r 20 file:///opt/svnRepo/deployTest/CalcServer/deploy.exp > r20</p></li>
<li><p>Get &ldquo;deploy.exp&rdquo; in restored repository</p>

<p> $ svn cat file:///opt/Gcp/tmp/deploy20/CalcServer/deploy.exp > restore20</p></li>
<li><p>Compare them:</p>

<p> $ diff r20 restore20</p></li>
</ol>


<p>They are identical.</p>

<ol>
<li><p>Compare logs:</p>

<h2> [root@cloud141 /opt/svnRepo]$ svn log -r 20 file:///opt/svnRepo/deployTest/ </h2>

 r20 | bvt | 2013-08-30 17:30:03 +0800 (Fri, 30 Aug 2013) | 1 line

<h2> remove unittest in source file </h2>

<h2> [root@cloud141 /opt/svnRepo]$ svn log file:///opt/Gcp/tmp/deploy20 </h2>

 r1 | bvt | 2013-08-30 17:30:03 +0800 (Fri, 30 Aug 2013) | 1 line

<h2> remove unittest in source file </h2></li>
</ol>


<p>So you can see the restored repository is identical to that part of original repository <strong>except</strong> the revision number.</p>

<h1>Backup Specified Revisions</h1>

<pre><code>$ svnadmin dump deployTest/ -r 10:20 &gt; deploy-r20.dump
</code></pre>

<h1>Incremental Backup</h1>

<ol>
<li><p>Backup:</p>

<p> $svnadmin dump myrepos -r 0:1000 > 0-1000.dumpfile
 $svnadmin dump myrepos -r 1001:2000 &ndash;incremental > 1001-2000.dumpfile
 $svnadmin dump myrepos -r 2001:3000 &ndash;incremental > 2001:3000.dumpfile</p></li>
<li><p>Restore:</p>

<p> $svnadmin load myrepos &lt; 0-1000.dumpfile
 $svnadmin load myrepos &lt; 1001-2000.dumpfile
 $svnadmin load myrepos &lt; 2001:3000.dumpfile</p></li>
</ol>


<h2>Experiment on incremental dump</h2>

<ol>
<li><p>Create a incremental backup:</p>

<p> [root@cloud141 /opt/svnRepo]$ svnadmin dump deployTest/ &ndash;incremental -r 9:11 > r9-11.dump</p></li>
<li><p>Create a full backup:</p>

<p> [root@cloud141 /opt/svnRepo]$ svnadmin dump deployTest/ -r 9:11 > backup9-11.dump</p></li>
<li><p>Compare the size of these two dump files, full backup is obviously larger than the incremental counterpart:</p>

<p> [root@cloud141 /opt/svnRepo]$ ll
 total 984
 -rw-r&ndash;r&ndash; 1 root root 997105 Oct 31 19:08 backup9-11.dump
 drwxr-xr-x 6 root root 4096 Aug 22 18:09 deployTest
 -rw-r&ndash;r&ndash; 1 root root 2509 Oct 31 19:07 r9-11.dump</p></li>
<li><p>Restore a incremental backup in a fresh repository:</p>

<p> [root@cloud141 /opt/svnRepo]$ mv r9-11.dump ../Gcp/tmp
 [root@cloud141 /opt/Gcp/tmp]$ svnadmin create new9
 [root@cloud141 /opt/Gcp/tmp]$ svnadmin load new9 &lt; r9-11.dump
 &lt;&lt;&lt; Started new transaction, based on original revision 9
 svnadmin: File not found: transaction &lsquo;0-0&rsquo;, path &lsquo;CalcServer/src/com/boco/deploy/ConfigLoader.java&rsquo;</p>

<ul>
<li> editing path : CalcServer/src/com/boco/deploy/ConfigLoader.java &hellip;[root@</li>
</ul>
</li>
</ol>


<p>You can see the restore failed.</p>

<ol>
<li><p>Restore a incremental backup (revision 9~11) in a &ldquo;root&rdquo; repository (restored from revision 8) :</p>

<p> [root@cloud141 /opt/Gcp/tmp]$ svnadmin load backup8 &lt; r9-11.dump
 &hellip;</p>

<h2> [root@cloud141 /opt/Gcp/tmp]$ svn log file:///opt/Gcp/tmp/backup8 </h2>

 r4 | bvt | 2013-08-30 16:35:10 +0800 (Fri, 30 Aug 2013) | 1 line

<h2> initial import project </h2>

 r3 | bvt | 2013-08-30 15:31:47 +0800 (Fri, 30 Aug 2013) | 1 line

<h2> make new project basedir </h2>

 r2 | bvt | 2013-08-29 14:32:15 +0800 (Thu, 29 Aug 2013) | 1 line

<h2> remove unittest in source file to pass compile without junit </h2>

 r1 | bvt | 2013-08-29 14:31:10 +0800 (Thu, 29 Aug 2013) | 1 line

<h2> remove unittest in source file to pass compile without junit </h2></li>
</ol>


<p>Now the restore succeed.</p>

<h2>Summary</h2>

<p>Backup a huge repository in the following steps:</p>

<ol>
<li><p>Execute a full backup at a revision. If the revision n is not 0, you will lose all revisions from 0 to n-1;</p></li>
<li><p>Execute incremental backups weekly, use the revision arrange as file name: &ldquo;inc-rev-from-to.dump&rdquo;, like &ldquo;inc-rev-35-46.dump&rdquo;;</p></li>
<li><p>When original repository corrupts, first load the full backup, then load the incremental ones according to their revision numbers;</p></li>
</ol>


<p>Ref:</p>

<ul>
<li><p><a href="http://blog.csdn.net/windone0109/article/details/2908133">SVN版本库的备份、还原、移植（初级篇、中级篇和高级篇）</a></p></li>
<li><p><a href="http://greyshine.blog.51cto.com/1003856/415113">SVN备份及其还原——dump/load方法</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
