<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Plugin | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/plugin/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiple Cursors in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2016/10/02/223400/"/>
    <updated>2016-10-02T22:34:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/10/02/223400</id>
    <content type="html"><![CDATA[<p>Use plugin <a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a>.</p>

<p>Install this plugin with adding <code>Plugin 'terryma/vim-multiple-cursors'</code>
into .vimrc.</p>

<p>The default key mappings is C-n for start multiple cursors and move to next,
C-p for previous, C-x to skip, and <ECS> for quit.
For C-n conflicts with nerdtree, modify the nerdtree trigger to <code>C-i</code>:
<code>
nnoremap &lt;C-i&gt; :NERDTreeTabsToggle&lt;CR&gt;
</code></p>

<p>Note:</p>

<p>Do <strong>not</strong> map &lsquo;next/previous&rsquo; to C-j/k as follows:</p>

<pre><code>" multiple cursors configs
let g:multi_cursor_next_key='&lt;C-j&gt;'
let g:multi_cursor_prev_key='&lt;C-k&gt;'
</code></pre>

<p>for C-j/k is mapped to keys jumping between windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在vim中执行shell命令的插件]]></title>
    <link href="http://leetschau.github.io/blog/2016/07/02/024310/"/>
    <updated>2016-07-02T02:43:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/07/02/024310</id>
    <content type="html"><![CDATA[<p>需要做一个vim工具，基本功能是通过一个快捷键，把选中的内容（或者当前行）发送到指定的tmux pane中，并执行。</p>

<h1>实现过程</h1>

<p>目录结构：当前工作目录下有 sendcmd.vim 和 test.md 两个文件，
前者包含实现功能的 vim 函数，后者是包含要执行命令行的数据文件。</p>

<p>开发环境：tmux window 1 做sendcmd.vim开发，window 2 上下拆分为两个pane
，上面 (ptop) 是命令行，下面的 pane (pbottom) 中用 vim 打开数据文件test.md.</p>

<p>每次修改并保存sendcmd.vim后，在test.md中执行<code>:so sendcmd.vim</code>，
然后把光标移动到要执行的命令所在的行上按<code>F3</code>键就可以看到命令被发送到ptop里的
执行效果了。</p>

<h2>格式探测</h2>

<p>这一步要解决的问题是：怎样的字符串，才能被<code>tmux send-keys</code>正确地传送出去，
并能正确的执行。</p>

<p>首先要保证运行<code>tmux send-keys</code>不报错，如果报错，
将第5行的输出拷贝到一个单独的命令行中运行，解决错误。</p>

<p>这一步通过后，如果命令被传送到<code>ptop</code>后报错，根据错误日志解决之。</p>

<p>sendcmd.vim：</p>

<pre><code>
function! SendCmd()
  let curline = getline(".")
  echom curline
  let cmd = "tmux send-keys -t top '" . curline . "' Enter"
  echom cmd
  echom system(cmd)
endfunction

nnoremap &lt;F3&gt; :call SendCmd()&lt;CR&gt;
</code></pre>

<p>说明：</p>

<ul>
<li>为什么第4行中<code>curline</code>要用单引号（而不是双引号）包裹？</li>
</ul>


<p>因为要执行的命令中可能包含变量（如es, idx等），双引号包裹的变量会被求值，
而我们的要求是这些变量不能被求值，要等到被发送到ptop后再被求值。由于这个原因，
第4行包裹外层<code>tmux send-keys</code>的命令就只能用双引号包裹。</p>

<ul>
<li>vimscript如何连接字符串？</li>
</ul>


<p>同样参考第4行，用点（ . ）连接。</p>

<ul>
<li><code>tmux send-keys -t top</code> 可以将keys从下面的pane发给上面，
也可以从左侧发到右侧，但如果是在右侧pane里执行这个语句，则会被发给自己。</li>
</ul>


<p>test.md：</p>

<pre><code>es=http://192.168.100.231:9200
api=http://192.168.100.231:8000
idx=production
type=Fair

# get elasticsearch version
http $es | jq '.version.number'

# list all indices
http -b GET $es'/_cat/indices?v'
http -b GET $es'"'"'/_cat/indices?v'"'"'

# list all types of a index
http -b GET $es/$idx/_mapping|jq ".$idx.mappings|keys"

# list all properties of a type
http -b GET $es/$idx/_mapping|jq ".$idx.mappings.$type.properties|keys"

# get objects count in a type
http -b GET $es/$idx/$type/_count|jq '.count'
http -b GET $es/$idx/$type/_count|jq '"'"'.count'"'"'

# query result count
http -b POST $es/$idx/$type/_search query:='{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}' | jq '.hits.total'
http -b POST $es/$idx/$type/_search query:=''{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}''
http -b POST $es/$idx/$type/_search query:='"'"'{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}'"'"'
http -b POST $es/$idx/$type/_search query:='"'"'{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}'"'"' | jq '"'"'.hits.total'"'"'
</code></pre>

<p>通过不断尝试后，发现用<code>'"'"'</code>代替<code>'</code>就能正确的发送并执行，
见第10,11行，20,21行，24~27行。</p>

<p>下面以第10行为例分析其结构：</p>

<ol>
<li><p>第一个单引号与外层的单引号结合，包裹它们中间的内容<code>http -b GET $es</code>，
保证里面的特殊字符（<code>$</code>）不会被求值；</p></li>
<li><p>中间的<code>"'"</code>是一组，实现被<code>tmux</code>发送后，最终执行的命令行里仍有一个单引号
（<code>$es</code>后面的单引号）；</p></li>
<li><p>最后的单引号，与后面的<code>'"'"'</code>中最左边的单引号组合，
包裹中间的内容<code>/_cat/indices?v</code>，如果没有这一组单引号，
里面的问好就会被求值，导致命令无法执行。</p></li>
</ol>


<p>这一步实现了在第11、21、27行上按<code>F3</code>键可以正确执行。</p>

<h2>整合进vim function</h2>

<p>这一步将前面的测试结果放进vim函数中，实现在第10、20、24行上能够正确执行。</p>

<p>sendcmd.vim：
<code>
function! SendCmd()
  let curline = getline(".")
  echom curline
  let escstr = substitute(curline, "'", "'\"'\"'", 'g')
  let cmd = "tmux send-keys -t top '" . escstr . "' Enter"
  echom cmd
  echom system(cmd)
endfunction
nnoremap &lt;F3&gt; :call SendCmd()&lt;CR&gt;
</code></p>

<h2>制作成插件</h2>

<p>当功能基本定型后，可以把脚本变成插件，避免每次使用时加载。</p>

<p>最简单的vim插件，只要在一个目录（tmuxcmd）里创建一个<code>plugin</code>目录，
把.vim脚本放进去，然后把目录做成git库就行了：</p>

<pre><code>mkdir -p tmuxcmd/plugin
mv test.vim tmuxcmd/plugin/tmuxcmd.vim
cd tmuxcmd
git init
git add ...; git commit -m "..."
</code></pre>

<p>在.vimrc里加入这个插件：增加一行代码：<code>Plugin 'file:///home/leo/temp/tmuxcmd'</code></p>

<p>安装：<code>vim +PluginInstall</code></p>

<p>安装过程实际是把代码库clone到~/.vim/bundle下，
修改~/.vim/bundle/tmuxcmd/plugin/tmuxcmd.vim文件在新的vim编辑器中不会生效。</p>

<p>本地插件需要保存一个本地目录，更简单的方法是发布到github上，再用vundle安装：</p>

<ol>
<li><p>把代码库push到github上：
<a href="https://github.com/leetschau/tmuxcmd">leetschau/tmuxcmd</a></p></li>
<li><p>在.vimrc中，把原来的<code>Plugin 'file:///home/leo/temp/tmuxcmd'</code>换成
<code>Plugin 'leetschau/tmuxcmd'</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Snippet Plugins]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/17/220931/"/>
    <updated>2015-10-17T22:09:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/17/220931</id>
    <content type="html"><![CDATA[<p>Add codes below into ~/.vimrc:</p>

<pre><code>let g:UltiSnipsEditSplit='vertical'

Plugin 'mattn/emmet-vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
</code></pre>

<p>Run <code>vim +PluginClean +PluginInstall +qa</code>.
The folder of UltiSnips is about 6.1MB, emmet-vim is about 1.6MB.</p>

<p>Here <a href="https://github.com/mattn/emmet-vim">emmet-vim</a> is a html editing tool.
For example open a new html file with <code>html:5</code>, and press <code>&lt;C-y&gt;,</code>,
you get a full html skeleton, which means emmet installed OK.</p>

<p><a href="https://github.com/sirver/ultisnips">UltiSnips</a> is a vim snippet engine,
while <a href="https://github.com/honza/vim-snippets">vim-snippets</a> is a bunch of
snippets definitions.</p>

<p>Use <code>UltiSnipsEdit</code> to add a new snippet.
Use <code>cl&lt;TAB&gt;</code> in a js file, to make it expand to <code>console.log(...);</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab and Session Management in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/14/192323/"/>
    <updated>2015-10-14T19:23:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/14/192323</id>
    <content type="html"><![CDATA[<p>Session management is provided by <a href="https://github.com/tpope/vim-obsession">tpope/vim-obsession</a>.
Tab rename function is provided by <a href="https://github.com/gcmt/taboo.vim">gcmt/taboo.vim</a>.</p>

<p>In ~/.vimrc:</p>

<pre><code>" Customize tabline
hi TabLineFill term=bold cterm=bold ctermbg=0
hi TabLine ctermfg=Yellow

" Taboo
set sessionoptions+=tabpages,globals
cabbrev tr TabooRename

" tab switching shortcuts
noremap &lt;leader&gt;1 1gt
noremap &lt;leader&gt;2 2gt
noremap &lt;leader&gt;3 3gt
noremap &lt;leader&gt;4 4gt
noremap &lt;leader&gt;5 5gt
noremap &lt;leader&gt;6 6gt
noremap &lt;leader&gt;7 7gt
noremap &lt;leader&gt;8 8gt
noremap &lt;leader&gt;9 9gt
noremap &lt;leader&gt;0 :tablast&lt;cr&gt;

" Add these into Vundle section
Plugin 'gcmt/taboo.vim'
Plugin 'tpope/vim-obsession'
</code></pre>

<p>Now open file in a new tab with: <code>Ctrl-P</code>, select a file and <code>Ctrl-O, t</code>.
Open file in a virtical split window with: <code>Ctrl-P</code>, select a file and <code>Ctrl-O, v</code>.
Rename tab with: <code>:tr&lt;Space&gt;new name&lt;Enter&gt;</code>.
Jump to the 3rd window with <code>,3</code>.</p>

<p>Note:</p>

<p>I also tried <a href="https://github.com/xolox/vim-session">xolox/vim-session</a>,
but it can&rsquo;t persist tab name created by Taboo.</p>

<p>For tab easy switch, I&rsquo;ve tried <code>noremap &lt;unique&gt; &lt;C-1&gt; 1gt</code> based on
<a href="http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim">Switching to a particular tab in VIM</a>,
where changes M-Num to C-Num, because M-Num is assigned to tmux window switch.
However C-Num can&rsquo;t work,
see <a href="http://stackoverflow.com/questions/15849537/vimrc-mapping-for-control-key-not-working">.vimrc mapping for control key not working</a>
for explanations.
So I adopted <code>noremap &lt;leader&gt;1 1gt</code> style based on
<a href="http://superuser.com/questions/410982/in-vim-how-can-i-quickly-switch-between-tabs">In vim, how can I quickly switch between tabs?</a>.</p>

<p>Mapping long Ex commands with <code>cabbrev</code> is a very useful for convenient.
Use <Space> or <Enter> instead of <Tab> to enable abbreviation in <code>cabbrev</code>.
See <code>:h :ca</code>, <a href="http://stackoverflow.com/questions/117150/can-i-re-map-commands-in-vim">Can I (re-) map commands in vim?</a>
and <a href="http://stackoverflow.com/questions/3878692/aliasing-a-command-in-vim">Aliasing a command in vim</a>
for details.</p>

<p>With <code>cabbrev tr TabooRename</code>, you can use <code>:tr&lt;Space&gt;1:tests</code> to rename current tab into &ldquo;1:tests&rdquo;.
Here you have to add tab index manually to make <code>&lt;leader&gt;&lt;number&gt;</code> style switching more convenient.</p>

<p>To make tabline more readable,
I customized the color of it.
See <a href="http://stackoverflow.com/questions/4726882/how-do-you-change-the-background-color-of-the-empty-tab-space-in-vim">How do you change the background color of the empty tab space in vim?</a>
and <a href="http://stackoverflow.com/questions/7238113/customising-the-colours-of-vims-tab-bar">Customising the colours of vim&rsquo;s tab bar</a>
for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git in Vim With Fugitive]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/05/110947/"/>
    <updated>2015-10-05T11:09:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/05/110947</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<p>Add <code>Plugin 'tpope/vim-fugitive'</code> into ~/.vimrc
and run <code>vim +PluginClean +PluginInstall +qa</code>.</p>

<h1>Get Help</h1>

<p>:help fugitive</p>

<h1>Frequently Use Commands</h1>

<table>
<thead>
<tr>
<th>Action Name </th>
<th> Meaning                </th>
<th> Close Window with</th>
</tr>
</thead>
<tbody>
<tr>
<td>:Gblame     </td>
<td> show info of each line </td>
<td> q</td>
</tr>
<tr>
<td>:Gdiff      </td>
<td> show diff in vim       </td>
<td> :q</td>
</tr>
<tr>
<td>:Gstatus    </td>
<td> show git status        </td>
<td> q</td>
</tr>
</tbody>
</table>


<h2>In Gstatus</h2>

<p>In &ldquo;:Gst&rdquo; window, you can use
&ldquo;-&rdquo; to add/remove a file in/out stage area,
&ldquo;cc&rdquo; to commit,
&ldquo;U&rdquo; to reset (discard local changes), you may need reload the file with <code>:e</code>
&ldquo;dv&rdquo; to diff in vertical split,
&ldquo;ds&rdquo; or &ldquo;D&rdquo; to diff in horizontal split (<code>:q</code> to quit from diff)
&ldquo;g?&rdquo; to see all available actions.</p>

<p>To see the file changes history: <code>:Git log --stat</code>.</p>

<h1>Working with nerdtree</h1>

<p>Add <code>Plugin 'Xuyuanp/nerdtree-git-plugin'</code> into .vimrc.</p>
]]></content>
  </entry>
  
</feed>
