<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Plugin | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/plugin/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-20T11:01:10+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim Snippet Plugins]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/17/220931/"/>
    <updated>2015-10-17T22:09:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/17/220931</id>
    <content type="html"><![CDATA[<p>Add codes below into ~/.vimrc:</p>

<pre><code>let g:UltiSnipsEditSplit='vertical'

Plugin 'mattn/emmet-vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
</code></pre>

<p>Run <code>vim +PluginClean +PluginInstall +qa</code>.
The folder of UltiSnips is about 6.1MB, emmet-vim is about 1.6MB.</p>

<p>Here <a href="https://github.com/mattn/emmet-vim">emmet-vim</a> is a html editing tool.
For example open a new html file with <code>html:5</code>, and press <code>&lt;C-y&gt;,</code>,
you get a full html skeleton, which means emmet installed OK.</p>

<p><a href="https://github.com/sirver/ultisnips">UltiSnips</a> is a vim snippet engine,
while <a href="https://github.com/honza/vim-snippets">vim-snippets</a> is a bunch of
snippets definitions.</p>

<p>Use <code>UltiSnipsEdit</code> to add a new snippet.
Use <code>cl&lt;TAB&gt;</code> in a js file, to make it expand to <code>console.log(...);</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tab and Session Management in Vim]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/14/192323/"/>
    <updated>2015-10-14T19:23:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/14/192323</id>
    <content type="html"><![CDATA[<p>Session management is provided by <a href="https://github.com/tpope/vim-obsession">tpope/vim-obsession</a>.
Tab rename function is provided by <a href="https://github.com/gcmt/taboo.vim">gcmt/taboo.vim</a>.</p>

<p>In ~/.vimrc:</p>

<pre><code>" Customize tabline
hi TabLineFill term=bold cterm=bold ctermbg=0
hi TabLine ctermfg=Yellow

" Taboo
set sessionoptions+=tabpages,globals
cabbrev tr TabooRename

" tab switching shortcuts
noremap &lt;leader&gt;1 1gt
noremap &lt;leader&gt;2 2gt
noremap &lt;leader&gt;3 3gt
noremap &lt;leader&gt;4 4gt
noremap &lt;leader&gt;5 5gt
noremap &lt;leader&gt;6 6gt
noremap &lt;leader&gt;7 7gt
noremap &lt;leader&gt;8 8gt
noremap &lt;leader&gt;9 9gt
noremap &lt;leader&gt;0 :tablast&lt;cr&gt;

" Add these into Vundle section
Plugin 'gcmt/taboo.vim'
Plugin 'tpope/vim-obsession'
</code></pre>

<p>Now open file in a new tab with: <code>Ctrl-P</code>, select a file and <code>Ctrl-O, t</code>.
Open file in a virtical split window with: <code>Ctrl-P</code>, select a file and <code>Ctrl-O, v</code>.
Rename tab with: <code>:tr&lt;Space&gt;new name&lt;Enter&gt;</code>.
Jump to the 3rd window with <code>,3</code>.</p>

<p>Note:</p>

<p>I also tried <a href="https://github.com/xolox/vim-session">xolox/vim-session</a>,
but it can&rsquo;t persist tab name created by Taboo.</p>

<p>For tab easy switch, I&rsquo;ve tried <code>noremap &lt;unique&gt; &lt;C-1&gt; 1gt</code> based on
<a href="http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim">Switching to a particular tab in VIM</a>,
where changes M-Num to C-Num, because M-Num is assigned to tmux window switch.
However C-Num can&rsquo;t work,
see <a href="http://stackoverflow.com/questions/15849537/vimrc-mapping-for-control-key-not-working">.vimrc mapping for control key not working</a>
for explanations.
So I adopted <code>noremap &lt;leader&gt;1 1gt</code> style based on
<a href="http://superuser.com/questions/410982/in-vim-how-can-i-quickly-switch-between-tabs">In vim, how can I quickly switch between tabs?</a>.</p>

<p>Mapping long Ex commands with <code>cabbrev</code> is a very useful for convenient.
Use <Space> instead of <Tab> to enable abbreviation in <code>cabbrev</code>.
See <code>:h :ca</code>, <a href="http://stackoverflow.com/questions/117150/can-i-re-map-commands-in-vim">Can I (re-) map commands in vim?</a>
and <a href="http://stackoverflow.com/questions/3878692/aliasing-a-command-in-vim">Aliasing a command in vim</a>
for details.</p>

<p>With <code>cabbrev tr TabooRename</code>, you can use <code>:tr&lt;Space&gt;1:tests</code> to rename current tab into &ldquo;1:tests&rdquo;.
Here you have to add tab index manually to make <code>&lt;leader&gt;&lt;number&gt;</code> style switching more convenient.</p>

<p>To make tabline more readable,
I customized the color of it.
See <a href="http://stackoverflow.com/questions/4726882/how-do-you-change-the-background-color-of-the-empty-tab-space-in-vim">How do you change the background color of the empty tab space in vim?</a>
and <a href="http://stackoverflow.com/questions/7238113/customising-the-colours-of-vims-tab-bar">Customising the colours of vim&rsquo;s tab bar</a>
for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git in Vim With Fugitive]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/05/110947/"/>
    <updated>2015-10-05T11:09:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/05/110947</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<p>Add <code>Plugin 'tpope/vim-fugitive'</code> into ~/.vimrc
and run <code>vim +PluginClean +PluginInstall +qa</code>.</p>

<h1>Get Help</h1>

<p>:help fugitive</p>

<h1>Frequently Use Commands</h1>

<table>
<thead>
<tr>
<th>Action Name </th>
<th> Meaning                </th>
<th> Close Window with</th>
</tr>
</thead>
<tbody>
<tr>
<td>:Gblame     </td>
<td> show info of each line </td>
<td> q</td>
</tr>
<tr>
<td>:Gdiff      </td>
<td> show diff in vim       </td>
<td> :q</td>
</tr>
<tr>
<td>:Gstatus    </td>
<td> show git status        </td>
<td> q</td>
</tr>
</tbody>
</table>


<p>In &ldquo;:Gstatus&rdquo; window, you can use &ldquo;-&rdquo; to add a file in/out stage area,
use &ldquo;cc&rdquo; to commit, use &ldquo;g?&rdquo; to see all available actions.</p>

<p>To see the file changes history: <code>:Git log --stat</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Vim Mode for Eclipse With Vrapper]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/23/113830/"/>
    <updated>2014-04-23T11:38:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/23/113830</id>
    <content type="html"><![CDATA[<h1>Installation</h1>

<p>Install vrapper 0.42.0 in market place of eclipse.</p>

<h2>Install with proxy (in Linux)</h2>

<ol>
<li><p>Run commands:</p>

<p> $ cd $ECLIPSE_HOME
 $ export http_proxy=<a href="http://127.0.0.1:8087">http://127.0.0.1:8087</a>
 $ export https_proxy=<a href="http://127.0.0.1:8087">http://127.0.0.1:8087</a>
 $ ./eclipse</p></li>
<li><p>After eclipse startup, install vrapper as usual. The proxy will work for eclipse automatically. Uninstall vrapper and other plugin in main menu of eclipse -> Help -> About Eclipse -> Installation Details.</p></li>
</ol>


<h1>Usage</h1>

<p>Ref: <a href="http://vrapper.sourceforge.net/documentation">Vrapper Documentation</a></p>

<ul>
<li>Configuration file: ~/.vrapperrc</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development With Vim on Multiple Layers Project]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/28/091322/"/>
    <updated>2013-06-28T09:13:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/28/091322</id>
    <content type="html"><![CDATA[<h1>ctrlp</h1>

<p>Install <a href="https://github.com/kien/ctrlp.vim">ctrlp</a> with vundle:</p>

<pre><code>Plugin 'ctrlp.vim'
</code></pre>

<p>It is more powerful, faster than FuzzyFinder, and easier to install and use.</p>

<p>Use <Ctrl-P> to search files recursively under current folder.</p>

<p>In the search results window, you have 2 ways to open the selected file:</p>

<ul>
<li><p>press <Enter> to open file in current window,</p></li>
<li><p>press <Ctrl-O> to choose how to open the file, for example &ldquo;h&rdquo; to open it in a new horizontal window.</p></li>
</ul>


<h1>FuzzyFinder</h1>

<p><a href="https://github.com/vim-scripts/FuzzyFinder">FuzzyFinder</a> (created by Takeshi NISHIDA)
is a powerful search tool like &ldquo;go to everything&rdquo; in sublime text 2.
Command-T is a similar tool. But it need ruby and have to compile it.</p>

<p>L9 plugin (also created by Takeshi NISHIDA) is needed to use this plugin.</p>

<h2>Search and Open File</h2>

<h3>CoverageFile Mode</h3>

<p>This mode is invoked by command :FufCoverageFile.
It includes all files in current working directory and subdirectories.
Note it only matches characters in one name.</p>

<p>Say you have a file at ./abc/def/stu.xyz,
you can find it with &ldquo;suyz&rdquo;, &ldquo;sxyz&rdquo; or any combinations of characters in &ldquo;stu.xyz&rdquo;.
But &ldquo;ads&rdquo; and &ldquo;des&rdquo; will match nothing.
You can find it with partial name, in this case &ldquo;d/s&rdquo; will get stu.xyz.</p>

<p>Add <code>nnoremap &lt;C-o&gt; :FufCoverageFile&lt;CR&gt;</code> in ~/.vimrc to map ctrl-o to invoke Coverage File command,
then input the filename pattern, then press <CR>.
Cancel it with <ESC> key.</p>

<h3>File Mode</h3>

<p>This mode is invoked by command :FufFile.
It only includes files in current working directory, without files in subdirectories (so not very useful).</p>
]]></content>
  </entry>
  
</feed>
