<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 文本 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/wen-ben/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-02-02T16:10:00+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[依赖项目文本排序（python实现）]]></title>
    <link href="http://leetschau.github.io/blog/2010/12/22/164556/"/>
    <updated>2010-12-22T16:45:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/12/22/164556</id>
    <content type="html"><![CDATA[<p>ivy的依赖文件如果条目很多，不排序的话会很乱，例如：</p>

<p> &lt;ivy:install organisation=&ldquo;javax.servlet&rdquo; module=&ldquo;servlet-api&rdquo; revision=&ldquo;2.5&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;junit&rdquo; module=&ldquo;junit&rdquo; revision=&ldquo;4.8.2&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.powermock&rdquo; module=&ldquo;powermock-module-junit4&rdquo; revision=&ldquo;1.4.6&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.snmp4j&rdquo; module=&ldquo;snmp4j&rdquo; revision=&ldquo;1.10.1&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.apache.oro&rdquo; module=&ldquo;jakarta-oro&rdquo; revision=&ldquo;2.0.8&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.easymock&rdquo; module=&ldquo;easymockclassextension&rdquo; revision=&ldquo;2.5.1&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> （ori.txt中这里是空行）</p>

<p>排成这样就比较好看了：</p>

<p> &lt;ivy:install organisation=&ldquo;javax.servlet&rdquo; module=&ldquo;servlet-api&rdquo; revision=&ldquo;2.5&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;junit&rdquo; module=&ldquo;junit&rdquo; revision=&ldquo;4.8.2&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.apache.oro&rdquo; module=&ldquo;jakarta-oro&rdquo; revision=&ldquo;2.0.8&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.easymock&rdquo; module=&ldquo;easymockclassextension&rdquo; revision=&ldquo;2.5.1&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.powermock&rdquo; module=&ldquo;powermock-module-junit4&rdquo; revision=&ldquo;1.4.6&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p> &lt;ivy:install organisation=&ldquo;org.snmp4j&rdquo; module=&ldquo;snmp4j&rdquo; revision=&ldquo;1.10.1&rdquo; from=&ldquo;${from.resolver}&rdquo; to=&ldquo;${to.resolver}&rdquo; /></p>

<p>实际上就是每行按字母顺序排序，手工排费时费力，下面的脚本就是实现这个功能的，将最上面的文本保存为e:/MyDoc/Project/IvyInstallScripts下的build_old_backup.txt（注意最后一行文字后面要有一个空行）中，运行此脚本，排好的文本保存在build_old_backup.txt中，未排序的原始文本保存在build_old_backup.bak中，如果文件夹下已经有build_old_backup.bak，则会首先删除此bak文件，再执行上面的操作：</p>

<p> import os</p>

<p> if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<p>  #name of the source file</p>

<p>  srcFileName = &lsquo;e:/MyDoc/Project/IvyInstallScripts/build_old_backup&rsquo;</p>

<p>  haveXML = os.path.exists(srcFileName+&lsquo;.txt&rsquo;)</p>

<p>  haveBAK = os.path.exists(srcFileName+&lsquo;.bak&rsquo;)</p>

<p>  if haveXML and haveBAK:</p>

<p>   os.remove(srcFileName+&lsquo;.bak&rsquo;)</p>

<p>  if haveXML:</p>

<p>   os.rename(srcFileName+&lsquo;.txt&rsquo;, srcFileName+&lsquo;.bak&rsquo;)</p>

<p>   haveBAK = True</p>

<p>  if not haveBAK:</p>

<p>   print(&ldquo;no source file, quit now!&rdquo;)</p>

<p>   exit()</p>

<p>  # open the src file</p>

<p>  oriScript = open(srcFileName+&lsquo;.bak&rsquo;,&lsquo;rt&rsquo;)</p>

<p>  #the destination file</p>

<p>  destScript = open(srcFileName+&lsquo;.txt&rsquo;,&lsquo;wt&rsquo;)</p>

<p>  try:</p>

<p>   wholeTxt = []</p>

<p>   for curLine in oriScript:</p>

<pre><code>#print(len(curLine)) 

wholeTxt.append(curLine) 
</code></pre>

<p>   wholeTxt.sort()</p>

<p>   for curLine in wholeTxt:</p>

<pre><code>destScript.write(curLine) 
</code></pre>

<p>  finally:</p>

<p>   oriScript.close()</p>

<p>   destScript.close()</p>

<p>下面是简单版：更为易用，保存为一个.py文件即可。</p>

<p> &ldquo;&rdquo;&#8221;</p>

<p>  将文本中的各行按字母顺序排序。使用方法：</p>

<p>  将待排序的文本保存在脚本所在目录下，运行脚本，结果保存在dst.txt文件中。</p>

<p> &ldquo;&rdquo;&#8221;</p>

<p> import os</p>

<p> oriScript = open(&lsquo;./ori.txt&rsquo;,&lsquo;rt&rsquo;)</p>

<p> dstScript = open(&lsquo;./dst.txt&rsquo;,&lsquo;wt&rsquo;)</p>

<p> try:</p>

<p>  wholeTxt = []
 for curLine in oriScript:
  wholeTxt.append(curLine)
 noDupList = list(set(wholeTxt)) # delete potential duplicated lines in wholeTxt
 noDupList.sort()
 for curLine in noDupList:
  dstScript.write(curLine)</p>

<p> finally:</p>

<p>  oriScript.close()</p>

<p>  dstScript.close()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VIM修改《红太阳是怎样升起的》]]></title>
    <link href="http://leetschau.github.io/blog/2010/07/16/144025/"/>
    <updated>2010-07-16T14:40:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/07/16/144025</id>
    <content type="html"><![CDATA[<p>高华的大作：《红太阳是怎样升起的：延安整风运动的来龙去脉》原始文本是从 PDF  文件导出的 TXT  文件，需要改为手机上阅读比较方便的格式，下面是修改过程。<br/>
 提取处理文本
 从全文（见附件）中提取一节，篇幅不宜超过十页，否则处理它用的时间太长，例如第一章第一节“一、「农民党」、「军党」和毛泽东的「书记独裁」问题”。拷贝到 VIM  中。
 删除脚注
 删除每页下面的脚注，找到行首的“①”后手工删除相关段落，用 /^  ①查找目标；
 删除页码
 目标文本：
 人闻名于中共，其活动基本上也是围绕军事武装……
           10
 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Page 11&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
 的一个侧面。中共中央认为毛的理论观点仍……
 步骤 1  ：寻找前面至少 38  个空格，后面是数字的行删除之： :g/^\s{38,}\d*/d
 步骤 2  ：寻找 23  个连字符后面一个空格接 Page  的行删除之： :g/^-{23}\sPage/d
 标出标题
 手工寻找标题所在行，在标题头插入 <P>  ，用宏可提高效率；
 qa  （大写 i  插入行首） <P>  （ ESC  ），以后找到标题行后 @a  即可；
 标出段落
 前面有 4  个空格的行，将 4  个空格替换为 <P>  ： :%s/^\s{4}/<P>/g
 合并行
 将所有文本合为一行： nJ  ，命令中 n  是总行数 -1
 清除所有空格
 :%s/\s+//g
 将段落标志 <P>  替换为回车
 :%s/<P>/\r/g</p>

<p> 至此文本的处理就完毕了，用博文“第一行为文件名保存的文件的实现方法（ VIM 版）”中介绍的方法定义一个快捷键，将处理好的文本存为一个单独的文件，用 notepad++ 转为 UTF-8 格式（带 BOM ）后放入手机中。</p>

<p> 附：处理脚本1
 &ldquo;标出脚注，在脚注文本前面加<P>
%s/^[①②③④⑤⑥⑦⑧⑨]\s\S+/<P>&amp;/g
&#8220;删除页码
g/^\s{10,}\d<em>\s</em>/d
&#8220;将页开始行替换为<P>
%s/^-{23}\sPage.<em>$/<P>/g
&#8220;标出各种标题，在标题文本前面加<P>
%s/^\s</em>第.{1,2}章/<P>&amp;、/g
%s/^\s<em>[一二三四五六七八九十]\s/<P>&amp;，/g
%s/^\s</em>[一二三四五六七八九十]、/<P>&amp;/g
%s/^\s<em>\d、/<P>&amp;/g
&#8220;标出段落
%s/^\s{4}/<P>/g
&#8220;将所有文本合为一行
1,$j!
&#8220;清除所有空格
%s/\s+//g
&#8220;将段落标志替换为回车
%s/<P>/\r/g
 处理脚本2（脚本1在手机上看效果欠佳，且脚本运行需要比较长的时间）
 &#8220;delete all blank lines
g/^\s</em>$/d
&#8220;标出脚注，在脚注文本前面加空行
%s/^[①②③④⑤⑥⑦⑧⑨]\s\S+/\r&amp;/g
&#8220;删除页码
g/^\s{10,}\d<em>\s</em>/d
&#8220;将页开始行替换为空行
%s/^-{23}\sPage.<em>$/\r/g
&#8220;标出各种标题，在标题文本前面加空行
%s/^\s</em>第.{1,2}章/\r\r&amp;、/g
%s/^\s<em>[一二三四五六七八九十]\s/\r&amp;，/g
%s/^\s</em>[一二三四五六七八九十]、/\r&amp;/g
%s/^\s*\d、/\r&amp;/g
&#8220;标出段落
%s/^\s{4}/\r/g
 将以上内容保存到F:\toMobile.txt中，用:so f:\toMobile.txt运行之。</p>
]]></content>
  </entry>
  
</feed>
