<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hsql | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/hsql/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-05T15:23:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hsql笔记]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/21/231615/"/>
    <updated>2013-03-21T23:16:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/21/231615</id>
    <content type="html"><![CDATA[<p><a href="http://hsqldb.org/">hsql</a>是一款开源的基于Java的数据库。</p>

<h1>数据库服务</h1>

<h2>使用默认配置直接启动</h2>

<p>运行$HSQL_HOME/bin/runServer.bat；</p>

<h2>配置服务参数</h2>

<p>如数据库文件名和服务监听端口等。</p>

<ul>
<li>通过命令行参数：（详见User guide -> Chapter 1 -> Server mode）通过runServer.bat文件可知它只是运行了"java -classpath ../lib/hsqldb.jar org.hsqldb.server.Server"，实际上可以加命令行参数指定服务特性。例如：</li>
</ul>


<p> java -cp ../lib/hsqldb.jar org.hsqldb.Server -database.0 file:mydb -dbname.0 xdb</p>

<ul>
<li>通过配置文件：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Server and Web Server Properties）在hsql服务启动目录（运行"java &hellip;Server"的目录）下创建一个server.properties文件，例如：</li>
</ul>


<p> server.database.0=godudb</p>

<p> server.port=3001</p>

<ul>
<li>通过程序代码：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Starting a Server from your Application）例如：</li>
</ul>


<p> HsqlProperties p = new HsqlProperties();</p>

<p> p.setProperty(&ldquo;server.database.0&rdquo;,&ldquo;file:/opt/db/accounts&rdquo;);</p>

<p> p.setProperty(&ldquo;server.dbname.0&rdquo;,&ldquo;an_alias&rdquo;);</p>

<p> // set up the rest of properties</p>

<p> // alternative to the above is</p>

<p> Server server = new Server();</p>

<p> server.setProperties(p);</p>

<p> server.setLogWriter(null); // can use custom writer</p>

<p> server.setErrWriter(null); // can use custom writer</p>

<p> server.start();</p>

<h1>客户端</h1>

<h2>图形界面操作</h2>

<p>这里用<a href="http://squirrel-sql.sourceforge.net/">squirrel-sql</a>作为客户端，运行$SQUIRREL_HOME/squirrel-sql.bat启动程序；</p>

<h3>安装hsql驱动</h3>

<p>将$HSQL_HOME/lib/hsqldb.jar拷贝到$SQUIRREL_HOME/lib下；</p>

<h3>配置数据库别名</h3>

<p>jdbc url: jdbc:hsqldb:hsql://localhost；</p>

<p>username: sa</p>

<p>password: 留空</p>

<p>然后连接就可以打开数据库了。</p>

<h3>数据库操作</h3>

<h4>建表</h4>

<p>在SQL面板里输入：</p>

<p> CREATE TABLE Person ( LastName varchar(10), FirstName varchar(10), Address varchar(10), Age int )</p>

<p>运行后在database/PUBLIC/TABLE下会生成一个名为Person的表；</p>

<h4>插入数据</h4>

<p>insert into person values(&lsquo;chad&rsquo;,&lsquo;lee&rsquo;,&lsquo;guangzhou&rsquo;,33)</p>

<h4>删除表</h4>

<p>drop table person</p>

<h3>持久化验证</h3>

<p>重启数据库服务后再用客户端连接服务，可以看到原来的表以及表中的数据都在，这样就实现了数据的持久化。</p>

<h2>程序代码操作</h2>

<p>下面的代码演示了初始化数据驱动，连接数据库，读取数据及其关闭数据库服务的完整过程，与上面的代码启动服务配合，可以实现对数据库的自动化测试。</p>

<p> try {
  Class.forName(&ldquo;org.hsqldb.jdbcDriver&rdquo;);
 } catch (Exception e) {
  System.err.println(&ldquo;ERROR: failed to load HSQLDB JDBC driver.&rdquo;);
  e.printStackTrace();
  return;
 }
 try {
  Connection conn = DriverManager.getConnection(&ldquo;jdbc:hsqldb:hsql://localhost:3001&rdquo;, &ldquo;SA&rdquo;, &ldquo;&rdquo;);
  String sql = &ldquo;select * from person&rdquo;;
  PreparedStatement content = conn.prepareStatement(sql);
  ResultSet res = content.executeQuery();
  // int rowcount = -1;
  // if (res.last()) { // ResultSet.last() is unsupported by hsql
  // rowcount = res.getRow();
  // }
  while (res.next()) {
   System.out.println(res.getString(1));
   System.out.println(res.getString(2));
   System.out.println(res.getString(3));
  }
  Statement st = conn.createStatement();
  st.execute(&ldquo;SHUTDOWN&rdquo;);
  conn.close();
 } catch (SQLException e) {
  // TODO Auto-generated catch block
  e.printStackTrace();
 }</p>
]]></content>
  </entry>
  
</feed>
