<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sync | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/sync/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sync a Fork on Gibhub]]></title>
    <link href="http://leetschau.github.io/blog/2016/08/21/123807/"/>
    <updated>2016-08-21T12:38:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/08/21/123807</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve forked a github repo  &ldquo;<a href="https://github.com/tom/project1.git">https://github.com/tom/project1.git</a>&rdquo;.
Several days later there are some new commits on this repo.
How to sync these commits into my forked repo?</p>

<pre><code>cd &lt;repo-home&gt;
git remote -v  # verify if the upstream repo will be added
git remote add upstream  https://github.com/tom/project1.git
git remote -v
git checkout master
git fetch upstream   # if use pull instead of fetch, merge is needed as well
git merge upstream/master
git push origin
</code></pre>

<p>Ref: <a href="https://help.github.com/articles/syncing-a-fork/">Syncing a fork</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule的同步问题]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/17/140426/"/>
    <updated>2016-03-17T14:04:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/17/140426</id>
    <content type="html"><![CDATA[<h1>获取更新</h1>

<pre><code>git submodule foreach --recursive 'git fetch --all'
</code></pre>

<h1>列出remote比local新的submodule和所在分支</h1>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'|grep behind -B1
</code></pre>

<p>查看最新的提交在哪个分支上</p>

<pre><code>git submodule foreach --recursive 'git for-each-ref --sort=-committerdate --count=1'
</code></pre>

<h1>查询local branch与remote branch之间的关系</h1>

<p>这一步的目的是为了避免后面做<code>git pull --all</code>时无法确定merge目标branch.</p>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'
</code></pre>

<p>如果一个repository早已设置好remote和local之间的对应关系（见Note2），
则可以跳过这一步。</p>

<p>显示origin中每个branch的情况：</p>

<pre><code>git submodule foreach --recursive 'git remote show origin'
</code></pre>

<h1>同步到本地分支上</h1>

<pre><code>git submodule foreach --recursive 'git pull --all'
</code></pre>

<p>如果上面的命令由于Git无法确定merge目标失败，先执行：</p>

<pre><code>git submodule foreach --recursive 'git checkout master'
</code></pre>

<p>再执行<code>git pull</code>命令。</p>

<h1>回退</h1>

<p>任何时候如果想放弃本地所做的修改，用<code>git submodule update</code>返回到初始状态。</p>

<h1>切换到工作分支</h1>

<pre><code>git submodule foreach --recursive 'git checkout $(git for-each-ref --count=1 --sort=-committerdate| grep -oE "[^/]+$")'
</code></pre>

<p>其中<code>git for-each-ref</code>拿到最新的一次commit及其所在分支，
用<code>grep</code>命令得到分支名称，在checkout出此分支。</p>

<p>参考：</p>

<p><a href="http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit">http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit</a></p>

<p><a href="http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field">http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field</a></p>

<h1>Note</h1>

<h2>Note1</h2>

<p>如果希望查询某个时间点后的提交：</p>

<pre><code>git --no-pager submodule foreach --recursive 'git log --since="2016-03-05" --pretty=oneline --all --decorate'
</code></pre>

<p>这里的<code>--no-pager</code>避免<code>git log</code>进入"pager"（即类似于vim或者less的全屏风格）模式。</p>

<h2>Note2</h2>

<p>Local branch与remote branch的关系实际上是定义在<code>.git/config</code>文件中的，
对于Meteor package, 这个文件是
&ldquo;<APP_PROJ_HOME>/.git/modules/packages/<PACKAGE_NAME>/config"，例如：</p>

<pre><code>[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sync a Fork on Github]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/15/105035/"/>
    <updated>2015-04-15T10:50:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/15/105035</id>
    <content type="html"><![CDATA[<p>I forked <a href="https://github.com/mitsuhiko/flask">flask repository</a> to
<a href="https://github.com/leetschau/flask">my own account</a>.</p>

<p>After several months, there are many new commits to the original flask repo.
How to sync these new commits to my fork?</p>

<h1>Option 1: In Github Web UI</h1>

<p>Three steps: compare, send pull request, and merge.</p>

<p>See Olufemi Israel Olanipeku&rsquo;s answer of
<a href="http://stackoverflow.com/questions/20984802/how-can-i-keep-my-fork-in-sync-without-adding-a-separate-remote/21131381#21131381">How can I keep my fork in sync without adding a separate remote?</a> for details.</p>

<h1>Option 2: In Terminal</h1>

<p>You can do it via your local clone:</p>

<ol>
<li><p>Clone leetschau/flask to local machine;</p></li>
<li><p>Add mitsuhiko/flask as a remote repo;</p></li>
<li><p>Pull new commit from mitsuhiko/flask to your local machine;</p></li>
<li><p>Push your local repo to leetschau/flask.</p></li>
</ol>


<p>See <a href="https://help.github.com/articles/syncing-a-fork/">Syncing a fork</a> for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synchronize .vimrc With bitbucket.org]]></title>
    <link href="http://leetschau.github.io/blog/2013/07/26/160614/"/>
    <updated>2013-07-26T16:06:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/07/26/160614</id>
    <content type="html"><![CDATA[<p>I created a vimrc repository at bitbucket.org.</p>

<p>When the .vimrc file changes, verify it locally(see note 1), then synchronize it manually(see note 2). Then commit the code changes online.</p>

<p>When synchronizing .vimrc at other host, download .vimrc with</p>

<p> git clone <a href="https://leechau@bitbucket.org/leechau/vimrc.git">https://leechau@bitbucket.org/leechau/vimrc.git</a></p>

<p>and overwrite the original one.</p>

<p>Note 1: how to verify .vimrc fast:</p>

<ol>
<li><p>Open two terminal window, open .vimrc in the first window, and open a normal file in another;</p></li>
<li><p>Edit .vimrc, save it;</p></li>
<li><p>Reload .vimrc file in the second window with shortcut &ldquo;,sv&rdquo;, see the result;</p></li>
<li><p>Repeat this &ldquo;edit - save - reload - evaluation&rdquo; loop until it&rsquo;s ok.</p></li>
</ol>


<p>Note 2: synchronize file manually at bitbucket.org</p>

<ol>
<li><p>Open <a href="https://bitbucket.org/leechau">https://bitbucket.org/leechau</a> in web browser and login;</p></li>
<li><p>Repositories: vimrc -> Source -> .vimrc -> click &ldquo;Edit&rdquo; button at upper-right corner of source code panel;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Directories Sync Utility on Mint]]></title>
    <link href="http://leetschau.github.io/blog/2013/06/04/111553/"/>
    <updated>2013-06-04T11:15:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/06/04/111553</id>
    <content type="html"><![CDATA[<h1>Meld (GUI App)</h1>

<p>TotalCommander&rsquo;s Mint(Ubuntu) counterpart is &ldquo;Meld&rdquo;. It supports command-line invocation, much slower than TotalCmd, and its visual filters and backup policies are all weaker than that of TotalCmd(See note &ldquo; Auto Dir Sync Script Based on Total Commander &rdquo; for details). Use it from command line:</p>

<pre><code>meld dir1 dir2
</code></pre>

<p>Note: Gnome-commander is much like TotalCmd, and it can use Meld as sync tools.</p>

<h1>rsync</h1>

<pre><code>rsync -rtvu --delete &lt;src_folder&gt; &lt;dst_folder&gt;
</code></pre>

<p>for example:</p>

<pre><code>rsync -rtvu --delete ~/Documents/CalibreLib/ 'chad@10.21.3.31:/home/chad/Calibre Library'
</code></pre>

<p>very slow. Maybe you can fast it with adding a &ldquo;-c&rdquo; parameter(checksum): <code>rsync -rtuvc ...</code></p>

<p>In parameter list, r means recursive (including subdirs); t meas preserve modification time of the files; v means verbose; u means update, if the file in dst is newer than that in src, it will not be copied; &ndash;delete means delete files in destination folder which not exist in source folder.</p>

<p>Note: never forget the trailing slash of src_folder (that after dst_folder is unnecessary), or src_folder will be copied <strong>into</strong> the dst_folder.</p>

<p>Ref: <a href="http://www.jveweb.net/en/archives/2010/11/synchronizing-folders-with-rsync.html">Synchronizing folders with rsync</a></p>
]]></content>
  </entry>
  
</feed>
