<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-05-26T17:50:21+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Mongo Scripts in Shell]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/08/155132/"/>
    <updated>2015-05-08T15:51:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/08/155132</id>
    <content type="html"><![CDATA[<p>You can query a remote mongoDB with a mongo script, print output to stdout.
Then manipulate the output data with other shell utilities.</p>

<p>For example, the following scripts get all fair names from a remote server,
compare them with a local fair name set,
to find out which are conflicted with the existing fair names in the local name.</p>

<p>Some key points:</p>

<ol>
<li><p>&ldquo;db&rdquo; is a built-in global variable refers to the connected database,
specified by the -h, -d options in mongo command line.
It can be override by &ldquo;connect&rdquo; function.
For example, with or without the first line, the script produce the same result
when running <code>mongo test.js</code>:</p>

<pre><code> $ cat test.js
 // db = connect("localhost/test")
 print(db.getCollectionNames())
 db.myCollection.find().forEach(function(item) {
   print(item.name)
 })
</code></pre></li>
<li><p>Use &ldquo;print&rdquo; function to print result to stdout.</p></li>
<li><p>To get command line arguments in mongo script, you must compose the evaluation string before(outside) <code>mongo</code> command,
and you must add double quotes surrounding $exp.</p>

<pre><code> #!/bin/bash

 TargetDB=$1
 TargetCol=$2
 TargetField=$3

 exp="db.${TargetCol}.find().forEach( function(item) \
   { print(item.$TargetField); });"

 mongo localhost/$TargetDB --eval "$exp"
</code></pre></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>

<p><a href="http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script">http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script</a></p>

<p><a href="http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file">http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fzf让命令行更方便]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/16/172913/"/>
    <updated>2015-04-16T17:29:13+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/16/172913</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/fzf">fzf</a>是一个命令行工具，目前支持bash和zsh。</p>

<p>fzf配合autojump和vim，可以方便地在多层目录下进行文本编辑。</p>

<p>Before install fzf, download <a href="https://golang.org/">go</a> binary package (go1.4.2.linux-amd64.tar.gz for now)
extract it, and add its bin folder to $PATH.
Then install fzf with git.</p>

<p>首先运行<code>j demo</code>跳转到项目根目录下，项目文件结构如下：</p>

<pre><code>$ tree
.
├── both
│   ├── collections.coffee
│   └── router.coffee
├── client
│   ├── index.html
│   ├── layout.coffee
│   ├── layout.html
│   ├── registerHelpers.coffee
│   ├── stylesheets
│   │   └── app.scss
│   └── templates
│       ├── addPost
│       │   ├── addPost.coffee
│       │   ├── addPost.html
│       │   └── addPost.scss
│       ├── editPost
│       │   ├── editPost.coffee
│       │   └── editPost.html
│       ├── lists
│       │   ├── lists.coffee
│       │   └── lists.html
│       ├── postView
│       │   ├── postView.coffee
│       │   └── postView.html
│       ├── sharePost
│       │   ├── sharePost.coffee
│       │   └── sharePost.html
│       ├── sideMenu
│       │   └── sideMenu.html
│       └── userAccounts
│           ├── accountsConfig.coffee
│           ├── userAccounts.coffee
│           └── userAccounts.html
├── LICENSE
├── newnote.tmp
├── packages
├── README.md
└── server
    └── seeds.js

13 directories, 26 files
</code></pre>

<h1>配置</h1>

<p>全局定义：~/.fzf.zsh</p>

<p>默认快捷键可以在.fzf/shell/key-bindings.zsh中修改。
推荐将默认的文件搜索快捷键从Ctrl-T改成了Ctrl-J，需要避免使用的配置有：</p>

<ul>
<li><p>Ctrl-I: 代表<tab>键，虽然可以触发目录搜索，但<tab>键的自动补全功能不能用了；</p></li>
<li><p>Ctrl-M: 回车键的键值，如果改成了它，将导致回车键不可用，可以用Ctrl-Enter临时代替回车；</p></li>
<li><p>Ctrl-N: 下一条历史命令的快捷键。</p></li>
</ul>


<h1>使用</h1>

<p>要编辑client/templates/lists/lists.coffee文件，只要在命令行中输入：</p>

<pre><code>vi &lt;Tab&gt;
</code></pre>

<p>就进入了fzf搜索界面，只要输入任意层目录中的几个字符，就可以匹配到目标文件，
例如上面lists.coffee文件，只要输入<code>listco</code>就可以匹配到了。
其中当输入到list时，就匹配到了lists文件夹以及下面的两个文件，
这时可以继续输入"co"，直接命中目标，也可以用Ctrl-j/k在列表中上下选择目标。</p>

<p>实际上fzf进行目录文件匹配的快捷键是Ctrl-T，但对vi进行了特殊定义，使得用<tab>也可以出发fzf搜索。</p>

<p>按Alt-C，选择好目录，可以直接切换到目标目录，相当于<code>cd &lt;Ctrl-T&gt;</code>的快捷版。</p>

<p>Ctrl-R在命令行历史使用<strong>模糊</strong>匹配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Data in MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/180118/"/>
    <updated>2015-03-06T18:01:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/180118</id>
    <content type="html"><![CDATA[<p>Say you want to update data in updated.csv into &ldquo;fairs&rdquo; collection of &ldquo;meteor&rdquo; database in MongoDB.</p>

<ol>
<li><p>Convert data to be updated in csv file to json file: <code>csvjson updated.csv rawdata.json</code>;</p></li>
<li><p>Load this file in a js script &ldquo;my-script&rdquo; with <code>var data = require('./rawdata.json');</code>;</p></li>
<li><p>Check and convert data content in my-script, and write the reulst into another json file &ldquo;result.json&rdquo;:</p>

<pre><code> var fs = require('fs');
 fs.writeFile('result.json', JSON.stringify(result));
</code></pre></li>
<li><p>Run my-script with <code>node my-script</code>;</p></li>
<li><p>Import result.json into a new collection &ldquo;tmp&rdquo; of MongoDB database with
<code>mongoimport -d $TargetDB -c $TargetCol --type json --file result.json --jsonArray</code>;</p></li>
<li><p>Update collection fairs while traversing collection tmp;</p>

<pre><code> db = connect("localhost:27017/meteor");
 cursor = db.tmp.find();
 while ( cursor.hasNext() ) {
   db.fairs.save(cursor.next());
 }
</code></pre></li>
<li><p>Save above script into update.js;</p></li>
<li><p>Update data with <code>mongo update.js</code>;</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令行中删除特殊名字的文件]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/13/104859/"/>
    <updated>2015-01-13T10:48:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/13/104859</id>
    <content type="html"><![CDATA[<p>今天下载了一个zip文件，解压后出现一个文件名为"-==(czRGsl)==-.mp4"的文件，删除时出现下面的错误：</p>

<pre><code>[chad@chadleebj ~]$ rm *.mp4
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information
</code></pre>

<p>加单引号和转义符都无效：</p>

<pre><code>[chad@chadleebj ~]$ rm '-==(czRGsl)==-.mp4'
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information.

[chad@chadleebj ~]$ rm \-\=\=\(czRGsl\)\=\=-.mp4
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information
</code></pre>

<p>错误原因是将文件名的第一个字符"-&ldquo;当成了选项符号，又没有&rdquo;=&ldquo;这个选项造成的，所以首先要在rm后加&rdquo;&ndash;&ldquo;告诉命令后面的&rdquo;-&ldquo;不是选项符号：</p>

<pre><code>[chad@chadleebj ~]$ rm -- -==(czRGsl)==-.mp4
-bash: syntax error near unexpected token `('
</code></pre>

<p>其中的括号需要转义：</p>

<pre><code>[chad@chadleebj ~]$ rm -- -==\(czRGsl)==-.mp4
-bash: syntax error near unexpected token `)'

[chad@chadleebj ~]$ rm -- -==\(czRGsl\)==-.mp4
</code></pre>

<p>搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Java Program in Java Program]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/27/103944/"/>
    <updated>2014-12-27T10:39:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/27/103944</id>
    <content type="html"><![CDATA[<p>Usually we can run shell command in Java program with <code>Runtime.getRuntime.exec(shellName);</code>.
But if the shell command is <code>java -cp "lib/*" MainClass</code>, you can&rsquo;t get any output from &ldquo;line = reader.readLine()&rdquo;.</p>

<p>You have to use ProcessBuilder instead of Runtime.exec to execute these commands.
Maybe the reason is the double quotes after &ldquo;-cp&rdquo; option is mandatory, which are conflict with double quotes in parameters of Runtime.exec.</p>

<pre><code>public static final String USER_PLUGIN_PATH = "plugins";
public static final String USER_CLASSPATH = USER_PLUGIN_PATH + "/lib/*";
public void runJavaProgram(String mainClass) {
  logger.info("Running java program in class: " + mainClass);
  try {
    ProcessBuilder pb = new ProcessBuilder("java", "-cp", USER_CLASSPATH, mainClass);
    pb.redirectErrorStream(true);
    Process process = pb.start();
    // Process process = Runtime.getRuntime().exec("java -cp " + USER_CLASSPATH + mainClass);
    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line = "";
    String output = "";
    while ((line = reader.readLine()) != null) {
      logger.debug(line);
      output += line + System.getProperty("line.separator");
    }
    process.waitFor();
  } catch (IOException e) {
    e.printStackTrace();
  } catch (InterruptedException e) {
    e.printStackTrace();
  }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
