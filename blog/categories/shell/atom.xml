<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-23T11:15:02+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux命令行中删除特殊名字的文件]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/13/104859/"/>
    <updated>2015-01-13T10:48:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/13/104859</id>
    <content type="html"><![CDATA[<p>今天下载了一个zip文件，解压后出现一个文件名为&#8221;-==(czRGsl)==-.mp4&#8221;的文件，删除时出现下面的错误：</p>

<pre><code>[chad@chadleebj ~]$ rm *.mp4
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information
</code></pre>

<p>加单引号和转义符都无效：</p>

<pre><code>[chad@chadleebj ~]$ rm '-==(czRGsl)==-.mp4'
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information.

[chad@chadleebj ~]$ rm \-\=\=\(czRGsl\)\=\=-.mp4
rm: invalid option -- '='
Try `rm ./'-==(czRGsl)==-.mp4'' to remove the file `-==(czRGsl)==-.mp4'.
Try `rm --help' for more information
</code></pre>

<p>错误原因是将文件名的第一个字符&#8221;-&ldquo;当成了选项符号，又没有&rdquo;=&ldquo;这个选项造成的，所以首先要在rm后加&rdquo;&ndash;&ldquo;告诉命令后面的&rdquo;-&ldquo;不是选项符号：</p>

<pre><code>[chad@chadleebj ~]$ rm -- -==(czRGsl)==-.mp4
-bash: syntax error near unexpected token `('
</code></pre>

<p>其中的括号需要转义：</p>

<pre><code>[chad@chadleebj ~]$ rm -- -==\(czRGsl)==-.mp4
-bash: syntax error near unexpected token `)'

[chad@chadleebj ~]$ rm -- -==\(czRGsl\)==-.mp4
</code></pre>

<p>搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Java Program in Java Program]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/27/103944/"/>
    <updated>2014-12-27T10:39:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/27/103944</id>
    <content type="html"><![CDATA[<p>Usually we can run shell command in Java program with <code>Runtime.getRuntime.exec(shellName);</code>.
But if the shell command is <code>java -cp "lib/*" MainClass</code>, you can&rsquo;t get any output from &ldquo;line = reader.readLine()&rdquo;.</p>

<p>You have to use ProcessBuilder instead of Runtime.exec to execute these commands.
Maybe the reason is the double quotes after &ldquo;-cp&rdquo; option is mandatory, which are conflict with double quotes in parameters of Runtime.exec.</p>

<pre><code>public static final String USER_PLUGIN_PATH = "plugins";
public static final String USER_CLASSPATH = USER_PLUGIN_PATH + "/lib/*";
public void runJavaProgram(String mainClass) {
  logger.info("Running java program in class: " + mainClass);
  try {
    ProcessBuilder pb = new ProcessBuilder("java", "-cp", USER_CLASSPATH, mainClass);
    pb.redirectErrorStream(true);
    Process process = pb.start();
    // Process process = Runtime.getRuntime().exec("java -cp " + USER_CLASSPATH + mainClass);
    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line = "";
    String output = "";
    while ((line = reader.readLine()) != null) {
      logger.debug(line);
      output += line + System.getProperty("line.separator");
    }
    process.waitFor();
  } catch (IOException e) {
    e.printStackTrace();
  } catch (InterruptedException e) {
    e.printStackTrace();
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark任务自动执行脚本]]></title>
    <link href="http://leetschau.github.io/blog/2014/11/03/171108/"/>
    <updated>2014-11-03T17:11:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/11/03/171108</id>
    <content type="html"><![CDATA[<p>当前目录下创建两个脚本，运行脚本runJobs.sh和WFP任务脚本模板wfp-origin：</p>

<p>runJobs:</p>

<pre><code>#!/bin/bash

BMIN_CNT_WEI_LIST='0.5 0.3'
MIN_SUP_LIST='0.004 0.0002'

rm -rf {result,script}
mkdir {result,script}
origin_job=wfp-origin
for bmin_cnt_wei in $BMIN_CNT_WEI_LIST; do
    for min_sup in $MIN_SUP_LIST; do
        echo MIN_SUP is: $min_sup , Bmin count weight is: $bmin_cnt_wei
        new_script_name=wfp-bmin-${bmin_cnt_wei}-sup-${min_sup}
        sed "4s/xxx/$min_sup/" $origin_job &gt; script/tmp
        sed "11s/xxx/$bmin_cnt_wei/" script/tmp &gt; script/$new_script_name
        rm script/tmp
        echo Run shell script/$new_script_name
        spark-shell -i script/$new_script_name
        echo ------Calc is over------
    done
done
</code></pre>

<p>wfp-origin:</p>

<pre><code>import Math.ceil
import scala.io

val MIN_SUP = xxx
val MIN_CONF = 0.1
val MAX_RELATION_ORDER = 3
val DATA_FILE = "input"
val SEP = "\001"
val WEI_IDX = 5
val MIN_INT_ID_LEN = 5
val BMIN_CNT_WEI = xxx

val RES_FILE = "result/wfp-result-bmin-" + BMIN_CNT_WEI.toString + "-sup-" + MIN_SUP.toString

val rawData = sc.textFile(DATA_FILE).distinct
val data = rawData.filter(x =&gt; x.split(SEP)(1).split("_")(0).size &gt; MIN_INT_ID_LEN)   
val item_count = data.map(_.split(SEP)(1)).map(w =&gt; (w,1)).reduceByKey(_+_)
val wids = data.map(_.split(SEP)(0))
val MAX_ITEM = wids.map(w =&gt; (w,1)).reduceByKey(_+_).map(_._2).max
val T = wids.distinct.count

val weight = data.map(x =&gt; (x.split(SEP)(1), x.split(SEP)(WEI_IDX).toFloat)).distinct
val rule_sets = weight.top(2000)
scala.tools.nsc.io.File(RES_FILE).writeAll(rule_sets.map(_.toString).reduce(_ + "\n" + _))
exit
</code></pre>

<p>这里的wfp-orgin只是一个示例，根据自己的脚本调整具体内容，但最后一行&#8221;exit&#8221;必须有，否则不能退出spark shell执行后面的任务。</p>

<p>需要修改的参数用空格分开定义在一个字符串里，例如上面的BMIN_CNT_WEI_LIST和MIN_SUP_LIST，
脚本创建script目录，保存新生成的脚本，以及result目录，保存计算结果。</p>

<p>配合tmux，可以在tmux上运行runJobs.sh，下班时从tmux上detach出来，第二天上班时在attach上去看结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Spark Job Runner in Web Browser]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/27/111204/"/>
    <updated>2014-10-27T11:12:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/27/111204</id>
    <content type="html"><![CDATA[<p>I wrote a Spark script. Now I need adding a web interface for it. Thus users can input parameters of the script in web browser, run the script,
and see the calculation results in browser.</p>

<h1>JEE</h1>

<p>Download apache tomcat 7.0.56 core (apache-tomcat-7.0.56.tar.gz) and extract it to ~/apps;</p>

<p>Download Eclipse IDE for Java EE Developers (eclipse-jee-luna-SR1-linux-gtk-x86_64.tar.gz) and extract it to ~/apps;</p>

<p>Start Eclipse IDE for Java EE Developers, build a new Web project: [File -> New -> Web -> Dynamic Web Project];</p>

<p>Specify &ldquo;Project&rdquo; as &ldquo;SparkRunner&rdquo;, &ldquo;Target runtime&rdquo; as &ldquo;Apache Tomcat v7.0&rdquo;.
If the default runtime has not existed yet, build a new one: Type of runtime environment: Apache -> Apache Tomcat v7.0).
Check &ldquo;Generate web.xml deployment descriptor&rdquo; at the last step and click &ldquo;Finish&rdquo;.</p>

<p>Add the following texts into &ldquo;web-app&rdquo; of web.xml under $PROJECT_HOME/WebContent/WEB-INF:</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.boco.dm.JobRunner&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/JobRunner&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>Ref:</p>

<p><a href="https://cloud.google.com/appengine/docs/java/config/webxml#About_Deployment_Descriptors">The Deployment Descriptor: web.xml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replay Recent Executed Commands]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/20/121235/"/>
    <updated>2014-06-20T12:12:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/20/121235</id>
    <content type="html"><![CDATA[<ul>
<li><p>Replay recent executed 15 commands: <code>fc -l -15</code>;</p></li>
<li><p>Replay recent executed 15 commands in reverse order: <code>fc -lr -15</code>;</p></li>
<li><p>Replay recent executed 15 commands without list number: <code>fc -ln -15</code>;</p></li>
<li><p>Replay recent executed commands from &ldquo;man &hellip;&rdquo;: <code>fc -ln man</code>;</p></li>
<li><p>Edit some last commands (from No.14 to No.24) and execute them: <code>fc -e vi 14 24</code>;</p></li>
</ul>


<p>You can also use &ldquo;-s&rdquo; options to modify commands ant execute, see <code>man fc</code> for details.</p>

<ul>
<li>Clear history: <code>history -c</code>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
