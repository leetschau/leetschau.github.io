<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-11-03T17:15:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spark任务自动执行脚本]]></title>
    <link href="http://leetschau.github.io/blog/2014/11/03/171108/"/>
    <updated>2014-11-03T17:11:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/11/03/171108</id>
    <content type="html"><![CDATA[<p>当前目录下创建两个脚本，运行脚本runJobs.sh和WFP任务脚本模板wfp-origin：</p>

<p>runJobs:</p>

<pre><code>#!/bin/bash

BMIN_CNT_WEI_LIST='0.5 0.3'
MIN_SUP_LIST='0.004 0.0002'

rm -rf {result,script}
mkdir {result,script}
origin_job=wfp-origin
for bmin_cnt_wei in $BMIN_CNT_WEI_LIST; do
    for min_sup in $MIN_SUP_LIST; do
        echo MIN_SUP is: $min_sup , Bmin count weight is: $bmin_cnt_wei
        new_script_name=wfp-bmin-${bmin_cnt_wei}-sup-${min_sup}
        sed "4s/xxx/$min_sup/" $origin_job &gt; script/tmp
        sed "11s/xxx/$bmin_cnt_wei/" script/tmp &gt; script/$new_script_name
        rm script/tmp
        echo Run shell script/$new_script_name
        spark-shell -i script/$new_script_name
        echo ------Calc is over------
    done
done
</code></pre>

<p>wfp-origin:</p>

<pre><code>import Math.ceil
import scala.io

val MIN_SUP = xxx
val MIN_CONF = 0.1
val MAX_RELATION_ORDER = 3
val DATA_FILE = "input"
val SEP = "\001"
val WEI_IDX = 5
val MIN_INT_ID_LEN = 5
val BMIN_CNT_WEI = xxx

val RES_FILE = "result/wfp-result-bmin-" + BMIN_CNT_WEI.toString + "-sup-" + MIN_SUP.toString

val rawData = sc.textFile(DATA_FILE).distinct
val data = rawData.filter(x =&gt; x.split(SEP)(1).split("_")(0).size &gt; MIN_INT_ID_LEN)   
val item_count = data.map(_.split(SEP)(1)).map(w =&gt; (w,1)).reduceByKey(_+_)
val wids = data.map(_.split(SEP)(0))
val MAX_ITEM = wids.map(w =&gt; (w,1)).reduceByKey(_+_).map(_._2).max
val T = wids.distinct.count

val weight = data.map(x =&gt; (x.split(SEP)(1), x.split(SEP)(WEI_IDX).toFloat)).distinct
val rule_sets = weight.top(2000)
scala.tools.nsc.io.File(RES_FILE).writeAll(rule_sets.map(_.toString).reduce(_ + "\n" + _))
exit
</code></pre>

<p>这里的wfp-orgin只是一个示例，根据自己的脚本调整具体内容，但最后一行&#8221;exit&#8221;必须有，否则不能退出spark shell执行后面的任务。
配合tmux，可以在tmux上运行runJobs.sh，下班时从tmux上detach出来，第二天上班时在attach上去看结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Spark Job Runner in Web Browser]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/27/111204/"/>
    <updated>2014-10-27T11:12:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/27/111204</id>
    <content type="html"><![CDATA[<p>I wrote a Spark script. Now I need adding a web interface for it. Thus users can input parameters of the script in web browser, run the script,
and see the calculation results in browser.</p>

<h1>JEE</h1>

<p>Download apache tomcat 7.0.56 core (apache-tomcat-7.0.56.tar.gz) and extract it to ~/apps;</p>

<p>Download Eclipse IDE for Java EE Developers (eclipse-jee-luna-SR1-linux-gtk-x86_64.tar.gz) and extract it to ~/apps;</p>

<p>Start Eclipse IDE for Java EE Developers, build a new Web project: [File -> New -> Web -> Dynamic Web Project];</p>

<p>Specify &ldquo;Project&rdquo; as &ldquo;SparkRunner&rdquo;, &ldquo;Target runtime&rdquo; as &ldquo;Apache Tomcat v7.0&rdquo;.
If the default runtime has not existed yet, build a new one: Type of runtime environment: Apache -> Apache Tomcat v7.0).
Check &ldquo;Generate web.xml deployment descriptor&rdquo; at the last step and click &ldquo;Finish&rdquo;.</p>

<p>Add the following texts into &ldquo;web-app&rdquo; of web.xml under $PROJECT_HOME/WebContent/WEB-INF:</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.boco.dm.JobRunner&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/JobRunner&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>Ref:</p>

<p><a href="https://cloud.google.com/appengine/docs/java/config/webxml#About_Deployment_Descriptors">The Deployment Descriptor: web.xml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replay Recent Executed Commands]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/20/121235/"/>
    <updated>2014-06-20T12:12:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/20/121235</id>
    <content type="html"><![CDATA[<ul>
<li><p>Replay recent executed 15 commands: <code>fc -l -15</code>;</p></li>
<li><p>Replay recent executed 15 commands in reverse order: <code>fc -lr -15</code>;</p></li>
<li><p>Replay recent executed 15 commands without list number: <code>fc -ln -15</code>;</p></li>
<li><p>Replay recent executed commands from &ldquo;man &hellip;&rdquo;: <code>fc -ln man</code>;</p></li>
<li><p>Edit some last commands (from No.14 to No.24) and execute them: <code>fc -e vi 14 24</code>;</p></li>
</ul>


<p>You can also use &ldquo;-s&rdquo; options to modify commands ant execute, see <code>man fc</code> for details.</p>

<ul>
<li>Clear history: <code>history -c</code>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Script on Remote Host via SSH]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/27/115808/"/>
    <updated>2014-03-27T11:58:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/27/115808</id>
    <content type="html"><![CDATA[<p>user=&lsquo;bvt&rsquo;
host=&lsquo;10.0.2.47&rsquo;
ssh $user@$host &lsquo;bash&rsquo; &lt;&lt;EOF
source /etc/profile
java -version
hostname
EOF</p>

<p>You need copy your ssh pub key to target host before hand, or you will have to enter the password at runtime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a Service and Wait Until It's Up]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/03/145805/"/>
    <updated>2014-03-03T14:58:05+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/03/145805</id>
    <content type="html"><![CDATA[<p>In this case the GcpServer is a background service. If the port 5556 is listening, that means the service start successfully.</p>

<pre><code>chmod 755 GcpServerCore/cmd/*.sh
cd GcpServerCore/cmd;./start.sh;cd -
while ! nc -zv localhost 5556; do sleep 5; done
</code></pre>

<p>This solution based on the netcat utility.</p>

<p>Ref: <a href="http://snipplr.com/view/43113/">bash: how to start a service and wait until it&rsquo;s up</a>.</p>
]]></content>
  </entry>
  
</feed>
