<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Command Line | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/command-line/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-06-04T20:48:19+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PDF Margin Trimming Tools]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/12/143532/"/>
    <updated>2015-01-12T14:35:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/12/143532</id>
    <content type="html"><![CDATA[<p>I am looking for a tool to trim the margin of pdf files,
to be more convenient to reading on my 10.0 inch tablet.</p>

<p><a href="http://briss.sourceforge.net/">Briss</a> do the work well.
It&rsquo;s a java program, so jvm need to be installed beforehand.</p>

<p>Download it (briss-0.9.tar.gz) and extract, run it with <code>java -jar briss-0.9.jar</code>,
or <code>java -jar briss-0.9.jar &lt;target.pdf&gt;</code>, see README.txt for details.</p>

<p>After several tries, I found the right process is NOT open pdf directly with briss.
The following is the recommended way:</p>

<p>First open the target pdf with <code>evince &lt;target.pdf&gt;</code>, see if the margin area is the same.
If not, remember the special page numbers.</p>

<p>For example, the first 6 pages, including cover, copy right page, etc, are different with the remaining pages.
When starting briss, input &ldquo;1-6&rdquo; when asked for &ldquo;Enter pages to be excluded from merging&rdquo;.
Briss open page 1 to 6 respectively, and put all odd and even pages into 2 other &ldquo;clusters&rdquo;.</p>

<p>A cluster is group of pages share the same margin settings.
So all odd pages use the same margin settings,
and all even pages use same margin settings, (which may be different with the odd cluster).</p>

<p>Use mouse to set the rectange in each cluster, then [Action -> Preview],
if it&rsquo;s ok, [Action -> Crop PDF].</p>

<p>For convenience, add the following codes into ~/.bash_aliases:</p>

<pre><code>function briss(){
  java -jar $HOME/apps/briss-0.9/briss-0.9.jar $1
}
</code></pre>

<p>So now crop pdf with <code>briss &lt;target.pdf&gt;</code>.</p>

<p>If define alias with <code>alias briss='java -jar $HOME/apps/briss-0.9/briss-0.9.jar'</code>, tab-completion doesn&rsquo;t work.
So here we use function.</p>

<p>I also tried pdfcrop, which is installed with <code>sudo apt-get install texlive-extra-utils</code>.
After cropped, the page index information is lost.
And page size vary with the text area.
So it&rsquo;s not recommended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulating CSV Files in Command Line]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/05/183154/"/>
    <updated>2015-01-05T18:31:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/05/183154</id>
    <content type="html"><![CDATA[<h1>csvkit</h1>

<p>Here we manipulate csv files with <a href="https://github.com/onyxfish/csvkit">csvkit</a>.
It&rsquo;s developed with Python. So install it with <code>sudo pip install csvkit</code>;</p>

<p>Convert xls, xlsx file into csv file: <code>in2csv input.xlsx &gt; data.csv</code>;</p>

<p>List column titles of a csv file: <code>csvcut -n data.csv</code>;</p>

<p>Print statistic information for each columns in a csv file: <code>csvstat data.csv</code>;</p>

<p>Print the first, second, 11th, 16th column of first 9 records (another one for headline): <code>csvcut -c 1,2,11,16 data.csv|head</code>;</p>

<p>If there are newline characters in records, add &ldquo;-l&rdquo; option to make it clear: <code>csvcut -l -c 1,2,11,16 data.csv|head</code>;</p>

<p>Convert to json file with csvjson:, <code>head fairData150104.csv|csvjson -i 4</code>, where &ldquo;-i&rdquo; specify how many indent spaces, default is no indent.
Or select some collomns to show: <code>csvcut -c 1,2,11,16 fairData150104.csv|head|csvjson -i 4</code></p>

<h1>csvtool</h1>

<p>Install: <code>sudo aptitude install csvtool</code>;</p>

<ul>
<li><p>csvtool sub <n1> <n2> <n3> <n4> data.csv:</p>

<p>  Take a square subset of the CSV, top left at row <n1>, column <n2>,
  which is <n3> deep and <n4> wide.
  <n1> and <n2> count from 1, or from 0 if -z option is given.</p>

<p>  Example: <code>csvtool sub 1 16 1 1 data.csv</code></p></li>
<li><p>csvtool take <n> data.csv: take first <n> rows of the csv, like &ldquo;head&rdquo; in shell;</p></li>
<li><p>csvtool drop <n> data.csv: drop the first <n> rows and return the rest (if any).</p></li>
</ul>


<p>See <code>csvtool -h</code> for details.</p>

<p>To print the <em>n</em>th record easily, add the following function into ~/.bash_alias file:</p>

<pre><code>function ctls(){
  if test $# -eq 3; then
    csvtool drop $2 $1 | csvtool take $3 -
  else
    echo ctls: csvtool list specified record
    echo Synopsis: ctls '&lt;filename&gt; &lt;startNo&gt; &lt;count&gt;'
  fi
}
</code></pre>

<p>Now print the 3rd record of data.csv with <code>ctls data.csv 3 1</code>.</p>

<p>The &ldquo;-&rdquo; in &ldquo;csvtool take&rdquo; means &ldquo;get input from stdin instead of a file&rdquo;.</p>

<h1>Put them together</h1>

<ul>
<li><p>Count the number of records which the 7th field is empty: <code>csvgrep -c 7 -r "^$" data.csv | csvtool height -</code>;</p></li>
<li><p>Count the number of records which the 7th field is NOT empty: <code>csvgrep -c 7 -r "^.+$" data.csv | csvtool height -</code>;</p></li>
<li><p>Print data on screen without line wrap: <code>less -S &lt;filename&gt;</code>;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Powerful Linux Command Line Calculator Based on Bc]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/30/110339/"/>
    <updated>2014-04-30T11:03:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/30/110339</id>
    <content type="html"><![CDATA[<p>Create a shell script named my-calculator.sh under ~/apps:</p>

<pre><code>#!/bin/bash

# Example: ./my-calculator ih od 23A+34B =&gt; echo 'ibase=16;obase=10;23A+34B' | bc
#     where "ih" means "input is hex", "od" means "output is decimal"
#     ./my-calculator ih oh echo 'ibase=16;obase=10;A+A' | bc

if [[ $# -gt 3 ]]; then
    echo Bad format: more than 3 arguments found
    exit 1
fi
in=10
out=10
for op in $@; do
    if [[ $op = 'ib' ]]; then
        in=2
    elif [[ $op = 'id' ]]; then
        in=10
    elif [[ $op = 'ih' ]]; then
        in=16
    elif [[ $op = 'ob' ]]; then
        out=2
    elif [[ $op = 'od' ]]; then
        out=10
    elif [[ $op = 'oh' ]]; then
        out=16
    else 
        expr=$op
    fi
done
echo echo \"obase=$out\;ibase=$in\;$expr\" \| bc
echo "obase=$out;ibase=$in;$expr" | bc
</code></pre>

<p>Note: put obase BEFORE ibase, or the obase will based on ibase. For example, the result of</p>

<pre><code>echo "ibase=16;obase=10;A+A" | bc
</code></pre>

<p>is 14, but not 20. After &ldquo;ibase=16&rdquo;, the &ldquo;10&rdquo; in &ldquo;obase=10&rdquo; is actually a hex, not a decimal. To avoid interfered by ibase, we should always declare obase before ibase.</p>

<p>Now add &ldquo;alias mc=/home/chad/apps/my-calculator.sh&rdquo; into your ~/.zshrc, you can do hex calculation by:</p>

<pre><code>$ mc ih oh A+A
</code></pre>

<p>Add hex numbers and output to decimal:</p>

<pre><code>$ mc ih A+A
</code></pre>

<p>Convert a hex into decimal:</p>

<pre><code>$ mc ih 23B
</code></pre>

<p>Convert a decimal to hex:</p>

<pre><code>$ mc oh 23432
</code></pre>

<p>Some ordinary decimal calculation:</p>

<pre><code>$ mc 234+345
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile Java Codes in Linux Shell Instead of Ant Script]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/07/172525/"/>
    <updated>2014-03-07T17:25:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/07/172525</id>
    <content type="html"><![CDATA[<p>The following is frequently used ant script, compile some java source codes with a libary path, then copy all non-java files to compiled folder:</p>

<pre><code>&lt;property name="src.dir" value="${basedir}/src" /&gt;
&lt;property name="src.class.dir" value="${webroot.dir}/web-inf/classes" /&gt;
&lt;path id="lib.path"&gt;
    &lt;fileset dir="${webroot.dir}/web-inf/lib"&gt;
        &lt;include name="**/*.jar" /&gt;
    &lt;/fileset&gt;
&lt;/path&gt;
&lt;target name="compile-src" depends="init" description="compile java sources"&gt;
    &lt;javac srcdir="${src.dir}" destdir="${src.class.dir}" encoding="utf-8"
            debug="true" classpathref="lib.path" failonerror="false"/&gt;
    &lt;copy todir="${src.class.dir}"&gt;
        &lt;fileset dir="${src.dir}"&gt;
            &lt;exclude name="**/*.java" /&gt;
        &lt;/fileset&gt;
    &lt;/copy&gt;
&lt;/target&gt;
</code></pre>

<p>The corresponding shell script is:</p>

<pre><code>src_dir=/vagrant/codes/GCP6.1/src
web_build=/vagrant/codes/web_build
class_dir=$web_build/web_server/webapps/GCP6.1/WEB-INF/classes
lib_dir=/vagrant/codes/GCP6.1/WebRoot/WEB-INF/lib
find $src_dir -type f -name "*.java" -exec javac -cp "$lib_dir/*:$src_dir" -d $class_dir {} \;
rsync -auC --exclude='*.java' $src_dir/ $class_dir/
</code></pre>

<p>Take care there&rsquo;s no folder named &ldquo;core&rdquo; in $src_dir, or it will be excluded by the &ldquo;-C&rdquo; option of rsync command.</p>

<h1>A Test Case</h1>

<pre><code>$ tree
.
├── classes
├── lib
│   ├── libadd.jar
│   └── libmul.jar
├── libadd
│   └── com
│       └── boco
│           └── gcp
│               └── add
│                   ├── MyAdd.class
│                   └── MyAdd.java
├── libmul
│   └── com
│       └── boco
│           └── gcp
│               └── mul
│                   ├── MyMul.class
│                   └── MyMul.java
└── main
    └── com
        └── boco
            └── gcp
                ├── Test.java
                └── util
                    └── MyUtil.java

17 directories, 8 files

$ find . -name '*.java' -exec cat {} \; -exec echo "--------" \;
package com.boco.gcp.util;

import com.boco.gcp.add.MyAdd;
import com.boco.gcp.mul.MyMul;

public class MyUtil {
    public int newadd(int x, int y) {
        MyAdd add = new MyAdd();
        MyMul mul = new MyMul();
        return add.myadd(3,5) + mul.mymul(3,5);
    }
}
--------
package com.boco.gcp;

import com.boco.gcp.mul.MyMul;
import com.boco.gcp.add.MyAdd;
import com.boco.gcp.util.MyUtil;

public class Test {
    public static void main(String[] args) {
        MyMul mul = new MyMul();
        MyAdd add = new MyAdd();
        System.out.println(mul.mymul(3,5));
        System.out.println(add.myadd(3,5));
        MyUtil util = new MyUtil();
        System.out.println(util.newadd(3,5));
    }
}
--------
package com.boco.gcp.mul;

public class MyMul {
    public int mymul(int x, int y) {
        return 10*x*y;
    }

    public static void main(String[] args) {
        MyMul mul = new MyMul();
        System.out.println(mul.mymul(3,5));
    }
}
--------
package com.boco.gcp.add;

public class MyAdd {
    public int myadd(int x, int y){
        return 10*x+y;
    }

    public static void main(String[] args) {
        MyAdd add = new MyAdd();
        System.out.println(add.myadd(3,5));
    }
}
--------
$ find main -name '*.java' -exec javac -cp 'lib/*:main' {} -d classes \;
$ tree classes/
classes/
└── com
    └── boco
        └── gcp
            ├── Test.class
            └── util
                └── MyUtil.class
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell Command-line Application Building]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/15/122240/"/>
    <updated>2013-12-15T12:22:40+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/15/122240</id>
    <content type="html"><![CDATA[<h1>Haskeline Package</h1>

<p><a href="http://hackage.haskell.org/package/haskeline">Haskeline</a> provides a user interface for line input in command-line programs. This library is similar in purpose to readline, but since it is written in Haskell it is (hopefully) more easily used in other Haskell programs.</p>

<p>A tab-completion solution based on haskeline: <a href="http://stackoverflow.com/questions/6147201/haskell-haskeline-word-completion">Haskell (haskeline) word completion</a></p>

<h1>Command Suite Parse</h1>

<p><a href="http://hackage.haskell.org/package/console-program">console-program</a> provides an infrastructure to build command line programs. It provides the following features:</p>

<ul>
<li><p>Declare any number of &ldquo;commands&rdquo; (modes of operation) of the program;</p></li>
<li><p>Declare options of these commands;</p></li>
<li><p>Collect options from a configuration file and the command line, and execute the proper command;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
