<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 解析 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/jie-xi/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-11-03T17:15:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用minidom解析xml文档]]></title>
    <link href="http://leetschau.github.io/blog/2011/01/18/113744/"/>
    <updated>2011-01-18T11:37:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/01/18/113744</id>
    <content type="html"><![CDATA[<p>原始xml文档（下划线部分是要解析的数据）：</p>

<p> &lt;?xml version=&ldquo;1.0&rdquo;?></p>

<p> &lt;!DOCTYPE coverage SYSTEM &ldquo;<a href="http://cobertura.sourceforge.net/xml/coverage-04.dtd">http://cobertura.sourceforge.net/xml/coverage-04.dtd</a>&rdquo;></p>

<p> <coverage  line-rate="0.0" branch-rate="0.0" lines-covered="0" lines-valid="4358" branches-covered="0" branches-valid="1280" complexity="1.538085255066387"  version="1.9.1" timestamp="1294906695765"></p>

<p> <packages /></p>

<p> </coverage></p>

<p>解析为list：</p>

<p> test_datasets = []</p>

<p> import xml.dom.minidom</p>

<p> dom = xml.dom.minidom.parse(&lsquo;e:\MyDoc\Project\GODU_BVT\build\2011-01-18\GODU_WEB\build\result\cov\coverage-summary.xml&rsquo;)</p>

<p> raw_test_res = dom.getElementsByTagName(&lsquo;coverage&rsquo;)[0]</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;lines-covered&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;lines-valid&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;line-rate&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;branches-covered&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;branches-valid&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;branch-rate&rsquo;].value)</p>

<p> test_datasets.append(raw_test_res.attributes[&lsquo;complexity&rsquo;].value)</p>

<p> return test_datasets</p>

<p>解析为字典：</p>

<p> test_datasets = {}</p>

<p> import xml.dom.minidom</p>

<p> dom = xml.dom.minidom.parse(&lsquo;e:\MyDoc\Project\GODU_BVT\build\2011-01-18\GODU_WEB\build\result\cov\coverage-summary.xml&rsquo;)</p>

<p> raw_data_set = dom.getElementsByTagName(&lsquo;coverage&rsquo;)[0].attributes</p>

<p> for the_attr in raw_data_set.values():</p>

<p>  test_datasets[the_attr.name] = the_attr.value</p>

<p> return test_datasets</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解析java源文件]]></title>
    <link href="http://leetschau.github.io/blog/2010/08/30/160444/"/>
    <updated>2010-08-30T16:04:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/08/30/160444</id>
    <content type="html"><![CDATA[<p>尝试从java源文件中解析出类、方法、属性等信息，但下面的代码没有完全实现。</p>

<p>Sub parseJava()
  Dim package_name as String
  &lsquo;read a file
  Documents.Open FileName:=&ldquo;f:\CommandCm.java&rdquo;, ConfirmConversions:=False, ReadOnly:=True
  paraNo = ActiveDocument.Paragraphs.Count
  For lineNo = 1 To paraNo
   Set curParaWords = ActiveDocument.Paragraphs(lineNo).Range.Words
   Dim strCurPara as String
   strCurPara = ActiveDocument.Paragraphs(lineNo).Range.Text
   If InStr(strCurPara, &ldquo;package&rdquo;)=1 Then
    &#8216;包名是package后、分号前的部分
    tmpStr = Right(strCurPara,Len(strCurPara)-Len(&ldquo;package&rdquo;)-1)
    package_name = Left(tmpStr, Len(tmpStr)-2)
   End If
   If InStr(strCurPara, &ldquo;public class&rdquo;)=1 Then
    &#8216;类名是这一行的第三个单词，且不含末尾空格
    class_name = RTrim(curParaWords(3).Text)
   End If
   If InStr(strCurPara, &ldquo;public interface&rdquo;)=1 Then
    &#8216;接口名是这一行的第三个单词，且不含末尾空格
    class_name = RTrim(curParaWords(3).Text)
   End If
   Select Case curParaWords(2).Text
   Case &ldquo;public&rdquo;</p>

<p>   Case &ldquo;private&rdquo;
   Case &ldquo;protected&rdquo;
   Case Else
   End Case
   If curParaWords(2)=&ldquo;public&rdquo; Then
    &lsquo;接口名是这一行的第三个单词，且不含末尾空格
    class_name = RTrim(ActiveDocument.Paragraphs(lineNo).Range.Words(3).Text)
   End If
  Next lineNo
  ActiveDocument.Close
End Sub</p>

<p> 下面是业务逻辑：</p>

<p>数据结构：</p>

<p> 类相关数据表ClassInfo（Map）</p>

<p> key: name, description, class_name, package, extends, interface;</p>

<p>属性数据表PropInfo（List<Map>）</p>

<p>方法数据表MethodInfo（List<Map>）</p>

<p>文本格式约定：</p>

<p>顶格、package起首代码行为package声明行；</p>

<p>顶格、public class起首的代码行是类声明行；</p>

<p> 顶格、 public  interface起首的代码行是接口声明行；</p>

<p> 一个tab后跟public、private、protected是方法或者属性</p>

<p> 有左括号的是方法， 左括号前单词是方法名，方法名前是返回值的数据类型；</p>

<p> 无左括号 的是 属性，等号左边单词是属性名，若无等号分号前单词是属性名，若都没有输出一条 “文件名：行号：异常属性/方法，手工提取” 提示；</p>

<p> 一个tab后跟其他字母 输出一条“文件名：行号：异常属性/方法，手工提取”提示；</p>

<p> 一个tab后跟非字母符号（如/*是注释，@是编译标志）略过；</p>

<p>流程：</p>

<p> 用户输入目标目录</p>

<p> 将文件名保存在ClassInfo.name和class_name中；</p>

<p> 加载该目录下所有java文件， 对于一个java文件：</p>

<p>第一次文本逐行读取：提取除方法/属性说明外所有信息；</p>

<p>第二次文本逐行读取：寻找以“* 方法名”开始的行，作为方法说明，放入对应的方法Map中；</p>
]]></content>
  </entry>
  
</feed>
