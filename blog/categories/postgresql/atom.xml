<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-10-03T10:36:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SonarQube and Postgresql on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/23/113751/"/>
    <updated>2013-12-23T11:37:51+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/23/113751</id>
    <content type="html"><![CDATA[<h1>Authentication</h1>

<p>$POSTGRESQL_HOME/data/pg_hba.conf</p>

<ul>
<li><p>Modify &ldquo;local all all peer&rdquo; to &ldquo;local all all trust&rdquo; to enable &ldquo;sonar&rdquo; login in with &ldquo;psql -U sonar&rdquo;.</p></li>
<li><p>Modify &ldquo;host all all 127.0.0.1/32 ident&rdquo; to &ldquo;host all all 127.0.0.1/32 trust&rdquo; to enable SonarQube communicate with Postgresql database; or define a access rule in &ldquo;pg_ident.conf&rdquo;.</p></li>
<li><p>If you can connect to SonarQube server only on localhost, try shutdown firewall: &ldquo;service iptables stop&rdquo; or open the port following Configure Firewalls on Linux .</p></li>
<li><p>List all projects in Postgresql database:</p>

<p>  $ psql -U sonar
  select * from projects;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play Postgresql 9.3 on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/19/172359/"/>
    <updated>2013-12-19T17:23:59+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/19/172359</id>
    <content type="html"><![CDATA[<h1>Installation</h1>

<h2>on CentOS 6.4</h2>

<ol>
<li><p>Download PGDG RPM file &ldquo;pgdg-centos93-9.3-1.noarch.rpm&rdquo;, copy to 47, and install with rpm -ivh;</p></li>
<li><p>On server 47: $ yum list postgres*</p></li>
<li><p>$ yum install postgresql93-server_x86_64</p></li>
<li><p>$ service postgresql-9.3 initdb</p></li>
<li><p>$ chkconfig postgresql-9.3 on</p></li>
<li><p>$ service postgresql-9.3 start (restart, stop, reload)</p></li>
<li><p>$ su - postgres</p></li>
<li><p>verify: $ psql</p></li>
<li><p>list users: \du</p></li>
</ol>


<p><a href="http://wiki.postgresql.org/wiki/YUM_Installation">http://wiki.postgresql.org/wiki/YUM_Installation</a></p>

<h2>on XUbuntu 13.10</h2>

<p>It said there is no saucy (ubuntu 13.10) package in postgresql repository. So I modified &ldquo;saucy&rdquo; to &ldquo;precise&rdquo;:</p>

<p>$ echo &ldquo;deb <a href="http://apt.postgresql.org/pub/repos/apt/">http://apt.postgresql.org/pub/repos/apt/</a> precise-pgdg main&rdquo; > /etc/apt/sources.list.d/pgdg.list</p>

<p>$ wget &ndash;quiet -O - <a href="https://www.postgresql.org/media/keys/ACCC4CF8.asc">https://www.postgresql.org/media/keys/ACCC4CF8.asc</a> | sudo apt-key add -</p>

<p>$ sudo apt-get update</p>

<p>$ sudo apt-get install postgresql-9.3 pgadmin3</p>

<p>$ /etc/init.d/postgresql start</p>

<p>Ref: <a href="http://wiki.postgresql.org/wiki/Apt">http://wiki.postgresql.org/wiki/Apt</a></p>

<h1>Get Started</h1>

<ol>
<li><p>user postgres: $ psql</p></li>
<li><p>CREATE ROLE bvt LOGIN PASSWORD &lsquo;&lt;&hellip;>&rsquo;; // Note that the semicolon is <strong>mandatory</strong>;</p></li>
<li><p>create database mydb owner bvt;</p></li>
<li><p>user bvt: $ psql mydb</p></li>
</ol>


<h1>psql usage</h1>

<p>start psql console: psql <database_name> (if <database_name> omitted, it&rsquo;s the same as the user name);</p>

<p>get help: \?;</p>

<p>list all tables: \d;</p>

<p>print table contents: select * from <table_name>;</p>

<p>list roles: \du;</p>

<p>list databases: \l;</p>

<p>user &ldquo;postgres&rdquo; create database for a common user: create database bvt owner bvt;</p>

<p>delete database: drop database <db_name>; (same as &ldquo;dropdb <database_name>&rdquo; in terminal);</p>

<p><a href="http://www.postgresql.org/docs/9.3/static/index.html">http://www.postgresql.org/docs/9.3/static/index.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgresql Notes]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/12/182730/"/>
    <updated>2013-12-12T18:27:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/12/182730</id>
    <content type="html"><![CDATA[<h1>Documentations</h1>

<p><a href="https://wiki.postgresql.org/wiki/Main_Page">PostgreSQL Wiki</a></p>

<p><a href="https://wiki.postgresql.org/wiki/Chinese">中文PostgreSQL Wiki</a></p>

<p><a href="http://zh.wikipedia.org/wiki/PostgreSQL">中文维基百科上的PostgreSQL</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulate Sonarqube Database in PostgreSQL With JDBC]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/29/172706/"/>
    <updated>2013-11-29T17:27:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/29/172706</id>
    <content type="html"><![CDATA[<p>Use the following Java class to manipulate Sonarqube database in postgresql.</p>

<h1>ManipulateSonarPost.java</h1>

<p> import java.sql.Connection;
 import java.sql.DatabaseMetaData;
 import java.sql.DriverManager;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 public class TestPost {
  private static Connection connection = null;
  public static void main(String[] args) throws SQLException, java.lang.ClassNotFoundException {
   String url = &ldquo;jdbc:postgresql://localhost/sonar&rdquo;;
   String user = &ldquo;sonar&rdquo;;
   String password = &ldquo;sonar&rdquo;;
   String driver = &ldquo;org.postgresql.Driver&rdquo;;</p>

<p>   Class.forName(driver);
   connection = DriverManager.getConnection(url+&ldquo;?user=&rdquo;+user+&ldquo;&amp;password=&rdquo;+password);
   if ((connection == null) || (connection.isClosed())) return;
   System.out.println(&ldquo;Connection is: &rdquo;+connection);</p>

<p>   listTables();
   String table = &ldquo;projects&rdquo;;
   printTable(table);
   connection.close();</p>

<p>  }</p>

<p>  private static void listTables() throws SQLException {
   DatabaseMetaData md = connection.getMetaData();
   ResultSet rs = md.getTables(null, null, &ldquo;%&rdquo;, null);
   while (rs.next()) {
    System.out.println(rs.getString(3));
   }
   rs.close();</p>

<p>  }</p>

<p>  private static void printTable(String tableName) throws SQLException {
   Statement st = connection.createStatement();
   ResultSet rs = st.executeQuery(&ldquo;SELECT * FROM &rdquo; + tableName);
   while (rs.next()) {
     System.out.println(&ldquo;Column 1: &rdquo; + rs.getString(1));
     System.out.println(&ldquo;Column 2: &rdquo; + rs.getString(2));
     System.out.println(&ldquo;Column 3: &rdquo; + rs.getString(3));
   }
   rs.close();
   st.close();
  }
 }</p>

<h1>Compile and Run</h1>

<p>$ javac -cp ~/apps/sonar-3.6.1/extensions/jdbc-driver/postgresql/postgresql-9.1-901-1.jdbc4.jar ManipulateSonarPost.java</p>

<p>$ java -cp ~/apps/sonar-3.6.1/extensions/jdbc-driver/postgresql/postgresql-9.1-901-1.jdbc4.jar:. ManipulateSonarPost</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup and Restore Postgresql Database]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/29/100558/"/>
    <updated>2013-11-29T10:05:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/29/100558</id>
    <content type="html"><![CDATA[<h1>Backup</h1>

<p>(On CentOS 6.4)</p>

<p>Enable backup as user &ldquo;sonar&rdquo;: modify authentication file pg_hba.conf following SonarQube and Postgresql on Linux ;</p>

<p>Then you can backup a database: $ pg_dump -U sonar -F c -v -f sonar.bak sonar</p>

<p>Synopsis: pg_dump [options] <db_name>. &ldquo;-F c&rdquo; means using &ldquo;custom&rdquo; file format. -f specifies the output file name.</p>

<p>Or backup all: $ pg_dumpall -U postgres -f totalbackup.sql -v -c</p>

<p>The &ldquo;-c&rdquo; will print drop commands to remove existing databases or roles. So you can restore them without cleaning existing databases in your backup server first.</p>

<h1>Restore</h1>

<p>Install and start postgresql server. Then you can restore a full backup:</p>

<p> $ psql -U postgres -f totalbackup.sql</p>

<p>Or restore a specific database:</p>

<ol>
<li><p>$ psql -U postgres (modify pg_hba.conf for authenticaiton);</p></li>
<li><p>create role &ldquo;sonar&rdquo; and database &ldquo;sonar&rdquo;:</p></li>
</ol>


<p> create role sonar login password &lsquo;sonar&rsquo;;</p>

<p> create database sonar owner sonar;</p>

<ol>
<li>$ pg_restore -U sonar -d sonar -j 4 -v sonar.bak</li>
</ol>


<h1>Verify</h1>

<ul>
<li>Print database size of &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\l+&rdquo; sonar|grep sonar</p>

<ul>
<li>Print all tables and sizes in database &ldquo;sonar&rdquo;:</li>
</ul>


<p> $ psql -U sonar -c &ldquo;\d+&rdquo; sonar</p>

<p>Or run a psql console ($ psql -U sonar), and use the following commands to verify:</p>

<ul>
<li><p>\d // list all tables</p></li>
<li><p>select * from projects; // print contents of table &ldquo;projects&rdquo;</p></li>
<li><p>select pg_size_pretty(pg_database_size(&lsquo;sonar&rsquo;)); // print the human_readable size of database &ldquo;sonar&rdquo;</p></li>
<li><p>select pg_database_size(&lsquo;sonar&rsquo;); // give the exact size of database &ldquo;sonar&rdquo;</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
