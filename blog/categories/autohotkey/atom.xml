<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Autohotkey | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/autohotkey/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Define Keymap on Ubuntu and Windows]]></title>
    <link href="http://leetschau.github.io/blog/2013/09/24/193318/"/>
    <updated>2013-09-24T19:33:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/09/24/193318</id>
    <content type="html"><![CDATA[<h1>Swap Caps lock and Escape Key</h1>

<h2>Swap only once</h2>

<p>Write the following text into file ~/.swapCapsEsc:</p>

<pre><code>remove Lock = Caps_Lock 
keysym Escape = Caps_Lock 
keysym Caps_Lock = Escape 
add Lock = Caps_Lock
</code></pre>

<p>Run <code>xmodmap ~/.swapCapsEsc</code>.</p>

<p>Ref: <a href="http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_XWindows">http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_XWindows</a></p>

<h2>Swap permanently on Ubuntu 14.04</h2>

<p>Install dconf-editor with <code>sudo apt-get install dconf-tools</code>,
start it with <code>dconf-editor</code>.
In [org -> gnome >> desktop -> input-sources -> xkb-options],
modify its value to <code>['caps:swapescape']</code>.</p>

<p>Ref: <a href="http://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc.">http://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc.</a></p>

<p>If this method doesn&rsquo;t work, add &ldquo;only once&rdquo; solution to autostart:
Create file <code>$HOME/.config/autostart/swapCapsESC.desktop</code>:</p>

<pre><code>[Desktop Entry]
Name=SwapCapsESC
Comment=Swap Caps Lock Key and ESC Key
Exec=xmodmap /home/leo/.swapCapsEsc
Type=Application
Terminal=true
X-GNOME-Autostart-Delay=5
</code></pre>

<p>You can also use the GUI equivalent:
Run <code>Startup Applications</code> (input <code>startup</code> in dash (press <em>Win</em> key),
add above command in it.</p>

<h2>Swap permanently on Windows</h2>

<p>For Windows, install AutoHotkey, save the following codes as swapCapsESC.ahk:</p>

<pre><code>Capslock::Esc
ESC::Capslock
</code></pre>

<p>Execute it when you want to swap the keys.
If you want execute it automatically when system startup,
put the file in [Start -> Startup] folder
(open it with inputing &ldquo;shell:startup&rdquo; in Run).
Verified in Windows 7 &amp; 10.</p>

<h1>Swap Ctrl and Alt Key</h1>

<pre><code>remove mod1 = Alt_L Alt_R 
remove control = Control_L Control_R 
keycode 64 = Control_L 
keycode 37 = Alt_L 
keycode 108 = Control_R 
keycode 105 = Alt_R 
add control = Control_L Control_R 
add mod1 = Alt_L Alt_R 
</code></pre>

<p>64, 37, etc are determined by &ldquo;xev&rdquo; command, see below for usage.</p>

<h1>Reset Key Map to Initial State</h1>

<p>setxkbmap -layout us</p>

<h1>Define key swap shortcuts</h1>

<p>It&rsquo;s mainly for emacs operation convenience to swap Ctrl and Alt key, and vi operation convenience to swap Caps Lock and Escape key. When you are not in emacs and vi, swap keys always lead confusions. So it&rsquo;s necessary to switch key definition quickly. The following are some basic method to achieve key swap shortcuts</p>

<ol>
<li><p>Create a file named &ldquo;swapCapsEsc&rdquo; in /home/lichao/docs/swapkeys</p>

<p> remove Lock = Caps_Lock
 keysym Escape = Caps_Lock
 keysym Caps_Lock = Escape
 add Lock = Caps_Lock</p></li>
</ol>


<p>and a file named &ldquo;swapCtrlAlt&rdquo; in /home/lichao/docs/swapkeys:</p>

<pre><code>remove mod1 = Alt_L Alt_R 
remove control = Control_L Control_R 
keycode 64 = Control_L 
keycode 37 = Alt_L 
keycode 108 = Control_R 
keycode 105 = Alt_R 
add control = Control_L Control_R 
add mod1 = Alt_L Alt_R 
</code></pre>

<ol>
<li><p>Create keyboard shortcuts in &ldquo;Application Finder (Alt + F3) -> Preferences -> Custom Actions&rdquo;:</p>

<p> Type: Regular Expression; Pattern: swce; Command: xmodmap /home/lichao/docs/swapkeys/swapCapsEsc
 Type: Regular Expression; Pattern: swca; Command: xmodmap /home/lichao/docs/swapkeys/swapCtrlAlt
 Type: Regular Expression; Pattern: swres; Command: setxkbmap -layout us</p></li>
</ol>


<p>Now you can use [Alt-F2 swce] to swap Caps lock and escape key,
use [Alt-F2 swca] to swap Ctrl and Alt key, use [Alt-F2 swres]
to make all keys to their original state (If you have swaped ctrl and alt key,
the shortcut is [Ctrl-F2 swres]).</p>

<h1>Usage of xev</h1>

<p>Run &ldquo;xev&rdquo; in command line. A little window appear.
Make it active window and press some key, the keycode will show in the window.</p>

<h1>Usage of xmodmap</h1>

<p>Run &ldquo;xmodmap -pm&rdquo; we got:</p>

<p>shift  Shift_L (0x32), Shift_R (0x3e)
lock  Caps_Lock (0x42)
control  Control_L (0x25), Control_R (0x69)
mod1  Alt_L (0x40), Alt_R (0x6c), Meta_L (0xcd)
mod2  Num_Lock (0x4d)
mod3
mod4  Super_L (0x85), Super_R (0x86), Super_L (0xce), Hyper_L (0xcf)
mod5  ISO_Level3_Shift (0x5c), Mode_switch (0xcb)</p>

<p>Here the names in the left column (shift, lock, control, etc) are called &ldquo;Modifier Name&rdquo;,
while the names in the right column (Shift_L, Caps_Lock, Control_R, Meta_L, etc) are called keysym.
Shift_L means left shift key, while Shift_R means right shift key.
Every physical key (on keyboard) has a identity (integer number) called keycode.
You can use &ldquo;xmodmap -pk&rdquo; to investigate these relationships.
And use <code>xmodmap -e "keycode &lt;to_be_modified&gt; = &lt;target_key&gt;"</code>
to modify these relationships.
For example, the following command make F2 key print &ldquo;m&rdquo; in gedit panel:</p>

<pre><code>xmodmap -e "keycode 68 = m":
</code></pre>

<p>Before command:</p>

<p> 58   0x006d (m)
 68   0xffbf (F2)</p>

<p>(get by &ldquo;xmodmap -pk&rdquo;). After command:</p>

<p> 58   0x006d (m)
 68   0x006d (m)</p>

<p>Use <code>xmodmap -e "keycode 68 = F2"</code> to modify F2 back to F2 key.</p>

<p>The right hand side of this assignment is keysym name. So</p>

<pre><code>xmodmap -e "keycode 16 = 7"
</code></pre>

<p>will map character &ldquo;7&rdquo; to physical key which has keycode 16.</p>

<p>&ldquo;clear <ModifierName>&rdquo; means all keysyms will be detached from this <ModifierName>. So after <code>xmodmap -e "clear control"</code>, all control keys (left and right) are disabled.</p>

<p>&ldquo;remove <ModifierName> = <keysym>&rdquo; means remove <keysym> from the list of current keysym list of the <ModifierName>. So after <code>xmodmap -e "remove Control = Control_R"</code> makes right control key be disabled. When you run <code>xmodmap -e "add Control = Control_R"</code>, the right control key is enabled again. You can use &ldquo;xmodmap -pm&rdquo; to verify.</p>

<p>&ldquo;keysym name1=name2&rdquo; means binding the keys (previous binded to name2) to name1;</p>

<h1>Auto load xmodmap files when system start</h1>

<p>xmodmap ~/.Xmodmap</p>

<p>Ref: <a href="http://earthviaradio.wordpress.com/2012/02/06/swapping-the-left-alt-and-ctrl-keys-in-ubuntu-11-10/">http://earthviaradio.wordpress.com/2012/02/06/swapping-the-left-alt-and-ctrl-keys-in-ubuntu-11-10/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[U盘自动弹出脚本]]></title>
    <link href="http://leetschau.github.io/blog/2013/01/15/204809/"/>
    <updated>2013-01-15T20:48:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/01/15/204809</id>
    <content type="html"><![CDATA[<p>需要微软的Sysinternals Suite中的sync工具，解压到d:\apps下。</p>

<p>ahk脚本：</p>

<p> #u:: ; eject usb drive
 InputBox, myInp, Remove USB, Input Drive Letter:,
 if ErrorLevel
  return
 else
  Run, d:\Apps\SysinternalsSuite\sync.exe -e %myInp%
 return</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About ViATc]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/26/150947/"/>
    <updated>2012-12-26T15:09:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/26/150947</id>
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/viatc/">ViATc</a>是一个基于Autohotkey的TotalCommander插件，实现以vi的方式操纵TotalCommander；它的0.4版相比0.3版功能有了很大的提升，主要是增加了对一些常用操作的支持，例如Tab间跳转，lock/unlock tab，关闭tab等；</p>

<p>:help打开快捷键列表；</p>

<p>插件安装方法：如果在TC中打开ViATc的zip包没有自动安装插件的窗口出现，则将ViATc的exe文件和帮助文件解压到totalcmd.exe所在文件夹，双击exe运行即可；</p>

<p>善用佳软上一篇比较好的介绍文章：<a href="http://xbeta.info/viatc.htm%EF%BC%8C%E4%BD%86%E6%96%87%E4%B8%AD%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%BC%BC%E4%B9%8E%E4%B8%8E%E4%B8%8B%E5%88%B0%E7%9A%84%E4%B8%8D%E4%B8%80%E8%87%B4%E3%80%82">http://xbeta.info/viatc.htm%EF%BC%8C%E4%BD%86%E6%96%87%E4%B8%AD%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%BC%BC%E4%B9%8E%E4%B8%8E%E4%B8%8B%E5%88%B0%E7%9A%84%E4%B8%8D%E4%B8%80%E8%87%B4%E3%80%82</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About WindowPadX]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/25/195030/"/>
    <updated>2012-12-25T19:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/25/195030</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/hoppfrosch/WindowPadX">WindowPadX</a>乃一Autohotkey脚本，具有强大的单/多显示器窗口排布能力且易于配置。有了它，那些Pro版收费的、需要安装的DisplayFusion, MultiMon TaskBar, Actual Multiple Monitors&hellip;就都可以回家了。</p>

<ul>
<li>将当前窗口移动到另一个显示器中：Caps + Space； Space = WPXA_MoveWindowToMonitor, Next</li>
<li><p>窗口最大化切换：Caps + Tab; Tab = WPXA_MaximizeToggle</p></li>
<li><p>将当前非最小化窗口全部集中到第1个显示器中：Caps + 1; 1 = WPXA_GatherWindowsOnMonitor, 1</p></li>
<li><p>将当前非最小化窗口全部集中到第2个显示器中：Caps + 2; 2 = WPXA_GatherWindowsOnMonitor, 2</p></li>
<li><p>将鼠标移动到第1个显示器中：#Numpad1 = WPXA_MoveMouseToMonitor, 1</p></li>
<li><p>将鼠标移动到第2个显示器中：#Numpad2 = WPXA_MoveMouseToMonitor, 2</p></li>
<li><p>窗口在9个方向上移动：Caps + q~e, a~d, z~c; WPXA_Move&hellip;（见WindowPadMove的解释）</p></li>
</ul>


<p>2012-12-26更新：</p>

<p>今天使用中发现WindowPadX存在失效情况，有时Reload能重新生效，有时不行，所以用<a href="https://windowmanager.codeplex.com/">WindowManager</a>代替之，发现不论是什么工具对SumatraPDF都无效；</p>

<p>另外用Windows 7内置的快捷键 Win + Shift + Left/Right把窗口在两个显示器间切换很好用。</p>

<p>工具推荐：<a href="http://www.freewaregenius.com/7-free-dual-monitor-programs-and-resources-that-you-should-know-about/#dualmonitortaskbar">http://www.freewaregenius.com/7-free-dual-monitor-programs-and-resources-that-you-should-know-about/#dualmonitortaskbar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Autohotkey实现鼠标滚轮功能]]></title>
    <link href="http://leetschau.github.io/blog/2012/12/24/160922/"/>
    <updated>2012-12-24T16:09:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/12/24/160922</id>
    <content type="html"><![CDATA[<p>下面的快捷键定义实现了用Alt+[/]实现鼠标滚轮的功能，按住右侧Ctrl再按CapsLock + Up/Down就可以实现页面缩放了（模拟Ctrl+鼠标滚轮功能）。</p>

<p> ![::
  MouseClick, WheelUp, , , 10, 0, D, R
 return
 !]::
  MouseClick, WheelDown, , , 10, 0, D, R
 return
另外还可以将CapsLock + Up/Down定义为翻页快捷键，缺点是不能单手操作，CapsLock+w/s的缺点是与WindowPadX的热键冲突。
 CapsLock &amp; Up::
 CapsLock &amp; Down::</p>

<p> CapsLock &amp; w::</p>

<p> CapsLock &amp; s::</p>

<p>在进行IntelliJ的缩放时发现上面的定义一次缩放的幅度太大，改成下面的脚本解决了问题：</p>

<p> CapsLock &amp; w::
  MouseClick, WheelUp
 return
 CapsLock &amp; s::
  MouseClick, WheelDown
 return</p>

<h1>常用软件中的滚轮和缩放操作</h1>

<ul>
<li><p>Chrome: 使用vimium插件，u/d翻页，j/k上下移动；Ctrl -/=缩放页面；</p></li>
<li><p>SumatraPDF: Up/Down上下移动，Ctrl -/=缩放页面；</p></li>
<li><p>Notepad2: Up/Down上下移动，Ctrl -/=缩放页面；</p></li>
</ul>


<p>另：用右侧Alt + P实现窗口切换（即Alt+Tab）：RAlt &amp; p:: AltTab</p>
]]></content>
  </entry>
  
</feed>
