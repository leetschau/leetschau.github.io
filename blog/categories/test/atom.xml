<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Meteor Package Test Demo]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/03/095227/"/>
    <updated>2015-10-03T09:52:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/03/095227</id>
    <content type="html"><![CDATA[<h1>Generating Test Data with Meteor Factory and Fake</h1>

<p>The following tests set up with <a href="https://github.com/percolatestudio/meteor-factory/">meteor-factory</a>.</p>

<p>First create Meteor app, install packages, define collections and start server:</p>

<pre><code>meteor create testApp
cd testApp
meteor add dburles:factory
meteor add babrahams:constellation
cat &lt;&lt; EOF &gt; collections.js
Authors = new Meteor.Collection('authors');
Books = new Meteor.Collection('books');
EOF
# Authors and Books must be defined in both servers and client
# or `Factory.create("books");` will fail.
# So they can't be defined in browser console
MONGO_URL="mongodb://localhost:27017/test" meteor
</code></pre>

<p>Then open <a href="http://localhost:3000/">http://localhost:3000/</a> in browser,
Open <a href="https://github.com/JackAdams/constellation">constellation console</a> with Ctrl-C.
Open browser console (with F12), run codes below:</p>

<pre><code>Factory.define('author', Authors, {
  name: 'John Smith'
});
// all authors created through Factory have the same "name"

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: 'A book',
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>Now each time you run <code>Factory.create('author');</code>,
a new document is inserted into the collection &ldquo;authors&rdquo;.
You can see it on the constellation console under &ldquo;authors&rdquo; section.</p>

<p>If you want create user with different names,
add a new package <a href="https://github.com/anticoders/meteor-fake/">meteor-fake</a>
with <code>meteor add anti:fake</code>, and modify above definitions as follows:</p>

<pre><code>Factory.define('author', Authors, {
  name: function() { return Fake.user({fields: ['name']}).name; }
});

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: function() { return Fake.sentence(4); },
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>When enable the &ldquo;Autopublish&rdquo; tab, you can see all the collections
even after the autopublish package removed from Meteor app.</p>

<h1>Used in Package</h1>

<p>The container app is named &ldquo;mininf&rdquo;, which has a package named &ldquo;nfcore&rdquo;.</p>

<p>There will be 3 roles of user in this scenario, Add, Sub and Multi.
Users with Add role can only ask addition questions,
with Sub can only ask substraction questions,
with Multi can only ask multiplication questions.</p>

<p>A user without a role can&rsquo;t ask any questions.</p>

<p>The users and their roles will be created with <a href="https://github.com/alanning/meteor-roles">alanning/meteor-roles</a>.</p>

<p>There are 2 collections, accounts and questions,
whose schemas are defined with <a href="https://github.com/aldeed/meteor-simple-schema">simple-schema</a>.</p>

<p>Target:</p>

<p>Run the container app, use constellation to watch it&rsquo;s data;
Define data schema with simple-schema;
Use factory to insert user and question to collections;
Run test on container app, see the result.</p>

<p>The implementation steps:</p>

<ol>
<li><p>Create mininf and nfcore;</p></li>
<li><p>Add simple-schema and roles in the package definition of mininf;</p></li>
<li><p>Add jasmine and velocity in the package test definition of mininf;</p></li>
<li><p>Create schemas of users and questions in package;</p></li>
<li><p>Create collections in package and attach schemas on them;</p></li>
<li><p>Create tests;</p>

<p> meteor create mininf
 cd mininf
 meteor create &ndash;package leo:nfcore
 cat &lt;&lt; EOF > packages/nfcore/package.js
 Package.describe({
   name: &lsquo;leo:nfcore&rsquo;,
   version: &lsquo;0.0.1&rsquo;,
   summary: &lsquo;&rsquo;,
   git: &lsquo;&rsquo;,
   documentation: &lsquo;README.md&rsquo;
 });
 Package.onUse(function(api) {
   api.versionsFrom(&lsquo;1.2.0.2&rsquo;);
   api.use(&lsquo;ecmascript&rsquo;);
   // this makes nfcore itself can use variable &ldquo;SimpleSchema&rdquo; in the source code
   api.use(&ldquo;aldeed:<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x73;&#x69;&#x6d;&#x70;&#x6c;&#x65;&#45;&#x73;&#x63;&#104;&#101;&#x6d;&#97;&#64;&#49;&#46;&#51;&#x2e;&#x33;">&#115;&#105;&#x6d;&#112;&#x6c;&#x65;&#x2d;&#x73;&#x63;&#x68;&#x65;&#109;&#97;&#64;&#x31;&#46;&#x33;&#46;&#51;</a>&rdquo;);
   api.use(&ldquo;alanning:roles&rdquo;);
   // this makes any packages using nfcore can use &ldquo;SimpleSchema&rdquo;
   api.imply(&ldquo;aldeed:simple-schema&rdquo;);
   api.imply(&ldquo;alanning:roles&rdquo;);
   api.addFiles(&lsquo;nfcore.js&rsquo;);
   api.export(&ldquo;NFCore&rdquo;);
 });
 Package.onTest(function(api) {
   api.use(&lsquo;ecmascript&rsquo;);
   api.use(&lsquo;sanjo:<a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6a;&#97;&#x73;&#109;&#x69;&#x6e;&#101;&#x40;&#48;&#46;&#49;&#x39;&#x2e;&#x30;">&#106;&#97;&#x73;&#x6d;&#105;&#x6e;&#x65;&#64;&#x30;&#x2e;&#x31;&#x39;&#x2e;&#48;</a>&rsquo;);
   api.use(&lsquo;anti:fake&rsquo;);
   api.use(&lsquo;underscore&rsquo;);
   api.use(&ldquo;dburles:<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#102;&#97;&#x63;&#x74;&#111;&#x72;&#121;&#64;&#48;&#x2e;&#51;&#46;&#x31;&#x30;">&#102;&#97;&#99;&#116;&#x6f;&#x72;&#x79;&#x40;&#48;&#x2e;&#x33;&#x2e;&#x31;&#x30;</a>&rdquo;);
   api.use(&lsquo;velocity:<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x68;&#116;&#109;&#x6c;&#45;&#114;&#x65;&#112;&#x6f;&#x72;&#116;&#x65;&#x72;&#x40;&#48;&#x2e;&#57;&#x2e;&#x30;">&#104;&#x74;&#x6d;&#x6c;&#45;&#x72;&#x65;&#112;&#111;&#x72;&#x74;&#x65;&#114;&#x40;&#x30;&#x2e;&#x39;&#x2e;&#x30;</a>&rsquo;);
   api.use(&lsquo;velocity:<a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#99;&#111;&#x6e;&#x73;&#111;&#x6c;&#101;&#x2d;&#114;&#x65;&#112;&#x6f;&#x72;&#x74;&#x65;&#x72;&#64;&#x30;&#46;&#x31;&#x2e;&#51;">&#x63;&#111;&#x6e;&#x73;&#111;&#x6c;&#x65;&#x2d;&#114;&#x65;&#112;&#111;&#114;&#116;&#x65;&#x72;&#x40;&#48;&#46;&#x31;&#x2e;&#x33;</a>&rsquo;);
   api.use(&lsquo;leo:nfcore&rsquo;);
   api.addFiles(&lsquo;nfcore-tests.js&rsquo;);
 });
 EOF</p>

<p> mkdir -p {common/{schemas,collections},tests,client,server}
 cat &lt;&lt; EOF > common/globals.js
 NFCore = {};
 NFCore.Schemas = {};
 NFCore.Collections = {};
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Accounts = new SimpleSchema({
   name: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Questions = new SimpleSchema({
   owner: {
     type: Meteor.Collection.ObjectID
   },
   content: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/collections/collections.js
 NFCore.Collections.Accounts = new Mongo.Collection(&ldquo;accounts&rdquo;);
 NFCore.Collections.Accounts.attachSchema(NFCore.Schemas.Accounts);</p>

<p> NFCore.Collections.Questions = new Mongo.Collection(&ldquo;questions&rdquo;);
 NFCore.Collections.Questions.attachSchema(NFCore.Schemas.Questions);
 EOF</p></li>
</ol>


<h1>Errors, Questions and Solutions</h1>

<p>E: meteor object [object object] has no method &lsquo;attach schema&rsquo;.</p>

<p>S: Add <code>api.use("aldeed:collection2@2.5.0");</code> and <code>api.imply("aldeed:collection2@2.5.0");</code> into Package.onUse() of package.js.</p>

<p>E: insert failed: Access denied. No allow validators set on restricted collection for method &lsquo;insert&rsquo;.</p>

<p>S: Add &ldquo;server&rdquo; as the 2nd parameter in package.js -> Package.onTest -> api.addFiles(<the-test-file-name>):
<code>api.addFiles('tests/accounts.js', 'server');</code>.</p>

<p>Q: In package I use Factory.create() to insert a doc into a collection, but I can&rsquo;t find the collection.</p>

<p>S: Add environment &ldquo;MONGO_URL&rdquo; into the test command:
<code>VELOCITY_TEST_PACKAGES=1 MONGO_URL="mongodb://localhost:27017/test" meteor test-packages --driver-package velocity:html-reporter leo:nfcore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在类外部测试私有方法和设置/读取私有变量]]></title>
    <link href="http://leetschau.github.io/blog/2011/02/23/105520/"/>
    <updated>2011-02-23T10:55:20+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/02/23/105520</id>
    <content type="html"><![CDATA[<p>有些私有方法有很明确的功能，算法比较复杂，不测可能会出问题。测的话最简单的方法是把测试用例写在类内部，例如下面的类：</p>

<p> package com.boco.godu.gapi;</p>

<p> import static org.junit.Assert.assertEquals;</p>

<p> import org.junit.Test;</p>

<p> public class ConnManager {</p>

<p> private static String buildConnPoolID(int connType, String ip, int port, String loginArg1, String loginArg2) {</p>

<p> return connType + ip;</p>

<p> }</p>

<p> @Test</p>

<p> public void testPoolID() {</p>

<p> assertEquals(&ldquo;23ipstr&rdquo;, buildConnPoolID(23, &ldquo;ipstr&rdquo;, 3, null, null));</p>

<p> }</p>

<p> }</p>

<p>但这样测会有几个问题：首先是如果测试方法很多，会把源代码文件搞得很臃肿，其次发布的时候需要将测试代码删除（毕竟不是产品的一部分），以后再需要测试的时候还得重写，最后这样的测试在BVT的时候无法运行，工作量也无法体现出来（BVT的测试用例都是写在单独的测试类中）。所以理想的方法是把测试方法写在单独的测试类中。</p>

<p>下面采用Java的反射机制实现这一目标。首先是被测类：</p>

<p> package org.leechau.testPrivateMethod;</p>

<p> public class ClassTested {</p>

<p> private String buffer ;</p>

<p> private String privateFoo (int a, String b) {</p>

<p> return a + b;</p>

<p> }</p>

<p> }</p>

<p>然后是测试类：</p>

<p> package org.leechau.testPrivateMethod;</p>

<p> import static org.junit.Assert.assertEquals;</p>

<p> import java.lang.reflect.InvocationTargetException;</p>

<p> import java.lang.reflect.Method;</p>

<p> import org.junit.BeforeClass;</p>

<p> import org.junit.Test;</p>

<p> public class PrivateMethodTest {</p>

<p> private static ClassTested oClassTested;</p>

<p> private static Method newPrivateFoo;</p>

<p> private static Field buffer;</p>

<p> @BeforeClass</p>

<p> public static void buildDupObj() throws NoSuchMethodException {</p>

<p> // Get the class of the private method.</p>

<p> oClassTested = new ClassTested();</p>

<p> Class&lt;?> cNewClassTested = oClassTested. getClass ();</p>

<p> // Change the property of the private method to be accessible.</p>

<p> newPrivateFoo = cNewClassTested. getDeclaredMethod (&ldquo;privateFoo&rdquo;,</p>

<p> int.class, String.class);</p>

<p> newPrivateFoo. setAccessible (true);</p>

<p> buffer =  cNewClassTested  . getDeclaredField (&ldquo;buffer&rdquo;);</p>

<p> buffer. setAccessible (true);</p>

<p> buffer. set ( oClassTested  , &ldquo;abcdefg&rdquo;);</p>

<p> }</p>

<p> @Test</p>

<p> public void privateFooTest() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {</p>

<p> // Run the private method.</p>

<p> Object oActual = newPrivateFoo. invoke (oClassTested, new Integer(169),  new String(&ldquo;_ABC&rdquo;));</p>

<p> // Test the private method</p>

<p> String sActual = oActual.toString();</p>

<p> String sExpected = &ldquo;169_ABC&rdquo;;</p>

<p> assertEquals(sActual, sExpected);</p>

<p> Object result = buffer. get ( oClassTested );</p>

<p> assertEquals(&ldquo;bcdefg&rdquo;, result);</p>

<p> }</p>

<p> @Test</p>

<p> public void privateFooTest2() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {</p>

<p> Object oActual = newPrivateFoo. invoke (oClassTested, new Integer(169), new String(&ldquo;_DEF&rdquo;));</p>

<p> String sActual = oActual.toString();</p>

<p> String sExpected = &ldquo;169_DEF&rdquo;;</p>

<p> assertEquals(sActual, sExpected);</p>

<p> }</p>

<p> }</p>

<p>这里要注意的是，JUnit 4里一个测试类执行顺序为：@BeforeClass –> @Before –> @Test –> @After –> @AfterClass，其中@BeforeClass和@AfterClass标记仅在测试类的初始化和清理时运行一次且必须是static方法，而@Before/@After标记是在每个@Test方法运行前/后都运行一遍，因此每一个测试方法的调用顺序为：@Before –> @Test –> @After。在JUnit 3里没有@BeforeClass和@AfterClass标记，起初始化和清理任务的方法必须命名为SetUp()和TearDown()。</p>
]]></content>
  </entry>
  
</feed>
