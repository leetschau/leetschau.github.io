<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bvt | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/bvt/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-09-25T20:12:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build BVT System Based on Docker]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/03/150610/"/>
    <updated>2014-09-03T15:06:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/03/150610</id>
    <content type="html"><![CDATA[<p>System: ArchLinux 64bit, IP address: 10.32.1.18.</p>

<h1>Build</h1>

<pre><code>sudo docker -p 8080:8080 --name myjenkins jenkins
</code></pre>

<p>Now you can access <a href="http://10.32.1.18:8080">jenkins server</a> in browser.</p>

<p>List running containers: <code>sudo docker ps</code> (so you can get the container&rsquo;s name for stoping and restarting later);</p>

<p>Stop jenkins server: <code>sudo docker stop myjenkins</code>;</p>

<p>Restart this server: <code>sudo docker start myjenkins</code>;</p>

<h1>Backup and Restore</h1>

<p>Backup image: <code>sudo docker save -o jenkins-docker.tar jenkins</code>;</p>

<p>Restore image: <code>sudo docker load -i jenkins-docker.tar</code>;</p>

<p>Backup container:</p>

<pre><code>(optional) sudo docker stop jenkins
sudo docker export myjenkins &gt; mybvt-system.tar
scp mybvt-system.tar chad@laptop:~/
ssh chad@laptop
cat mybvt-system.tar | sudo docker import - exampleimagelocal:new
</code></pre>

<p>But where is the imported container?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BVT Environment Based on Vagrant]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/22/122449/"/>
    <updated>2014-04-22T12:24:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/22/122449</id>
    <content type="html"><![CDATA[<h1>Process</h1>

<ol>
<li><p>Install common software in provision script, such as JDK, Ant;</p></li>
<li><p>Write a shell script for a given build task;</p></li>
<li><p>Run this script in Jenkins;</p></li>
</ol>


<h1>Use Case</h1>

<h2>Vagrantfile</h2>

<pre><code>config.vm.box = "precise64"
config.vm.define "bs" do |bvtserver|
  bvtserver.vm.hostname = "bvt-server"
  bvtserver.vm.network "private_network", ip: "192.168.50.3",
      virtualbox__intnet: "gcptest-network"
  bvtserver.vm.provider :virtualbox do |vbox|
    vbox.customize ["modifyvm", :id, "--natnet1", "10.3/16"]
  end 
  bvtserver.vm.provision :shell, path: "bvtprov.sh", privileged: false
end 
</code></pre>

<h2>bvtprov.sh</h2>

<p>This script install Subversion, zip, JDK and Ant on this VM.</p>

<pre><code>#!/bin/sh
sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
sudo dpkg -i /vagrant/packages/svn_amd64_ubuntu12.04/*.deb
sudo dpkg -i /vagrant/packages/zip_3.0-4_amd64.deb
mkdir /home/vagrant/apps
cd /home/vagrant/apps
chmod 755 /vagrant/packages/jdk-6u45-linux-x64.bin
sh /vagrant/packages/jdk-6u45-linux-x64.bin
tar jxf /vagrant/packages/apache-ant-1.9.3-bin.tar.bz2
export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8
</code></pre>

<h2>A build task: build-gcp-web-6.1_P2_GZ.sh</h2>

<p>This script checkout codes from Subersion server and compile, make zip for a specific project.</p>

<pre><code>export PATH=$PATH:/home/vagrant/apps/jdk1.6.0_45/bin:/home/vagrant/apps/apache-ant-1.9.3/bin
export LC_ALL=en_US.UTF-8

projname="GCP6.1_P2_GZ"

svnprefix='svn co --non-interactive --no-auth-cache --username bvt --password mypwd'
svnroot='http://10.0.2.59:8118/svn/gcp/Development-Area'
$svnprefix ${svnroot}/7-Tools/deployment/packages/pubs /vagrant/packages
$svnprefix ${svnroot}/3-SCL/Branch/$projname /vagrant/codes/$projname

rm -rf /vagrant/codes/*.zip

web_build=/vagrant/codes/web_build
rm -rf $web_build;  mkdir $web_build
tar zxf /vagrant/packages/apache-tomcat-6.0.39.tar.gz -C $web_build/
mv $web_build/apache-tomcat-6.0.39 $web_build/web_server
cp -r /vagrant/codes/$projname/WebRoot $web_build/web_server/webapps/$projname
src_dir=/vagrant/codes/$projname/src
class_dir=$web_build/web_server/webapps/$projname/WEB-INF/classes
lib_dir=/vagrant/codes/$projname/WebRoot/WEB-INF/lib
find $src_dir -type f -name "*.java" -exec javac -cp "$lib_dir/*:$src_dir" -d $class_dir {} \;
rsync -auC --exclude='*.java' $src_dir/ $class_dir/

cd /vagrant/codes/web_build;  zip -q ../$projname.zip -r web_server -x "*/.svn/*"

pkg_prefix=/vagrant/codes/${projname}-
rm -rf ${pkg_prefix}*
pkgs=${pkg_prefix}$(date +%Y%m%dT%H%M)
mkdir $pkgs
cp /vagrant/codes/*.zip $pkgs
</code></pre>

<h2>Run this task on Jenkins</h2>

<p>Add the following shell commands in the &ldquo;GCP-Web-6.1_P2_GZ&rdquo; project in Jenkins:</p>

<pre><code>cd ~/docs/bvtvm
vagrant ssh [vm-name] -c 'sh /vagrant/build-gcp-web-6.1_P2_GZ.sh'
</code></pre>

<p>The [vm-name] is the VM you want ssh to, &ldquo;bs&rdquo; in this case. If you have only one vm defined in Vagrantfile, you can omit the it, or you can get the value of it via <code>vagrant status</code>;</p>

<p>Note: Try to avoid usage of relative path in scripts. If you have to(sush as make a tar file), use &lsquo;cd -&rsquo; to jump back after operations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Code Review Based on Jenkins and Checkstyle]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/15/164215/"/>
    <updated>2013-05-15T16:42:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/15/164215</id>
    <content type="html"><![CDATA[<p>Based on Jenkins 1.509 and Checkstyle 5.6.</p>

<p>Now we need practising code review, as a step of BVT of course. The ideal solution is based on Sonar and its checkstyle plugin. But I am not very familiar with sonar&rsquo;s java runner and other features. So I decided to use some &ldquo;plain&rdquo; method to embed code review into the process of BVT.</p>

<h1>Preparations</h1>

<ol>
<li><p>Install checkstyle plugin of jenkins;</p></li>
<li><p>copy checkstyle-5.6-all.jar to /opt/checkstyle;</p></li>
<li><p>create a code review rule file tyRules.xml at /opt/checkstyle:</p></li>
</ol>


<p> &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<p> &lt;!DOCTYPE module PUBLIC &ldquo;-//Puppy Crawl//DTD Check Configuration 1.3//EN&rdquo; &ldquo;<a href="http://www.puppycrawl.com/dtds/configuration_1_3.dtd">http://www.puppycrawl.com/dtds/configuration_1_3.dtd</a>&rdquo;>
 <module name="Checker">
  <property name="severity" value="warning"/>
  <module name="TreeWalker">
  <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
  <module name="MethodLength">
   <property name="max" value="200"/>
  </module>
  <module name="NestedIfDepth">
   <property name="max" value="5"/>
  </module>
  <module name="CyclomaticComplexity"/>
  <module name="ParameterNumber">
   <property name="max" value="6"/>
  </module>
  </module>
  <module name="StrictDuplicateCode">
  <property name="min" value="75"/>
  </module>
  <module name="FileLength">
  <property name="max" value="1000"/>
  </module>
 </module></p>

<ol>
<li><p>Project -> Configuration -> Source Code Management -> Subversion -> Repo URL: svn://localhost/ServerMeter</p></li>
<li><p>Project -> Configuration -> Post-build Actions -> Publish Checkstyle analysis results: <em>*/codeReview</em>.xml;</p></li>
<li><p>Project -> Configuration -> Post-build Actions -> E-mail Notification: &hellip;</p></li>
</ol>


<h1>As part of ant build</h1>

<ol>
<li>add a target &ldquo;checkcode&rdquo; in build.xml:</li>
</ol>


<p> &lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
 <project name="checkstyleTest" basedir="./" default="checkcode">
   <taskdef resource="checkstyletask.properties" classpath="/opt/checkstyle/checkstyle-5.6-all.jar"/>
   <property name="build.dir" value="${basedir}/build" />
   <target name="init">
     <delete dir="${build.dir}"/>
     <mkdir dir="${build.dir}"/>
   </target>
   <target name="checkcode" depends="init">
     <checkstyle config="/opt/checkstyle/tyRules.xml">
       <fileset dir="src" includes="**/*.java"/>
       <formatter type="xml" toFile="build/codeReviewResult.xml"/>
     </checkstyle>
   </target>
 </project></p>

<ol>
<li>Jenkins setup: Project -> Configuration -> Build -> Invoke Ant -> Targets: checkcode;</li>
</ol>


<p>PROS: simple config, with the power of ant;</p>

<p>CONS: build scripts of every project have to be modified, which violates the DRY principle;</p>

<h1>As an independent step in build process</h1>

<p>Jenkins setup: Project -> Configuration -> Build -> Execute shell:</p>

<p> rm -rf build
 mkdir build
 find . -depth -name .svn -exec rm -fr {} \;
 java -jar /opt/checkstyle/checkstyle-5.6-all.jar -c /opt/checkstyle/tyRules.xml -r src -f xml -o build/codeReviewResult.xml</p>

<p>PROS: no need to modify any thing in project, do one thing in only ONE place;</p>

<p>CONS: there are some dirty work in shell script, for example you have to delete and create build folder manually (otherwise checkstyle report can not be created correctly), and remove all .svn folder recursively (otherwise checkstyle will find some duplicate codes in normal code file and backup file in .svn folder).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bvt脚本运行环境设置]]></title>
    <link href="http://leetschau.github.io/blog/2011/05/10/175806/"/>
    <updated>2011-05-10T17:58:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/05/10/175806</id>
    <content type="html"><![CDATA[<p>tools目录：来自svn；</p>

<p>log目录以及下面的bvt.log文件：自动生成；</p>
]]></content>
  </entry>
  
</feed>
