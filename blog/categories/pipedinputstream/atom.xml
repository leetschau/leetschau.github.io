<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pipedinputstream | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/pipedinputstream/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-06-04T20:48:19+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java的管道流]]></title>
    <link href="http://leetschau.github.io/blog/2012/04/09/161610/"/>
    <updated>2012-04-09T16:16:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2012/04/09/161610</id>
    <content type="html"><![CDATA[<p>java.io包里有两个关于管道传输的类，PipedInputStream和PipedOutputStream，它们可以看做是一个传输管道的两端，PipedOutputStream是发送端（入口），用write和flush方法向管道中“推”数据，PipedInputStream是接收端（出口），用read方法接收数据，构造这样一个管道的通常做法是：</p>

<p> PipedOutputStream out = new PipedOutputStream();</p>

<p> PipedInputStream in = new PipedInputStream(out);</p>

<p>站在管道的角度看，将入口叫做"output"是一件很诡异的事，因此我估计java的开发者是站在管道使用者的角度命名，向管道里送数据是output，从管道里读数据是input吧。</p>

<p>如果这个管道只传输字符，还可以用java.io里的PipedReader和PipedWriter，使用方法与上述stream类相似。</p>

<p>apache sshd的ClientChannel类的setIn方法需要一个InputStream参数，而PipedInputStream是InputStream的子类，这样我们就可以用下面的方法向SshClient发送数据了：</p>

<p> SshClient client = SshClient.setUpDefaultClient();</p>

<p> client.start();</p>

<p> ClientSession session = client.connect(&ldquo;10.0.2.47&rdquo;, 22).await().getSession();</p>

<p> session.authPassword(&ldquo;user&rdquo;, &ldquo;password&rdquo;).await().isSuccess();</p>

<p> ClientChannel channel = session.createChannel(ClientChannel.CHANNEL_SHELL);</p>

<p> // 到这里ssh client完成了登录动作</p>

<p> PipedOutputStream out = new PipedOutputStream();</p>

<p> channel.setIn(new PipedInputStream(out));</p>

<p> // 这两句建立了一个 pipedOut -> pipedIn -> ssh client的数据管道，下面就可以用write方法给client发数据了</p>

<p> ByteArrayOutputStream output = new ByteArrayOutputStream();</p>

<p> ByteArrayOutputStream err = new ByteArrayOutputStream();</p>

<p> channel.setOut(output);</p>

<p> channel.setErr(err);</p>

<p> channel.open();</p>

<p> // 到此连接通道已打开，可以接收指令了</p>

<p> pipedIn.write(&ldquo;pwd\n&rdquo;.getBytes());</p>

<p> pipedIn.flush();</p>

<p> // 向client发送指令</p>

<p> String res = output.toString(&ldquo;UTF-8&rdquo;);</p>

<p> // 获取client收到的报文</p>

<p> output.reset();</p>

<p> // 清空接收缓存</p>
]]></content>
  </entry>
  
</feed>
