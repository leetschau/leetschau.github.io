<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 异常 | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/yi-chang/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-05T15:23:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ivy异常处理经验总结]]></title>
    <link href="http://leetschau.github.io/blog/2010/12/02/141308/"/>
    <updated>2010-12-02T14:13:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/12/02/141308</id>
    <content type="html"><![CDATA[<p>问题描述 ：找不到配置（2010年12月2日出现并解决）
 GAPI依赖GODU，在GODU的ivy.xml里添加了新的configuration，名为gapi_runtime，然后重新publish到产品仓库中，然后让GAPI依赖GODU的 gapi_runtime，即：
 <dependency org="com.boco.ty" name="godu-common" rev="2.1A1" conf="master->gapi_runtime" transitive=&ldquo;true&rdquo;/>
 ivy解析时报“找不到配置：gapi_runtime”错误，这是由于GODU增加新的配置后，虽然更新的产品仓库，但本地的缓存却并未更新，解析时仍然使用旧的ivy文件，自然就找不到配置了。
 解决方法  ：删除本地的缓存（如没有专门设置，WinXP系统下的路径为：c:\Documents and Settings\${UserName}.ivy2\cache）
 问题描述： 开发项目在本机Eclipse环境中能够编译通过，但BVT脚本编译时出现错误（2011-8-1）。
  解决方法  ：通过分析编译错误一般可以确定是否由于缓存没有更新引起的（比如错误是由于使用了之前的老接口引起的），如果怀疑是缓存没有更新，可以手工删除ivy的cache文件夹，再重新编译，如果这时没有错误，就可以确定是缓存没有更新引起的了，更根本的解决方法是设置changing参数为true：</p>

<p>  <dependency org="com.boco.ty" name="gapi" rev="alpha" conf="compile->master" changing=&ldquo;true&rdquo; /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[客户端socket连接的106号错误分析]]></title>
    <link href="http://leetschau.github.io/blog/2010/11/18/140732/"/>
    <updated>2010-11-18T14:07:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/11/18/140732</id>
    <content type="html"><![CDATA[<p>Python的socket模块提供了基于socket的网络连接方法，分为server端和client端，在python2.6中，使用server需依次调用下面的方法：</p>

<p>socket(), bind(), listen(), accept()，其中socket方法是构造函数，可多次调用accept()方法与多个client通信。使用client依次调用 socket()和connect()方法即可。</p>

<p>如果一个client已经用connect()或者connect_ex()方法连接了，在没有close()的情况下再次 connect()或者connect_ex()，则会出现106号错误： Python: Socket Error 106: &lsquo;Transport endpoint is already connected'，connect()方法抛出106号异常，而connect_ex()方法返回值为106（连接成功的返回值为0），解决方法是每次连接时创建一个新的socket，或者先调用close()关闭后再连接。</p>

<p>用connect_ex((host, port))探测端口是否绑定不是很可靠，除了上述106错误外，还有111,即连接被拒绝，建议使用"nc -z host port"代替，不过需要操作系统有netcat，支持nc指令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log4j配置文件编码不同可能导致log4j日志运行异常]]></title>
    <link href="http://leetschau.github.io/blog/2010/08/12/143709/"/>
    <updated>2010-08-12T14:37:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2010/08/12/143709</id>
    <content type="html"><![CDATA[<p>有时即使log4j的配置文件log4j.properties放在了正确的位置上，内容也没有错误，但运行程序时总报appender异常，无法生成日志文件。可能的原因是配置文件的编码与项目设定的编码不一致（例如项目设置的编码是GBK，配置文件的编码使用UTF-8），导致读配置文件失败。解决的办法是将配置文件转换为项目设置的编码格式，为保证转换成功，文件中（包括注释部分）最好不要使用中文。</p>
]]></content>
  </entry>
  
</feed>
