<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Curry | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/curry/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming in Ruby 1.9]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/09/175225/"/>
    <updated>2013-12-09T17:52:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/09/175225</id>
    <content type="html"><![CDATA[<ul>
<li><p>Blocks are just a special syntactic sugar in Ruby to create Procs.</p></li>
<li><p>Lambdas are really just Procs, but with two important differences:</p></li>
<li><p>Lambdas check the arguments they receive, just like methods. Procs do not. This means if you pass only one argument to a Lambda that takes two arguments, youâ€™ll get an ArgumentError. If you do the same to a Proc, it will just blindly accept the ones you did give, and set the rest of the arguments to nil;</p></li>
<li><p>Any return statements used in a Proc will also return from the method that called that Proc. Lambdas, on the other hand, will not. This means you can call a Lambda, get its return value, and process it, all within the one method;</p></li>
<li><p>Currying is the ability to take a function that accepts n parameters and generate from it one of more functions with some parameter values already filled in. In RUby 1.9, you create a curry-able proc by calling the curry method on it. If you subsequently call this curried proc with fewer parameters than it expects, it will not execute. Instead, it returns a new proc with those parameters already bound;</p></li>
</ul>


<p>Ref:</p>

<p><a href="http://www.sitepoint.com/functional-programming-techniques-with-ruby-part-i/">Functional Programming Techniques With Ruby: Part I, II and III</a></p>

<p><a href="http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html">Fun with Procs in Ruby 1.9</a></p>

<p><a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">Proc in Ruby 1.9.3 Documentation</a></p>
]]></content>
  </entry>
  
</feed>
