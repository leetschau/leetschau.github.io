<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-01-04T11:42:13+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy Web Server on Linode]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/23/084146/"/>
    <updated>2014-12-23T08:41:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/23/084146</id>
    <content type="html"><![CDATA[<h1>Setup Virtual Host</h1>

<p>Buy a Linode instance on <a href="https://www.linode.com/">linode</a>. Note its IP address on the home page in your user account.
Install a Linux system and <a href="https://www.linode.com/docs/security/securing-your-server/">secure it</a>.</p>

<p>Ref: <a href="https://www.linode.com/docs/getting-started">Getting Started</a> for instructions.</p>

<h1>Connect domain name and IP address</h1>

<p>Here we link multiple Domain names to the same IP address.
Then direct different domain requests to its corresponding port using nginx.</p>

<p>First register (purchase) a domain name, if you haven’t already.
Here I used niufairs.com and &ldquo;niufairs.cn purchased on <a href="http://www.net.cn/">net.cn</a>.</p>

<p>Set IP address in &ldquo;进入会员中心 -> 我的域名 -> niufairs.com -> 域名解析 -> 把域名指向我的网站 -> 新手设置引导 -> 把域名指向我的网站-添加IP地址&rdquo;,
add your Linode instance IP address as &ldquo;A&rdquo; record,
Then wait up to 24 hours for the changes to take effect.
I waited about 30 minutes to take effect.</p>

<p>Next set your domain name to use Linode’s name servers (&ldquo;ns1.linode.com&rdquo; to &ldquo;ns5.linode.com&rdquo;)
in &ldquo;我的域名 -> niufairs.com -> 基本管理 -> DNS修改/创建 -> DNS服务器 -> 修改域名DNS&rdquo;.</p>

<p>On Linode, come to &ldquo;DNS Manager&rdquo; in Linode dashboard, click &ldquo;Add a domain zone&rdquo;.
Set &ldquo;Domain&rdquo; as your purchased domain name, for example, &ldquo;niufairs.com&rdquo;.
Set &ldquo;SOA Email&rdquo; the email address of the administrator, for example, &ldquo;<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#108;&#99;&#x40;&#x31;&#50;&#54;&#46;&#99;&#x6f;&#109;">&#108;&#x63;&#x40;&#x31;&#x32;&#54;&#x2e;&#99;&#111;&#x6d;</a>&rdquo;.
Then click &ldquo;Add a Master Zone&rdquo;.</p>

<h2>Setting Reverse DNS</h2>

<p>On linode instance dashboard -> Remote access -> Reverse DNS, enter &ldquo;niufairs.com&rdquo;, and press &ldquo;Look up&rdquo;.</p>

<p>Ref: <a href="https://www.linode.com/docs/websites/hosting-a-website">Hosting a website</a>.</p>

<h1>Config Relationship betwwen domain and port</h1>

<p>Fist install nginx.</p>

<p>Edit /etc/nginx/nginx.conf as follows:</p>

<pre><code>events {
  worker_connections  1024;
}

http {
  server {
    server_name niufairs.cn;

    location / {
      proxy_pass http://localhost:3000/;
    }
  }

  server {
    server_name niufairs.com;

    location / {
      proxy_pass http://localhost:4000/;
    }
  }

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;
}
</code></pre>

<p>Test if this conf is right: <code>nginx -t</code>;</p>

<p>If test ok, reload conf: <code>nginx -s reload</code>;</p>

<p>Now start 2 meteor app on port 3000 and 4000, and you can use niufairs.cn and niufairs.com to visit them respectively.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/15678224/nginx-proxy-several-domains-to-different-ports">Nginx proxy several domains to different ports</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Spark Job Runner in Web Browser]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/27/111204/"/>
    <updated>2014-10-27T11:12:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/27/111204</id>
    <content type="html"><![CDATA[<p>I wrote a Spark script. Now I need adding a web interface for it. Thus users can input parameters of the script in web browser, run the script,
and see the calculation results in browser.</p>

<h1>JEE</h1>

<p>Download apache tomcat 7.0.56 core (apache-tomcat-7.0.56.tar.gz) and extract it to ~/apps;</p>

<p>Download Eclipse IDE for Java EE Developers (eclipse-jee-luna-SR1-linux-gtk-x86_64.tar.gz) and extract it to ~/apps;</p>

<p>Start Eclipse IDE for Java EE Developers, build a new Web project: [File -> New -> Web -> Dynamic Web Project];</p>

<p>Specify &ldquo;Project&rdquo; as &ldquo;SparkRunner&rdquo;, &ldquo;Target runtime&rdquo; as &ldquo;Apache Tomcat v7.0&rdquo;.
If the default runtime has not existed yet, build a new one: Type of runtime environment: Apache -> Apache Tomcat v7.0).
Check &ldquo;Generate web.xml deployment descriptor&rdquo; at the last step and click &ldquo;Finish&rdquo;.</p>

<p>Add the following texts into &ldquo;web-app&rdquo; of web.xml under $PROJECT_HOME/WebContent/WEB-INF:</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.boco.dm.JobRunner&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;JobRunner&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/JobRunner&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>Ref:</p>

<p><a href="https://cloud.google.com/appengine/docs/java/config/webxml#About_Deployment_Descriptors">The Deployment Descriptor: web.xml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Web Development]]></title>
    <link href="http://leetschau.github.io/blog/2014/10/02/005047/"/>
    <updated>2014-10-02T00:50:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/10/02/005047</id>
    <content type="html"><![CDATA[<h1>Paredit</h1>

<p><a href="http://www.emacswiki.org/ParEdit">ParEdit</a>, a.k.a. &ldquo;structured editing&rdquo;, is some special editing operations for S-expression coding, like Lisp or Clojure. Mainstream IDEs all have support for paredit.</p>

<h2>Eclipse</h2>

<p>Install clojure IDE plugin <a href="https://code.google.com/p/counterclockwise/">counterclockwise</a>. It&rsquo;s default shortcuts is listed in <a href="http://doc.ccw-ide.org/keyboard-shortcuts.html">Editor Keyboard Shortcuts</a>;</p>

<h2>Cursive</h2>

<ul>
<li>Cursive: install IntelliJ and Cursive plugin, see default shortcuts definition at <a href="https://cursiveclojure.com/userguide/paredit.html">Structural editing</a>;</li>
</ul>


<h1>REPL for Ring Application</h1>

<p>Say the application name is &ldquo;guestbook&rdquo; (based on &ldquo;Web Development with Clojure&rdquo; by Dmitri Sotnikov).</p>

<h2>Eclipse</h2>

<p>The counterclockwise plugin need to be installed beforehand.</p>

<ol>
<li><p>Build a new &ldquo;Clojure Project&rdquo; with name &ldquo;guestbook&rdquo;, set &ldquo;Leiningen template&rdquo; as &ldquo;compojure-app&rdquo;;</p></li>
<li><p>Open guestbook.routes.home.clj, and run menu item [Clojure -> Load file in REPL];</p></li>
<li><p>In REPL window (the window title is &ldquo;REPL @ nrepl://127.0.0.1:xxxx(guestbook.routes.home)&rdquo;, run (use &lsquo;guestbook.repl) and (start-server), you can use Ctrl+Up/Down to navigate in command history;</p></li>
<li><p>See homepage with url &ldquo;<a href="http://localhost:8080">http://localhost:8080</a>&rdquo;;</p></li>
<li><p>Modify codes, refresh web page to see the result. If this doesn&rsquo;t work, close the REPL window and restart server;</p></li>
</ol>


<h2>Cursive</h2>

<ol>
<li><p>In terminal: <code>lein new compojure-app mybook</code>;</p></li>
<li><p>In Cursive, import &ldquo;mybook&rdquo; via &ldquo;Import Project&rdquo;, choose &ldquo;Leiningen&rdquo; for &ldquo;Import project from external model&rdquo;;</p></li>
<li><p>Open &ldquo;Terminal&rdquo; window in Cursive, run <code>lein repl</code>, (use &lsquo;guestbook.repl) and (start-server);</p></li>
<li><p>See homepage with url &ldquo;<a href="http://localhost:8080">http://localhost:8080</a>&rdquo;;</p></li>
<li><p>Modify codes, refresh web page to see the result. If this doesn&rsquo;t work, restart server in &ldquo;Terminal&rdquo; window;</p></li>
</ol>


<p>Note: I&rsquo;ve tried <a href="http://www.lighttable.com/">Light Table</a>. It can open the guestbook project created by leiningen, but can&rsquo;t connect to it. So I give it up, and use Eclipse instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Web Server With Apache and Passenger]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/26/143445/"/>
    <updated>2014-03-26T14:34:45+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/26/143445</id>
    <content type="html"><![CDATA[<p>Follow the instructions at <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html">2.6. Generic installation, upgrade and downgrade method: via tarball of Phusion Passenger users guide, Apache version</a></p>

<p>Build web server on a precise64 Ubuntu virtual machine with vagrant. First download the tar file from this website, then create a vagrant file:</p>

<pre><code>$ pwd
/home/chad/docs/passenger

$ ls
passenger-4.0.40.tar.gz  Vagrantfile

$ cat Vagrantfile
# -*- mode: ruby -*-                                                            
# vi: set ft=ruby :                                                             

$script = &lt;&lt;EOF
echo 'Acquire::http::Proxy "http://10.21.3.31:8087";' &gt; /etc/apt/apt.conf
apt-get update
apt-get install rake
apt-get install libcurl4-openssl-dev
apt-get install apache2-mpm-worker
apt-get install apache2-threaded-dev
/usr/bin/gem install rack
apt-get install libapr1-dev
apt-get install libaprutil1-dev
mkdir /opt/passenger
cd /opt/passenger
tar zxvf /vagrant/passenger-4.0.40.tar.gz
#cd passenger-4.0.40
#./bin/passenger-install-apache2-module
EOF

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "precise64"

  config.vm.define "svr" do |server|
    server.vm.hostname = "www.httpserver.com"
    server.vm.provider :virtualbox do |vbox|
      vbox.customize ["modifyvm", :id, "--natnet1", "10.3/16"]
      vbox.customize ["modifyvm", :id, "--memory", 1000]
    end
    server.vm.network "forwarded_port", guest: 80, host: 8765
    config.vm.provision "shell", inline: $script
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Chinese Writing Environment Without Local IME on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/26/102908/"/>
    <updated>2014-02-26T10:29:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/26/102908</id>
    <content type="html"><![CDATA[<h1>Writing</h1>

<p>Writing Chinese on <a href="http://shurufa.baidu.com/online.html">Baidu IME online</a>.</p>

<h2>Auto-save</h2>

<p>Install parcellite and enable its &ldquo;copy on selection&rdquo; feature.
Now every time select all text in Baidu Web IM with Ctrl-a, the text is stored in system clipboard.</p>

<p>Save text in <a href="http://notepad.im">notepad.im</a> for temperary storage.</p>
]]></content>
  </entry>
  
</feed>
