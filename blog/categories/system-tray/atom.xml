<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: System Tray | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/system-tray/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cancel System Tray Auto-hide on Ubuntu 12.04]]></title>
    <link href="http://leetschau.github.io/blog/2013/05/22/150921/"/>
    <updated>2013-05-22T15:09:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/05/22/150921</id>
    <content type="html"><![CDATA[<p>gsettings set com.canonical.Unity.Panel systray-whitelist &ldquo;[&lsquo;all&rsquo;]&rdquo;</p>

<p>See <a href="http://blog.ubuntusoft.com/solve-the-ubuntu-unity-system-tray-does-not-display-images-that-are-part-of-the-program.html">http://blog.ubuntusoft.com/solve-the-ubuntu-unity-system-tray-does-not-display-images-that-are-part-of-the-program.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激活托盘区程序的ahk脚本]]></title>
    <link href="http://leetschau.github.io/blog/2011/02/21/162416/"/>
    <updated>2011-02-21T16:24:16+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/02/21/162416</id>
    <content type="html"><![CDATA[<p>下面的脚本实现了激活系统托盘区（system tray）Outlook程序的效果（Windows XP），第一行是不在托盘区出现一个autohotkey的图标，这样做的好处是显得比较酷，缺点是如果想中断这个脚本，就只能在任务管理器里关进程（Autohotkey.exe）了。第二行是运行脚本的快捷键（这里是Win键+“]”键），后面是脚本的具体内容，大体意思是首先用TrayIcons函数找到进程"OUTLOOK.EXE"的各种参数，然后用PostMessage方法向这个进程发指令，令其窗口显示出来，TrayIcons函数中涉及了很多Windows API，俺就不懂了，好用就行。</p>

<p>使用方法：首先要安装Autohotkey_L v1.0.92.02，将下面的代码保存为一个 UTF-8格式 编码的文本文件，扩展名为ahk，双击运行之。</p>

<h1>NoTrayIcon</h1>

<h1>]::</h1>

<p>DetectHiddenWindows, On</p>

<p>Info := TrayIcons(&ldquo;OUTLOOK.EXE&rdquo;) ; 激活Outlook，这个名字是任务管理器的“进程”里程序对应的进程名称</p>

<p>StringSplit, TrayInfo, Info,|</p>

<p>PostMessage, TrayInfo1, TrayInfo2, 0x0203,, ahk_id %TrayInfo3% ; 这句话实现了激活托盘区程序</p>

<p>return</p>

<p> ; Found and abused from</p>

<p> ; <a href="http://www.autohotkey.com/forum/topic17314.html">http://www.autohotkey.com/forum/topic17314.html</a></p>

<p> ; thx, Sean &hellip; GREAT WORK!</p>

<p>TrayIcons(sExeName = &ldquo;&rdquo;)</p>

<p>{</p>

<p> WinGet, pidTaskbar, PID, ahk_class Shell_TrayWnd</p>

<p> hProc := DllCall(&ldquo;OpenProcess&rdquo;, &ldquo;Uint&rdquo;, 0x38, &ldquo;int&rdquo;, 0, &ldquo;Uint&rdquo;, pidTaskbar)</p>

<p> pRB := DllCall(&ldquo;VirtualAllocEx&rdquo;, &ldquo;Uint&rdquo;, hProc, &ldquo;Uint&rdquo;, 0</p>

<pre><code>    , "Uint", 20, "Uint", 0x1000, "Uint", 0x4)
</code></pre>

<p> VarSetCapacity(btn, 20)</p>

<p> VarSetCapacity(nfo, 24)</p>

<p> VarSetCapacity(sTooltip, 128)</p>

<p> VarSetCapacity(wTooltip, 128 * 2)</p>

<p> SendMessage, 0x418, 0, 0, ToolbarWindow321, ahk_class Shell_TrayWnd</p>

<p> Loop, %ErrorLevel%</p>

<p> {</p>

<p> SendMessage, 0x417, A_Index - 1, pRB, ToolbarWindow321, ahk_class Shell_TrayWnd</p>

<p> DllCall(&ldquo;ReadProcessMemory&rdquo;, &ldquo;Uint&rdquo;, hProc, &ldquo;Uint&rdquo;, pRB, &ldquo;Uint&rdquo;, &amp;btn, &ldquo;Uint&rdquo;, 20, &ldquo;Uint&rdquo;, 0)</p>

<p> iBitmap := NumGet(btn, 0), idn := NumGet(btn, 4), Statyle := NumGet(btn, 8)</p>

<p> dwData := NumGet(btn,12), iString := NumGet(btn,16)</p>

<p> DllCall(&ldquo;ReadProcessMemory&rdquo;, &ldquo;Uint&rdquo;, hProc, &ldquo;Uint&rdquo;, dwData, &ldquo;Uint&rdquo;, &amp;nfo, &ldquo;Uint&rdquo;, 24, &ldquo;Uint&rdquo;, 0)</p>

<p> hWnd := NumGet(nfo, 0), uID := NumGet(nfo, 4)</p>

<p> nMsg := NumGet(nfo, 8)</p>

<p> WinGet, pid, PID, ahk_id %hWnd%</p>

<p> WinGet, sProcess, ProcessName, ahk_id %hWnd%</p>

<p> WinGetClass, sClass, ahk_id %hWnd%</p>

<p> If !sExeName || (sExeName = sProcess) || (sExeName = pid)</p>

<p> {</p>

<p>  DllCall(&ldquo;ReadProcessMemory&rdquo;, &ldquo;Uint&rdquo;, hProc, &ldquo;Uint&rdquo;, iString</p>

<pre><code>     , "Uint", &amp;wTooltip, "Uint", 128 * 2, "Uint", 0)
</code></pre>

<p>  DllCall(&ldquo;WideCharToMultiByte&rdquo;, &ldquo;Uint&rdquo;, 0, &ldquo;Uint&rdquo;, 0, &ldquo;str&rdquo;, wTooltip</p>

<pre><code>     , "int", -1, "str", sTooltip, "int", 128, "Uint", 0, "Uint", 0)
</code></pre>

<p>  sTrayIcons .= nMsg &ldquo;|&rdquo; uID &ldquo;|&rdquo; hWnd</p>

<p> }</p>

<p> }</p>

<p> DllCall(&ldquo;VirtualFreeEx&rdquo;, &ldquo;Uint&rdquo;, hProc, &ldquo;Uint&rdquo;, pRB, &ldquo;Uint&rdquo;, 0, &ldquo;Uint&rdquo;, 0x8000)</p>

<p> DllCall(&ldquo;CloseHandle&rdquo;, &ldquo;Uint&rdquo;, hProc)</p>

<p> Return sTrayIcons</p>

<p>}</p>
]]></content>
  </entry>
  
</feed>
