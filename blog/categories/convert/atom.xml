<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Convert | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/convert/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-09-25T20:12:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert MS Word File to PDF Files]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/30/181242/"/>
    <updated>2015-03-30T18:12:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/30/181242</id>
    <content type="html"><![CDATA[<p>On Ubuntu/Mint,
when we receive MS Word documents (.doc or .docx), convert it to pdf,
then open it with evince.</p>

<pre><code>sudo apt-get install unoconv
doc2pdf target.docx
</code></pre>

<p>doc2pdf save output pdf file into <same-name>.pdf by default.</p>

<p>Ref: <a href="http://askubuntu.com/questions/396825/convert-docx-to-pdf">Convert docx to PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a CVS Repo to SVN Repo]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/10/102817/"/>
    <updated>2015-03-10T10:28:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/10/102817</id>
    <content type="html"><![CDATA[<p>Download cvs2svn-2.4.0.tar.gz from <a href="http://cvs2svn.tigris.org/">cvs2svn</a> and extract it.
We get a folder named &ldquo;cvs2svn-2.4.0&rdquo;.</p>

<p>The cvs repo to be converted is at $HOME/Desktop/goat.
There&rsquo;s a &ldquo;CVSROOT&rdquo; and &ldquo;dev/GOAT&rdquo; folder in it.</p>

<p>Change CWD to cvs2svn-2.4.0 and run <code>./cvs2svn --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/goatsvn ~/Desktop/goat</code>.</p>

<p>After convertion, you get your subversion repo at $HOME/Desktop/goatsvn.</p>

<p>Check it with <code>svn ls file://$HOME/Desktop/goatsvn</code>, and <code>svn log HEAD file://$HOME/Desktop/goatsvn</code>
and <code>svn cat file://$HOME/Desktop/goatsvn/...</code>.</p>

<p>If you encouter this error: &ldquo;ERROR: A CVS repository cannot contain both repo/path/file.txt,v and repo/path/Attic/file.txt,v&rdquo;:
<code>./cvs2svn --retain-conflicting-attic-files --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/dev2SVN ~/Desktop/ARENA/dev2</code></p>

<p>Next add this repo to a existing repository:</p>

<p>Ref:</p>

<p>Google for &ldquo;subversion format 5&rdquo;.</p>

<p><a href="http://serverfault.com/questions/277441/difference-between-the-format-and-db-format-files-in-a-subversion-repository">http://serverfault.com/questions/277441/difference-between-the-format-and-db-format-files-in-a-subversion-repository</a></p>

<p><a href="http://stackoverflow.com/questions/3420741/cvs-comma-v-files-in-attic-and-directory">http://stackoverflow.com/questions/3420741/cvs-comma-v-files-in-attic-and-directory</a></p>

<p><a href="http://cvs2svn.tigris.org/faq.html#atticprob">http://cvs2svn.tigris.org/faq.html#atticprob</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将中文字符串转换为拼音首字母串]]></title>
    <link href="http://leetschau.github.io/blog/2014/12/31/101055/"/>
    <updated>2014-12-31T10:10:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/12/31/101055</id>
    <content type="html"><![CDATA[<p>下面的Python脚本将任意汉字和英文、数字混合字符串转换为拼音首字母组成的字符串，
注意：有些汉字不能查找到首字母，例如"深圳东莞"的"圳"和"莞"两个字，原因不明。
需要在vi中用"/\&lt;[A-Z]>搜索这种情况。</p>

<p>实现过程是：首先尝试用unicode, utf8和gbk解码字符串，然后用GBK编码字符串，利用GBK汉字是按拼音顺序编码的原理查出其首字母。</p>

<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

def get_word_initial(inp):
    if isinstance(inp, unicode):
        unicode_str = inp
    else:
        try:
            unicode_str = inp.decode('utf8')
        except:
            try:
                unicode_str = inp.decode('gbk')
            except:
                print 'unknown coding'
                return

    init_list = [get_char_initial(i) for i in unicode_str]
    return "".join(init_list)

def get_char_initial(unicode1):
    gbkStr = unicode1.encode('gbk')
    try:
        ord(gbkStr)
        return gbkStr
    except:
        asc = ord(gbkStr[0]) * 256 + ord(gbkStr[1]) - 65536
        if asc &gt;= -20319 and asc &lt;= -20284:
            return 'A'
        if asc &gt;= -20283 and asc &lt;= -19776:
            return 'B'
        if asc &gt;= -19775 and asc &lt;= -19219:
            return 'C'
        if asc &gt;= -19218 and asc &lt;= -18711:
            return 'D'
        if asc &gt;= -18710 and asc &lt;= -18527:
            return 'E'
        if asc &gt;= -18526 and asc &lt;= -18240:
            return 'F'
        if asc &gt;= -18239 and asc &lt;= -17923:
            return 'G'
        if asc &gt;= -17922 and asc &lt;= -17418:
            return 'H'
        if asc &gt;= -17417 and asc &lt;= -16475:
            return 'J'
        if asc &gt;= -16474 and asc &lt;= -16213:
            return 'K'
        if asc &gt;= -16212 and asc &lt;= -15641:
            return 'L'
        if asc &gt;= -15640 and asc &lt;= -15166:
            return 'M'
        if asc &gt;= -15165 and asc &lt;= -14923:
            return 'N'
        if asc &gt;= -14922 and asc &lt;= -14915:
            return 'O'
        if asc &gt;= -14914 and asc &lt;= -14631:
            return 'P'
        if asc &gt;= -14630 and asc &lt;= -14150:
            return 'Q'
        if asc &gt;= -14149 and asc &lt;= -14091:
            return 'R'
        if asc &gt;= -14090 and asc &lt;= -13119:
            return 'S'
        if asc &gt;= -13118 and asc &lt;= -12839:
            return 'T'
        if asc &gt;= -12838 and asc &lt;= -12557:
            return 'W'
        if asc &gt;= -12556 and asc &lt;= -11848:
            return 'X'
        if asc &gt;= -11847 and asc &lt;= -11056:
            return 'Y'
        if asc &gt;= -11055 and asc &lt;= -10247:
            return 'Z'
        return ''

if __name__ == "__main__":
    str_input='广州火车站A2c'
    print(get_word_initial(str_input))
</code></pre>

<p>下面是一个完整的使用场景，利用上面的代码为小区的地理位置表添加ID字段。
首先将上面的代码保存在chnInit.py中，然后相同目录下创建一个addID.py文件：</p>

<pre><code>import chnInit
import sys

target = sys.argv[1]
inclID = sys.argv[2]
with open(target, 'r') as src:
    with open(inclID, 'w') as dst:
        for content in src:
            line = content.strip()
            cgi = line.split(' ,')[0]
            node = line.split(' ,')[1].split(' ')[0]
            city = line.split(' ,')[1].split(' ')[1]
            nodeID = chnInit.get_word_initial(node)
            cityID = chnInit.get_word_initial(city)
            dst.write(cgi + ' ,' + city + ' ' + cityID + ' ' + node + ' ' + nodeID + '\n')
</code></pre>

<p>相同目录下保存输入文件input.csv，然后运行脚本：</p>

<pre><code>$ head input.csv
460010973309433 ,白云国际机场 广州
...

$ python addID.py input.csv loc_map.csv
$ head loc_map.csv
460010973309433 ,广州 GZ 白云国际机场 BYGJJC
...
</code></pre>

<p>根据Python文档7.2.1节："Methods of File Objects"中的描述：</p>

<blockquote><p>For reading lines from a file, you can loop over the file object.
This is memory efficient, fast, and leads to simple code:</p></blockquote>

<pre><code>with open(target, 'r') as f:
    for line in f:
        ...
</code></pre>

<p>这种方式比较节省内存，适于处理大文件。
当处理小文件时，可以用下面的方法将完整内容保存在一个变量中：</p>

<pre><code>with open('workfile', 'r') as f:
    read_data = f.read()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Markdown Files to PDF Files on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/06/30/162439/"/>
    <updated>2014-06-30T16:24:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/06/30/162439</id>
    <content type="html"><![CDATA[<p>I want convert my resume file (markdown files) to pdf files. On Linux system, I use pandoc to convert md files to html:</p>

<pre><code># apt-get install pandoc
$ pandoc myresume.md -f markdown -t html -s -o resume.html
</code></pre>

<p>or simply &ldquo;pandoc myresume.md -s -o resume.html&rdquo;, the &ldquo;-s&rdquo; option is necessary, or Chinese characters will be massed up.</p>

<p>The personal information section (name, address, email, mobiles, etc) is left-aligned, while they should be centered. However there isn&rsquo;t &ldquo;centering&rdquo; format in markdown, so I have to add this format  manually in created html files:</p>

<pre><code>$ vi resume.html
// add "&lt;DIV ALIGN=CENTER&gt;" before the centering section
// add "&lt;/DIV&gt;" after the centering section
</code></pre>

<p>Then convert the html files to pdf, there several ways to achieve this:</p>

<h1>MS Office Word</h1>

<p>Copy contents of html file generated last step, paste it into a blank word file, centering personal information, modify margin, font (consolas is good) and other layout elements, such as adding page break before section title, etc.
Then save it as PDF format (if using Word 2007, you have to install the pdf plugin of MS Word).</p>

<h1>wkhtmltopdf</h1>

<p>The wkhtmltopdf can&rsquo;t convert hyperlinks in html to pdf files properly. So this is not a valid options.</p>

<h1>Texlive for Pandoc</h1>

<pre><code># apt-get install texlive   // this package maybe is huge, 281MB to download
# apt-get install texlive-xetex lmodern etoolbox
$ pandoc MyResume.md -o Resume.pdf --latex-engine=xelatex -V mainfont='WenQuanYi Micro Hei'
</code></pre>

<p>Get all installed fonts with <code>fc-list</code> on Linux Mint.</p>

<p>Note1: If there no Unicode characters (such as Chinese characters) in the markdown file, use &lsquo;DejaVu Sans Mono&rsquo; instead of WenQuanYi, much better than the latter.</p>

<p>Note2: <code>pandoc myresume.md -s -o test1.pdf</code> met &ldquo;Error producing PDF from TeX source.  ! Package inputenc Error&hellip;&rdquo; on Linux Mint 17, i3wm.</p>

<p>Note3: The page margin of the default pdf file is too large. Don&rsquo;t know how to set margin yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert MS Visual Studio C++ Project to Makefile]]></title>
    <link href="http://leetschau.github.io/blog/2014/05/21/090511/"/>
    <updated>2014-05-21T09:05:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/05/21/090511</id>
    <content type="html"><![CDATA[<p>This morning I converted a Microsoft Visual Studio 2008 C++ solution to a Linux makefile with <a href="http://code.google.com/p/make-it-so/">MakeItSo</a>. The process:</p>

<ol>
<li><p>On a Windows host with VS2008 installed, download MakeItSo_1.2.2.zip from its website, unzip it;</p></li>
<li><p>In the unzipped folder, run <code>MakeItSo.exe -file=c:\docs\myproject\myproj.sln</code>;</p></li>
<li><p>In the root folder of the solution, a Makefile is generated. A <project-name>.makefile is generated at each project folder (where the .vcproj file resides).</p></li>
<li><p>Copy the solution folder to a Linux host with &ldquo;make&rdquo; installed (verified with <code>make --version</code>), run <code>make</code> to build the whole solution or <code>make &lt;project-name&gt;</code> to build a specific project.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<p>Note: Another coverting tool <a href="http://www.codeproject.com/Articles/28908/Tool-for-Converting-VC-Project-to-Linux-Makef">sln2mak</a> is also tried this morning, but failed.</p>
]]></content>
  </entry>
  
</feed>
