<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scheduledexecutorservice | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/scheduledexecutorservice/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-04T11:47:14+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于ScheduledExecutorService的并发定时任务处理能力测试]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/17/111523/"/>
    <updated>2013-04-17T11:15:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/17/111523</id>
    <content type="html"><![CDATA[<h1>测试代码</h1>

<h2>定时器类</h2>

<p> package business.util;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import transfer.IUserParser;
 public class MyTimer {
  private static ScheduledExecutorService ses = Executors
    .newSingleThreadScheduledExecutor();</p>

<p>   // .newScheduledThreadPool(10);
  private MyTimer() {
  }
  /<strong>
   * 设置某一parser正在执行脚本的超时时间
   *
   * @param parser
   *   进行超时控制的解析器
   * @param timeout
   *   超时时间，单位：秒
   * @return
   */
  public static ScheduledFuture&lt;?> set(IUserParser parser, int timeout) {
   CloseRutine routine = new CloseRutine(parser);
   ScheduledFuture&lt;?> job = ses.schedule(routine, timeout,
     TimeUnit.SECONDS);
   return job;
  }
  /</strong>
   * 清除计时器
   *
   * @param unit
   * @return
   <em>/
  public static boolean cancel(ScheduledFuture&lt;?> job) {
   return job.cancel(true);
  }
  /**
   * 关闭此计时器（进程）
   </em>/
  public static void shutdown() {
   ses.shutdown();
  }
 }
 class CloseRutine implements Runnable {
  private final IUserParser parser;
  CloseRutine(IUserParser parser) {
   this.parser = parser;
  }
  @Override
  public void run() {
   parser.closePeer();
  }
 }</p>

<h1>#</h1>
]]></content>
  </entry>
  
</feed>
