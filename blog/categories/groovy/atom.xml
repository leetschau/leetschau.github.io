<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-08-27T13:25:34+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy Develop Environment Based on GVM]]></title>
    <link href="http://leetschau.github.io/blog/2014/04/03/175002/"/>
    <updated>2014-04-03T17:50:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/04/03/175002</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<pre><code>yum install -y java-1.7.0-openjdk-devel
curl -s get.gvmtool.net|bash
source "/root/.gvm/bin/gvm-init.sh"
gvm i groovy 2.2.1
</code></pre>

<h1>Usage</h1>

<pre><code>groovysh
groovy hw.groovy
</code></pre>

<p>All files and installed components are in folder ~/.gvm. So simply remove this folder for uninstallation of gvm.</p>

<p>gvm is portable, so if you install gvm as root, just copy .gvm folder to $HOME, chown, then <code>gvm c</code> to show the current groovy version. If it&rsquo;s not what you want, <code>gvm use groovy 2.2.1</code> to update it.</p>

<p>Install gvm to another host, first copy .gvm folder, then add &ldquo;source ~/.gvm/bin/gvm-init.sh&rdquo; into .bashrc(or .zshrc), then check and setup in new host as above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access Java API in Groovy Script]]></title>
    <link href="http://leetschau.github.io/blog/2014/02/19/154730/"/>
    <updated>2014-02-19T15:47:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/02/19/154730</id>
    <content type="html"><![CDATA[<p>$ cat Hello.java
package test;
public class Hello {
  public int myadd(int x, int y) {
      return 10 * x + y;
  }
}</p>

<p>$ cat myapp.groovy
import test.Hello
def hello = new Hello()
println hello.myadd(13, 5)</p>

<p>$ javac Hello.java
$ mkdir test;mv Hello.class test
$ tree
.
├── groovy-all-2.2.1.jar
├── Hello.java
├── myapp.groovy
└── test
    └── Hello.class</p>

<p>$ java -cp .:groovy-all-2.2.1.jar groovy.ui.GroovyMain myapp.groovy
135</p>

<p>Note:</p>

<ol>
<li><p>You can&rsquo;t use groovy-2.2.1.jar here, or you will get a NoClassDefFoundError;</p></li>
<li><p>If your groovy script don&rsquo;t access other Java class, you can simply run &ldquo;java -jar groovy-all-2.2.1.jar myapp.groovy&rdquo;.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Groovy Codes Instead of Java]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/09/164727/"/>
    <updated>2014-01-09T16:47:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/09/164727</id>
    <content type="html"><![CDATA[<p>Writing Java codes in terminal is a pain for tons of boilerplate. But sometimes you have to. So we can write groovy instead.</p>

<p>Origin Java codes (Convert.java):</p>

<pre><code>import java.io.BufferedReader; 
import java.io.FileReader; 
import java.io.IOException; 
import org.apache.commons.lang3.StringEscapeUtils; 
public class Convert { 
    public static void main(String[] args) throws IOException { 
        BufferedReader reader = new BufferedReader(new FileReader("target")); 
        String line = reader.readLine(); 
        System.out.println("file content: "+line); 
        String out = StringEscapeUtils.unescapeJava(line); 
        System.out.println("from string to char: " + out); 
        String out2 = StringEscapeUtils.escapeJava(out); 
        System.out.println("from char to string : " + out2); 
    } 
} 
</code></pre>

<p>$ javac -cp commons-lang3-3.2.1.jar:. Convert.java</p>

<p>$ java -cp commons-lang3-3.2.1.jar:. Convert</p>

<p>Corresponding Groovy codes (convert.groovy):</p>

<pre><code>import org.apache.commons.lang3.StringEscapeUtils 
def reader = new BufferedReader(new FileReader("target")) 
def line = reader.readLine() 
println "file content: $line" 
def out = StringEscapeUtils.unescapeJava(line) 
println "from string to char: $out" 
def out2 = StringEscapeUtils.escapeJava(out) 
println "from char to string: $out2" 
</code></pre>

<p>Run it: groovy -cp commons-lang3-3.2.1.jar convert.groovy</p>

<p>Key points to writing groovy codes:</p>

<ol>
<li><p>Dynamic type but with &ldquo;def&rdquo; (see &ldquo;<a href="http://stackoverflow.com/questions/184002/groovy-whats-the-purpose-of-def-in-def-x-0">http://stackoverflow.com/questions/184002/groovy-whats-the-purpose-of-def-in-def-x-0</a>&rdquo; for its reason);</p></li>
<li><p>No need to import Java built-in library;</p></li>
<li><p>No need to take care of the exceptions;</p></li>
<li><p>semi-colon at the end of line is optional;</p></li>
<li><p>Use &ldquo;println&rdquo; instead of &ldquo;System.out.println&hellip;&rdquo;;</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/764416/why-would-one-use-groovy-over-java">http://stackoverflow.com/questions/764416/why-would-one-use-groovy-over-java</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Sonarqube Data via Web API in Groovy]]></title>
    <link href="http://leetschau.github.io/blog/2013/12/04/100446/"/>
    <updated>2013-12-04T10:04:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/12/04/100446</id>
    <content type="html"><![CDATA[<h1>Shell</h1>

<h2>getdata.groovy</h2>

<pre><code>url = "http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes"

addr = url.toURL() 
conn= addr.openConnection() 
status = conn.getResponseCode() 
reader = new BufferedReader(new InputStreamReader(conn.getInputStream())) 
datastr = reader.readLine()

import groovy.json.JsonSlurper

slurper = new JsonSlurper()

data = slurper.parseText(datastr)

msr = data[0].msr.frmt_val[0]
</code></pre>

<h2>Run Shell Script</h2>

<ol>
<li><p>start shell: &ldquo;groovysh&rdquo;</p></li>
<li><p>load script file: &ldquo;. getdata.groovy&rdquo;;</p></li>
<li><p>all variables in script file can be used in shell; evaluate variable value by its name directly;</p></li>
<li><p>reload file: &ldquo;purge all&rdquo; then &ldquo;. getdata.groovy&rdquo;;</p></li>
</ol>


<h1>Script</h1>

<h2>getdata_scpt.groovy</h2>

<pre><code>def url = "http://10.0.2.74:9000/api/resources?resource=ESB:com.boco.esb.analysismgr.service.impl&amp;metrics=classes"
def addr = url.toURL()
def conn= addr.openConnection()
def status = conn.getResponseCode()
def reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))
println reader.readLine()
</code></pre>

<h2>run script</h2>

<p>groovy getdata_scpt.groovy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate PI in 3 Languages Dynamically]]></title>
    <link href="http://leetschau.github.io/blog/2013/10/18/165217/"/>
    <updated>2013-10-18T16:52:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/10/18/165217</id>
    <content type="html"><![CDATA[<p>The algorithm to calculate PI is based on &ldquo;<a href="http://stackoverflow.com/questions/12449430/how-did-the-following-piece-of-java-code-calculate-the-digits-of-pi">http://stackoverflow.com/questions/12449430/how-did-the-following-piece-of-java-code-calculate-the-digits-of-pi</a>&rdquo;.</p>

<h1>Source code</h1>

<h2>Java</h2>

<p> import java.math.BigDecimal;
 import java.math.BigInteger;
 public class PiCalculator {
  public static void main(String[] args) {
   int precision = Integer.parseInt(args[0]);
   BigDecimal total = BigDecimal.ZERO;
   for (int i = 0; i &lt; precision; i++) {
    total = total.add(getStep(i, precision));
   }
   System.out.println(&ldquo;Pi = &rdquo; + total);
  }
  public static BigDecimal getStep(int k, int scale) {
   BigInteger base = BigInteger.valueOf(16).pow(k);
   int k1 = 8 * k + 1;
   int k4 = 8 * k + 4;
   int k5 = 8 * k + 5;
   int k6 = 8 * k + 6;
   base = base.multiply(BigInteger.valueOf(k1));
   base = base.multiply(BigInteger.valueOf(k4));
   base = base.multiply(BigInteger.valueOf(k5));
   base = base.multiply(BigInteger.valueOf(k6));
   int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1
    * k4 * k5;
   return BigDecimal.valueOf(numerator).divide(new BigDecimal(base),
     scale - 1, BigDecimal.ROUND_HALF_UP);
  }
 }</p>

<h1>Groovy</h1>

<p> def scale = Integer.parseInt(args[0])
 BigDecimal total = BigDecimal.ZERO
 for (i in 0..scale-1) {
  total = total.add(getStep(i, scale))
 }
 println &ldquo;Pi = &rdquo; + total
 def getStep(int k, int scale) {
  BigInteger base = BigInteger.valueOf(16).pow(k);
  int k1 = 8 * k + 1;
  int k4 = 8 * k + 4;
  int k5 = 8 * k + 5;
  int k6 = 8 * k + 6;
  base = base.multiply(BigInteger.valueOf(k1));
  base = base.multiply(BigInteger.valueOf(k4));
  base = base.multiply(BigInteger.valueOf(k5));
  base = base.multiply(BigInteger.valueOf(k6));
  int numerator = 4 * k4 * k5 * k6 - 2 * k1 * k5 * k6 - k1 * k4 * k6 - k1 * k4 * k5;
  return BigDecimal.valueOf(numerator).divide(new BigDecimal(base),
    scale - 1, BigDecimal.ROUND_HALF_UP);
 }</p>

<h2>Clojure</h2>

<h3>Create Project</h3>

<p>$ lein new calc-pi;cd calc-pi;cat project.clj</p>

<p> &hellip;</p>

<p> :dependencies [[org.clojure/clojure &ldquo;1.5.1&rdquo;]
     [org.clojure/math.numeric-tower &ldquo;0.0.2&rdquo;]])</p>

<h3>core.clj</h3>

<p> (defn calc-pi
  [k]
  (convert-decimal (calc-pi-expt k) k))
 (defn convert-decimal
  &ldquo;Convert a ratio to decimal with precision prec&rdquo;
  [source prec]
  (with-precision prec (/ (bigdec (numerator source)) (denominator source))))
 (defn calc-pi-expt
  [k]
  (reduce + (map step-expt (range k))))
 (require &lsquo;[clojure.math.numeric-tower :as math])
 (defn step-expt [k]
  (/ (- (/ 4 (+ (<em> 8 k) 1)) (/ 2 (+ (</em> 8 k) 4)) (/ 1 (+ (<em> 8 k) 5)) (/ 1 (+ (</em> 8 k) 6))) (math/expt 16 k)))</p>

<h1>Calculate</h1>

<h2>Java</h2>

<p>$ javac PiCalculator.java</p>

<p>$ time java PiCalculator 500</p>

<p>=> 0.25s</p>

<p>This value doesn&rsquo;t include compilation time!</p>

<p>$ /usr/bin/time -p sh -c &lsquo;javac PiCalculator.java;java PiCalculator 500&rsquo;</p>

<p>=> 0.87</p>

<h2>Clojure</h2>

<p>(time (calc-pi 500)) => 0.8s</p>

<h2>Groovy</h2>

<p>$ time groovy calcPi.groovy 500</p>

<p>=> 1.09s</p>
]]></content>
  </entry>
  
</feed>
