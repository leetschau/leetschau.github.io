<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T15:40:38+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git GUI Clients on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/30/095841/"/>
    <updated>2015-04-30T09:58:41+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/30/095841</id>
    <content type="html"><![CDATA[<h1>gitg</h1>

<p>Very intuitive branch model.
You can select different branch,
which will be displayed as the left-most line in the branch view panel.
Cover the functions of giggle.</p>

<h1>gitk</h1>

<p>Come with git.
See all branches: <code>gitk --all</code>.
Not intuitive for branching information.</p>

<h1>git gui</h1>

<p>Install with <code>aptitude install git-gui</code>.</p>

<p>Use gitk&rsquo;s branch-browsing interface.</p>

<h1>SmartGit</h1>

<p><a href="http://www.syntevo.com/smartgit/">SmartGit</a> is free for non-commercial use.
You have to download the installer, extract it and run.</p>

<h1>giggle</h1>

<p>Install with <code>aptitude install giggle</code>.</p>

<p>You can browse the history of a file.</p>

<h1>git cola</h1>

<p>Install with <code>aptitude install git-cola</code>.</p>

<p>Like git gui, use gitk&rsquo;s branch-browsing interface, too.</p>

<h1>Summary</h1>

<p>gitg is the first choice.
SmartGit is good except its license restriction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git GUI Tools]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/30/095418/"/>
    <updated>2015-04-30T09:54:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/30/095418</id>
    <content type="html"><![CDATA[<h1>gitk</h1>

<p>Come with git. Good for view info of the repo.
Not very intuitive for viewing the branches.</p>

<h1>git gui</h1>

<p>Install with <code>aptitude install git-gui</code></p>

<p>Use gitk&rsquo;s visualization interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving Merge Conflicts in Git]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/23/174442/"/>
    <updated>2015-04-23T17:44:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/23/174442</id>
    <content type="html"><![CDATA[<p>Edit the conflicted files manually.
Remove &ldquo;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&rdquo;, &ldquo;=======&rdquo; and &ldquo;>>>>>>>&rdquo;,
then add and commit the modified files to resolve the conflict.</p>

<p>When using git-flow, if a conflict appears when finishing a release,
after resolve and commit the conflicted files,
run <code>git flow release finish 0.2.0</code> again.</p>

<p>Ref:</p>

<p><a href="http://genomewiki.ucsc.edu/index.php/Resolving_merge_conflicts_in_Git">Resolving merge conflicts in Git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checkout Remote Git Branch]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/21/175117/"/>
    <updated>2015-04-21T17:51:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/21/175117</id>
    <content type="html"><![CDATA[<p>We clone a remote repository, check out a remote branch.</p>

<pre><code>$ git clone https://github.com/limingth/meteor-master-classes.git
$ cd meteor-master-classes
$ git branch -r
origin/HEAD -&gt; origin/master
origin/fanjinhui
origin/lichao
origin/limingth
origin/master
origin/sean
origin/tianchao
</code></pre>

<p>So the remote repository&rsquo;s name is &ldquo;origin&rdquo;.
First check the initial status of the repository:</p>

<pre><code>$ git branch
* master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p>Now checkout the remote branch:</p>

<pre><code>$ git fetch
$ git checkout lichao
</code></pre>

<p>Check the status of the repository after checked out:</p>

<pre><code>$ git br
* lichao     &lt;---
  master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branches configured for 'git pull':
    lichao merges with remote lichao        &lt;---
    master merges with remote master
  Local refs configured for 'git push':
    lichao pushes to lichao (up to date)    &lt;---
    master pushes to master (up to date)
</code></pre>

<p>You can see there are 2 kinds of relationship between local and remote branches: pull and push.
Branch &ldquo;lichao&rdquo; and &ldquo;origin/lichao&rdquo; was linked bidirectional after checked out.</p>

<p>Some notes:</p>

<ul>
<li><p>The name of the remote branch to be checked out is its full name except the &ldquo;origin/&rdquo; part,
like &ldquo;lichao&rdquo; in <code>git checkout lichao</code>;</p></li>
<li><p><code>git fetch</code> synchronize your local repository with remote side.
So it&rsquo;s not necessary if you don&rsquo;t want sync with remote.</p></li>
</ul>


<p>You can verify this by <code>git branch -avv</code>.</p>

<p>Ref:</p>

<ul>
<li><p><a href="http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git">http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/1783405/checkout-remote-git-branch">http://stackoverflow.com/questions/1783405/checkout-remote-git-branch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-flow Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/29/141348/"/>
    <updated>2015-01-29T14:13:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/29/141348</id>
    <content type="html"><![CDATA[<p>git is a powerful version control tool, while its large amount of commands and options make it hard to use.</p>

<p>So <a href="https://github.com/nvie/gitflow">git-flow</a> was created to make git mush convenient. It&rsquo;s a high level branching tools for git.</p>

<p>Fist install it with <code>apt-get install git-flow</code> on Debian-family distros.</p>

<h1>Usage</h1>

<h2>Workflow on a single feature</h2>

<p>The following paragraphs is from [Why aren&rsquo;t you using git-flow?}(<a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>).</p>

<p>Branch &ldquo;master&rdquo; is always &ldquo;production ready&rdquo; code. Commits are never made directly to master. Rather, code on master only gets there after a production release branch is created and &ldquo;finished&rdquo; (more on that in a sec). Thus the code on master is always able to be released to production. Also, master is always in a predictable state, so you never need to worry if master (and thus production) has changes one of your other branches doesn&rsquo;t.</p>

<p>&ldquo;develop&rdquo; is the branch you&rsquo;ll be doing most of your work off of; it&rsquo;s also the branch that represents the code to be deployed in the next release. feature branches represent non-trivial features and fixes that have not yet been deployed (a completed feature branch is merged back into develop). Updating master is done through the creation of a release.</p>

<p>Most of your work is done on the develop branch. This branch contains all of the completed features and bug fixes yet to be released; nightly builds or continuous integration servers should target develop, as it represents the code that will be included in the next release. For one-off commits, feel free to commit to develop directly.</p>

<p>Use <code>git flow help</code> or <code>git flow feature help</code> to list all available commands.</p>

<pre><code>$ git flow init  // Convert an existing git repo to git-flow style:

$ git flow feature start &lt;feature-name&gt;

$ git commit -m "now finish this feature"

// if you want cancel this feature:
$ git flow feature  // list the current feature name, here is "searchSource"
$ git flow feature delete searchSource
// or do it manually
$ git checkout develop  // switch to "develop" branch
$ git branch  // list current branches
$ git branch -d feature/&lt;feature-name&gt;   // "feature/" is the default prefix of all feature branches
$ git branch  // verify the feature is deleted

// push feature to remote repository
$ git flow feature publish

// get feature commit from remote repository
$ git flow feature pull

// after the feature is finished and tested
$ git flow feature finish &lt;feature-name&gt;
</code></pre>

<p>Note that do not add &ldquo;feature/&rdquo; prefix before feature name.
This command merge feature branch back into develop branch, so the feature branch disappear from now on.
If you don&rsquo;t want save your feature branch into remote repo, push to remote AFTER you finish your feature with this &ldquo;finish&rdquo; command.
There is a corresponding &ldquo;release&rdquo; command:</p>

<pre><code>$ git flow release start v0.1.0
$ git flow release finish v0.1.0
</code></pre>

<p>See <a href="http://danielkummer.github.io/git-flow-cheatsheet/">git-flow cheatsheet</a> for details of git-flow.</p>

<h2>Switching between multiple features</h2>

<p>Say you now have finished version 1.0 and tag it with &ldquo;1.0&rdquo;.
Next you will add function A to the product.
You have two methods to achieve function A, &ldquo;search source&rdquo; and &ldquo;full text&rdquo;.
You want to experiment them one by one, so create the first test branch with <code>git flow feature start searchSource</code>,
After some commits, now you want to evaluate the second.</p>

<p>You can&rsquo;t <code>git flow feature finish searchSource</code> for two reasons:</p>

<p>First you may switching back to this feature in the future.
If you finish this feature, this branch disappeared.</p>

<p>Second you need experiment &ldquo;full text&rdquo; based on version 1.0.
But if you &ldquo;finish&rdquo; feature &ldquo;search source&rdquo;, the modifications will be added to branch develop.
If you <code>git flow feature start fullText</code>, the codes won&rsquo;t be that in version 1.0.</p>

<p>So what you want is working on multiple branches simultaneously:</p>

<pre><code>$ git flow feature start searchSource
... // some developments on branch searchSource
$ git commit -m "finish a milestone by method search source"
$ git flow feature start fullText
... // some developments on branch fullText
$ git commit -m "finish a milestone by method full text"
$ git flow feature list
$ git flow feature checkout searchSource
... // some developments on branch searchSource
$ git commit -m "finish the 2nd milestone by method search source"
$ git flow feature checkout fullText
... // some developments on branch fullText
$ git commit -m "finish the 2nd milestone by method full text"
</code></pre>

<p>If you have some casual modifications which you don&rsquo;t want to commit, use <code>git stash</code> instead of <code>git commit</code>.
Use <code>git stash list</code> to list all stashed changes, and <code>git stash pop</code> to take the stashed codes out.
Or <code>git stash apply</code> to take codes out without removing saved stash record.</p>

<p>Finally you choose &ldquo;full text&rdquo; to achieve function A.
So add it to your develop code base: <code>git flow feature finish fullText</code>.
And leave the branch &ldquo;search source&rdquo; alone.</p>

<p>If you are sure &ldquo;search source&rdquo; are useless any more,
print all existing features with <code>git flow feature list</code>,
then remove it with <code>git flow feature delete searchSource</code>.</p>

<p>There is a GUI tool called <code>gitk</code>, which can be installed with <code>apt-get install gitk</code>.
See commits on current branch with <code>gitk</code>, or see all branches with <code>gitk --all</code>.</p>

<p>There is also a <a href="https://github.com/bobthecow/git-flow-completion">git-flow-completion</a> tool for zsh.
Install it if you like.</p>

<ol>
<li><p>Download <a href="http://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_git?format=raw">_git</a> and replace /usr/share/zsh/functions/Completion/Unix/_git;</p></li>
<li><p>Download <a href="https://raw2.github.com/bobthecow/git-flow-completion/master/git-flow-completion.zsh">git-flow-completion.zsh</a>, save it as ~/.git-flow-completion.zsh;</p></li>
<li><p>Add &ldquo;source ~/.git-flow-completion.zsh&rdquo; into ~/.zshrc;</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
