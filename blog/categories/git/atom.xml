<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将Master分支上的最后一个Commit移动到Develop分支上]]></title>
    <link href="http://leetschau.github.io/blog/2016/01/30/132538/"/>
    <updated>2016-01-30T13:25:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/01/30/132538</id>
    <content type="html"><![CDATA[<p>代码库的开发分支是develop，修改代码前没有注意还处在master分支，
修改完并提交后才意识到提交到了master分支上，
需要将这个commit移动到develop分支上：</p>

<pre><code>git checkout develop
git cherry-pick master
git checkout master
git reset --hard HEAD~
</code></pre>

<p>Ref: <code>git help cherry-pick</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move Some Commit From One Repo to Another]]></title>
    <link href="http://leetschau.github.io/blog/2015/12/27/185843/"/>
    <updated>2015-12-27T18:58:43+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/12/27/185843</id>
    <content type="html"><![CDATA[<p>We need move all commit between origin/develop to develop in an old repo
to a new repo.</p>

<p>Export all commits in old repo:</p>

<pre><code>cd /path/to/old-repo
git format-patch origin/develop..develop
</code></pre>

<p>Now you have many .patch files in old repo.
Each patch file represents a commit between origin/develop and develop.</p>

<p>Apply these patches in new repo:</p>

<pre><code>cd /path/to/new-repo
git checkout develop
git am /path/to/old-repo/*.patch
</code></pre>

<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/5062389/getting-started-with-git-am">Getting started with git-am</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的图形化Git客户端]]></title>
    <link href="http://leetschau.github.io/blog/2015/11/19/103131/"/>
    <updated>2015-11-19T10:31:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/11/19/103131</id>
    <content type="html"><![CDATA[<p>这里的客户端不包括只有浏览功能的viewer，比如gitk, gitg等。
下面两个客户端都需要安装JRE. 不需要安装，解压后直接使用。</p>

<h1>GitEye</h1>

<p>需要在repo里增加一个.project文件，然后在.gitignore里加入这个文件，不够clean。</p>

<h1>SmartGit</h1>

<p>商业应用付费，非商业用途免费；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Meteor应用完整从1.2版本降级到1.1版本]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/29/200553/"/>
    <updated>2015-10-29T20:05:53+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/29/200553</id>
    <content type="html"><![CDATA[<p>当前版本的mup不支持Meteor 1.2，对1.1支持很好。
一位开发者用<code>meteor update</code>升级了Meteor,然后push到代码库中，
其他开发者同步代码后发现无法使用mup部署，
这个问题不能简单地使用<code>meteor --releae 1.1</code>处理，
因为从1.1到1.2，Metoer很多核心包的版本发生了变化，并增删了很多包，
<code>meteor --release 1.1</code>只能还原Meteor自身版本，
无法还原核心包，必须将.meteor目录下所有文件复原。</p>

<p>使用git的patch功能可以方便地实现针对一个目录的复原。
首先找到包含正确文件（旧Meteor版本和包定义）的commit，例如 15c9f125630，
然后找到要复原的目标commit，一般是develop branch的HEAD，例如 f13b84f6c55，
做一个反向patch：<code>git diff f13b84f6c55 15c9f125630 .meteor &gt; reverseDotMeteor.patch</code>;</p>

<p>正常的<code>git diff</code>是旧版本在前，新版本在后，这样生成的patch反映的是文件内容随着时间发生的改变，
这里将新的commit放在前面，生成的patch就能起到回到过去的作用。</p>

<p>checkout目标commit并加载patch: <code>git apply reverseDotMeteor.patch</code>.</p>

<p>测试mup是否能正常工作，如果能，提交修改。</p>

<p>参考：<a href="http://stackoverflow.com/questions/1191282/how-to-see-the-changes-between-two-commits-without-commits-in-between">http://stackoverflow.com/questions/1191282/how-to-see-the-changes-between-two-commits-without-commits-in-between</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/25/212008/"/>
    <updated>2015-10-25T21:20:08+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/25/212008</id>
    <content type="html"><![CDATA[<h1>Git submodule as Meteor package</h1>

<p>We have a parent (container) Meteor application &ldquo;niufour&rdquo;,
now we want to add a new package &ldquo;nf-search&rdquo; to niufour.</p>

<p>Make sure if <code>packages/</code> has been added into .gitignore.</p>

<p>Push the nf-search (outside of niufour folder) to remote repo,
here we use a Phabricator server, with address <remote-repo-url>.</p>

<p>Under the root of niufour, run:</p>

<pre><code>git submodule add &lt;remote-repo-url&gt; packages/nf-search
</code></pre>

<p>While &ldquo;packages/&rdquo; is always in niufour/.gitignore, you should add module with:</p>

<pre><code>git submodule add -f &lt;remote-repo-url&gt; packages/nf-search
</code></pre>

<p>The common form is: <code>git submodule add &lt;remote-repo-url&gt; &lt;local-path&gt;</code>,
where the <local-path> is where you want to put your submodule.</p>

<p>To add it into the niufour package list,
add <code>nfcommerce:nf-search</code> into file <niufour-project-root>/.meteor/packages.</p>

<p>After your partner push new codes into the repo,
run commands below to synchronize:</p>

<pre><code>git pull origin develop
git submodule update --init --recursive
</code></pre>

<p>Use <code>git submodule status</code> to list current commit of each subpackage.</p>

<h1>Keep demo state in parent project</h1>

<p>A demo need both codes and data at the exact state of the verified time.
So if your project has not submodules, use commit and tag to record the demo state.</p>

<p>Otherwise, you can use commits in parent project to record demo state.
In the example above, suppose niufour has another submodule &ldquo;nf-core&rdquo;.
In the development process, commit on &ldquo;develop&rdquo; branch in each submodule,
without commit on niufour.
Only when PM (project manager) verified the demo,
and all developers have committed and pushed in each submodule,
PM commits, tags and pushes <strong>in parent project</strong> by himself:</p>

<pre><code>cd /path/to/niufour
git add -A
git commit -m "this is for demo of 2015.11.04"
git tag "demo-2015.11.04"
git push origin develop
</code></pre>

<p>Then pm dump the database (<code>mongodump</code> for MongoDB) to a folder
with the same name of the tag name (here it&rsquo;s &ldquo;demo-2015.11.04&rdquo;).</p>

<p>At the demo day, the PM restore the data into a new database (<code>mongorestore</code> for example),
then run commands below to restore the codes for demo:</p>

<pre><code>git clone &lt;url-of-niufour&gt;
git checkout demo-2015.11.04
git submodule init
git submodule update
</code></pre>

<p>Note: To demonstrate the usage of git submodule,
use example in &ldquo;Git权威指南&rdquo;, 23.1 ~ 23.3, by 蒋鑫.</p>
]]></content>
  </entry>
  
</feed>
