<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-11-28T08:48:37+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Java Project With Eclipse, Gradle and Git]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/11/144152/"/>
    <updated>2014-08-11T14:41:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/11/144152</id>
    <content type="html"><![CDATA[<h1>Install and Usage</h1>

<p>The order should be:</p>

<ol>
<li><p>Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Eclipse: download, extract;</p></li>
<li><p>Install Gradle plugin for eclipse via &ldquo;Market Place&rdquo; in Eclipse, because it&rsquo;s inconvenient to run gradle tasks in console while edit files in Eclipse;</p></li>
<li><p>Configure Gradle plugin: set its working JDK;</p></li>
<li><p>Build a new Gradle project in Eclipse, add git version control;</p></li>
<li><p>Run Gradle tasks: right click &ldquo;build.gradle&rdquo; file, then select &ldquo;Gradle -> Tasks Quick Launcher&rdquo; (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h2>Frequently Used Tasks</h2>

<p>Some need adding &ldquo;apply plugin: &lsquo;application&rsquo;&rdquo; and &ldquo;mainClassName = &lsquo;com.boco.gdep.Probe&rsquo;&rdquo; into build.gradle.
Read <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">Gradle Application Plugin</a> for details.</p>

<ul>
<li><p>clean</p></li>
<li><p>check</p></li>
<li><p>test</p></li>
<li><p>compileJava</p></li>
<li><p>run</p></li>
<li><p>startScripts: create start scripts for your application;</p></li>
<li><p>distZip: build final deploy package, find zip file under build/distributions folder;</p></li>
<li><p>installApp: install package created in &ldquo;distZip&rdquo; into build/install folder;</p></li>
</ul>


<p>Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle&rsquo;s test task (using Shift + Ctrl + Alt + R, then input &ldquo;test&rdquo; and <Enter>).</p>

<p>All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my <a href="https://github.com/leetschau/GDEP">GDEP</a> project.</p>

<h1>Debug Gradle with println</h1>

<p>Add the following scripts into build.gradle, then run &ldquo;check&rdquo; task.</p>

<pre><code>println "--------"
println project.name
println "--------"
</code></pre>

<h2>Customize project name</h2>

<p>Add a new file &ldquo;settings.gradle&rdquo; at the root of the project, add a string &ldquo;rootProject.name = &lsquo;myProj&rsquo;&rdquo; into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc.</p>

<hr />

<p>First install gradle, then run the following commands:</p>

<pre><code>$ mkdir myproj
$ cd myproj
$ gradle init --type java-library
$ mkdir src/main/resources
$ mkdir src/test/resources
</code></pre>

<p>Now the project layout is ready. If you want to develop this project in Eclipse, add &ldquo;apply plugin: &lsquo;eclipse&rsquo;&rdquo; into build.gradle, then run:</p>

<pre><code>$ gradle eclipse
</code></pre>

<p>Then open this project with Eclipse.</p>

<p>The default project layout (file structure) of &ldquo;java&rdquo; plugin is described in &ldquo;Project layout&rdquo; section of <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>:</p>

<p>src/main/java:           Production Java source
src/main/resources:      Production resources
src/test/java:           Test Java source
src/test/resources:      Test resources
src/sourceSet/java:      Java source for the given source set
src/sourceSet/resources: Resources for the given source set</p>

<p>Add git version control with:</p>

<pre><code>$ cd myproj
$ git init
</code></pre>

<p>In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse.</p>

<p>Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore:</p>

<pre><code>$ cat .gitignore
build
.gradle
gradle
...
</code></pre>

<p>Three Eclipse component &ldquo;.settings&rdquo;, &ldquo;.project&rdquo; and &ldquo;.classpath&rdquo; should be added to git repository.</p>

<h1>Merge Github Project and Eclipse Gradle Project</h1>

<ol>
<li><p>git clone <a href="https://github.com/leetschau/GDEP.git">https://github.com/leetschau/GDEP.git</a> gdep2</p></li>
<li><p>In Eclipse, build a new Gradle project &ldquo;GDEP-0811&rdquo; with &ldquo;Quick start&rdquo; template;</p></li>
<li><p>Move all files and folders in gdep2 to GDEP-0811;</p></li>
<li><p>Refresh project in Eclipse;</p></li>
<li><p>Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter &ldquo;build&rdquo;, and press <Enter>. If you encounter a &ldquo;Cannot find System Java Compiler&rdquo; error, set Gradle&rsquo;s Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select &ldquo;Workspace JRE&rdquo;: jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Environment on Eclipse]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/08/155030/"/>
    <updated>2014-08-08T15:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/08/155030</id>
    <content type="html"><![CDATA[<h1>Eclipse</h1>

<p>Luna for Java Developer, file name: eclipse-java-luna-R-linux-gtk-x86_64.tar.gz</p>

<h1>Gradle plugin</h1>

<ol>
<li><p>Download gradle-2.0-all.zip, extract it to ~/apps;</p></li>
<li><p>Add following lines into ~/.zshrc and run <code>source ~/.zshrc</code>:</p>

<p> export GRADLE_HOME=/home/chad/apps/gradle-2.0
 export PATH=$PATH:$GRADLE_HOME/bin</p></li>
<li><p>Install &ldquo;Gradle IDE 3.6.0&rdquo;: searching &ldquo;gradle&rdquo; in Eclipse Marketplace and install it;</p></li>
</ol>


<h1>Vim mode plugin</h1>

<ol>
<li><p>Download vrapper_0.44.0_20140601.zip from <a href="http://sourceforge.net/projects/vrapper/">its website</a>;</p></li>
<li><p>Extract it under $ECLIPSE_HOME/dropins;</p></li>
<li><p>Start Eclipse;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a Private Project on bitbucket.com to a Github Public Project]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/12/175101/"/>
    <updated>2014-03-12T17:51:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/12/175101</id>
    <content type="html"><![CDATA[<ol>
<li><p>Create a public repo on github, you can add README or License files on the master branch, suppose the url is:</p>

<p> <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p></li>
<li><p>Get the private repo:</p>

<p> $ git clone <a href="https://leechau@bitbucket.org/leechau/donno.git">https://leechau@bitbucket.org/leechau/donno.git</a>
 $ cd donno
 $ git branch -v -a   (list all remote branches for checkout)
 $ git checkout -b develop origin/develop   (copy remote branch to local repo and update working directory)</p></li>
<li><p>Publish to github, you have 2 choices:</p>

<ol type="a">
<li><p>Publish selected branches:</p>

<p> $ git remote add don4 <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a>
 $ git push -u don4 master
 $ git push -u don4 develop</p></li>
</ol>


<p>   or you can push your &ldquo;master&rdquo; branch to remote as &ldquo;init&rdquo; branch for avoid confliction with master branch created on github:</p>

<pre><code> $ git push don4 master:init
</code></pre>

<ol type="a">
<li><p>Publish all branches:</p>

<p> $ git push &ndash;mirror <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p>

<p>In this case you can&rsquo;t create README or License files when creating github project, to avoid conflict on master branch.</p></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/25/144450/"/>
    <updated>2013-11-25T14:44:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/25/144450</id>
    <content type="html"><![CDATA[<h1>Useful Commands</h1>

<p>git add <files>: add files to stage area, use git rm &ndash;cached <file> to remove it from stage area (physical file remains);</p>

<p>git add -A: If you use &ldquo;mv&rdquo; instead of &ldquo;git mv&rdquo; to rename a file, you can use this command to apply this rename operation to staging area;</p>

<p>git checkout <commit>: make your working directory back to state <commit>;</p>

<pre><code>$ git checkout &lt;branch-name&gt;  // switch between branches
</code></pre>

<p>git checkout &ndash; <file-name>: use <file-name> in staging area replace its counterpart in working directory;</p>

<p>git checkout &ndash; .: abandon all modifications in working directory. Don&rsquo;t forget the last dot. It means &ldquo;all&rdquo;.</p>

<p>git clean -n: &ldquo;dry run&rdquo; mode, preview the removed files;
git clean -f: remove all untracked files;
git clean -f -d: remove all untracked files and directories;</p>

<p>git commit: commit all files in stage area;</p>

<p>git config &ndash;global alias.ci &ldquo;commit -s&rdquo;   # this is user-wide, or use &ldquo;&ndash;system&rdquo; to config system-wide (in /etc/gitconfig)
git config &ndash;global user.name &ldquo;leetschau&rdquo;
git config &ndash;global user.email &ldquo;<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#108;&#101;&#101;&#116;&#115;&#x63;&#x68;&#97;&#x75;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#108;&#101;&#101;&#116;&#115;&#99;&#x68;&#x61;&#117;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>&rdquo;</p>

<p>git diff</p>

<p>git init: initialize local repository;</p>

<p>git log &ndash;stat: list log with file changes;</p>

<p>git mv <old-file-name> <new-file-name></p>

<p>git remote show origin: git equivalent of &ldquo;svn info&rdquo;;</p>

<p>git reset &ndash;hard <commit>: go back to <commit> completely, both working directory and repository, the history is lost;</p>

<p>git reset: undo all &ldquo;git add&rdquo; commands, same with &ldquo;git reset HEAD&rdquo;;</p>

<p>git reset &ndash; <file-name>: only remove <file-name> from staging area;</p>

<p>git rm:</p>

<p>git show <object>: show information of <object>, like a commit, the following command show the information of commit 389be, like &ldquo;git log &hellip;&rdquo;:</p>

<pre><code>git show 389be --stat
</code></pre>

<p>  or print file contents of a specified version, the following command show the file contents of the parent of HEAD:</p>

<pre><code>git show HEAD~1:donno/cloudsync.py
</code></pre>

<p>git stash: save current working directory and index and change them to the state of last commit;</p>

<p>git stash apply: restore last &ldquo;stash save&rdquo;;</p>

<p>git stash drop: delete last &ldquo;stash save&rdquo;;</p>

<p>git stash pop: git stash apply + git stash drop</p>

<p>git stash clear: clear all stash saves;</p>

<p>git status</p>

<h2>Undo the last commit</h2>

<p>After a commit with <code>git commit -m "..."</code>, I found I forget to update version number which is defined in file build.gradle.
Now I need undo the last commit, modify version number in build.gradle, then commit again with the same commit comments.</p>

<pre><code>$ git reset --soft HEAD~1
// edit build.gradle
$ git add -u
$ git commit -c ORIG_HEAD
</code></pre>

<p>Ref: <a href="http://stackoverflow.com/questions/927358/undo-the-last-git-commit">Undo the last Git commit?</a></p>

<h1>Git config</h1>

<h2>User Config (global)</h2>

<p>~/.gitconfig</p>

<pre><code>[user]
    name = leetschau
    email = leetschau@gmail.com
[alias]
    ci = commit -s
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work on Remote Git Repository]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/19/101234/"/>
    <updated>2013-11-19T10:12:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/19/101234</id>
    <content type="html"><![CDATA[<h1>Create New Branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch    // list all existing branches
$ git checkout -b leetschau     // create new branch "leetschau" and checkout it
</code></pre>

<h1>Push to remote repository</h1>

<p><code>$ git push origin leetschau</code>, where &ldquo;origin&rdquo; is repository name, &ldquo;leetschau&rdquo; is branch name.</p>

<p>When you push your branch the first time, add &ldquo;-u&rdquo; to specify that the current branch is associated with the remote branch.</p>

<p>Ref: <a href="http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.">http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time.</a></p>

<h1>Push all branches to remote repository</h1>

<p><code>$ git push origin --all</code>.</p>

<h1>Discard local changes</h1>

<p>We need discard all local changes and keep the same with remote repository. Provided that you want sync with &ldquo;master&rdquo; branch in remote repository &ldquo;origin&rdquo;:</p>

<pre><code>$ git fetch orgin
$ git reset --hard origin/master
</code></pre>

<p>Note that files not in stage area (not been &ldquo;add&rdquo;) will remains, while files in stage area or committed will be removed.</p>

<h1>Remove Existing Branch</h1>

<pre><code>$ git push origin :leetchao
</code></pre>

<h1>Create, query and remove remote repository alias</h1>

<pre><code>$ git remote add pyevernote-repo https://github.com/hackrole/pyevernote.git
$ git remote -v
$ git remote rm pyevernote-repo
</code></pre>

<h1>Checkout from a existing repository and branch</h1>

<pre><code>$ git clone https://github.com/hackrole/pyevernote.git
$ cd pyevernote
$ git branch -r
  origin/leetschau
  ...
$ git checkout leetschau      // or "git checkout -b leetschau origin/leetschau" for old version git
</code></pre>

<p>For verification, you can find &lsquo;remote=origin &hellip; under [branch &ldquo;leetschau&rdquo;]&rsquo; in file .git/config.</p>

<h1>Update from remote repository</h1>

<pre><code>$ git fetch origin
$ git status
  Your branch is **behind** 'origin/develop' by 3 commits... (which means your local branch need to be updated with remote one)
$ git merge origin/develop
</code></pre>

<p>Note: Do not use &ldquo;git pull&rdquo; for &ldquo;pull&rdquo; is too &ldquo;smart&rdquo;.
<a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/">git: fetch and merge, donât pull</a> gives the reason and provides an excellent explanation of what is &ldquo;branch&rdquo;.</p>

<h1>Move a git repository from Bitbucket to Github</h1>

<p>Based on <a href="http://www.blackdogfoundry.com/blog/moving-repository-from-bitbucket-to-github/">Moving Repository from Bitbucket to GitHub</a>.</p>

<pre><code>cd $DSNOTE_HOME
git remote rename origin bitbucket
// create a new repository "dsnote" on Github
git remote add origin https://github.com/leetschau/dsnote.git
git push -u origin master
git remote -v
git branch -r
</code></pre>

<h1>Other</h1>

<p>Always use <code>git status</code> to get current status, such as the difference between CWD and stage area, difference between stage area and local repository, and difference between local repository and remote repository.
Use <code>git log</code> to show commit history.</p>
]]></content>
  </entry>
  
</feed>
