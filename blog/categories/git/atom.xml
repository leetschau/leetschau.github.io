<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-02T09:35:25+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git-flow Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/01/29/141348/"/>
    <updated>2015-01-29T14:13:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/01/29/141348</id>
    <content type="html"><![CDATA[<p>git is a powerful version control tool, while its large amount of commands and options make it hard to use.</p>

<p>So <a href="https://github.com/nvie/gitflow">git-flow</a> was created to make git mush convenient. It&rsquo;s a high level branching tools for git.</p>

<p>Fist install it with <code>apt-get install git-flow</code> on Debian-family distros.</p>

<h1>Usage</h1>

<h2>Workflow on a single feature</h2>

<p>The following paragraphs is from [Why aren&rsquo;t you using git-flow?}(<a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>).</p>

<p>Branch &ldquo;master&rdquo; is always &ldquo;production ready&rdquo; code. Commits are never made directly to master. Rather, code on master only gets there after a production release branch is created and &ldquo;finished&rdquo; (more on that in a sec). Thus the code on master is always able to be released to production. Also, master is always in a predictable state, so you never need to worry if master (and thus production) has changes one of your other branches doesn&rsquo;t.</p>

<p>&ldquo;develop&rdquo; is the branch you&rsquo;ll be doing most of your work off of; it&rsquo;s also the branch that represents the code to be deployed in the next release. feature branches represent non-trivial features and fixes that have not yet been deployed (a completed feature branch is merged back into develop). Updating master is done through the creation of a release.</p>

<p>Most of your work is done on the develop branch. This branch contains all of the completed features and bug fixes yet to be released; nightly builds or continuous integration servers should target develop, as it represents the code that will be included in the next release. For one-off commits, feel free to commit to develop directly.</p>

<p>Use <code>git flow help</code> or <code>git flow feature help</code> to list all available commands.</p>

<pre><code>$ git flow init  // Convert an existing git repo to git-flow style:

$ git flow feature start &lt;feature-name&gt;

$ git commit -m "now finish this feature"

// if you want cancel this feature:
$ git flow feature  // list the current feature name, here is "searchSource"
$ git flow feature delete searchSource
// or do it manually
$ git checkout develop  // switch to "develop" branch
$ git branch  // list current branches
$ git branch -d feature/&lt;feature-name&gt;   // "feature/" is the default prefix of all feature branches
$ git branch  // verify the feature is deleted

// push feature to remote repository
$ git flow feature publish

// get feature commit from remote repository
$ git flow feature pull

// after the feature is finished and tested
$ git flow feature finish &lt;feature-name&gt;
</code></pre>

<p>Note that do not add &ldquo;feature/&rdquo; prefix before feature name.
This command merge feature branch back into develop branch, so the feature branch disappear from now on.
If you don&rsquo;t want save your feature branch into remote repo, push to remote AFTER you finish your feature with this &ldquo;finish&rdquo; command.
There is a corresponding &ldquo;release&rdquo; command:</p>

<pre><code>$ git flow release start v0.1.0
$ git flow release finish v0.1.0
</code></pre>

<p>See <a href="http://danielkummer.github.io/git-flow-cheatsheet/">git-flow cheatsheet</a> for details of git-flow.</p>

<h2>Switching between multiple features</h2>

<p>Say you now have finished version 1.0 and tag it with &ldquo;1.0&rdquo;.
Next you will add function A to the product.
You have two methods to achieve function A, &ldquo;search source&rdquo; and &ldquo;full text&rdquo;.
You want to experiment them one by one, so create the first test branch with <code>git flow feature start searchSource</code>,
After some commits, now you want to evaluate the second.</p>

<p>You can&rsquo;t <code>git flow feature finish searchSource</code> for two reasons:</p>

<p>First you may switching back to this feature in the future.
If you finish this feature, this branch disappeared.</p>

<p>Second you need experiment &ldquo;full text&rdquo; based on version 1.0.
But if you &ldquo;finish&rdquo; feature &ldquo;search source&rdquo;, the modifications will be added to branch develop.
If you <code>git flow feature start fullText</code>, the codes won&rsquo;t be that in version 1.0.</p>

<p>So what you want is working on multiple branches simultaneously:</p>

<pre><code>$ git flow feature start searchSource
... // some developments on branch searchSource
$ git commit -m "finish a milestone by method search source"
$ git flow feature start fullText
... // some developments on branch fullText
$ git commit -m "finish a milestone by method full text"
$ git flow feature list
$ git flow feature checkout searchSource
... // some developments on branch searchSource
$ git commit -m "finish the 2nd milestone by method search source"
$ git flow feature checkout fullText
... // some developments on branch fullText
$ git commit -m "finish the 2nd milestone by method full text"
</code></pre>

<p>If you have some casual modifications which you don&rsquo;t want to commit, use <code>git stash</code> instead of <code>git commit</code>.
Use <code>git stash list</code> to list all stashed changes, and <code>git stash pop</code> to take the stashed codes out.
Or <code>git stash apply</code> to take codes out without removing saved stash record.</p>

<p>Finally you choose &ldquo;full text&rdquo; to achieve function A.
So add it to your develop code base: <code>git flow feature finish fullText</code>.
And leave the branch &ldquo;search source&rdquo; alone.</p>

<p>If you are sure &ldquo;search source&rdquo; are useless any more,
print all existing features with <code>git flow feature list</code>,
then remove it with <code>git flow feature delete searchSource</code>.</p>

<p>There is a GUI tool called <code>gitk</code>, which can be installed with <code>apt-get install gitk</code>.
See commits on current branch with <code>gitk</code>, or see all branches with <code>gitk --all</code>.</p>

<p>There is also a <a href="https://github.com/bobthecow/git-flow-completion">git-flow-completion</a> tool for zsh.
Install it if you like.</p>

<ol>
<li><p>Download <a href="http://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_git?format=raw">_git</a> and replace /usr/share/zsh/functions/Completion/Unix/_git;</p></li>
<li><p>Download <a href="https://raw2.github.com/bobthecow/git-flow-completion/master/git-flow-completion.zsh">git-flow-completion.zsh</a>, save it as ~/.git-flow-completion.zsh;</p></li>
<li><p>Add &ldquo;source ~/.git-flow-completion.zsh&rdquo; into ~/.zshrc;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Java Project With Eclipse, Gradle and Git]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/11/144152/"/>
    <updated>2014-08-11T14:41:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/11/144152</id>
    <content type="html"><![CDATA[<h1>Install and Usage</h1>

<p>The order should be:</p>

<ol>
<li><p>Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Eclipse: download, extract;</p></li>
<li><p>Install Gradle plugin for eclipse via &ldquo;Market Place&rdquo; in Eclipse, because it&rsquo;s inconvenient to run gradle tasks in console while edit files in Eclipse;</p></li>
<li><p>Configure Gradle plugin: set its working JDK;</p></li>
<li><p>Build a new Gradle project in Eclipse, add git version control;</p></li>
<li><p>Run Gradle tasks: right click &ldquo;build.gradle&rdquo; file, then select &ldquo;Gradle -> Tasks Quick Launcher&rdquo; (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h2>Frequently Used Tasks</h2>

<p>Some need adding &ldquo;apply plugin: &lsquo;application&rsquo;&rdquo; and &ldquo;mainClassName = &lsquo;com.boco.gdep.Probe&rsquo;&rdquo; into build.gradle.
Read <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">Gradle Application Plugin</a> for details.</p>

<ul>
<li><p>clean</p></li>
<li><p>check</p></li>
<li><p>test</p></li>
<li><p>compileJava</p></li>
<li><p>run</p></li>
<li><p>startScripts: create start scripts for your application;</p></li>
<li><p>distZip: build final deploy package, find zip file under build/distributions folder;</p></li>
<li><p>installApp: install package created in &ldquo;distZip&rdquo; into build/install folder;</p></li>
</ul>


<p>Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle&rsquo;s test task (using Shift + Ctrl + Alt + R, then input &ldquo;test&rdquo; and <Enter>).</p>

<p>All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my <a href="https://github.com/leetschau/GDEP">GDEP</a> project.</p>

<h1>Debug Gradle with println</h1>

<p>Add the following scripts into build.gradle, then run &ldquo;check&rdquo; task.</p>

<pre><code>println "--------"
println project.name
println "--------"
</code></pre>

<h2>Customize project name</h2>

<p>Add a new file &ldquo;settings.gradle&rdquo; at the root of the project, add a string &ldquo;rootProject.name = &lsquo;myProj&rsquo;&rdquo; into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc.</p>

<hr />

<p>First install gradle, then run the following commands:</p>

<pre><code>$ mkdir myproj
$ cd myproj
$ gradle init --type java-library
$ mkdir src/main/resources
$ mkdir src/test/resources
</code></pre>

<p>Now the project layout is ready. If you want to develop this project in Eclipse, add &ldquo;apply plugin: &lsquo;eclipse&rsquo;&rdquo; into build.gradle, then run:</p>

<pre><code>$ gradle eclipse
</code></pre>

<p>Then open this project with Eclipse.</p>

<p>The default project layout (file structure) of &ldquo;java&rdquo; plugin is described in &ldquo;Project layout&rdquo; section of <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>:</p>

<p>src/main/java:           Production Java source
src/main/resources:      Production resources
src/test/java:           Test Java source
src/test/resources:      Test resources
src/sourceSet/java:      Java source for the given source set
src/sourceSet/resources: Resources for the given source set</p>

<p>Add git version control with:</p>

<pre><code>$ cd myproj
$ git init
</code></pre>

<p>In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse.</p>

<p>Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore:</p>

<pre><code>$ cat .gitignore
build
.gradle
gradle
...
</code></pre>

<p>Three Eclipse component &ldquo;.settings&rdquo;, &ldquo;.project&rdquo; and &ldquo;.classpath&rdquo; should be added to git repository.</p>

<h1>Merge Github Project and Eclipse Gradle Project</h1>

<ol>
<li><p>git clone <a href="https://github.com/leetschau/GDEP.git">https://github.com/leetschau/GDEP.git</a> gdep2</p></li>
<li><p>In Eclipse, build a new Gradle project &ldquo;GDEP-0811&rdquo; with &ldquo;Quick start&rdquo; template;</p></li>
<li><p>Move all files and folders in gdep2 to GDEP-0811;</p></li>
<li><p>Refresh project in Eclipse;</p></li>
<li><p>Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter &ldquo;build&rdquo;, and press <Enter>. If you encounter a &ldquo;Cannot find System Java Compiler&rdquo; error, set Gradle&rsquo;s Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select &ldquo;Workspace JRE&rdquo;: jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Environment on Eclipse]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/08/155030/"/>
    <updated>2014-08-08T15:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/08/155030</id>
    <content type="html"><![CDATA[<h1>Eclipse</h1>

<p>Luna for Java Developer, file name: eclipse-java-luna-R-linux-gtk-x86_64.tar.gz</p>

<h1>Gradle plugin</h1>

<ol>
<li><p>Download gradle-2.0-all.zip, extract it to ~/apps;</p></li>
<li><p>Add following lines into ~/.zshrc and run <code>source ~/.zshrc</code>:</p>

<p> export GRADLE_HOME=/home/chad/apps/gradle-2.0
 export PATH=$PATH:$GRADLE_HOME/bin</p></li>
<li><p>Install &ldquo;Gradle IDE 3.6.0&rdquo;: searching &ldquo;gradle&rdquo; in Eclipse Marketplace and install it;</p></li>
</ol>


<h1>Vim mode plugin</h1>

<ol>
<li><p>Download vrapper_0.44.0_20140601.zip from <a href="http://sourceforge.net/projects/vrapper/">its website</a>;</p></li>
<li><p>Extract it under $ECLIPSE_HOME/dropins;</p></li>
<li><p>Start Eclipse;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a Private Project on bitbucket.com to a Github Public Project]]></title>
    <link href="http://leetschau.github.io/blog/2014/03/12/175101/"/>
    <updated>2014-03-12T17:51:01+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/03/12/175101</id>
    <content type="html"><![CDATA[<ol>
<li><p>Create a public repo on github, you can add README or License files on the master branch, suppose the url is:</p>

<p> <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p></li>
<li><p>Get the private repo:</p>

<p> $ git clone <a href="https://leechau@bitbucket.org/leechau/donno.git">https://leechau@bitbucket.org/leechau/donno.git</a>
 $ cd donno
 $ git branch -v -a   (list all remote branches for checkout)
 $ git checkout -b develop origin/develop   (copy remote branch to local repo and update working directory)</p></li>
<li><p>Publish to github, you have 2 choices:</p>

<ol type="a">
<li><p>Publish selected branches:</p>

<p> $ git remote add don4 <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a>
 $ git push -u don4 master
 $ git push -u don4 develop</p></li>
</ol>


<p>   or you can push your &ldquo;master&rdquo; branch to remote as &ldquo;init&rdquo; branch for avoid confliction with master branch created on github:</p>

<pre><code> $ git push don4 master:init
</code></pre>

<ol type="a">
<li><p>Publish all branches:</p>

<p> $ git push &ndash;mirror <a href="https://github.com/leetschau/don4.git">https://github.com/leetschau/don4.git</a></p>

<p>In this case you can&rsquo;t create README or License files when creating github project, to avoid conflict on master branch.</p></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands and Configurations]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/25/144450/"/>
    <updated>2013-11-25T14:44:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/25/144450</id>
    <content type="html"><![CDATA[<p>Some helpful resources:</p>

<p><a href="http://marklodato.github.io/visual-git-guide/index-en.html">A Visual Git Reference</a>;</p>

<p><a href="http://rogerdudler.github.io/git-guide/">git - the simple guide</a>;</p>

<p>Git has 3 places to store files: working dir, stage and history.
The last commit in history is called &ldquo;HEAD&rdquo;, all the older commits have their IDs.
In the following texts, &ldquo;a47c3&rdquo; and &ldquo;b325c&rdquo; are both sample revision IDs, which can be get with <code>git log --oneline</code>.</p>

<h1>Move Files</h1>

<ul>
<li><p>Working dir -> Stage: <code>git add -A</code> for all files, <code>git add -u</code> for update, <code>git add filename</code>;</p></li>
<li><p>Stage -> HEAD: <code>git commit filename</code>, <code>git commit</code> for all;</p></li>
<li><p>HEAD -> Stage: <code>git reset -- files</code>, <code>git reset</code> or <code>git reset -- .</code> for all;</p></li>
<li><p>Stage -> Working dir: <code>git checkout -- files</code>, <code>git checkout -- .</code> for all;</p></li>
<li><p>HEAD -> ( Stage &amp; Working dir ): <code>git checkout HEAD -- files</code>, <code>git checkout HEAD</code> do nothing;</p></li>
<li><p>Working dir -> ( Stage &amp; HEAD ): <code>git commit filename</code>, <code>git commit -a</code> for all;</p></li>
</ul>


<h1>Compare Files</h1>

<ul>
<li><p>Working dir <-> Stage: <code>git diff filename</code>, <code>git diff</code> for all;</p></li>
<li><p>Stage <-> HEAD: <code>git diff --cached filename</code>, <code>git diff --cached</code> for all;;</p></li>
<li><p>HEAD <-> Working dir: <code>git diff HEAD filename</code>, <code>git diff HEAD</code> for all;</p></li>
<li><p>Revision a47c3 <-> Working dir: <code>git diff a47c3 filename</code>, <code>git diff a47c3</code> for all;</p></li>
<li><p>Revision a47c3 <-> b325c: <code>git diff a47c3 b325c filename</code>, <code>git diff a47c3 b325c</code> for all;</p></li>
</ul>


<h1>Logs and Tags</h1>

<ul>
<li><p>Create a tag based on a commit: <code>git tag 1.0 a47c3</code>;</p></li>
<li><p>Print logs with tags and color highlights: <code>git log --decorate</code>;</p></li>
<li><p>Print logs with files changed: <code>git log --name-status</code>;</p></li>
<li><p>Print logs in one line for each: <code>git log --oneline</code>;</p></li>
<li><p>Print logs with all information: <code>git log --graph --decorate --name-status --all</code>;</p></li>
</ul>


<h1>Useful Commands</h1>

<p><code>git add &lt;files&gt;</code>: add files to stage area, use git rm &ndash;cached <file> to remove it from stage area (physical file remains);</p>

<p><code>git add -A</code>: If you use &ldquo;mv&rdquo; instead of &ldquo;git mv&rdquo; to rename a file, you can use this command to apply this rename operation to stage area;</p>

<p><code>git checkout &lt;commit&gt;</code>: make your working directory back to state <commit>;</p>

<pre><code>$ git checkout &lt;branch-name&gt;  // switch between branches
</code></pre>

<p><code>git checkout -- &lt;file-name&gt;</code>: use <file-name> in stage area replace its counterpart in working directory;</p>

<p><code>git checkout -- .</code>: abandon all modifications in working directory. Don&rsquo;t forget the last dot. It means &ldquo;all&rdquo;.</p>

<p><code>git clean -n</code>: &ldquo;dry run&rdquo; mode, preview the removed files;
<code>git clean -f</code>: remove all untracked files;
<code>git clean -f -d</code>: remove all untracked files and directories;</p>

<p><code>git commit</code>: commit all files in stage area;</p>

<p><code>git config</code>: see section &ldquo;git config&rdquo; below. list all configs: <code>git config --list</code>;</p>

<p><code>git diff</code>: compare file contents;</p>

<p><code>git init</code>: initialize local repository;</p>

<p><code>git log --stat</code>: list log with file changes;</p>

<p><code>git mv &lt;old-file-name&gt; &lt;new-file-name&gt;</code></p>

<p><code>git remote show origin</code>: git equivalent of &ldquo;svn info&rdquo;;</p>

<p><code>git reset --hard &lt;commit&gt;</code>: go back to <commit> completely, both working directory and repository, the history is lost;</p>

<p><code>git reset</code>: undo all &ldquo;git add&rdquo; commands, same with &ldquo;git reset HEAD&rdquo;;</p>

<p><code>git reset -- &lt;file-name&gt;</code>: only remove <file-name> from stage area;</p>

<p><code>git rm</code>:</p>

<p><code>git show &lt;object&gt;</code>: show information of <object>, like a commit, the following command show the information of commit 389be, like &ldquo;git log &hellip;&rdquo;:</p>

<pre><code>git show 389be --stat
</code></pre>

<p>or <strong>print file contents of a specified version</strong>, the following command show the file contents of the parent of HEAD:</p>

<pre><code>git show HEAD~1:donno/cloudsync.py
</code></pre>

<p>Note that the colon after version is necessary, or it will print the difference between HEAD~1 &amp; HEAD~2 when it&rsquo;s <code>git show HEAD~1 filename</code>;</p>

<p><code>git stash</code>: save current working directory and index and change them to the state of last commit;</p>

<p><code>git stash apply</code>: restore last &ldquo;stash save&rdquo;;</p>

<p><code>git stash drop</code>: delete last &ldquo;stash save</p>

<p><code>git stash pop</code>: git stash apply + git stash drop</p>

<p><code>git stash clear</code>: clear all stash saves;</p>

<p><code>git status</code></p>

<h2>Undo the last commit</h2>

<p>After a commit with <code>git commit -m "..."</code>, I found I forget to update version number which is defined in file build.gradle.
Now I need undo the last commit, modify version number in build.gradle, then commit again with the same commit comments.</p>

<pre><code>$ git reset --soft HEAD~1
// edit build.gradle
$ git add -u
$ git commit -c ORIG_HEAD
</code></pre>

<p>Ref: <a href="http://stackoverflow.com/questions/927358/undo-the-last-git-commit">Undo the last Git commit?</a></p>

<p>GUI tool: <code>gitk</code>, see all branches with <code>gitk --all</code>.</p>

<h1>Git config</h1>

<p>Add the following lines into user level config file ~/.gitconfig, or system level config file /etc/gitconfig:</p>

<pre><code>[user]
    name = leetschau
    email = leetschau@gmail.com
[alias]
    ci = commit -s
    co = checkout
    br = branch
    lg = log --stat --graph --decorate --all
</code></pre>

<p>Here in <code>git log</code>, &ndash;stat prints file changed info, &ndash;all print all branches instead of current branch,
&ndash;decorate print branch/tag info, &ndash;graph print hierarchical relation lines between commits.</p>

<p>Or change configs in command line:</p>

<pre><code>git config --global alias.ci "commit -s"
git config --global user.name "leetschau"
git config --global user.email "leetschau@gmail.com"
</code></pre>
]]></content>
  </entry>
  
</feed>
