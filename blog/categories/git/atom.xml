<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins的版本控制]]></title>
    <link href="http://leetschau.github.io/blog/2016/05/11/184550/"/>
    <updated>2016-05-11T18:45:50+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/05/11/184550</id>
    <content type="html"><![CDATA[<p>这里使用<a href="http://bit.ly/1NqkLkz">SCM Sync configuration plugin</a>
实现Jenkins各项配置的版本控制。</p>

<p>在gitlab上创建了代码库：git@gitlab.com:leechau/newfairs-jenkins.git</p>

<p>安装这个插件后，在 [Manage Jenkins -> System Information -> System Properties ->
user.name] 里查到Jenins系统的用户名，一般是jenkins，只有创建了这个用户的ssh key，
下面指定Git repo时才能连接成功，登录Jenkins服务器运行：</p>

<pre><code>su - jenkins
ssh-keygen
git config --global user.name 'Li Chao'
git config --global user.email 'leechau@126.com'
</code></pre>

<p>将<code>cat .ssh/id_rsa.pub</code>的输出加入到Gitlab的
[Profile settings -> SSH Keys] 里（在右上角搜索框里直接搜索ssh keys）；</p>

<p>删除$JENKINS_HOME/plugins下面所有git开头的插件，重启Jenkins服务；
安装Jenkins的Git插件。配置Jenkins的远端版本库：
[Manage Jenkins -> Config System -> SCM Sync configuration -> Git ->
Repo URL: git@gitlab.com:leechau/newfairs-jenkins.git]</p>

<p>要从版本库恢复Jenkins配置文件，使用 [Manage Jenkins -> Config System ->
SCM Sync configuration -> Reload config from SCM: Reload]
这个插件在 $JENKINS_HOME/scm-sync-configuration/checkoutConfiguration 中
创建了git repo。</p>

<p>怎样将Jenkins的状态返回到之前的某个commit？</p>

<p>这个插件会在Jenkins Web页面的底部加上 SCM Sync status 提示，
但似乎不太准，比如现在它显示同步失败，但代码库提交历史显示配置能够正常保存并
被push到远端库。</p>

<p>其他：</p>

<p>Ubuntu 16.04居然没有预装Python：</p>

<pre><code>apt install python
apt install python-pip
export LC_ALL=en_US.UTF-8
pip install requests
</code></pre>

<p>下午安装的Git插件时，由于本地还没有配置好git用户名和email，
安装过程中出现空指针异常，整个Jenkins服务整个无法启动，
到服务器上plugins文件夹下删除了<code>git*</code>后，重启服务才正常；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule的同步问题]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/17/140426/"/>
    <updated>2016-03-17T14:04:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/17/140426</id>
    <content type="html"><![CDATA[<h1>获取更新</h1>

<pre><code>git submodule foreach --recursive 'git fetch --all'
</code></pre>

<h1>列出remote比local新的submodule和所在分支</h1>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'|grep behind -B1
</code></pre>

<p>查看最新的提交在哪个分支上</p>

<pre><code>git submodule foreach --recursive 'git for-each-ref --sort=-committerdate --count=1'
</code></pre>

<h1>查询local branch与remote branch之间的关系</h1>

<p>这一步的目的是为了避免后面做<code>git pull --all</code>时无法确定merge目标branch.</p>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'
</code></pre>

<p>如果一个repository早已设置好remote和local之间的对应关系（见Note2），
则可以跳过这一步。</p>

<p>显示origin中每个branch的情况：</p>

<pre><code>git submodule foreach --recursive 'git remote show origin'
</code></pre>

<h1>同步到本地分支上</h1>

<pre><code>git submodule foreach --recursive 'git pull --all'
</code></pre>

<p>如果上面的命令由于Git无法确定merge目标失败，先执行：</p>

<pre><code>git submodule foreach --recursive 'git checkout master'
</code></pre>

<p>再执行<code>git pull</code>命令。</p>

<h1>回退</h1>

<p>任何时候如果想放弃本地所做的修改，用<code>git submodule update</code>返回到初始状态。</p>

<h1>切换到工作分支</h1>

<pre><code>git submodule foreach --recursive 'git checkout $(git for-each-ref --count=1 --sort=-committerdate| grep -oE "[^/]+$")'
</code></pre>

<p>其中<code>git for-each-ref</code>拿到最新的一次commit及其所在分支，
用<code>grep</code>命令得到分支名称，在checkout出此分支。</p>

<p>参考：</p>

<p><a href="http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit">http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit</a></p>

<p><a href="http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field">http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field</a></p>

<h1>Note</h1>

<h2>Note1</h2>

<p>如果希望查询某个时间点后的提交：</p>

<pre><code>git --no-pager submodule foreach --recursive 'git log --since="2016-03-05" --pretty=oneline --all --decorate'
</code></pre>

<p>这里的<code>--no-pager</code>避免<code>git log</code>进入"pager"（即类似于vim或者less的全屏风格）模式。</p>

<h2>Note2</h2>

<p>Local branch与remote branch的关系实际上是定义在<code>.git/config</code>文件中的，
对于Meteor package, 这个文件是
&ldquo;<APP_PROJ_HOME>/.git/modules/packages/<PACKAGE_NAME>/config"，例如：</p>

<pre><code>[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Branch Note]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/28/002058/"/>
    <updated>2016-02-28T00:20:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/28/002058</id>
    <content type="html"><![CDATA[<p>Ref:</p>

<p><a href="https://git-scm.com/book/no-nb/v1/Git-Branching-What-a-Branch-Is">Git Branching - What a Branch Is</a></p>

<p><a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git Branching - Branches in a Nutshell</a></p>

<p><a href="http://stackoverflow.com/questions/8198105/how-does-git-store-files">How does git store files?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combine History Commits With Git]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/25/103348/"/>
    <updated>2016-02-25T10:33:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/25/103348</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p>The commit history is:</p>

<pre><code>$ git log --pretty=oneline
52756ce25b26442a21ebfe52655dcf9c6ba9aa98 ch6 changed
41d49f2fbd12c00af99a90b6fbd1e4af18db0103 ch5 changed
c24b32555b5fe98d556acc7d32a2bd68346d40ba ch4 changed
4088dde16b47f39d1b5f9553bc902e2afc34bf9a ch3 changed
ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem
...
</code></pre>

<p>You want to combine changes in chapter 3, 4 and 5.</p>

<h1>Solution</h1>

<pre><code>git rebase -i ea37405f
</code></pre>

<p>Here &ldquo;ea37405f&rdquo; is the commit <strong>older</strong> than the commits you want to combine.</p>

<p>Now in an editor like:</p>

<pre><code>pick 4088dde ch3 changed
pick c24b325 ch4 changed
pick 41d49f2 ch5 changed
pick 52756ce ch6 changed
</code></pre>

<p>Notice the timeline order is <strong>reversed</strong> compared with that in <code>git log</code>:
the newest commit (&ldquo;ch6 changed&rdquo;) is now in the last line, instead of the first.</p>

<p>Modify the content like this:</p>

<pre><code>pick 4088dde ch3 changed
s c24b325 ch4 changed
s 41d49f2 ch5 changed
pick 52756ce ch6 changed
</code></pre>

<p>Here &ldquo;s&rdquo; means melding the commit into previous (<strong>older</strong>) commit.</p>

<p>Save and quit, you now in an editor for new commit message, input:</p>

<pre><code>chapter 3, 4 and 5 changed
</code></pre>

<p>Save and you get a message &ldquo;Successfully rebased and updated refs/heads/master&rdquo;.</p>

<h1>Discussion</h1>

<p>Check the history after rebase:</p>

<pre><code>$ git log --pretty=oneline
b4463e99ad221f270fd9f51d5bc7e8b348805804 ch6 changed
276932a252b9041085fb30d0d5e4082db8c03584 chapter 3, 4 and 5 changed
ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem
</code></pre>

<p>You can see the changes in files with <code>git diff &lt;older&gt; &lt;newer&gt;</code>, here it is:
<code>git diff HEAD~2 HEAD~</code>, or <code>git diff ea37405 276932a</code>.</p>

<p>If something wrong happens and your rebase process stopped,
come back to the place where you started with <code>git rebase --abort</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将Master分支上的最后一个Commit移动到Develop分支上]]></title>
    <link href="http://leetschau.github.io/blog/2016/01/30/132538/"/>
    <updated>2016-01-30T13:25:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/01/30/132538</id>
    <content type="html"><![CDATA[<p>代码库的开发分支是develop，修改代码前没有注意还处在master分支，
修改完并提交后才意识到提交到了master分支上，
需要将这个commit移动到develop分支上：</p>

<pre><code>git checkout develop
git cherry-pick master
git checkout master
git reset --hard HEAD~
</code></pre>

<p>Ref: <code>git help cherry-pick</code>.</p>
]]></content>
  </entry>
  
</feed>
