<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Generic | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/generic/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-20T11:01:10+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java范型方法中T与?的比较]]></title>
    <link href="http://leetschau.github.io/blog/2011/08/18/092023/"/>
    <updated>2011-08-18T09:20:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/08/18/092023</id>
    <content type="html"><![CDATA[<p>Java范型从范围上分，有范型类和范型方法两种，这里只讨论范型方法，从语义上来说，范型中的 T 和 ? 都有“任意一个类”（或者“任意一种类型”）的意思，那么二者的区别是什么呢？我认为是 T 可以放在Field或者Method名称前作为类型名，而 ? 不行，除此之外本质上完全一样，下面的代码是一个实例。</p>

<p> package org.leechau.genericEx;</p>

<p> import java.util.ArrayList;</p>

<p> import org.junit.Before;</p>

<p> import org.junit.Test;</p>

<p> public class GenericTest {</p>

<p>  private final ArrayList<String> p1 = new ArrayList<String>();</p>

<p>  private final ArrayList<Integer> p2 = new ArrayList<Integer>();</p>

<p>  public <T> String ma(ArrayList <T> pa) {</p>

<p>   return pa.get(0).toString();</p>

<p>  }</p>

<p>  public String mb(ArrayList &lt;?> pa) {</p>

<p>  return pa.get(0).toString();</p>

<p>  }</p>

<p>  @Before</p>

<p>  public void setUp() throws Exception {</p>

<p>   p1.add(&ldquo;1st strings&rdquo;);</p>

<p>   p2.add(51);</p>

<p>  }</p>

<p>  @Test</p>

<p>  public void testMa() {</p>

<p>   System.out.println(ma(p1));</p>

<p>   System.out.println(ma(p2));</p>

<p>  }</p>

<p>  @Test</p>

<p>  public void testMb() {</p>

<p>   System.out.println(mb(p1));</p>

<p>   System.out.println(mb(p2));</p>

<p>  }</p>

<p> }</p>

<p> 下面的代码演示了如何分别用 T 和 ? 完成相同的实现。</p>

<p> T版：</p>

<p> package org.leechau.genericEx;</p>

<p> import java.util.Collection;</p>

<p> public abstract class Animal {</p>

<p> public <T extends Animal> void playWith(Collection<T> playGroup) {}</p>

<p> }</p>

<p> package org.leechau.genericEx;</p>

<p> import java.util.ArrayList;</p>

<p> import java.util.Collection;</p>

<p> public class Dog extends Animal {</p>

<p> @Override</p>

<p> public <T extends Animal> void playWith(Collection<T> playGroup) {</p>

<p> System.out.println(this.toString() + &ldquo; play with &rdquo;</p>

<ul>
<li>playGroup.toString());</li>
</ul>


<p> }</p>

<p> public static void main(String[] args) {</p>

<p> Collection<Dog> dogs = new ArrayList<Dog>();</p>

<p> Dog aDog = new Dog();</p>

<p> aDog.playWith(dogs);</p>

<p> }</p>

<p> }</p>

<p> ?版：</p>

<p> package org.leechau.genericEx;</p>

<p> import java.util.Collection;</p>

<p> public class Animal2 {</p>

<p> public void playWith(Collection &lt;? extends Animal2> playGroup) {}</p>

<p> }</p>

<p> package org.leechau.genericEx;</p>

<p> import java.util.ArrayList;</p>

<p> import java.util.Collection;</p>

<p> public class Dog2 extends Animal2 {</p>

<p> @Override</p>

<p> public void playWith(Collection&lt;? extends Animal2> playGroup) {</p>

<p> System.out.println(this.toString() + &ldquo; play with &rdquo;</p>

<ul>
<li>playGroup.toString());</li>
</ul>


<p> }</p>

<p> public static void main(String[] args) {</p>

<p> Collection<Dog2> dogs = new ArrayList<Dog2>();</p>

<p> Dog2 aDog = new Dog2();</p>

<p> aDog.playWith(dogs);</p>

<p> }</p>

<p> }</p>

<p> Java的范型（尤其是实现机制）给我的感觉是不够优雅，当一堆&lt;>嵌套在一起的时候让人觉得像天书一样，背离了Java简洁易用的原则，但即便如此，毕竟现在Java还是产品开发（尤其是大规模产品）的主流工具，我们有必要理解它的一些细节。[1]的Part I,II 和[2]的第12章对范型的讲解比较透彻，[3]的4.3.7节则对Java范型进行了中肯的评价， [1]的Part III探讨了如何将没有范型的老代码改为有范型的新代码以保证类型安全 。</p>

<p> [1] Venkat Subramaniam, Generics in Java</p>

<p> [2] Cay S. Horstmann, Core Java. Volume I, Fundamentals, 8th ed, 2007.9</p>

<p> [3] Bruce A. Tate, Beyond Java, 2005.9</p>
]]></content>
  </entry>
  
</feed>
