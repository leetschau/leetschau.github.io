<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Callee | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/callee/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala中Call by Name与普通参数调用的区别]]></title>
    <link href="http://leetschau.github.io/blog/2011/11/03/103632/"/>
    <updated>2011-11-03T10:36:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/11/03/103632</id>
    <content type="html"><![CDATA[<p>先看下面的例子（引自[1]）：</p>

<p> def nano() = {
 println(&ldquo;Go into nano&rdquo;)
 System.nanoTime
}
def delayed(t: => Long) = {
 println(&ldquo;In delayed method&rdquo;)
 println(&ldquo;Param: &rdquo;+t)
 t
}
def undelayed(t: Long) = {
 println(&ldquo;In not delayed method&rdquo;)
 println(&ldquo;Param: &rdquo;+t)
 t
}
在scala中以call by name方式调用nano：</p>

<p> scala> delayed(nano())</p>

<p>结果为：</p>

<p> In delayed method Go into nano
Param: 4475258994017 Go into nano
res3: Long = 4475259694720</p>

<p>以普通方式调用nano：</p>

<p> scala> notDelayed(nano())</p>

<p>结果为：</p>

<p> Go into nano
In not delayed method
Param: 4513758999378
res4: Long = 4513758999378</p>

<p>上述3个method中，delayed()和notdelayed()是caller（调用者），nano()是callee（被调用者）。可以看出当以普通方式调用callee时，nano()会在caller一开始运行的时候被计算一遍，在caller内部用到callee时，只要取出之前得到的结果即可，不会重新执行一遍callee；但Call by Name方式下不会预计算callee，而是严格地在每个使用callee的地点完整运行一遍callee。</p>

<p>[1] David Pollak, Beginning Scala, Apress, 2009, p31</p>
]]></content>
  </entry>
  
</feed>
