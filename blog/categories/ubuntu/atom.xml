<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Merge Multiple PDF Files in Ubuntu]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/20/010838/"/>
    <updated>2016-02-20T01:08:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/20/010838</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a built-in utility in Ubuntu 14.04 &ldquo;pdfunite&rdquo;.
Merge multiple pdf files with it (the last one is the output file name):</p>

<p><code>pdfunite DataMining-ch* AProgrammersGuide2DataMining.pdf</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Wordpress on Ubuntu 14.04]]></title>
    <link href="http://leetschau.github.io/blog/2015/12/23/030734/"/>
    <updated>2015-12-23T03:07:34+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/12/23/030734</id>
    <content type="html"><![CDATA[<p>MySQL database is installed on the host when installing
Phabricator. We use this database as backend of our new
Wordpress service.</p>

<pre><code>$ sudo useradd -m -s /bin/bash wordpress
$ sudo su - wordpress
$ mysql -u root -p'NewFairs0910'
&gt; CREATE DATABASE wordpress;
&gt; CREATE USER nfadmin@localhost IDENTIFIED BY 'nfMysQL2015';
&gt; GRANT ALL PRIVILEGES ON wordpress.* TO nfadmin@localhost;
&gt; FLUSH PRIVILEGES;
&gt; exit
$ wget http://wordpress.org/latest.tar.gz
$ tar zxf latest.tar.gz
$ sudo apt-get update
$ sudo apt-get install php5-gd libssh2-php
$ cd ~/wordpress
$ cp wp-config-sample.php wp-config.php
</code></pre>

<p>Modify wp-config.php according to above values for mysql:</p>

<pre><code>define('DB_NAME', 'wordpress');
define('DB_USER', 'nfadmin');
define('DB_PASSWORD', 'nfMysQL2015');
define('DB_HOST', 'localhost');
</code></pre>

<p>Create file /etc/apache2/sites-available/wordpress.conf:</p>

<pre><code>&lt;VirtualHost *:80&gt;
  ServerName cms.newfairs-inc.com
  DocumentRoot /home/wordpress/wordpress
&lt;/VirtualHost&gt;

&lt;Directory "/home/wordpress/wordpress"&gt;
  Require all granted
&lt;/Directory&gt;
</code></pre>

<p>Enable it:</p>

<pre><code>cd /etc/apache2/sites-enabled
ln -s /etc/apache2/sites-available/wordpress.conf wordpress.conf
</code></pre>

<p>Then restart apache server: <code>sudo service apache2 restart</code>.</p>

<p>Open &ldquo;cms.newfairs-inc.com&rdquo; in browser, start wordpress installation.</p>

<pre><code>website title: Newfairs CMS
username: nfcms
pwd: nEwfAIrsAt6102
</code></pre>

<p>Note: A &ldquo;Forbidden. You don&rsquo;t have permission to access /&rdquo; error appears
without &ldquo;Require all granted&rdquo;.</p>

<p>After installation, install wordpress plugin &ldquo;WordPress REST API (Version 2)&rdquo;
with <a href="http://wp-cli.org/">wp-cli.phar</a>:</p>

<pre><code>curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod 755 wp-cli.phar
mv wp-cli.phar /usr/local/bin/wp
wp --info
sudo su - wordpress
cd wordpress
wp plugin list
wp plugin search rest
wp plugin install rest-api
</code></pre>

<p>Note:</p>

<p>We can&rsquo;t install plugin &ldquo;WordPress REST API (Version 2)&rdquo; through
&ldquo;Plugin -> Add New&rdquo; in Wordpress web page.</p>

<p>It need ssh/ftp username and password. And the ssh port must be 22.
While our ssh port is 222.</p>

<p>Ref:</p>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-14-04">https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-ubuntu-14-04</a></p>

<h1>Reset Wordpress Admin password</h1>

<pre><code>su - wordpress
cd $HOME/wordpress    # which is $WP_HOME
wp user list          # where you can find the administrator's name is nfcms
wp user update nfcms --user_pass=nEwfAIrsAt6102
</code></pre>

<p>Ref:</p>

<p><a href="http://codex.wordpress.org/Resetting_Your_Password">Resetting Your Password</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Dell Ubuntu Laptop Turn Off Screen and Lock]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/27/120807/"/>
    <updated>2015-10-27T12:08:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/27/120807</id>
    <content type="html"><![CDATA[<p>In [System Settings -> Brightness &amp; Lock],
set &ldquo;Turn screen off when inactive for&rdquo; to &ldquo;Never&rdquo; and turn off &ldquo;Lock&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Meteor and Node App on Ubuntu 14.04 VPS]]></title>
    <link href="http://leetschau.github.io/blog/2015/07/22/082040/"/>
    <updated>2015-07-22T08:20:40+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/07/22/082040</id>
    <content type="html"><![CDATA[<h1>Setup Environment with MUP</h1>

<p>On your laptop, install mup with <code>npm install -g mup</code>.
In a new directory, create a mup project with <code>mup init</code>.
Set &ldquo;setupMongo&rdquo;, &ldquo;setupNode&rdquo; and &ldquo;setupPhantom&rdquo; to &ldquo;true&rdquo; in mup.json,
and run <code>mup setup</code>.</p>

<h1>Run Apps</h1>

<p>To install the <strong>first</strong> Meteor app, <code>mup deploy</code>.</p>

<p>To install the second (there has been a Meteor app is running) or more,
set &ldquo;setupMongo&rdquo;, &ldquo;setupNode&rdquo; and &ldquo;setupPhantom&rdquo; to &ldquo;false&rdquo; in mup.json,
change &ldquo;appname&rdquo;, &ldquo;app&rdquo; and values in &ldquo;env&rdquo; accordingly.
Finally run <code>mup deploy</code>.</p>

<p>For Node app, first get the source code with git,
then run it with forever, which is installed by mup:</p>

<pre><code>aptitude install git
git clone ... projHome
cd projHome
npm install
# confirm port number in config.js
forever start app.js  # when the main script is "app.js"
</code></pre>

<p>Get the app status with <code>forever list</code>.
If the app can&rsquo;t start, print logs with <code>forever logs 1</code>
(if the target app&rsquo;s index in <code>forever list</code> is 1).</p>

<h1>Setup Routes</h1>

<p>Note: MUP requires Node v0.10.36 or later.
So do NOT install node with <code>aptitude install nodejs</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux Configurations for Unity Desktop]]></title>
    <link href="http://leetschau.github.io/blog/2015/06/18/112729/"/>
    <updated>2015-06-18T11:27:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/06/18/112729</id>
    <content type="html"><![CDATA[<p>Verified on Ubuntu 14.04, 2015-6-18.</p>

<h1>Prefix</h1>

<p><code>M-f</code> will activate the Unity HUB, so use <code>M-q</code> as tmux prefix:
<code>set -g prefix M-q</code>.</p>

<h1>Get Help</h1>

<ul>
<li><p>List all shortcuts: prefix ?</p></li>
<li><p>List all commands: <code>tmux list-commands</code></p></li>
</ul>


<h1>Open a new Window/Pane</h1>

<p>bind -n M-/ split-window -h
bind -n M&ndash; split-window -v
bind -n M-n new-window</p>

<h1>Resize Pane in a Window</h1>

<p>Use Ctrl- arrow key to resize pane:</p>

<pre><code>bind -n -r ^Left resize-pane -L 5
bind -n -r ^Down resize-pane -D 5
bind -n -r ^Up resize-pane -U 5
bind -n -r ^Right resize-pane -R 5
</code></pre>

<p>Use <code>M-z</code> to maximize/restore a pane:
<code>bind -n M-z resize-pane -Z</code>.</p>

<h1>Rotate Panes in a Window</h1>

<p>Use default settings: prefix + Space</p>

<h1>Jump between Window and Pane</h1>

<p>Alt-(1~9): jump between windows;</p>

<p>Alt-h/j/k/l: jump between panes;</p>

<pre><code>bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

bind -n M-k select-pane -U
bind -n M-j select-pane -D
bind -n M-h select-pane -L
bind -n M-l select-pane -R
</code></pre>

<h1>Move Window</h1>

<p>Moving window behaves different with i3wm.
If the target window exists, you have to use <code>join-pane</code>, otherwise <code>break-pane</code>.</p>

<p>I use <code>if-shell</code> to test if the target window exists.</p>

<p>Then add target window number provided by user (%1, which means the first user-input parameter)
after &ldquo;-t&rdquo; option of <code>join-pane</code>.
The default target format is <code>#{session_name}:#{window_index}.#{pane_index}</code>.
See <code>man tmux</code> for details.</p>

<pre><code>bind -n M-i command-prompt -p "move current pane to window:" "if-shell 'tmux list-windows |grep \"^%1\":' 'join-pane -t:\"%1\"' 'break-pane'"
</code></pre>

<h1>Other helpful resources</h1>

<p>Use <code>^A</code> to represent &ldquo;Ctrl-A&rdquo;.</p>

<p>Shutdown visual alerts:</p>

<pre><code>setw -g monitor-activity on
set -g visual-activity off
</code></pre>

<h2>Commands</h2>

<ul>
<li><code>clock-mode</code>: display a large clock on the terminal</li>
</ul>


<h2>Shortcuts</h2>

<pre><code>bind -n M-a command-prompt
bind -n M-r command-prompt -p "rename window name to:" "rename-window '%%'"
bind r source-file ~/.tmux.conf \; display "Reloaded!"
</code></pre>
]]></content>
  </entry>
  
</feed>
