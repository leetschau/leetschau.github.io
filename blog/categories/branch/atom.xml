<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Branch | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/branch/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-02-21T11:06:40+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将Master分支上的最后一个Commit移动到Develop分支上]]></title>
    <link href="http://leetschau.github.io/blog/2016/01/30/132538/"/>
    <updated>2016-01-30T13:25:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/01/30/132538</id>
    <content type="html"><![CDATA[<p>代码库的开发分支是develop，修改代码前没有注意还处在master分支，
修改完并提交后才意识到提交到了master分支上，
需要将这个commit移动到develop分支上：</p>

<pre><code>git checkout develop
git cherry-pick master
git checkout master
git reset --hard HEAD~
</code></pre>

<p>Ref: <code>git help cherry-pick</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checkout Remote Git Branch]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/21/175117/"/>
    <updated>2015-04-21T17:51:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/21/175117</id>
    <content type="html"><![CDATA[<p>We clone a remote repository, check out a remote branch.</p>

<pre><code>$ git clone https://github.com/limingth/meteor-master-classes.git
$ cd meteor-master-classes
$ git branch -r
origin/HEAD -&gt; origin/master
origin/fanjinhui
origin/lichao
origin/limingth
origin/master
origin/sean
origin/tianchao
</code></pre>

<p>So the remote repository&rsquo;s name is &ldquo;origin&rdquo;.
First check the initial status of the repository:</p>

<pre><code>$ git branch
* master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p>Now checkout the remote branch:</p>

<pre><code>$ git fetch
$ git checkout lichao
</code></pre>

<p>Check the status of the repository after checked out:</p>

<pre><code>$ git br
* lichao     &lt;---
  master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branches configured for 'git pull':
    lichao merges with remote lichao        &lt;---
    master merges with remote master
  Local refs configured for 'git push':
    lichao pushes to lichao (up to date)    &lt;---
    master pushes to master (up to date)
</code></pre>

<p>You can see there are 2 kinds of relationship between local and remote branches: pull and push.
Branch &ldquo;lichao&rdquo; and &ldquo;origin/lichao&rdquo; was linked bidirectional after checked out.</p>

<p>Some notes:</p>

<ul>
<li><p>The name of the remote branch to be checked out is its full name except the &ldquo;origin/&rdquo; part,
like &ldquo;lichao&rdquo; in <code>git checkout lichao</code>;</p></li>
<li><p><code>git fetch</code> synchronize your local repository with remote side.
So it&rsquo;s not necessary if you don&rsquo;t want sync with remote.</p></li>
</ul>


<p>You can verify this by <code>git branch -avv</code>.</p>

<p>Ref:</p>

<ul>
<li><p><a href="http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git">http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/1783405/checkout-remote-git-branch">http://stackoverflow.com/questions/1783405/checkout-remote-git-branch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy, Tag and Branch of Subversion]]></title>
    <link href="http://leetschau.github.io/blog/2013/08/30/180938/"/>
    <updated>2013-08-30T18:09:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/08/30/180938</id>
    <content type="html"><![CDATA[<p>Tag and branch are the same from the point of view of svn server. They are both the &ldquo;copy&rdquo; operation (this is why they use the same menu item in TortoiseSVN, they are actually the &ldquo;svn copy&rdquo; command). Copy operation of svn server will create a link to original revision. So create tag or branch will not double the disk space usage. The disk space usage is actually related with how many files are modified based on a specific revision.</p>

<p>What is the difference of tag and branch? When you create a &ldquo;tag&rdquo;, you mean you will save this link at a &ldquo;baseline area&rdquo; where it&rsquo;s prohibited to do checkout-modify-checkin operation. On the contrary, if you create a &ldquo;branch&rdquo;, you will do checkout-modify-checkin operation in the future for new feature development or bug fix.</p>

<p>Use &ldquo;svn help copy&rdquo; for explanations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hg单用户操作的分支合并]]></title>
    <link href="http://leetschau.github.io/blog/2013/04/22/131818/"/>
    <updated>2013-04-22T13:18:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/04/22/131818</id>
    <content type="html"><![CDATA[<p>$ hg init hgBranchTest // 新建一个名为hgBranchTest的repo，hg自动创建目录</p>

<p>$ cd hgBranchTest</p>

<p>$ vi readme.txt</p>

<p>$ cat readme.txt
this is the first version</p>

<p>$ hg add readme.txt
$ hg ci -m &ldquo;first time commit&rdquo; // or use &ldquo;hg ci -A -m &hellip;&rdquo; for add and commit
$ vi readme.txt
$ cat readme.txt
this is the first version
add a line
$ hg st
M readme.txt
$ hg log
修改集:  0:ffecf69346a5
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:49:29 2013 +0100
摘要:  first time commit
$ hg diff
diff -r ffecf69346a5 readme.txt
&mdash; a/readme.txt  Mon Apr 22 05:49:29 2013 +0100
+++ b/readme.txt  Mon Apr 22 05:51:03 2013 +0100
@@ -1,1 +1,2 @@
this is the first version
+add a line
$ hg ci -m &ldquo;第二次提交&rdquo;
$ hg log
修改集:  1:770a5cda1659
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:51:42 2013 +0100
摘要:  第二次提交
修改集:  0:ffecf69346a5
用户:  Li Chao
日期:  Mon Apr 22 05:49:29 2013 +0100
摘要:  first time commit
$ hg branch
default
$ hg branches
default      1:770a5cda1659
$ hg branch red
marked working directory as branch red
(branches are permanent and global, did you want a bookmark?)
$ vi readme.txt
$ cat readme.txt
this is the first version
add a line
add the 3rd line
$ hg branches   // 没有提交（commit）之前分支不出现在branches列表中
default      1:770a5cda1659
$ hg branch   // 当前仍在red分支下
red
$ hg ci -m &ldquo;commit on branch red&rdquo;
$ hg branches
red       2:86e30b1564a9
default      1:770a5cda1659 (inactive)
$ hg log
修改集:  2:86e30b1564a9
分支:  red
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:57:07 2013 +0100
摘要:  commit on branch red
修改集:  1:770a5cda1659
用户:  Li Chao
日期:  Mon Apr 22 05:51:42 2013 +0100
摘要:  第二次提交
修改集:  0:ffecf69346a5
用户:  Li Chao
日期:  Mon Apr 22 05:49:29 2013 +0100
摘要:  first time commit
$ hg log -b red // 只显示red分支上的changeset
修改集:  2:86e30b1564a9
分支:  red
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:57:07 2013 +0100
摘要:  commit on branch red
$ hg tip  // tip是最近版本的意思
修改集:  2:86e30b1564a9
分支:  red
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:57:07 2013 +0100
摘要:  commit on branch red
$ hg heads  // head表示各分支最近版本
修改集:  2:86e30b1564a9
分支:  red
标签:  tip
用户:  Li Chao
日期:  Mon Apr 22 05:57:07 2013 +0100
摘要:  commit on branch red
修改集:  1:770a5cda1659
用户:  Li Chao
日期:  Mon Apr 22 05:51:42 2013 +0100
摘要:  第二次提交
$ hg up default   // 切换当前分支为default
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
$ cat readme.txt  // 分支合并前文件内容
this is the first version
add a line
$ hg merge red
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
(branch merge, don&rsquo;t forget to commit)
$ cat readme.txt  // 合并后文件内容改变
this is the first version
add a line
add the 3rd line
$ hg st
M readme.txt
$ hg ci -m &ldquo;after merge with branch red&rdquo;
$ hg log
修改集:  3:9a5f0a2b7b9c
标签:  tip
父亲:  1:770a5cda1659 // 合并后提交的版本的特点是有两个parent
父亲:  2:86e30b1564a9
用户:  Li Chao
日期:  Mon Apr 22 06:00:31 2013 +0100
摘要:  after merge with branch red
修改集:  2:86e30b1564a9
分支:  red
用户:  Li Chao
日期:  Mon Apr 22 05:57:07 2013 +0100
摘要:  commit on branch red
修改集:  1:770a5cda1659
用户:  Li Chao
日期:  Mon Apr 22 05:51:42 2013 +0100
摘要:  第二次提交
修改集:  0:ffecf69346a5
用户:  Li Chao
日期:  Mon Apr 22 05:49:29 2013 +0100
摘要:  first time commit</p>
]]></content>
  </entry>
  
</feed>
