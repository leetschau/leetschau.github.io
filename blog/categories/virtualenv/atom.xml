<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Virtualenv | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/virtualenv/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T15:03:30+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Data Analysis Toolkit With Anaconda]]></title>
    <link href="http://leetschau.github.io/blog/2016/06/15/190457/"/>
    <updated>2016-06-15T19:04:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/06/15/190457</id>
    <content type="html"><![CDATA[<h1>Setup</h1>

<p>Download Anaconda installer (Anaconda3-4.0.0-Linux-x86_64.sh) and install it
to folder ~/apps/anaconda3 (to uninstall, just remove this folder).</p>

<p>Add the following line into ~/.zshenv:</p>

<pre><code>ANACONDA_HOME=$HOME/apps/anaconda3
</code></pre>

<p>Enable Anaconda working environment with
<code>source ~/apps/anaconda3/bin/activate $ANACONDA_HOME</code>.
Leave this environment with <code>source deactivate</code>.</p>

<p>List all environments with <code>conda env list</code>.
If there is a &lsquo;root&rsquo; in the output, you can activate Anaconda as a common
conda env with <code>source activate root</code>.</p>

<p>Create a new Python 2.7 virtual environment with
<code>conda create -n py27 python=2.7</code>, make it the current environment with
<code>source activate py27</code>. You can use this command to switching between any
conda-managed environment without worrying about nested-virtualenv.</p>

<p>If you met an &ldquo;no such file or directory: activate&rdquo; error
when running <code>source activate ...</code>, use the full path
<code>~/apps/anaconda3/bin/activate</code> instead of <code>activate</code>.</p>

<p>Anaconda contains many important Python dev tools, including pip, ipython,
conda (which can be used as a replacement for pip and virtualenv).
If you want use it as the primary Python environment, add <code>$ANACONDA_HOME</code>
before the existing <code>$PATH</code>.</p>

<p>But Anaconda has no Python 2.x, so at least on Ubuntu 14.04
this is not the recommended way.
On Ubuntu 16.04, there is no Python 2.x by default, so use Python 3.5 and pip
in Anaconda3 is practical.</p>

<p>Do not add <code>$ANACONDA_HOME</code> after the <code>$PATH</code>, which will expose some binary
like <code>conda, jupyter</code>, while the other (like python and pip) will be covered
by system equivalent. This will lead inconsistent behavior and failure of
<code>conda</code> and <code>jupyter</code>.</p>

<p>Ref:</p>

<p><a href="http://www.ericmajinglong.com/2014/09/23/5-great-things-about-the-anaconda-distribution/">http://www.ericmajinglong.com/2014/09/23/5-great-things-about-the-anaconda-distribution/</a></p>

<h1>Notebook</h1>

<p>Start jupyter notebook server with <code>jupyter notebook</code>.
It creates a new window in existing browser session with url
&ldquo;<a href="http://localhost:8888/tree">http://localhost:8888/tree</a>&rdquo;.</p>

<p>Click [New -> Python3] at the right side of the page to create a new notebook
session. In the new page, use [File -> Rename] to give it a name.</p>

<p>When you click any of the notebook file <code>*.ipynb</code> (here is chap01ex.ipynb)
in browser, it will be opened in a new tab with url
&ldquo;<a href="http://localhost:8888/notebooks/chap01ex.ipynb">http://localhost:8888/notebooks/chap01ex.ipynb</a>&rdquo;.</p>

<p>Jupyter notebook support all vi-style key shortcuts, which conflicts with
Chrome plugin Vimium. So click the Vimium icon at the right side of the address
bar, and add a rule:</p>

<pre><code>Patterns: https?://localhost:8888/notebooks/*
</code></pre>

<p>Leave the &ldquo;Keys&rdquo; textbox blank, which means disable all keys of Vimium
under this pattern.</p>

<p>For Firefox, in [Tools -> Add-ons -> Extensions -> VimFx -> Blacklist], add
<code>http://localhost:8888/*</code> to disable VimFx key shortcuts on Jupyter web page.</p>

<p>Now you can use jupyter key shortcuts freely.
Use <code>h</code> key list all available shortcuts.
Note that shortcuts listed there are all capital letter,
while actually you should use the corresponding small letter.</p>

<p>Use <code>j</code>/<code>k</code> to select active cell, <Enter> to edit it, <code>c</code> to copy,
<code>v</code> to paste, <code>x</code> to delete it.</p>

<p>Use <code>m</code> to make text in a cell as markdown text, <code>y</code> to code.</p>

<p>For markdown cell, use <Enter> to edit it, use Ctrl-Enter to run it
(turn text from edit mode to markdown preview mode).</p>

<p>Use Alt-Enter to evaluate the current cell and insert a blank cell below.</p>

<p>Use <code>s</code> to save current notebook and setup a &ldquo;checkpoint&rdquo;,
use [File -> Revert to Checkpoint] to discard all changes after that checkpoint.</p>

<p>Use <code>o</code> to toggle output of the current cell,
<code>Shift-o</code> to toggle output scrolling.</p>

<p>Use [File -> Download as -> Python(.py)] to create a runnable Python script
from the current jupyter notebook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual Environment in Python]]></title>
    <link href="http://leetschau.github.io/blog/2014/01/09/183148/"/>
    <updated>2014-01-09T18:31:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/01/09/183148</id>
    <content type="html"><![CDATA[<h1>virtualenv</h1>

<p>virtualenvwrapper is not file based (it depends heavily on <code>workon</code>).
And it&rsquo;s setup is not very easy.
While virtualenv can be used like npm (one virtual env in one project).
So I prefer virtualenv to virturalenvwrapper
for managing Python project environment.</p>

<p>Install it with <code>sudo pip install virtualenv</code>.</p>

<p>Workflow with virtualenv:</p>

<ol>
<li><p>In a Python project root folder, run <code>virtualenv venv</code> to build the home
folder for virtual environment, and add <code>venv</code> into .gitignore.</p></li>
<li><p>Run <code>. venv/bin/activate</code> to activate the environment;</p></li>
<li><p><code>pip install -r requirements.txt</code> to install dependent packages;</p></li>
<li><p>Edit files and test project with <code>python ...</code>;</p></li>
<li><p>Quit environment with <code>deactivate</code>;</p></li>
</ol>


<p>Note:</p>

<p>Add <code>-p &lt;python-bin-path&gt;</code> to use alternative Python executable.
For example, <code>virtualenv -p /usr/bin/python3 venv</code>
to build an environment using Python 3.</p>

<h1>virturalenvwrapper</h1>

<h2>Installation</h2>

<pre><code>$ sudo pip install virtualenvwrapper
</code></pre>

<p>Add the following lines into ~/.zshenv:</p>

<pre><code>WORKON_HOME=~/docs/workspace/python-workspace/env-home
PROJECT_HOME=~/docs/workspace/python-workspace/project-home
</code></pre>

<p>and create the two folders specified above.</p>

<p>Add following lines into ~/.zshrc:</p>

<pre><code>source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<h2>Usage</h2>

<h3>For new project</h3>

<p>Create a new project funcPy using Python 3.x (run in any foler):</p>

<pre><code>mkproject -p /usr/bin/python3 funcPy
</code></pre>

<p>The CWD will be changed into the project root automatically.</p>

<p>Verify:</p>

<pre><code>$ python -V
Python 3.4.3
$ deactivate
$ python -V
Python 2.7.6
</code></pre>

<p>Coming into the project root and virtualenv later: <code>workon funcPy</code>.
Use <tab> key to autocomplete after <code>workon</code>.</p>

<p>If using the default Python version (in Ubuntu 14.04 it is 2.7)
for your virtual environment, create the project with <code>mkproject funcPy</code>.</p>

<p>To debug this project in PyCharm, open the project in PyCharm
(get the project root folder with <code>workon funcPy &amp;&amp; echo $PWD</code>).
In [File -> Settings -> Project: funcPy -> Project Interpreter],
press the gear button on the right side of &ldquo;Project Interpreter&rdquo;,
choose &ldquo;Add Local&rdquo;, select the python executable in the corresponding
virtualenv folder (get it with <code>cdvirtualenv &amp;&amp; echo $PWD/bin/python</code>).</p>

<p>The python intepreter config is persisted in PyCharm project configuration,
so no need to use <code>workon</code> every time open the project in PyCharm.</p>

<p>See
<a href="http://bit.ly/23b30fY">Adding Existing Virtual Environment in PyCharm 2016.1 Help</a>
for reference.</p>

<p>Note:</p>

<p>If the script has command line arguments,
add them in [Run -> Edit Configurations -> Script parameters].</p>

<h3>For existing project</h3>

<pre><code>git clone git@github.com:mbr/flask-bootstrap.git
cd flask-bootstrap
mkvirtualenv flask-bootstrap
setvirtualenvproject
cd sample_app
pip install -r requirements.txt
mkvirtualenv testenv2
setvirtualenvproject
</code></pre>

<p>Now there are 2 virtualenvs: flask-bootstrap and testenv2 are associated with
project flask-bootstrap.
If you input <code>workon</code> and press TAB, you can see both these 2 virtualenvs.
No matter which one you choose, you will be transmitted to the root folder of
project flask-bootstrap.</p>

<p>Note: use <code>rmvirtualenv testenv2</code> to remove a virtualenv.</p>

<h2>Discussion</h2>

<p>There are two concepts in virturalenvwrapper.
One is &ldquo;virtual environment&rdquo;, which has its own python executables.
The other is &ldquo;project&rdquo;, where your source codes resides.
They are n-to-1 relationship.
If you specify a project-virtualenv relation with
<code>setvirtualenvproject path-to-project-A path-to-env-X</code>,
while the virtualenv X already has associated to project B,
the new project A will replace the old project B.</p>

<p>Why not use the same folder for both project and environment, like npm?</p>

<p>Reason 1:
A project can associate with many virtualenvs (through <code>setvirtualenvproject</code>),
so for example you can test your application under Python 2 and 3
in difference virtual environments.</p>

<p>Reason 2:
Unlike the &ldquo;node_modules&rdquo; folder in a node.js project,
Python project can&rsquo;t put packages directly into the source folder.
Use <code>pip install the-package &amp;&amp; pip freeze &gt; requirements.txt</code> to install
a package and save it into dependency document,
like <code>npm install the-package --save</code>.
Activate you virtual env and use <code>pip install -r requirements.txt</code>
to install all dependencies into the virtual environment.</p>

<p>&ldquo;mkvirtualenv env1&rdquo; will create a new &ldquo;virtual environment&rdquo; in $WORKON_HOME,
regardless your CWD.</p>

<p>&ldquo;mkproject proj1&rdquo; will create both a &ldquo;virtual environment&rdquo; named &ldquo;proj1&rdquo;
in $WORKON_HOME and a &ldquo;proj1&rdquo; folder in $PROJECT_HOME.
Then go to $PROJECT_HOME/proj1,
and activate the virtual environment proj1. So &ldquo;mkproject proj1&rdquo; equals to:</p>

<pre><code>$ mkvirtualenv proj1
$ mkdir $PROJECT_HOME/proj1
$ cd $PROJECT_HOME/proj1
$ workon proj1
</code></pre>

<p>Associate an existing virtualenv and an existing project with command</p>

<pre><code>$ setvirtualenvproject virtualenv_path project_path
</code></pre>

<p>Under the hood, virturalenvwrapper create a &ldquo;.project&rdquo; file under the root of
the virtualenv, in which is the project path.</p>

<p>List site packages:</p>

<pre><code>$ lssitepackages
</code></pre>

<p>Run a command in all virtualenvs under WORKON_HOME:</p>

<pre><code>$ allvirtualenv command with arguments
</code></pre>

<p>Change the current working directory to the site-packages of current virtualenv($VIRTUAL_ENV):</p>

<pre><code>$ cdsitepackages
</code></pre>

<p>Remove virtualenv:</p>

<pre><code>$ rmvirtualenv &lt;env_name&gt;
</code></pre>

<h2>Verification</h2>

<p>In a virtualenv, all python executables are in $WORKON_HOME.</p>

<pre><code>[lichao@lichao480:~] 
$ workon 
env1 env2 proj1 
[lichao@lichao480:~] 
$ which python 
/usr/bin/python 
[lichao@lichao480:~] 
$ workon env1 
(env1)[lichao@lichao480:~] 
$ which python 
/home/lichao/apps/virenv_home/env1/bin/python 
(env1)[lichao@lichao480:~] 
$ workon env2 
(env2)[lichao@lichao480:~PROJECT_HOME/proj2] 
$ which python 
/home/lichao/apps/virenv_home/env2/bin/python
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtualenv使用笔记]]></title>
    <link href="http://leetschau.github.io/blog/2011/02/18/151635/"/>
    <updated>2011-02-18T15:16:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/02/18/151635</id>
    <content type="html"><![CDATA[<p>以在沙箱中安装googlemaps(<a href="http://pypi.python.org/pypi/googlemaps/1.0.2">http://pypi.python.org/pypi/googlemaps/1.0.2</a>)为例说明如何用virtualenv隔离安装python第3方库
// 离线安装virtualenv(<a href="http://pypi.python.org/pypi/virtualenv">http://pypi.python.org/pypi/virtualenv</a>)：首先下载安装包(gz文件)，解压后运行：
F:\ghost\tempFiles\virtualenv-1.7.1.2>setup install
（无法找到setup？参考笔记：***）
// 生成沙箱
E:\Docs\PythonSandbox>virtualenv gmapenv
&hellip;
// 进入沙箱
E:\Docs\PythonSandbox>cd gmapenv\Script
（linux下是cd gmapenv/bin）
// 测试googlemaps是否已安装
E:\Docs\PythonSandbox\gmapenv\Script>python -c &ldquo;import googlemaps&rdquo;
（在Windows平台上用单引号会报错）
// 激活沙盒
E:\Docs\PythonSandbox\gmapenv\Script>activate
（实际上是在$PATH前面加上了当前路径，以保证安装的库放在当前路径下）
// 在线安装第3方库
(gmapenv) E:\Docs\PythonSandbox\gmapenv\Script>pip install googlemaps
// 验证测试googlemaps已安装
(gmapenv) E:\Docs\PythonSandbox\gmapenv\Script>python -c &ldquo;import googlemaps&rdquo;
// 卸载googlemaps
(gmapenv) E:\Docs\PythonSandbox\gmapenv\Script>pip uninstall googlemaps
// 退出沙盒：
(gmapenv) E:\Docs\PythonSandbox\gmapenv\Script>deactivate
注：当不能在线安装时：首先进入隔离环境activate，当安装包是zip格式文件（exe,gz,egg），用easy_install installer_file_name.ext（如aa.exe, bb.gz, cc.egg）的方法安装（参考<a href="http://stackoverflow.com/questions/3271590/can-i-install-python-windows-packages-into-virtualenvs%EF%BC%89%EF%BC%9B%E5%AF%B9%E4%BA%8Emsi%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E8%BF%98%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%E5%AE%89%E8%A3%85%E5%9C%A8%E9%9A%94%E7%A6%BB%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E6%89%80%E4%BB%A5%E6%9C%80%E5%A5%BD%E8%BF%98%E6%98%AF%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%89%EF%BC%9B">http://stackoverflow.com/questions/3271590/can-i-install-python-windows-packages-into-virtualenvs%EF%BC%89%EF%BC%9B%E5%AF%B9%E4%BA%8Emsi%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E8%BF%98%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%E5%AE%89%E8%A3%85%E5%9C%A8%E9%9A%94%E7%A6%BB%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E6%89%80%E4%BB%A5%E6%9C%80%E5%A5%BD%E8%BF%98%E6%98%AF%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%89%EF%BC%9B</a></p>

<p>注2：activate只是将隔离环境的python.exe放在了$PATH的最前面，这样安装库时会安装在隔离环境的site-packages里；</p>

<p>注3：需要卸载一个隔离环境时只要删除文件夹就OK了；</p>

<p>主要参考 <a href="http://wiki.pylonshq.com/display/pylonscookbook/Using+a+Virtualenv+Sandbox">http://wiki.pylonshq.com/display/pylonscookbook/Using+a+Virtualenv+Sandbox</a> 中的windows部分。</p>
]]></content>
  </entry>
  
</feed>
