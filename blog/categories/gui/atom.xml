<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gui | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/gui/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note About Rest Client]]></title>
    <link href="http://leetschau.github.io/blog/2016/04/09/204200/"/>
    <updated>2016-04-09T20:42:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/04/09/204200</id>
    <content type="html"><![CDATA[<h1>httpie + jq</h1>

<p><a href="https://github.com/jkbrzt/httpie">httpie</a> + <a href="https://stedolan.github.io/jq/">jq</a></p>

<p>前者是curl的增强版，后者用来处理httpie返回的json结果。</p>

<pre><code>http -b api.newfairs.com/Fair/_search query:='{ "match": { "nameZHCN": "中国上海国际栅栏护栏展览会暨研讨会" } }' size=5 fields:='["nameZHCN"]'
http -b api.newfairs.com/Fair/_search query:='{ "match": { "nameZHCN": "中国上海国际栅栏护栏展览会暨研讨会" } }' size=5 | jq '.hits.total'
http -b api.newfairs.com/Fair/_search query:='{ "match": { "nameZHCN": "中国上海国际栅栏护栏展览会暨研讨会" } }' size=5 | jq '.hits.hits[]._source.nameZHCN'
http -b api.newfairs.com/Fair/_search query:='{ "query": { "match": { "_id": "Ao3Ati9dvWBerBrn8" } } }' | jq '.hits.hits[]._source.nameZHCN'

http -b POST http://api.newfairs.com/Fair/_search query:='{"query":{"bool":{"must":[{"query_string":{"query":"五金机械"}}]}}}'|jq '.hits.hits[]._source.recurrence[].timeStart'   
</code></pre>

<p>-b 代表只显示response的body，不显示head，以方便后续jq进行下一步处理，
中括号代表array，例如<code>jq '.hits.hits[0]'</code>表示只显示第一个结果，
hits[]代表返回数组里的所有结果。</p>

<p>这二者结合fzf，可以实现Postman/Insomnia这类GUI工具的功能。</p>

<h1>Insomnia</h1>

<p><a href="http://insomnia.rest/">Insomnia</a>: Chrome App.</p>

<h2>Pros</h2>

<ul>
<li><p>Request和Response窗口是左右排列的，且宽度可以调节；</p></li>
<li><p>分级管理Request: Workspace -> Group -> Request，
只能同时打开一个Workspace，比Postman更整洁；</p></li>
<li><p>良好的快捷键支持，request body和环境变量编辑窗口中可以使用vi编辑模式；</p></li>
<li><p>可以为每个Workspace定义环境变量，然后在url中使用这些环境变量，见下面的演示；</p></li>
<li><p>按名称搜索request: 默认快捷键Ctrl-P;</p></li>
</ul>


<h2>Cons</h2>

<ul>
<li>没有云同步，只能本地import/export;</li>
</ul>


<h1>Postman</h1>

<p><a href="https://www.getpostman.com/">Postman</a>: Chrome App.</p>

<h2>Pros</h2>

<ul>
<li><p>分级管理request: Collection -> Folder -> Request，可以方便地搜索；
Collection实际就是高一级的Folder，当request数量多时，request面板会比较凌乱；</p></li>
<li><p>可以同步到云端，在不同机器上方便地同步；</p></li>
</ul>


<h2>Cons</h2>

<p>Request和Response窗口是上下排列的，当调试Post方法时，
打开的Body窗体基本占满了整个屏幕，而且是最小高度，不能再减小，
导致每次看response内容都要使用滚轮，非常不方便。</p>

<h1>Discussion</h1>

<h2>Insomnia的环境变量</h2>

<p>例如定义下面的环境变量：</p>

<pre><code>{
    "api_url": "http://api.newfairs.com",
    "inner_url": "http://192.168.100.24:9200/"
}
</code></pre>

<p>在request的url栏里可以这样定义url: <code>{{api_url}}/Fair/_search</code>，
点击request名称后面的三角图标并选择"Export as cURL"，可以看到url被替换成了
<code>http://api.newfairs.com/Fair/_search</code>.</p>

<h2>其他类似工具</h2>

<p>Firefox插件：Poster, RESTED, REST Easy, RESTClient.
前三者都不具备多Request管理功能，无法保存多个Request.
RESTClient可以定义favorite，但没有单独的窗体，查看不方便。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add GUI App Into `Run Application` List on Ubuntu]]></title>
    <link href="http://leetschau.github.io/blog/2016/01/30/131049/"/>
    <updated>2016-01-30T13:10:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/01/30/131049</id>
    <content type="html"><![CDATA[<p>There are many GUI apps which started with a shell script,
like <a href="http://3t.io/mongochef/">MongoChef</a>,
or <a href="http://www.syntevo.com/smartgit/">SmartGit</a>.</p>

<p>The most convenient way to run them in Ubuntu Unity is from
&ldquo;Run Application&rdquo; dialog (shortcut: Alt-F2).</p>

<p>Add them into the list with
<code>sudo ln -s /home/leo/apps/smartgit/bin/smartgit.sh smartgit</code>.</p>

<p>Start them with [Alt-F2, smartgit].</p>

<p>Note the link name shouldn&rsquo;t have extension, like &ldquo;.sh&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的图形化Git客户端]]></title>
    <link href="http://leetschau.github.io/blog/2015/11/19/103131/"/>
    <updated>2015-11-19T10:31:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/11/19/103131</id>
    <content type="html"><![CDATA[<p>这里的客户端不包括只有浏览功能的viewer，比如gitk, gitg等。
下面两个客户端都需要安装JRE. 不需要安装，解压后直接使用。</p>

<h1>GitEye</h1>

<p>需要在repo里增加一个.project文件，然后在.gitignore里加入这个文件，不够clean。</p>

<h1>SmartGit</h1>

<p>商业应用付费，非商业用途免费；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix GUI App Start Failure With No Display Found]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/25/213630/"/>
    <updated>2015-10-25T21:36:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/25/213630</id>
    <content type="html"><![CDATA[<p>When running <code>gitg</code> in Ubuntu terminal, I got errors below:</p>

<blockquote><p><strong> (gitg:29283): WARNING </strong>: Could not open X display</p>

<p>(gitg:29283): Gtk-WARNING **: cannot open display: localhost:10.0</p></blockquote>

<p>Solution: check you $DISPLAY value, if it&rsquo;s not &ldquo;:0.0&rdquo;,
run <code>export DISPLAY=:0.0</code>.</p>

<p>Ref: <a href="http://askubuntu.com/questions/438451/could-not-open-display-null-error-how-can-i-fix-this">http://askubuntu.com/questions/438451/could-not-open-display-null-error-how-can-i-fix-this</a></p>

<p>To test keycode of the same key in different OS,
I ssh to my Linux laptop with Kitty on Windows.
When I run <code>xev</code>, I got an error:
<code>xev: unable to open display ''</code>.</p>

<p>If you ssh to a remote server, and</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git GUI Clients on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/30/095841/"/>
    <updated>2015-04-30T09:58:41+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/30/095841</id>
    <content type="html"><![CDATA[<h1>gitg</h1>

<p>Very intuitive branch model.
You can select different branch,
which will be displayed as the left-most line in the branch view panel.
Cover the functions of giggle.</p>

<h1>gitk</h1>

<p>Come with git.
See all branches: <code>gitk --all</code>.
Not intuitive for branching information.</p>

<h1>git gui</h1>

<p>Install with <code>aptitude install git-gui</code>.</p>

<p>Use gitk&rsquo;s branch-browsing interface.</p>

<h1>SmartGit</h1>

<p><a href="http://www.syntevo.com/smartgit/">SmartGit</a> is free for non-commercial use.
You have to download the installer, extract it and run.</p>

<h1>giggle</h1>

<p>Install with <code>aptitude install giggle</code>.</p>

<p>You can browse the history of a file.</p>

<h1>git cola</h1>

<p>Install with <code>aptitude install git-cola</code>.</p>

<p>Like git gui, use gitk&rsquo;s branch-browsing interface, too.</p>

<h1>Summary</h1>

<p>gitg is the first choice.
SmartGit is good except its license restriction.</p>
]]></content>
  </entry>
  
</feed>
