<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Squirrel | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/squirrel/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-30T15:40:38+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hsql笔记]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/21/231615/"/>
    <updated>2013-03-21T23:16:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/21/231615</id>
    <content type="html"><![CDATA[<p><a href="http://hsqldb.org/">hsql</a>是一款开源的基于Java的数据库。</p>

<h1>数据库服务</h1>

<h2>使用默认配置直接启动</h2>

<p>运行$HSQL_HOME/bin/runServer.bat；</p>

<h2>配置服务参数</h2>

<p>如数据库文件名和服务监听端口等。</p>

<ul>
<li>通过命令行参数：（详见User guide -> Chapter 1 -> Server mode）通过runServer.bat文件可知它只是运行了&#8221;java -classpath ../lib/hsqldb.jar org.hsqldb.server.Server&#8221;，实际上可以加命令行参数指定服务特性。例如：</li>
</ul>


<p> java -cp ../lib/hsqldb.jar org.hsqldb.Server -database.0 file:mydb -dbname.0 xdb</p>

<ul>
<li>通过配置文件：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Server and Web Server Properties）在hsql服务启动目录（运行&#8221;java &hellip;Server&#8221;的目录）下创建一个server.properties文件，例如：</li>
</ul>


<p> server.database.0=godudb</p>

<p> server.port=3001</p>

<ul>
<li>通过程序代码：（详见User guide -> Chapter 13: HyperSQL Network Listeners -> Starting a Server from your Application）例如：</li>
</ul>


<p> HsqlProperties p = new HsqlProperties();</p>

<p> p.setProperty(&ldquo;server.database.0&rdquo;,&ldquo;file:/opt/db/accounts&rdquo;);</p>

<p> p.setProperty(&ldquo;server.dbname.0&rdquo;,&ldquo;an_alias&rdquo;);</p>

<p> // set up the rest of properties</p>

<p> // alternative to the above is</p>

<p> Server server = new Server();</p>

<p> server.setProperties(p);</p>

<p> server.setLogWriter(null); // can use custom writer</p>

<p> server.setErrWriter(null); // can use custom writer</p>

<p> server.start();</p>

<h1>客户端</h1>

<h2>图形界面操作</h2>

<p>这里用<a href="http://squirrel-sql.sourceforge.net/">squirrel-sql</a>作为客户端，运行$SQUIRREL_HOME/squirrel-sql.bat启动程序；</p>

<h3>安装hsql驱动</h3>

<p>将$HSQL_HOME/lib/hsqldb.jar拷贝到$SQUIRREL_HOME/lib下；</p>

<h3>配置数据库别名</h3>

<p>jdbc url: jdbc:hsqldb:hsql://localhost；</p>

<p>username: sa</p>

<p>password: 留空</p>

<p>然后连接就可以打开数据库了。</p>

<h3>数据库操作</h3>

<h4>建表</h4>

<p>在SQL面板里输入：</p>

<p> CREATE TABLE Person ( LastName varchar(10), FirstName varchar(10), Address varchar(10), Age int )</p>

<p>运行后在database/PUBLIC/TABLE下会生成一个名为Person的表；</p>

<h4>插入数据</h4>

<p>insert into person values(&lsquo;chad&rsquo;,&lsquo;lee&rsquo;,&lsquo;guangzhou&rsquo;,33)</p>

<h4>删除表</h4>

<p>drop table person</p>

<h3>持久化验证</h3>

<p>重启数据库服务后再用客户端连接服务，可以看到原来的表以及表中的数据都在，这样就实现了数据的持久化。</p>

<h2>程序代码操作</h2>

<p>下面的代码演示了初始化数据驱动，连接数据库，读取数据及其关闭数据库服务的完整过程，与上面的代码启动服务配合，可以实现对数据库的自动化测试。</p>

<p> try {
  Class.forName(&ldquo;org.hsqldb.jdbcDriver&rdquo;);
 } catch (Exception e) {
  System.err.println(&ldquo;ERROR: failed to load HSQLDB JDBC driver.&rdquo;);
  e.printStackTrace();
  return;
 }
 try {
  Connection conn = DriverManager.getConnection(&ldquo;jdbc:hsqldb:hsql://localhost:3001&rdquo;, &ldquo;SA&rdquo;, &ldquo;&rdquo;);
  String sql = &ldquo;select * from person&rdquo;;
  PreparedStatement content = conn.prepareStatement(sql);
  ResultSet res = content.executeQuery();
  // int rowcount = -1;
  // if (res.last()) { // ResultSet.last() is unsupported by hsql
  // rowcount = res.getRow();
  // }
  while (res.next()) {
   System.out.println(res.getString(1));
   System.out.println(res.getString(2));
   System.out.println(res.getString(3));
  }
  Statement st = conn.createStatement();
  st.execute(&ldquo;SHUTDOWN&rdquo;);
  conn.close();
 } catch (SQLException e) {
  // TODO Auto-generated catch block
  e.printStackTrace();
 }</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于squirrel-sql Client]]></title>
    <link href="http://leetschau.github.io/blog/2013/03/21/135036/"/>
    <updated>2013-03-21T13:50:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/03/21/135036</id>
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/squirrel-sql/">squirrel-sql client</a>官网上下载的fw.jar是它的一个核心组件，完整的portable版squirrel client是plainzip版，解压后运行squirrel-sql.bat，需要升级的话用前面提到的fw.jar替换$SQUIRREL_HOME/lib下的同名文件，使用中发现替换fw.jar后造成程序启动失败，所以最好使用原装的fw.jar。</p>

<p>调整界面字体：Main Menu -> File -> Global Preferences -> Fonts (Consolas/Arial 14 recommended)</p>

<p>调整SQL语句的字体：Main Menu -> Session -> Session Properties -> SQL -> SQL Entry Area: Font (Consolas 16 recommended)，这种方法每次退出后不能保存，要是全局设置中能修改SQL字体就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQuirrel SQL Client 连接 Derby 数据库过程]]></title>
    <link href="http://leetschau.github.io/blog/2011/12/29/141322/"/>
    <updated>2011-12-29T14:13:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2011/12/29/141322</id>
    <content type="html"><![CDATA[<p>前置步骤
 解压derby安装包；网络模式下作为Server需要运行$DERBY_HOME/bin/startNetworkServer.bat，内嵌模式下不需求运行此文件；
 内嵌模式下
使用$DERBY_HOME/bin/ij.bat创建数据库：connect ‘jdbc:derby:e://mydoc//derbyfiles//godu;create=true’;</p>

<p>或者使用Squirrel SQL创建数据库：首先安装内嵌驱动：</p>

<p>Name: Apache Derby Embedded</p>

<p>Example URL: jdbc:derby:path;</p>

<p>Website URL: <a href="http://db.apache.org/derby/">http://db.apache.org/derby/</a></p>

<p>Extra Class Path: f:\Software\db-derby-10.6.2.1-bin\lib\derby.jar（点击&#8221;List Drivers&#8221;）</p>

<p>Class Name: org.apache.derby.jdbc.EmbeddedDriver</p>

<p>然后创建数据库：</p>

<p>Name: derby@localhost</p>

<p>Driver: Apache Derby Embedded</p>

<p>URL: jdbc:derby:e:/mydoc/derbyfiles/godu;create=true;（如果不新建数据库，create=false）</p>

<p>user name &amp; password留空</p>

<p>确定后在Objects/derby@localhost/APP/TABLE下就可以看到NE表了，之后就可以使用SQL语句创建表格、插入数据了，derby似乎没有“用户”的概念：
create table conn(id int primary key, name varchar(20), protocol varchar(20), ip varchar(20), port int);  // 建表</p>

<p>insert into conn values(1,&lsquo;10024723&rsquo;, &lsquo;telnet&rsquo;, &lsquo;10.0.2.47&rsquo;, 23);    // 插入记录</p>

<p>update conn set id=10024723 where name=&lsquo;10024723&rsquo;;      // 修改记录</p>

<p>alter table conn add password varchar(20);      // 插入新列</p>

<p>update conn set username=&lsquo;godu&rsquo;,password=&lsquo;godu&rsquo; where id=10025022;    // 更新多个字段值</p>

<p>drop table ne;            // 删除表</p>

<p>内嵌式数据库与访问它的程序使用同一个JVM，所以当Squirrel SQL打开某个内嵌数据库时，ij.bat或者应用程序（通过JDBC）就不能访问该库；</p>

<p> 网络模式下
安装Apache Derby Client驱动程序：</p>

<p>名字：Apache Derby Client；</p>

<p>地址示例：jdbc:derby://<server>[:<port>]/<databaseName>[;<URL attribute>=<value>]；</p>

<p>网站地址：<a href="http://db.apache.org/derby%EF%BC%9B">http://db.apache.org/derby%EF%BC%9B</a></p>

<p>类路径：derbyclient-10.7.1.1.jar完整路径；</p>

<p>类名：org.apache.derby.jdbc.ClientDriver；</p>

<p>创建连接Derby数据库的别名：</p>

<p>名字：derby@67；</p>

<p>驱动程序：Apache Derby Client；</p>

<p>地址：jdbc:derby://10.0.3.67:1527/godu;create=true;</p>

<p>用户名：godu</p>

<p>密码：godu</p>
]]></content>
  </entry>
  
</feed>
