<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ipython | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ipython/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-11-11T14:51:43+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[增强版Python REPL]]></title>
    <link href="http://leetschau.github.io/blog/2016/06/05/081046/"/>
    <updated>2016-06-05T08:10:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/06/05/081046</id>
    <content type="html"><![CDATA[<h1>bpython</h1>

<ul>
<li><p>语法高亮；</p></li>
<li><p>参数列表提示；</p></li>
<li><p>方便地查看和修改配置文件；</p></li>
<li><p>同时支持Python 2.x和3.x；</p></li>
<li><p>方便地在editor和repl间切换；</p></li>
<li><p>rewind功能方便地在repl里编写多行代码：
在代码块里用快捷键Ctrl-R取消本行，以及之前输入的行</p></li>
<li><p>方便地保存repl中脚本到文件中；</p></li>
<li><p>F1列出所有快捷键</p></li>
</ul>


<h2>Ubuntu 14.04 Unity上的配置</h2>

<p>bpython保存文件的默认快捷键是Ctrl-S，为了解决Ubuntu 14.04 Unity, Tmux环境中，
执行Ctrl-S时出现挂死问题，启动bpython后，F3进入配置文件编辑窗口，将<code>save</code>的值改为F4:</p>

<pre><code>save = F4
</code></pre>

<p>为了解决默认F1启动Gnome terminal帮助，而不是bpython帮助问题，在Terminal菜单
[Edit -> Keyboard Shortcuts -> Contents -> Help]的快捷键用退格键变为"Disabled".
如果还不行，在Unity系统的
[System Settings -> Keyboard -> Shortcuts Launchers -> Launch help browser]的
快捷键也Disable掉。</p>

<h2>For Python3</h2>

<p>Install with <code>sudo pip3 install bpython</code>, start with <code>python3 -m bpython.cli</code>.</p>

<p>另外<a href="https://github.com/jonathanslenders/ptpython">ptpython</a>，功能与bpython类似，
但没有函数的参数列表提示。</p>

<p>IPython notebook也能实现类似的功能，但似乎比较重。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Python Script]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/16/212514/"/>
    <updated>2016-02-16T21:25:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/16/212514</id>
    <content type="html"><![CDATA[<p>Now I want to dubug a script named <code>filteringdata.py</code>.</p>

<h1>PyCharm Community Edition</h1>

<p>It&rsquo;s editor (with IdeaVim plugin), linter and debugger is
the most powerful and verbose in the 3 candidates.</p>

<p>Add the following lines into ~/.ideavimrc to swap colon and semicolon:</p>

<pre><code>nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
</code></pre>

<p>The code navigation shortcut &ldquo;Ctrl-Alt-Left/Right&rdquo; of the default keymap
&ldquo;Default for XWin&rdquo; (in File -> Settings) is conflict with
&ldquo;Switch workspace&rdquo;&rsquo;s shortcut key of Ubuntu Unity.
So change the &ldquo;Keymaps&rdquo; to &ldquo;Default for GNOME&rdquo;, whose code navigation key
is &ldquo;Alt-Shift-Left/Right&rdquo;.</p>

<h2>Editor Setup</h2>

<p>Setup editor font size:  [Font -> Primary font -> Size: 16]</p>

<p>Setup editor background to pure dark: [General -> Text -> Default text],
click the &ldquo;Background&rdquo; color icon, set R,G,B to 0,
click the &ldquo;Foreground&rdquo; color icon, set R,G,B to 255.</p>

<p>Set right margin :
[File -> Settings -> Editor -> Code Style -> General: Right margin (columns)],
set it&rsquo;s value to 80 instead of the default value 120.</p>

<p>Jump between editor and terminal: modify it to Alt-K (default: Alt-F12)
choose &ldquo;Add Keyboard Shortcut&rdquo;.</p>

<h2>Some Shortcuts</h2>

<p>Toggle Project View: Alt-1</p>

<p>Split window: Ctrl-Shift-A, input &ldquo;split&rdquo;, select &ldquo;Split vertical/horizontal&rdquo;</p>

<p>Jump between files: Ctrl-Shift-N</p>

<p>Jump between editor tabs and split window: Ctrl-Tab</p>

<p>Full screen: [View -> Enter Full Screen]</p>

<p>Clipboard history: Ctrl-Shift-v</p>

<p>Jump to previous/next function: Alt-Up/Down</p>

<h2>Discussion</h2>

<p>You can switch easily between &ldquo;Console&rdquo; and &ldquo;Debugger&rdquo; panels.
The Console panel distinguishes stdout and stderr with different colors,
which is particularly useful when debugging some programs
with both stdout and stderr outputs.</p>

<p>Meanwhile you can evaluate an expression at the runtime in &ldquo;Watches&rdquo; window.</p>

<h1>pudb</h1>

<p>Comparing with ipdb, pudb needn&rsquo;t add stub in source script.</p>

<p>Install:</p>

<pre><code>sudo pip install pudb
sudo chown -R leo:leo ~/.config/pudb
</code></pre>

<p>Or the Python3 version: <code>pip3 search pudb3</code>.</p>

<p>Debug Python script: <code>pudb filteringdata.py</code> (<code>pudb3 myPy3App.py</code> for Python3)
or with command line arguments: <code>pudb uploadES.py fairs.json production Fair</code>.</p>

<p>Use <code>?</code> to list all available commands.</p>

<p>Focus code window with <code>C</code>
(which is the default window focused once you are in pudb), <code>n</code> to step over,
<code>s</code> step into , <code>f</code> finish current function (like step out), <code>c</code> continue,
<code>o</code> to see the console output (very useful!).</p>

<p>Focus variable window with <code>V</code>.
In this window:
use <code>w</code> to toggle line wrap,
<code>[</code>/<code>]</code> to grow/shrink relative size of the window,
<code>=</code>/<code>-</code> to grow/shrink sidebar.
<code>\</code> to expand/collapse variable result.</p>

<p>Toggle focus on command line with &lsquo;Ctrl-x&rsquo;.</p>

<h1>ipdb</h1>

<p>There are totally 3 steps when debugging a Python script with
ipdb module: install, insert stubs in source codes and debug.</p>

<p>First install with <code>sudo pip install ipdb</code>.</p>

<p>Then add <code>from ipdb import set_trace</code> at the head into the script,
and add <code>set_trace()</code> at the first place you want the dubugger to stop.</p>

<p>Finally start a shell and run:</p>

<pre><code>$ ipython
...
IPython 4.0.1 ...
...
In [1]: %run filteringdata.py
&gt; /home/leo/docs/playground/pg2dm-python/ch2/filteringdata.py(53)recommend()
     52     # first find nearest neighbor
---&gt; 53     nearest = computeNearestNeighbor(username, users)[0][1]
     54 

ipdb&gt; h
</code></pre>

<p>Frequently used commands include:</p>

<pre><code>a: print args of current function;
b: set or list break points;
c: continue to next break points;
n: next;
s: step;
p &amp; pp: evaluate and print value of an expression;
pp locals(): pretty-print all local variables;
q: quit;
</code></pre>

<p>Use <code>h a</code> to see the help information about command <code>a</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Interactive Development Workflow]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/20/092952/"/>
    <updated>2013-11-20T09:29:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/20/092952</id>
    <content type="html"><![CDATA[<p>The key of interactive programming is &ldquo;declarative programming&rdquo;,
which can be expressed as following principles:</p>

<ol>
<li><p>Try to write all business logic in functions or classes,
instead of procedures;</p></li>
<li><p>Express the result as return values of functions,
instead of printing them to console;</p></li>
</ol>


<p>Then you store these functions or classes in your files.
Then you start the REPL shell, load your function file, declare your inputs,
run your functions with the inputs, evaluate the output;
modify the function in file, reload your file in shell,
run your functions again, reevaluate the output,
continue this loop, until you get the expected output.</p>

<p>Between these loops, you have 2 window: an editor and a shell,
the former for write &ldquo;real&rdquo; production code,
the latter for loading file and doing some experiments,
while switching between them with Alt-Tab. You only declare inputs once.
Using shortcuts (Ctrl-p) to reload function file and re-test your function.
So the loop will be very fast,
and you can concentrate on the business logic itself.</p>

<p>emacs-for-python and IPython are the preferred editor and shell,
both have powerful code completion functionality.</p>

<h1>Linux Shell</h1>

<p>Save some fundamental functions in a python file, say &ldquo;myfunc.py&rdquo;.
Then use &ldquo;python -i myfunc.py&rdquo; to load all functions in myfunc.py
and enter interactive shell.</p>

<h1>Python Console</h1>

<p>&ldquo;execfile(&lsquo;filename.py&rsquo;)&rdquo; to load (or reload) file;</p>

<p>&ldquo;dir()&rdquo; to list all variables;</p>

<p>&ldquo;del(variable)&rdquo; to clear a variable;</p>

<p>C-p, C-n to traverse in command history;</p>

<h1>IPython</h1>

<p>Tab autocompletion is awesome in ipython.</p>

<h2>Installation</h2>

<pre><code>sudo apt-get install ipython-notebook
</code></pre>

<h2>Command history traverse and back reference</h2>

<p>History inputs: all in dictionary &ldquo;In&rdquo;, use &ldquo;%hist -n&rdquo; list all previous command;</p>

<p>Output: all in dictionary &ldquo;Out&rdquo;, <em>1, </em>2, &hellip;</p>

<p>C-p, C-n, %rep <command_num></p>

<p>While all shortcuts supported by bash are available in IPython
(See Command Line Shortcuts in Linux Shell for details).</p>

<h2>Command</h2>

<p>To line magic command, &ldquo;%&rdquo; can be omitted.</p>

<p>%pwd: pwd</p>

<p>!<cmd>: run shell command;</p>

<p>%run <file_name>: equals to &ldquo;execfile()&rdquo; in standard python shell;</p>

<p>%reset: clear all user defined variables;</p>

<p>%pycat <file_name>: show file content with syntax coloring;</p>

<p>%edit <file_name>: edit file;</p>

<p>%pdb or %run -d <file_name>: debug file;</p>

<h2>log utility</h2>

<p>%logstate: get the current state of log: on/off</p>

<p>%logstart -o <file_name></p>

<p>%logstop</p>

<h1>Emacs</h1>

<p><a href="https://github.com/gabrielelanaro/emacs-for-python">emacs-for-python</a></p>

<h1>Difference between &ldquo;import&rdquo; and &ldquo;run&rdquo;</h1>

<p>You can put some code after</p>

<pre><code>if __name__ == '__main__':
</code></pre>

<p>in a python file &ldquo;test.py&rdquo;.
Then if you want run these codes, use &ldquo;run test.py&rdquo;
in ipython or &ldquo;execfile(&lsquo;test.py&rsquo;)&rdquo; in python shell.
If you don&rsquo;t want to run these code, use &ldquo;import test&rdquo;.
But this is not a best practice. Try to put all things in functions and classes.</p>
]]></content>
  </entry>
  
</feed>
