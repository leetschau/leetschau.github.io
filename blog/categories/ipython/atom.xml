<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ipython | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/ipython/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-06-04T20:48:19+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Interactive Development Workflow]]></title>
    <link href="http://leetschau.github.io/blog/2013/11/20/092952/"/>
    <updated>2013-11-20T09:29:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/11/20/092952</id>
    <content type="html"><![CDATA[<p>The key of interactive programming is &ldquo;declarative programming&rdquo;, which can be expressed as following principles:</p>

<ol>
<li><p>Try to write all business logic in functions or classes, instead of procedures;</p></li>
<li><p>Express the result as return values of functions, instead of printing them to console;</p></li>
</ol>


<p>Then you store these functions or classes in your files. Then you start the REPL shell, load your function file, declare your inputs, run your functions with the inputs, evaluate the output; modify the function in file, reload your file in shell, run your functions again, reevaluate the output, continue this loop, until you get the expected output.</p>

<p>Between these loops, you have 2 window: an editor and a shell, the former for write &ldquo;real&rdquo; production code, the latter for loading file and doing some experiments, while switching between them with Alt-Tab. You only declare inputs once. Using shortcuts (Ctrl-p) to reload function file and re-test your function. So the loop will be very fast, and you can concentrate on the business logic itself.</p>

<p>emacs-for-python and IPython are the preferred editor and shell, both have powerful code completion functionality.</p>

<h1>Linux Shell</h1>

<p>Save some fundamental functions in a python file, say &ldquo;myfunc.py&rdquo;, Then use &ldquo;python -i myfunc.py&rdquo; to load all functions in myfunc.py and enter interactive shell.</p>

<h1>Python Console</h1>

<p>&ldquo;execfile(&lsquo;filename.py&rsquo;)&rdquo; to load (or reload) file;</p>

<p>&ldquo;dir()&rdquo; to list all variables;</p>

<p>&ldquo;del(variable)&rdquo; to clear a variable;</p>

<p>C-p, C-n to traverse in command history;</p>

<h1>IPython</h1>

<h2>Installation</h2>

<pre><code>sudo apt-get install ipython-notebook
</code></pre>

<h2>Command history traverse and back reference</h2>

<p>History inputs: all in dictionary &ldquo;In&rdquo;, use &ldquo;%hist -n&rdquo; list all previous command;</p>

<p>Output: all in dictionary &ldquo;Out&rdquo;, <em>1, </em>2, &hellip;</p>

<p>C-p, C-n, %rep <command_num></p>

<p>While all shortcuts supported by bash are available in IPython (See Command Line Shortcuts in Linux Shell for details).</p>

<h2>Command</h2>

<p>To line magic command, &ldquo;%&rdquo; can be omitted.</p>

<p>%pwd: pwd</p>

<p>!<cmd>: run shell command;</p>

<p>%run <file_name>: equals to &ldquo;execfile()&rdquo; in standard python shell;</p>

<p>%reset: clear all user defined variables;</p>

<p>%pycat <file_name>: show file content with syntax coloring;</p>

<p>%edit <file_name>: edit file;</p>

<p>%pdb or %run -d <file_name>: debug file;</p>

<h2>log utility</h2>

<p>%logstate: get the current state of log: on/off</p>

<p>%logstart -o <file_name></p>

<p>%logstop</p>

<h1>Emacs</h1>

<p><a href="https://github.com/gabrielelanaro/emacs-for-python">emacs-for-python</a></p>

<h1>Difference between &ldquo;import&rdquo; and &ldquo;run&rdquo;</h1>

<p>You can put some code after</p>

<pre><code>if __name__ == '__main__':
</code></pre>

<p>in a python file &ldquo;test.py&rdquo;. Then if you want run these codes, use &ldquo;run test.py&rdquo; in ipython or &ldquo;execfile(&lsquo;test.py&rsquo;)&rdquo; in python shell. If you don&rsquo;t want to run these code, use &ldquo;import test&rdquo;. But this is not a best practice. Try to put all things in functions and classes.</p>
]]></content>
  </entry>
  
</feed>
