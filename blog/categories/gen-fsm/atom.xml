<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gen_fsm | Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/blog/categories/gen-fsm/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-11-04T11:47:14+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Minimal Gen_fsm Example]]></title>
    <link href="http://leetschau.github.io/blog/2013/07/01/144244/"/>
    <updated>2013-07-01T14:42:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2013/07/01/144244</id>
    <content type="html"><![CDATA[<p>I implemented a super simple 2-state FSM based on gen_fsm. You can press this light between on and off.</p>

<p>light_fsm.erl:</p>

<p> module(light_fsm).
 -hehavior(gen_fsm).
 -export([start/1, press_light/1]).
 -export([init/1, on/2, off/2]).
 -record(state, {name=&ldquo;&rdquo;}).
 start(Name) ->
  gen_fsm:start(?MODULE, [Name], []).
 press_light(Pid) ->
  gen_fsm:send_event(Pid, press).
 init(Name) ->
  io:format(&ldquo;~p in init state: off.~n&rdquo;, [Name]),
  {ok, off, #state{name=Name}}.
 off(press, S=#state{}) ->
  io:format(&ldquo;~p rec msg press, turned on.~n&rdquo;, [S]),
  {next_state, on, S#state{}}.
 on(press, S=#state{}) ->
  io:format(&ldquo;~p rec msg press, turned off.~n&rdquo;, [S]),
  {next_state, off, S#state{}}.
Use this FSM:</p>

<p>Eshell V5.10.2 (abort with ^G)
1> c(light_fsm).
{ok,light_fsm}
2> {ok, Light1} = light_fsm:start(&ldquo;Light1&rdquo;).
[&ldquo;Light1&rdquo;] in init state: off.
{ok,&lt;0.39.0>}
3> light_fsm:press_light(Light1).
{state,[&ldquo;Light1&rdquo;]} rec msg press, turned on.
ok
4> light_fsm:press_light(Light1).
{state,[&ldquo;Light1&rdquo;]} rec msg press, turned off.
ok</p>
]]></content>
  </entry>
  
</feed>
