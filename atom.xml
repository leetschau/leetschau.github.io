<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-10-05T15:23:42+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meteor Development Environment on Windows]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/05/131004/"/>
    <updated>2015-10-05T13:10:04+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/05/131004</id>
    <content type="html"><![CDATA[<p>If you want develop Meteor on Windows machine,
it&rsquo;s inconvenient to install meteor, mongodb, vim, etc. on Windows.
My choice is use VM as develop environment.</p>

<p>First install <a href="https://www.virtualbox.org/">VirtualBox</a>, <a href="https://www.vagrantup.com/">Vagrant</a>,
<a href="http://executor.dk/">Executor</a>.</p>

<p>Add the Meteor Dev vagrant box to system <code>vagrant box add meteorBox mybox.box</code>.
The box is based on Ubuntu 14.04 LTS (Trusty), with provisioned Meteor, MongoDB, git, tmux,
vim and its plugins.</p>

<p>Create the VM: <code>vagrant init meteorBox</code>;</p>

<p>There are different SSH clients:</p>

<h1>MobaXterm</h1>

<p>Download <a href="http://mobaxterm.mobatek.net/">MobaXterm</a> and extract it to app folder,
say d:\Apps\MobaXterm_v7.7.</p>

<p>Create a new session in MobaXterm named &ldquo;localvm&rdquo;, with username &ldquo;vagrant&rdquo; and port 2222;</p>

<p>In Executor, add the following keywords:</p>

<pre><code>keyword: vmStart
Command: vagrant
Parameters: up
Start in: e:\Docs\MeteorBox\sysClone\vm

keyword: vmSuspend
Command: vagrant
Parameters: suspend
Start in: e:\Docs\MeteorBox\sysClone\vm

Keyword: vmLogin
Command: MobaXterm_Personal_7.7.exe
Parameters: -bookmark localvm -exitwhendone
Start in: d:\Apps\MobaXterm_v7.7

Keyword: vmStart&amp;Login
Command: vmStart||vmLogin
</code></pre>

<p>Now you can use [win-z, vmStart&amp;Login] to start VM and login.
Before you shutdown Windows machine, remember use [win-z, vmSuspend] to suspend VM
(which is always impossible).</p>

<p>Note: to add or edit keywords in Executor, use shortcut [win-z, Ctrl-k],
see Executor documents for details.</p>

<h1>Kitty</h1>

<p>If you prefer Kitty (portable version of Putty) to MobaXterm,</p>

<p>Add a new Session &ldquo;localvm&rdquo; in Kitty:</p>

<pre><code>Host name: localhost
Port: 2222
Connection -&gt; Data -&gt; Auto-login username &amp; password: vagrant
Window -&gt; Behavior: check "Full screen on Alt-Enter"
</code></pre>

<p>The corresponding &ldquo;vmLogin&rdquo; will be:</p>

<pre><code>Keyword: vmLogin
Command: kitty.exe
Parameters: -load localvm
Start in: d:\Apps\Kitty
</code></pre>

<h1>ConEmu + Kitty</h1>

<p>You can even wrap Kitty into <a href="https://github.com/Maximus5/ConEmu">ConEmu</a>,
which is a good Windows console alternative.</p>

<p>In ConEmu, add a task in Settings -> Startup -> Tasks:</p>

<pre><code>Name: Kitty
Hotkey: Win + Alt + X
Task parameters: blank
Commands: d:\Apps\Kitty\kitty.exe -new_console -load "VagrantLinux"
</code></pre>

<p>And set Kitty as the auto startup task:
Set <code>Settings -&gt; Startup -&gt; Startup options -&gt; Specified named task</code> to &ldquo;Kitty&rdquo;.</p>

<p>Add a new Executor keyword for ConEmu:</p>

<pre><code>Keyword: vmLogin
Command: d:\Apps\ConEmu\ConEmu.exe
</code></pre>

<p>(or use [Win + Alt + X] to login to VM manually in ConEmu).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git in Vim With Fugitive]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/05/110947/"/>
    <updated>2015-10-05T11:09:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/05/110947</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<p>Add <code>Plugin 'tpope/vim-fugitive'</code> into ~/.vimrc
and run <code>vim +PluginClean +PluginInstall +qa</code>.</p>

<h1>Get Help</h1>

<p>:help fugitive</p>

<h1>Frequently Use Commands</h1>

<table>
<thead>
<tr>
<th>Action Name </th>
<th> Meaning                </th>
<th> Close Window with</th>
</tr>
</thead>
<tbody>
<tr>
<td>:Gblame     </td>
<td> show info of each line </td>
<td> q</td>
</tr>
<tr>
<td>:Gdiff      </td>
<td> show diff in vim       </td>
<td> :q</td>
</tr>
<tr>
<td>:Gstatus    </td>
<td> show git status        </td>
<td> q</td>
</tr>
</tbody>
</table>


<p>In &ldquo;:Gstatus&rdquo; window, you can use &ldquo;-&rdquo; to add a file in/out stage area,
use &ldquo;cc&rdquo; to commit, use &ldquo;g?&rdquo; to see all available actions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Meteor Package Test Demo]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/03/095227/"/>
    <updated>2015-10-03T09:52:27+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/03/095227</id>
    <content type="html"><![CDATA[<h1>Generating Test Data with Meteor Factory and Fake</h1>

<p>The following tests set up with <a href="https://github.com/percolatestudio/meteor-factory/">meteor-factory</a>.</p>

<p>First create Meteor app, install packages, define collections and start server:</p>

<pre><code>meteor create testApp
cd testApp
meteor add dburles:factory
meteor add babrahams:constellation
cat &lt;&lt; EOF &gt; collections.js
Authors = new Meteor.Collection('authors');
Books = new Meteor.Collection('books');
EOF
# Authors and Books must be defined in both servers and client
# or `Factory.create("books");` will fail.
# So they can't be defined in browser console
MONGO_URL="mongodb://localhost:27017/test" meteor
</code></pre>

<p>Then open <a href="http://localhost:3000/">http://localhost:3000/</a> in browser,
Open <a href="https://github.com/JackAdams/constellation">constellation console</a> with Ctrl-C.
Open browser console (with F12), run codes below:</p>

<pre><code>Factory.define('author', Authors, {
  name: 'John Smith'
});
// all authors created through Factory have the same "name"

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: 'A book',
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>Now each time you run <code>Factory.create('author');</code>,
a new document is inserted into the collection &ldquo;authors&rdquo;.
You can see it on the constellation console under &ldquo;authors&rdquo; section.</p>

<p>If you want create user with different names,
add a new package <a href="https://github.com/anticoders/meteor-fake/">meteor-fake</a>
with <code>meteor add anti:fake</code>, and modify above definitions as follows:</p>

<pre><code>Factory.define('author', Authors, {
  name: function() { return Fake.user({fields: ['name']}).name; }
});

Factory.define('book', Books, {
  authorId: Factory.get('author'),
  name: function() { return Fake.sentence(4); },
  year: function() { return _.random(1900, 2014); }
});
</code></pre>

<p>When enable the &ldquo;Autopublish&rdquo; tab, you can see all the collections
even after the autopublish package removed from Meteor app.</p>

<h1>Used in Package</h1>

<p>The container app is named &ldquo;mininf&rdquo;, which has a package named &ldquo;nfcore&rdquo;.</p>

<p>There will be 3 roles of user in this scenario, Add, Sub and Multi.
Users with Add role can only ask addition questions,
with Sub can only ask substraction questions,
with Multi can only ask multiplication questions.</p>

<p>A user without a role can&rsquo;t ask any questions.</p>

<p>The users and their roles will be created with <a href="https://github.com/alanning/meteor-roles">alanning/meteor-roles</a>.</p>

<p>There are 2 collections, accounts and questions,
whose schemas are defined with <a href="https://github.com/aldeed/meteor-simple-schema">simple-schema</a>.</p>

<p>Target:</p>

<p>Run the container app, use constellation to watch it&rsquo;s data;
Define data schema with simple-schema;
Use factory to insert user and question to collections;
Run test on container app, see the result.</p>

<p>The implementation steps:</p>

<ol>
<li><p>Create mininf and nfcore;</p></li>
<li><p>Add simple-schema and roles in the package definition of mininf;</p></li>
<li><p>Add jasmine and velocity in the package test definition of mininf;</p></li>
<li><p>Create schemas of users and questions in package;</p></li>
<li><p>Create collections in package and attach schemas on them;</p></li>
<li><p>Create pub/sub for users and questions;</p>

<p> meteor create mininf
 cd mininf
 meteor create &ndash;package leo:nfcore
 cat &lt;&lt; EOF > packages/nfcore/package.js
 Package.describe({
   name: &lsquo;leo:nfcore&rsquo;,
   version: &lsquo;0.0.1&rsquo;,
   summary: &lsquo;&rsquo;,
   git: &lsquo;&rsquo;,
   documentation: &lsquo;README.md&rsquo;
 });
 Package.onUse(function(api) {
   api.versionsFrom(&lsquo;1.2.0.2&rsquo;);
   api.use(&lsquo;ecmascript&rsquo;);
   // this makes nfcore itself can use variable &ldquo;SimpleSchema&rdquo; in the source code
   api.use(&ldquo;aldeed:<a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x73;&#105;&#109;&#112;&#x6c;&#101;&#x2d;&#x73;&#x63;&#x68;&#x65;&#109;&#x61;&#x40;&#49;&#x2e;&#x33;&#46;&#51;">&#x73;&#x69;&#109;&#112;&#108;&#101;&#45;&#115;&#x63;&#104;&#x65;&#x6d;&#x61;&#x40;&#x31;&#x2e;&#51;&#x2e;&#x33;</a>&rdquo;);
   api.use(&ldquo;alanning:roles&rdquo;);
   // this makes any packages using nfcore can use &ldquo;SimpleSchema&rdquo;
   api.imply(&ldquo;aldeed:simple-schema&rdquo;);
   api.imply(&ldquo;alanning:roles&rdquo;);
   api.addFiles(&lsquo;nfcore.js&rsquo;);
   api.export(&ldquo;NFCore&rdquo;);
 });
 Package.onTest(function(api) {
   api.use(&lsquo;ecmascript&rsquo;);
   api.use(&lsquo;sanjo:<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6a;&#x61;&#x73;&#x6d;&#x69;&#x6e;&#101;&#x40;&#x30;&#46;&#x31;&#x39;&#x2e;&#x30;">&#x6a;&#97;&#115;&#109;&#105;&#x6e;&#101;&#64;&#48;&#x2e;&#49;&#57;&#x2e;&#x30;</a>&rsquo;);
   api.use(&lsquo;anti:fake&rsquo;);
   api.use(&lsquo;underscore&rsquo;);
   api.use(&ldquo;dburles:<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#102;&#x61;&#x63;&#x74;&#x6f;&#114;&#x79;&#64;&#x30;&#46;&#51;&#x2e;&#49;&#48;">&#x66;&#x61;&#99;&#116;&#x6f;&#x72;&#121;&#x40;&#48;&#x2e;&#x33;&#x2e;&#49;&#x30;</a>&rdquo;);
   api.use(&lsquo;velocity:<a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x68;&#x74;&#x6d;&#x6c;&#45;&#x72;&#x65;&#112;&#x6f;&#114;&#x74;&#101;&#114;&#x40;&#x30;&#46;&#x39;&#46;&#48;">&#104;&#116;&#x6d;&#108;&#x2d;&#114;&#x65;&#x70;&#x6f;&#x72;&#116;&#x65;&#114;&#64;&#x30;&#x2e;&#57;&#46;&#x30;</a>&rsquo;);
   api.use(&lsquo;velocity:<a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#99;&#x6f;&#x6e;&#115;&#111;&#x6c;&#101;&#x2d;&#114;&#x65;&#x70;&#x6f;&#114;&#116;&#101;&#x72;&#64;&#48;&#x2e;&#x31;&#x2e;&#x33;">&#x63;&#111;&#110;&#x73;&#x6f;&#108;&#101;&#x2d;&#x72;&#101;&#112;&#111;&#114;&#116;&#101;&#x72;&#64;&#48;&#46;&#x31;&#x2e;&#x33;</a>&rsquo;);
   api.use(&lsquo;leo:nfcore&rsquo;);
   api.addFiles(&lsquo;nfcore-tests.js&rsquo;);
 });
 EOF</p>

<p> mkdir -p {common/{schemas,collections},tests,client,server}
 cat &lt;&lt; EOF > common/globals.js
 NFCore = {};
 NFCore.Schemas = {};
 NFCore.Collections = {};
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Accounts = new SimpleSchema({
   name: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/schemas/accounts.js
 NFCore.Schemas.Questions = new SimpleSchema({
   owner: {
     type: Meteor.Collection.ObjectID
   },
   content: {
     type: String
   }
 });
 EOF</p>

<p> cat &lt;&lt; EOF > common/collections/collections.js
 NFCore.Collections.Accounts = new Mongo.Collection(&ldquo;accounts&rdquo;);
 NFCore.Collections.Accounts.attachSchema(NFCore.Schemas.Accounts);</p>

<p> NFCore.Collections.Questions = new Mongo.Collection(&ldquo;questions&rdquo;);
 NFCore.Collections.Questions.attachSchema(NFCore.Schemas.Questions);
 EOF</p></li>
</ol>


<h1>Errors, Questions and Solutions</h1>

<p>E: meteor object [object object] has no method &lsquo;attach schema&rsquo;.</p>

<p>S: Add <code>api.use("aldeed:collection2@2.5.0");</code> and <code>api.imply("aldeed:collection2@2.5.0");</code> into Package.onUse() of package.js.</p>

<p>E: insert failed: Access denied. No allow validators set on restricted collection for method &lsquo;insert&rsquo;.</p>

<p>S: Add &ldquo;server&rdquo; as the 2nd parameter in package.js -> Package.onTest -> api.addFiles(<the-test-file-name>):
<code>api.addFiles('tests/accounts.js', 'server');</code>.</p>

<p>Q: In package I use Factory.create() to insert a doc into a collection, but I can&rsquo;t find the collection.</p>

<p>S: Add environment &ldquo;MONGO_URL&rdquo; into the test command:
<code>VELOCITY_TEST_PACKAGES=1 MONGO_URL="mongodb://localhost:27017/test" meteor test-packages --driver-package velocity:html-reporter leo:nfcore</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Learn You a Haskell for Great Good]]></title>
    <link href="http://leetschau.github.io/blog/2015/10/01/202107/"/>
    <updated>2015-10-01T20:21:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/10/01/202107</id>
    <content type="html"><![CDATA[<p>Notes for <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a>.</p>

<h1>Modules</h1>

<p>The following code snippet demonstrate how to import and use Haskell submodule.
Save the following codes into a shell script and run it.</p>

<pre><code>#!/bin/bash
mkdir Geometry
cat &lt;&lt; EOF &gt; Geometry/Sphere.hs
module Geometry.Sphere
( volume
, area
) where

volume :: Float -&gt; Float
volume radius = (4.0 / 3.0) * pi * (radius ^ 3)

area :: Float -&gt; Float
area radius = 4 * pi * (radius ^ 2)
EOF

cat &lt;&lt; EOF &gt; app.hs
import Geometry.Sphere
main = print $ volume 3
EOF

runghc app.hs
</code></pre>

<p>The result should be &ldquo;113.097336&rdquo;.</p>

<h1>Making Our Own Types and Typeclasses</h1>

<p>Value constructor is also called &ldquo;data constructor&rdquo;.</p>

<p>Ref:</p>

<p><a href="https://wiki.haskell.org/Constructor">Constructor</a></p>

<p><a href="http://stackoverflow.com/questions/18204308/haskell-type-vs-data-constructor">Haskell Type vs Data Constructor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor Test With Velocity and Jasmine]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/29/121847/"/>
    <updated>2015-09-29T12:18:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/29/121847</id>
    <content type="html"><![CDATA[<p>Create jasmine tests and run them as the following codes:</p>

<pre><code>$ meteor create jasmineEx
$ cd jasmineEx
$ meteor create --package newfairscommerce:add-number
$ rm packages/add-number/add-number-tests.js
$ mkdir -p packages/add-number/tests/{server,client}
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/example-spec.js
describe('sanjo:jasmine on client and server', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/client/example-spec.js
describe('sanjo:jasmine on client', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
$ cat &lt;&lt; EOF &gt; packages/add-number/tests/server/example-spec.js
describe('sanjo:jasmine on server', function() {
  it('works', function() {
    expect(it).toBeDefined();
  })
})
EOF
</code></pre>

<p>And replace <code>Package.onTest</code> in packages/add-number/package.js with the following codes:</p>

<pre><code>Package.onTest(function(api) {
  api.use('sanjo:jasmine@0.18.0');
  api.use('velocity:html-reporter@0.9.0');
  api.use('velocity:console-reporter@0.1.3');

  api.addFiles('tests/server/example-spec.js', 'server');
  api.addFiles('tests/client/example-spec.js', 'client');
  api.addFiles('tests/example-spec.js', ['server', 'client']);
});
</code></pre>

<p>Now run <code>VELOCITY_TEST_PACKAGES=1 meteor test-packages --driver-package velocity:html-reporter newfairscommerce:add-number</code>
under the root directory of jasmineEx project,
you can get the following output:</p>

<pre><code>...
=&gt; App running at: http://localhost:3000/
I20151003-18:23:56.465(8)? jasmine-server-integration: 2 tests passed (11ms)
I20151003-18:24:07.849(8)? jasmine-client-integration: 2 tests passed (3ms)
</code></pre>

<p>And you can get the test results in browser with url &ldquo;<a href="http://localhost:3000">http://localhost:3000</a>&rdquo;.</p>

<p>Questions:</p>

<p>When running the following codes, it runs into a interactive shell:</p>

<pre><code>npm install -g velocity-cli
velocity test-package newfairscommerce:add-number
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a Local Meteor Package From a Existing Repo]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/24/185036/"/>
    <updated>2015-09-24T18:50:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/24/185036</id>
    <content type="html"><![CDATA[<p>newfairs-v3 is the container project. newfairs-core is a package.</p>

<pre><code>meteor create newfairs-v3
cd newfairs-v3
meteor create --package newfairscommerce:core
cp -r ../newfairs-core packages
mv packages/core/{package.js,README.md} packages/newfairs-core/
rm -rf package/core
meteor add newfairscommerce:core
</code></pre>

<p>Then you have to define dependencies for this package with adding some
<code>api.use()</code> and loading order by adding some <code>api.addFiles(...)</code>
in packages/newfairs-core/package.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stack Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/23/123748/"/>
    <updated>2015-09-23T12:37:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/23/123748</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<p>Install <a href="https://github.com/commercialhaskell/stack">stack</a> and start a demo yesod web server:</p>

<pre><code>wget -q -O- https://s3.amazonaws.com/download.fpcomplete.com/ubuntu/fpco.key | sudo apt-key add -
echo 'deb http://download.fpcomplete.com/ubuntu/trusty stable main'|sudo tee /etc/apt/sources.list.d/fpco.list
sudo apt-get update &amp;&amp; sudo apt-get install stack -y
cd ~/docs/playground
stack new myHaskellProj yesod-sqlite  // very slow, 30 minutes or so
stack install yesod-bin cabal-install --install-ghc
stack build  // if it's interupteed by "FailedConnectionException s3.amazonaws.com 443" error, run this command again
stack exec -- yesod devel
</code></pre>

<p>Now open &ldquo;<a href="http://localhost:3000/">http://localhost:3000/</a>&rdquo;.</p>

<h1>Run Haskell Code</h1>

<p>To start a ghci, in any folder, run:</p>

<pre><code>stack ghci
Prelude&gt; putStrLn "hello world"
</code></pre>

<p>To run haskell script: in any folder, run</p>

<pre><code>$ cat hello.hs
main = putStrLn "hello world"
$ stack runghc hello.hs
</code></pre>

<h1>Editor Setup</h1>

<p>Ref: <a href="http://seanhess.github.io/2015/08/05/practical-haskell-editors.html">PRACTICAL HASKELL - EDITOR SETUP WITH STACK</a>.</p>

<pre><code>cd ~
stack setup
stack install hdevtools
stack path|grep ghc      # to get the ghc binary path used below
</code></pre>

<p>Add <code>PATH=$PATH:$HOME/.stack/programs/x86_64-linux/ghc-7.10.2/bin:$HOME/.local/bin</code> into ~/.zshenv.</p>

<p>Install syntastic and &lsquo;bitc/vim-hdevtools&rsquo; plugin for vim:</p>

<p>add the following 2 lines into ~/.vimrc:</p>

<pre><code>Plugin 'scrooloose/syntastic'
Plugin 'bitc/vim-hdevtools'
</code></pre>

<p>then run <code>vim +PluginInstall</code>.</p>

<p>Now your .hs files will be checked when saving.</p>

<p>To verify, create hello.hs as follows:</p>

<pre><code>main = do
  print "What is your name?"
  name &lt;- getLine
  print ("Hello " ++ name ++ "!")
</code></pre>

<p>When cursor on &ldquo;print&rdquo; in the 2nd line, run <code>:HdevtoolsType</code>
(which equivalent to run <code>hdevtools type hello.hs 2 3</code> in shell),
you should get &ldquo;[Char] -> IO ()&rdquo;.</p>

<p>For convenient, add the following shortcuts into ~/.vimrc:</p>

<pre><code>" hdevtools setup (haskell)
au FileType haskell nnoremap &lt;buffer&gt; &lt;F3&gt; :HdevtoolsType&lt;CR&gt;
au FileType haskell nnoremap &lt;buffer&gt; &lt;silent&gt; &lt;F4&gt; :HdevtoolsClear&lt;CR&gt;
</code></pre>

<p>Add &ldquo;this&rdquo; at the end of file from column 3 and save
(which is equivalent to run <code>hdevtools check hello.hs</code> in shell),
a &ldquo;Not in scope: ‘this’&rdquo; error will raises.</p>

<p>See <a href="https://github.com/schell/hdevtools">hdevtools</a> and
<a href="https://github.com/bitc/vim-hdevtools">bitc/vim-hdevtools</a> for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Webstorm as Meteor IDE]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/22/104351/"/>
    <updated>2015-09-22T10:43:51+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/22/104351</id>
    <content type="html"><![CDATA[<h1>Terminal</h1>

<p>In editor, use &ldquo;Alt-F12&rdquo; to activate terminal.
In terminal, use &ldquo;Shift-ESC&rdquo; or &ldquo;Alt-F12&rdquo; to go back to editor.
Double click terminal title bar to maximize the terminal panel.</p>

<p>Only run Meteor server in Webstorm&rsquo;s terminal.
Run all other terminal work (such as mongod, git, etc) in a external terminal.
Use &ldquo;Alt-Tab&rdquo; to switch between external terminal and Webstorm.</p>

<h1>Navigattion</h1>

<p>Toggle file browse pane with &ldquo;Alt-1&rdquo;.</p>

<p>Focus editor with &ldquo;ESC&rdquo;.</p>

<h1>Editor</h1>

<p>Split vertically/horizontally;</p>

<h2>Vim Plugin</h2>

<p>Install IdeaVim in [Settings -> Plugins] (open it with Ctrl-Shift-A).</p>

<p>Open/close it in [Tools -> Vim Emulator], or &ldquo;Alt-T Ctrl-Alt-V&rdquo;.</p>

<p>Close editor tab: :q</p>

<h1>Frequently Used Shortcuts</h1>

<p>Double shift: search everything;</p>

<p>Shift-Ctrl-N: search and open files;</p>

<p>Shift-Ctrl-A: search and run commands;</p>

<p>Alt-Left/Right: switch between editor tabs;</p>

<p>Ctrl-Shift-Enter: complate statement;</p>

<p>See [Help -> Default Keymap Reference] for all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autosave in Webstorm]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/22/092543/"/>
    <updated>2015-09-22T09:25:43+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/22/092543</id>
    <content type="html"><![CDATA[<p>Autosave related settings of Webstorm 10.0.4 are mostly in
[Settings -> Appearance &amp; Behavior -> System Settings -> Synchronization].</p>

<p>By default the &ldquo;Save files automatically &hellip;&rdquo; is unchecked.
So Webstorm will not save file changes before you press Ctrl-S.
<strong>But</strong> &ldquo;Save files on frame deactivation&rdquo; is checked.
So if you switch to another application other than Webstorm,
all changes unsaved will be saved to disk.
<strong>However</strong>, when you modify file A without save,
and switch to another tab to edit file B,
file A will not be saved, because this is not &ldquo;frame deactivation&rdquo; (why?).</p>

<p>This is convenient for Meteor development.
You can modify many files without save.
As you switch to browser, Webstorm will save all changes to disk,
then Meteor detects file changes and refreshes pages in browser.</p>

<p>In Webstorm 10.0.4 the Linux version,
the blue color of changed tabs is subtle (compared with that on Windows or Mac),
check &ldquo;Mark modified tabs with asterisk&rdquo;
in [Settings -> Editor -> General -> Editor Tabs] to make unsaved tabs easier to identify.</p>

<p>Finally note that &ldquo;Ctrl-S&rdquo; in Webstorm is &ldquo;save all&rdquo; instead of &ldquo;save&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a Folder Into Meteor App in Webstorm]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/21/092600/"/>
    <updated>2015-09-21T09:26:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/21/092600</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve cloned a repo from remote host into foler &ldquo;$HOME/docs/myapp&rdquo;.
So you can&rsquo;t use <code>meteor create myapp</code> to build a new Meteor app.</p>

<p>You can create this &ldquo;myapp&rdquo; under /tmp,
and <code>cp -r /tmp/myapp/.meteor $HOME/docs/myapp/</code>.</p>

<p>Now open $HOME/docs/myapp in Webstorm,
it&rsquo;s been a Meteor app already.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Random Date After a Specified Date]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/20/212102/"/>
    <updated>2015-09-20T21:21:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/20/212102</id>
    <content type="html"><![CDATA[<p>The following codes can display a random date within a month after the specified fair date.</p>

<pre><code>$ meteor create randomDate
$ cd randomDate
$ meteor add momentjs:moment
$ cat randomDate.html
&lt;head&gt;
  &lt;title&gt;Random Date&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  在 展会日期 输入框中输入日期，例如：2015-05-25，然后点击 评论 按钮。
  &lt;hr&gt;

&lt;/body&gt;

&lt;template name="DatePanel"&gt;
  &lt;label&gt;展会日期：&lt;/label&gt;
  &lt;input type="text" id="fairDate"&gt;
  &lt;button&gt;评论&lt;/button&gt;
  &lt;p&gt;评论添加日期：&lt;/p&gt;
&lt;/template&gt;

$ cat randomDate.js
if (Meteor.isClient) {
  Template.DatePanel.helpers({
    commentDate: function () {
      return Session.get('commentDate');
    }
  });

  Template.DatePanel.events({
    'click button': function (e, t) {
      var dateStr = t.find("#fairDate").value;
      var fairDate = moment(dateStr);
      var randomDays = Math.floor((Math.random() * 30) + 1);
      var commentDate = fairDate.add(randomDays, 'days');
      var commStr = commentDate.format("YYYY-MM-DD");
      Session.set('commentDate', commStr);
    }
  });
}

$ meteor
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A JavaScript Closure Demo]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/16/101529/"/>
    <updated>2015-09-16T10:15:29+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/16/101529</id>
    <content type="html"><![CDATA[<p>下面的代码演示了JavaScript中的闭包：</p>

<pre><code>$ cat test.js
x = 100;
inc = function(){
  var x = 0;
  return function(){
    console.log(x++);
  };
};
inc1 = inc();
inc2 = inc();

$ node
&gt; require('./test.js')
{}
&gt; x
100
&gt; inc
[Function]
&gt; inc1
[Function]
&gt; inc2
[Function]
&gt; inc1()
0
undefined
&gt; inc1()
1
undefined
&gt; inc1()
2
undefined
&gt; inc2()
0
&gt; inc2()
1
undefined
&gt; inc2()
2
undefined
&gt; inc2()
3
undefined
&gt; inc2()
4
undefined
&gt; inc1()
3
undefined
&gt; inc()
[Function]
&gt; inc()()
0
undefined
&gt; inc()()
0
undefined
</code></pre>

<p>可以看到inc2()最后一次执行时内部x值为4，
inc1不受影响，执行时依然从上次的2开始增加变成3，
所以，不同的闭包（这里是inc1和inc2）保存了自己单独的内部变量x，
其中一个变化不会影响另一个的值。</p>

<p>由于每次执行inc()返回一个新的function，所以每次执行<code>inc()()</code>都打印0。</p>

<p>参考：</p>

<p><a href="http://www.zhihu.com/question/35060711/answer/62641357?group_id=627257263421976576#comment-94699289">javascript的闭包的概念和ruby的闭包的概念有何异同？</a>.</p>

<p>&ldquo;Load and execute external js file in node.js with access to local variables?&rdquo; on StackOverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDoc Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/15/122519/"/>
    <updated>2015-09-15T12:25:19+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/15/122519</id>
    <content type="html"><![CDATA[<p>JSDoc is a documentation generator similar to JavaDoc or PHPDoc.</p>

<h1>JSDoc</h1>

<p>Install <a href="https://github.com/jsdoc3/jsdoc">JSDoc</a> with <code>npm install -g jsdoc</code>.
Generate docs with <code>jsdoc **/*.js</code>.</p>

<h1>YUIDoc</h1>

<p><a href="http://yui.github.io/yuidoc/">YUIDoc</a> is suitable for generate documentation for <a href="http://yuilibrary.com/">YUI</a>,
a JavaScript library, and no longer actively maintained.</p>

<p>It can only list modules and classes on the homepage,
which is not very suitable for general purpose jsdoc.</p>

<p>Install it with <code>npm install -g yuidocjs</code>.
Run it with <code>yuidoc .</code>.
It creates a folder named &ldquo;out&rdquo; by default in the current directory.
Open the index.html in &ldquo;out&rdquo; folder to see the doc.</p>

<h1>Editor</h1>

<p>vim with <a href="https://github.com/scrooloose/nerdcommenter">scrooloose/nerdcommenter</a>.
Use <code>&lt;leader&gt;cs</code> to add block comment.
But note that the block generated by this plugin is started by <code>/*</code>, which is invalid for jsdoc and yuidoc.
You have to add an asterisk behind it as <code>/**</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Push to Github Repository With SSH Keys]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/12/233609/"/>
    <updated>2015-09-12T23:36:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/12/233609</id>
    <content type="html"><![CDATA[<p>I want push to github repository without input username and password.</p>

<ol>
<li><p>Add pub key to github account [profile -> settings -> SSH keys];</p></li>
<li><p>Set up git default user name and email address with <code>git config --global user.name</code>
and <code>git config --global user.email</code>;</p></li>
<li><p>Test ssh connection: <code>ssh -T git@github.com</code>;</p></li>
<li><p>Modify remote repo address: from <code>https://github.com/USERNAME/OTHERREPOSITORY.git</code> to
<code>git@github.com:USERNAME/OTHERREPOSITORY.git</code>, where first replace <code>https://</code> with <code>git@</code>,
then replace <code>github.com/</code> with <code>github.com:</code>.</p></li>
</ol>


<p>Now you can push to github repo (<code>git push origin master</code>) without input username and password.</p>

<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/6565357/git-push-requires-username-and-password">Git push requires username and password</a></p>

<p><a href="https://help.github.com/articles/set-up-git/#next-steps-authenticating-to-github-from-git">Set Up Git</a></p>

<p><a href="https://help.github.com/articles/generating-ssh-keys/">Generating SSH keys</a></p>

<p><a href="https://help.github.com/articles/changing-a-remote-s-url/">Changing a remote&rsquo;s URL</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change SSH Port on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/12/093754/"/>
    <updated>2015-09-12T09:37:54+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/12/093754</id>
    <content type="html"><![CDATA[<p>Modify /etc/ssh/sshd_config:</p>

<ul>
<li><p>Port 22 -> 222</p></li>
<li><p>PermitRootLogin yes -> no</p></li>
<li><p>PasswordAuthentication yes -> no</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Translate English Words With dict.cn in Firefox]]></title>
    <link href="http://leetschau.github.io/blog/2015/09/12/085417/"/>
    <updated>2015-09-12T08:54:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/09/12/085417</id>
    <content type="html"><![CDATA[<p>Everytime I want to get the meaning of a english word,
I have to copy the word, open dict.cn,
paste the word into the box and get the meaning, which is boring.</p>

<p>While there&rsquo;re some google translate extensions of firefox,
but they are slow and not very complete.
For example: the word meaning of &ldquo;spoiler&rdquo; in &ldquo;This synopsis may contain spoilers.&rdquo; on
page <a href="http://www.imdb.com/title/tt0209144/synopsis">Synopsis for Memento</a>.
So I have to build my own translate extension based on dict.cn.</p>

<h1>Steps</h1>

<ol>
<li><p>Install Greasemonkey extension in Firefox.</p></li>
<li><p>Build a new script with the following codes.</p></li>
<li><p>Select some text and press &ldquo;\&rdquo; key.</p>

<p> // ==UserScript==
 // @name        TranslateIt
 // @namespace   LeoScript
 // @include     *
 // @version     1
 // @grant       none
 // ==/UserScript==</p>

<p> // document.addEventListener(&lsquo;mouseup&rsquo;, getSel, false);
 document.addEventListener(&lsquo;keypress&rsquo;, transIt, false);</p>

<p> function transIt(e) {
   // console.log(e.key);
   if (e.key !== &lsquo;\&rsquo;){ return; }
   var sel = document.getSelection().toString();
   if (sel) { window.open(&lsquo;<a href="http://dict.cn/">http://dict.cn/</a>&rsquo; + sel); }
 }</p></li>
</ol>


<p>Sometimes the popuped windows will be blocked by the browser.
Add the website into the whitelist of the blocked sites.</p>

<p>To debug the script, modify and save the script, reload the web page, and test the script.</p>

<h1>References:</h1>

<p><a href="http://hayageek.com/greasemonkey-tutorial/#install-greasemonkey">Greasemonkey Tutorial for Beginners</a></p>

<p>Get selected text:</p>

<p><a href="http://stackoverflow.com/questions/3260926/greasemonkey-addeventlistener-questions">greasemonkey: addEventListener questions</a></p>

<p><a href="http://www.w3schools.com/jsref/met_document_addeventlistener.asp">HTML DOM addEventListener() Method</a></p>

<p>Test if ctrl or alt key is pressed on clicking:</p>

<p><a href="http://stackoverflow.com/questions/6806271/javascript-check-if-ctrl-button-was-pressed">JavaScript: Check if CTRL button was pressed</a></p>

<p>search &lsquo;altKey&rsquo; in <a href="http://www.w3schools.com/jsref/dom_obj_event.asp">HTML DOM Events</a></p>

<p><a href="http://stackoverflow.com/questions/4907843/open-a-url-in-a-new-tab-using-javascript">Open a URL in a new tab using JavaScript</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detect Website Information]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/28/112117/"/>
    <updated>2015-08-28T11:21:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/28/112117</id>
    <content type="html"><![CDATA[<p>Based on <a href="http://stackoverflow.com/questions/396739/how-do-you-determine-what-technology-a-website-is-built-on">How do you determine what technology a website is built on?</a>.</p>

<p>Website:</p>

<p><a href="http://builtwith.com/">BuiltWith</a>.</p>

<p><a href="http://w3techs.com/sites/">W3Techs</a>.</p>

<p>Browser plugins:</p>

<p><a href="https://wappalyzer.com/">Wappalyzer</a> for firefox and chrome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Underscore Highlights Problem in Vim Markdown Documents]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/19/100625/"/>
    <updated>2015-08-19T10:06:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/19/100625</id>
    <content type="html"><![CDATA[<h1>Install GFM plugin for vim</h1>

<p>To fix the highlight problem,
use <code>Plugin 'jtratner/vim-flavored-markdown'</code> instead of
<code>Plugin 'plasticboy/vim-markdown'</code> in .vimrc,
and run <code>vim +PluginClean +PluginInstall +qall</code>.</p>

<h1>Use Atom as Editor</h1>

<p>Install <a href="https://atom.io/">Atom</a> and modify the value of &ldquo;EDITOR&rdquo; in $DSNOTE_HOME/notes.sh to &ldquo;atom -f&rdquo;.</p>

<h2>Run in foreground</h2>

<p>dsnot works in sync manner, while the default Atom working flow is async.
So use &ldquo;atom -f&rdquo; instead of &ldquo;vim&rdquo; for the value of variable &ldquo;EDITOR&rdquo;.</p>

<h2>Chinese character support</h2>

<p>Verified on Ubuntu 14.04 LTS.</p>

<p>First install font &ldquo;文泉驿正黑&rdquo;:</p>

<pre><code>sudo aptitude install ttf-wqy-microhei
sudo aptitude install ttf-wqy-zenhei
</code></pre>

<p>Then press &ldquo;Ctrl+,&rdquo; to open settings panel:</p>

<p>Set [Settings -> Editor Settings -> Font Family] as:</p>

<pre><code>DejaVu Sans Mono, 文泉驿正黑
</code></pre>

<p>But Chinese characters can&rsquo;t be displayed in preview window.</p>

<h2>Toggle Tree View</h2>

<p>Use <code>ctrl-\</code> to toggle tree view.
<code>alt-\</code> or <code>ctrl-0</code> to focus it.</p>

<h2>Markdown editing and preview</h2>

<p>Use <code>Ctrl-Shift-M</code> to toggle preview panel.
Install some advanced packages:</p>

<pre><code>apm search vim
apm install vim-mode
apm install markdown-scroll-sync
apm install markdown-writer
apm install markdown-preview-plus
apm install markdown-format
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPStorm Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/19/002231/"/>
    <updated>2015-08-19T00:22:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/19/002231</id>
    <content type="html"><![CDATA[<p>On Linux (Ubuntu 14.04 LTS), openjdk-7-jdk must be installed before running PhpStorm 9.0.</p>

<p>To startup PHPStorm, Alt-F2, input <code>pstorm</code>.</p>

<h1>Important Shortcuts</h1>

<p>Double Shift: search everything;</p>

<p>Shift - Ctrl - N: open file in project (fuzzy find);</p>

<p>Alt - F12: switch focus between editor and terminal (you can use fzf and autojump in terminal);</p>

<p>Shift - ESC: hide navigation bar;</p>

<p>Alt-1: Toggle and focus navigation bar;</p>

<p>ESC: focus editor;</p>

<h1>Editor</h1>

<h2>IdeaVim</h2>

<p><code>:q</code>: close file;</p>

<p><code>:vs</code>: split vertical;</p>

<p>Ref:</p>

<p><a href="https://www.jetbrains.com/phpstorm/help/keyboard-shortcuts-you-cannot-miss.html">Keyboard Shortcuts You Cannot Miss</a>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eCommerce Framework]]></title>
    <link href="http://leetschau.github.io/blog/2015/08/14/160315/"/>
    <updated>2015-08-14T16:03:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/08/14/160315</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/magento">Magento</a>: PHP, Zend Framework, bitnami</p>

<p>Node extension with Magento:</p>

<p><a href="https://github.com/spree/spree">spree</a>: Ruby on Rails</p>

<h1>Magento</h1>
]]></content>
  </entry>
  
</feed>
