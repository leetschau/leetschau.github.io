<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2015-04-18T14:12:11+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4月17日讲座文字稿]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/18/140631/"/>
    <updated>2015-04-18T14:06:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/18/140631</id>
    <content type="html"><![CDATA[<p>嗨大家好，没有想到今天来了这么多人，非常感谢大家来捧场。下面我把今天想谈的话题发给大家，然后按这个顺序一个一个说。说完一个话题停下来大家讨论，聊到后面话题的时候，前面的问题如果大家想问，也非常欢迎发问，好的谢谢大家。</p>

<p>今天主要想跟大家聊聊这几个方面：</p>

<ol>
<li><p>技术成长路线；</p></li>
<li><p>对Web技术和Meteor的理解；</p></li>
<li><p>关于技术创业。</p></li>
</ol>


<p>首先跟大家说说自己的一个成长经历吧。我从高中的时候编程，最早接触的是Pascal，现在好多比较年轻的同学都不熟悉这个名字，后来又写了几年Delphi，实际上就是objective的Pascal。工作了之后主要用的是Java和Python，后来转向了数据分析领域，用Scala语言，计算平台是Apache的Spark，大家可能都听说过Hadoop这些分布式计算平台，但目前分布式计算方向的是从Hadoop这种磁盘落地的方式向内存计算，也就是Apche Spark的方向发展，所以又做了一段时间的Scala。</p>

<p>大概是从2014年的年底的时候，开始着手做Web开发，因为我在接触Web之前的已经写了很多年的代码，有一些写代码的感触，所以当时考察了很多Web开发框架，包括Ruby on Rails，也就是RoR，Java的SSH，Google的Dart，最后找到了Meteor这类纯JS的架构，一直用到现在，大概不到半年的时间。</p>

<p>我接触的编程语言比较多，对这个领域比较感兴趣，工作期间使用过很多种语言，包括函数式风格的Erlang和Haskell，包括像面向对象的Ruby。用语言写代码，写出来的代码能完成一定的任务，对这件事情本身非常感兴趣，所以在这方面投入了不少精力，大家可以看下我的技术博客，上面各种语言都有，杂而不精，哪位高手看到我写的比较粗浅，可别笑话我。</p>

<p>好，现在我们来聊聊第二方面吧！</p>

<p>关于Web这块儿，我接触的时间比较短，算上前面东看西看也就一年时间，资历比较浅，所以只是谈一些个人看法，肯定是比较幼稚的。我觉得Web发展到今天，从1.0那个时代侧重于页面展示，向完全桌面应用的方向发展，比如咱们用的Meteor就是一个非常典型的一个代表，我们可以完全在客户端开发，把所有功能都放在客户端，然后等到功能测试好了之后，再把那些数据，也就是企业核心的资源了，放到Server端。</p>

<p>在比较了各种Web技术栈之后呢，我有个比较突出的感觉，因为我Web的背景不是很强，对HTTP协议细节也不是很了解，我看到很多技术栈的后端，对HTTP的嵌入还是比较深，如果开发人员不懂Request和Response这些概念的话，很难把自己的业务放进去，很难对开发过程有深入理解，而Meteor这个技术呢，可以让程序员只关注业务逻辑，不需要去关心网络传输协议，完全不跟HTTP协议打交道。</p>

<p>实际上Meteor使用了一个叫DDP的传输协议。在应用层，也就是七层协议的最高层中，DDP协议更适于做Web app的开发，比如说它的状态保持，比如说服务端向客户端推送消息，这些优势使得在它上面做开发，会天然地比基于HTTP协议的框架容易很多。</p>

<p>学习Meteor时做最简单的那个Tutorial的时候，如果同时开两个那个浏览器，在其中一个里面改了数据，另外一个就跟着变了，这个效果如果在一些传统的Web架构上做，可能要用到比较高深的技术，但是在Meteor上，大家可以看到完全是一种非常自然方式，没有任何人工干预就自然而然就实现了，所以这个App的体验就会比传统架构好很多。</p>

<p>从我们程序员的角度出发，会有一种顾虑，认为Web技术发展这么快，会不会有一天Meteor也像RoR那样，曾经一统江湖，现在已经不再高速发展了，大家会有一种疑问，Meteor会不会下一个RoR呢？</p>

<p>这个问题我的理解是，技术是在不断变化的，但思想是持续的。比如Ruby on Rails吧，实际上是MVC架构，MVC这个思想其实早在上世纪七十年代，施乐公司做图形界面的时候就已经有了，所以RoR在开发思想的开创性方面不是特别强。</p>

<p>但是反观Meteor这个架构，它不仅仅是用纯JS写代码，实际上是在倡导一种思维方式。以前我们普遍认为网站就是一些个页面，后来用Ajax技术和其他Web 2.0技术增强了互动性。但并没有摆脱页面导向的思维，仍然会明确的区分客户端和服务端。但是Meteor实际上已经不明确进行区分了。</p>

<p>在这个架构下，完全可以按以前我们写桌面程序的思维方式，先在客户端把功能完全实现，再把我们需要隐藏数据和业务逻辑，挪到服务端去。这样一来，从思维方式上已经跟传统的区分这个客户端和服务端的方法不一样了。这种思维会持续地发挥它的效果，即便说过个三五年，Meteor不像现在这样爆发式增长了，即便出现新的技术栈，也会吸收这种先进的思想。</p>

<p>Meteor还有一个非常好的特点就是轻量化。从Java时代开始，做Web开发起码先要装一个Eclipse这种很牛的IDE，上面添加各种框架，如果你的电脑配置不高，Eclipse得起个三五分钟的，先双击一下图标，然后去喝杯茶，洗个澡，回来这个IDE终于起来了。但是我们看Meteor开发，完全在命令行里面，带一个vi这样的文本编辑器，然后再有个Firefox之类的浏览器就能搞定。</p>

<p>那么从GUI图形用户界面向命令行转变到底有什么好处呢？我个人的理解是：Web技术本身是一种文字展现。以前说网站做的非常的炫，各种弹窗、各种服务窗口、包括鼠标怎么追也关不掉的那种窗口，我们说做得非常炫。但后来我们发现Web逐渐发展为扁平式设计，把文字提到一个比较高的位置，对文本的打磨远高于对图形的要求，比如对字体、字号，文字风格与场景的搭配非常重视。</p>

<p>真正能够给我们带来价值或者说高效率传递价值的，是文字，图片只起辅助文字的作用。在Web开发当中，传来传去的就是文字，传图片也可以采用某种技术把它压缩成字符串进行传递。那么我们开发工具的文本化，实际上暗合了Web应用的这种发展趋势，所以我个人是比较推荐这种基于文字界面的开发方式。</p>

<p>好的，技术这块儿就先说这么多，大家感兴趣的话我们私底下交流。</p>

<p>下面谈一下关于搞技术的人创业的思考。</p>

<p>大概是去年的十月十一月份吧，我的一个同学找到我，希望能够一起来创业，他在会展行业做了很多年。</p>

<p>在工作当中了他感受到会展行业由于信息交流不畅，导致了很多问题，随着移动互联网出现，之前他感受到的所谓行业痛点，现在已经可以解决了。</p>

<p>加上之前一个做金融的同学和一个做运营的朋友，我们成立了创业团队，一起做牛展网（newfairs.com），这个网站简单理解就是会展领域的淘宝，我的理解可能不是很到位，大概就是这么一个角色。</p>

<p>很多同学对技术在创业当中如何发挥作用非常感兴趣，建议大家看下子柳写的那本《淘宝技术这十年》，这本书非常好地再现了淘宝发展过程中，技术所发挥的作用。</p>

<p>技术圈里会流传着很多硅谷的几个技术天才，用一种世人仰望的语言，做了一个横扫一切市场对手的应用，创造了财富，实现了个人财务自由。但是我在看《淘宝技术这十年》的过程当中，没有感受到这一点。初创团队所犯的那些错误，淘宝犯的也不少。所以我感觉，不要相信那些传言。现实世界中没有那么多的一刀毙命这种古龙风格的东西，技术所面临的问题，还是要认认真真一点一点地去解决的。</p>

<p>现在国家层面也很鼓励创业。大家可以看到创业团队如雨后春笋般出现。一夜之间到处大家都在谈创业。个人的想法的确是创业的开始，但其实并不特别重要，因为但凡你的创意靠谱，凡是你能想到的，基本上别人也能想到。</p>

<p>那么所谓的创意是什么？我认为是这样的：我们想到一个点，这个点可能是以前的一个问题，现在靠新技术或者新模式，能够解决它，也就是所谓的行业痛点。</p>

<p>当有了这个想法之后，在头脑当中的就会有一个对这个产品的构想，一个大概的框架，将来做出这个产品的话，大概希望能达到什么程度，解决什么问题。但它只是给自己设置的一个终点，而且还是个虚无缥缈不一定在哪儿的终点。那么我认为，至少需要有这么几方面帮你到达这个终点：</p>

<p>一个是运营，就是怎么才能让别人知道这个产品，让那些真正需要这个东西的人，能够看到有这么一个产品。</p>

<p>下面一个是资金，至少包括财务和这个金融两方面。一开始的时候如果只是几个人做为一种业余爱好，可能不存在怎么发展的问题，能不能挣钱也无所谓，但如果是严肃地把它当成一个事业来做的话，现金流在其中起的是像空气一样的作用，如果现金流断了，这件事儿可能就不了了之了，所以肯定要有个比较专业的人士来做这方面的工作。</p>

<p>最后，重要的内容当然得放后面，当然就技术了对吧！所有的想法都需要通过技术去实现，比如笑傲江湖里面，剑宗和气宗都觉得对方不怎么样。但至少剑宗比较重视剑招，不管高手低手，还能在外行面前糊弄两下，但是气宗，如果你什么都不拿，那你水平再高也没用。</p>

<p>创业过程中技术所发挥的作用，就像一个坚固的底盘，是所有一切想法、一切运营、资金流转，最后落实的东西。你的产品究竟怎么样，是好是坏，最后要通过技术的手段来做出实在的东西，传递到用户手上，最后形成一个闭环。</p>

<p>从开发者的角度，技术不仅仅是一个产品的承载平台这么一个角色，技术本身就是一个非常吸引人的领域，它不仅有是冰冷的代码，严密的理论。它的背后包含有丰富的文化背景。我们回望上世纪六七十年代到现在，Unix和Linux系统的发展历程，各种爱恨情仇，江湖恩怨，勾心斗角，忠诚和背叛，各种高大上和狗血的情节，在技术圈里都能看到。</p>

<p>那么好，上面几个方面我都基本上介绍了一下，如果大家还有什么问题的话，欢迎大家过来跟我互动。谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint System Provision]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/17/151844/"/>
    <updated>2015-04-17T15:18:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/17/151844</id>
    <content type="html"><![CDATA[<p>Use this note to build a development environment quickly on a fresh Ubuntu/Mint os.</p>

<h1>Packages</h1>

<p>First modify apt source with &hellip;
Then install the following packages with <code>aptitude</code>:</p>

<pre><code>zsh git vim autojump curl tree
</code></pre>

<p>The following packages are only needed on physical metal, not on virtual host:</p>

<pre><code>i3 i3status dmenu openssh-server parcellite udevil
</code></pre>

<p>where udevil is for USB management.</p>

<h1>Apps installed manually</h1>

<ul>
<li><p><a href="https://github.com/leetschau/dsnote">dsnote</a></p></li>
<li><p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p></li>
<li><p><a href="https://github.com/tpope/vim-pathogen">pathogen</a></p></li>
<li><p><a href="">synConfs</a></p></li>
<li><p>Power management script: pm</p></li>
</ul>


<h1>vim plugins</h1>

<ul>
<li><p><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a></p></li>
<li><p><a href="https://github.com/kien/ctrlp.vim">ctrlp</a></p></li>
</ul>


<h1>System configurations to be synchronized</h1>

<p>.zshrc, .vimrc, .tmux.conf, .oh-my-zsh/themes/lichao.zsh-theme, .i3/config, .xsessionrc</p>

<p>The following commands list managed configuration files (&ldquo;scf&rdquo; means Sync ConFigurations);
add new config: <code>scf add &lt;name&gt; &lt;location&gt;</code>;
remove existing config: <code>scf rm &lt;name&gt;</code>;
change location of a existing location: <code>scf mv &lt;name&gt; &lt;new-location&gt;</code>;
backup current configs to github,
and restore configs from github.</p>

<pre><code>scf ls
scf add i3 ~/.i3/config
scf rm i3
scf mv i3 ~/.i3/config2
scf bak
scf res
</code></pre>

<h1>Firefox plugins</h1>

<ul>
<li><p>Downthemall</p></li>
<li><p>vimfx</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fzf让命令行更方便]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/16/172913/"/>
    <updated>2015-04-16T17:29:13+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/16/172913</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/fzf">fzf</a>是一个命令行工具，目前支持bash和zsh。</p>

<p>fzf配合autojump和vim，可以方便地在多层目录下进行文本编辑。</p>

<p>Before install fzf, download <a href="https://golang.org/">go</a> binary package (go1.4.2.linux-amd64.tar.gz for now)
extract it, and add its bin folder to $PATH.
Then install fzf with git.</p>

<p>首先运行<code>j demo</code>跳转到项目根目录下，项目文件结构如下：</p>

<pre><code>$ tree
.
├── both
│   ├── collections.coffee
│   └── router.coffee
├── client
│   ├── index.html
│   ├── layout.coffee
│   ├── layout.html
│   ├── registerHelpers.coffee
│   ├── stylesheets
│   │   └── app.scss
│   └── templates
│       ├── addPost
│       │   ├── addPost.coffee
│       │   ├── addPost.html
│       │   └── addPost.scss
│       ├── editPost
│       │   ├── editPost.coffee
│       │   └── editPost.html
│       ├── lists
│       │   ├── lists.coffee
│       │   └── lists.html
│       ├── postView
│       │   ├── postView.coffee
│       │   └── postView.html
│       ├── sharePost
│       │   ├── sharePost.coffee
│       │   └── sharePost.html
│       ├── sideMenu
│       │   └── sideMenu.html
│       └── userAccounts
│           ├── accountsConfig.coffee
│           ├── userAccounts.coffee
│           └── userAccounts.html
├── LICENSE
├── newnote.tmp
├── packages
├── README.md
└── server
    └── seeds.js

13 directories, 26 files
</code></pre>

<h1>配置</h1>

<p>全局定义：~/.fzf.zsh</p>

<p>默认快捷键可以在.fzf/shell/key-bindings.zsh中修改。
将默认的文件搜索快捷键从<strong>Ctrl-T</strong>改为<strong>Ctrl-I</strong>后，<tab>键可以触发目录搜索，
但<tab>键的自动补全功能不能用了，所以将Ctrl-T改成了Ctrl-N。
所以建议修改。</p>

<h1>使用</h1>

<p>要编辑client/templates/lists/lists.coffee文件，只要在命令行中输入：</p>

<pre><code>vi &lt;Tab&gt;
</code></pre>

<p>就进入了fzf搜索界面，只要输入任意层目录中的几个字符，就可以匹配到目标文件，
例如上面lists.coffee文件，只要输入<code>listco</code>就可以匹配到了。
其中当输入到list时，就匹配到了lists文件夹以及下面的两个文件，
这时可以继续输入&#8221;co&#8221;，直接命中目标，也可以用Ctrl-j/k在列表中上下选择目标。</p>

<p>实际上fzf进行目录文件匹配的快捷键是Ctrl-T，但对vi进行了特殊定义，使得用<tab>也可以出发fzf搜索。</p>

<p>按Alt-C，选择好目录，可以直接切换到目标目录，相当于<code>cd &lt;Ctrl-T&gt;</code>的快捷版。</p>

<p>Ctrl-R在命令行历史使用<strong>模糊</strong>匹配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sync a Fork on Github]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/15/105035/"/>
    <updated>2015-04-15T10:50:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/15/105035</id>
    <content type="html"><![CDATA[<p>I forked <a href="https://github.com/mitsuhiko/flask">flask repository</a> to
<a href="https://github.com/leetschau/flask">my own account</a>.</p>

<p>After several months, there are many new commits to the original flask repo.
How to sync these new commits to my fork?</p>

<h1>Option 1: In Github Web UI</h1>

<p>Three steps: compare, send pull request, and merge.</p>

<p>See Olufemi Israel Olanipeku&rsquo;s answer of
<a href="http://stackoverflow.com/questions/20984802/how-can-i-keep-my-fork-in-sync-without-adding-a-separate-remote/21131381#21131381">How can I keep my fork in sync without adding a separate remote?</a> for details.</p>

<h1>Option 2: In Terminal</h1>

<p>You can do it via your local clone:</p>

<ol>
<li><p>Clone leetschau/flask to local machine;</p></li>
<li><p>Add mitsuhiko/flask as a remote repo;</p></li>
<li><p>Pull new commit from mitsuhiko/flask to your local machine;</p></li>
<li><p>Push your local repo to leetschau/flask.</p></li>
</ol>


<p>See <a href="https://help.github.com/articles/syncing-a-fork/">Syncing a fork</a> for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的Generator和yield]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/08/161006/"/>
    <updated>2015-04-08T16:10:06+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/08/161006</id>
    <content type="html"><![CDATA[<p>下面的代码演示了yield的一个使用场景：</p>

<pre><code>def fab(max): 
    n, a, b = 0, 0, 1 
    while n &lt; max: 
        yield b 
        # print b 
        a, b = b, a + b 
        n = n + 1 

for n in fab(5):
    print(n)
</code></pre>

<p>简单地讲，yield的作用就是把一个函数变成一个Generator，
带有yield的函数不再是一个普通函数，Python解释器会将其视为一个Generator，
调用<code>fab(5)</code>不会执行fab函数，而是返回一个iterable对象。
在for循环执行时，每次循环都会执行fab函数内部的代码，执行到<code>yield b</code>时，
fab 函数就返回一个迭代值，下次迭代时，代码从<code>yield b</code>的下一条语句继续执行，
而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到<code>yield</code>。</p>

<p>上面的<code>fab</code>函数也可以返回一个List，与Generator相比，缺点是内存使用量会很大，
比如要读取一个10GB的文件，如果直接使用f.read()会把整个文件加载到内存中，
用Generator代替List，可以保证内存使用量是固定的，例如下面的1024字节：</p>

<pre><code>def read_file(fpath): 
    BLOCK_SIZE = 1024 
    with open(fpath, 'rb') as f: 
        while True: 
            block = f.read(BLOCK_SIZE) 
            if block: 
                yield block 
            else: 
                return
</code></pre>

<p>上面的文件读取是为了演示yield的用法，在实际读取文件时，
如果是大文件，不能一次性载入所有内容，使用for循环，一次载入一行到内存：</p>

<pre><code>with open('workfile', 'r') as f:
    for line in f:
        print(line)
</code></pre>

<p>反之，如果文件比较小，需要一次性载入内存，使用<code>readlines()</code>方法：</p>

<pre><code>with open('workfile', 'r') as f:
    lines = f.readlines()
</code></pre>

<p>参考：</p>

<p><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/">Python yield 使用浅析</a></p>

<p><a href="https://docs.python.org/2/tutorial/inputoutput.html">7. Input and Output</a> in <a href="https://docs.python.org/2/tutorial/index.html">The Python Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulate PSD Files in Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/08/074421/"/>
    <updated>2015-04-08T07:44:21+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/08/074421</id>
    <content type="html"><![CDATA[<p><code>gimp</code> is preinstalled on Mint.</p>

<pre><code>$ gimp target.psd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert MS Word File to PDF Files]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/30/181242/"/>
    <updated>2015-03-30T18:12:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/30/181242</id>
    <content type="html"><![CDATA[<p>On Ubuntu/Mint,
when we receive MS Word documents (.doc or .docx), convert it to pdf,
then open it with evince.</p>

<pre><code>sudo apt-get install unoconv
doc2pdf target.docx
</code></pre>

<p>doc2pdf save output pdf file into <same-name>.pdf by default.</p>

<p>Ref: <a href="http://askubuntu.com/questions/396825/convert-docx-to-pdf">Convert docx to PDF</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrapy Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/30/175224/"/>
    <updated>2015-03-30T17:52:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/30/175224</id>
    <content type="html"><![CDATA[<p>Install on Ubuntu/Mint:</p>

<pre><code>sudo apt-get install python-twisted python-libxml2 python-simplejson
sudo pip install scrapy
</code></pre>

<p>Create an alias in ~/.bash_aliases for convenience: <code>alias sa='scrapy'</code>.</p>

<p>Crawl website in shell:</p>

<pre><code>$ scrapy shell http://myexpo.com/exhibition/32191.html
...
[1] name = response.xpath('//h1/text()').extract()[0]
[2] time = response.xpath('//div[@class="location"]/span[1]/text()').extract()[0].split('\r\n')[1].strip()
[3] addr = response.xpath('//div[@class="location"]/span[2]/text()').extract()[0].split('\r\n')[1].strip()
</code></pre>

<h1>Crawl my blog</h1>

<p>$ sa startproject myblog</p>

<p>Ref:</p>

<p><a href="http://blog.csdn.net/u012150179/article/details/32911511">scrapy研究探索（二）——爬w3school.com.cn</a></p>

<h1>Unicode character in Python 2.x</h1>

<p>You have to add u&#8217;&lsquo; prefix to a unicode string in Python 2.x.
Their raw value is in &rsquo;\u&#8217; format.
To see them in human friendly format, use <code>print()</code> function.</p>

<pre><code>In [85]: ex = u'中国2015年3月'

In [86]: ex
Out[86]: u'\u4e2d\u56fd2015\u5e743\u6708'

In [87]: print(ex)
中国2015年3月

In [88]: ex.find(u'年')
Out[88]: 6
</code></pre>

<p>See more detailed contents about this topic in note &ldquo;Unicode and File I/O in Python 2.X and 3.X&rdquo;.</p>

<h1>XPath Grammar</h1>

<p>Ref: <a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp">XPath 语法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优化网站加载速度的方法]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/27/173224/"/>
    <updated>2015-03-27T17:32:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/27/173224</id>
    <content type="html"><![CDATA[<h1>Google PageSpeed</h1>

<p>在页面中输入要测试的url，然后就可以运行测试了，给出的是综合评分和各项改进措施。</p>

<h1>YSlow</h1>

<p>在Firefox里以插件方式安装YSlow，运行YSlow需要首先安装Firebug。
在FireFox中打开要测试的网站，然后开启Firebug，切换到最右侧的YSlow页面，点击测试按钮开始测试。</p>

<p>Google PageSpeed只能测试有公共IP的网站，YSlow可以测试本地运行的网站，而且结果似乎更为详细。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Meteor Application Manually]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/26/203002/"/>
    <updated>2015-03-26T20:30:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/26/203002</id>
    <content type="html"><![CDATA[<p>首先在<a href="http://www.aliyun.com/">阿里云</a>上购买一台&#8221;云服务器ECS&#8221;，
然后进入通过SSH连接VPS。</p>

<p>作为Meteor应用的生产环境，只需要安装mongoDB和Node.js就可以了，不需要安装Meteor.
通过aptitude安装的mongoDB虽然版本比较老(2.4)，但不接受本机以外的连接，
安全性有保障。</p>

<pre><code># aptitude update
# aptitude install mongodb-server
# aptitude install software-properties-common
# add-apt-repository ppa:chris-lea/node.js
# aptitude update
# aptitude install nodejs
</code></pre>

<p>Then create a start script &ldquo;startMeteor&rdquo;:</p>

<pre><code>#!/bin/bash

export PORT=80
export MONGO_URL=mongodb://localhost:27017/newfairs
export ROOT_URL=http://www.newfairs.biz
node /root/bundle/main.js &gt; /root/meteorApp.log
</code></pre>

<p>Now build Meteor application package on developing computer,
and transfer it to production machine:</p>

<pre><code>cd /path/to/meteorProjectRoot
meteor build .
scp newfairsweb.tar.gz alivps:~/
</code></pre>

<p>On production machine, extract Meteor package and install it as a node app:</p>

<pre><code>cd /root
tar zxf newfairsweb.tar.gz
cd bundle/programs/server
npm install
</code></pre>

<p>将VPS恢复到初始状态的方法是：在云服务器ECS主页的&#8221;实例&#8221;页下，
对应主机最右边，&#8221;管理 升级 续费 更多&#8221;中点击&#8221;更多&#8221;，
首先点击&#8221;停止&#8221;来停止实例运行，然后点击&#8221;重新初始化磁盘&#8221;，
将系统盘和数据盘都初始化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Meteor App With MUP]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/25/195307/"/>
    <updated>2015-03-25T19:53:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/25/195307</id>
    <content type="html"><![CDATA[<h1>Create VPS</h1>

<p>First build a vps on <a href="https://digitalocean.com/">DigitalOcean</a>, and name it &ldquo;MeteorUpEx&rdquo;.
Get its IP address &ldquo;128.199.72.xxx&rdquo; at the home page of the droplet.
Get its root password in you email.
Add the following section into ~/.ssh/config:</p>

<pre><code>Host do
Hostname 128.199.72.206
User root
</code></pre>

<p>Add ssh auto login with <code>ssh-copy-id do</code>.</p>

<h1>Publish Meteor App</h1>

<p>Install <a href="https://github.com/arunoda/meteor-up">Meteor Up</a> with <code>npm install -g mup</code>.</p>

<p>Create a mup project:</p>

<pre><code>cd ~/docs/tmp
mkdir nfDeploy
cd nfDeploy
mup init
</code></pre>

<p>Now you can see a mup.json file, edit it as follows:</p>

<pre><code>{
  "servers": [
    {
      "host": "128.199.72.xxx",
      "username": "root",
      "pem": "~/.ssh/id_rsa"
    }
  ],

  "setupMongo": true,
  "setupNode": true,
  "nodeVersion": "0.10.36",
  "setupPhantom": true,
  "appName": "newfairs",

  "app": "/home/chad/docs/tmp/newfairs/newfairsweb",

  "env": {
    "PORT": 80,
    "ROOT_URL": "http://niufairs.biz"
  },

  "deployCheckWaitTime": 15
}
</code></pre>

<p>Note that the &ldquo;appName&rdquo; is also the database name used by Meteor app in mongoDB.
&ldquo;app&rdquo; is the path of your Meteor app source code folder on your local computer.
mup will bundle codes in it, and publish them to host on vps.</p>

<p>You can only use key authentication.
If you use password, an &ldquo;sshpass required for password based authentication&rdquo; error occurs.</p>

<p>Setup production environment: <code>mup setup</code>;
Delpoy app: <code>mup deploy</code>;</p>

<p>If you use external mongodb, add &ldquo;MONGO_URL&rdquo; into &ldquo;env&rdquo; section of mup.json. For example:</p>

<pre><code>"MONGO_URL": "mongodb://104.237.135.xxx:27017/meteor"
</code></pre>

<p>After changing the mongo url, run <code>mup reconfig</code> to validate the new config and restart the Meteor app.</p>

<h1>Import Data</h1>

<p>First dump data from database &ldquo;meteor&rdquo; in source mongoDB server to local machine:</p>

<pre><code>mongodump -h 104.237.135.xxx -d meteor -o mynf
scp -r mynf do:~/
ssh do
cd mynf
mongorestore -d newfairs meteor
</code></pre>

<p>Now verify data in mongoDB of the vps with <code>mongo newfairs</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scanning Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/18/095552/"/>
    <updated>2015-03-18T09:55:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/18/095552</id>
    <content type="html"><![CDATA[<h1>Discovery Scanning</h1>

<p>This step find the IP address of a website, most frequently with <code>ping</code> tools.</p>

<h1>Port scanning</h1>

<p>This step find the openning ports on a host.</p>

<h2>Stealth scan</h2>

<p>Scan commonly used 1000 ports (preconfigured by nmap) of a host: <code>nmap -sS &lt;target-ip&gt;</code>;</p>

<p>Scan all port of a host: <code>nmap -sS &lt;target-ip&gt; -p 0-65535</code>;</p>

<p>Example:</p>

<pre><code>$ sudo nmap -sS xxx.xxx.xxx.143 -p 27010-27020

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-18 09:01 CST
Nmap scan report for newfairs.com (xxx.xxx.xxx.143)
Host is up (0.30s latency).
PORT      STATE  SERVICE
27010/tcp closed flexlm10
27011/tcp closed unknown
27012/tcp closed unknown
27013/tcp closed unknown
27014/tcp closed unknown
27015/tcp closed unknown
27016/tcp closed unknown
27017/tcp open   unknown
27018/tcp closed unknown
27019/tcp closed unknown
27020/tcp closed unknown

Nmap done: 1 IP address (1 host up) scanned in 5.66 seconds
</code></pre>

<p>Port 27017 (used by mongoDB) is detected.</p>

<h2>Connection scan</h2>

<p>Command: <code>nmap -sT &lt;target-ip&gt;</code>;</p>

<p>Compared with connection scan, stealth scan won&rsquo;t be logged by the target.
So it&rsquo;s more safe.</p>

<h1>Banner grabbing</h1>

<p>This step get the banner of a service on a specific port (here is 21):</p>

<pre><code>sudo nmap -sT xxx.xxx.xxx.234 -p 21 --script=banner

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-18 09:30 CST
Nmap scan report for xxx.xxx.xxx.234
Host is up (0.064s latency).
PORT   STATE SERVICE
21/tcp open  ftp
| banner: 220-FileZilla Server v0.9.33 beta\x0D\x0A220-written by Tim Kos
|_se (Tim.Kosse@gmx.de)\x0D\x0A220 Please visit http://sourceforge.net...
</code></pre>

<p>So this is a FileZilla server, version 0.9.33,
which implies the OS is probably Windows.</p>

<h1>Service identification</h1>

<p>This step detect what service is running on a specific port of a host.</p>

<p>This is the detection on port 3389: <code>sudo nmap xxx.xxx.xxx.234 -p 3389 -sV</code>;</p>

<p>Example:</p>

<pre><code>sudo nmap xxx.xxx.xxx.234 -p 80 -sV                

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-18 09:23 CST
Nmap scan report for xxx.xxx.xxx.234
Host is up (0.072s latency).
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.2.17 ((Win32) PHP/5.3.5)
</code></pre>

<h1>Operating system identification</h1>

<p>Command: <code>nmap &lt;target-ip&gt; -O</code>;</p>

<p>Example:</p>

<pre><code>$ sudo nmap xxx.xxx.xxx.143 -O

Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-18 08:43 CST
Nmap scan report for xxx.com (xxx.xxx.xxx.143)
Host is up (0.32s latency).
Not shown: 984 closed ports
PORT     STATE    SERVICE
22/tcp   open     ssh
80/tcp   open     http
135/tcp  filtered msrpc
139/tcp  filtered netbios-ssn
445/tcp  filtered microsoft-ds
593/tcp  filtered http-rpc-epmap
901/tcp  filtered samba-swat
1068/tcp filtered instl_bootc
1723/tcp filtered pptp
3000/tcp open     ppp
3128/tcp filtered squid-http
4444/tcp filtered krb524
5800/tcp filtered vnc-http
5900/tcp filtered vnc
6129/tcp filtered unknown
6667/tcp filtered irc
Aggressive OS guesses: Linux 3.2 - 3.6 (96%), Linux 2.6.32 - 2.6.39 (94%), Linux 2.6.32 - 3.0 (93%), Linux 3.5 (92%), Linux 2.6.32 (92%), IPFire firewall 2.11 (Linux 2.6.32) (92%), Linux 2.6.15 - 2.6.26 (likely embedded) (90%), Linux 2.6.32 - 2.6.33 (90%), Linux 2.6.32 - 2.6.35 (90%), Linux 2.6.18 (90%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 23 hops

OS detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 83.20 seconds
</code></pre>

<p>Ref: &ldquo;Kali Linux Network Scanning Cookbook&rdquo; by Justin Hutchens.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a CVS Repo to SVN Repo]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/10/102817/"/>
    <updated>2015-03-10T10:28:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/10/102817</id>
    <content type="html"><![CDATA[<p>Download cvs2svn-2.4.0.tar.gz from <a href="http://cvs2svn.tigris.org/">cvs2svn</a> and extract it.
We get a folder named &ldquo;cvs2svn-2.4.0&rdquo;.</p>

<p>The cvs repo to be converted is at $HOME/Desktop/goat.
There&rsquo;s a &ldquo;CVSROOT&rdquo; and &ldquo;dev/GOAT&rdquo; folder in it.</p>

<p>Change CWD to cvs2svn-2.4.0 and run <code>./cvs2svn --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/goatsvn ~/Desktop/goat</code>.</p>

<p>After convertion, you get your subversion repo at $HOME/Desktop/goatsvn.</p>

<p>Check it with <code>svn ls file://$HOME/Desktop/goatsvn</code>, and <code>svn log HEAD file://$HOME/Desktop/goatsvn</code>
and <code>svn cat file://$HOME/Desktop/goatsvn/...</code>.</p>

<p>If you encouter this error: &ldquo;ERROR: A CVS repository cannot contain both repo/path/file.txt,v and repo/path/Attic/file.txt,v&rdquo;:
<code>./cvs2svn --retain-conflicting-attic-files --encoding=GBK --fallback-encoding=utf8 -s ~/Desktop/dev2SVN ~/Desktop/ARENA/dev2</code></p>

<p>Next add this repo to a existing repository:</p>

<p>Ref:</p>

<p>Google for &ldquo;subversion format 5&rdquo;.</p>

<p><a href="http://serverfault.com/questions/277441/difference-between-the-format-and-db-format-files-in-a-subversion-repository">http://serverfault.com/questions/277441/difference-between-the-format-and-db-format-files-in-a-subversion-repository</a></p>

<p><a href="http://stackoverflow.com/questions/3420741/cvs-comma-v-files-in-attic-and-directory">http://stackoverflow.com/questions/3420741/cvs-comma-v-files-in-attic-and-directory</a></p>

<p><a href="http://cvs2svn.tigris.org/faq.html#atticprob">http://cvs2svn.tigris.org/faq.html#atticprob</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Data in MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/180118/"/>
    <updated>2015-03-06T18:01:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/180118</id>
    <content type="html"><![CDATA[<p>Say you want to update data in updated.csv into &ldquo;fairs&rdquo; collection of &ldquo;meteor&rdquo; database in MongoDB.</p>

<ol>
<li><p>Convert data to be updated in csv file to json file: <code>csvjson updated.csv rawdata.json</code>;</p></li>
<li><p>Load this file in a js script &ldquo;my-script&rdquo; with <code>var data = require('./rawdata.json');</code>;</p></li>
<li><p>Check and convert data content in my-script, and write the reulst into another json file &ldquo;result.json&rdquo;:</p>

<pre><code> var fs = require('fs');
 fs.writeFile('result.json', JSON.stringify(result));
</code></pre></li>
<li><p>Run my-script with <code>node my-script</code>;</p></li>
<li><p>Import result.json into a new collection &ldquo;tmp&rdquo; of MongoDB database with
<code>mongoimport -d $TargetDB -c $TargetCol --type json --file result.json --jsonArray</code>;</p></li>
<li><p>Update collection fairs while traversing collection tmp;</p>

<pre><code> db = connect("localhost:27017/meteor");
 cursor = db.tmp.find();
 while ( cursor.hasNext() ) {
   db.fairs.save(cursor.next());
 }
</code></pre></li>
<li><p>Save above script into update.js;</p></li>
<li><p>Update data with <code>mongo update.js</code>;</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Website Server Provsion]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/101802/"/>
    <updated>2015-03-06T10:18:02+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/101802</id>
    <content type="html"><![CDATA[<h1>Work flow</h1>

<ol>
<li><p>Install packages: tree, curl, git;</p></li>
<li><p>Create user chad, add it to sudoers;</p></li>
<li><p>Install Meteor: <code>curl https://install.meteor.com | /bin/sh</code>;</p></li>
<li><p>download mongoDB package (mongodb-linux-x86_64-rhel62-3.0.0.tgz for now) from <a href="https://www.mongodb.org/">mongoDB</a>;</p></li>
<li><p>Extract mongoDB package to $HOME/apps, add $MONGO_HOME/bin to $PATH
 (in file ~/.bash_profile);</p></li>
<li><p>Config mongoDB: save the following codes into $HOME/docs/mongoRepo/mongo.conf:</p>

<pre><code> net:
   bindIp: 127.0.0.1
   port: 27017
 storage:
   dbPath: dbHome
 systemLog:
   destination: file
   path: "mongodb.log"
   logAppend: true
</code></pre></li>
<li><p>Start mongod: <code>mongod --config mongo.conf</code>, or in background: <code>nohup mongod --config mongo.conf &amp;</code>;</p></li>
</ol>


<h1>Ansible</h1>

<h2>Managing Node</h2>

<p>Install <a href="http://www.ansible.com/">ansible</a> with <code>sudo pip install ansible</code>.</p>

<h2>Provision of remote host</h2>

<p>On remote host, create user with <code>sudo useradd -m chad</code>
and set password: <code>sudo passwd chad</code>.
On manging node, add ssh automatic login of chad and root on remote host with <code>ssh-copy-id</code>.</p>

<p>For a vagrant host, run the following commands in project&rsquo;s root directory:</p>

<pre><code>vagrant ssh
sudo passwd
// set password for root ...
sudo useradd -m chad
sudo passwd chad
// set password for chad ...
exit
ssh-copy-id chad@localhost -p 2222
ssh-copy-id root@localhost -p 2222
</code></pre>

<p>// Install Node.js, MongoDB,</p>

<p>Install mms with installing its rpm package,
you can remove it later with:</p>

<pre><code># service --status-all
# rpm -qa|grep mongo
mongodb-mms-automation-agent-manager-1.6.2.960-1.x86_64
# rpm -e mongodb-mms-automation-agent-manager-1.6.2.960-1.x86_64
# service --status-all
</code></pre>

<p>Change host name:</p>

<p>Add &ldquo;newfairs.biz&rdquo; after &ldquo;127.0.0.1  &rdquo;, before &ldquo;localhost&rdquo; in /etc/hosts.
Restart mms agent: <code>service mongodb-mms-automation-agent restart</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Database Authentication for Meteor App]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/06/090609/"/>
    <updated>2015-03-06T09:06:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/06/090609</id>
    <content type="html"><![CDATA[<p>MongoDB version: 3.0.</p>

<ol>
<li><p>Start mongod without auth: <code>mongod</code>;</p></li>
<li><p>Connect to server with <code>mongo</code>;</p></li>
<li><p>Create admin and database owners:</p></li>
<li><p>Start mongod with <code>mongod --auth</code>;</p></li>
<li><p>Start Meteor app with <code>MONGO_URL="mongodb://chad:123@localhost:27017/test" meteor</code>.</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb">http://stackoverflow.com/questions/4881208/how-to-put-username-password-in-mongodb</a></p>

<h1>MMS</h1>

<p>Connect mongodb server without authentication: <code>mongo &lt;ip&gt;:&lt;port&gt;</code>;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Website Remotely]]></title>
    <link href="http://leetschau.github.io/blog/2015/03/05/095056/"/>
    <updated>2015-03-05T09:50:56+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/03/05/095056</id>
    <content type="html"><![CDATA[<h1>Prerequisite</h1>

<h2>Managing Node</h2>

<p>// Install Fabric with <code>sudo pip install fabric</code>.</p>

<p>Install ansible with <code>sudo pip install ansible</code>.</p>

<h2>Provision of remote host</h2>

<p>Create user with <code>sudo useradd -m chad</code>,
then add ssh-auto-login with <code>ssh-copy-id ...</code>.</p>

<p>// Install Node.js, MongoDB,</p>

<h1>Backup MongoDB</h1>

<h1>Import new data</h1>

<h1>Update website codes</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Website Monitor for Meteor Application]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/28/152115/"/>
    <updated>2015-02-28T15:21:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/28/152115</id>
    <content type="html"><![CDATA[<h1>Google Analytics</h1>

<p>Add tracking code (<script>&hellip;</script>) into the &ldquo;<head>&hellip;</head>&rdquo; (commonly in head.html) of your meteor app.</p>

<p>You can find your tracking codes at Admin -> User Management -> Tracking Info -> Tracking Code.</p>

<p>Get real-time data (such as on-site user number) at Reporting -> Real-Time -> Overview.</p>

<h1>Kadira</h1>

<pre><code>meteor add meteorhacks:kadira
</code></pre>

<p>Add the following codes into server/kadira.js:</p>

<pre><code>Kadira.connect('&lt;App ID&gt;', '&lt;App Secret&gt;');
</code></pre>

<p>get your AppID and App secret at <a href="https://kadira.io/">Kadira</a> -> [Your App] -> Settings.</p>

<p>Then see read-time statistics on its dashboard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Monitor Tools for Linux Server]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/28/114611/"/>
    <updated>2015-02-28T11:46:11+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/28/114611</id>
    <content type="html"><![CDATA[<h1>sar</h1>

<p>On CentOS 6.5, install sysstat with <code>yum install sysstat</code>.
And the cron jobs will be created in /etc/cron.d/sysstat.
The default routines defined in this file is running system activity accounting every 10 minutes,
and generating a daily summary of process accounting at 23:53 each day.</p>

<p>Now you can see system memory usage hisory with <code>sar -r 2 5</code>,
which means display memory usage every 2 seconds, 5 times totally.</p>

<p>To see the memory history: <code>sar -r -f /var/log/sa/sa28</code>,
the total free memory is the sum of 3 items: kbmemfree, kbbuffers, kbcached.</p>

<p>Refs:</p>

<ul>
<li><p><a href="https://www.thomas-krenn.com/en/wiki/Collect_and_report_Linux_System_Activity_Information_with_sar">https://www.thomas-krenn.com/en/wiki/Collect_and_report_Linux_System_Activity_Information_with_sar</a></p></li>
<li><p><a href="http://serverfault.com/questions/85470/meaning-of-the-buffers-cache-line-in-the-output-of-free.">http://serverfault.com/questions/85470/meaning-of-the-buffers-cache-line-in-the-output-of-free.</a></p></li>
</ul>


<h1>dstat</h1>

<p>On CentOS 6.5, install dstat with <code>yum install dstat</code>.</p>

<p>Log the memory usage with <code>dstat --output memlog.csv -t -m 600 500</code>,
which will log totally 500 times, with a 10-minute interval.</p>

<h1>Glances</h1>

<p>Install it with <code>curl -L http://bit.ly/glances | /bin/bash</code>.
This only works on Linode node.
It failed on my loptop with message &ldquo;connection reset by peer&rdquo;.
On the Linode node, the installation failed with &ldquo;yum&rdquo; and &ldquo;pip&rdquo;.
It seems the reason is the dependencies are not met.</p>

<p>Use it with <code>glances</code> with root, or <code>glances -w</code> as a web server.
Then you can see the status of your server with url &ldquo;<a href="http://104.237.135.143:61208">http://104.237.135.143:61208</a>&rdquo;.</p>

<p>For keep a system log, use <code>glances -t 600 --export-csv /tmp/glances.csv</code>,
which means write a csv-format log every 10 minutes (3 seconds by default) to /tmp/glances.csv.</p>

<p>P.S.: There&rsquo;s also a <a href="http://munin-monitoring.org/">Munin</a>.
It seems the installation is complex, so I gave up.</p>

<h1>collectl</h1>

<p>Install with <code>yum install collectl</code>.</p>

<p>Print memeory usage with <code>collectl -i 2 -c 5 -sm</code>.</p>

<p>Print all subsystems with <code>collectl --showsubsys</code>.</p>

<p>Log output information with &ldquo;-f&rdquo; options: <code>collectl -sm -i 2 -c 5 -f mylog</code>.
It creates a gz file, which you have to extract with <code>gzip -d mylog...</code>.</p>

<p>Ref: <a href="http://lintut.com/best-command-line-tools-for-linux-performance-monitring/">http://lintut.com/best-command-line-tools-for-linux-performance-monitring/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Algorithm of Related Fairs]]></title>
    <link href="http://leetschau.github.io/blog/2015/02/25/141712/"/>
    <updated>2015-02-25T14:17:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/02/25/141712</id>
    <content type="html"><![CDATA[<p>For a given fair A, it&rsquo;s <em>major category</em> are a set of its cat.major subdocuments.</p>

<p>For example, for the fair:</p>

<pre><code>{ cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] }
</code></pre>

<p>its major categories are set [&ldquo;abc, &#8220;xyz&rdquo;].
Here we say the major categories of fair X is <code>majorCat(X)</code>.</p>

<p>If the intersection of set <code>majorCat(X)</code> and <code>majorCat(Y)</code> are not empty,
we say fair X and Y are <em>related</em>.</p>

<p>So for a given fair X, how to find all its related fairs in a collection?</p>

<p>Here is the demonstration:</p>

<p>In mongodb, create a test collection with the following codes:</p>

<pre><code>db.cats.insert( { cat: [ { major: "abc", minor: [ 1,23,3] }, { major: "xyz", minor: [ 3, 23, 583]} ] } );
db.cats.insert( { cat: [ { major: "abcd", minor: [ 1,23,3] }, { major: "xyzu", minor: [ 87, 987, 343]} ] } );
db.cats.insert( { cat: [ { major: "bcd", minor: [ 1,23,3] }, { major: "abc", minor: [ 3, 23, 876]} ] } );
db.cats.insert( { cat: [ { major: "xyz", minor: [ 8,83,5] }, { major: "axc", minor: [ 34, 3, 76]} ] } );
</code></pre>

<p>Create a new Meteor app with <code>meteor create relatedFairs</code>, and its files:</p>

<p>relatedFairs.html</p>

<pre><code>&lt;head&gt;
  &lt;title&gt;relatedFairs&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;h1&gt;Find related fairs&lt;/h1&gt;

&lt;/body&gt;

&lt;template name="hello"&gt;
  &lt;ul&gt;

      &lt;li&gt; 
        &lt;b&gt;:&lt;/b&gt;

          ,

      &lt;/li&gt;

  &lt;/ul&gt;

    &lt;p&gt;Related fairs of the first fair &lt;/p&gt;
    &lt;ul&gt;

        &lt;li&gt;
          &lt;b&gt;:&lt;/b&gt;

            ,

        &lt;/li&gt;

    &lt;/ul&gt;

&lt;/template&gt;
</code></pre>

<p>relatedFairs.js:</p>

<pre><code>Fairs = new Mongo.Collection("cats");

if (Meteor.isClient) {
  Template.hello.helpers({
    allFairs: function () {
      return Fairs.find();
    },
    related: function () {
      var theXrd = 0,
          theFair = Fairs.findOne( {}, {skip: theXrd } );
      if (! theFair) {
        return null;
      }
      var majors = _.map(theFair.cat, function(i) { return i.major; } );
      var rels = Fairs.find( { cat: { $elemMatch: { major: { $in: majors } } },
                               _id: { $ne: theFair._id } } );
      return {firstID: theFair._id._str, relatedFairs: rels };
    }
  });
}
</code></pre>

<p>Here we use <a href="http://underscorejs.org/">Underscore.js</a>,
so install this package with <code>meteor add underscore</code> to run our demo app
(with <code>MONGO_URL="mongodb://localhost:27017/test" meteor</code> in project root folder).</p>

<p>Modify the value of &ldquo;theXrd&rdquo; above, you can see the related fairs of each fair.</p>

<p>To make a demo in a production collection,
in fair &ldquo;A&rdquo; we find a major category called &ldquo;垃圾车与运输车&#8221;，
then choose a fair B, whose id is &#8220;54e71a5642fb549b1389ae6f&rdquo;.</p>

<p>Let&rsquo;s add the major cateory to fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a5642fb549b1389ae6f") }, { $push: {category: {major: "垃圾车与运输车"}} } );
</code></pre>

<p>Now fair A and B is related. Test them on your web site.
If the test is past, remove the test data from fair B:</p>

<pre><code>db.fairs.update( { _id: ObjectId("54e71a6642fb549b1389ae6f") }, { $pop: { category: 1 } } );
</code></pre>
]]></content>
  </entry>
  
</feed>
