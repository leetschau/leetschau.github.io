<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
<<<<<<< HEAD
  <updated>2015-06-01T12:50:28+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
=======
  <updated>2015-05-26T17:47:26+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Penetrate GFW With Sshuttle]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/28/102822/"/>
    <updated>2015-05-28T10:28:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/28/102822</id>
    <content type="html"><![CDATA[<p>Comparing with shadowsocks, <a href="https://github.com/apenwarr/sshuttle">sshuttle</a> is a much lightweight, open source alternative.
All you need is a ssh server outside GFW.
The installation is just <code>git clone</code> its repository on github.
To use it, only run a command on client: <code>./sshuttle --dns -r user@sshServer 0/0</code>.
Here option &ldquo;&ndash;dns&rdquo; is necessary to avoid DNS pollution inside GFW.
Add &ldquo;-v&rdquo; or &ldquo;-vv&rdquo; option ONLY for debug purpose, for it decreases connecting speed a lot.
&ldquo;-r&rdquo; means &ldquo;remote&rdquo;, so add your remote host outside GFW after it.
The last part of this command specifies which connections on client to use this proxy.
&ldquo;0/0&rdquo; means all connections, which is the most common case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Store Small Images in MongoDB via Base64]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/27/180718/"/>
    <updated>2015-05-27T18:07:18+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/27/180718</id>
    <content type="html"><![CDATA[<p>The following codes save a image file first.
Then encoding it into Base64 string, and decoding it back into binary data (image).
Both images are the same. So the encoding/decoding works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">image_origial</span> <span class="o">=</span> <span class="s2">&quot;logo.png&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">image_origial</span><span class="p">,</span> <span class="s1">&#39;binary&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">original_data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;image_orig.png&#39;</span><span class="p">,</span> <span class="nx">original_data</span><span class="p">,</span> <span class="s1">&#39;binary&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">base64Image</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">original_data</span><span class="p">,</span> <span class="s1">&#39;binary&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;base64 str:&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">base64Image</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">base64Image</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">decodedImage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">base64Image</span><span class="p">,</span> <span class="s1">&#39;base64&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;binary&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;decodedImage:&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">decodedImage</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s1">&#39;image_decoded.png&#39;</span><span class="p">,</span> <span class="nx">decodedImage</span><span class="p">,</span> <span class="s1">&#39;binary&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Display Base64 string in html:</p>

<pre><code>&lt;template name="myform"&gt;
  &lt;img id="fromBase64" src="data:image/png;base64,"&gt;
&lt;/template&gt;
</code></pre>

<p>Corresponding JavaScript code:</p>

<pre><code>Template.myform.helpers({
  getPic: function() {
    return "iVBORw0KGgoAAAANSUhEUgAAAO8AAAB3CAIAAABkJ4DAAAAAA3NCSVQICAjb4U/gAAAAEHRFWHRTb2Z0d2FyZQBTaHV0dGVyY4LQCQAABkhJREFUeNrt3f1XUnccwPHvBbygPKlApCZyHJhSK52nddzD2VZznbmH07/gX9bv237ZD+vsoZ2zzpa2s1yd0kpXCZYikYCKyoMX9gNgCogIWKjv10/Xyy0z3nz93CugtBhZE8CRoOK/ANQMUDNAzQA1g5oBagaoGaBmgJpBzQA1A9QMUDOoGaDmOpJOxeOJ9YSS4o49ljRHImJlyb8wNRf0heKb2V1qs9XicrT32htliXv5uJAO+2tPUrHQnYknU8tK0Vvl1vZP+x0dOopm0qj/lDeCN/+a3i1lIUQitPDr2LP5ZJp7mprrm7I+OfHEm8h9JfrWc2d7v/q4/+oHns887ad0ucNiYV+08kH62vXxott7Hgzm5r0CjkdfriqZlTYZeX53Jbtf3+H+8l2rMfvYbGxpNjs7bTOT0+PzMU1r22mT+oD+PYX55u0ZHRkiMmoufrq34X/688P1/N1Gx/BZq1ElUvHo8+BaUjY6bE2yuqnn/EDPubSQDnBoJlbOAiuvOeq9/31+zapTg4PDdo2y6v/lljeQEkIIrd317YDNUMUYVXpmyIu46MGEztpcAW2bQS2E8mr2RSA3HscDL6bXLIPGynPeavHa9fGi2xX0DWre8Z3E4Dw/6tzPRY+1hR9v+iI7d7Z63vvGqa3t+S/5UnMNqa3dHXa/L6AIIYR8ouO0XiWESEaXVw/+czNUMDfXTCqdVkmSECIVj869jCa1xi6bXpaEUDYejN27U5DznmtzOQvt9vGDxKm5FpS1B/9M3QmlzB3dl86eaN5+IS4Vn52c+uNFPHOmaO9x92dvlrRGg0V7UBfaS8zWoOaSMUdmfxhbzF7j0JnPdJ/sam3USZurkfB/swveaO5HgCbH1aGOFnW1dRaWuucqTtnUXK50cnn8z4fTsZIHyZaPP3S5GlVVplzO0svCTM3VDc3xyMS/M5Ph4k/V0JjbPxnsdOhUFXS828pa9KatRZqaqbnKJVpZ8i9M+oK+cDwXtdrQ0uLqaj/TpucZodR8WLNOJJRNoZJljYaIjx/N0XpsqmWtWuZePa54XSCoGaBmgJoBagY1A9QMUDNAzQA1g5oBagaoGaBmUDNAzQA1A9QMUDOoGaBm4M2rr9dse/2vuEtQsaP1fhpg0gCoGaBmgJoBagY1A9QMUDNAzQA1g5oBagaoGaBmUDNAzQA1A9QMFHMkfpdrWokEA4/nI0vR+HpK1dTY2Gq19na2tDTw24mPl8P+usB0PLI4dtfr3Si8SdvV5/7IaeS3xlPz4Ug5EfL9dNsf2f0Ik9PzdZ9ZS9DMzXW/LIfHJl6n3GBs7XM73+891WdvasjtXPFO31pMpLmfmZvrWyrk9c0ms49J++kzl7sNuTX41EBk4ffbc4GUEELxPfKH7F2Wih62166Pj44MFW7nHVPibyj6R8DavJOy8Ww+ltmU7a5Lr1MWQkja5vZLAxZt5qNYcGZFqf4Tjo4M7Rbu6MhQptrCDbA2lzFmJNcD2ZjVnc5mXf5kLOmsJ7vkpZmEECIZXNlMN6v3OzwXLsa7BbpVeeEGqLmMmpXN5NbAXPQsT5JNshAJIYTYjKfSQlR2KlhiPS6a+G4DCah5V5JGI2c3E5FYWhgK5+pEOJ77IrWVLMzlDL5FW8/bSdzUvFfNDfqTTeLluhAi9fxpaM1i0+8INr0WmPdlV29tm1kj7TPl7VNyiXNBFmZqrsnpq87V2Xh/ekMIoSw9/e2RZri3RZ89p02vB3037kc2Mx/pbS7j/k52KyiycGIma2reR85mR3evb+pxTAiRDnsff+c3Ou1Go1pZXQ57Q4ncYQ1uT1tzdVduMuv0nnVuP4CzQGrepwbThQtdkTHfYub6W3zVO7eaV7ytp/eiTVOrHwWWbppV+e2vcIf7sWhsv3zRYVcXH62tbs/wO4aGWnyicgLdPlsTFmtzJeTmjs8viht/zwV2/IREsrg9X7iMNXyGxr6GDYJ+O9cGjsZ76yci89uClixuzxWXqcqU865sFA23nGoZPKi54qAli8tzxW3ieXPUfMiDXvbfC+n7nSae00zNwOHG6wJBzQA1A9QMUDOoGaBmgJoBagaoGdQMUDNAzQA1g5oBagaoGaBmgJpBzQA1A29efb3Xkdf/irsEFeMdCMCkAdSf/wFhi3LQYkpm9QAAAABJRU5ErkJggg==";
  }
});
</code></pre>

<p>Ref:</p>

<p><a href="http://en.wikipedia.org/wiki/Base64">Base64 on Wikipedia</a>;</p>

<p><a href="http://base64online.org/">http://base64online.org/</a></p>

<p><a href="https://gist.github.com/gabomdq/5415569">https://gist.github.com/gabomdq/5415569</a></p>
]]></content>
  </entry>
  
  <entry>
=======
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
    <title type="html"><![CDATA[Meteor基础知识之系统篇]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/26/174257/"/>
    <updated>2015-05-26T17:42:57+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/26/174257</id>
    <content type="html"><![CDATA[<h1>课程目标</h1>

<ol>
<li><p>理解Meteor的运行环境和安装过程；</p></li>
<li><p>获得Linux；</p></li>
<li><p>能够在Linux系统中进行简单的文件操作；</p></li>
</ol>


<h1>为什么是Linux</h1>

<p>请大家思考一个问题：Windows的知名度、用户数和“易用性”都比Linux高很多，
为什么要选择Linux作为开发和部署环境？</p>

<p>要回答这个问题，首先得搞清楚：操作系统作为人类发明的数不清的工具中的一种，
Windows和Linux各自的定位是什么，或者说它们的目标用户是谁？</p>

<p>回顾二者的历史，不难发现Windows的目标用户是普通计算机用户，
使用计算机主要用来完成日常工作和娱乐；Linux是一群程序员为自己开发的操作系统，
设计目标是为自己和世界提供一个新的选择，一个完全自由、可定制的系统。</p>

<p>本质上，Windows是一件商品，它的首要目标是创造利润（养活生产者），其次是易于使用；
Linux是一件自制工具，它的首要目标是易于制造（方便生产者），其次是易于使用。</p>

<p>这段话似乎比较虚，但你一定要记在心里，因为后续各种差异，都是这个区别的表象，
理解了这个区别，可以帮助你避免无数纠结和口水战，把宝贵的生命用在创造上，而不是选择和争论上。</p>

<p>Windows推崇封闭（为什么？），用户只要用它做事情就好，不需要也不能深入到系统内部，了解它的机制，
Linux推崇开放，所有的东西尽可能公开，用户可以方便地了解它的运行机制，
融入自己的理解，把它变成自己喜欢的样子。</p>

<p>落实到实现层面，Windows喜欢二进制文件，Linux喜欢文本文件（为什么？）
用Gancarz的话说，Linux是基于文本的操作系统，Windows是基于图形的操作系统。</p>

<p>Windows这种风格给许多人造成的一个误解：所有的数据都需要通过某个软件来编辑、展现，
如果你不会用某个软件，那么很遗憾对应的数据你就没法用了。
这显然是很荒谬的，写在磁盘上的数据与写在纸上的数据没有任何区别，
阅读它们唯一需要的是我们的眼睛，
如果某个软件商告诉你还需要借助他们搞出来的某个软件，
那只是他们惯于使用的无中生有创造利润的伎俩而已。</p>

<p>所以，作为一名开发者，你有权利了解你手里的工具是怎么工作的，
你需要把自己培养成赤手空拳也能在森林里活下去的特种兵，
而不是只会用别人给你的工具按部就班生产的流水线工人。</p>

<p>P.S.: 这里的Linux是“基于Linux内核的操作系统”的简称。</p>

<h1>获得Linux</h1>

<p>编写中……</p>

<h2>在Windows或者Mac上安装Linux虚拟机</h2>

<h2>在电脑上安装Linux</h2>

<h3>双系统</h3>

<h3>单一系统</h3>

<h1>熟悉Linux环境</h1>

<p>首先了解一下Linux与Windows最直观的不同之处：</p>

<ol>
<li><p>Linux只有一个根目录，它没有“盘符”的概念，但仍然可以将多个逻辑分区组织在一起（它是怎样做到的？）</p></li>
<li><p>Linux的文件夹和文件名都区分大小写；</p></li>
<li><p>Linux的命令行（严格来说这货叫shell）是全能选手，Web开发的全部工作都可以在命令行里进行；</p></li>
<li><p>Linux有一个神奇的文本编辑器叫vim，不同于Windows的文本编辑器，比如记事本、Word等等，它会彻底颠覆你对“文本编辑”这件事的理解；</p></li>
</ol>


<p>下面我们结合Meteor的几个命令来初步认识一下你未来的工作环境：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl https://install.meteor.com/ <span class="p">|</span> sh
</span></code></pre></td></tr></table></div></figure>


<p>Todo:</p>

<ol>
<li><p>命令格式说明；</p></li>
<li><p>管道符的作用和用法；</p></li>
<li><p><code>curl ... | sh</code>是一种常用的远程安装范式；</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create simple-todos
</span></code></pre></td></tr></table></div></figure>


<p>Todo: 复杂命令的格式说明</p>

<h1>Linux的简单文件操作</h1>

<p>数据管理四项基本内容：增删改查。</p>

<ul>
<li><p>ls</p></li>
<li><p>cat</p></li>
<li><p>echo</p></li>
<li><p>mkdir</p></li>
<li><p>cd</p></li>
<li><p>rm</p></li>
<li><p>vi</p></li>
</ul>


<h1>最简vi使用教程</h1>

<p>在领略vi博大精深的文本编辑能力之前，不妨先用记事本的方法使用它：</p>

<ol>
<<<<<<< HEAD
<li><p>按"i"键进入编辑模式；</p></li>
<li><p>当记事本用，但没有鼠标哦，方向键移动光标，Del/Backspace删除；</p></li>
<li><p>编辑完后按"ESC"键返回标准模式；</p></li>
=======
<li><p>按&#8221;i&#8221;键进入编辑模式；</p></li>
<li><p>当记事本用，但没有鼠标哦，方向键移动光标，Del/Backspace删除；</p></li>
<li><p>编辑完后按&#8221;ESC&#8221;键返回标准模式；</p></li>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
<li><p>按下<code>:x</code>两个键保存内容并退出vi；</p></li>
</ol>


<h1>总结</h1>

<p>掌握了这部分内容，你就初步理解了Meteor的开发和部署环境，
认识了Linux这个有趣的操作系统，
这是成为Meteor开发高手的第一步，难度不大，但需要你改变过去的一些习惯，
刚开始可能会不适应，但随着时间的流逝，你会越来越确信：这些付出是值得的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run MongoDB Server on Docker in VPS]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/15/142023/"/>
    <updated>2015-05-15T14:20:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/15/142023</id>
    <content type="html"><![CDATA[<pre><code>sudo usermod -aG docker your-user
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git初体验]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/10/091733/"/>
    <updated>2015-05-10T09:17:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/10/091733</id>
<<<<<<< HEAD
    <content type="html"><![CDATA[<p>本文是毛豆网微课程"Git初体验“的文稿。</p>
=======
    <content type="html"><![CDATA[<p>本文是毛豆网微课程&#8221;Git初体验“的文稿。</p>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c

<h1>Git初体验</h1>

<h2>Git有什么用？</h2>

<p>Git是Linux创造者Linus Torvalds编写的、目前人气最旺的版本控制工具。</p>

<p>那么版本控制是做什么的？</p>

<p>写代码免不了修修改改，比如经过一天的奋斗，你完成了一个”寻找最萌妹子“算法，
刚向死党炫耀，就发现选出来的居然是最萌喵星人，太没面子了，回去仔细研究一番，
发现漏了一层筛选条件，于是通宵达旦修改算法，天蒙蒙亮的时候，你发现自己的方法行不通，
需要回退到修改前的状态，换一种算法实现。但这一晚上修改了4、5个文件，
改动散布在不下十处地方，怎么把代码恢复到修改前的状态？</p>

<p>这个时候，是不是希望有哆啦A梦的时光飞毯，帮你回到昨天晚上？</p>

<p>是的，Git就是你要找的时光飞毯。</p>

<p>当然它的功能不止是在代码历史上跳跃，还有很多更炫酷的功能，但千里之行始于足下，让我们从最基本的功能开始吧！</p>

<h2>用Git做简单的版本控制</h2>

<p>Git最基本的用法是在命令行环境中通过执行Git命令的方式完成的。</p>

<<<<<<< HEAD
<p>比如你NB闪闪的算法保存在一个叫"zuiMeng"的文件夹里，
第一步要做的，是启动命令行环境，用<code>cd</code>命令把"zuiMeng"设置为当前目录，
然后执行：<code>git init</code>，这样你的"zuiMeng"目录就具备回到过去的魔力了。</p>

<p>现在你可以随意修改文件了，修改、删除都随你（当然你要作死把"zuiMeng"这个文件夹都删了Git就帮不了你了），
=======
<p>比如你NB闪闪的算法保存在一个叫&#8221;zuiMeng&#8221;的文件夹里，
第一步要做的，是启动命令行环境，用<code>cd</code>命令把&#8221;zuiMeng&#8221;设置为当前目录，
然后执行：<code>git init</code>，这样你的&#8221;zuiMeng&#8221;目录就具备回到过去的魔力了。</p>

<p>现在你可以随意修改文件了，修改、删除都随你（当然你要作死把&#8221;zuiMeng&#8221;这个文件夹都删了Git就帮不了你了），
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
如果对修改满意，提交你的改动到代码库：</p>

<pre><code>git add -A
git commit -m "commit message"
</code></pre>

<<<<<<< HEAD
<p>&ldquo;commit message"一般是这次修改包含的内容，比如”增加了过滤宠物功能“之类的。</p>
=======
<p>&ldquo;commit message&#8221;一般是这次修改包含的内容，比如”增加了过滤宠物功能“之类的。</p>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c

<p>如果对改动不满意呢？
执行<code>git reset --hard HEAD</code>，搞定！
什么？你后悔了，要找回刚才的修改？
这个Git还真能满足你，不过这就不是本课程的范围啦，
记住你现在还是个菜鸟，改代码前多动动脑子想清楚没坏处。</p>

<p>这样周而复始，提交了很多次，这时可以用<code>git log</code>来查看你的提交历史。
如果想回到其中的某一次，首先需要在<code>git log</code>界面中记下目标commit的hash值，
<<<<<<< HEAD
这个值很长，只记下前6位就行了，假设这个值是"ef5a5b"，那么要跳转到这次提交，
执行<code>git checkout ef5a5b</code>，看看你的文件，是不是变回到那次提交时的模样了？</p>

<p>如果想跳回最后一次提交，除了重复上面的过程外，还有更简单的方法：
<code>git checkout master</code>，这是因为"master"是一个特殊标记，代表你的最后一次提交。</p>
=======
这个值很长，只记下前6位就行了，假设这个值是&#8221;ef5a5b&#8221;，那么要跳转到这次提交，
执行<code>git checkout ef5a5b</code>，看看你的文件，是不是变回到那次提交时的模样了？</p>

<p>如果想跳回最后一次提交，除了重复上面的过程外，还有更简单的方法：
<code>git checkout master</code>，这是因为&#8221;master&#8221;是一个特殊标记，代表你的最后一次提交。</p>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c

<p>好，这就是Git的基本用法了，总结一下：</p>

<ol>
<li><p>初始化代码库：<code>git init</code>;</p></li>
<li><p>修改文件；</p></li>
<li><p>提交改动到代码库：<code>git add -A</code>，<code>git commit</code>；</p></li>
<li><p>查看版本历史：<code>git log</code>；</p></li>
<li><p>回退到历史版本：<code>git checkout &lt;hash&gt;</code>.</p></li>
</ol>


<h2>Git还能做什么？</h2>

<ol>
<li><p>分布式开发</p>

<p> 比如你在北京，刚在广州找到一位创业小伙伴，有了Git，就不用搬到广州去啦，
 也不必像Subversion那样，在公网架设代码库，只要在<a href="https://github.com/">github</a>上创建一个公共代码库，
 走遍天涯海角，你需要就是一个WiFi接入点了。</p>

<p> 如果你不希望大家都能看到你们的代码，推荐把公共代码库放在<a href="https://bitbucket.org/">bitbucket</a>上。</p></li>
<li><p>并行开发</p>

<p> 不管你的团队有多少开发者，大家可以同时开发不同的功能，然后合并在一起。
 当然会存在冲突的风险，这里推荐一个高逼格程序员必备神器<a href="https://github.com/nvie/gitflow">git-flow</a>，
 用它武装你的开发团队吧，从此妈妈再也不用担心我们代码冲突啦~</p></li>
</ol>


<h1>Git FAQ</h1>

<ol>
<li><p>我只会用Windows，能用Git吗？</p>

<p> 没问题！下载<a href="https://msysgit.github.io/">msysgit</a>安装包，一路Next安装好之后就可以用了，除了基本的命令行，还附带了一个图形界面工具，是不是很贴心？</p></li>
<li><p>那些命令记不住，能推荐一款纯图形界面的Git工具吗？</p>

<p> 当然可以。如果用Windows，上面介绍的msysgit的图形界面工具就很好了；如果用Linux，Git自带了gitk工具，Mac俺没用过，自己搜搜吧。</p></li>
<li><p>我英语不好，能给点中文资料吗？</p>

<p> 这个真帮不了你了，虽说Git中文资料蛮丰富的，可你的目标不是变成靠Copy/Paster大法挣千把块钱30岁以后转行产品经理的苦逼码农吧？
 如果你希望通过写代码打开一段崭新的人生，从现在开始阅读官网文档吧，
 我带过那么多小弟小妹被我逼着看文档，现在他们自己混饭吃，没有一个用Baidu找中文文档看的。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Mongo Scripts in Shell]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/08/155132/"/>
    <updated>2015-05-08T15:51:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/08/155132</id>
    <content type="html"><![CDATA[<p>You can query a remote mongoDB with a mongo script, print output to stdout.
Then manipulate the output data with other shell utilities.</p>

<p>For example, the following scripts get all fair names from a remote server,
compare them with a local fair name set,
to find out which are conflicted with the existing fair names in the local name.</p>

<p>Some key points:</p>

<ol>
<li><p>&ldquo;db&rdquo; is a built-in global variable refers to the connected database,
specified by the -h, -d options in mongo command line.
It can be override by &ldquo;connect&rdquo; function.
For example, with or without the first line, the script produce the same result
when running <code>mongo test.js</code>:</p>

<pre><code> $ cat test.js
 // db = connect("localhost/test")
 print(db.getCollectionNames())
 db.myCollection.find().forEach(function(item) {
   print(item.name)
 })
</code></pre></li>
<li><p>Use &ldquo;print&rdquo; function to print result to stdout.</p></li>
<li><p>To get command line arguments in mongo script, you must compose the evaluation string before(outside) <code>mongo</code> command,
and you must add double quotes surrounding $exp.</p>

<pre><code> #!/bin/bash

 TargetDB=$1
 TargetCol=$2
 TargetField=$3

 exp="db.${TargetCol}.find().forEach( function(item) \
   { print(item.$TargetField); });"

 mongo localhost/$TargetDB --eval "$exp"
</code></pre></li>
</ol>


<p>Ref:</p>

<p><a href="http://docs.mongodb.org/manual/tutorial/write-scripts-for-the-mongo-shell/">Write Scripts for the mongo Shell</a></p>

<p><a href="http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script">http://stackoverflow.com/questions/8971151/file-write-operations-in-mongo-script</a></p>

<p><a href="http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file">http://stackoverflow.com/questions/14478304/redirect-output-of-mongo-query-to-a-csv-file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find Verified User in MongoDB]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/07/151147/"/>
    <updated>2015-05-07T15:11:47+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/07/151147</id>
    <content type="html"><![CDATA[<p>Find a user whose email is verified.
The &ldquo;emails&rdquo; field is an array.
The function of &ldquo;$elemMatch&rdquo; operator is:</p>

<p>Find a element in an array (here is emails),
whose feature obey the value after &ldquo;$elemMatch&rdquo; (here its &ldquo;verified&rdquo; key is &ldquo;true&rdquo;).</p>

<p>The code:</p>

<pre><code>&gt; db.users.findOne({'emails': {$elemMatch: {verified: true}}})
{
  "_id" : "rKawn5jCiuGcsPHdP",
  "createdAt" : ISODate("2015-05-07T01:04:23.375Z"),
  "services" : {
    "password" : {
      "bcrypt" : "$2a$10$T07N74DUrVrRtVGPT9dzleZlpRTlULfb9OrlWveW4NbcNpi.HkiAK"
    },
    "resume" : {
      "loginTokens" : [
        {
          "when" : ISODate("2015-05-07T01:04:23.902Z"),
          "hashedToken" : "Xbt2ASQF61artSmrYX1Gn6DLUNvbIrz9DW0sE4tbJh4="
        }
      ]
    },
    "email" : {
      "verificationTokens" : [ ]
    }
  },
  "emails" : [
    {
      "address" : "leechau@126.com",
      "verified" : true
    }
  ]
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate String Length Containing Chinese Characters]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/07/111310/"/>
    <updated>2015-05-07T11:13:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/07/111310</id>
    <content type="html"><![CDATA[<p>I want to remove all lines with only 1 Chinese character.
The origin file is very large,
so I have to filter out all lines with 1 character.
And remove them together.</p>

<p>Sort all lines in the file by their length is a easy way to achieve this.
The content of file origin.txt is:</p>

<blockquote><p>一十一
一十二
一十三
一十四
一十五
一十六
一十七
一十八
一十九
二十</p></blockquote>

<h1>Shell</h1>

<pre><code>awk '{print length, $0}' origin.txt | sort -n | cut -d " " -f2- | uniq &gt; target.txt
</code></pre>

<h1>Python</h1>

<h1>Node</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript Notes]]></title>
    <link href="http://leetschau.github.io/blog/2015/05/07/093644/"/>
    <updated>2015-05-07T09:36:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/05/07/093644</id>
    <content type="html"><![CDATA[<h1>Format</h1>

<ul>
<li>Function call line wrap: if the first parameter is an object,
it can be written at the next line, with an indent.
Otherwise, the first parameter must be written at the same line with the function name.
The following parameters can be written at the next line with an indent.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git GUI Clients on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/30/095841/"/>
    <updated>2015-04-30T09:58:41+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/30/095841</id>
    <content type="html"><![CDATA[<h1>gitg</h1>

<p>Very intuitive branch model.
You can select different branch,
which will be displayed as the left-most line in the branch view panel.
Cover the functions of giggle.</p>

<h1>gitk</h1>

<p>Come with git.
See all branches: <code>gitk --all</code>.
Not intuitive for branching information.</p>

<h1>git gui</h1>

<p>Install with <code>aptitude install git-gui</code>.</p>

<p>Use gitk&rsquo;s branch-browsing interface.</p>

<h1>SmartGit</h1>

<p><a href="http://www.syntevo.com/smartgit/">SmartGit</a> is free for non-commercial use.
You have to download the installer, extract it and run.</p>

<h1>giggle</h1>

<p>Install with <code>aptitude install giggle</code>.</p>

<p>You can browse the history of a file.</p>

<h1>git cola</h1>

<p>Install with <code>aptitude install git-cola</code>.</p>

<p>Like git gui, use gitk&rsquo;s branch-browsing interface, too.</p>

<h1>Summary</h1>

<p>gitg is the first choice.
SmartGit is good except its license restriction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Simple Meteor Package]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/29/181733/"/>
    <updated>2015-04-29T18:17:33+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/29/181733</id>
    <content type="html"><![CDATA[<h1>Build the package</h1>

<pre><code>$ cd ~/docs/tmp
$ meteor create --package leechau:segmentation
$ cd segmentation
$ cat &lt;&lt; EOF &gt; segmentation.js
Seg = 'segment results in Chinese';
Seg2 = function(inp){
  return inp.toUpperCase();
}
EOF

$ cat &lt;&lt; EOF &gt; package.js
Package.describe({
  name: 'leechau:segmentation',
  version: '0.0.1',
  // Brief, one-line summary of the package.
  summary: 'for chinese segmentation',
  // URL to the Git repository containing the source code for this package.
  git: 'https://github.com/leetschau/meteorSegmentation',
  // By default, Meteor will default to using README.md for documentation.
  // To avoid submitting documentation, set this field to null.
  documentation: 'README.md'
});

Package.onUse(function(api) {
  api.versionsFrom('1.1.0.2');
  api.addFiles('segmentation.js', 'client');
  api.export(['Seg', 'Seg2'], 'client');
});

Package.onTest(function(api) {
  api.use('tinytest');
  api.use('leechau:segmentation');
  api.addFiles('segmentation-tests.js');
});
EOF

$ cd ~/docs/tmp
$ meteor create testpkg
$ cd testpkg
$ mkdir packages
$ ln -s ~/docs/tmp/segmentation packages/segmentation
</code></pre>

<p>Add the following lines into &lsquo;click button&rsquo; of testpkg.js file:</p>

<pre><code>console.log(Seg);
console.log(Seg2('axd'));
</code></pre>

<p>Note:</p>

<ol>
<li><p><code>api.export</code> is necessary in <code>Package.onUse</code> function of package.js file.</p></li>
<li><p>The soft link does <strong>not</strong> contains the username part, to compare with <a href="https://atmospherejs.com/i/publishing">atmospherejs.com publishing doc</a>.
So the package you created is &ldquo;leechau:segmentation&rdquo; in <code>meteor create --package</code>.
While the soft link is &ldquo;segmentation&rdquo;, not &ldquo;leechau:segmentation&rdquo;.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QGIS的坐标系和缓冲区]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/29/114138/"/>
    <updated>2015-04-29T11:41:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/29/114138</id>
    <content type="html"><![CDATA[<p>一个图层文件(shp）有自己的坐标系，通过【右键->属性->通用->坐标参照系】查看。
直接修改坐标系导致图层对象消失，原因不明。
<<<<<<< HEAD
在图层上【右键->另存为】，在坐标系中搜索2154，选择"EPSG:2154"，保存在另一个shp文件中。</p>
=======
在图层上【右键->另存为】，在坐标系中搜索2154，选择&#8221;EPSG:2154&#8221;，保存在另一个shp文件中。</p>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c

<p>在QGIS窗口右下角状态栏中显示的坐标系只作显示用，与图层自己的坐标系无关。</p>

<p>当生成图层对象的缓冲区（主菜单->矢量->地学数据处理工具->缓冲区分析）时，
其中【缓冲距离】的单位是图层自身坐标系确定的单位，
例如WGS84的单位是degree，具体含义尚不清楚，大致是地球这个球体上两点与球心形成夹角的角度，
<<<<<<< HEAD
&ldquo;EPSG:2154"坐标系的单位是米。</p>
=======
&ldquo;EPSG:2154&#8221;坐标系的单位是米。</p>
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Penetrate GFW With ShadowSocks]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/26/101038/"/>
    <updated>2015-04-26T10:10:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/26/101038</id>
    <content type="html"><![CDATA[<p>To browse internet with <a href="https://github.com/shadowsocks/shadowsocks">shadowsocks</a>,</p>

<h1>Server setup</h1>

<p>You need a VPS (buy it from linode or digitalocean, etc, as the outlet),
to run the server with root (say its IP address is &ldquo;123.234.23.45&rdquo;):</p>

<pre><code># aptitude install python-pip
# pip install shadowsocks
# ssserver -p 2043 -k er@20 -m aes-256-cfb --user nobody -d start
</code></pre>

<p>See the logs:</p>

<pre><code>tail -f /var/log/shadowsocks.log
</code></pre>

<p>Or start it in foreground:</p>

<pre><code># ssserver -p 2043 -k testpwd
</code></pre>

<h1>Client</h1>

<p>Client is the machine you want to bypass the GFW.</p>

<h2>Windows</h2>

<p>Download the client package (Shadowsocks-win-dotnet4.0-2.3.1.zip for now),
extract it, and run.</p>

<p>You can check its &ldquo;System Proxy&rdquo; option, which is convenient for all browsers and terminal.</p>

<h2>Linux</h2>

<h3>Install</h3>

<p>For Ubuntu/Mint:</p>

<pre><code>$ sudo aptitude install python-pip
$ sudo pip install shadowsocks
</code></pre>

<p>Now you have a socks5 proxy. If you want convert it into a http proxy:</p>

<pre><code>$ sudo aptitude install polipo
$ service polipo stop
$ sslocal -s 123.234.23.45 -p 2043 -b 127.0.0.1 -l 1080 -k testpwd
$ sudo polipo socksParentProxy=localhost:1080
</code></pre>

<p>Now setup the http proxy of your browser as localhost:8123.
To use the proxy in terminal, add prefix &ldquo;http_proxy=<a href="http://localhost:8123">http://localhost:8123</a>&rdquo;,
for example:</p>

<pre><code>http_proxy=http://localhost:8123 curl www.xys.org
</code></pre>

<p>Or use a text-based web browser:</p>

<pre><code>http_proxy=http://localhost:8123 lynx rsf.org
</code></pre>

<p>where 8123 is the default port number of polipo.</p>

<p><a href="https://github.com/shadowsocks/shadowsocks/wiki/Using-Shadowsocks-with-Command-Line-Tools">Using Shadowsocks with Command Line Tools</a> in
<a href="https://github.com/shadowsocks/shadowsocks/wiki">shadowsocks wiki</a> use proxychains to achieve proxy in terminal,
which didn&rsquo;t work for me.</p>

<p>To summarize, you need 3 processes to access blocked website on Linux:</p>

<ol>
<li><p>The shadowsocks server on the VPS abroad;</p></li>
<li><p>The shadowsocks client on your machine;</p></li>
<li><p>The polipo to convert a socks proxy into a http proxy.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving Merge Conflicts in Git]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/23/174442/"/>
    <updated>2015-04-23T17:44:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/23/174442</id>
    <content type="html"><![CDATA[<p>Edit the conflicted files manually.
Remove &ldquo;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&rdquo;, &ldquo;=======&rdquo; and &ldquo;>>>>>>>&rdquo;,
then add and commit the modified files to resolve the conflict.</p>

<p>When using git-flow, if a conflict appears when finishing a release,
after resolve and commit the conflicted files,
run <code>git flow release finish 0.2.0</code> again.</p>

<p>Ref:</p>

<p><a href="http://genomewiki.ucsc.edu/index.php/Resolving_merge_conflicts_in_Git">Resolving merge conflicts in Git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take Screenshot With Shutter on Linux Mint]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/22/145820/"/>
    <updated>2015-04-22T14:58:20+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/22/145820</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<pre><code>sudo aptitude install shutter libgoo-canvas-perl
</code></pre>

<p>the second one is for editing the screenshot.</p>

<h1>Usage</h1>

<p>Run <code>shutter</code> in dmenu, click &ldquo;Selection&rdquo; on toolbar.</p>

<p>Shutter is a multi-tab application, and save picture to disk automatically,
which is very convenient.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Vagrant-Created VMs on Linux Mint]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/22/103439/"/>
    <updated>2015-04-22T10:34:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/22/103439</id>
    <content type="html"><![CDATA[<ol>
<li><p>After installation of Virtualbox,
specify the VM files location in VirutalBox:
[File -> Preferences -> General -> Default Machine Folder]
to &ldquo;$HOME/docs/vms&rdquo;;</p></li>
<li><p>Add <code>alias vb='VBoxManage'</code> into ~/.bash_aliases;</p></li>
<li><p>List all existing VMs: <code>vb list vms</code>;</p></li>
<li><p>List all running VMs: <code>vb list runningvms</code>;</p></li>
<li><p>Print the details of a VM: <code>vb showvminfo xxx</code>,
where xxx is one item name in output of <code>vb list vms</code>;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checkout Remote Git Branch]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/21/175117/"/>
    <updated>2015-04-21T17:51:17+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/21/175117</id>
    <content type="html"><![CDATA[<p>We clone a remote repository, check out a remote branch.</p>

<pre><code>$ git clone https://github.com/limingth/meteor-master-classes.git
$ cd meteor-master-classes
$ git branch -r
origin/HEAD -&gt; origin/master
origin/fanjinhui
origin/lichao
origin/limingth
origin/master
origin/sean
origin/tianchao
</code></pre>

<p>So the remote repository&rsquo;s name is &ldquo;origin&rdquo;.
First check the initial status of the repository:</p>

<pre><code>$ git branch
* master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p>Now checkout the remote branch:</p>

<pre><code>$ git fetch
$ git checkout lichao
</code></pre>

<p>Check the status of the repository after checked out:</p>

<pre><code>$ git br
* lichao     &lt;---
  master

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/limingth/meteor-master-classes.git
  Push  URL: https://github.com/limingth/meteor-master-classes.git
  HEAD branch: master
  Remote branches:
    fanjinhui tracked
    lichao    tracked
    limingth  tracked
    master    tracked
    sean      tracked
    tianchao  tracked
  Local branches configured for 'git pull':
    lichao merges with remote lichao        &lt;---
    master merges with remote master
  Local refs configured for 'git push':
    lichao pushes to lichao (up to date)    &lt;---
    master pushes to master (up to date)
</code></pre>

<p>You can see there are 2 kinds of relationship between local and remote branches: pull and push.
Branch &ldquo;lichao&rdquo; and &ldquo;origin/lichao&rdquo; was linked bidirectional after checked out.</p>

<p>Some notes:</p>

<ul>
<li><p>The name of the remote branch to be checked out is its full name except the &ldquo;origin/&rdquo; part,
like &ldquo;lichao&rdquo; in <code>git checkout lichao</code>;</p></li>
<li><p><code>git fetch</code> synchronize your local repository with remote side.
So it&rsquo;s not necessary if you don&rsquo;t want sync with remote.</p></li>
</ul>


<p>You can verify this by <code>git branch -avv</code>.</p>

<p>Ref:</p>

<ul>
<li><p><a href="http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git">http://serverfault.com/questions/175052/how-to-tell-which-local-branch-is-tracking-which-remote-branch-in-git</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/1783405/checkout-remote-git-branch">http://stackoverflow.com/questions/1783405/checkout-remote-git-branch</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Local Package for Meteor]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/20/172648/"/>
    <updated>2015-04-20T17:26:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/20/172648</id>
    <content type="html"><![CDATA[<p>Ref: <a href="https://dweldon.silvrback.com/local-packages">meteor: local packages</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4月17日讲座文字稿]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/18/140631/"/>
    <updated>2015-04-18T14:06:31+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/18/140631</id>
    <content type="html"><![CDATA[<p>嗨大家好，没有想到今天来了这么多人，非常感谢大家来捧场。下面我把今天想谈的话题发给大家，然后按这个顺序一个一个说。说完一个话题停下来大家讨论，聊到后面话题的时候，前面的问题如果大家想问，也非常欢迎发问，好的谢谢大家。</p>

<p>今天主要想跟大家聊聊这几个方面：</p>

<ol>
<li><p>技术成长路线；</p></li>
<li><p>对Web技术和Meteor的理解；</p></li>
<li><p>关于技术创业。</p></li>
</ol>


<p>首先跟大家说说自己的一个成长经历吧。我从高中的时候编程，最早接触的是Pascal，现在好多比较年轻的同学都不熟悉这个名字，后来又写了几年Delphi，实际上就是objective的Pascal。工作了之后主要用的是Java和Python，后来转向了数据分析领域，用Scala语言，计算平台是Apache的Spark，大家可能都听说过Hadoop这些分布式计算平台，但目前分布式计算方向的是从Hadoop这种磁盘落地的方式向内存计算，也就是Apche Spark的方向发展，所以又做了一段时间的Scala。</p>

<p>大概是从2014年的年底的时候，开始着手做Web开发，因为我在接触Web之前的已经写了很多年的代码，有一些写代码的感触，所以当时考察了很多Web开发框架，包括Ruby on Rails，也就是RoR，Java的SSH，Google的Dart，最后找到了Meteor这类纯JS的架构，一直用到现在，大概不到半年的时间。</p>

<p>我接触的编程语言比较多，对这个领域比较感兴趣，工作期间使用过很多种语言，包括函数式风格的Erlang和Haskell，包括像面向对象的Ruby。用语言写代码，写出来的代码能完成一定的任务，对这件事情本身非常感兴趣，所以在这方面投入了不少精力，大家可以看下我的技术博客，上面各种语言都有，杂而不精，哪位高手看到我写的比较粗浅，可别笑话我。</p>

<p>好，现在我们来聊聊第二方面吧！</p>

<p>关于Web这块儿，我接触的时间比较短，算上前面东看西看也就一年时间，资历比较浅，所以只是谈一些个人看法，肯定是比较幼稚的。我觉得Web发展到今天，从1.0那个时代侧重于页面展示，向完全桌面应用的方向发展，比如咱们用的Meteor就是一个非常典型的一个代表，我们可以完全在客户端开发，把所有功能都放在客户端，然后等到功能测试好了之后，再把那些数据，也就是企业核心的资源了，放到Server端。</p>

<p>在比较了各种Web技术栈之后呢，我有个比较突出的感觉，因为我Web的背景不是很强，对HTTP协议细节也不是很了解，我看到很多技术栈的后端，对HTTP的嵌入还是比较深，如果开发人员不懂Request和Response这些概念的话，很难把自己的业务放进去，很难对开发过程有深入理解，而Meteor这个技术呢，可以让程序员只关注业务逻辑，不需要去关心网络传输协议，完全不跟HTTP协议打交道。</p>

<p>实际上Meteor使用了一个叫DDP的传输协议。在应用层，也就是七层协议的最高层中，DDP协议更适于做Web app的开发，比如说它的状态保持，比如说服务端向客户端推送消息，这些优势使得在它上面做开发，会天然地比基于HTTP协议的框架容易很多。</p>

<p>学习Meteor时做最简单的那个Tutorial的时候，如果同时开两个那个浏览器，在其中一个里面改了数据，另外一个就跟着变了，这个效果如果在一些传统的Web架构上做，可能要用到比较高深的技术，但是在Meteor上，大家可以看到完全是一种非常自然方式，没有任何人工干预就自然而然就实现了，所以这个App的体验就会比传统架构好很多。</p>

<p>从我们程序员的角度出发，会有一种顾虑，认为Web技术发展这么快，会不会有一天Meteor也像RoR那样，曾经一统江湖，现在已经不再高速发展了，大家会有一种疑问，Meteor会不会下一个RoR呢？</p>

<p>这个问题我的理解是，技术是在不断变化的，但思想是持续的。比如Ruby on Rails吧，实际上是MVC架构，MVC这个思想其实早在上世纪七十年代，施乐公司做图形界面的时候就已经有了，所以RoR在开发思想的开创性方面不是特别强。</p>

<p>但是反观Meteor这个架构，它不仅仅是用纯JS写代码，实际上是在倡导一种思维方式。以前我们普遍认为网站就是一些个页面，后来用Ajax技术和其他Web 2.0技术增强了互动性。但并没有摆脱页面导向的思维，仍然会明确的区分客户端和服务端。但是Meteor实际上已经不明确进行区分了。</p>

<p>在这个架构下，完全可以按以前我们写桌面程序的思维方式，先在客户端把功能完全实现，再把我们需要隐藏数据和业务逻辑，挪到服务端去。这样一来，从思维方式上已经跟传统的区分这个客户端和服务端的方法不一样了。这种思维会持续地发挥它的效果，即便说过个三五年，Meteor不像现在这样爆发式增长了，即便出现新的技术栈，也会吸收这种先进的思想。</p>

<p>Meteor还有一个非常好的特点就是轻量化。从Java时代开始，做Web开发起码先要装一个Eclipse这种很牛的IDE，上面添加各种框架，如果你的电脑配置不高，Eclipse得起个三五分钟的，先双击一下图标，然后去喝杯茶，洗个澡，回来这个IDE终于起来了。但是我们看Meteor开发，完全在命令行里面，带一个vi这样的文本编辑器，然后再有个Firefox之类的浏览器就能搞定。</p>

<p>那么从GUI图形用户界面向命令行转变到底有什么好处呢？我个人的理解是：Web技术本身是一种文字展现。以前说网站做的非常的炫，各种弹窗、各种服务窗口、包括鼠标怎么追也关不掉的那种窗口，我们说做得非常炫。但后来我们发现Web逐渐发展为扁平式设计，把文字提到一个比较高的位置，对文本的打磨远高于对图形的要求，比如对字体、字号，文字风格与场景的搭配非常重视。</p>

<p>真正能够给我们带来价值或者说高效率传递价值的，是文字，图片只起辅助文字的作用。在Web开发当中，传来传去的就是文字，传图片也可以采用某种技术把它压缩成字符串进行传递。那么我们开发工具的文本化，实际上暗合了Web应用的这种发展趋势，所以我个人是比较推荐这种基于文字界面的开发方式。</p>

<p>好的，技术这块儿就先说这么多，大家感兴趣的话我们私底下交流。</p>

<p>下面谈一下关于搞技术的人创业的思考。</p>

<p>大概是去年的十月十一月份吧，我的一个同学找到我，希望能够一起来创业，他在会展行业做了很多年。</p>

<p>在工作当中了他感受到会展行业由于信息交流不畅，导致了很多问题，随着移动互联网出现，之前他感受到的所谓行业痛点，现在已经可以解决了。</p>

<p>加上之前一个做金融的同学和一个做运营的朋友，我们成立了创业团队，一起做牛展网（newfairs.com），这个网站简单理解就是会展领域的淘宝，我的理解可能不是很到位，大概就是这么一个角色。</p>

<p>很多同学对技术在创业当中如何发挥作用非常感兴趣，建议大家看下子柳写的那本《淘宝技术这十年》，这本书非常好地再现了淘宝发展过程中，技术所发挥的作用。</p>

<p>技术圈里会流传着很多硅谷的几个技术天才，用一种世人仰望的语言，做了一个横扫一切市场对手的应用，创造了财富，实现了个人财务自由。但是我在看《淘宝技术这十年》的过程当中，没有感受到这一点。初创团队所犯的那些错误，淘宝犯的也不少。所以我感觉，不要相信那些传言。现实世界中没有那么多的一刀毙命这种古龙风格的东西，技术所面临的问题，还是要认认真真一点一点地去解决的。</p>

<p>现在国家层面也很鼓励创业。大家可以看到创业团队如雨后春笋般出现。一夜之间到处大家都在谈创业。个人的想法的确是创业的开始，但其实并不特别重要，因为但凡你的创意靠谱，凡是你能想到的，基本上别人也能想到。</p>

<p>那么所谓的创意是什么？我认为是这样的：我们想到一个点，这个点可能是以前的一个问题，现在靠新技术或者新模式，能够解决它，也就是所谓的行业痛点。</p>

<p>当有了这个想法之后，在头脑当中的就会有一个对这个产品的构想，一个大概的框架，将来做出这个产品的话，大概希望能达到什么程度，解决什么问题。但它只是给自己设置的一个终点，而且还是个虚无缥缈不一定在哪儿的终点。那么我认为，至少需要有这么几方面帮你到达这个终点：</p>

<p>一个是运营，就是怎么才能让别人知道这个产品，让那些真正需要这个东西的人，能够看到有这么一个产品。</p>

<p>下面一个是资金，至少包括财务和这个金融两方面。一开始的时候如果只是几个人做为一种业余爱好，可能不存在怎么发展的问题，能不能挣钱也无所谓，但如果是严肃地把它当成一个事业来做的话，现金流在其中起的是像空气一样的作用，如果现金流断了，这件事儿可能就不了了之了，所以肯定要有个比较专业的人士来做这方面的工作。</p>

<p>最后，重要的内容当然得放后面，当然就技术了对吧！所有的想法都需要通过技术去实现，比如笑傲江湖里面，剑宗和气宗都觉得对方不怎么样。但至少剑宗比较重视剑招，不管高手低手，还能在外行面前糊弄两下，但是气宗，如果你什么都不拿，那你水平再高也没用。</p>

<p>创业过程中技术所发挥的作用，就像一个坚固的底盘，是所有一切想法、一切运营、资金流转，最后落实的东西。你的产品究竟怎么样，是好是坏，最后要通过技术的手段来做出实在的东西，传递到用户手上，最后形成一个闭环。</p>

<p>从开发者的角度，技术不仅仅是一个产品的承载平台这么一个角色，技术本身就是一个非常吸引人的领域，它不仅有是冰冷的代码，严密的理论。它的背后包含有丰富的文化背景。我们回望上世纪六七十年代到现在，Unix和Linux系统的发展历程，各种爱恨情仇，江湖恩怨，勾心斗角，忠诚和背叛，各种高大上和狗血的情节，在技术圈里都能看到。</p>

<p>那么好，上面几个方面我都基本上介绍了一下，如果大家还有什么问题的话，欢迎大家过来跟我互动。谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint System Backup and Restore]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/17/151844/"/>
    <updated>2015-04-17T15:18:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/17/151844</id>
    <content type="html"><![CDATA[<p>Use this note to build a development environment quickly on a fresh Ubuntu/Mint os.</p>

<h1>Packages</h1>

<p>First make sure <code>&lt;deb-url&gt;/dists/&lt;dist-name&gt;</code> of your distro exists.
To Ubuntu Trusty, it&rsquo;s <a href="http://mirrors.ustc.edu.cn/ubuntu/dists/trusty/main">http://mirrors.ustc.edu.cn/ubuntu/dists/trusty/main</a>
or universe, restricted, etc.
Then add the following lines to /etc/apt/sources.list:</p>

<pre><code>deb http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ trusty main universe restricted multiverse
</code></pre>

<p>Next run <code>aptitude update</code> and install the following packages with <code>aptitude</code>:</p>

<pre><code>zsh git vim autojump curl tree tmux
</code></pre>

<p>The following packages are only needed on physical metal, not on virtual host:</p>

<pre><code>i3 i3status dmenu openssh-server parcellite udevil
</code></pre>

<p>where udevil is for USB management.</p>

<h1>Apps installed manually</h1>

<ul>
<li><p><a href="https://github.com/leetschau/dsnote">dsnote</a></p></li>
<li><p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p></li>
<li><p><a href="https://github.com/tpope/vim-pathogen">pathogen</a></p></li>
<li><p><a href="https://github.com/leetschau/sysClone">sysClone</a></p></li>
<li><p>Power management script: pm, see note <a href="http://leetschau.github.io/blog/2014/08/24/110909/">Build Working Environment With I3 and Mint</a></p></li>
</ul>


<h1>vim plugins</h1>

<ul>
<li><p><a href="https://github.com/plasticboy/vim-markdown">plasticboy/vim-markdown</a></p></li>
<li><p><a href="https://github.com/kien/ctrlp.vim">ctrlp</a></p></li>
</ul>


<h1>System configurations to be synchronized</h1>

<p>Prototype of <a href="https://github.com/leetschau/sysClone">sysClone</a>:</p>

<pre><code>backupConf() {
    rsync -av --update --ignore-missing-args $HOME/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.oh-my-zsh/themes/lichao.zsh-theme,.xsessionrc} confs/
    rsync -av --update --ignore-missing-args $HOME/.i3/config confs/.i3.config
}

restoreConf() {
    rsync -av --update confs/{.zshrc,.zshenv,.bash_aliases,.vimrc,.gitconfig,.tmux.conf,.xsessionrc} $HOME
    rsync -av --update confs/lichao.zsh-theme $HOME/.oh-my-zsh/themes
    rsync -av --update confs/.i3.config $HOME/.i3/config
}
</code></pre>

<p>I use an array of tuples to combine above 2 scripts. For details of its methods in shell, see
<a href="http://www.cyberciti.biz/faq/bash-for-loop-array/">Bash For Loop Array: Iterate Through Array Values</a> and
<a href="http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash">http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash</a></p>

<h1>Firefox plugins</h1>

<ul>
<li><p>Downthemall</p></li>
<li><p>vimfx</p></li>
</ul>

]]></content>
  </entry>
  
<<<<<<< HEAD
=======
  <entry>
    <title type="html"><![CDATA[Fzf让命令行更方便]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/16/172913/"/>
    <updated>2015-04-16T17:29:13+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/16/172913</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/fzf">fzf</a>是一个命令行工具，目前支持bash和zsh。</p>

<p>fzf配合autojump和vim，可以方便地在多层目录下进行文本编辑。</p>

<p>Before install fzf, download <a href="https://golang.org/">go</a> binary package (go1.4.2.linux-amd64.tar.gz for now)
extract it, and add its bin folder to $PATH.
Then install fzf with git.</p>

<p>首先运行<code>j demo</code>跳转到项目根目录下，项目文件结构如下：</p>

<pre><code>$ tree
.
├── both
│   ├── collections.coffee
│   └── router.coffee
├── client
│   ├── index.html
│   ├── layout.coffee
│   ├── layout.html
│   ├── registerHelpers.coffee
│   ├── stylesheets
│   │   └── app.scss
│   └── templates
│       ├── addPost
│       │   ├── addPost.coffee
│       │   ├── addPost.html
│       │   └── addPost.scss
│       ├── editPost
│       │   ├── editPost.coffee
│       │   └── editPost.html
│       ├── lists
│       │   ├── lists.coffee
│       │   └── lists.html
│       ├── postView
│       │   ├── postView.coffee
│       │   └── postView.html
│       ├── sharePost
│       │   ├── sharePost.coffee
│       │   └── sharePost.html
│       ├── sideMenu
│       │   └── sideMenu.html
│       └── userAccounts
│           ├── accountsConfig.coffee
│           ├── userAccounts.coffee
│           └── userAccounts.html
├── LICENSE
├── newnote.tmp
├── packages
├── README.md
└── server
    └── seeds.js

13 directories, 26 files
</code></pre>

<h1>配置</h1>

<p>全局定义：~/.fzf.zsh</p>

<p>默认快捷键可以在.fzf/shell/key-bindings.zsh中修改。
推荐将默认的文件搜索快捷键从Ctrl-T改成了Ctrl-J，需要避免使用的配置有：</p>

<ul>
<li><p>Ctrl-I: 代表<tab>键，虽然可以触发目录搜索，但<tab>键的自动补全功能不能用了；</p></li>
<li><p>Ctrl-M: 回车键的键值，如果改成了它，将导致回车键不可用，可以用Ctrl-Enter临时代替回车；</p></li>
<li><p>Ctrl-N: 下一条历史命令的快捷键。</p></li>
</ul>


<h1>使用</h1>

<p>要编辑client/templates/lists/lists.coffee文件，只要在命令行中输入：</p>

<pre><code>vi &lt;Tab&gt;
</code></pre>

<p>就进入了fzf搜索界面，只要输入任意层目录中的几个字符，就可以匹配到目标文件，
例如上面lists.coffee文件，只要输入<code>listco</code>就可以匹配到了。
其中当输入到list时，就匹配到了lists文件夹以及下面的两个文件，
这时可以继续输入&#8221;co&#8221;，直接命中目标，也可以用Ctrl-j/k在列表中上下选择目标。</p>

<p>实际上fzf进行目录文件匹配的快捷键是Ctrl-T，但对vi进行了特殊定义，使得用<tab>也可以出发fzf搜索。</p>

<p>按Alt-C，选择好目录，可以直接切换到目标目录，相当于<code>cd &lt;Ctrl-T&gt;</code>的快捷版。</p>

<p>Ctrl-R在命令行历史使用<strong>模糊</strong>匹配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Sync a Fork on Github]]></title>
    <link href="http://leetschau.github.io/blog/2015/04/15/105035/"/>
    <updated>2015-04-15T10:50:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2015/04/15/105035</id>
    <content type="html"><![CDATA[<p>I forked <a href="https://github.com/mitsuhiko/flask">flask repository</a> to
<a href="https://github.com/leetschau/flask">my own account</a>.</p>

<p>After several months, there are many new commits to the original flask repo.
How to sync these new commits to my fork?</p>

<h1>Option 1: In Github Web UI</h1>

<p>Three steps: compare, send pull request, and merge.</p>

<p>See Olufemi Israel Olanipeku&rsquo;s answer of
<a href="http://stackoverflow.com/questions/20984802/how-can-i-keep-my-fork-in-sync-without-adding-a-separate-remote/21131381#21131381">How can I keep my fork in sync without adding a separate remote?</a> for details.</p>

<h1>Option 2: In Terminal</h1>

<p>You can do it via your local clone:</p>

<ol>
<li><p>Clone leetschau/flask to local machine;</p></li>
<li><p>Add mitsuhiko/flask as a remote repo;</p></li>
<li><p>Pull new commit from mitsuhiko/flask to your local machine;</p></li>
<li><p>Push your local repo to leetschau/flask.</p></li>
</ol>


<p>See <a href="https://help.github.com/articles/syncing-a-fork/">Syncing a fork</a> for details.</p>
]]></content>
  </entry>
  
>>>>>>> 07ed3639e773b839d5491a4f5cd36dc20296d73c
</feed>
