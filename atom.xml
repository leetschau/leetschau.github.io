<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2014-09-10T17:28:18+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    <email><![CDATA[leetschau@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Package Repository Management on Ubuntu and Mint]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/09/163500/"/>
    <updated>2014-09-09T16:35:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/09/163500</id>
    <content type="html"><![CDATA[<ul>
<li><p>Add repository: &lsquo;sudo apt-add-repository ppa:kernel-ppa/ppa`</p></li>
<li><p>List all repositories: <code>ls /etc/apt/sources.list.d</code></p></li>
<li><p>Remove repository: <code>sudo apt-add-repository --remove ppa:kernel-ppa/ppa</code>.
If you can&rsquo;t get the ppa name, do it manually with <code>sudo rm /etc/apt/sources.list.d/theppa.list</code>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build BVT System Based on Docker]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/03/150610/"/>
    <updated>2014-09-03T15:06:10+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/03/150610</id>
    <content type="html"><![CDATA[<p>System: ArchLinux 64bit, IP address: 10.32.1.18.</p>

<h1>Build</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker -p 8080:8080 --name myjenkins jenkins</span></code></pre></td></tr></table></div></figure>


<p>Now you can access <a href="http://10.32.1.18:8080">jenkins server</a> in browser.</p>

<p>List running containers: <code>sudo docker ps</code> (so you can get the container&rsquo;s name for stoping and restarting later);</p>

<p>Stop jenkins server: <code>sudo docker stop myjenkins</code>;</p>

<p>Restart this server: <code>sudo docker start myjenkins</code>;</p>

<h1>Backup and Restore</h1>

<p>Backup image: <code>sudo docker save -o jenkins-docker.tar jenkins</code>;</p>

<p>Restore image: <code>sudo docker load -i jenkins-docker.tar</code>;</p>

<p>Backup container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(optional) sudo docker stop jenkins
</span><span class='line'>sudo docker export myjenkins &gt; mybvt-system.tar
</span><span class='line'>scp mybvt-system.tar chad@laptop:~/
</span><span class='line'>ssh chad@laptop
</span><span class='line'>cat mybvt-system.tar | sudo docker import - exampleimagelocal:new</span></code></pre></td></tr></table></div></figure>


<p>But where is the imported container?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automount USB Disk on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/09/03/111703/"/>
    <updated>2014-09-03T11:17:03+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/09/03/111703</id>
    <content type="html"><![CDATA[<h1>ArchLinux</h1>

<p>Install: <code>sudo pacman -S udiskie</code>;</p>

<p>Start service: run <code>udiskie &amp;</code> manually when system startup, or add &ldquo;udiskie &amp;&rdquo; into ~/.xinitrc;</p>

<p>Now when you plug USB key into computer, it will be automount to /media folder.</p>

<p>Use <code>udiskie-umount -a</code> to unmount it.</p>

<p>See <code>man udiskie</code> for more information.</p>

<h1>Mint</h1>

<p>Install: <code>sudo aptitude install udevil</code>;</p>

<p>Start service: run <code>devmon</code> in dmenu when system startup, or add &ldquo;devmon &amp;&rdquo; into ~/.xsession;</p>

<p>After plug USB key into computer, it will be automount to /media folder.
If you do not startup devmon in background, you can run <code>devmon -a</code> to mount the USB key.</p>

<p>Run <code>devmon -c</code> to unmount the USB key.</p>

<p>See <code>man devmon</code> for more information.</p>

<h1>Difference between .xinitrc and .xsession:</h1>

<p>If you startup your system with <a href="https://wiki.archlinux.org/index.php/display_manager">display manager</a>, where you get a graphical login screen, it will read ~/.xsession.
In case of you startup your system without display manager and login to shell, startup i3 (or other wm) with <code>startx</code>, then the <a href="http://en.wikipedia.org/wiki/Xinit">xinit</a> program will read ~/.xinitrc;</p>

<p>See <a href="https://unix.stackexchange.com/questions/47359/what-is-xsession-for">What is “.xsession” for?</a> for details.</p>

<p>See <a href="https://wiki.archlinux.org/index.php/Arch_boot_process">Arch boot process</a> for how Getty manage login process in system boot process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/30/104928/"/>
    <updated>2014-08-30T10:49:28+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/30/104928</id>
    <content type="html"><![CDATA[<h1>Mint</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo aptitude update
</span><span class='line'># sudo aptitude install docker.io aufs-tools cgroup-lite apparmor-utils
</span><span class='line'># sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker
</span><span class='line'># sudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io
</span><span class='line'># docker run ubuntu:14.04 echo 'hello ubuntu'
</span><span class='line'># docker version
</span><span class='line'>Client version: 0.9.1
</span><span class='line'>Go version (client): go1.2.1
</span><span class='line'>Git commit (client): 3600720
</span><span class='line'>Server version: 0.9.1
</span><span class='line'>Git commit (server): 3600720
</span><span class='line'>Go version (server): go1.2.1
</span><span class='line'>Last stable version: 1.2.0, please update docker</span></code></pre></td></tr></table></div></figure>


<h1>ArchLinux</h1>

<p>Docker is only available on X86_64 repository so far.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># pacman -S docker
</span><span class='line'># systemctl enable docker
</span><span class='line'># systemctl start docker
</span><span class='line'># docker run ubuntu:14.04 echo 'hello world'
</span><span class='line'># docker run -i -t ubuntu:14.04 /bin/bash
</span><span class='line'># lsb_release -a
</span><span class='line'>Distributor ID: Ubuntu
</span><span class='line'>Description: Ubuntu 14.04.1 LTS
</span><span class='line'>Release: 14.04
</span><span class='line'>Codename: trusty
</span><span class='line'># exit
</span><span class='line'># docker version
</span><span class='line'>Client version: 1.2.0
</span><span class='line'>Go version (client): go1.3.1
</span><span class='line'>OS/Arch (client): linux/amd64
</span><span class='line'>Server version: 1.2.0
</span><span class='line'>Server API version: 1.14
</span><span class='line'>Go version (server): go1.3.1</span></code></pre></td></tr></table></div></figure>


<p>So you can see at least for now Docker is much newer and easy to use on Arch than on Mint (Ubuntu).
If you install &ldquo;tree&rdquo; with apt-get in the container, logout and relogin, you will find the &ldquo;tree&rdquo; command disappeared.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark Notes]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/27/180124/"/>
    <updated>2014-08-27T18:01:24+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/27/180124</id>
    <content type="html"><![CDATA[<ul>
<li>Shutdown info log in spark-shell:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd $SPARK_HOME/conf    // here it's ~/apps/spark-1.0.2-bin-hadoop2/conf
</span><span class='line'>cp log4j.properties.template log4j.properties
</span><span class='line'>sed -i '2s/INFO/WARN/g' log4j.properties</span></code></pre></td></tr></table></div></figure>


<p>The sed command here replace &ldquo;INFO&rdquo; with &ldquo;WARN&rdquo; in the second line of log4j.properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Redis on CentOS 6]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/26/100107/"/>
    <updated>2014-08-26T10:01:07+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/26/100107</id>
    <content type="html"><![CDATA[<p>This server can&rsquo;t access Internet. So we can only download source tarball (redis-2.8.2.tar.gz) and build from source.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xf redis-2.8.2.tar.gz
</span><span class='line'>cd redis-2.8.2
</span><span class='line'>// if you run "sudo make install" directly, it gives a "zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory" error.
</span><span class='line'>cd deps
</span><span class='line'>sudo make hiredis jemalloc linenoise lua
</span><span class='line'>cd ..
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<p>Ref:
<a href="http://unix.stackexchange.com/questions/94479/jemalloc-and-other-errors-making-redis-on-centos-6-4">jemalloc and other errors making redis on centos 6.4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Working Environment With I3 and Mint]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/24/110909/"/>
    <updated>2014-08-24T11:09:09+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/24/110909</id>
    <content type="html"><![CDATA[<h1>Base System</h1>

<p>Install Linux Mint 17 Xfce with Live DVD (USB key created by YUMI 2.0.5) on Asus X84H laptop. The &ldquo;/&rdquo; partition is 30GB, while the &ldquo;/home&rdquo; partition is 50GB.</p>

<p>No need to install any hardware drivers. It simply works!</p>

<h1>Window Manager</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo aptitude install i3-wm dmenu i3status i3lock</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Now you can logout. In login manager, you can find &ldquo;i3&rdquo;, choose it, and login i3 environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install New Locale on Linux Mint]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/24/103023/"/>
    <updated>2014-08-24T10:30:23+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/24/103023</id>
    <content type="html"><![CDATA[<p>After installing a new Linux (Mint 17, xfce), I need to install Chinese input method, so I have to install Chinese locale at first.</p>

<ol>
<li><p>List all installed locales: <code>locale -a</code>;</p></li>
<li><p>View all supported locales on your system: <code>less /usr/share/i18n/SUPPORTED</code>, and &ldquo;zh_CN.UTF-8 UTF-8&rdquo; is what I want to install;</p></li>
<li><p>Add this locale into locale list file: `echo &ldquo;zh_CN.UTF-8 UTF-8&rdquo; >> /var/lib/locales/supported.d/local&#8221;;</p></li>
<li><p>Regenerate locale list: <code>sudo dpkg-reconfigure locales</code>;</p></li>
</ol>


<p>Ref:</p>

<p><a href="http://askubuntu.com/questions/76013/how-do-i-add-locale-to-ubuntu-server">How do I add locale to ubuntu server?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qtile on ArchLinux]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/21/113949/"/>
    <updated>2014-08-21T11:39:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/21/113949</id>
    <content type="html"><![CDATA[<h1>Install</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Before install qtile, you need download python2-setuptools manually, and install it:
</span><span class='line'>$ sudo pacman -U python2-setuptools-1_5.7-1-any.pkg.tar.xz
</span><span class='line'>$ yaourt -S qtile-git
</span><span class='line'>$ mkdir ~/.config/qtile
</span><span class='line'>$ cp /usr/share/doc/qtile-git/default_config.py ~/.config/qtile/config.py
</span><span class='line'>$ echo "exec qtile" &gt; ~/.xinitrc
</span><span class='line'>$ python2 -m py_compile ~/.config/qtile/config.py    // check syntax for config.py
</span><span class='line'>$ qsh
</span><span class='line'>&gt; restart
</span><span class='line'>&gt; quit
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>


<h1>Configuration</h1>

<p>Something import in config.py:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mod = "mod4"    # the Win key as mod key
</span><span class='line'>Key([mod], "Return", lazy.spawn("xterm")),   # start a shell, you can modify it as another virtual terminal, such as "xfce4-terminal"
</span><span class='line'>Key([mod], "w", lazy.window.kill()),         # close a application
</span><span class='line'>Key([mod, "control"], "r", lazy.restart()),  # reload Qtile after modify config.py
</span><span class='line'>Key([mod, "control"], "q", lazy.shutdown()), # quit Qtile</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closure in Different Languages]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/20/104236/"/>
    <updated>2014-08-20T10:42:36+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/20/104236</id>
    <content type="html"><![CDATA[<p>The following code snippets compare closures in several languages.</p>

<p>First is closure in javascript. Here I use <a href="https://github.com/creationix/nvm">nvm</a> to run javascript code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat closure.js
</span><span class='line'>function extent() {
</span><span class='line'>    var n = 0;
</span><span class='line'>    return function() {
</span><span class='line'>        n++;
</span><span class='line'>        console.log("n=" + n);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>extent()();
</span><span class='line'>extent()();
</span><span class='line'>f = extent();
</span><span class='line'>console.log("-----");
</span><span class='line'>//console.log(extent.uniqueId());
</span><span class='line'>f();
</span><span class='line'>f();
</span><span class='line'>
</span><span class='line'>$ nvm alias default 0.10
</span><span class='line'>$ nvm run closure.js
</span><span class='line'>Running node v0.10.30
</span><span class='line'>n=1
</span><span class='line'>n=1
</span><span class='line'>-----
</span><span class='line'>n=1
</span><span class='line'>n=2</span></code></pre></td></tr></table></div></figure>


<p>In above example, the closure is <code>function() { n++; console.log... }</code>. It&rsquo;s bound to variable &ldquo;f&rdquo;. The local variable &ldquo;n&rdquo; is &ldquo;closed&rdquo; into closure. Its lifetime is the same with &ldquo;f&rdquo;. So after the first execution of f, its inner state is saved.</p>

<p>For Python, nested function can only access variables in outer scope, but can&rsquo;t reassign (modify) them. So I use list as a workaround. In Python 3, there is a new keyword &ldquo;nonlocal&rdquo; to remove this restriction.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat closure.py2.py
</span><span class='line'>def extent():
</span><span class='line'>    n = [0]
</span><span class='line'>    def afun():
</span><span class='line'>        n[0] += 1
</span><span class='line'>        print('n=' + str(n[0]))
</span><span class='line'>    return afun
</span><span class='line'>
</span><span class='line'>extent()()
</span><span class='line'>extent()()
</span><span class='line'>print('-----')
</span><span class='line'>f = extent()
</span><span class='line'>f()
</span><span class='line'>f()
</span><span class='line'>print("type of f is %s, its id is %d" % (type(f), id(f)))
</span><span class='line'>
</span><span class='line'>$ python closure.py2.py 
</span><span class='line'>n=1
</span><span class='line'>n=1
</span><span class='line'>-----
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>type of f is &lt;type 'function'&gt;, its id is 140403684898408
</span><span class='line'>
</span><span class='line'>$ cat closure.py3.py
</span><span class='line'>def extent():
</span><span class='line'>    n = 0
</span><span class='line'>    def afun():
</span><span class='line'>        nonlocal n
</span><span class='line'>        n += 1
</span><span class='line'>        print('n=' + str(n))
</span><span class='line'>    return afun
</span><span class='line'>
</span><span class='line'>extent()()
</span><span class='line'>extent()()
</span><span class='line'>f = extent()
</span><span class='line'>print('----')
</span><span class='line'>f()
</span><span class='line'>f()
</span><span class='line'>print("type of f is %s, its id is %d" % (type(f), id(f)))
</span><span class='line'>
</span><span class='line'>[0] python3 closure.py3.py
</span><span class='line'>n=1
</span><span class='line'>n=1
</span><span class='line'>----
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>type of f is &lt;class 'function'&gt;, its id is 139914425096528</span></code></pre></td></tr></table></div></figure>


<p>The Ruby environment used here is <a href="http://rvm.io/">RVM</a>. Ruby version is 2.1.2.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use 2.1.2 --default
</span><span class='line'>$ cat closure.rb
</span><span class='line'>def extent
</span><span class='line'>    n = 0
</span><span class='line'>    lambda {
</span><span class='line'>        n += 1
</span><span class='line'>        printf "n=%d\n", n
</span><span class='line'>    }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>extent().call()
</span><span class='line'>extent().call()
</span><span class='line'>f = extent()
</span><span class='line'>puts '------'
</span><span class='line'>f.call()
</span><span class='line'>f.call()
</span><span class='line'>puts "class of f is #{f.class.name}, its id is #{f.object_id}"
</span><span class='line'>
</span><span class='line'>$ ruby closure.rb
</span><span class='line'>n=1
</span><span class='line'>n=1
</span><span class='line'>------
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>class of f is Proc, its id is 6724520</span></code></pre></td></tr></table></div></figure>


<p>Two versions of Scala, define functions via &ldquo;def&rdquo; and &ldquo;val&rdquo; give different results:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ diff *.scala
</span><span class='line'>1c1
</span><span class='line'>&lt; def extent = {
</span><span class='line'>---
</span><span class='line'>&gt; val extent = {
</span><span class='line'>
</span><span class='line'>$ cat closure-def.scala
</span><span class='line'>def extent = {
</span><span class='line'>    var n = 0
</span><span class='line'>    () =&gt; {
</span><span class='line'>        n += 1
</span><span class='line'>        println("n=" + n)
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>extent()
</span><span class='line'>extent()
</span><span class='line'>val f = extent
</span><span class='line'>println("------")
</span><span class='line'>f()
</span><span class='line'>f()
</span><span class='line'>println(s"Class of f is ${f.getClass}, its id is ${f.hashCode}")
</span><span class='line'>
</span><span class='line'>$ scala closure-def.scala
</span><span class='line'>n=1
</span><span class='line'>n=1
</span><span class='line'>------
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>Class of f is class Main$$anon$1$$anonfun$extent$1, its id is 8970973
</span><span class='line'>
</span><span class='line'>$ cat closure-val.scala 
</span><span class='line'>val extent = {
</span><span class='line'>    var n = 0
</span><span class='line'>    () =&gt; {
</span><span class='line'>        n += 1
</span><span class='line'>        println("n=" + n)
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>extent()
</span><span class='line'>extent()
</span><span class='line'>val f = extent
</span><span class='line'>println("------")
</span><span class='line'>f()
</span><span class='line'>f()
</span><span class='line'>println(s"Class of f is ${f.getClass}, its id is ${f.hashCode}")
</span><span class='line'>$ scala closure-val.scala 
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>------
</span><span class='line'>$ scala closure-val.scala 
</span><span class='line'>n=1
</span><span class='line'>n=2
</span><span class='line'>------
</span><span class='line'>n=3
</span><span class='line'>n=4
</span><span class='line'>Class of f is class Main$$anon$1$$anonfun$1, its id is 8970973</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Build Tools]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/18/111841/"/>
    <updated>2014-08-18T11:18:41+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/18/111841</id>
    <content type="html"><![CDATA[<p>&ldquo;gem&rdquo; (as a command) is a tool to download and install gems from <a href="https://rubygems.org/">RubyGems</a>. It&rsquo;s Python counterpart should be pip. It install some global gems (files), such as rake, bundler, etc.</p>

<p>&ldquo;gem&rdquo; (as a file on disk), such as &ldquo;bundler-1.6.1.gem&rdquo; is a package which has the same standard structure. It&rsquo;s Java counterpart should be &ldquo;jar&rdquo; file.</p>

<p><a href="http://bundler.io/">bundler</a> is used to manage project-level gems, whose versions for example. It works based on a spec file named &ldquo;Gemfile&rdquo; at project&rsquo;s root directory. It&rsquo;s Java counterpart should be Ivy.</p>

<p><a href="https://rubygems.org/gems/rake">rake</a> is a build tool of Ruby. You can define many tasks and their dependencies in file &ldquo;Rakefile&rdquo;. It&rsquo;s Java counterpart should be Ant, and makefor Linux.</p>

<p>Functions of Maven or Gradle for Java covers bundler and rake.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install ArchLinux on Old ASUS A3000 Laptop]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/17/115200/"/>
    <updated>2014-08-17T11:52:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/17/115200</id>
    <content type="html"><![CDATA[<p>My old ASUS A3 laptop is bought at 2004. It CPU is Intel Celeron 1.33GHz, 490MB memory.</p>

<ol>
<li><p>Download install media: archlinux-2014.04.01-dual.iso;</p></li>
<li><p>Write this ISO to USB stick with <a href="http://www.pendrivelinux.com/yumi-multiboot-usb-creator/">YUMI</a>;</p></li>
<li><p>Plugin a usb-netcard (because the netcard of A3000 doesn&rsquo;t work) and startup A3000 with this USB key;</p></li>
<li><p>When &ldquo;Boot> &rdquo; appeared, press <TAB>, then input &ldquo;pxe&rdquo;, then press <TAB> again, input &ldquo;nohave64&rdquo;;</p></li>
<li><p>After ArchLinux i686 startup, setup ADSL connection with <code>pppoe-setup</code> (I install ArchLinux at home via ADSL):</p>

<p> NIC: enp0s29f7u2
 Username: 100002172688
 Password: k4&hellip;
 DNS: server</p></li>
</ol>


<p>and use default values for other items.</p>

<ol>
<li><p>Install arch system. After setup hostname:</p>

<p> pacman -S rp-pppoe openssh grub
 grub-install &ndash;target=i386-pc &ndash;recheck /dev/sda</p></li>
<li><p>Shutdown system, unpluged USB key, restart system. A &ldquo;GRUB load failed&hellip; no such partition&hellip;&rdquo; error raise</p></li>
<li><p>Install arch system. After setup hostname:</p>

<p> pacman -S rp-pppoe openssh grub
 grub-install &ndash;target=i386-pc &ndash;recheck /dev/sda</p></li>
<li><p>Using USB wireless card to replace USB wired netcard: <code>pacman -S iw gnome-keyring</code>. The USB wireless card is TP-LINK TL_WN725N, bought at jd.com 2013.2.18.</p></li>
<li><p>Install video driver: the video card is Intel checked by <code>lspci|grep VGA</code>, so <code>pacman -S xf86-video-intel</code>;</p></li>
<li><p>Config SSH servive: <code>systemctl enable sshd</code>;</p></li>
<li><p>Shutdown system, unplug USB key, restart system. A &ldquo;GRUB load failed&hellip; no such partition&hellip;&rdquo; error raise.</p></li>
<li><p>List partition UUID with <code>blkid</code>, compare them with that in /boot/grub/grub.cfg. They dismatch.</p></li>
<li><p>Startup system with USB key. After <code>arch-chroot</code>, run <code>grub-mkconfig -o /boot/grub/grub.cfg</code> to rebuild grub file;</p></li>
<li><p>Restart laptop. Arch load successfully.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run MapReduce Jobs on Spark]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/15/175039/"/>
    <updated>2014-08-15T17:50:39+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/15/175039</id>
    <content type="html"><![CDATA[<h1>Interactive Mode</h1>

<p>Follow <a href="http://spark.apache.org/docs/latest/quick-start.html">Quick Start of Spark 1.0.2 on Apache Spark website</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># hadoop fs -put alarm_data_for_explore-0501-0505.txt alarm_data_for_explore-0501-0505.txt 
</span><span class='line'>
</span><span class='line'># hadoop fs -ls
</span><span class='line'>...
</span><span class='line'>-rw-r--r--   3 root root  260780698 2014-08-15 16:45 alarm_data_for_explore-0501-0505.txt
</span><span class='line'>
</span><span class='line'># wc -l alarm_data_for_explore-0501-0505.txt
</span><span class='line'>1362005
</span><span class='line'>
</span><span class='line'># head -1 alarm_data_for_explore-0501-0505.txt 
</span><span class='line'>-2117657102|102|1000012276|License...|3|4|102|
</span><span class='line'>
</span><span class='line'># grep 007-002-00-000592 alarm_data_for_explore-0501-0505.txt | wc -l
</span><span class='line'>12
</span><span class='line'>
</span><span class='line'># mv alarm_data_for_explore-0501-0505.txt aaa.txt       // this local file is unnecessary any more
</span><span class='line'>
</span><span class='line'># spark-shell
</span><span class='line'>
</span><span class='line'>scala&gt; val textFile = sc.textFile("alarm_data_for_explore-0501-0505.txt")
</span><span class='line'>textFile: org.apache.spark.rdd.RDD[String] = MappedRDD[1] at textFile at &lt;console&gt;:12
</span><span class='line'>
</span><span class='line'>scala&gt; textFile.count()
</span><span class='line'>...
</span><span class='line'>res5: Long = 1362005
</span><span class='line'>
</span><span class='line'>scala&gt; textFile.first()
</span><span class='line'>...
</span><span class='line'>res8: String = -2117657102|102|1000012276|License...|3|4|102|
</span><span class='line'>
</span><span class='line'>scala&gt; textFile.filter(line =&gt; line.contains("007-002-00-000592")).count()
</span><span class='line'>...
</span><span class='line'>res12: Long = 12
</span><span class='line'>
</span><span class='line'>scala&gt; import java.lang.Math
</span><span class='line'>import java.lang.Math
</span><span class='line'>
</span><span class='line'>scala&gt; textFile.map(line =&gt; line.split("|").size).reduce((a, b) =&gt; Math.max(a, b))
</span><span class='line'>...
</span><span class='line'>res13: Int = 372</span></code></pre></td></tr></table></div></figure>


<h2>Run Spark Script</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat wfp-spark
</span><span class='line'>val MIN_SUP = 0.0003
</span><span class='line'>val MIN_CONF = 0
</span><span class='line'>val MAX_RELATION_ORDER = 3
</span><span class='line'>val DATA_FILE = "input"
</span><span class='line'>
</span><span class='line'>val textFile = sc.textFile(DATA_FILE)
</span><span class='line'>val weight = textFile.map(x =&gt; x -&gt; x.split(",")(5).toFloat).cache
</span><span class='line'>val data = textFile.groupBy(x =&gt; x.split(",")(0))
</span><span class='line'>
</span><span class='line'>$ spark-shell -i wfp-spark
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now you are in a spark shell, all variables such as MIN_SUP, MIN_CONF are accessible.</p>

<h1>Batch Mode</h1>

<p>Follow <a href="http://www.cloudera.com/content/cloudera-content/cloudera-docs/CDH5/latest/CDH5-Installation-Guide/cdh5ig_running_spark_apps.html">Running Spark Applications in CDH 5 Installation Guide</a>.</p>

<pre><code># locate spark-defaults.conf       // find out where is $SPARK_HOME
/etc/spark/conf.cloudera.spark/spark-defaults.conf
...

# ll /etc/spark/conf.cloudera.spark
...
-rw-r--r-- 1 root root 883 Aug 14 10:12 spark-env.sh

# cat /etc/spark/conf.cloudera.spark/spark-env.sh
...
export SPARK_HOME=/opt/cloudera/parcels/CDH-5.1.0-1.cdh5.1.0.p0.53/lib/spark
...

# source /etc/spark/conf.cloudera.spark/spark-env.sh     // load $SPARK_HOME, etc

# spark-submit --class org.apache.spark.examples.SparkPi --deploy-mode client --master yarn $SPARK_HOME/examples/lib/spark-examples_2.10-1.0.0-cdh5.1.0.jar 10
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Gradle Project in Netbeans]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/13/102446/"/>
    <updated>2014-08-13T10:24:46+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/13/102446</id>
    <content type="html"><![CDATA[<ul>
<li><p>Rename project: edit project name in settings.gradle, then right click project, choose &ldquo;Reload Project&rdquo;;</p></li>
<li><p>Modify dependencies: edit build.gradle, then right click project, choose [Tasks -> buildDependents];</p></li>
</ul>


<p>The jVi plugin is not support Netbeans 8, so its editing is not very convenient like in Eclipse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Underscore in Scala]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/13/102312/"/>
    <updated>2014-08-13T10:23:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/13/102312</id>
    <content type="html"><![CDATA[<p>val name = &ldquo;abc&rdquo;
println(name.exists(_.isUpper))</p>

<p>Here &ldquo;_.isUpper&rdquo; is an anoymous function, which equals to &ldquo;x => x.isUpper&rdquo;.</p>

<p>Ref:
<a href="http://stackoverflow.com/questions/8260367/scala-placeholder-syntax">Scala placeholder syntax</a>
<a href="http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html">Anonymous Function Syntax</a>
<a href="http://ananthakumaran.in/2010/03/29/scala-underscore-magic.html">Scala underscore magic</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve Integral Equation Set With Python]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/13/090432/"/>
    <updated>2014-08-13T09:04:32+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/13/090432</id>
    <content type="html"><![CDATA[<p>The equation set is provided by 鲍珂 at 2014-8-12.</p>

<p>Host: Windows 7
VM: CentOS 6.5 minimal, python 2.6.6</p>

<p>Start VM, make sure its ssh service start with <code>service sshd status</code>;</p>

<p>Then connect it with Putty or Kitty;</p>

<h1>Install</h1>

<p>yum install wget
wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a>
rpm -ivh epel-release-6-8.noarch.rpm
yum update</p>

<p>// optional desktop environment, start with <code>startxfce4</code>
yum groupinstall Xfce
yum groupinstall Fonts
yum install xorg-x11-fonts-Type1 xorg-x11-fonts-misc</p>

<p>yum install python-pip
yum install vim-enhanced
yum install python-ipython.noarch
pip install argparse
pip install sympy
pip install mpmath
pip install scipy</p>

<h1>Symbolic Method</h1>

<p>from sympy import *
var(&lsquo;x y s&rsquo;)
integrate(gamma(x+y)/(gamma(x)+gamma(y))<em>s**(x-1)</em>(1-s)<strong>(y-1), (s, 0, 0.6))
integrate(gamma(x+y)/(gamma(x)+gamma(y))*s</strong>(x-1)*(1-s)**(y-1), (s, 0.9, 1))</p>

<p>Ref:
<a href="http://docs.sympy.org/0.7.0/tutorial.html">http://docs.sympy.org/0.7.0/tutorial.html</a>
<a href="http://scipy-lectures.github.io/advanced/sympy.html#integration">http://scipy-lectures.github.io/advanced/sympy.html#integration</a>
<a href="http://docs.sympy.org/dev/modules/integrals/integrals.html">http://docs.sympy.org/dev/modules/integrals/integrals.html</a>
<a href="http://docs.sympy.org/0.7.1/modules/mpmath/functions/gamma.html">http://docs.sympy.org/0.7.1/modules/mpmath/functions/gamma.html</a></p>

<h1>Numeric Method</h1>

<p>from <strong>future</strong> import division
from scipy.optimize import fsolve
from scipy.special import gamma
from scipy.integrate import fixed_quad</p>

<p>def myfunc(x, y, theta):
gmp = gamma(x+y) / (gamma(x)+gamma(y))
return gmp * theta<strong>(x-1) * (1-theta)</strong>(y-1)</p>

<p>def equations(p):
x, y = p
intg1 = fixed_quad(myfunc, 0, 0.6, args=(x, y))
intg2 = fixed_quad(myfunc, 0.9, 1, args=(x, y))
return (intg1[0] - 0.05, intg2[0] - 0.05)</p>

<p>xr, yr = fsolve(equations, (1, 1))
print equations((xr, yr))</p>

<p>Ref:
<a href="http://stackoverflow.com/questions/8739227/how-to-solve-a-pair-of-nonlinear-equations-using-python">http://stackoverflow.com/questions/8739227/how-to-solve-a-pair-of-nonlinear-equations-using-python</a>
<a href="http://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad">http://docs.scipy.org/doc/scipy-dev/reference/generated/scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad</a>
<a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve">http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Java Project With Eclipse, Gradle and Git]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/11/144152/"/>
    <updated>2014-08-11T14:41:52+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/11/144152</id>
    <content type="html"><![CDATA[<h1>Install and Usage</h1>

<p>The order should be:</p>

<ol>
<li><p>Install Oracle JDK on system: downlaod, extract, define $JAVA_HOME and add $JAVA_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Gradle on System: downlaod, extract, define $GRADLE_HOME and add $GRADLE_HOME/bin folder to $PATH in ~/.zshrc;</p></li>
<li><p>Install Eclipse: download, extract;</p></li>
<li><p>Install Gradle plugin for eclipse via &ldquo;Market Place&rdquo; in Eclipse, because it&rsquo;s inconvenient to run gradle tasks in console while edit files in Eclipse;</p></li>
<li><p>Configure Gradle plugin: set its working JDK;</p></li>
<li><p>Build a new Gradle project in Eclipse, add git version control;</p></li>
<li><p>Run Gradle tasks: right click &ldquo;build.gradle&rdquo; file, then select &ldquo;Gradle -> Tasks Quick Launcher&rdquo; (or Shift + Alt + Ctrl +R) to bring Gradle launcher, then input tasks name.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h2>Frequently Used Tasks</h2>

<p>Some need adding &ldquo;apply plugin: &lsquo;application&rsquo;&rdquo; and &ldquo;mainClassName = &lsquo;com.boco.gdep.Probe&rsquo;&rdquo; into build.gradle.
Read <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">Gradle Application Plugin</a> for details.</p>

<ul>
<li><p>clean</p></li>
<li><p>check</p></li>
<li><p>test</p></li>
<li><p>compileJava</p></li>
<li><p>run</p></li>
<li><p>startScripts: create start scripts for your application;</p></li>
<li><p>distZip: build final deploy package, find zip file under build/distributions folder;</p></li>
<li><p>installApp: install package created in &ldquo;distZip&rdquo; into build/install folder;</p></li>
</ul>


<p>Note that in development stage, testing codes with JUnit (using F11 to launch last dubug) is better than using Gradle&rsquo;s test task (using Shift + Ctrl + Alt + R, then input &ldquo;test&rdquo; and <Enter>).</p>

<p>All these tasks can be executed within Eclipse and in console. So it works good both in development stage and BVT stage. A sample project using these tools is my <a href="https://github.com/leetschau/GDEP">GDEP</a> project.</p>

<h1>Debug Gradle with println</h1>

<p>Add the following scripts into build.gradle, then run &ldquo;check&rdquo; task.</p>

<pre><code>println "--------"
println project.name
println "--------"
</code></pre>

<h2>Customize project name</h2>

<p>Add a new file &ldquo;settings.gradle&rdquo; at the root of the project, add a string &ldquo;rootProject.name = &lsquo;myProj&rsquo;&rdquo; into the file. Now project name, jar file name, start script name will all be changed to myProject.jar/sh/zip, etc.</p>

<hr />

<p>First install gradle, then run the following commands:</p>

<pre><code>$ mkdir myproj
$ cd myproj
$ gradle init --type java-library
$ mkdir src/main/resources
$ mkdir src/test/resources
</code></pre>

<p>Now the project layout is ready. If you want to develop this project in Eclipse, add &ldquo;apply plugin: &lsquo;eclipse&rsquo;&rdquo; into build.gradle, then run:</p>

<pre><code>$ gradle eclipse
</code></pre>

<p>Then open this project with Eclipse.</p>

<p>The default project layout (file structure) of &ldquo;java&rdquo; plugin is described in &ldquo;Project layout&rdquo; section of <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>:</p>

<p>src/main/java:           Production Java source
src/main/resources:      Production resources
src/test/java:           Test Java source
src/test/resources:      Test resources
src/sourceSet/java:      Java source for the given source set
src/sourceSet/resources: Resources for the given source set</p>

<p>Add git version control with:</p>

<pre><code>$ cd myproj
$ git init
</code></pre>

<p>In Eclipse Luna, the git plugin is build-in, so you can manage versions in command line or in eclipse.</p>

<p>Gradle will create many help files and folders, which is not the contents of the project. So we need exclude them using .gitignore:</p>

<pre><code>$ cat .gitignore
build
.gradle
gradle
...
</code></pre>

<p>Three Eclipse component &ldquo;.settings&rdquo;, &ldquo;.project&rdquo; and &ldquo;.classpath&rdquo; should be added to git repository.</p>

<h1>Merge Github Project and Eclipse Gradle Project</h1>

<ol>
<li><p>git clone <a href="https://github.com/leetschau/GDEP.git">https://github.com/leetschau/GDEP.git</a> gdep2</p></li>
<li><p>In Eclipse, build a new Gradle project &ldquo;GDEP-0811&rdquo; with &ldquo;Quick start&rdquo; template;</p></li>
<li><p>Move all files and folders in gdep2 to GDEP-0811;</p></li>
<li><p>Refresh project in Eclipse;</p></li>
<li><p>Build project with [right click on project -> Gradle -> Tasks Quick Launcher], enter &ldquo;build&rdquo;, and press <Enter>. If you encounter a &ldquo;Cannot find System Java Compiler&rdquo; error, set Gradle&rsquo;s Java compiler in [Window -> Preferences -> Gradle -> Arguments -> Java Home], select &ldquo;Workspace JRE&rdquo;: jdk1.6.0_45 (which is the JDK of you system, you have to install it yourself).</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serial Device Debug on Linux]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/09/140312/"/>
    <updated>2014-08-09T14:03:12+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/09/140312</id>
    <content type="html"><![CDATA[<p>The device name is &ldquo;Prolific Technology, Inc. PL2303 Serial Port&rdquo;, you can use <code>lsusb</code> to get its name. Then install gtkterm for communicating with it.</p>

<pre><code>$ sudo apt-get install gtkterm
</code></pre>

<p>Now use syslog to get the device name of pl2303.</p>

<pre><code>$ tail -f /var/log/syslog
...
... usb 3-2: pl2303 converter now attached to ttyUSB0
...
</code></pre>

<p>So its device name is /dev/ttyUSB0. Now you can connect it with gtkterm:</p>

<pre><code>$ sudo gtkterm -p /dev/ttyUSB0 -s 57600
</code></pre>

<p>View -> Send hexadecimal data: 41 54 2B 53 43 41 4E</p>

<h1>minicom</h1>

<pre><code># apt-get install minicom
</code></pre>

<p>But I don&rsquo;t know how to send command via this application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Environment on Eclipse]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/08/155030/"/>
    <updated>2014-08-08T15:50:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/08/155030</id>
    <content type="html"><![CDATA[<h1>Eclipse</h1>

<p>Luna for Java Developer, file name: eclipse-java-luna-R-linux-gtk-x86_64.tar.gz</p>

<h1>Gradle plugin</h1>

<ol>
<li><p>Download gradle-2.0-all.zip, extract it to ~/apps;</p></li>
<li><p>Add following lines into ~/.zshrc and run <code>source ~/.zshrc</code>:</p>

<p> export GRADLE_HOME=/home/chad/apps/gradle-2.0
 export PATH=$PATH:$GRADLE_HOME/bin</p></li>
<li><p>Install &ldquo;Gradle IDE 3.6.0&rdquo;: searching &ldquo;gradle&rdquo; in Eclipse Marketplace and install it;</p></li>
</ol>


<h1>Vim mode plugin</h1>

<ol>
<li><p>Download vrapper_0.44.0_20140601.zip from <a href="http://sourceforge.net/projects/vrapper/">its website</a>;</p></li>
<li><p>Extract it under $ECLIPSE_HOME/dropins;</p></li>
<li><p>Start Eclipse;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Python MapReduce on Hadoop Cluster]]></title>
    <link href="http://leetschau.github.io/blog/2014/08/07/112649/"/>
    <updated>2014-08-07T11:26:49+08:00</updated>
    <id>http://leetschau.github.io/blog/2014/08/07/112649</id>
    <content type="html"><![CDATA[<p>Based on <a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/">Writing an Hadoop MapReduce Program in Python</a>.</p>

<ol>
<li>Create mapper and reducer script and make them executable with <code>chmod 755 *.py</code>:</li>
</ol>


<p>mapper.py:</p>

<pre><code>#!/usr/bin/env python
import sys
# input comes from STDIN (standard input)
for line in sys.stdin:
    # remove leading and trailing whitespace
    line = line.strip()
    # split the line into words
    words = line.split()
    # increase counters
    for word in words:
        # write the results to STDOUT (standard output); what we output here will be the input for the Reduce step, i.e. the input for reducer.py tab-delimited; the trivial word count is 1
        print '%s\t%s' % (word, 1)
</code></pre>

<p>reducer.py:</p>

<pre><code>#!/usr/bin/env python

from operator import itemgetter
import sys

current_word = None
current_count = 0
word = None

# input comes from STDIN
for line in sys.stdin:
    # remove leading and trailing whitespace
    line = line.strip()

    # parse the input we got from mapper.py
    word, count = line.split('\t', 1)

    # convert count (currently a string) to int
    try:
        count = int(count)
    except ValueError:
        # count was not a number, so silently ignore/discard this line
        continue

    # this IF-switch only works because Hadoop sorts map output by key (here: word) before it is passed to the reducer
    if current_word == word:
        current_count += count
    else:
        if current_word:
            # write result to STDOUT
            print '%s\t%s' % (current_word, current_count)
        current_count = count
        current_word = word

# do not forget to output the last word if needed!
if current_word == word:
    print '%s\t%s' % (current_word, current_count)
</code></pre>

<ol>
<li><p>Get input text file and put them into hdfs: download the text version of <a href="http://www.gutenberg.org/etext/20417">The Outline of Science, Vol. 1 (of 4) by J. Arthur Thomson</a>, <a href="http://www.gutenberg.org/etext/5000">The Notebooks of Leonardo Da Vinci</a> and <a href="http://www.gutenberg.org/etext/4300">Ulysses by James Joyce</a>. Then upload them to hdfs:</p>

<p> $ hadoop fs -mkdir gutenberg
 $ hadoop fs -put pg<em>.txt gutenberg/
 $ hadoop jar /usr/lib/hadoop-0.20-mapreduce/contrib/streaming/hadoop-</em>streaming<em>.jar -file /home/hduser/mapper.py -mapper /home/hduser/mapper.py -file /home/hduser/reducer.py -reducer /home/hduser/reducer.py -input /user/hduser/gutenberg/</em> -output /user/hduser/gutenberg-output</p></li>
</ol>


<p>You have to make sure the &ldquo;gutenberg-output&rdquo; folder has not existed. When finished, you can see the result with:</p>

<pre><code>$ hadoop fs -ls gutenberg-output
$ hadoop fs -cat gutenberg-output/part-00000
</code></pre>

<p>Verified on CDH 4.3, built on 8 CentOS 6.3 64bit host, Python 2.6.6, 2014-8-7.</p>
]]></content>
  </entry>
  
</feed>
