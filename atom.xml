<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dark Matter in Cyberspace]]></title>
  <link href="http://leetschau.github.io/atom.xml" rel="self"/>
  <link href="http://leetschau.github.io/"/>
  <updated>2016-04-09T20:50:36+08:00</updated>
  <id>http://leetschau.github.io/</id>
  <author>
    <name><![CDATA[Li Chao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note About Rest Client]]></title>
    <link href="http://leetschau.github.io/blog/2016/04/09/204200/"/>
    <updated>2016-04-09T20:42:00+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/04/09/204200</id>
    <content type="html"><![CDATA[<h1>Insomnia</h1>

<p><a href="http://insomnia.rest/">Insomnia</a>: Chrome App.</p>

<h2>Pros</h2>

<ul>
<li><p>Request和Response窗口是左右排列的，且宽度可以调节；</p></li>
<li><p>分级管理Request: Workspace -> Group -> Request，
只能同时打开一个Workspace，比Postman更整洁；</p></li>
<li><p>良好的快捷键支持，request body和环境变量编辑窗口中可以使用vi编辑模式；</p></li>
<li><p>可以为每个Workspace定义环境变量，然后在url中使用这些环境变量，见下面的演示；</p></li>
<li><p>按名称搜索request: 默认快捷键Ctrl-P;</p></li>
</ul>


<h2>Cons</h2>

<ul>
<li>没有云同步，只能本地import/export;</li>
</ul>


<h1>Postman</h1>

<p><a href="https://www.getpostman.com/">Postman</a>: Chrome App.</p>

<h2>Pros</h2>

<ul>
<li><p>分级管理request: Collection -> Folder -> Request，可以方便地搜索；
Collection实际就是高一级的Folder，当request数量多时，request面板会比较凌乱；</p></li>
<li><p>可以同步到云端，在不同机器上方便地同步；</p></li>
</ul>


<h2>Cons</h2>

<p>Request和Response窗口是上下排列的，当调试Post方法时，
打开的Body窗体基本占满了整个屏幕，而且是最小高度，不能再减小，
导致每次看response内容都要使用滚轮，非常不方便。</p>

<h1>Discussion</h1>

<h2>Insomnia的环境变量</h2>

<p>例如定义下面的环境变量：</p>

<pre><code>{
    "api_url": "http://api.newfairs.com",
    "inner_url": "http://192.168.100.24:9200/"
}
</code></pre>

<p>在request的url栏里可以这样定义url: <code>/Fair/_search</code>，
点击request名称后面的三角图标并选择"Export as cURL"，可以看到url被替换成了
<code>http://api.newfairs.com/Fair/_search</code>.</p>

<h2>其他类似工具</h2>

<p>Firefox插件：Poster, RESTED, REST Easy, RESTClient.
前三者都不具备多Request管理功能，无法保存多个Request.
RESTClient可以定义favorite，但没有单独的窗体，查看不方便。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Schema Analysis]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/29/183444/"/>
    <updated>2016-03-29T18:34:44+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/29/183444</id>
    <content type="html"><![CDATA[<p>Use <a href="https://github.com/variety/variety-cli">variety/variety-cli</a> to
analysis mongodb schema.</p>

<h1>Install with npm</h1>

<p><code>npm install variety-cli -g</code>
If the command <code>variety</code> is conflict with
<a href="http://peterlevi.com/variety/">Variety the Wallpaper Changer</a>,
add <code>alias variety='/home/leo/apps/node-v5.4.1-linux-x64/bin/variety'</code>
into ~/.bash_aliases.</p>

<p>The production database is connected with
<code>mongo 192.168.10.89:27017/production -u dba -p dba</code>.
To analyze it, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>variety production/Fair --host 192.168.10.89 --port <span class="m">27017</span> --username dba --password dba
</span></code></pre></td></tr></table></div></figure>


<p>Note you can&rsquo;t use <code>-u</code> instead of <code>--username</code> above.</p>

<h1>Run with mongo</h1>

<p>Download variety.js from it&rsquo;s repo and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo 192.168.10.89:27017/production -u dba -p dba --eval <span class="s2">&quot;var collection = &#39;Fair&#39;&quot;</span> variety.js
</span><span class='line'>+------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'><span class="p">|</span> key                                              <span class="p">|</span> types                              <span class="p">|</span> occurrences <span class="p">|</span> percents               <span class="p">|</span>
</span><span class='line'><span class="p">|</span> ------------------------------------------------ <span class="p">|</span> ---------------------------------- <span class="p">|</span> ----------- <span class="p">|</span> ---------------------- <span class="p">|</span>
</span><span class='line'><span class="p">|</span> _id                                              <span class="p">|</span> String                             <span class="p">|</span>        <span class="m">9316</span> <span class="p">|</span> 100.000000000000000000 <span class="p">|</span>
</span><span class='line'><span class="p">|</span> recurrence.XX._id                                <span class="p">|</span> String                             <span class="p">|</span>        <span class="m">9276</span> <span class="p">|</span>  99.570631172176902624 <span class="p">|</span>
</span><span class='line'><span class="p">|</span> recurrence.XX.timeStart                          <span class="p">|</span> String <span class="o">(</span>9180<span class="o">)</span>,Date <span class="o">(</span>116<span class="o">)</span>           <span class="p">|</span>        <span class="m">9275</span> <span class="p">|</span>  99.559896951481320571 <span class="p">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify it with mongo shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo 192.168.10.89:27017/production -u dba -p dba
</span><span class='line'>&gt; db.Fair.count<span class="o">()</span>
</span><span class='line'>9316
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence._id&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">true</span><span class="o">}})</span>.count<span class="o">()</span>
</span><span class='line'>9276
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="nv">$and</span>: <span class="o">[{</span><span class="s1">&#39;recurrence&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">true</span><span class="o">}}</span>, <span class="o">{</span><span class="s1">&#39;recurrence._id&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">false</span><span class="o">}}]})</span>.count<span class="o">()</span>
</span><span class='line'><span class="m">40</span>      // <span class="m">9316</span> - 9276
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">true</span><span class="o">}})</span>.count<span class="o">()</span>
</span><span class='line'><span class="m">9275</span>    //
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="nv">$and</span>: <span class="o">[{</span><span class="s1">&#39;recurrence._id&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">true</span><span class="o">}}</span>, <span class="o">{</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">false</span><span class="o">}}]})</span>.count<span class="o">()</span>
</span><span class='line'><span class="m">1</span>       // <span class="m">9276</span> - 9275
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$type</span>: <span class="m">2</span> <span class="o">}})</span>.count<span class="o">()</span>
</span><span class='line'>9180
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$type</span>: 9<span class="o">}})</span>.count<span class="o">()</span>
</span><span class='line'>116
</span><span class='line'>&gt; db.Fair.find<span class="o">({</span><span class="nv">$and</span>: <span class="o">[{</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$exists</span>: <span class="nb">true</span><span class="o">}}</span>, <span class="o">{</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$not</span>: <span class="o">{</span><span class="nv">$type</span>: 2<span class="o">}}}</span>, <span class="o">{</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$not</span>: <span class="o">{</span><span class="nv">$type</span>: 9<span class="o">}}}]})</span>.count<span class="o">()</span>
</span><span class='line'><span class="m">0</span>      // there<span class="err">&#39;</span>s no other data <span class="nb">type</span>, all you need to <span class="k">do</span> is converting String to Date
</span></code></pre></td></tr></table></div></figure>


<p>For type number, 2 means String, 9 means Date.
See their definitions in <a href="https://docs.mongodb.org/manual/reference/operator/query/type/">$type in MongoDB doc</a>.</p>

<p>Why 9180 + 116 > 9275? Because all the numbers here is the counts of fairs.
While in a single fair there are maybe many recurrences.
So if a fair has 2 recurrences, one&rsquo;s timeStart type is String,
and the other&rsquo;s type is Date,
it will be counted twice, both in 9180 and 116.</p>

<h1>Unify Schema</h1>

<p>We need convert the type of &ldquo;updatedAt&rdquo;, &ldquo;recurrence.$.timeStart&rdquo;
and &ldquo;recurrence.$.timeEnd&rdquo; from String to Date with mongo script below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence.timeStart&#39;</span>: <span class="o">{</span><span class="nv">$type</span>: 2<span class="o">}})</span>.forEach<span class="o">(</span><span class="k">function</span><span class="o">(</span>fair<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  fair.recurrence.forEach<span class="o">(</span><span class="k">function</span><span class="o">(</span>rec<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>typeof<span class="o">(</span>rec.timeStart<span class="o">)</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      rec.timeStart <span class="o">=</span> new Date<span class="o">(</span>rec.timeStart<span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span><span class="p">;</span>
</span><span class='line'>  db.Fair.save<span class="o">(</span>fair<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span><span class='line'>db.Fair.find<span class="o">({</span><span class="s1">&#39;recurrence.timeEnd&#39;</span>: <span class="o">{</span><span class="nv">$type</span>: 2<span class="o">}})</span>.forEach<span class="o">(</span><span class="k">function</span><span class="o">(</span>fair<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  fair.recurrence.forEach<span class="o">(</span><span class="k">function</span><span class="o">(</span>rec<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>typeof<span class="o">(</span>rec.timeEnd<span class="o">)</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      rec.timeEnd <span class="o">=</span> new Date<span class="o">(</span>rec.timeEnd<span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span><span class="p">;</span>
</span><span class='line'>  db.Fair.save<span class="o">(</span>fair<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span><span class='line'>db.Fair.find<span class="o">({</span><span class="s1">&#39;updatedAt&#39;</span>: <span class="o">{</span><span class="nv">$type</span>: 2<span class="o">}})</span>.forEach<span class="o">(</span><span class="k">function</span><span class="o">(</span>fair<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  fair.updatedAt <span class="o">=</span> new Date<span class="o">(</span>fair.updatedAt<span class="o">)</span><span class="p">;</span>
</span><span class='line'>  db.Fair.save<span class="o">(</span>fair<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Toggle Syntastic Mode to Speedup Vim]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/21/075937/"/>
    <updated>2016-03-21T07:59:37+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/21/075937</id>
    <content type="html"><![CDATA[<p>Sometimes syntastic&rsquo;s syntax checker make vim slow down.
To speed it up, add <code>cabbrev stm SyntasticToggleMode&lt;CR&gt;</code> into .vimrc.</p>

<p>When syntax checker annoying, use <code>:stm</code> to shut it down.
And do it again to open it again.</p>

<p>BTW: use <code>:ab</code> to list all abbreviations defined in .vimrc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persist Tmux]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/21/004603/"/>
    <updated>2016-03-21T00:46:03+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/21/004603</id>
    <content type="html"><![CDATA[<h1>Work Flow</h1>

<ol>
<li><p>Persist tmux status automatically or manually;</p></li>
<li><p>After restarting the computer, all sessions, windows and panes can
comes back.</p></li>
</ol>


<h1>Solution</h1>

<p>First make sure your tmux version >= 1.9 with <code>tmux -V</code>.
If not, install <a href="http://libevent.org/">libevent</a>
(download libevent-2.0.22-stable.tar.gz and install it from source)
and <a href="https://tmux.github.io/">tmux</a>
(download tmux-2.1.tar.gz and install it frome source).</p>

<p>Then install <a href="https://github.com/tmux-plugins/tpm">Tmux Plugin Manager</a>,
<a href="https://github.com/tmux-plugins/tmux-resurrect">Tmux Resurrect</a> and
<a href="https://github.com/tmux-plugins/tmux-continuum">tmux-continuum</a> by adding
the following lines in the end of ~/.tmux.conf:</p>

<pre><code># List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
</code></pre>

<p>Now the tmux status will be saved to disk every 15 minutes,
or you can save it manually with <code>prefix, Ctrl-S</code>.</p>

<p>After restarting computer, run <code>tmux</code> in console,
and all tmux sessions, windows and panes will be restored automatically
(or you can restore them manually with <code>prefix, Ctrl-R</code>).</p>

<p>You can remove the temporary session with <code>tmux kill-session -t 0</code>,
where &ldquo;0&rdquo; is the name of the temporary session.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule的同步问题]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/17/140426/"/>
    <updated>2016-03-17T14:04:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/17/140426</id>
    <content type="html"><![CDATA[<h1>获取更新</h1>

<pre><code>git submodule foreach --recursive 'git fetch --all'
</code></pre>

<h1>列出remote比local新的submodule和所在分支</h1>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'|grep behind -B1
</code></pre>

<p>查看最新的提交在哪个分支上</p>

<pre><code>git submodule foreach --recursive 'git for-each-ref --sort=-committerdate --count=1'
</code></pre>

<h1>查询local branch与remote branch之间的关系</h1>

<p>这一步的目的是为了避免后面做<code>git pull --all</code>时无法确定merge目标branch.</p>

<pre><code>git submodule foreach --recursive 'git branch --all -vv'
</code></pre>

<p>如果一个repository早已设置好remote和local之间的对应关系（见Note2），
则可以跳过这一步。</p>

<p>显示origin中每个branch的情况：</p>

<pre><code>git submodule foreach --recursive 'git remote show origin'
</code></pre>

<h1>同步到本地分支上</h1>

<pre><code>git submodule foreach --recursive 'git pull --all'
</code></pre>

<p>如果上面的命令由于Git无法确定merge目标失败，先执行：</p>

<pre><code>git submodule foreach --recursive 'git checkout master'
</code></pre>

<p>再执行<code>git pull</code>命令。</p>

<h1>回退</h1>

<p>任何时候如果想放弃本地所做的修改，用<code>git submodule update</code>返回到初始状态。</p>

<h1>切换到工作分支</h1>

<pre><code>git submodule foreach --recursive 'git checkout $(git for-each-ref --count=1 --sort=-committerdate| grep -oE "[^/]+$")'
</code></pre>

<p>其中<code>git for-each-ref</code>拿到最新的一次commit及其所在分支，
用<code>grep</code>命令得到分支名称，在checkout出此分支。</p>

<p>参考：</p>

<p><a href="http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit">http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit</a></p>

<p><a href="http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field">http://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field</a></p>

<h1>Note</h1>

<h2>Note1</h2>

<p>如果希望查询某个时间点后的提交：</p>

<pre><code>git --no-pager submodule foreach --recursive 'git log --since="2016-03-05" --pretty=oneline --all --decorate'
</code></pre>

<p>这里的<code>--no-pager</code>避免<code>git log</code>进入"pager"（即类似于vim或者less的全屏风格）模式。</p>

<h2>Note2</h2>

<p>Local branch与remote branch的关系实际上是定义在<code>.git/config</code>文件中的，
对于Meteor package, 这个文件是
&ldquo;<APP_PROJ_HOME>/.git/modules/packages/<PACKAGE_NAME>/config"，例如：</p>

<pre><code>[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print First and Last Characters of a Line]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/14/215015/"/>
    <updated>2016-03-14T21:50:15+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/14/215015</id>
    <content type="html"><![CDATA[<p>Some large files all content are in the same line,
there is no newline for the entire file.
For them it&rsquo;s very slow to view them with less or vim.
Instead we can use <code>head</code> and <code>tail</code>,
for example commands below print first and last 50 characters
of a large one-line file:</p>

<pre><code>cat large-one-line.json|head -c 50
cat large-one-line.json|tail -c 50
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print Some Lines of a File With Head and Tail]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/07/110735/"/>
    <updated>2016-03-07T11:07:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/07/110735</id>
    <content type="html"><![CDATA[<pre><code>$ echo "1\n2\n3\n4\n5\n6" &gt; test

$ cat test 
1
2
3
4
5
6

$ tail -n+2 test   // remove head (start from 2nd line)
2
3
4
5
6

$ head -n-2 test   // remove tail (discard last 2 lines)
1
2
3
4

$ head -2 test     // only head
1
2

$ tail -2 test     // only tail
5
6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom Notes]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/04/230125/"/>
    <updated>2016-03-04T23:01:25+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/04/230125</id>
    <content type="html"><![CDATA[<h1>Import Global Settings</h1>

<p>ctrl-.: toggle <a href="https://atom.io/packages/keybinding-resolver">Keybinding Resolver</a>;</p>

<p>ctrl-,: open &ldquo;Settings&rdquo; panel;</p>

<p>Search shortcuts in [Settings -> Keybindings]</p>

<h1>Important Packages</h1>

<h2>vim mode</h2>

<p>Frequently used shortcuts in <a href="https://github.com/atom/vim-mode">Vim Mode</a>:</p>

<p>ctrl-k s/v: split panel horizontal/vertical;</p>

<p>ctrl-w,w: switch focus between 2 panels;</p>

<p>ctrl-w, h/j/k/l: switch focus to left/down/up/right panel;</p>

<p>ctrl-w,q: close panel;</p>

<p>Get all shortcuts in vim mode in ~/.atom/packages/vim-mode/keymaps/vim-mode.cson</p>

<h2>vim-mode-clipboard-plus</h2>

<p>Use <code>yy</code> to copy from Atom to outside,
and use <code>p</code> to paste from outside into Atom.</p>

<h2>ex-mode</h2>

<p>Use <code>:w</code>, <code>:q</code>, <code>:sv</code>, <code>:sp</code>.</p>

<h2>Keyboard localization</h2>

<p>Purpose: use &ldquo;;&rdquo; instead of &ldquo;:&rdquo; in vim-mode to invoke ex-command.</p>

<p>Install this package, and create file
&ldquo;/home/leo/.atom/packages/keyboard-localization/mykeymaps.json&rdquo;:</p>

<pre><code>{
    "186": {
        "unshifted": 58
    }
}
</code></pre>

<p>Set above path value to [Settings -> Packages -> keyboard-localization]:
Settings, &ldquo;Use Keyboard Layout From Path&rdquo;.</p>

<p>See <a href="https://atom.io/packages/keyboard-localization">Keyboard localization</a>
for how to generate above json file.</p>

<h2>Git</h2>

<p><a href="https://atom.io/packages/git-plus">Git-Plus</a>.</p>

<p>For example: discard all changes from last commit:</p>

<pre><code>ctrl-shift-h
Run
reset --hard HEAD
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Haskell Develop Environment in Atom]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/04/113755/"/>
    <updated>2016-03-04T11:37:55+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/04/113755</id>
    <content type="html"><![CDATA[<p><a href="https://atom.io/packages/ide-haskell">IDE-Haskell</a> is a good choice
for haskell editor.</p>

<h1>Installation</h1>

<pre><code>$ cabal update
$ cabal install ghc-mod stylish-haskell
$ ghc-mod --version
ghc-mod version 5.5.0.0 compiled by GHC 7.10.2
</code></pre>

<p>Download Atom 1.5 (atom-amd64.deb),
install it with <code>sudo dpkg -i atom-amd64.deb</code>, and run:</p>

<pre><code>$ apm install language-haskell haskell-ghc-mod ide-haskell-cabal ide-haskell autocomplete-haskell ide-haskell-repl
</code></pre>

<p>Open Atom, Ctrl-Shift-P, open &ldquo;View Installed Packages&rdquo;,
click &ldquo;Settings&rdquo; of haskell-ghc-mod,
input full path of ghc-mod and ghc-modi in &ldquo;Ghc Mod Path&rdquo; and &ldquo;Ghc Modi Path&rdquo;,
here &ldquo;/home/leo/.cabal/bin/ghc-mod&rdquo; and &ldquo;/home/leo/.cabal/bin/ghc-modi&rdquo;.</p>

<p>Click &ldquo;Settings&rdquo; of ide-haskell,
input full path of stylish-haskell in &ldquo;Stylish Haskell Path&rdquo;,
here it&rsquo;s &ldquo;/home/leo/.cabal/bin/stylish-haskell&rdquo;.</p>

<p>Restart Atom, open a folder contains haskell .hs files to use ide-haskell.</p>

<h2>GHCi in Atom</h2>

<p>Click &ldquo;Settings&rdquo; of ide-haskell-repl,
set &ldquo;Command Args&rdquo; to &ldquo;ghci&rdquo;, and &ldquo;Command Path&rdquo; to &ldquo;/usr/bin/stack&rdquo;,
when you use stack. (This works fine in Atom 1.5).
Set &ldquo;Command Args&rdquo; to &ldquo;repl&rdquo;, and &ldquo;Command Path&rdquo; to &ldquo;/home/leo/.local/bin/cabal&rdquo;,
when you use cabal. (This doesn&rsquo;t work in Atom 1.5).</p>

<p>To load chapter 2 of &ldquo;Learning Haskell Data Analysis&rdquo;
into ide-haskell-repl, you must install required libraries with stack:</p>

<pre><code>stack install csv HDBC sqlite HDBC-sqlite3
</code></pre>

<p>Then open file &ldquo;LearningDataAnalysis02.hs&rdquo; in Atom,
click [Haskell IDE -> Open REPL] in main menu,
now module &ldquo;LearningDataAnalysis02&rdquo; is loaded into ghci.
Input <code>parseCSVFromFile "all_week.csv"</code> in repl box,
press Shift+Enter to evluate it.</p>

<p>See all keybindings in &ldquo;Keybindings&rdquo; of ide-haskell-repl
in Atom package settings.</p>

<h1>Discussion</h1>

<p>Ensure ghc-mod version > 5.4.
Do NOT install it with <code>apt-get</code>, because its version is 3.x.
See <a href="https://github.com/atom-haskell/haskell-ghc-mod#configuration">https://github.com/atom-haskell/haskell-ghc-mod#configuration</a> for details.</p>

<p>If you only install stack instead of cabal, you can install Haskell package with
<code>stack install ghc-mod stylish-haskell</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Website With Phoenix]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/02/223258/"/>
    <updated>2016-03-02T22:32:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/02/223258</id>
    <content type="html"><![CDATA[<p>按照 <a href="http://www.phoenixframework.org/docs/up-and-running%EF%BC%8C">http://www.phoenixframework.org/docs/up-and-running%EF%BC%8C</a>
运行<code>mix phoenix.new hello_world</code>后询问是否安装依赖，选择Y，
mix执行<code>running mix deps.get</code>时长时间没有响应。
Ctrl-C中断，进入hello_world文件夹后运行<code>mix deps.get</code>，一段时间后报超时错误，
加代理后重新执行顺利完成。</p>

<p>在Ubuntu上安装PostgreSQL，安装后，
根据"config/prod.secret.exs"，可知要创建数据库"hello_world_prod &ldquo;：</p>

<pre><code>su - postgres
psql
create database hello_world_prod owner postgres;
</code></pre>

<p>安装后用<code>sudo passwd postgres</code>将用户postgres密码设置为postgres，</p>

<pre><code>sudo chown leo:leo readable-stream
npm install
mix phoenix.server
</code></pre>

<p>在另一个Console中执行<code>vi web/templates/page/index.html.eex</code>，重启phoenix服务，
可以看到修改后的效果。</p>

<p>Note: <code>mix ecto.create</code>可以跳过。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find Corresponding Template From a Page Element in a Meteor Powered Website]]></title>
    <link href="http://leetschau.github.io/blog/2016/03/01/182135/"/>
    <updated>2016-03-01T18:21:35+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/03/01/182135</id>
    <content type="html"><![CDATA[<p>Open &ldquo;newfairs.com&rdquo; in Firefox. Right click of a page element
and choose &ldquo;inspect element&rdquo;, for example, here is <code>&lt;p class="one-line"&gt;</code>.
Right click it and choose &ldquo;New Attribute&rdquo;, add <code>id="mytarget"</code>.</p>

<p>In console, input <code>Blaze.getView(document.getElementById('mytarget'))</code>
and press Enter.
You get</p>

<pre><code>Object { name="Template.productListItem",  _callbacks={...},  isCreated=true,  more...}
</code></pre>

<p>Now you know this element is defined in template &ldquo;productListItem&rdquo;.</p>

<p>Because <code>ag</code> can&rsquo;t search text in git submodule with
<code>ag Template.productListItem</code> directly,
search &lsquo;Template.productListItem&rsquo; in all packages with</p>

<pre><code>git --no-pager submodule foreach --recursive 'ag Template.productListItem'
</code></pre>

<h1>Discussion</h1>

<p>Where does <code>Blaze</code> come from?
When connected with the web server, the browser receives many JavaScript files.
All html code is generated dynamically from these js files.
And <code>Blaze</code> is defined and loaded in these files, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jump Between Tags in Vim Documentation]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/29/125605/"/>
    <updated>2016-02-29T12:56:05+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/29/125605</id>
    <content type="html"><![CDATA[<p>In vim doc, use <code>Ctrl-]</code> to jump to the tag under the cursor,
use <code>Ctrl-o</code> to jump back.</p>

<p>For example, run <code>:h airline</code> (you must have installed vim-airline,
see note &ldquo;Customize Vim Statusline&rdquo; for details).</p>

<p>Put the cursor on &ldquo;airline-customization&rdquo; in section &ldquo;CONTENTS&rdquo;,
press <code>Ctrl-]</code> to jump to section &ldquo;CUSTOMIZATION&rdquo;,
press <code>Ctrl-o</code> to jump back to section &ldquo;CONTENTS&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Branch Note]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/28/002058/"/>
    <updated>2016-02-28T00:20:58+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/28/002058</id>
    <content type="html"><![CDATA[<p>Ref:</p>

<p><a href="https://git-scm.com/book/no-nb/v1/Git-Branching-What-a-Branch-Is">Git Branching - What a Branch Is</a></p>

<p><a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git Branching - Branches in a Nutshell</a></p>

<p><a href="http://stackoverflow.com/questions/8198105/how-does-git-store-files">How does git store files?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combine History Commits With Git]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/25/103348/"/>
    <updated>2016-02-25T10:33:48+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/25/103348</id>
    <content type="html"><![CDATA[<h1>Question</h1>

<p>The commit history is:</p>

<pre><code>$ git log --pretty=oneline
52756ce25b26442a21ebfe52655dcf9c6ba9aa98 ch6 changed
41d49f2fbd12c00af99a90b6fbd1e4af18db0103 ch5 changed
c24b32555b5fe98d556acc7d32a2bd68346d40ba ch4 changed
4088dde16b47f39d1b5f9553bc902e2afc34bf9a ch3 changed
ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem
...
</code></pre>

<p>You want to combine changes in chapter 3, 4 and 5.</p>

<h1>Solution</h1>

<pre><code>git rebase -i ea37405f
</code></pre>

<p>Here &ldquo;ea37405f&rdquo; is the commit <strong>older</strong> than the commits you want to combine.</p>

<p>Now in an editor like:</p>

<pre><code>pick 4088dde ch3 changed
pick c24b325 ch4 changed
pick 41d49f2 ch5 changed
pick 52756ce ch6 changed
</code></pre>

<p>Notice the timeline order is <strong>reversed</strong> compared with that in <code>git log</code>:
the newest commit (&ldquo;ch6 changed&rdquo;) is now in the last line, instead of the first.</p>

<p>Modify the content like this:</p>

<pre><code>pick 4088dde ch3 changed
s c24b325 ch4 changed
s 41d49f2 ch5 changed
pick 52756ce ch6 changed
</code></pre>

<p>Here &ldquo;s&rdquo; means melding the commit into previous (<strong>older</strong>) commit.</p>

<p>Save and quit, you now in an editor for new commit message, input:</p>

<pre><code>chapter 3, 4 and 5 changed
</code></pre>

<p>Save and you get a message &ldquo;Successfully rebased and updated refs/heads/master&rdquo;.</p>

<h1>Discussion</h1>

<p>Check the history after rebase:</p>

<pre><code>$ git log --pretty=oneline
b4463e99ad221f270fd9f51d5bc7e8b348805804 ch6 changed
276932a252b9041085fb30d0d5e4082db8c03584 chapter 3, 4 and 5 changed
ea37405f9b59bef389ef6ca6a0c6ae8ad6365fb9 Fix some syntax problem
</code></pre>

<p>You can see the changes in files with <code>git diff &lt;older&gt; &lt;newer&gt;</code>, here it is:
<code>git diff HEAD~2 HEAD~</code>, or <code>git diff ea37405 276932a</code>.</p>

<p>If something wrong happens and your rebase process stopped,
come back to the place where you started with <code>git rebase --abort</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Develop Meteor App With TypeScript]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/21/134826/"/>
    <updated>2016-02-21T13:48:26+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/21/134826</id>
    <content type="html"><![CDATA[<h1>Console Tools</h1>

<p>Install typescript console tools
<a href="https://github.com/TypeStrong/ts-node">TypeScript Node</a>:</p>

<pre><code>npm install -g ts-node
npm install -g typescript
</code></pre>

<h1>Add TypeScript into Meteor App</h1>

<pre><code>meteor create --example todos
cd todos
meteor add meteortypescript:compiler
</code></pre>

<p>(to be continued)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3月6日演讲提纲]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/21/110422/"/>
    <updated>2016-02-21T11:04:22+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/21/110422</id>
    <content type="html"><![CDATA[<h1>行业背景</h1>

<ul>
<li><p>会展行业现状：基本角色介绍；</p></li>
<li><p>行业特点：信息不透明，中间环节多，交易成本高，主要靠销售，参展体验差；</p></li>
<li><p>与传统B2C领域的区别：交易量小，单笔金额大，多了展会维度；</p></li>
<li><p>产品愿景：改变行业现状，提升会展效果，airbnb vs taobao</p></li>
</ul>


<h1>技术框架选型</h1>

<h2>外包 vs 自主开发</h2>

<p>成本和质量控制，团队建设，备选方案：Magento, ezshop</p>

<h2>Web框架选型</h2>

<p>SSH, LAMP, .NET, Dart, Flask, Play, MEAN, Meteor</p>

<p>开发者背景：Pascal -> Delphi -> Python -> Java -> Scala (Linux)</p>

<p>Meteor优势：学习成本低（js: web + db），开发效率高，reactivity</p>

<h1>架构演进</h1>

<p>原则：自主开发核心商业逻辑，外围功能尽量外包。</p>

<ul>
<li><p>第一阶段：站内搜索，基于正则匹配的站内搜索，
Deploy: MUP, beta -> production;
单一package，bitbucket，DB + Web Server, 公网IP；</p></li>
<li><p>第二阶段：线上搜索 + 线下撮合，以搜索为中心，增加静态广告，
DB + Web Server + Console，初步的权限管理；</p></li>
<li><p>第三阶段：多品种线上交易，多package，git submodule，
DB Cluster + Web Server + Elasticsearch + MongoConnector +
Wordpress + Phabricator + Console;
AliPay, 私有网络；</p></li>
<li><p>第四阶段：单一商品线上交易，精简数据模型，
Deploy: staging (Phab + Ansible, auto) -> beta -> production;
SSL，AliPay + 银行接入；</p></li>
</ul>


<h1>Meteor待改进的地方</h1>

<ul>
<li><p>静态分析工具不足，难以排查拼写错误；</p></li>
<li><p>Package数量增加后，编译速度变慢，受网速影响大；</p></li>
<li><p>版本兼容性不好；</p></li>
<li><p>多数据源处理复杂；</p></li>
<li><p>第三方package兼容性，持续性良莠不齐；</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merge Multiple PDF Files in Ubuntu]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/20/010838/"/>
    <updated>2016-02-20T01:08:38+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/20/010838</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a built-in utility in Ubuntu 14.04 &ldquo;pdfunite&rdquo;.
Merge multiple pdf files with it (the last one is the output file name):</p>

<p><code>pdfunite DataMining-ch* AProgrammersGuide2DataMining.pdf</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Python Script]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/16/212514/"/>
    <updated>2016-02-16T21:25:14+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/16/212514</id>
    <content type="html"><![CDATA[<p>Now I want to dubug a script named <code>filteringdata.py</code>.</p>

<h1>PyCharm Community Edition</h1>

<p>It&rsquo;s editor (with IdeaVim plugin), linter and debugger is
the most powerful and verbose in the 3 candidates.</p>

<p>Add the following lines into ~/.ideavimrc to swap colon and semicolon:</p>

<pre><code>nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
</code></pre>

<p>The code navigation shortcut &ldquo;Ctrl-Alt-Left/Right&rdquo; of the default keymap
&ldquo;Default for XWin&rdquo; (in File -> Settings) is conflict with
&ldquo;Switch workspace&rdquo;&rsquo;s shortcut key of Ubuntu Unity.
So change the &ldquo;Keymaps&rdquo; to &ldquo;Default for GNOME&rdquo;, whose code navigation key
is &ldquo;Alt-Shift-Left/Right&rdquo;.</p>

<h2>Editor Setup</h2>

<p>Setup editor font size:  [Font -> Primary font -> Size: 16]</p>

<p>Setup editor background to pure dark: [General -> Text -> Default text],
click the &ldquo;Background&rdquo; color icon, set R,G,B to 0,
click the &ldquo;Foreground&rdquo; color icon, set R,G,B to 255.</p>

<p>Set right margin :
[File -> Settings -> Editor -> Code Style -> General: Right margin (columns)],
set it&rsquo;s value to 80 instead of the default value 120.</p>

<p>Jump between editor and terminal: modify it to Alt-K (default: Alt-F12)
choose &ldquo;Add Keyboard Shortcut&rdquo;.</p>

<h2>Some Shortcuts</h2>

<p>Toggle Project View: Alt-1</p>

<p>Split window: Ctrl-Shift-A, input &ldquo;split&rdquo;, select &ldquo;Split vertical/horizontal&rdquo;</p>

<p>Jump between files: Ctrl-Shift-N</p>

<p>Jump between editor tabs and split window: Ctrl-Tab</p>

<p>Full screen: [View -> Enter Full Screen]</p>

<p>Clipboard history: Ctrl-Shift-v</p>

<p>Jump to previous/next function: Alt-Up/Down</p>

<h2>Discussion</h2>

<p>The main problem of pudb below is that it can&rsquo;t see the console output when
debugging.
In PyCharm you can use easily switch between &ldquo;Console&rdquo; and &ldquo;Debugger&rdquo; panels.
The Console panel distinguishes stdout and stderr with different colors,
which is particularly useful when debugging some programs
with both stdout and stderr outputs.</p>

<h1>pudb</h1>

<p>Comparing with ipdb, pudb needn&rsquo;t add stub in source script.</p>

<p>sudo pip install pudb
sudo chown -R leo:leo ~/.config/pudb</p>

<p>Debug Python script: <code>pudb filteringdata.py</code>,
or with command line arguments: <code>pudb uploadES.py fairs.json production Fair</code>.</p>

<p>Use <code>?</code> to list all available commands.</p>

<p>Focus variable window with <code>V</code>.
In this window:
use <code>w</code> to toggle line wrap,
use <code>[</code>/<code>]</code> to grow/shrink relative size of the window,
use <code>=</code>/<code>-</code> to grow/shrink sidebar.</p>

<p>Toggle focus on command line with &lsquo;Ctrl-x&rsquo;.</p>

<h1>ipdb</h1>

<p>There are totally 3 steps when debugging a Python script with
ipdb module: install, insert stubs in source codes and debug.</p>

<p>First install with <code>sudo pip install ipdb</code>.</p>

<p>Then add <code>from ipdb import set_trace</code> at the head into the script,
and add <code>set_trace()</code> at the first place you want the dubugger to stop.</p>

<p>Finally start a shell and run:</p>

<pre><code>$ ipython
...
IPython 4.0.1 ...
...
In [1]: %run filteringdata.py
&gt; /home/leo/docs/playground/pg2dm-python/ch2/filteringdata.py(53)recommend()
     52     # first find nearest neighbor
---&gt; 53     nearest = computeNearestNeighbor(username, users)[0][1]
     54 

ipdb&gt; h
</code></pre>

<p>Frequently used commands include:</p>

<pre><code>a: print args of current function;
b: set or list break points;
c: continue to next break points;
n: next;
s: step;
p &amp; pp: evaluate and print value of an expression;
pp locals(): pretty-print all local variables;
q: quit;
</code></pre>

<p>Use <code>h a</code> to see the help information about command <code>a</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Notes]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/09/120142/"/>
    <updated>2016-02-09T12:01:42+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/09/120142</id>
    <content type="html"><![CDATA[<h1>Setup Go Environment</h1>

<p>Download go1.5.1.linux-amd64.tar.gz from <a href="https://golang.org/">Go homepage</a>,
extract it to folder &ldquo;/usr/local/go&rdquo;.</p>

<p>Add the following lines into ~/.zshenv:</p>

<pre><code>GOROOT=/usr/local/go
PATH=$PATH:$GOROOT/bin
</code></pre>

<p>Run <code>go env</code> to verify the installation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cabal Notes]]></title>
    <link href="http://leetschau.github.io/blog/2016/02/07/103930/"/>
    <updated>2016-02-07T10:39:30+08:00</updated>
    <id>http://leetschau.github.io/blog/2016/02/07/103930</id>
    <content type="html"><![CDATA[<h1>Packages</h1>

<p>Haskell packages can be installed in user level (global, like <code>npm install -g</code>)
or project level (local, like <code>npm install</code>).</p>

<p>The default behavior of cabal is user level:</p>

<pre><code>cabal install &lt;package-name&gt;
</code></pre>

<p>To install package in project level, you need create a sandbox beforehand:</p>

<pre><code>cabal sandbox init     # run in project root folder
cabal install &lt;package-name&gt;
</code></pre>

<p>The global packages are stored in $HOME/.cabal/packages folder,
while local packages are stored in $PROJ_ROOT/.cabal-sandbox/lib folder.</p>
]]></content>
  </entry>
  
</feed>
